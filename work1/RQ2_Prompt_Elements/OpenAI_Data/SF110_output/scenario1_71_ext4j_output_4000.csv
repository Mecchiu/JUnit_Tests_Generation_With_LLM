ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wuvh5eJdBm3iExtH4X4KCL5dsczk,/EvoSuiteBenchmark/scenario1/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory0.java,187.50981378555298,length,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    public Page createPage() {
        return new Page();
    }
}
","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactoryTest {","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactoryTest {

	/**
	* Test case for {@link ObjectFactory#createPage()} method.
	* It tests if the method returns a {@link Page} object.
	*/
	@Test
	void testCreatePage() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page page = objectFactory.createPage();
		assertTrue(page instanceof Page);
	}
}

// Page.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for anonymous complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""pageNumber"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""pageSize"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""totalPages"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""totalResults"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = """", propOrder = {
    ""pageNumber"",
    ""pageSize"",
    ""totalPages"",
    ""totalResults""
})
@XmlRootElement(name = ""page"")
public class Page {

    protected int pageNumber;
    protected int pageSize;
    protected int totalPages;
    protected int totalResults;

    /**
     * Gets the value of the pageNumber property.
     *
     */
    public int getPageNumber() {
        return pageNumber;
    }

    /**
     * Sets the value of the pageNumber property.
     *
     */
    public void setPageNumber(int value) {
        this.pageNumber = value;
    }

    /**
     * Gets the value of the pageSize property.
     *
     */
    public int getPageSize() {
        return pageSize;
    }

    /**
     * Sets the value of the pageSize property.
     *
     */
    public void setPageSize(int value) {
        this.pageSize = value;
    }

    /**
     * Gets the value of the totalPages property.
     *
     */
    public int getTotalPages() {
        return totalPages;
    }

    /**
     * Sets the value of the totalPages property.
     *
     */
    public void setTotalPages(int value) {
        this.totalPages = value;
    }

    /**
     * Gets the value of the totalResults property.
     *
     */
    public int getTotalResults() {
        return totalResults;
    }

    /**
     * Sets the value of the totalResults property.
     *
     */
    public void setTotalResults(int value) {
        this.totalResults = value;
    }

}

// PageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Page}.
* It contains ten unit test cases for the {@link Page#getPageNumber()}, {@link Page#setPageNumber(int)},
* {@link Page#getPageSize()}, {@link Page#setPageSize(int)}, {@link Page#getTotalPages()},
* {@link Page#setTotalPages(int)}, {@link Page#getTotalResults()} and {@link Page#setTotalResults(int)} methods.
*/
class PageTest {
		
	/**
	* Test case for {@link Page#getPageNumber()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetPageNumber() {
		Page page = new Page();
		page.setPageNumber(1);
		assertEquals(1, page.getPageNumber());
	}
	
	/**
	* Test case for {@link Page#setPageNumber(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetPageNumber() {
		Page page = new Page();
		page.setPageNumber(1);
		assertEquals(1, page.getPageNumber());
	}
	
	/**
	* Test case for {@link Page#getPageSize()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetPageSize() {
		Page page = new Page();
		page.setPageSize(10);
		assertEquals(10, page.getPageSize());
	}
	
	/**
	* Test case for {@link Page#setPageSize(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetPageSize() {
		Page page = new Page();
		page.setPageSize(10);
		assertEquals(10, page.getPageSize());
	}
	
	/**
	* Test case for {@link Page#getTotalPages()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetTotalPages() {
		Page page = new Page();
		page.setTotalPages(10);
		assertEquals(10, page.getTotalPages());
	}
	
	/**
	* Test case for {@link Page#setTotalPages(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetTotalPages() {
		Page page = new Page();
		page.setTotalPages(10);
		assertEquals(10, page.getTotalPages());
	}
	
	/**
	* Test case for {@link Page#getTotalResults()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetTotalResults() {
		Page page = new Page();
		page.setTotalResults(100);
		assertEquals(100, page.getTotalResults());
	}
	
	/**
	* Test case for {@link Page#setTotalResults(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetTotalResults() {
		Page page = new Page();
		page.setTotalResults(100);
		assertEquals(100, page.getTotalResults());
	}
}

// PaginationTag.java
package com.tripfilms.os.exttaglib.pagination;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.TagSupport;
import com.tripfilms.os.exttaglib.pagination.datatype.Page;

/**
 * This class is a custom tag that generates a pagination bar.
 * It extends the {@link TagSupport} class.
 *
 * @author  <a href=""mailto:felipe@tripfilms.com"">Felipe S. F. Leao</a>
 * @version 1.0
 */
public class PaginationTag extends TagSupport {

    private static final long serialVersionUID = 1L;
    private Page page;
    private String url;
    private String cssClass;
    private String cssClassSelected;
    private String cssClassDisabled;
    private String cssClassPrevious;
    private String cssClassNext;
    private String cssClassFirst;
    private String cssClassLast;
    private String previousLabel;
    private String nextLabel;
    private String firstLabel;
    private String lastLabel;
    private String previousTitle;
    private String nextTitle;
    private String firstTitle;
    private String lastTitle;
    private String previousDisabledTitle;
    private String nextDisabledTitle;
    private String firstDisabledTitle;
    private String lastDisabledTitle;
    private String previousDisabledLabel;
    private String nextDisabledLabel;
    private String firstDisabledLabel;
    private String lastDisabledLabel;
    private String previousDisabledCssClass;
    private String nextDisabledCssClass;
    private String firstDisabledCssClass;
    private String lastDisabledCssClass;
    private String previousDisabledCssClassSelected;
    private String nextDisabledCssClassSelected;
    private String firstDisabledCssClassSelected;
    private String lastDisabledCssClassSelected;
    private String previousDisabledCssClassDisabled;
    private String nextDisabledCssClassDisabled;
    private String firstDisabledCssClassDisabled;
    private String lastDisabledCssClassDisabled;
    private String previousCssClassSelected;
    private String nextCssClassSelected;
    private String firstCssClassSelected;
    private String lastCssClassSelected;
    private String previousCssClassDisabled;
    private String nextCssClassDisabled;
    private String firstCssClassDisabled;
    private String lastCssClassDisabled;
    private String previousCssClass;
    private String nextCssClass;
    private String firstCssClass;
    private String lastCssClass;
    private String previousTitleSelected;
    private String nextTitleSelected;
    private String firstTitleSelected;
    private String lastTitleSelected;
    private String previousTitleDisabled;
    private String nextTitleDisabled;
    private String firstTitleDisabled;
    private String lastTitleDisabled;
    private String previousLabelSelected;
    private String nextLabelSelected;
    private String firstLabelSelected;
    private String lastLabelSelected;
    private String previousLabelDisabled;
    private String nextLabelDisabled;
    private String firstLabelDisabled;
    private String lastLabelDisabled;
    private String previousCssClassSelectedDisabled;
    private String nextCssClassSelectedDisabled;
    private String firstCssClassSelectedDisabled;
    private String lastCssClassSelectedDisabled;
    private String previousTitleSelectedDisabled;
    private String nextTitleSelectedDisabled;
    private String firstTitleSelectedDisabled;
    private String lastTitleSelectedDisabled;
    private String previousLabelSelectedDisabled;
    private String nextLabelSelectedDisabled;
    private String firstLabelSelectedDisabled;
    private String lastLabelSelectedDisabled;
    private String previousCssClassDisabledSelected;
    private String nextCssClassDisabledSelected;
    private String firstCssClassDisabledSelected;
    private String lastCssClassDisabledSelected;
    private String previousTitleDisabledSelected;
    private String nextTitleDisabledSelected;
    private String firstTitleDisabledSelected;
    private String lastTitleDisabledSelected;
    private String previousLabelDisabledSelected;
    private String nextLabelDisabledSelected;
    private String firstLabelDisabledSelected;
    private String lastLabelDisabledSelected;
    private String previousCssClassDisabledDisabled;
    private String nextCssClassDisabledDisabled;
    private String firstCssClassDisabledDisabled;
    private String lastCssClassDisabledDisabled;
    private String previousTitleDisabledDisabled;
    private String nextTitleDisabledDisabled;
    private String firstTitleDisabledDisabled;
    private String lastTitleDisabledDisabled;
    private String previousLabelDisabledDisabled;
    private String nextLabelDisabledDisabled;
    private String firstLabelDisabledDisabled;
    private String lastLabelDisabledDisabled;
    private String previousCssClassSelectedSelected;
    private String nextCssClassSelectedSelected;
    private String firstCssClassSelectedSelected;
    private String lastCssClassSelectedSelected;
    private String previousTitleSelectedSelected;
    private String nextTitleSelectedSelected;
    private String firstTitleSelectedSelected;
    private String lastTitleSelectedSelected;
    private String previousLabelSelectedSelected;
    private String nextLabelSelectedSelected;
    private String firstLabelSelectedSelected;
    private String lastLabelSelectedSelected;
    private String previousCssClassDisabledDisabledSelected;
    private String nextCssClassDisabledDisabledSelected;
    private String firstCssClassDisabledDisabledSelected;
    private String lastCssClassDisabledDisabledSelected;
    private String previousTitleDisabledDisabledSelected;
    private String nextTitleDisabledDisabledSelected;
    private String firstTitleDisabledDisabledSelected;
    private String lastTitleDisabledDisabledSelected;
    private String previousLabelDisabledDisabledSelected;
    private String nextLabelDisabledDisabledSelected;
    private String firstLabelDisabledDisabledSelected;
    private String lastLabelDisabledDisabledSelected;
    private String previousCssClassDisabledSelectedSelected;
    private String nextCssClassDisabledSelectedSelected;
    private String firstCssClassDisabledSelectedSelected;
    private String lastCssClassDisabledSelectedSelected;
    private String previousTitleDisabledSelectedSelected;
    private String nextTitleDisabledSelectedSelected;
    private String firstTitleDisabledSelectedSelected;
    private String lastTitleDisabledSelectedSelected;
    private String previousLabelDisabledSelectedSelected;
    private String nextLabelDisabledSelectedSelected;
    private String firstLabelDisabledSelectedSelected;
    private String lastLabelDisabledSelectedSelected;
    private String previousCssClassSelectedDisabledSelected;
    private String nextCssClassSelectedDisabledSelected;
    private String firstCssClassSelectedDisabledSelected;
    private String lastCssClassSelectedDisabledSelected;
    private String previousTitleSelectedDisabledSelected;
    private String nextTitleSelectedDisabledSelected;
    private String firstTitleSelectedDisabledSelected;
    private String lastTitleSelectedDisabledSelected;
    private String previousLabelSelectedDisabledSelected;
    private String nextLabelSelectedDisabledSelected;
    private String firstLabelSelectedDisabledSelected;
    private String lastLabelSelectedDisabledSelected;
    private String previousCssClassSelectedSelectedSelected;
    private String nextCssClassSelectedSelectedSelected;
    private String firstCssClassSelectedSelectedSelected;
    private String lastCssClassSelectedSelectedSelected;
    private String previousTitleSelectedSelectedSelected;
    private String nextTitleSelectedSelectedSelected;
    private String firstTitleSelectedSelectedSelected;
    private String lastTitleSelectedSelectedSelected;
    private String previousLabelSelectedSelectedSelected;
    private String nextLabelSelectedSelectedSelected;
    private String firstLabelSelectedSelectedSelected;
    private String lastLabelSelectedSelectedSelected;
    private String previousCssClassDisabledDisabledDisabled;
    private String nextCssClassDisabledDisabledDisabled;
    private String firstCssClassDisabledDisabledDisabled;
    private String lastCssClassDisabledDisabledDisabled;
    private String previousTitleDisabledDisabledDisabled;
    private String nextTitleDisabledDisabledDisabled;
    private String firstTitleDisabledDisabledDis"
cmpl-6wuyi106JLPw5bItrLLt5MHVDKRQA,/EvoSuiteBenchmark/scenario1/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory1.java,141.25149488449097,length,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    public StaticPage createStaticPage() {
        return new StaticPage();
    }
}
","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactoryTest {","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactoryTest {

	/**
	* Test case for {@link ObjectFactory#createStaticPage()} method.
	* It tests if the method returns a new instance of {@link StaticPage} class.
	*/
	@Test
	void testCreateStaticPage() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage staticPage = objectFactory.createStaticPage();
		assertNotNull(staticPage);
		assertTrue(staticPage instanceof StaticPage);
	}
}

// StaticPage.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for anonymous complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""page"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""pageSize"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""total"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""totalPages"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""hasNext"" type=""{http://www.w3.org/2001/XMLSchema}boolean""/>
 *         &lt;element name=""hasPrevious"" type=""{http://www.w3.org/2001/XMLSchema}boolean""/>
 *         &lt;element name=""nextPage"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""previousPage"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""firstPage"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""lastPage"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = """", propOrder = {
    ""page"",
    ""pageSize"",
    ""total"",
    ""totalPages"",
    ""hasNext"",
    ""hasPrevious"",
    ""nextPage"",
    ""previousPage"",
    ""firstPage"",
    ""lastPage""
})
@XmlRootElement(name = ""staticPage"")
public class StaticPage {

    protected int page;
    protected int pageSize;
    protected int total;
    protected int totalPages;
    protected boolean hasNext;
    protected boolean hasPrevious;
    protected int nextPage;
    protected int previousPage;
    protected int firstPage;
    protected int lastPage;

    /**
     * Gets the value of the page property.
     *
     */
    public int getPage() {
        return page;
    }

    /**
     * Sets the value of the page property.
     *
     */
    public void setPage(int value) {
        this.page = value;
    }

    /**
     * Gets the value of the pageSize property.
     *
     */
    public int getPageSize() {
        return pageSize;
    }

    /**
     * Sets the value of the pageSize property.
     *
     */
    public void setPageSize(int value) {
        this.pageSize = value;
    }

    /**
     * Gets the value of the total property.
     *
     */
    public int getTotal() {
        return total;
    }

    /**
     * Sets the value of the total property.
     *
     */
    public void setTotal(int value) {
        this.total = value;
    }

    /**
     * Gets the value of the totalPages property.
     *
     */
    public int getTotalPages() {
        return totalPages;
    }

    /**
     * Sets the value of the totalPages property.
     *
     */
    public void setTotalPages(int value) {
        this.totalPages = value;
    }

    /**
     * Gets the value of the hasNext property.
     *
     */
    public boolean isHasNext() {
        return hasNext;
    }

    /**
     * Sets the value of the hasNext property.
     *
     */
    public void setHasNext(boolean value) {
        this.hasNext = value;
    }

    /**
     * Gets the value of the hasPrevious property.
     *
     */
    public boolean isHasPrevious() {
        return hasPrevious;
    }

    /**
     * Sets the value of the hasPrevious property.
     *
     */
    public void setHasPrevious(boolean value) {
        this.hasPrevious = value;
    }

    /**
     * Gets the value of the nextPage property.
     *
     */
    public int getNextPage() {
        return nextPage;
    }

    /**
     * Sets the value of the nextPage property.
     *
     */
    public void setNextPage(int value) {
        this.nextPage = value;
    }

    /**
     * Gets the value of the previousPage property.
     *
     */
    public int getPreviousPage() {
        return previousPage;
    }

    /**
     * Sets the value of the previousPage property.
     *
     */
    public void setPreviousPage(int value) {
        this.previousPage = value;
    }

    /**
     * Gets the value of the firstPage property.
     *
     */
    public int getFirstPage() {
        return firstPage;
    }

    /**
     * Sets the value of the firstPage property.
     *
     */
    public void setFirstPage(int value) {
        this.firstPage = value;
    }

    /**
     * Gets the value of the lastPage property.
     *
     */
    public int getLastPage() {
        return lastPage;
    }

    /**
     * Sets the value of the lastPage property.
     *
     */
    public void setLastPage(int value) {
        this.lastPage = value;
    }

}

// StaticPageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StaticPage}.
* It contains ten unit test cases for the {@link StaticPage#getPage()} method.
*/
class StaticPageTest {
		
	/**
	* Test case for {@link StaticPage#getPage()} method.
	* It tests if the method returns the value of the {@link StaticPage#page} field.
	*/
	@Test
	void testGetPage() {
		StaticPage staticPage = new StaticPage();
		int page = 1;
		staticPage.setPage(page);
		assertEquals(page, staticPage.getPage());
	}
}

// StaticPageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StaticPage}.
* It contains ten unit test cases for the {@link StaticPage#getPage()} method.
*/
class StaticPageTest {
		
	/**
	* Test case for {@link StaticPage#getPage()} method.
	* It tests if the method returns the value of the {@link StaticPage#page} field.
	*/
	@Test
	void testGetPage() {
		StaticPage staticPage = new StaticPage();
		int page = 1;
		staticPage.setPage(page);
		assertEquals(page, staticPage.getPage());
	}
}

// StaticPageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StaticPage}.
* It contains ten unit test cases for the {@link StaticPage#getPage()} method.
*/
class StaticPageTest {
		
	/**
	* Test case for {@link StaticPage#getPage()} method.
	* It tests if the method returns the value of the {@link StaticPage#page} field.
	*/
	@Test
	void testGetPage() {
		StaticPage staticPage = new StaticPage();
		int page = 1;
		staticPage.setPage(page);
		assertEquals(page, staticPage.getPage());
	}
}

// StaticPageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StaticPage}.
* It contains ten unit test cases for the {@link StaticPage#getPage()} method.
*/
class StaticPageTest {
		
	/**
	* Test case for {@link StaticPage#getPage()} method.
	* It tests if the method returns the value of the {@link StaticPage#page} field.
	*/
	@Test
	void testGetPage() {
		StaticPage staticPage = new StaticPage();
		int page = 1;
		staticPage.setPage(page);
		assertEquals(page, staticPage.getPage());
	}
}

// StaticPageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StaticPage}.
* It contains ten unit test cases for the {@link StaticPage#getPage()} method.
*/
class StaticPageTest {
		
	/**
	* Test case for {@link StaticPage#getPage()} method.
	* It tests if the method returns the value of the {@link StaticPage#page} field.
	*/
	@Test
	void testGetPage() {
		StaticPage staticPage = new StaticPage();
		int page = 1;
		staticPage.setPage(page);
		assertEquals(page, staticPage.getPage());
	}
}

// StaticPageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StaticPage}.
* It contains ten unit test cases for the {@link StaticPage#getPage()} method.
*/
class StaticPageTest {
		
	/**
	* Test case for {@link StaticPage#getPage()} method.
	* It tests if the method returns the value of the {@link StaticPage#page} field.
	*/
	@Test
	void testGetPage() {
		StaticPage staticPage = new StaticPage();
		int page = 1;
		staticPage.setPage(page);
		assertEquals(page, staticPage.getPage());
	}
}

// StaticPageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StaticPage}.
* It contains ten unit test cases for the {@link StaticPage#getPage()} method.
*/
class StaticPageTest {
		
	/**
	* Test case for {@link StaticPage#getPage()} method.
	* It tests if the method returns the value of the {@link StaticPage#page} field.
	*/
	@Test
	void testGetPage() {
		StaticPage staticPage = new StaticPage();
		int page = 1;
		staticPage.setPage(page);
		assertEquals(page, staticPage.getPage());
	}
}

// StaticPageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StaticPage}.
* It contains ten unit test cases for the {@link StaticPage#getPage()} method.
*/
class StaticPageTest {
		
	/**
	* Test case for {@link StaticPage#getPage()} method.
	* It tests if the method returns the value of the {@link StaticPage#page} field.
	*/
	@Test
	void testGetPage() {
		StaticPage staticPage = new StaticPage();
		int page = 1;
		staticPage.setPage(page);
		assertEquals(page, staticPage.getPage());
	}
}

// StaticPageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StaticPage}.
* It contains ten unit test cases for the {@link StaticPage#getPage()} method.
*/
class StaticPageTest {
		
	/**
	* Test case for {@link StaticPage#getPage()} method.
	* It tests if the method returns the value of the {@link StaticPage#page} field.
	*/
	@Test
	void testGetPage() {
		StaticPage staticPage = new StaticPage();
		int page = 1;
		staticPage.setPage(page);
		assertEquals(page, staticPage.getPage());
	}
}

// StaticPageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StaticPage}.
* It contains ten unit test cases for the {@link StaticPage#getPage()} method.
*/
class StaticPageTest {
		
	/**
	* Test case for {@link StaticPage#getPage()} method.
	* It tests if the method returns the value of the {@link StaticPage#page} field.
	*/
	@Test
	void testGetPage() {
		StaticPage staticPage = new StaticPage();
		int page = 1;
		staticPage.setPage(page);
		assertEquals(page, staticPage.getPage());
	}
}

// StaticPageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StaticPage}.
*"
cmpl-6wv0zr3nHypdmKvfkT9BGUnyZkcvc,/EvoSuiteBenchmark/scenario1/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory2.java,88.35291361808777,stop,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    public Pagination createPagination() {
        return new Pagination();
    }
}
","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactoryTest {","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactoryTest {

	/**
	* Test case for {@link ObjectFactory#createPagination()} method.
	* It tests if the method returns a {@link Pagination} object.
	*/
	@Test
	void testCreatePagination() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pagination pagination = objectFactory.createPagination();
		assertTrue(pagination instanceof Pagination);
	}
}

// Pagination.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for anonymous complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""currentPage"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""totalPages"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""totalResults"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""resultsPerPage"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = """", propOrder = {
    ""currentPage"",
    ""totalPages"",
    ""totalResults"",
    ""resultsPerPage""
})
@XmlRootElement(name = ""pagination"")
public class Pagination {

    protected int currentPage;
    protected int totalPages;
    protected int totalResults;
    protected int resultsPerPage;

    /**
     * Gets the value of the currentPage property.
     *
     */
    public int getCurrentPage() {
        return currentPage;
    }

    /**
     * Sets the value of the currentPage property.
     *
     */
    public void setCurrentPage(int value) {
        this.currentPage = value;
    }

    /**
     * Gets the value of the totalPages property.
     *
     */
    public int getTotalPages() {
        return totalPages;
    }

    /**
     * Sets the value of the totalPages property.
     *
     */
    public void setTotalPages(int value) {
        this.totalPages = value;
    }

    /**
     * Gets the value of the totalResults property.
     *
     */
    public int getTotalResults() {
        return totalResults;
    }

    /**
     * Sets the value of the totalResults property.
     *
     */
    public void setTotalResults(int value) {
        this.totalResults = value;
    }

    /**
     * Gets the value of the resultsPerPage property.
     *
     */
    public int getResultsPerPage() {
        return resultsPerPage;
    }

    /**
     * Sets the value of the resultsPerPage property.
     *
     */
    public void setResultsPerPage(int value) {
        this.resultsPerPage = value;
    }

}

// PaginationTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Pagination}.
* It contains ten unit test cases for the {@link Pagination#getCurrentPage()}, {@link Pagination#setCurrentPage(int)},
* {@link Pagination#getTotalPages()}, {@link Pagination#setTotalPages(int)}, {@link Pagination#getTotalResults()},
* {@link Pagination#setTotalResults(int)}, {@link Pagination#getResultsPerPage()} and {@link Pagination#setResultsPerPage(int)} methods.
*/
class PaginationTest {
		
	/**
	* Test case for {@link Pagination#getCurrentPage()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetCurrentPage() {
		Pagination pagination = new Pagination();
		pagination.setCurrentPage(1);
		assertEquals(1, pagination.getCurrentPage());
	}
	
	/**
	* Test case for {@link Pagination#setCurrentPage(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetCurrentPage() {
		Pagination pagination = new Pagination();
		pagination.setCurrentPage(1);
		assertEquals(1, pagination.getCurrentPage());
	}
	
	/**
	* Test case for {@link Pagination#getTotalPages()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetTotalPages() {
		Pagination pagination = new Pagination();
		pagination.setTotalPages(1);
		assertEquals(1, pagination.getTotalPages());
	}
	
	/**
	* Test case for {@link Pagination#setTotalPages(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetTotalPages() {
		Pagination pagination = new Pagination();
		pagination.setTotalPages(1);
		assertEquals(1, pagination.getTotalPages());
	}
	
	/**
	* Test case for {@link Pagination#getTotalResults()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetTotalResults() {
		Pagination pagination = new Pagination();
		pagination.setTotalResults(1);
		assertEquals(1, pagination.getTotalResults());
	}
	
	/**
	* Test case for {@link Pagination#setTotalResults(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetTotalResults() {
		Pagination pagination = new Pagination();
		pagination.setTotalResults(1);
		assertEquals(1, pagination.getTotalResults());
	}
	
	/**
	* Test case for {@link Pagination#getResultsPerPage()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetResultsPerPage() {
		Pagination pagination = new Pagination();
		pagination.setResultsPerPage(1);
		assertEquals(1, pagination.getResultsPerPage());
	}
	
	/**
	* Test case for {@link Pagination#setResultsPerPage(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetResultsPerPage() {
		Pagination pagination = new Pagination();
		pagination.setResultsPerPage(1);
		assertEquals(1, pagination.getResultsPerPage());
	}
}

// package-info.java
/**
 * This package contains the classes that represent the data type of the pagination tag.
 */
package com.tripfilms.os.exttaglib.pagination.datatype;

// package-infoTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link package-info}.
* It contains one unit test case for the {@link package-info} class.
*/
class package-infoTest {
		
	/**
	* Test case for {@link package-info} class.
	* It tests if the class is a valid class.
	*/
	@Test
	void testPackageInfo() {
		assertTrue(true);
	}
}"
cmpl-6wv2PLkNEWRqnD898fTYOJc8pJhMz,/EvoSuiteBenchmark/scenario1/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory3.java,147.88266730308533,length,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    public Pages createPages() {
        return new Pages();
    }
}
","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactoryTest {","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactoryTest {

	/**
	* Test case for {@link ObjectFactory#createPages()}.
	*/
	@Test
	void testCreatePages() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pages pages = objectFactory.createPages();
		assertNotNull(pages);
	}
}

// Pages.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for anonymous complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""page"" type=""{http://www.tripfilms.com/os/exttaglib/pagination/datatype}page"" maxOccurs=""unbounded""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = """", propOrder = {
    ""page""
})
@XmlRootElement(name = ""pages"")
public class Pages {

    @XmlElement(required = true)
    protected List<Page> page;

    /**
     * Gets the value of the page property.
     *
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the page property.
     *
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPage().add(newItem);
     * </pre>
     *
     *
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Page }
     *
     *
     */
    public List<Page> getPage() {
        if (page == null) {
            page = new ArrayList<Page>();
        }
        return this.page;
    }

}

// PagesTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Pages}.
* It contains ten unit test cases for the {@link Pages#getPage()} method.
*/
class PagesTest {
		
	/**
	* Test case for {@link Pages#getPage()}.
	*/
	@Test
	void testGetPage() {
		Pages pages = new Pages();
		List<Page> pageList = new ArrayList<Page>();
		pages.setPage(pageList);
		assertEquals(pageList, pages.getPage());
	}
}

// Page.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for page complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name=""page"">
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;attribute name=""number"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}int"" />
 *       &lt;attribute name=""url"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}string"" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""page"")
public class Page {

    @XmlAttribute(name = ""number"", required = true)
    protected int number;
    @XmlAttribute(name = ""url"", required = true)
    protected String url;

    /**
     * Gets the value of the number property.
     *
     */
    public int getNumber() {
        return number;
    }

    /**
     * Sets the value of the number property.
     *
     */
    public void setNumber(int value) {
        this.number = value;
    }

    /**
     * Gets the value of the url property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    public String getUrl() {
        return url;
    }

    /**
     * Sets the value of the url property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setUrl(String value) {
        this.url = value;
    }

}

// PageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Page}.
* It contains ten unit test cases for the {@link Page#getNumber()} method.
*/
class PageTest {
		
	/**
	* Test case for {@link Page#getNumber()}.
	*/
	@Test
	void testGetNumber() {
		Page page = new Page();
		page.setNumber(1);
		assertEquals(1, page.getNumber());
	}
}

// Pagination.java
package com.tripfilms.os.exttaglib.pagination;

import com.tripfilms.os.exttaglib.pagination.datatype.Pages;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.SimpleTagSupport;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

/**
 * <p>Tag handler class for the pagination tag.</p>
 *
 * @author <a href=""mailto:fzammetti@omnytex.com"">Frank W. Zammetti</a>.
 */
public class Pagination extends SimpleTagSupport {

  /**
   * The number of pages to display.
   */
  private int numberOfPages;

  /**
   * The current page.
   */
  private int currentPage;

  /**
   * The base URL to use for the links.
   */
  private String baseUrl;

  /**
   * The number of pages to display on either side of the current page.
   */
  private int pagesToDisplay;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssClass;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssId;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssStyle;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssClassCurrent;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssIdCurrent;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssStyleCurrent;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssClassFirst;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssIdFirst;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssStyleFirst;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssClassLast;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssIdLast;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssStyleLast;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssClassPrevious;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssIdPrevious;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssStylePrevious;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssClassNext;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssIdNext;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssStyleNext;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssClassEllipsis;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssIdEllipsis;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssStyleEllipsis;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssClassDisabled;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssIdDisabled;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssStyleDisabled;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssClassDisabledCurrent;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssIdDisabledCurrent;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssStyleDisabledCurrent;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssClassDisabledFirst;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssIdDisabledFirst;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssStyleDisabledFirst;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssClassDisabledLast;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssIdDisabledLast;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssStyleDisabledLast;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssClassDisabledPrevious;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssIdDisabledPrevious;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssStyleDisabledPrevious;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssClassDisabledNext;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssIdDisabledNext;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssStyleDisabledNext;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssClassDisabledEllipsis;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssIdDisabledEllipsis;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssStyleDisabledEllipsis;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssClassDisabledEllipsisCurrent;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssIdDisabledEllipsisCurrent;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssStyleDisabledEllipsisCurrent;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssClassDisabledEllipsisFirst;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssIdDisabledEllipsisFirst;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssStyleDisabledEllipsisFirst;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssClassDisabledEllipsisLast;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssIdDisabledEllipsisLast;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssStyleDisabledEllipsisLast;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssClassDisabledEllipsisPrevious;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssIdDisabledEllipsisPrevious;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssStyleDisabledEllipsisPrevious;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssClassDisabledEllipsisNext;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssIdDisabledEllipsisNext;

  /**
   * The number of pages to display on either side of the current page.
   */
  private String cssStyleDisabledEllipsisNext;

  /**
   * The number of pages to display on either side of the current page.
"
cmpl-6wv4nURJg9RTkfsHO9VO98yb3R1rA,/EvoSuiteBenchmark/scenario1/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions0.java,99.25998520851135,stop,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    public static String dateFormat(Date pDateTime, String pPattern) {
        if (pDateTime == null)
            return """";
        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);
        return oFormatter.format(pDateTime);
    }
}
","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateFormat(Date, String)} method.
*/
class FunctionsTest {","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateFormat(Date, String)} method.
*/
class FunctionsTest {

	/**
	* Test case for {@link Functions#dateFormat(Date, String)} method.
	* Test data: {@code null} date.
	* Expected result: {@code """"} string.
	*/
	@Test
	void testDateFormat_NullDate() {
		assertEquals("""", Functions.dateFormat(null, ""dd/MM/yyyy""));
	}
	
	/**
	* Test case for {@link Functions#dateFormat(Date, String)} method.
	* Test data: {@code null} pattern.
	* Expected result: {@code """"} string.
	*/
	@Test
	void testDateFormat_NullPattern() {
		assertEquals("""", Functions.dateFormat(new Date(), null));
	}
	
	/**
	* Test case for {@link Functions#dateFormat(Date, String)} method.
	* Test data: {@code null} date and pattern.
	* Expected result: {@code """"} string.
	*/
	@Test
	void testDateFormat_NullDateAndPattern() {
		assertEquals("""", Functions.dateFormat(null, null));
	}
	
	/**
	* Test case for {@link Functions#dateFormat(Date, String)} method.
	* Test data: {@code ""dd/MM/yyyy""} pattern.
	* Expected result: {@code ""01/01/1970""} string.
	*/
	@Test
	void testDateFormat_Pattern_ddMMyyyy() {
		assertEquals(""01/01/1970"", Functions.dateFormat(new Date(0), ""dd/MM/yyyy""));
	}
	
	/**
	* Test case for {@link Functions#dateFormat(Date, String)} method.
	* Test data: {@code ""dd/MM/yyyy HH:mm:ss""} pattern.
	* Expected result: {@code ""01/01/1970 00:00:00""} string.
	*/
	@Test
	void testDateFormat_Pattern_ddMMyyyyHHmmss() {
		assertEquals(""01/01/1970 00:00:00"", Functions.dateFormat(new Date(0), ""dd/MM/yyyy HH:mm:ss""));
	}
	
	/**
	* Test case for {@link Functions#dateFormat(Date, String)} method.
	* Test data: {@code ""dd/MM/yyyy HH:mm:ss.SSS""} pattern.
	* Expected result: {@code ""01/01/1970 00:00:00.000""} string.
	*/
	@Test
	void testDateFormat_Pattern_ddMMyyyyHHmmssSSS() {
		assertEquals(""01/01/1970 00:00:00.000"", Functions.dateFormat(new Date(0), ""dd/MM/yyyy HH:mm:ss.SSS""));
	}
	
	/**
	* Test case for {@link Functions#dateFormat(Date, String)} method.
	* Test data: {@code ""dd/MM/yyyy HH:mm:ss.SSS""} pattern.
	* Expected result: {@code ""01/01/1970 00:00:00.000""} string.
	*/
	@Test
	void testDateFormat_Pattern_ddMMyyyyHHmmssSSS_WithMilliseconds() {
		assertEquals(""01/01/1970 00:00:00.123"", Functions.dateFormat(new Date(123), ""dd/MM/yyyy HH:mm:ss.SSS""));
	}
	
	/**
	* Test case for {@link Functions#dateFormat(Date, String)} method.
	* Test data: {@code ""dd/MM/yyyy HH:mm:ss.SSS""} pattern.
	* Expected result: {@code ""01/01/1970 00:00:00.000""} string.
	*/
	@Test
	void testDateFormat_Pattern_ddMMyyyyHHmmssSSS_WithMilliseconds2() {
		assertEquals(""01/01/1970 00:00:00.123"", Functions.dateFormat(new Date(1234), ""dd/MM/yyyy HH:mm:ss.SSS""));
	}
	
	/**
	* Test case for {@link Functions#dateFormat(Date, String)} method.
	* Test data: {@code ""dd/MM/yyyy HH:mm:ss.SSS""} pattern.
	* Expected result: {@code ""01/01/1970 00:00:00.000""} string.
	*/
	@Test
	void testDateFormat_Pattern_ddMMyyyyHHmmssSSS_WithMilliseconds3() {
		assertEquals(""01/01/1970 00:00:00.123"", Functions.dateFormat(new Date(12345), ""dd/MM/yyyy HH:mm:ss.SSS""));
	}
	
	/**
	* Test case for {@link Functions#dateFormat(Date, String)} method.
	* Test data: {@code ""dd/MM/yyyy HH:mm:ss.SSS""} pattern.
	* Expected result: {@code ""01/01/1970 00:00:00.000""} string.
	*/
	@Test
	void testDateFormat_Pattern_ddMMyyyyHHmmssSSS_WithMilliseconds4() {
		assertEquals(""01/01/1970 00:00:00.123"", Functions.dateFormat(new Date(123456), ""dd/MM/yyyy HH:mm:ss.SSS""));
	}
	
	/**
	* Test case for {@link Functions#dateFormat(Date, String)} method.
	* Test data: {@code ""dd/MM/yyyy HH:mm:ss.SSS""} pattern.
	* Expected result: {@code ""01/01/1970 00:00:00.000""} string.
	*/
	@Test
	void testDateFormat_Pattern_ddMMyyyyHHmmssSSS_WithMilliseconds5() {
		assertEquals(""01/01/1970 00:00:00.123"", Functions.dateFormat(new Date(1234567), ""dd/MM/yyyy HH:mm:ss.SSS""));
	}
	
	/**
	* Test case for {@link Functions#dateFormat(Date, String)} method.
	* Test data: {@code ""dd/MM/yyyy HH:mm:ss.SSS""} pattern.
	* Expected result: {@code ""01/01/1970 00:00:00.000""} string.
	*/
	@Test
	void testDateFormat_Pattern_ddMMyyyyHHmmssSSS_WithMilliseconds6() {
		assertEquals(""01/01/1970 00:00:00.123"", Functions.dateFormat(new Date(12345678), ""dd/MM/yyyy HH:mm:ss.SSS""));
	}
	
	/**
	* Test case for {@link Functions#dateFormat(Date, String)} method.
	* Test data: {@code ""dd/MM/yyyy HH:mm:ss.SSS""} pattern.
	* Expected result: {@code ""01/01/1970 00:00:00.000""} string.
	*/
	@Test
	void testDateFormat_Pattern_ddMMyyyyHHmmssSSS_WithMilliseconds7() {
		assertEquals(""01/01/1970 00:00:00.123"", Functions.dateFormat(new Date(123456789), ""dd/MM/yyyy HH:mm:ss.SSS""));
	}
	
	/**
	* Test case for {@link Functions#dateFormat(Date, String)} method.
	* Test data: {@code ""dd/MM/yyyy HH:mm:ss.SSS""} pattern.
	* Expected result: {@code ""01/01/1970 00:00:00.000""} string.
	*/
	@Test
	void testDateFormat_Pattern_ddMMyyyyHHmmssSSS_WithMilliseconds8() {
		assertEquals(""01/01/1970 00:00:00.123"", Functions.dateFormat(new Date(1234567890), ""dd/MM/yyyy HH:mm:ss.SSS""));
	}
	
	/**
	* Test case for {@link Functions#dateFormat(Date, String)} method.
	* Test data: {@code ""dd/MM/yyyy HH:mm:ss.SSS""} pattern.
	* Expected result: {@code ""01/01/1970 00:00:00.000""} string.
	*/
	@Test
	void testDateFormat_Pattern_ddMMyyyyHHmmssSSS_WithMilliseconds9() {
		assertEquals(""01/01/1970 00:00:00.123"", Functions.dateFormat(new Date(12345678901L), ""dd/MM/yyyy HH:mm:ss.SSS""));
	}
	
	/**
	* Test case for {@link Functions#dateFormat(Date, String)} method.
	* Test data: {@code ""dd/MM/yyyy HH:mm:ss.SSS""} pattern.
	* Expected result: {@code ""01/01/1970 00:00:00.000""} string.
	*/
	@Test
	void testDateFormat_Pattern_ddMMyyyyHHmmssSSS_WithMilliseconds10() {
		assertEquals(""01/01/1970 00:00:00.123"", Functions.dateFormat(new Date(123456789012L), ""dd/MM/yyyy HH:mm:ss.SSS""));
	}
	
}"
cmpl-6wv7vYZzlnEwuoXL9Ba7e6fbK2Vnn,/EvoSuiteBenchmark/scenario1/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions1.java,159.68501043319702,stop,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    public static String addS(String pText) {
        if (pText == null || pText.trim().equals(""""))
            return """";
        if (pText.charAt(pText.length() - 1) == 's')
            return pText + ""'"";
        else
            return pText + ""'s"";
    }
}
","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#addS(String)} method.
*/
class FunctionsTest {","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#addS(String)} method.
*/
class FunctionsTest {

	/**
	* Test case for {@link Functions#addS(String)} method.
	* Test case for the following input value :
	* <ul>
	* 	<li><code>null</code></li>
	* </ul>
	* @throws Exception
	*/
	@Test
	public void testAddS_1() throws Exception {
		// Arrange
		String pText = null;
		
		// Act
		String result = Functions.addS(pText);
		
		// Assert result
		assertEquals("""", result);
	}
	
	/**
	* Test case for {@link Functions#addS(String)} method.
	* Test case for the following input value :
	* <ul>
	* 	<li><code>""""</code></li>
	* </ul>
	* @throws Exception
	*/
	@Test
	public void testAddS_2() throws Exception {
		// Arrange
		String pText = """";
		
		// Act
		String result = Functions.addS(pText);
		
		// Assert result
		assertEquals("""", result);
	}
	
	/**
	* Test case for {@link Functions#addS(String)} method.
	* Test case for the following input value :
	* <ul>
	* 	<li><code>"" ""</code></li>
	* </ul>
	* @throws Exception
	*/
	@Test
	public void testAddS_3() throws Exception {
		// Arrange
		String pText = "" "";
		
		// Act
		String result = Functions.addS(pText);
		
		// Assert result
		assertEquals("""", result);
	}
	
	/**
	* Test case for {@link Functions#addS(String)} method.
	* Test case for the following input value :
	* <ul>
	* 	<li><code>""test""</code></li>
	* </ul>
	* @throws Exception
	*/
	@Test
	public void testAddS_4() throws Exception {
		// Arrange
		String pText = ""test"";
		
		// Act
		String result = Functions.addS(pText);
		
		// Assert result
		assertEquals(""test's"", result);
	}
	
	/**
	* Test case for {@link Functions#addS(String)} method.
	* Test case for the following input value :
	* <ul>
	* 	<li><code>""test ""</code></li>
	* </ul>
	* @throws Exception
	*/
	@Test
	public void testAddS_5() throws Exception {
		// Arrange
		String pText = ""test "";
		
		// Act
		String result = Functions.addS(pText);
		
		// Assert result
		assertEquals(""test's"", result);
	}
	
	/**
	* Test case for {@link Functions#addS(String)} method.
	* Test case for the following input value :
	* <ul>
	* 	<li><code>""test s""</code></li>
	* </ul>
	* @throws Exception
	*/
	@Test
	public void testAddS_6() throws Exception {
		// Arrange
		String pText = ""test s"";
		
		// Act
		String result = Functions.addS(pText);
		
		// Assert result
		assertEquals(""test s's"", result);
	}
	
	/**
	* Test case for {@link Functions#addS(String)} method.
	* Test case for the following input value :
	* <ul>
	* 	<li><code>""test s ""</code></li>
	* </ul>
	* @throws Exception
	*/
	@Test
	public void testAddS_7() throws Exception {
		// Arrange
		String pText = ""test s "";
		
		// Act
		String result = Functions.addS(pText);
		
		// Assert result
		assertEquals(""test s's"", result);
	}
	
	/**
	* Test case for {@link Functions#addS(String)} method.
	* Test case for the following input value :
	* <ul>
	* 	<li><code>""test s s""</code></li>
	* </ul>
	* @throws Exception
	*/
	@Test
	public void testAddS_8() throws Exception {
		// Arrange
		String pText = ""test s s"";
		
		// Act
		String result = Functions.addS(pText);
		
		// Assert result
		assertEquals(""test s s's"", result);
	}
	
	/**
	* Test case for {@link Functions#addS(String)} method.
	* Test case for the following input value :
	* <ul>
	* 	<li><code>""test s s ""</code></li>
	* </ul>
	* @throws Exception
	*/
	@Test
	public void testAddS_9() throws Exception {
		// Arrange
		String pText = ""test s s "";
		
		// Act
		String result = Functions.addS(pText);
		
		// Assert result
		assertEquals(""test s s's"", result);
	}
	
	/**
	* Test case for {@link Functions#addS(String)} method.
	* Test case for the following input value :
	* <ul>
	* 	<li><code>""test s s s""</code></li>
	* </ul>
	* @throws Exception
	*/
	@Test
	public void testAddS_10() throws Exception {
		// Arrange
		String pText = ""test s s s"";
		
		// Act
		String result = Functions.addS(pText);
		
		// Assert result
		assertEquals(""test s s s's"", result);
	}
	
}"
cmpl-6wv8yLDAJMfVY0un1lmlJchLqLaw4,/EvoSuiteBenchmark/scenario1/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions2.java,179.98024344444275,length,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    public static long dateToMilliseconds(Date pDateTime) {
        if (pDateTime == null)
            return 0;
        Calendar c = Calendar.getInstance();
        c.setTime(pDateTime);
        return c.getTimeInMillis();
    }
}
","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class FunctionsTest {","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class FunctionsTest {

	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code null}.
	* Expected result: {@code 0}.
	*/
	@Test
	void testDateToMilliseconds_Null() {
		Date date = null;
		long expected = 0;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(0)}.
	* Expected result: {@code 0}.
	*/
	@Test
	void testDateToMilliseconds_Zero() {
		Date date = new Date(0);
		long expected = 0;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1)}.
	* Expected result: {@code 1}.
	*/
	@Test
	void testDateToMilliseconds_One() {
		Date date = new Date(1);
		long expected = 1;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1000)}.
	* Expected result: {@code 1000}.
	*/
	@Test
	void testDateToMilliseconds_OneThousand() {
		Date date = new Date(1000);
		long expected = 1000;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1001)}.
	* Expected result: {@code 1001}.
	*/
	@Test
	void testDateToMilliseconds_OneThousandOne() {
		Date date = new Date(1001);
		long expected = 1001;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1002)}.
	* Expected result: {@code 1002}.
	*/
	@Test
	void testDateToMilliseconds_OneThousandTwo() {
		Date date = new Date(1002);
		long expected = 1002;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1003)}.
	* Expected result: {@code 1003}.
	*/
	@Test
	void testDateToMilliseconds_OneThousandThree() {
		Date date = new Date(1003);
		long expected = 1003;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1004)}.
	* Expected result: {@code 1004}.
	*/
	@Test
	void testDateToMilliseconds_OneThousandFour() {
		Date date = new Date(1004);
		long expected = 1004;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1005)}.
	* Expected result: {@code 1005}.
	*/
	@Test
	void testDateToMilliseconds_OneThousandFive() {
		Date date = new Date(1005);
		long expected = 1005;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1006)}.
	* Expected result: {@code 1006}.
	*/
	@Test
	void testDateToMilliseconds_OneThousandSix() {
		Date date = new Date(1006);
		long expected = 1006;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
}

// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class FunctionsTest {
		
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code null}.
	* Expected result: {@code 0}.
	*/
	@Test
	void testDateToMilliseconds_Null() {
		Date date = null;
		long expected = 0;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(0)}.
	* Expected result: {@code 0}.
	*/
	@Test
	void testDateToMilliseconds_Zero() {
		Date date = new Date(0);
		long expected = 0;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1)}.
	* Expected result: {@code 1}.
	*/
	@Test
	void testDateToMilliseconds_One() {
		Date date = new Date(1);
		long expected = 1;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1000)}.
	* Expected result: {@code 1000}.
	*/
	@Test
	void testDateToMilliseconds_OneThousand() {
		Date date = new Date(1000);
		long expected = 1000;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1001)}.
	* Expected result: {@code 1001}.
	*/
	@Test
	void testDateToMilliseconds_OneThousandOne() {
		Date date = new Date(1001);
		long expected = 1001;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1002)}.
	* Expected result: {@code 1002}.
	*/
	@Test
	void testDateToMilliseconds_OneThousandTwo() {
		Date date = new Date(1002);
		long expected = 1002;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1003)}.
	* Expected result: {@code 1003}.
	*/
	@Test
	void testDateToMilliseconds_OneThousandThree() {
		Date date = new Date(1003);
		long expected = 1003;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1004)}.
	* Expected result: {@code 1004}.
	*/
	@Test
	void testDateToMilliseconds_OneThousandFour() {
		Date date = new Date(1004);
		long expected = 1004;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1005)}.
	* Expected result: {@code 1005}.
	*/
	@Test
	void testDateToMilliseconds_OneThousandFive() {
		Date date = new Date(1005);
		long expected = 1005;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1006)}.
	* Expected result: {@code 1006}.
	*/
	@Test
	void testDateToMilliseconds_OneThousandSix() {
		Date date = new Date(1006);
		long expected = 1006;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
}

// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class FunctionsTest {
		
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code null}.
	* Expected result: {@code 0}.
	*/
	@Test
	void testDateToMilliseconds_Null() {
		Date date = null;
		long expected = 0;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(0)}.
	* Expected result: {@code 0}.
	*/
	@Test
	void testDateToMilliseconds_Zero() {
		Date date = new Date(0);
		long expected = 0;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1)}.
	* Expected result: {@code 1}.
	*/
	@Test
	void testDateToMilliseconds_One() {
		Date date = new Date(1);
		long expected = 1;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1000)}.
	* Expected result: {@code 1000}.
	*/
	@Test
	void testDateToMilliseconds_OneThousand() {
		Date date = new Date(1000);
		long expected = 1000;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1001)}.
	* Expected result: {@code 1001}.
	*/
	@Test
	void testDateToMilliseconds_OneThousandOne() {
		Date date = new Date(1001);
		long expected = 1001;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1002)}.
	* Expected result: {@code 1002}.
	*/
	@Test
	void testDateToMilliseconds_OneThousandTwo() {
		Date date = new Date(1002);
		long expected = 1002;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1003)}.
	* Expected result: {@code 1003}.
	*/
	@Test
	void testDateToMilliseconds_OneThousandThree() {
		Date date = new Date(1003);
		long expected = 1003;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1004)}.
	* Expected result: {@code 1004}.
	*/
	@Test
	void testDateToMilliseconds_OneThousandFour() {
		Date date = new Date(1004);
		long expected = 1004;
		long actual = Functions.dateToMilliseconds(date);
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link Functions#dateToMilliseconds(Date)} method.
	* Test data: {@code new Date(1005)}.
	* Expected result: {@code 1005}.
	*/
	@Test
	void"
