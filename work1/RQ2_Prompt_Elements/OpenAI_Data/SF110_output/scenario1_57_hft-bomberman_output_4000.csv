ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6x3ikFmPKwCfHAINmJVn6WFZRsPMj,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/client/BomberClient0.java,34.70617127418518,stop,"// BomberClient.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;

/**
 * This is central client class. It is responsible for globally scoped messages
 * and the creation of sessions.
 *
 * @author andi
 */
public class BomberClient extends Observable {

    public static BomberClient getInstance() {
        if (instance == null) {
            logger.info(""Creating BomberClient singleton instance"");
            instance = new BomberClient(""client"");
        }
        return instance;
    }
}
","// BomberClientTest.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#getInstance()} method.
*/
class BomberClientTest {","// BomberClientTest.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#getInstance()} method.
*/
class BomberClientTest {

	/**
	* Test case for the {@link BomberClient#getInstance()} method.
	* It tests if the method returns a {@link BomberClient} object.
	*/
	@Test
	void testGetInstance() {
		BomberClient instance = BomberClient.getInstance();
		assertNotNull(instance);
	}
	
	/**
	* Test case for the {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
	
	/**
	* Test case for the {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame2() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
	
	/**
	* Test case for the {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame3() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
	
	/**
	* Test case for the {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame4() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
	
	/**
	* Test case for the {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame5() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
	
	/**
	* Test case for the {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame6() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
	
	/**
	* Test case for the {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame7() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
	
	/**
	* Test case for the {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame8() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
	
	/**
	* Test case for the {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame9() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
	
	/**
	* Test case for the {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame10() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
}"
cmpl-6x3jnU79okCPeStLQYCQeOmw7lXgP,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/client/BomberClient1.java,28.14795184135437,,"// BomberClient.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;

/**
 * This is central client class. It is responsible for globally scoped messages
 * and the creation of sessions.
 *
 * @author andi
 */
public class BomberClient extends Observable {

    public boolean connectToSrv() {
        try {
            //System.out.println(""Connecting..."");
            logger.info(""Establishing a connection "");
            server = new Socket(serverName, serverPort);
            msgSender = new ClientMsgSender(server);
            msgSender.start();
            msgReceiver = new ClientMsgReceiver(server, BomberClient.this);
            msgReceiver.start();
            msgSender.sendMsg(new InfoRequestMsg(InfoRequestMsg.GET_SESSION_LIST));
            logger.info(""connected to "" + serverName);
            return true;
        } catch (IOException e) {
            // TODO Auto-generated catch block
            // e.printStackTrace();
            logger.info(""Connection failed"");
            return false;
        }
    }
}
","// BomberClientTest.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#connectToSrv()} method.
*/
class BomberClientTest {","// BomberClientTest.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#connectToSrv()} method.
*/
class BomberClientTest {

	/**
	* Test case 1 for {@link BomberClient#connectToSrv()}.
	* It tests the case when the server is not running.
	*/
	@Test
	void testConnectToSrv1() {
		BomberClient client = new BomberClient();
		assertFalse(client.connectToSrv());
	}
	
	/**
	* Test case 2 for {@link BomberClient#connectToSrv()}.
	* It tests the case when the server is running.
	*/
	@Test
	void testConnectToSrv2() {
		BomberClient client = new BomberClient();
		assertTrue(client.connectToSrv());
	}
	
	/**
	* Test case 3 for {@link BomberClient#connectToSrv()}.
	* It tests the case when the server is running.
	*/
	@Test
	void testConnectToSrv3() {
		BomberClient client = new BomberClient();
		assertTrue(client.connectToSrv());
	}
	
	/**
	* Test case 4 for {@link BomberClient#connectToSrv()}.
	* It tests the case when the server is running.
	*/
	@Test
	void testConnectToSrv4() {
		BomberClient client = new BomberClient();
		assertTrue(client.connectToSrv());
	}
	
	/**
	* Test case 5 for {@link BomberClient#connectToSrv()}.
	* It tests the case when the server is running.
	*/
	@Test
	void testConnectToSrv5() {
		BomberClient client = new BomberClient();
		assertTrue(client.connectToSrv());
	}
	
	/**
	* Test case 6 for {@link BomberClient#connectToSrv()}.
	* It tests the case when the server is running.
	*/
	@Test
	void testConnectToSrv6() {
		BomberClient client = new BomberClient();
		assertTrue(client.connectToSrv());
	}
	
	/**
	* Test case 7 for {@link BomberClient#connectToSrv()}.
	* It tests the case when the server is running.
	*/
	@Test
	void testConnectToSrv7() {
		BomberClient client = new BomberClient();
		assertTrue(client.connectToSrv());
	}
	
	/**
	* Test case 8 for {@link BomberClient#connectToSrv()}.
	* It tests the case when the server is running.
	*/
	@Test
	void testConnectToSrv8() {
		BomberClient client = new BomberClient();
		assertTrue(client.connectToSrv());
	}
	
	/**
	* Test case 9 for {@link BomberClient#connectToSrv()}.
	* It tests the case when the server is running.
	*/
	@Test
	void testConnectToSrv9() {
		BomberClient client = new BomberClient();
		assertTrue(client.connectToSrv());
	}
	
	/**
	* Test case 10 for {@link BomberClient#connectToSrv()}.
	* It tests the case when the server is running.
	*/
	@Test
	void testConnectToSrv10() {
		BomberClient client = new BomberClient();
		assertTrue(client.connectToSrv());
	}
}"
cmpl-6x3kqDWbLdDdryJxxQYK6T39Ri5Ky,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/client/ClientGameRound.java,140.01764249801636,length,"// ClientGameRound.java
package client;

import java.awt.Point;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import org.apache.log4j.Logger;
import client.controller.LocalControl;
import client.gui.StartFrame;
import client.network.ForwardingObserver;
import client.view.BombView;
import client.view.GameCanvas;
import client.view.GameView;
import client.view.GfxFactory;
import client.view.OffGamePainter;
import client.view.PlayerView;
import client.view.PowerUpView;
import client.view.StatusView;
import client.view.TileView;
import common.Bomb;
import common.Constants;
import common.GameModel;
import common.GameObject;
import common.GameRound;
import common.Map;
import common.Player;
import common.PowerUp;
import common.Tile;

/**
 * Represents a game on the client side. This class serves as a connection
 * between the model, view and game loop.
 *
 * @author Andi, Bj�rn
 */
public class ClientGameRound extends GameRound implements Observer {

    public GameObject getGameObjectById(int id) {
        return model.getGameObjectById(id);
    }
}
","// ClientGameRoundTest.java
package client;

import java.awt.Point;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import org.apache.log4j.Logger;
import client.controller.LocalControl;
import client.gui.StartFrame;
import client.network.ForwardingObserver;
import client.view.BombView;
import client.view.GameCanvas;
import client.view.GameView;
import client.view.GfxFactory;
import client.view.OffGamePainter;
import client.view.PlayerView;
import client.view.PowerUpView;
import client.view.StatusView;
import client.view.TileView;
import common.Bomb;
import common.Constants;
import common.GameModel;
import common.GameObject;
import common.GameRound;
import common.Map;
import common.Player;
import common.PowerUp;
import common.Tile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientGameRound}.
* It contains ten unit test cases for the {@link ClientGameRound#getGameObjectById(int)} method.
*/
class ClientGameRoundTest {","// ClientGameRoundTest.java
package client;

import java.awt.Point;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import org.apache.log4j.Logger;
import client.controller.LocalControl;
import client.gui.StartFrame;
import client.network.ForwardingObserver;
import client.view.BombView;
import client.view.GameCanvas;
import client.view.GameView;
import client.view.GfxFactory;
import client.view.OffGamePainter;
import client.view.PlayerView;
import client.view.PowerUpView;
import client.view.StatusView;
import client.view.TileView;
import common.Bomb;
import common.Constants;
import common.GameModel;
import common.GameObject;
import common.GameRound;
import common.Map;
import common.Player;
import common.PowerUp;
import common.Tile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientGameRound}.
* It contains ten unit test cases for the {@link ClientGameRound#getGameObjectById(int)} method.
*/
class ClientGameRoundTest {

	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById2() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById3() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById4() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById5() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById6() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById7() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById8() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById9() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById10() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
}

// ClientGameRoundTest.java
package client;

import java.awt.Point;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import org.apache.log4j.Logger;
import client.controller.LocalControl;
import client.gui.StartFrame;
import client.network.ForwardingObserver;
import client.view.BombView;
import client.view.GameCanvas;
import client.view.GameView;
import client.view.GfxFactory;
import client.view.OffGamePainter;
import client.view.PlayerView;
import client.view.PowerUpView;
import client.view.StatusView;
import client.view.TileView;
import common.Bomb;
import common.Constants;
import common.GameModel;
import common.GameObject;
import common.GameRound;
import common.Map;
import common.Player;
import common.PowerUp;
import common.Tile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientGameRound}.
* It contains ten unit test cases for the {@link ClientGameRound#getGameObjectById(int)} method.
*/
class ClientGameRoundTest {
		
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById2() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById3() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById4() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById5() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById6() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById7() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById8() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById9() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById10() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
}

// ClientGameRoundTest.java
package client;

import java.awt.Point;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import org.apache.log4j.Logger;
import client.controller.LocalControl;
import client.gui.StartFrame;
import client.network.ForwardingObserver;
import client.view.BombView;
import client.view.GameCanvas;
import client.view.GameView;
import client.view.GfxFactory;
import client.view.OffGamePainter;
import client.view.PlayerView;
import client.view.PowerUpView;
import client.view.StatusView;
import client.view.TileView;
import common.Bomb;
import common.Constants;
import common.GameModel;
import common.GameObject;
import common.GameRound;
import common.Map;
import common.Player;
import common.PowerUp;
import common.Tile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientGameRound}.
* It contains ten unit test cases for the {@link ClientGameRound#getGameObjectById(int)} method.
*/
class ClientGameRoundTest {
		
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById2() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById3() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById4() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById5() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct game object.
	*/
	@Test
	void testGetGameObjectById6() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr"
cmpl-6x3n6nZLjQvIiAhEN06XhALcu07T6,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/client/ClientPlayer.java,23.46679973602295,stop,"// ClientPlayer.java
package client;

import java.awt.Point;
import org.apache.log4j.Logger;
import sound.SoundPlayer;
import common.Actor;
import common.Constants;
import common.Player;

/**
 * The client specific implemetation of a Player. This implementation will
 * notify any number of registered observers about changes to their state.
 *
 * @author Andi, Bj�rn
 */
public class ClientPlayer extends Player {

    public boolean canBowlBombs() {
        return bowlBombs;
    }
}
","// ClientPlayerTest.java
package client;

import java.awt.Point;
import org.apache.log4j.Logger;
import sound.SoundPlayer;
import common.Actor;
import common.Constants;
import common.Player;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientPlayer}.
* It contains ten unit test cases for the {@link ClientPlayer#canBowlBombs()} method.
*/
class ClientPlayerTest {","// ClientPlayerTest.java
package client;

import java.awt.Point;
import org.apache.log4j.Logger;
import sound.SoundPlayer;
import common.Actor;
import common.Constants;
import common.Player;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientPlayer}.
* It contains ten unit test cases for the {@link ClientPlayer#canBowlBombs()} method.
*/
class ClientPlayerTest {

	/**
	* Test case 1 for {@link ClientPlayer#canBowlBombs()}.
	* This test case checks if the method returns true when the player has the ability to bowl bombs.
	*/
	@Test
	void testCanBowlBombs1() {
		ClientPlayer player = new ClientPlayer();
		player.setBowlBombs(true);
		assertTrue(player.canBowlBombs());
	}
	
	/**
	* Test case 2 for {@link ClientPlayer#canBowlBombs()}.
	* This test case checks if the method returns false when the player has the ability to bowl bombs.
	*/
	@Test
	void testCanBowlBombs2() {
		ClientPlayer player = new ClientPlayer();
		player.setBowlBombs(false);
		assertFalse(player.canBowlBombs());
	}
	
	/**
	* Test case 3 for {@link ClientPlayer#canBowlBombs()}.
	* This test case checks if the method returns true when the player has the ability to bowl bombs.
	*/
	@Test
	void testCanBowlBombs3() {
		ClientPlayer player = new ClientPlayer();
		player.setBowlBombs(true);
		assertTrue(player.canBowlBombs());
	}
	
	/**
	* Test case 4 for {@link ClientPlayer#canBowlBombs()}.
	* This test case checks if the method returns false when the player has the ability to bowl bombs.
	*/
	@Test
	void testCanBowlBombs4() {
		ClientPlayer player = new ClientPlayer();
		player.setBowlBombs(false);
		assertFalse(player.canBowlBombs());
	}
	
	/**
	* Test case 5 for {@link ClientPlayer#canBowlBombs()}.
	* This test case checks if the method returns true when the player has the ability to bowl bombs.
	*/
	@Test
	void testCanBowlBombs5() {
		ClientPlayer player = new ClientPlayer();
		player.setBowlBombs(true);
		assertTrue(player.canBowlBombs());
	}
	
	/**
	* Test case 6 for {@link ClientPlayer#canBowlBombs()}.
	* This test case checks if the method returns false when the player has the ability to bowl bombs.
	*/
	@Test
	void testCanBowlBombs6() {
		ClientPlayer player = new ClientPlayer();
		player.setBowlBombs(false);
		assertFalse(player.canBowlBombs());
	}
	
	/**
	* Test case 7 for {@link ClientPlayer#canBowlBombs()}.
	* This test case checks if the method returns true when the player has the ability to bowl bombs.
	*/
	@Test
	void testCanBowlBombs7() {
		ClientPlayer player = new ClientPlayer();
		player.setBowlBombs(true);
		assertTrue(player.canBowlBombs());
	}
	
	/**
	* Test case 8 for {@link ClientPlayer#canBowlBombs()}.
	* This test case checks if the method returns false when the player has the ability to bowl bombs.
	*/
	@Test
	void testCanBowlBombs8() {
		ClientPlayer player = new ClientPlayer();
		player.setBowlBombs(false);
		assertFalse(player.canBowlBombs());
	}
	
	/**
	* Test case 9 for {@link ClientPlayer#canBowlBombs()}.
	* This test case checks if the method returns true when the player has the ability to bowl bombs.
	*/
	@Test
	void testCanBowlBombs9() {
		ClientPlayer player = new ClientPlayer();
		player.setBowlBombs(true);
		assertTrue(player.canBowlBombs());
	}
	
	/**
	* Test case 10 for {@link ClientPlayer#canBowlBombs()}.
	* This test case checks if the method returns false when the player has the ability to bowl bombs.
	*/
	@Test
	void testCanBowlBombs10() {
		ClientPlayer player = new ClientPlayer();
		player.setBowlBombs(false);
		assertFalse(player.canBowlBombs());
	}
}"
cmpl-6x3o9WOU8g2ALLu8KU21d3A75rpAE,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/client/ClientProperties0.java,123.67900156974792,length,"// ClientProperties.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;

/**
 * reads and writes properties to xml-file
 * properties file is saved to user directory
 *
 * @author christian
 */
public class ClientProperties {

    public String getProperty(String element) {
        if (!fileError) {
            String XmlPath = ""//"" + element;
            return xmlFunctions.getXmlValue(XmlPath);
        } else {
            return new String("""");
        }
    }
}
","// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.
*/
class ClientPropertiesTest {","// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.
*/
class ClientPropertiesTest {

		/**
		* Test case for {@link ClientProperties#getProperty(String)} method.
		* It tests if the method returns the correct value for the given element.
		*/
		@Test
		void testGetProperty() {
				ClientProperties clientProperties = new ClientProperties();
				String element = ""server"";
				String expected = ""localhost"";
				String actual = clientProperties.getProperty(element);
				assertEquals(expected, actual);
		}
}

// ClientProperties.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;

/**
 * reads and writes properties to xml-file
 * properties file is saved to user directory
 *
 * @author christian
 */
public class ClientProperties {

    public String getProperty(String element) {
        if (!fileError) {
            String XmlPath = ""//"" + element;
            return xmlFunctions.getXmlValue(XmlPath);
        } else {
            return new String("""");
        }
    }
}

// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.
*/
class ClientPropertiesTest {
		
		/**
		* Test case for {@link ClientProperties#getProperty(String)} method.
		* It tests if the method returns the correct value for the given element.
		*/
		@Test
		void testGetProperty() {
				ClientProperties clientProperties = new ClientProperties();
				String element = ""server"";
				String expected = ""localhost"";
				String actual = clientProperties.getProperty(element);
				assertEquals(expected, actual);
		}
}

// ClientProperties.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;

/**
 * reads and writes properties to xml-file
 * properties file is saved to user directory
 *
 * @author christian
 */
public class ClientProperties {

    public String getProperty(String element) {
        if (!fileError) {
            String XmlPath = ""//"" + element;
            return xmlFunctions.getXmlValue(XmlPath);
        } else {
            return new String("""");
        }
    }
}

// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.
*/
class ClientPropertiesTest {
		
		/**
		* Test case for {@link ClientProperties#getProperty(String)} method.
		* It tests if the method returns the correct value for the given element.
		*/
		@Test
		void testGetProperty() {
				ClientProperties clientProperties = new ClientProperties();
				String element = ""server"";
				String expected = ""localhost"";
				String actual = clientProperties.getProperty(element);
				assertEquals(expected, actual);
		}
}

// ClientProperties.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;

/**
 * reads and writes properties to xml-file
 * properties file is saved to user directory
 *
 * @author christian
 */
public class ClientProperties {

    public String getProperty(String element) {
        if (!fileError) {
            String XmlPath = ""//"" + element;
            return xmlFunctions.getXmlValue(XmlPath);
        } else {
            return new String("""");
        }
    }
}

// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.
*/
class ClientPropertiesTest {
		
		/**
		* Test case for {@link ClientProperties#getProperty(String)} method.
		* It tests if the method returns the correct value for the given element.
		*/
		@Test
		void testGetProperty() {
				ClientProperties clientProperties = new ClientProperties();
				String element = ""server"";
				String expected = ""localhost"";
				String actual = clientProperties.getProperty(element);
				assertEquals(expected, actual);
		}
}

// ClientProperties.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;

/**
 * reads and writes properties to xml-file
 * properties file is saved to user directory
 *
 * @author christian
 */
public class ClientProperties {

    public String getProperty(String element) {
        if (!fileError) {
            String XmlPath = ""//"" + element;
            return xmlFunctions.getXmlValue(XmlPath);
        } else {
            return new String("""");
        }
    }
}

// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.
*/
class ClientPropertiesTest {
		
		/**
		* Test case for {@link ClientProperties#getProperty(String)} method.
		* It tests if the method returns the correct value for the given element.
		*/
		@Test
		void testGetProperty() {
				ClientProperties clientProperties = new ClientProperties();
				String element = ""server"";
				String expected = ""localhost"";
				String actual = clientProperties.getProperty(element);
				assertEquals(expected, actual);
		}
}

// ClientProperties.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;

/**
 * reads and writes properties to xml-file
 * properties file is saved to user directory
 *
 * @author christian
 */
public class ClientProperties {

    public String getProperty(String element) {
        if (!fileError) {
            String XmlPath = ""//"" + element;
            return xmlFunctions.getXmlValue(XmlPath);
        } else {
            return new String("""");
        }
    }
}

// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.
*/
class ClientPropertiesTest {
		
		/**
		* Test case for {@link ClientProperties#getProperty(String)} method.
		* It tests if the method returns the correct value for the given element.
		*/
		@Test
		void testGetProperty() {
				ClientProperties clientProperties = new ClientProperties();
				String element = ""server"";
				String expected = ""localhost"";
				String actual = clientProperties.getProperty(element);
				assertEquals(expected, actual);
		}
}

// ClientProperties.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;

/**
 * reads and writes properties to xml-file
 * properties file is saved to user directory
 *
 * @author christian
 */
public class ClientProperties {

    public String getProperty(String element) {
        if (!fileError) {
            String XmlPath = ""//"" + element;
            return xmlFunctions.getXmlValue(XmlPath);
        } else {
            return new String("""");
        }
    }
}

// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.
*/
class ClientPropertiesTest {
		
		/**
		* Test case for {@link ClientProperties#getProperty(String)} method.
		* It tests if the method returns the correct value for the given element.
		*/
		@Test
		void testGetProperty() {
				ClientProperties clientProperties = new ClientProperties();
				String element = ""server"";
				String expected = ""localhost"";
				String actual = clientProperties.getProperty(element);
				assertEquals(expected, actual);
		}
}

// ClientProperties.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;

/**
 * reads and writes properties to xml-file
 * properties file is saved to user directory
 *
 * @author christian
 */
public class ClientProperties {

    public String getProperty(String element) {
        if (!fileError) {
            String XmlPath = ""//"" + element;
            return xmlFunctions.getXmlValue(XmlPath);
        } else {
            return new String("""");
        }
    }
}

// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.
*/
class ClientPropertiesTest {
		
		/**
		* Test case for {@link ClientProperties#getProperty(String)} method.
		* It tests if the method returns the correct value for the given element.
		*/
		@Test
		void testGetProperty() {
				ClientProperties clientProperties = new ClientProperties();
				String element = ""server"";
				String expected = ""localhost"";
				String actual = clientProperties.getProperty(element);
				assertEquals(expected, actual);
		}
}

// ClientProperties.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;

/**
 * reads and writes properties to xml-file
 * properties file is saved to user directory
 *
 * @author christian
 */
public class ClientProperties {

    public String getProperty(String element) {
        if (!fileError) {
            String XmlPath = ""//"" + element;
            return xmlFunctions.getXmlValue(XmlPath);
        } else {
            return new String("""");
        }
    }
}

// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.
*/
class ClientPropertiesTest {
		
		/**
		* Test case for {@link ClientProperties#getProperty(String)} method.
		* It tests if the method returns the correct value for the given element.
		*/
		@Test
		void testGetProperty() {
				ClientProperties clientProperties = new ClientProperties();
				String element = ""server"";
				String expected = ""localhost"";
				String actual = clientProperties.getProperty(element);
				assertEquals(expected, actual);
		}
}"
cmpl-6x3q9VfPjbia515zxDrQ1K47LXjlp,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/client/ClientProperties1.java,122.21375751495361,length,"// ClientProperties.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;

/**
 * reads and writes properties to xml-file
 * properties file is saved to user directory
 *
 * @author christian
 */
public class ClientProperties {

    public static boolean fileCopy(InputStream sourceFile, File destFile) {
        try {
            InputStream in = sourceFile;
            FileOutputStream out = new FileOutputStream(destFile);
            byte[] buf = new byte[4096];
            int len;
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
            out.close();
            in.close();
        } catch (IOException e) {
            return false;
        }
        return true;
    }
}
","// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.
*/
class ClientPropertiesTest {","// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.
*/
class ClientPropertiesTest {

	/**
	* Test case 1 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns true if the file is copied successfully.
	*/
	@Test
	void testFileCopy1() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertTrue(result);
	}
	
	/**
	* Test case 2 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns false if the file is not copied successfully.
	*/
	@Test
	void testFileCopy2() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertFalse(result);
	}
	
	/**
	* Test case 3 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns true if the file is copied successfully.
	*/
	@Test
	void testFileCopy3() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertTrue(result);
	}
	
	/**
	* Test case 4 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns false if the file is not copied successfully.
	*/
	@Test
	void testFileCopy4() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertFalse(result);
	}
	
	/**
	* Test case 5 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns true if the file is copied successfully.
	*/
	@Test
	void testFileCopy5() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertTrue(result);
	}
	
	/**
	* Test case 6 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns false if the file is not copied successfully.
	*/
	@Test
	void testFileCopy6() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertFalse(result);
	}
	
	/**
	* Test case 7 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns true if the file is copied successfully.
	*/
	@Test
	void testFileCopy7() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertTrue(result);
	}
	
	/**
	* Test case 8 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns false if the file is not copied successfully.
	*/
	@Test
	void testFileCopy8() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertFalse(result);
	}
	
	/**
	* Test case 9 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns true if the file is copied successfully.
	*/
	@Test
	void testFileCopy9() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertTrue(result);
	}
	
	/**
	* Test case 10 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns false if the file is not copied successfully.
	*/
	@Test
	void testFileCopy10() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertFalse(result);
	}
}

// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.
*/
class ClientPropertiesTest {
		
	/**
	* Test case 1 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns true if the file is copied successfully.
	*/
	@Test
	void testFileCopy1() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertTrue(result);
	}
	
	/**
	* Test case 2 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns false if the file is not copied successfully.
	*/
	@Test
	void testFileCopy2() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertFalse(result);
	}
	
	/**
	* Test case 3 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns true if the file is copied successfully.
	*/
	@Test
	void testFileCopy3() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertTrue(result);
	}
	
	/**
	* Test case 4 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns false if the file is not copied successfully.
	*/
	@Test
	void testFileCopy4() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertFalse(result);
	}
	
	/**
	* Test case 5 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns true if the file is copied successfully.
	*/
	@Test
	void testFileCopy5() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertTrue(result);
	}
	
	/**
	* Test case 6 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns false if the file is not copied successfully.
	*/
	@Test
	void testFileCopy6() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertFalse(result);
	}
	
	/**
	* Test case 7 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns true if the file is copied successfully.
	*/
	@Test
	void testFileCopy7() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertTrue(result);
	}
	
	/**
	* Test case 8 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns false if the file is not copied successfully.
	*/
	@Test
	void testFileCopy8() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertFalse(result);
	}
	
	/**
	* Test case 9 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns true if the file is copied successfully.
	*/
	@Test
	void testFileCopy9() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertTrue(result);
	}
	
	/**
	* Test case 10 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns false if the file is not copied successfully.
	*/
	@Test
	void testFileCopy10() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertFalse(result);
	}
}

// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.
*/
class ClientPropertiesTest {
		
	/**
	* Test case 1 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns true if the file is copied successfully.
	*/
	@Test
	void testFileCopy1() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertTrue(result);
	}
	
	/**
	* Test case 2 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns false if the file is not copied successfully.
	*/
	@Test
	void testFileCopy2() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertFalse(result);
	}
	
	/**
	* Test case 3 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns true if the file is copied successfully.
	*/
	@Test
	void testFileCopy3() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertTrue(result);
	}
	
	/**
	* Test case 4 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns false if the file is not copied successfully.
	*/
	@Test
	void testFileCopy4() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertFalse(result);
	}
	
	/**
	* Test case 5 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns true if the file is copied successfully.
	*/
	@Test
	void testFileCopy5() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertTrue(result);
	}
	
	/**
	* Test case 6 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns false if the file is not copied successfully.
	*/
	@Test
	void testFileCopy6() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertFalse(result);
	}
	
	/**
	* Test case 7 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns true if the file is copied successfully.
	*/
	@Test
	void testFileCopy7() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertTrue(result);
	}
	
	/**
	* Test case 8 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns false if the file is not copied successfully.
	*/
	@Test
	void testFileCopy8() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertFalse(result);
	}
	
	/**
	* Test case 9 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns true if the file is copied successfully.
	*/
	@Test
	void testFileCopy9() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertTrue(result);
	}
	
	/**
	* Test case 10 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns false if the file is not copied successfully.
	*/
	@Test
	void testFileCopy10() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertFalse(result);
	}
}

// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.
*/
class ClientPropertiesTest {
		
	/**
	* Test case 1 for {@link ClientProperties#fileCopy(InputStream, File)}.
	* It tests if the method returns true if the file is copied successfully.
	*/
	@Test
	void testFileCopy1() {
		File file = new File(""test.txt"");
		InputStream in = null;
		boolean result = ClientProperties.fileCopy(in, file);
		assertTrue(result);
	}
	
	/**
	* Test case 2 for {@link ClientProperties#file"
cmpl-6x3s7GIckfT1gUi4sh06YcQ4BED3n,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/client/view/GfxFactory.java,132.69039392471313,length,"// GfxFactory.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;

/**
 * @author Andreas Glauner
 * @autor Adam Kozielski
 */
public class GfxFactory {

    public Image getPowerUpImage(String type) {
        if (!powerUpImageCache.keySet().contains(type)) {
            String path = ""/gfx/powerUps/"" + type + "".png"";
            powerUpImageCache.put(type, loadImage(path));
        }
        return powerUpImageCache.get(type);
    }
}
","// GfxFactoryTest.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GfxFactory}.
* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.
*/
class GfxFactoryTest {","// GfxFactoryTest.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GfxFactory}.
* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.
*/
class GfxFactoryTest {

	/**
	* Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	* It checks if the method returns the correct image for the given type.
	*/
	@Test
	void testGetPowerUpImage() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
}

// GfxFactory.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;

/**
 * @author Andreas Glauner
 * @autor Adam Kozielski
 */
public class GfxFactory {

    public Image getPowerUpImage(String type) {
        if (!powerUpImageCache.keySet().contains(type)) {
            String path = ""/gfx/powerUps/"" + type + "".png"";
            powerUpImageCache.put(type, loadImage(path));
        }
        return powerUpImageCache.get(type);
    }
}

// GfxFactoryTest.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GfxFactory}.
* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.
*/
class GfxFactoryTest {
		
	/**
	* Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	* It checks if the method returns the correct image for the given type.
	*/
	@Test
	void testGetPowerUpImage() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
}

// GfxFactory.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;

/**
 * @author Andreas Glauner
 * @autor Adam Kozielski
 */
public class GfxFactory {

    public Image getPowerUpImage(String type) {
        if (!powerUpImageCache.keySet().contains(type)) {
            String path = ""/gfx/powerUps/"" + type + "".png"";
            powerUpImageCache.put(type, loadImage(path));
        }
        return powerUpImageCache.get(type);
    }
}

// GfxFactoryTest.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GfxFactory}.
* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.
*/
class GfxFactoryTest {
		
	/**
	* Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	* It checks if the method returns the correct image for the given type.
	*/
	@Test
	void testGetPowerUpImage() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
}

// GfxFactory.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;

/**
 * @author Andreas Glauner
 * @autor Adam Kozielski
 */
public class GfxFactory {

    public Image getPowerUpImage(String type) {
        if (!powerUpImageCache.keySet().contains(type)) {
            String path = ""/gfx/powerUps/"" + type + "".png"";
            powerUpImageCache.put(type, loadImage(path));
        }
        return powerUpImageCache.get(type);
    }
}

// GfxFactoryTest.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GfxFactory}.
* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.
*/
class GfxFactoryTest {
		
	/**
	* Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	* It checks if the method returns the correct image for the given type.
	*/
	@Test
	void testGetPowerUpImage() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
}

// GfxFactory.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;

/**
 * @author Andreas Glauner
 * @autor Adam Kozielski
 */
public class GfxFactory {

    public Image getPowerUpImage(String type) {
        if (!powerUpImageCache.keySet().contains(type)) {
            String path = ""/gfx/powerUps/"" + type + "".png"";
            powerUpImageCache.put(type, loadImage(path));
        }
        return powerUpImageCache.get(type);
    }
}

// GfxFactoryTest.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GfxFactory}.
* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.
*/
class GfxFactoryTest {
		
	/**
	* Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	* It checks if the method returns the correct image for the given type.
	*/
	@Test
	void testGetPowerUpImage() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
}

// GfxFactory.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;

/**
 * @author Andreas Glauner
 * @autor Adam Kozielski
 */
public class GfxFactory {

    public Image getPowerUpImage(String type) {
        if (!powerUpImageCache.keySet().contains(type)) {
            String path = ""/gfx/powerUps/"" + type + "".png"";
            powerUpImageCache.put(type, loadImage(path));
        }
        return powerUpImageCache.get(type);
    }
}

// GfxFactoryTest.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GfxFactory}.
* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.
*/
class GfxFactoryTest {
		
	/**
	* Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	* It checks if the method returns the correct image for the given type.
	*/
	@Test
	void testGetPowerUpImage() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
}

// GfxFactory.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;

/**
 * @author Andreas Glauner
 * @autor Adam Kozielski
 */
public class GfxFactory {

    public Image getPowerUpImage(String type) {
        if (!powerUpImageCache.keySet().contains(type)) {
            String path = ""/gfx/powerUps/"" + type + "".png"";
            powerUpImageCache.put(type, loadImage(path));
        }
        return powerUpImageCache.get(type);
    }
}

// GfxFactoryTest.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GfxFactory}.
* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.
*/
class GfxFactoryTest {
		
	/**
	* Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	* It checks if the method returns the correct image for the given type.
	*/
	@Test
	void testGetPowerUpImage() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
}

// GfxFactory.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;

/**
 * @author Andreas Glauner
 * @autor Adam Kozielski
 */
public class GfxFactory {

    public Image getPowerUpImage(String type) {
        if (!powerUpImageCache.keySet().contains(type)) {
            String path = ""/gfx/powerUps/"" + type + "".png"";
            powerUpImageCache.put(type, loadImage(path));
        }
        return powerUpImageCache.get(type);
    }
}

// GfxFactoryTest.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GfxFactory}.
* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.
*/
class GfxFactoryTest {
		
	/**
	* Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	* It checks if the method returns the correct image for the given type.
	*/
	@Test
	void testGetPowerUpImage() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
}

// GfxFactory.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;

/**
 * @author Andreas Glauner
 * @autor Adam Kozielski
 */
public class GfxFactory {

    public Image getPowerUpImage(String type) {
        if (!powerUpImageCache.keySet().contains(type)) {
            String path = ""/gfx/powerUps/"" + type + "".png"";
            powerUpImageCache.put(type, loadImage(path));
        }
        return powerUpImageCache.get(type);
    }
}

// GfxFactoryTest.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GfxFactory}.
* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.
*/
class GfxFactoryTest {
		
	/**
	* Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	* It checks if the method returns the correct image for the given type.
	*/
	@Test
	void testGetPowerUpImage() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
}

// GfxFactory.java
package client.view;

import java."
cmpl-6x3uGBMBYmTeeDe09IsRr4XcHTShc,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/common/GameModel.java,126.250492811203,length,"// GameModel.java
package common;

import java.awt.Point;
import java.util.Collection;
import java.util.HashMap;
import java.util.Vector;
import java.util.Map.Entry;
import messages.round.RoundTimeOverMsg;
import org.apache.log4j.Logger;

/**
 * @author Steffen, Andi, Bj�rn
 */
public class GameModel {

    public int checkForWinner() {
        if (players.size() < 2) {
            // 0 means it's a tie (all remaining players got
            int winnerId = 0;
            // killed by the same bomb)
            if (players.size() == 1) {
                // only the winner is left
                winnerId = players.get(0).getId();
            }
            return winnerId;
        } else {
            // game still running
            return -1;
        }
    }
}
","// GameModelTest.java
package common;

import java.awt.Point;
import java.util.Collection;
import java.util.HashMap;
import java.util.Vector;
import java.util.Map.Entry;
import messages.round.RoundTimeOverMsg;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GameModel}.
* It contains ten unit test cases for the {@link GameModel#checkForWinner()} method.
*/
class GameModelTest {","// GameModelTest.java
package common;

import java.awt.Point;
import java.util.Collection;
import java.util.HashMap;
import java.util.Vector;
import java.util.Map.Entry;
import messages.round.RoundTimeOverMsg;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GameModel}.
* It contains ten unit test cases for the {@link GameModel#checkForWinner()} method.
*/
class GameModelTest {

		/**
		* Test case 1:
		* The game is still running.
		*/
		@Test
		void testCheckForWinner1() {
				GameModel gameModel = new GameModel();
				gameModel.players.add(new Player(1, ""Player1"", new Point(0, 0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
cmpl-6x3wIrVqS9ERzA9bLUat9hWfCn5FD,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/common/Map0.java,110.97755026817322,length,"// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * Map-Class with all information needed for map use of iterators tile-iterator:
 * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class Map implements Iterable<Tile>, Serializable {

    public Tile getTileByIndex(int x, int y) {
        return (Tile) MapGrid[x][y];
    }
}
","// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTileByIndex(int, int)} method.
*/
class MapTest {","// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTileByIndex(int, int)} method.
*/
class MapTest {

	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex2() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex3() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex4() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex5() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex6() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex7() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex8() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex9() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex10() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
}

// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * Map-Class with all information needed for map use of iterators tile-iterator:
 * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class Map implements Iterable<Tile>, Serializable {

    public Tile getTileByIndex(int x, int y) {
        return (Tile) MapGrid[x][y];
    }
}

// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTileByIndex(int, int)} method.
*/
class MapTest {
		
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex2() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex3() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex4() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex5() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex6() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex7() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex8() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex9() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex10() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
}

// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * Map-Class with all information needed for map use of iterators tile-iterator:
 * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class Map implements Iterable<Tile>, Serializable {

    public Tile getTileByIndex(int x, int y) {
        return (Tile) MapGrid[x][y];
    }
}

// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTileByIndex(int, int)} method.
*/
class MapTest {
		
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex2() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex3() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex4() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex5() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex6() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	* Test case for {@link Map#getTileByIndex(int, int)} method.
	* It tests if the method returns the correct tile.
	*/
	@Test
	void testGetTileByIndex7() {
		Map map = new"
cmpl-6x3y56SrCe6eCLoAH4ooADcqR1XJ7,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/common/Map1.java,17.430745840072632,stop,"// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * Map-Class with all information needed for map use of iterators tile-iterator:
 * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class Map implements Iterable<Tile>, Serializable {

    public Tile getTile(int x, int y) {
        return (Tile) MapGrid[(int) Math.floor((double) x / Constants.TILE_BORDER)][(int) Math.floor((double) y / Constants.TILE_BORDER)];
    }
}
","// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTile(int, int)} method.
*/
class MapTest {","// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTile(int, int)} method.
*/
class MapTest {

	/**
	* Test case for {@link Map#getTile(int, int)} method.
	* It tests if the method returns the correct tile for the given coordinates.
	*/
	@Test
	void testGetTile() {
		Map map = new Map();
		Tile tile = map.getTile(0, 0);
		assertEquals(0, tile.getX());
		assertEquals(0, tile.getY());
		tile = map.getTile(Constants.TILE_BORDER, Constants.TILE_BORDER);
		assertEquals(1, tile.getX());
		assertEquals(1, tile.getY());
		tile = map.getTile(Constants.TILE_BORDER * 2, Constants.TILE_BORDER * 2);
		assertEquals(2, tile.getX());
		assertEquals(2, tile.getY());
		tile = map.getTile(Constants.TILE_BORDER * 3, Constants.TILE_BORDER * 3);
		assertEquals(3, tile.getX());
		assertEquals(3, tile.getY());
		tile = map.getTile(Constants.TILE_BORDER * 4, Constants.TILE_BORDER * 4);
		assertEquals(4, tile.getX());
		assertEquals(4, tile.getY());
		tile = map.getTile(Constants.TILE_BORDER * 5, Constants.TILE_BORDER * 5);
		assertEquals(5, tile.getX());
		assertEquals(5, tile.getY());
		tile = map.getTile(Constants.TILE_BORDER * 6, Constants.TILE_BORDER * 6);
		assertEquals(6, tile.getX());
		assertEquals(6, tile.getY());
		tile = map.getTile(Constants.TILE_BORDER * 7, Constants.TILE_BORDER * 7);
		assertEquals(7, tile.getX());
		assertEquals(7, tile.getY());
		tile = map.getTile(Constants.TILE_BORDER * 8, Constants.TILE_BORDER * 8);
		assertEquals(8, tile.getX());
		assertEquals(8, tile.getY());
		tile = map.getTile(Constants.TILE_BORDER * 9, Constants.TILE_BORDER * 9);
		assertEquals(9, tile.getX());
		assertEquals(9, tile.getY());
	}
}"
cmpl-6x3z94DeRe5qTpdbIkNifgFe1JmZL,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/common/Map2.java,40.124449014663696,stop,"// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * Map-Class with all information needed for map use of iterators tile-iterator:
 * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class Map implements Iterable<Tile>, Serializable {

    public Point getStartPoint(int playerNo) {
        // startpoint for player is not set, default 1/1
        if (playerNo > StartPoint.length) {
            return new // field
            Point(// field
            1 * Constants.TILE_BORDER + Constants.TILE_BORDER / 2, 1 * Constants.TILE_BORDER + Constants.TILE_BORDER / 2);
            // 1/1
        } else {
            Point retPoint = StartPoint[(playerNo - 1)];
            retPoint.x = retPoint.x * Constants.TILE_BORDER + 20;
            retPoint.y = retPoint.y * Constants.TILE_BORDER + 20;
            return retPoint;
        }
    }
}
","// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getStartPoint(int)} method.
*/
class MapTest {","// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getStartPoint(int)} method.
*/
class MapTest {

		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 1.
		*/
		@Test
		void testGetStartPoint1() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(1);
				assertEquals(new Point(20, 20), startPoint);
		}
		
		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 2.
		*/
		@Test
		void testGetStartPoint2() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(2);
				assertEquals(new Point(20, 20), startPoint);
		}
		
		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 3.
		*/
		@Test
		void testGetStartPoint3() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(3);
				assertEquals(new Point(20, 20), startPoint);
		}
		
		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 4.
		*/
		@Test
		void testGetStartPoint4() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(4);
				assertEquals(new Point(20, 20), startPoint);
		}
		
		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 5.
		*/
		@Test
		void testGetStartPoint5() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(5);
				assertEquals(new Point(20, 20), startPoint);
		}
		
		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 6.
		*/
		@Test
		void testGetStartPoint6() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(6);
				assertEquals(new Point(20, 20), startPoint);
		}
		
		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 7.
		*/
		@Test
		void testGetStartPoint7() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(7);
				assertEquals(new Point(20, 20), startPoint);
		}
		
		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 8.
		*/
		@Test
		void testGetStartPoint8() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(8);
				assertEquals(new Point(20, 20), startPoint);
		}
		
		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 9.
		*/
		@Test
		void testGetStartPoint9() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(9);
				assertEquals(new Point(20, 20), startPoint);
		}
		
		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 10.
		*/
		@Test
		void testGetStartPoint10() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(10);
				assertEquals(new Point(20, 20), startPoint);
		}
}"
cmpl-6x40Bdn54ay7wNiIeXKR9Xfn4VqrT,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/common/MapFilesLister.java,157.0163218975067,length,"// MapFilesLister.java
package common;

import java.io.File;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.log4j.Logger;
import messages.global.MapInfo;

/**
 * class for listing maps and returning map information
 *
 * @author christian
 */
public class MapFilesLister {

    public Vector<File> ListMaps(String dir) {
        // open map folder
        logger.info(""Read map directory: "" + dir + ""..."");
        File mapDir = new File(dir);
        File[] mapDirFiles = mapDir.listFiles();
        Vector<File> foundFiles = new Vector<File>();
        // open directories in map folder
        for (int i = 0; i < mapDirFiles.length; i++) {
            if (mapDirFiles[i].isFile() && mapDirFiles[i].toString().endsWith("".xml"")) {
                logger.info(""XML: "" + mapDirFiles[i]);
                foundFiles.add(mapDirFiles[i]);
            }
        }
        return foundFiles;
    }
}
","// MapFilesListerTest.java
package common;

import java.io.File;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.log4j.Logger;
import messages.global.MapInfo;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapFilesLister}.
* It contains ten unit test cases for the {@link MapFilesLister#ListMaps(String)} method.
*/
class MapFilesListerTest {","// MapFilesListerTest.java
package common;

import java.io.File;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.log4j.Logger;
import messages.global.MapInfo;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapFilesLister}.
* It contains ten unit test cases for the {@link MapFilesLister#ListMaps(String)} method.
*/
class MapFilesListerTest {

		private static final Logger logger = Logger.getLogger(MapFilesListerTest.class);
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps2() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps3() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps4() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps5() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps6() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps7() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps8() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps9() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps10() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
}

// MapInfo.java
package messages.global;

import java.io.Serializable;

/**
 * class for map information
 *
 * @author christian
 */
public class MapInfo implements Serializable {

    private String name;
    private String description;
    private String author;
    private String version;
    private String date;
    private String mapFile;
    private String mapImage;
    private int width;
    private int height;
    private int maxPlayers;
    private int minPlayers;
    private int maxTeams;
    private int minTeams;
    private int maxUnits;
    private int minUnits;
    private int maxBuildings;
    private int minBuildings;
    private int maxResources;
    private int minResources;
    private int maxRounds;
    private int minRounds;
    private int maxTime;
    private int minTime;
    private int maxScore;
    private int minScore;
    private int maxMoney;
    private int minMoney;
    private int maxEnergy;
    private int minEnergy;
    private int maxPower;
    private int minPower;
    private int maxPopulation;
    private int minPopulation;
    private int maxUnitLimit;
    private int minUnitLimit;
    private int maxBuildingLimit;
    private int minBuildingLimit;
    private int maxResearchLimit;
    private int minResearchLimit;
    private int maxUnitCost;
    private int minUnitCost;
    private int maxBuildingCost;
    private int minBuildingCost;
    private int maxResearchCost;
    private int minResearchCost;
    private int maxUnitPower;
    private int minUnitPower;
    private int maxBuildingPower;
    private int minBuildingPower;
    private int maxResearchPower;
    private int minResearchPower;
    private int maxUnitPoints;
    private int minUnitPoints;
    private int maxBuildingPoints;
    private int minBuildingPoints;
    private int maxResearchPoints;
    private int minResearchPoints;
    private int maxUnitRange;
    private int minUnitRange;
    private int maxBuildingRange;
    private int minBuildingRange;
    private int maxResearchRange;
    private int minResearchRange;
    private int maxUnitSight;
    private int minUnitSight;
    private int maxBuildingSight;
    private int minBuildingSight;
    private int maxResearchSight;
    private int minResearchSight;
    private int maxUnitSpeed;
    private int minUnitSpeed;
    private int maxBuildingSpeed;
    private int minBuildingSpeed;
    private int maxResearchSpeed;
    private int minResearchSpeed;
    private int maxUnitStrength;
    private int minUnitStrength;
    private int maxBuildingStrength;
    private int minBuildingStrength;
    private int maxResearchStrength;
    private int minResearchStrength;
    private int maxUnitArmor;
    private int minUnitArmor;
    private int maxBuildingArmor;
    private int minBuildingArmor;
    private int maxResearchArmor;
    private int minResearchArmor;
    private int maxUnitHitpoints;
    private int minUnitHitpoints;
    private int maxBuildingHitpoints;
    private int minBuildingHitpoints;
    private int maxResearchHitpoints;
    private int minResearchHitpoints;
    private int maxUnitDamage;
    private int minUnitDamage;
    private int maxBuildingDamage;
    private int minBuildingDamage;
    private int maxResearchDamage;
    private int minResearchDamage;
    private int maxUnitReload;
    private int minUnitReload;
    private int maxBuildingReload;
    private int minBuildingReload;
    private int maxResearchReload;
    private int minResearchReload;
    private int maxUnitAmmo;
    private int minUnitAmmo;
    private int maxBuildingAmmo;
    private int minBuildingAmmo;
    private int maxResearchAmmo;
    private int minResearchAmmo;
    private int maxUnitFuel;
    private int minUnitFuel;
    private int maxBuildingFuel;
    private int minBuildingFuel;
    private int maxResearchFuel;
    private int minResearchFuel;
    private int maxUnitSupply;
    private int minUnitSupply;
    private int maxBuildingSupply;
    private int minBuildingSupply;
    private int maxResearchSupply;
    private int minResearchSupply;
    private int maxUnitUpkeep;
    private int minUnitUpkeep;
    private int maxBuildingUpkeep;
    private int minBuildingUpkeep;
    private int maxResearchUpkeep;
    private int minResearchUpkeep;
    private int maxUnitExperience;
    private int minUnitExperience;
    private int maxBuildingExperience;
    private int minBuildingExperience;
    private int maxResearchExperience;
    private int minResearchExperience;
    private int maxUnitTrainingTime;
    private int minUnitTrainingTime;
    private int maxBuildingTrainingTime;
    private int minBuildingTrainingTime;
    private int maxResearchTrainingTime;
    private int minResearchTrainingTime;
    private int maxUnitTrainingCost;
    private int minUnitTrainingCost;
    private int maxBuildingTrainingCost;
    private int minBuildingTrainingCost;
    private int maxResearchTrainingCost;
    private int minResearchTrainingCost;
    private int maxUnitTrainingPower;
    private int minUnitTrainingPower;
    private int maxBuildingTrainingPower;
    private int minBuildingTrainingPower;
    private int maxResearchTrainingPower;
    private int minResearchTrainingPower;
    private int maxUnitTrainingPoints;
    private int minUnitTrainingPoints;
    private int maxBuildingTrainingPoints;
    private int minBuildingTrainingPoints;
    private int maxResearchTrainingPoints;
    private int minResearchTrainingPoints;
    private int maxUnitTrainingRange;
    private int minUnitTrainingRange;
    private int maxBuildingTrainingRange;
    private int minBuildingTrainingRange;
    private int maxResearchTrainingRange;
    private int minResearchTrainingRange;
    private int maxUnitTrainingSight;
    private int minUnitTrainingSight;
    private int maxBuildingTrainingSight;
    private int minBuildingTrainingSight;
    private int maxResearchTrainingSight;
    private int minResearchTrainingSight;
    private int maxUnitTrainingSpeed;
    private int minUnitTrainingSpeed;
    private int maxBuildingTrainingSpeed;
    private int minBuildingTrainingSpeed;
    private int maxResearchTrainingSpeed;
    private int minResearchTrainingSpeed;
    private int maxUnitTrainingStrength;
    private int minUnitTrainingStrength;
    private int maxBuildingTrainingStrength;
    private int minBuildingTrainingStrength;
    private int maxResearchTrainingStrength;
    private int minResearchTrainingStrength;
    private int maxUnitTrainingArmor;
    private int minUnitTrainingArmor;
    private int maxBuildingTrainingArmor;
    private int minBuildingTrainingArmor;
    private int maxResearchTrainingArmor;
    private int minResearchTrainingArmor;
    private int maxUnitTrainingHitpoints;
    private int minUnitTrainingHitpoints;
    private int maxBuildingTrainingHitpoints;
    private int minBuildingTrainingHitpoints;
    private int maxResearchTrainingHitpoints;
    private int minResearchTrainingHitpoints;
    private int maxUnitTrainingDamage;
    private int minUnitTrainingDamage;
    private int maxBuildingTrainingDamage;
    private int minBuildingTrainingDamage;
    private int maxResearchTrainingDamage;
    private int minResearchTrainingDamage;
    private int maxUnitTrainingReload;
    private int minUnitTrainingReload;
    private int maxBuildingTrainingReload;
    private int minBuildingTrainingReload;
    private int maxResearchTrainingReload;
    private int minResearchTrainingReload;
    private int maxUnitTrainingAmmo;
    private int minUnitTrainingAmmo;
    private int maxBuildingTrainingAmmo;
    private int minBuildingTrainingAmmo;
    private int maxResearchTrainingAmmo;
    private int minResearchTrainingAmmo;
    private int maxUnitTrainingFuel;
    private int minUnitTrainingFuel;
    private int maxBuildingTrainingFuel;
    private int minBuildingTrainingFuel;
    private int maxResearchTrainingFuel;
    private int minResearchTrainingFuel;
    private int maxUnitTrainingSupply;
    private int minUnitTrainingSupply;
    private int maxBuildingTrainingSupply;
    private int minBuildingTrainingSupply;
    private int maxResearchTrainingSupply;
    private int minResearchTrainingSupply;
    private int maxUnitTrainingUpkeep;
    private int minUnitTrainingUpkeep;
    private int maxBuildingTrainingUpkeep;
    private int minBuildingTrainingUpkeep;
    private int maxResearchTrainingUpkeep;
    private int minResearchTrainingUpkeep;
    private int maxUnitTrainingExperience;
    private int minUnitTrainingExperience;
    private int maxBuildingTrainingExperience;
    private int minBuildingTrainingExperience;
    private int maxResearchTrainingExperience;
    private int minResearchTrainingExperience;
    private int maxUnitTrainingTrainingTime;
    private int minUnitTrainingTrainingTime;
    private int maxBuildingTrainingTrainingTime;
    private int minBuildingTrainingTrainingTime;
    private int maxResearchTrainingTrainingTime;
    private int minResearchTrainingTrainingTime;
    private int maxUnitTrainingTrainingCost;
    private int minUnitTrainingTrainingCost;
    private int maxBuildingTrainingTrainingCost;
    private int minBuildingTrainingTrainingCost;
    private int maxResearchTrainingTrainingCost;
    private int minResearchTrainingTrainingCost;
    private int maxUnitTrainingTrainingPower;
    private int minUnitTrainingTrainingPower;
    private int maxBuildingTrainingTrainingPower;
    private int minBuildingTrainingTrainingPower;
    private int maxResearchTrainingTrainingPower;
    private int minResearchTrainingTrainingPower;
    private int maxUnitTrainingTrainingPoints;
    private int minUnitTrainingTrainingPoints;
    private int maxBuildingTrainingTrainingPoints;
    private int minBuildingTrainingTrainingPoints;
    private int maxResearchTrainingTrainingPoints;
    private int minResearchTrainingTrainingPoints;
    private int maxUnitTrainingTrainingRange;
    private int minUnitTrainingTrainingRange;
    private int maxBuildingTrainingTrainingRange;
    private int minBuildingTrainingTrainingRange;
    private int maxResearchTrainingTrainingRange;
    private int minResearchTrainingTrainingRange;
    private int maxUnitTrainingTrainingSight;
    private int minUnitTrainingTrainingSight;
    private int maxBuildingTrainingTrainingSight;
    private int minBuildingTrainingTrainingSight;
    private int maxResearchTrainingTrainingSight;
    private int minResearchTrainingTrainingSight;
    private int maxUnitTrainingTrainingSpeed;
    private int minUnitTrainingTrainingSpeed;
    private int maxBuildingTrainingTrainingSpeed;
    private int minBuildingTrainingTrainingSpeed;
    private int maxResearchTrainingTrainingSpeed;
    private int minResearchTrainingTrainingSpeed;
    private int maxUnitTrainingTrainingStrength;
    private int minUnitTrainingTrainingStrength;
    private int maxBuildingTrainingTrainingStrength;
    private int minBuildingTrainingTrainingStrength;
    private int maxResearchTrainingTrainingStrength;
    private int minResearchTrainingTrainingStrength;
    private int maxUnitTrainingTrainingArmor;
    private int minUnitTrainingTrainingArmor;
    private int maxBuildingTrainingTrainingArmor;
    private int minBuildingTrainingTrainingArmor;
    private int maxResearchTrainingTrainingArmor;
    private int minResearchTrainingTrainingArmor;
    private int maxUnitTrainingTrainingHitpoints;
    private int minUnitTrainingTrainingHitpoints;
    private int maxBuildingTrainingTrainingHitpoints;
    private int minBuildingTrainingTrainingHitpoints;
    private int maxResearchTrainingTrainingHitpoints;
    private int minResearchTrainingTrainingHitpoints;
    private int maxUnitTrainingTrainingDamage;
    private int minUnitTrainingTrainingDamage;
    private int maxBuildingTrainingTrainingDamage;
    private int minBuildingTrainingTrainingDamage;
    private int maxResearchTrainingTrainingDamage;
    private int minResearchTrainingTrainingDamage;
    private int maxUnitTrainingTrainingReload;
    private int minUnitTrainingTrainingReload;
    private int maxBuildingTrainingTrainingReload;
    private int minBuildingTrainingTrainingReload;
    private int maxResearchTraining"
cmpl-6x42iXBizOOtEYyE8XGxXMdj3mtCZ,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/common/MapPreview.java,152.36839079856873,length,"// MapPreview.java
package common;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.apache.log4j.Logger;

/**
 * create a ImageIcon Map Preview of a map object
 *
 * usage example: MapPreview mp = new MapPreview(map); mp.setImageSet(""desert"");
 * (optional) ImageIcon ii = mp.getMapPreview(150); !!
 *
 * @author christian
 */
public class MapPreview {

    public ImageIcon getMapPreview(int previewWidth) {
        // check if file is available, file name is identical to
        // xml file with appended .png
        File checkFile = new File(mapFile + ""_"" + mapImageSet + "".png"");
        if (checkFile.exists()) {
            logger.info(""Loading map preview: "" + checkFile.getName());
            BufferedImage mapPreview;
            try {
                mapPreview = ImageIO.read(new File(mapFile + ""_"" + mapImageSet + "".png""));
                mapPreviewIcon = new ImageIcon();
                mapPreviewIcon.setImage((Image) mapPreview);
            } catch (IOException e) {
                logger.error(e);
            }
        } else {
            // image not found, create it
            logger.info(""Creating map preview: "" + checkFile.getName());
            // preload images
            TILE_WALL_IMAGE = LoadImage(""wall"");
            TILE_STONE_IMAGE = LoadImage(""stone"");
            mapPreviewIcon = new ImageIcon();
            mapPreview = new BufferedImage(mapArea.x * Constants.TILE_BORDER, mapArea.y * Constants.TILE_BORDER, BufferedImage.TYPE_INT_RGB);
            // draw map to BufferedImage
            drawMap();
            try {
                ImageIO.write(scale(mapPreview, previewWidth), ""png"", checkFile);
            } catch (Exception e) {
                logger.error(""Caught in getMapPreview(): "" + e);
            }
            // return / resize and return
            if (previewWidth == (mapArea.x * Constants.TILE_BORDER)) {
                mapPreviewIcon.setImage((Image) mapPreview);
            } else {
                mapPreviewIcon.setImage((Image) scale(mapPreview, previewWidth));
            }
        }
        return mapPreviewIcon;
    }
}
","// MapPreviewTest.java
package common;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapPreview}.
* It contains ten unit test cases for the {@link MapPreview#getMapPreview(int)} method.
*/
class MapPreviewTest {","// MapPreviewTest.java
package common;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapPreview}.
* It contains ten unit test cases for the {@link MapPreview#getMapPreview(int)} method.
*/
class MapPreviewTest {

		private static final Logger logger = Logger.getLogger(MapPreviewTest.class);
		
		private static final String MAP_FILE = ""testmap"";
		private static final String MAP_IMAGE_SET = ""desert"";
		private static final Point MAP_AREA = new Point(10, 10);
		private static final Vector<Vector<Integer>> MAP_TILES = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_OBJECTS = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_UNITS = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_BUILDINGS = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_AMOUNT = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_MAX = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER = new Vector<Vector<Integer>>();
		private static final Vector<Vector<Integer>> MAP_RESOURCES_REGEN_TIME_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INITIAL_COUNTER_MAX_INIT"
cmpl-6x45BNN3dQ5Iz8bVkppXRlS4nNLkJ,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/common/MapReader.java,138.6719901561737,length,"// MapReader.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;

/**
 * Loads a XML-file and write read properties, tiles and start points to
 * map-object
 *
 * @author christian
 */
public class MapReader {

    public String getXMLValue(Node node, String XMLPath) {
        try {
            // todo: exception wenn feld leer
            XPath xpath = XPathFactory.newInstance().newXPath();
            XPathExpression expr = xpath.compile(XMLPath);
            Object result = expr.evaluate(node, XPathConstants.NODE);
            Node foundNode = (Node) result;
            return foundNode.getNodeValue();
        } catch (XPathExpressionException ex) {
            logger.error(ex);
        }
        return new String();
    }
}
","// MapReaderTest.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapReader}.
* It contains ten unit test cases for the {@link MapReader#getXMLValue(Node, String)} method.
*/
class MapReaderTest {","// MapReaderTest.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapReader}.
* It contains ten unit test cases for the {@link MapReader#getXMLValue(Node, String)} method.
*/
class MapReaderTest {

		private static final Logger logger = Logger.getLogger(MapReaderTest.class);
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@name"";
				String expected = ""test"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue2() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@width"";
				String expected = ""10"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue3() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@height"";
				String expected = ""10"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue4() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@tilewidth"";
				String expected = ""32"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue5() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@tileheight"";
				String expected = ""32"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue6() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@version"";
				String expected = ""1.0"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue7() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@orientation"";
				String expected = ""orthogonal"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue8() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@renderorder"";
				String expected = ""right-down"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue9() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@nextobjectid"";
				String expected = ""1"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue10() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/tileset/@firstgid"";
				String expected = ""1"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
}

// MapReaderTest.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapReader}.
* It contains ten unit test cases for the {@link MapReader#getXMLValue(Node, String)} method.
*/
class MapReaderTest {
		
		private static final Logger logger = Logger.getLogger(MapReaderTest.class);
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@name"";
				String expected = ""test"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue2() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@width"";
				String expected = ""10"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue3() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@height"";
				String expected = ""10"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue4() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@tilewidth"";
				String expected = ""32"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue5() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@tileheight"";
				String expected = ""32"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue6() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@version"";
				String expected = ""1.0"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue7() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@orientation"";
				String expected = ""orthogonal"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue8() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@renderorder"";
				String expected = ""right-down"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue9() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@nextobjectid"";
				String expected = ""1"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue10() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/tileset/@firstgid"";
				String expected = ""1"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
}

// MapReaderTest.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapReader}.
* It contains ten unit test cases for the {@link MapReader#getXMLValue(Node, String)} method.
*/
class MapReaderTest {
		
		private static final Logger logger = Logger.getLogger(MapReaderTest.class);
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@name"";
				String expected = ""test"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue2() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@width"";
				String expected = ""10"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue3() {
				MapReader mapReader = new MapReader();
				String XMLPath = ""//map/@height"";
				String expected = ""10"";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given XML-path.
		*/
		@Test
		void testGetXMLValue4() {
				MapReader mapReader = new MapReader();
				String XML"
cmpl-6x47PDqrhivpDViJpdHVn1hZGTnTO,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/common/ResourceService0.java,114.19459390640259,length,"// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    public static Image getImage(String path) {
        BufferedImage image;
        try {
            image = ImageIO.read(getInputStream(path));
        } catch (IOException e) {
            image = null;
        }
        return image;
    }
}
","// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImage(String)} method.
*/
class ResourceServiceTest {","// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImage(String)} method.
*/
class ResourceServiceTest {

	/**
	* Test case for the {@link ResourceService#getImage(String)} method.
	* It tests if the method returns the correct image.
	*/
	@Test
	void testGetImage() {
		Image image = ResourceService.getImage(""/images/test.png"");
		assertNotNull(image);
		assertEquals(image.getWidth(null), 100);
		assertEquals(image.getHeight(null), 100);
	}
}
```

## Test Coverage

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/) library.

The test coverage of the project is measured by the"
cmpl-6x49FBiLc76XGBE389CiN3clPzqkT,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/common/ResourceService1.java,24.972091913223267,stop,"// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    public static ImageIcon getImageIcon(String path) {
        return new ImageIcon(getImage(path));
    }
}
","// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImageIcon(String)} method.
*/
class ResourceServiceTest {","// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImageIcon(String)} method.
*/
class ResourceServiceTest {

	/**
	* Test case for the {@link ResourceService#getImageIcon(String)} method.
	* It tests if the method returns an image icon for a valid path.
	*/
	@Test
	void testGetImageIconValidPath() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/test.png"");
		assertNotNull(imageIcon);
	}
	
	/**
	* Test case for the {@link ResourceService#getImageIcon(String)} method.
	* It tests if the method returns an image icon for a valid path.
	*/
	@Test
	void testGetImageIconValidPath2() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/test2.png"");
		assertNotNull(imageIcon);
	}
	
	/**
	* Test case for the {@link ResourceService#getImageIcon(String)} method.
	* It tests if the method returns an image icon for a valid path.
	*/
	@Test
	void testGetImageIconValidPath3() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/test3.png"");
		assertNotNull(imageIcon);
	}
	
	/**
	* Test case for the {@link ResourceService#getImageIcon(String)} method.
	* It tests if the method returns an image icon for a valid path.
	*/
	@Test
	void testGetImageIconValidPath4() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/test4.png"");
		assertNotNull(imageIcon);
	}
	
	/**
	* Test case for the {@link ResourceService#getImageIcon(String)} method.
	* It tests if the method returns an image icon for a valid path.
	*/
	@Test
	void testGetImageIconValidPath5() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/test5.png"");
		assertNotNull(imageIcon);
	}
	
	/**
	* Test case for the {@link ResourceService#getImageIcon(String)} method.
	* It tests if the method returns an image icon for a valid path.
	*/
	@Test
	void testGetImageIconValidPath6() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/test6.png"");
		assertNotNull(imageIcon);
	}
	
	/**
	* Test case for the {@link ResourceService#getImageIcon(String)} method.
	* It tests if the method returns an image icon for a valid path.
	*/
	@Test
	void testGetImageIconValidPath7() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/test7.png"");
		assertNotNull(imageIcon);
	}
	
	/**
	* Test case for the {@link ResourceService#getImageIcon(String)} method.
	* It tests if the method returns an image icon for a valid path.
	*/
	@Test
	void testGetImageIconValidPath8() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/test8.png"");
		assertNotNull(imageIcon);
	}
	
	/**
	* Test case for the {@link ResourceService#getImageIcon(String)} method.
	* It tests if the method returns an image icon for a valid path.
	*/
	@Test
	void testGetImageIconValidPath9() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/test9.png"");
		assertNotNull(imageIcon);
	}
	
	/**
	* Test case for the {@link ResourceService#getImageIcon(String)} method.
	* It tests if the method returns an image icon for a valid path.
	*/
	@Test
	void testGetImageIconValidPath10() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/test10.png"");
		assertNotNull(imageIcon);
	}
}"
cmpl-6x4AJETlTy331mtZx3nFAC6nUTqAg,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/common/ResourceService2.java,108.89859223365784,length,"// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    public static InputStream getInputStream(String path) {
        InputStream resourceAsStream = ResourceService.class.getResourceAsStream(path);
        if (resourceAsStream == null) {
            throw new IllegalArgumentException(""No such resource: "" + path);
        }
        return resourceAsStream;
    }
}
","// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getInputStream(String)} method.
*/
class ResourceServiceTest {","// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getInputStream(String)} method.
*/
class ResourceServiceTest {

	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method returns an input stream for a valid resource path.
	*/
	@Test
	void testGetInputStreamValid() {
		InputStream inputStream = ResourceService.getInputStream(""/images/icon.png"");
		assertNotNull(inputStream);
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for an invalid resource path.
	*/
	@Test
	void testGetInputStreamInvalid() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(""/images/icon2.png"");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for an empty resource path.
	*/
	@Test
	void testGetInputStreamEmpty() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream("""");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a null resource path.
	*/
	@Test
	void testGetInputStreamNull() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(null);
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a resource path with a leading slash.
	*/
	@Test
	void testGetInputStreamLeadingSlash() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(""/images/icon.png/"");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a resource path with a trailing slash.
	*/
	@Test
	void testGetInputStreamTrailingSlash() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(""/images/icon.png/"");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a resource path with a leading and trailing slash.
	*/
	@Test
	void testGetInputStreamLeadingAndTrailingSlash() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(""/images/icon.png/"");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a resource path with a leading and trailing slash.
	*/
	@Test
	void testGetInputStreamLeadingAndTrailingSlash2() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(""/images/icon.png/"");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a resource path with a leading and trailing slash.
	*/
	@Test
	void testGetInputStreamLeadingAndTrailingSlash3() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(""/images/icon.png/"");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a resource path with a leading and trailing slash.
	*/
	@Test
	void testGetInputStreamLeadingAndTrailingSlash4() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(""/images/icon.png/"");
		});
	}
}
```

## Exercise 2

### Task 1

```java
// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    public static InputStream getInputStream(String path) {
        InputStream resourceAsStream = ResourceService.class.getResourceAsStream(path);
        if (resourceAsStream == null) {
            throw new IllegalArgumentException(""No such resource: "" + path);
        }
        return resourceAsStream;
    }
}

// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getInputStream(String)} method.
*/
class ResourceServiceTest {
		
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method returns an input stream for a valid resource path.
	*/
	@Test
	void testGetInputStreamValid() {
		InputStream inputStream = ResourceService.getInputStream(""/images/icon.png"");
		assertNotNull(inputStream);
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for an invalid resource path.
	*/
	@Test
	void testGetInputStreamInvalid() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(""/images/icon2.png"");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for an empty resource path.
	*/
	@Test
	void testGetInputStreamEmpty() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream("""");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a null resource path.
	*/
	@Test
	void testGetInputStreamNull() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(null);
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a resource path with a leading slash.
	*/
	@Test
	void testGetInputStreamLeadingSlash() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(""/images/icon.png/"");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a resource path with a trailing slash.
	*/
	@Test
	void testGetInputStreamTrailingSlash() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(""/images/icon.png/"");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a resource path with a leading and trailing slash.
	*/
	@Test
	void testGetInputStreamLeadingAndTrailingSlash() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(""/images/icon.png/"");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a resource path with a leading and trailing slash.
	*/
	@Test
	void testGetInputStreamLeadingAndTrailingSlash2() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(""/images/icon.png/"");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a resource path with a leading and trailing slash.
	*/
	@Test
	void testGetInputStreamLeadingAndTrailingSlash3() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(""/images/icon.png/"");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a resource path with a leading and trailing slash.
	*/
	@Test
	void testGetInputStreamLeadingAndTrailingSlash4() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(""/images/icon.png/"");
		});
	}
}
```

### Task 2

```java
// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    public static InputStream getInputStream(String path) {
        InputStream resourceAsStream = ResourceService.class.getResourceAsStream(path);
        if (resourceAsStream == null) {
            throw new IllegalArgumentException(""No such resource: "" + path);
        }
        return resourceAsStream;
    }
}

// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getInputStream(String)} method.
*/
class ResourceServiceTest {
		
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method returns an input stream for a valid resource path.
	*/
	@Test
	void testGetInputStreamValid() {
		InputStream inputStream = ResourceService.getInputStream(""/images/icon.png"");
		assertNotNull(inputStream);
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for an invalid resource path.
	*/
	@Test
	void testGetInputStreamInvalid() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(""/images/icon2.png"");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for an empty resource path.
	*/
	@Test
	void testGetInputStreamEmpty() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream("""");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a null resource path.
	*/
	@Test
	void testGetInputStreamNull() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(null);
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a resource path with a leading slash.
	*/
	@Test
	void testGetInputStreamLeadingSlash() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(""/images/icon.png/"");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a resource path with a trailing slash.
	*/
	@Test
	void testGetInputStreamTrailingSlash() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(""/images/icon.png/"");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a resource path with a leading and trailing slash.
	*/
	@Test
	void testGetInputStreamLeadingAndTrailingSlash() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(""/images/icon.png/"");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a resource path with a leading and trailing slash.
	*/
	@Test
	void testGetInputStreamLeadingAndTrailingSlash2() {
		assertThrows(IllegalArgumentException.class, () -> {
			ResourceService.getInputStream(""/images/icon.png/"");
		});
	}
	
	/**
	* Test case for the {@link ResourceService#getInputStream(String)} method.
	* It tests if the method throws an {@link IllegalArgumentException} for a resource path with a leading and trailing slash.
"
cmpl-6x4C3UhgdBYulrpvpSA76pWzo2nWu,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/common/XmlFunctions0.java,135.9994764328003,length,"// XmlFunctions.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * basic functions for reading and writing xml files
 *
 * @author christian
 */
public class XmlFunctions {

    public String getXmlValue(String XmlPath) {
        Node node = findXmlNode(XmlPath);
        return node.getTextContent();
    }
}
","// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#getXmlValue(String)} method.
*/
class XmlFunctionsTest {","// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#getXmlValue(String)} method.
*/
class XmlFunctionsTest {

		/**
		* Test case for the {@link XmlFunctions#getXmlValue(String)} method.
		* It tests if the method returns the correct value for the given path.
		*/
		@Test
		void testGetXmlValue() {
				XmlFunctions xmlFunctions = new XmlFunctions();
				String xmlPath = ""//root/child1/child2"";
				String expected = ""value"";
				String actual = xmlFunctions.getXmlValue(xmlPath);
				assertEquals(expected, actual);
		}
}
```

### Test case for the `getXmlValue(String)` method

```java
// XmlFunctions.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * basic functions for reading and writing xml files
 *
 * @author christian
 */
public class XmlFunctions {

    public String getXmlValue(String XmlPath) {
        Node node = findXmlNode(XmlPath);
        return node.getTextContent();
    }
}

// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#getXmlValue(String)} method.
*/
class XmlFunctionsTest {
		
		/**
		* Test case for the {@link XmlFunctions#getXmlValue(String)} method.
		* It tests if the method returns the correct value for the given path.
		*/
		@Test
		void testGetXmlValue() {
				XmlFunctions xmlFunctions = new XmlFunctions();
				String xmlPath = ""//root/child1/child2"";
				String expected = ""value"";
				String actual = xmlFunctions.getXmlValue(xmlPath);
				assertEquals(expected, actual);
		}
}
```

### Test case for the `getXmlValue(String)` method

```java
// XmlFunctions.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * basic functions for reading and writing xml files
 *
 * @author christian
 */
public class XmlFunctions {

    public String getXmlValue(String XmlPath) {
        Node node = findXmlNode(XmlPath);
        return node.getTextContent();
    }
}

// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#getXmlValue(String)} method.
*/
class XmlFunctionsTest {
		
		/**
		* Test case for the {@link XmlFunctions#getXmlValue(String)} method.
		* It tests if the method returns the correct value for the given path.
		*/
		@Test
		void testGetXmlValue() {
				XmlFunctions xmlFunctions = new XmlFunctions();
				String xmlPath = ""//root/child1/child2"";
				String expected = ""value"";
				String actual = xmlFunctions.getXmlValue(xmlPath);
				assertEquals(expected, actual);
		}
}
```

### Test case for the `getXmlValue(String)` method

```java
// XmlFunctions.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * basic functions for reading and writing xml files
 *
 * @author christian
 */
public class XmlFunctions {

    public String getXmlValue(String XmlPath) {
        Node node = findXmlNode(XmlPath);
        return node.getTextContent();
    }
}

// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#getXmlValue(String)} method.
*/
class XmlFunctionsTest {
		
		/**
		* Test case for the {@link XmlFunctions#getXmlValue(String)} method.
		* It tests if the method returns the correct value for the given path.
		*/
		@Test
		void testGetXmlValue() {
				XmlFunctions xmlFunctions = new XmlFunctions();
				String xmlPath = ""//root/child1/child2"";
				String expected = ""value"";
				String actual = xmlFunctions.getXmlValue(xmlPath);
				assertEquals(expected, actual);
		}
}
```

### Test case for the `getXmlValue(String)` method

```java
// XmlFunctions.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * basic functions for reading and writing xml files
 *
 * @author christian
 */
public class XmlFunctions {

    public String getXmlValue(String XmlPath) {
        Node node = findXmlNode(XmlPath);
        return node.getTextContent();
    }
}

// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#getXmlValue(String)} method.
*/
class XmlFunctionsTest {
		"
cmpl-6x4EFA0CtUNntQkB5jxtZcjSYUKJI,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/common/XmlFunctions1.java,155.36478900909424,length,"// XmlFunctions.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * basic functions for reading and writing xml files
 *
 * @author christian
 */
public class XmlFunctions {

    public NodeList findXmlNodes(String NodeName) {
        try {
            XPath xpath = XPathFactory.newInstance().newXPath();
            XPathExpression expr = xpath.compile(NodeName);
            Object result = expr.evaluate(xml, XPathConstants.NODESET);
            return (NodeList) result;
        } catch (XPathExpressionException ex) {
            logger.error(ex);
        }
        return null;
    }
}
","// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#findXmlNodes(String)} method.
*/
class XmlFunctionsTest {","// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#findXmlNodes(String)} method.
*/
class XmlFunctionsTest {

		private static final Logger logger = Logger.getLogger(XmlFunctionsTest.class);
		
		private static final String XML_FILE = ""test.xml"";
		
		private static final String XML_FILE_PATH = ""src/test/resources/"";
		
		private static final String XML_FILE_WITH_PATH = XML_FILE_PATH + XML_FILE;
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml.xml"";
		
		"
cmpl-6x4GlVOdN2V3ZkdhWWp0JiJSqhKWp,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/server/BomberServer.java,27.127816915512085,stop,"// BomberServer.java
package server;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.GlobalServerMsg;
import messages.global.SessionDetailsMsg;
import messages.global.SessionListMsg;
import org.apache.log4j.Logger;
import org.hsqldb.Server;
import org.hsqldb.jdbc.jdbcDataSource;
import common.Constants;

/**
 * This is the main server class. It is responsible for accepting connections
 * from clients and starting new games/session.
 *
 * @author Steffen, Bj�rn, Daniel
 */
public class BomberServer {

    public static BomberServer getInstance() {
        if (bomberServer == null) {
            bomberServer = new BomberServer();
        }
        return bomberServer;
    }
}
","// BomberServerTest.java
package server;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.GlobalServerMsg;
import messages.global.SessionDetailsMsg;
import messages.global.SessionListMsg;
import org.apache.log4j.Logger;
import org.hsqldb.Server;
import org.hsqldb.jdbc.jdbcDataSource;
import common.Constants;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberServer}.
* It contains ten unit test cases for the {@link BomberServer#getInstance()} method.
*/
class BomberServerTest {","// BomberServerTest.java
package server;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.GlobalServerMsg;
import messages.global.SessionDetailsMsg;
import messages.global.SessionListMsg;
import org.apache.log4j.Logger;
import org.hsqldb.Server;
import org.hsqldb.jdbc.jdbcDataSource;
import common.Constants;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberServer}.
* It contains ten unit test cases for the {@link BomberServer#getInstance()} method.
*/
class BomberServerTest {

	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It checks if the method returns a new instance of the {@link BomberServer} class.
	*/
	@Test
	void testGetInstance() {
		BomberServer instance = BomberServer.getInstance();
		assertNotNull(instance);
	}
	
	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It checks if the method returns the same instance of the {@link BomberServer} class.
	*/
	@Test
	void testGetInstance2() {
		BomberServer instance = BomberServer.getInstance();
		BomberServer instance2 = BomberServer.getInstance();
		assertEquals(instance, instance2);
	}
	
	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It checks if the method returns the same instance of the {@link BomberServer} class.
	*/
	@Test
	void testGetInstance3() {
		BomberServer instance = BomberServer.getInstance();
		BomberServer instance2 = BomberServer.getInstance();
		assertSame(instance, instance2);
	}
	
	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It checks if the method returns the same instance of the {@link BomberServer} class.
	*/
	@Test
	void testGetInstance4() {
		BomberServer instance = BomberServer.getInstance();
		BomberServer instance2 = BomberServer.getInstance();
		assertTrue(instance == instance2);
	}
	
	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It checks if the method returns the same instance of the {@link BomberServer} class.
	*/
	@Test
	void testGetInstance5() {
		BomberServer instance = BomberServer.getInstance();
		BomberServer instance2 = BomberServer.getInstance();
		assertFalse(instance != instance2);
	}
	
	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It checks if the method returns the same instance of the {@link BomberServer} class.
	*/
	@Test
	void testGetInstance6() {
		BomberServer instance = BomberServer.getInstance();
		BomberServer instance2 = BomberServer.getInstance();
		assertFalse(instance != instance2);
	}
	
	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It checks if the method returns the same instance of the {@link BomberServer} class.
	*/
	@Test
	void testGetInstance7() {
		BomberServer instance = BomberServer.getInstance();
		BomberServer instance2 = BomberServer.getInstance();
		assertFalse(instance != instance2);
	}
	
	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It checks if the method returns the same instance of the {@link BomberServer} class.
	*/
	@Test
	void testGetInstance8() {
		BomberServer instance = BomberServer.getInstance();
		BomberServer instance2 = BomberServer.getInstance();
		assertFalse(instance != instance2);
	}
	
	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It checks if the method returns the same instance of the {@link BomberServer} class.
	*/
	@Test
	void testGetInstance9() {
		BomberServer instance = BomberServer.getInstance();
		BomberServer instance2 = BomberServer.getInstance();
		assertFalse(instance != instance2);
	}
	
	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It checks if the method returns the same instance of the {@link BomberServer} class.
	*/
	@Test
	void testGetInstance10() {
		BomberServer instance = BomberServer.getInstance();
		BomberServer instance2 = BomberServer.getInstance();
		assertFalse(instance != instance2);
	}
}"
cmpl-6x4IfeiQXZgWfYZZWcrioyRvuphWA,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/server/ExplosionBounds.java,179.59855127334595,length,"// ExplosionBounds.java
package server;

import java.awt.Point;

/**
 * This class is used by the server to define the bounds of a bomb explosion.
 * It contains four integer fields indicating the min/max pixel value
 * in the given direction that is affected by the explosion. It further offers
 * a method to test if a given point lies within the defined bounds.
 *
 * @author Steffen
 */
public class ExplosionBounds {

    public boolean contain(Point p) {
        if (up <= p.y && down >= p.y && right >= p.x && left <= p.x) {
            return true;
        } else {
            return false;
        }
    }
}
","// ExplosionBoundsTest.java
package server;

import java.awt.Point;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExplosionBounds}.
* It contains ten unit test cases for the {@link ExplosionBounds#contain(Point)} method.
*/
class ExplosionBoundsTest {","// ExplosionBoundsTest.java
package server;

import java.awt.Point;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExplosionBounds}.
* It contains ten unit test cases for the {@link ExplosionBounds#contain(Point)} method.
*/
class ExplosionBoundsTest {

	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns true for a point that lies within the bounds.
	*/
	@Test
	void testContain_PointWithinBounds_ReturnsTrue() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(15, 15);
		
		assertTrue(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies outside the bounds.
	*/
	@Test
	void testContain_PointOutsideBounds_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(25, 25);
		
		assertFalse(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies on the upper bound.
	*/
	@Test
	void testContain_PointOnUpperBound_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(15, 10);
		
		assertFalse(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies on the lower bound.
	*/
	@Test
	void testContain_PointOnLowerBound_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(15, 20);
		
		assertFalse(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies on the left bound.
	*/
	@Test
	void testContain_PointOnLeftBound_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(10, 15);
		
		assertFalse(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies on the right bound.
	*/
	@Test
	void testContain_PointOnRightBound_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(20, 15);
		
		assertFalse(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies on the upper left corner.
	*/
	@Test
	void testContain_PointOnUpperLeftCorner_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(10, 10);
		
		assertFalse(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies on the upper right corner.
	*/
	@Test
	void testContain_PointOnUpperRightCorner_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(20, 10);
		
		assertFalse(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies on the lower left corner.
	*/
	@Test
	void testContain_PointOnLowerLeftCorner_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(10, 20);
		
		assertFalse(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies on the lower right corner.
	*/
	@Test
	void testContain_PointOnLowerRightCorner_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(20, 20);
		
		assertFalse(bounds.contain(p));
	}
}

// ExplosionBoundsTest.java
package server;

import java.awt.Point;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExplosionBounds}.
* It contains ten unit test cases for the {@link ExplosionBounds#contain(Point)} method.
*/
class ExplosionBoundsTest {
		
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns true for a point that lies within the bounds.
	*/
	@Test
	void testContain_PointWithinBounds_ReturnsTrue() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(15, 15);
		
		assertTrue(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies outside the bounds.
	*/
	@Test
	void testContain_PointOutsideBounds_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(25, 25);
		
		assertFalse(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies on the upper bound.
	*/
	@Test
	void testContain_PointOnUpperBound_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(15, 10);
		
		assertFalse(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies on the lower bound.
	*/
	@Test
	void testContain_PointOnLowerBound_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(15, 20);
		
		assertFalse(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies on the left bound.
	*/
	@Test
	void testContain_PointOnLeftBound_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(10, 15);
		
		assertFalse(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies on the right bound.
	*/
	@Test
	void testContain_PointOnRightBound_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(20, 15);
		
		assertFalse(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies on the upper left corner.
	*/
	@Test
	void testContain_PointOnUpperLeftCorner_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(10, 10);
		
		assertFalse(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies on the upper right corner.
	*/
	@Test
	void testContain_PointOnUpperRightCorner_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(20, 10);
		
		assertFalse(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies on the lower left corner.
	*/
	@Test
	void testContain_PointOnLowerLeftCorner_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(10, 20);
		
		assertFalse(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies on the lower right corner.
	*/
	@Test
	void testContain_PointOnLowerRightCorner_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(20, 20);
		
		assertFalse(bounds.contain(p));
	}
}

// ExplosionBoundsTest.java
package server;

import java.awt.Point;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExplosionBounds}.
* It contains ten unit test cases for the {@link ExplosionBounds#contain(Point)} method.
*/
class ExplosionBoundsTest {
		
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns true for a point that lies within the bounds.
	*/
	@Test
	void testContain_PointWithinBounds_ReturnsTrue() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(15, 15);
		
		assertTrue(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies outside the bounds.
	*/
	@Test
	void testContain_PointOutsideBounds_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(25, 25);
		
		assertFalse(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies on the upper bound.
	*/
	@Test
	void testContain_PointOnUpperBound_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
		bounds.up = 10;
		bounds.down = 20;
		bounds.left = 10;
		bounds.right = 20;
		
		Point p = new Point(15, 10);
		
		assertFalse(bounds.contain(p));
	}
	
	/**
	* Test case for {@link ExplosionBounds#contain(Point)} method.
	* The test case checks if the method returns false for a point that lies on the lower bound.
	*/
	@Test
	void testContain_PointOnLowerBound_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds();
"
cmpl-6x4MSyjAWYMODgDweZQSkd0PxEE2w,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/server/ServerBomb.java,231.0137095451355,length,"// ServerBomb.java
package server;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.Collection;
import java.util.Vector;
import messages.round.BombExplodedMsg;
import org.apache.log4j.Logger;
import common.Bomb;
import common.Constants;
import common.GameObject;
import common.Player;
import common.PowerUp;
import common.Tile;
import db.DBException;
import db.DBGameUser;
import db.DBServiceFactory;

/**
 * The Bomb Object of the Server. This Bomb ticks some times and then exploded.
 * Then it detects the player and the tile hits.
 *
 * @author Bj�rn, Steffen, Daniel
 */
public class ServerBomb extends Bomb {

    public boolean tick() {
        this.tickFrames--;
        if (tickFrames == 0) {
            return true;
        } else {
            return false;
        }
    }
}
","// ServerBombTest.java
package server;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.Collection;
import java.util.Vector;
import messages.round.BombExplodedMsg;
import org.apache.log4j.Logger;
import common.Bomb;
import common.Constants;
import common.GameObject;
import common.Player;
import common.PowerUp;
import common.Tile;
import db.DBException;
import db.DBGameUser;
import db.DBServiceFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ServerBomb}.
* It contains ten unit test cases for the {@link ServerBomb#tick()} method.
*/
class ServerBombTest {","// ServerBombTest.java
package server;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.Collection;
import java.util.Vector;
import messages.round.BombExplodedMsg;
import org.apache.log4j.Logger;
import common.Bomb;
import common.Constants;
import common.GameObject;
import common.Player;
import common.PowerUp;
import common.Tile;
import db.DBException;
import db.DBGameUser;
import db.DBServiceFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ServerBomb}.
* It contains ten unit test cases for the {@link ServerBomb#tick()} method.
*/
class ServerBombTest {

	/**
	* Test case for {@link ServerBomb#tick()}.
	* The test case tests the tick method with a bomb that has a tickFrames value of 1.
	* The expected result is that the method returns true.
	*/
	@Test
	void testTick1() {
		ServerBomb bomb = new ServerBomb();
		bomb.setTickFrames(1);
		assertTrue(bomb.tick());
	}
	
	/**
	* Test case for {@link ServerBomb#tick()}.
	* The test case tests the tick method with a bomb that has a tickFrames value of 2.
	* The expected result is that the method returns false.
	*/
	@Test
	void testTick2() {
		ServerBomb bomb = new ServerBomb();
		bomb.setTickFrames(2);
		assertFalse(bomb.tick());
	}
	
	/**
	* Test case for {@link ServerBomb#tick()}.
	* The test case tests the tick method with a bomb that has a tickFrames value of 3.
	* The expected result is that the method returns false.
	*/
	@Test
	void testTick3() {
		ServerBomb bomb = new ServerBomb();
		bomb.setTickFrames(3);
		assertFalse(bomb.tick());
	}
	
	/**
	* Test case for {@link ServerBomb#tick()}.
	* The test case tests the tick method with a bomb that has a tickFrames value of 4.
	* The expected result is that the method returns false.
	*/
	@Test
	void testTick4() {
		ServerBomb bomb = new ServerBomb();
		bomb.setTickFrames(4);
		assertFalse(bomb.tick());
	}
	
	/**
	* Test case for {@link ServerBomb#tick()}.
	* The test case tests the tick method with a bomb that has a tickFrames value of 5.
	* The expected result is that the method returns false.
	*/
	@Test
	void testTick5() {
		ServerBomb bomb = new ServerBomb();
		bomb.setTickFrames(5);
		assertFalse(bomb.tick());
	}
	
	/**
	* Test case for {@link ServerBomb#tick()}.
	* The test case tests the tick method with a bomb that has a tickFrames value of 6.
	* The expected result is that the method returns false.
	*/
	@Test
	void testTick6() {
		ServerBomb bomb = new ServerBomb();
		bomb.setTickFrames(6);
		assertFalse(bomb.tick());
	}
	
	/**
	* Test case for {@link ServerBomb#tick()}.
	* The test case tests the tick method with a bomb that has a tickFrames value of 7.
	* The expected result is that the method returns false.
	*/
	@Test
	void testTick7() {
		ServerBomb bomb = new ServerBomb();
		bomb.setTickFrames(7);
		assertFalse(bomb.tick());
	}
	
	/**
	* Test case for {@link ServerBomb#tick()}.
	* The test case tests the tick method with a bomb that has a tickFrames value of 8.
	* The expected result is that the method returns false.
	*/
	@Test
	void testTick8() {
		ServerBomb bomb = new ServerBomb();
		bomb.setTickFrames(8);
		assertFalse(bomb.tick());
	}
	
	/**
	* Test case for {@link ServerBomb#tick()}.
	* The test case tests the tick method with a bomb that has a tickFrames value of 9.
	* The expected result is that the method returns false.
	*/
	@Test
	void testTick9() {
		ServerBomb bomb = new ServerBomb();
		bomb.setTickFrames(9);
		assertFalse(bomb.tick());
	}
	
	/**
	* Test case for {@link ServerBomb#tick()}.
	* The test case tests the tick method with a bomb that has a tickFrames value of 10.
	* The expected result is that the method returns false.
	*/
	@Test
	void testTick10() {
		ServerBomb bomb = new ServerBomb();
		bomb.setTickFrames(10);
		assertFalse(bomb.tick());
	}
}

// ServerGame.java
package server;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.Collection;
import java.util.Vector;
import messages.round.BombExplodedMsg;
import org.apache.log4j.Logger;
import common.Bomb;
import common.Constants;
import common.GameObject;
import common.Player;
import common.PowerUp;
import common.Tile;
import db.DBException;
import db.DBGameUser;
import db.DBServiceFactory;

/**
 * The Game Object of the Server. This Game contains the players, the bombs, the
 * tiles and the powerups.
 *
 * @author Bj�rn, Steffen, Daniel
 */
public class ServerGame {

    private static final Logger log = Logger.getLogger(ServerGame.class);
    private Vector<ServerPlayer> players;
    private Vector<ServerBomb> bombs;
    private Vector<Tile> tiles;
    private Vector<PowerUp> powerups;
    private int gameId;
    private int roundId;
    private int roundNumber;
    private int roundTime;
    private int roundTimeLeft;
    private int roundTimeLeftLastUpdate;
    private int roundTimeLeftLastUpdateDiff;
    private int roundTimeLeftLastUpdateDiffCounter;
    private int roundTimeLeftLastUpdateDiffCounterMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStep;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepDefault;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMin;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepMax;
    private int roundTimeLeftLastUpdateDiffCounterMaxStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStepStep;"
cmpl-6x4OQAxVKRRTVbtzhGelXbNvY8ZYe,/EvoSuiteBenchmark/scenario1/57_hft-bomberman/src/main/java/server/StopServer.java,2.6508564949035645,stop,"// StopServer.java
package server;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import messages.Message;
import messages.global.StopServerMsg;

/**
 * Sends a Message to the Server, that he should closed
 *
 * @author Bj�rn
 */
public class StopServer {

    public boolean connectToSrv() {
        try {
            //System.out.println(""Connecting..."");
            System.out.println(""Establishing a connection "");
            server = new Socket(serverName, serverPort);
            out = new ObjectOutputStream(server.getOutputStream());
            System.out.println(""connected to "" + serverName);
            return true;
        } catch (IOException e) {
            // TODO Auto-generated catch block
            // e.printStackTrace();
            System.out.println(""Connection failed"");
            return false;
        }
    }
}
","// StopServerTest.java
package server;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import messages.Message;
import messages.global.StopServerMsg;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StopServer}.
* It contains ten unit test cases for the {@link StopServer#connectToSrv()} method.
*/
class StopServerTest {","// StopServerTest.java
package server;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import messages.Message;
import messages.global.StopServerMsg;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StopServer}.
* It contains ten unit test cases for the {@link StopServer#connectToSrv()} method.
*/
class StopServerTest {

	/**
	* Test case for {@link StopServer#connectToSrv()}.
	* It tests if the connection to the server is established.
	*/
	@Test
	void testConnectToSrv() {
		StopServer stopServer = new StopServer();
		assertTrue(stopServer.connectToSrv());
	}
}"
