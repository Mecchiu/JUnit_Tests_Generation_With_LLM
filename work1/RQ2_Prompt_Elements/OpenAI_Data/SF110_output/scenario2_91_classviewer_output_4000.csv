ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wwZlHdd3C7q2qLw29iJMMm6r88zO,/EvoSuiteBenchmark/scenario2/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo0.java,135.29000568389893,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public fields for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return string array of public fields
     */
    public String[] printFields() {
        Field[] f = c.getFields();
        length = f.length;
        String[] StringData = null;
        if (length > 0) {
            StringData = new String[length];
            String tempStr;
            Object obj = new Object();
            if (debug)
                System.out.println(""****************************************"");
            for (count = 0; count < length; count++) {
                try {
                    tempStr = f[count] + ""="" + f[count].get(obj);
                    StringData[count] = tempStr;
                    if (debug)
                        System.out.println(tempStr);
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                    tempStr = f[count] + ""= ILLEGAL ACCESS EXCEPTION, unable to load"";
                    StringData[count] = tempStr;
                } catch (IllegalArgumentException j) {
                    j.printStackTrace();
                    tempStr = f[count] + ""= ILLEGAL ARGUMENT EXCEPTION, unable to load"";
                    StringData[count] = tempStr;
                }
            }
        } else if (debug)
            System.out.println(""No public fields."");
        return StringData;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.
*/
class ClassInfoTest {

		/**
		* Test case for {@link ClassInfo#printFields()} method.
		* It tests the {@link ClassInfo#printFields()} method with a {@link String} object.
		*/
		@Test
		void testPrintFieldsString() {
				ClassInfo ci = new ClassInfo(String.class);
				String[] fields = ci.printFields();
				assertEquals(fields[0], ""public static final int java.lang.String.CASE_INSENSITIVE_ORDER=0"");
				assertEquals(fields[1], ""public static final java.lang.String java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[2], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[3], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[4], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[5], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[6], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[7], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[8], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[9], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[10], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[11], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[12], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[13], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[14], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[15], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[16], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[17], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[18], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[19], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[20], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[21], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[22], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[23], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[24], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[25], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[26], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[27], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[28], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[29], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[30], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[31], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[32], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[33], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[34], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[35], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[36], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[37], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[38], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[39], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[40], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[41], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[42], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[43], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[44], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[45], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[46], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[47], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[48], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[49], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[50], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[51], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[52], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[53], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[54], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[55], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[56], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[57], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[58], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[59], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[60], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[61], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[62], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[63], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[64], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[65], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[66], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[67], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[68], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[69], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[70], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[71], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[72], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[73], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[74], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[75], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[76], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[77], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[78], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[79], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[80], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[81], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[82], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[83], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[84], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[85], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[86], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[87], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[88], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[89], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[90], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[91], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE_ORDER=null"");
				assertEquals(fields[92], ""public static final java.util.Comparator java.lang.String.CASE_INSENSITIVE"
cmpl-6wwbwvrALHVV3vHaURSWNejZT2Xwl,/EvoSuiteBenchmark/scenario2/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo1.java,126.17717742919922,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return string array of public methods
     */
    public String[] printMethods() {
        if (debug)
            System.out.println(""****************************************"");
        String[] tempArray = null;
        if (cMethods != null) {
            tempArray = new String[cMethods.length];
            System.arraycopy(cMethods, 0, tempArray, 0, cMethods.length);
        }
        if (debug && tempArray == null)
            System.out.println(""No public methods."");
        else {
            printArray(tempArray);
        }
        return tempArray;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfoTest {

		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has no public methods.
		*/
		@Test
		void testPrintMethods1() {
				ClassInfo ci = new ClassInfo(String.class);
				String[] methods = ci.printMethods();
				assertEquals(0, methods.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has one public method.
		*/
		@Test
		void testPrintMethods2() {
				ClassInfo ci = new ClassInfo(JFrame.class);
				String[] methods = ci.printMethods();
				assertEquals(1, methods.length);
				assertEquals(""public void javax.swing.JFrame.setDefaultCloseOperation(int)"", methods[0]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has two public methods.
		*/
		@Test
		void testPrintMethods3() {
				ClassInfo ci = new ClassInfo(JButton.class);
				String[] methods = ci.printMethods();
				assertEquals(2, methods.length);
				assertEquals(""public void javax.swing.JButton.setText(java.lang.String)"", methods[0]);
				assertEquals(""public void javax.swing.JButton.setActionCommand(java.lang.String)"", methods[1]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has three public methods.
		*/
		@Test
		void testPrintMethods4() {
				ClassInfo ci = new ClassInfo(JLabel.class);
				String[] methods = ci.printMethods();
				assertEquals(3, methods.length);
				assertEquals(""public void javax.swing.JLabel.setText(java.lang.String)"", methods[0]);
				assertEquals(""public void javax.swing.JLabel.setIcon(javax.swing.Icon)"", methods[1]);
				assertEquals(""public void javax.swing.JLabel.setHorizontalAlignment(int)"", methods[2]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has four public methods.
		*/
		@Test
		void testPrintMethods5() {
				ClassInfo ci = new ClassInfo(JTextField.class);
				String[] methods = ci.printMethods();
				assertEquals(4, methods.length);
				assertEquals(""public void javax.swing.JTextField.setText(java.lang.String)"", methods[0]);
				assertEquals(""public void javax.swing.JTextField.setColumns(int)"", methods[1]);
				assertEquals(""public void javax.swing.JTextField.setHorizontalAlignment(int)"", methods[2]);
				assertEquals(""public void javax.swing.JTextField.setEditable(boolean)"", methods[3]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has five public methods.
		*/
		@Test
		void testPrintMethods6() {
				ClassInfo ci = new ClassInfo(JTextArea.class);
				String[] methods = ci.printMethods();
				assertEquals(5, methods.length);
				assertEquals(""public void javax.swing.JTextArea.setText(java.lang.String)"", methods[0]);
				assertEquals(""public void javax.swing.JTextArea.setColumns(int)"", methods[1]);
				assertEquals(""public void javax.swing.JTextArea.setRows(int)"", methods[2]);
				assertEquals(""public void javax.swing.JTextArea.setLineWrap(boolean)"", methods[3]);
				assertEquals(""public void javax.swing.JTextArea.setEditable(boolean)"", methods[4]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has six public methods.
		*/
		@Test
		void testPrintMethods7() {
				ClassInfo ci = new ClassInfo(JComboBox.class);
				String[] methods = ci.printMethods();
				assertEquals(6, methods.length);
				assertEquals(""public void javax.swing.JComboBox.setEditable(boolean)"", methods[0]);
				assertEquals(""public void javax.swing.JComboBox.setMaximumRowCount(int)"", methods[1]);
				assertEquals(""public void javax.swing.JComboBox.setSelectedItem(java.lang.Object)"", methods[2]);
				assertEquals(""public void javax.swing.JComboBox.setSelectedIndex(int)"", methods[3]);
				assertEquals(""public void javax.swing.JComboBox.setPrototypeDisplayValue(java.lang.Object)"", methods[4]);
				assertEquals(""public void javax.swing.JComboBox.setRenderer(javax.swing.ListCellRenderer)"", methods[5]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has seven public methods.
		*/
		@Test
		void testPrintMethods8() {
				ClassInfo ci = new ClassInfo(JList.class);
				String[] methods = ci.printMethods();
				assertEquals(7, methods.length);
				assertEquals(""public void javax.swing.JList.setSelectionMode(int)"", methods[0]);
				assertEquals(""public void javax.swing.JList.setSelectedIndex(int)"", methods[1]);
				assertEquals(""public void javax.swing.JList.setSelectedIndices(int[])"", methods[2]);
				assertEquals(""public void javax.swing.JList.setSelectedValue(java.lang.Object, boolean)"", methods[3]);
				assertEquals(""public void javax.swing.JList.setSelectedValues(java.lang.Object[], boolean)"", methods[4]);
				assertEquals(""public void javax.swing.JList.setPrototypeCellValue(java.lang.Object)"", methods[5]);
				assertEquals(""public void javax.swing.JList.setCellRenderer(javax.swing.ListCellRenderer)"", methods[6]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has eight public methods.
		*/
		@Test
		void testPrintMethods9() {
				ClassInfo ci = new ClassInfo(JCheckBox.class);
				String[] methods = ci.printMethods();
				assertEquals(8, methods.length);
				assertEquals(""public void javax.swing.JCheckBox.setText(java.lang.String)"", methods[0]);
				assertEquals(""public void javax.swing.JCheckBox.setSelected(boolean)"", methods[1]);
				assertEquals(""public void javax.swing.JCheckBox.setHorizontalTextPosition(int)"", methods[2]);
				assertEquals(""public void javax.swing.JCheckBox.setVerticalTextPosition(int)"", methods[3]);
				assertEquals(""public void javax.swing.JCheckBox.setHorizontalAlignment(int)"", methods[4]);
				assertEquals(""public void javax.swing.JCheckBox.setVerticalAlignment(int)"", methods[5]);
				assertEquals(""public void javax.swing.JCheckBox.setHorizontalAlignment(int)"", methods[6]);
				assertEquals(""public void javax.swing.JCheckBox.setVerticalAlignment(int)"", methods[7]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has nine public methods.
		*/
		@Test
		void testPrintMethods10() {
				ClassInfo ci = new ClassInfo(JRadioButton.class);
				String[] methods = ci.printMethods();
				assertEquals(9, methods.length);
				assertEquals(""public void javax.swing.JRadioButton.setText(java.lang.String)"", methods[0]);
				assertEquals(""public void javax.swing.JRadioButton.setSelected(boolean)"", methods[1]);
				assertEquals(""public void javax.swing.JRadioButton.setHorizontalTextPosition(int)"", methods[2]);
				assertEquals(""public void javax.swing.JRadioButton.setVerticalTextPosition(int)"", methods[3]);
				assertEquals(""public void javax.swing.JRadioButton.setHorizontalAlignment(int)"", methods[4]);
				assertEquals(""public void javax.swing.JRadioButton.setVerticalAlignment(int)"", methods[5]);
				assertEquals(""public void javax.swing.JRadioButton.setHorizontalAlignment(int)"", methods[6]);
				assertEquals(""public void javax.swing.JRadioButton.setVerticalAlignment(int)"", methods[7]);
				assertEquals(""public void javax.swing.JRadioButton.setIcon(javax.swing.Icon)"", methods[8]);
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return string array of public methods
     */
    public String[] printMethods() {
        if (debug)
            System.out.println(""****************************************"");
        String[] tempArray = null;
        if (cMethods != null) {
            tempArray = new String[cMethods.length];
            System.arraycopy(cMethods, 0, tempArray, 0, cMethods.length);
        }
        if (debug && tempArray == null)
            System.out.println(""No public methods."");
        else {
            printArray(tempArray);
        }
        return tempArray;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfoTest {
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has no public methods.
		*/
		@Test
		void testPrintMethods1() {
				ClassInfo ci = new ClassInfo(String.class);
				String[] methods = ci.printMethods();
				assertEquals(0, methods.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has one public method.
		*/
		@Test
		void testPrintMethods2() {
				ClassInfo ci = new ClassInfo(JFrame.class);
				String[] methods = ci.printMethods();
				assertEquals(1, methods.length);
				assertEquals(""public void javax.swing.JFrame.setDefaultCloseOperation(int)"", methods[0]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has two public methods.
		*/
		@Test
		void testPrintMethods3() {
				ClassInfo ci = new ClassInfo(JButton.class);
				String[] methods = ci.printMethods();
				assertEquals(2, methods.length);
				assertEquals(""public void javax.swing.JButton.setText(java.lang.String)"", methods[0]);
				assertEquals(""public void javax.swing.JButton.setActionCommand(java.lang.String)"", methods[1]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has three public methods.
		*/
		@Test
		void testPrintMethods4() {
				ClassInfo ci = new ClassInfo(JLabel.class);
				String[] methods = ci.printMethods();
				assertEquals(3, methods.length);
				assertEquals(""public void javax.swing.JLabel.setText(java.lang.String)"", methods[0]);
				assertEquals(""public void javax.swing.JLabel.setIcon(javax.swing.Icon)"", methods[1]);
				assertEquals(""public void javax.swing.JLabel.setHorizontalAlignment(int)"", methods[2]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has four public methods.
		*/
		@Test
		void testPrintMethods5() {
				ClassInfo ci = new ClassInfo(JTextField.class);
				String[] methods = ci.printMethods();
				assertEquals(4, methods.length);
				assertEquals(""public void javax.swing.JTextField.setText(java.lang.String)"", methods[0]);
				assertEquals(""public void javax.swing.JTextField.setColumns(int)"", methods[1"
cmpl-6wwdylk3Uf6TvZNdOtQL0JdXZvRLw,/EvoSuiteBenchmark/scenario2/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo2.java,137.60286569595337,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public methods for
     * the class excluding inherited methods. The data is pulled from
     * the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @param param (not currently implemented) selects whether inherited
     *               objects are returned
     * @return string array of public methods
     */
    public String[] printMethods(int param) {
        if (cMethods == null)
            return null;
        if (debug)
            System.out.println(""****************************************"");
        String[] data = cMethods;
        StringList tempList = new StringList();
        for (int i = 0; i < cMethods.length; i++) {
            if (cMethods[i].indexOf(getClassName() + '.') != -1)
                tempList.add(cMethods[i]);
        }
        if (!tempList.isEmpty())
            data = tempList.toArray();
        else
            data = null;
        if (debug && data == null)
            System.out.println(""No public methods."");
        else {
            printArray(data);
        }
        return data;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfoTest {

		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has no public methods.
		*/
		@Test
		void testPrintMethods1() {
				ClassInfo ci = new ClassInfo(String.class);
				String[] data = ci.printMethods(0);
				assertNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods2() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods3() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods4() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods5() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods6() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods7() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods8() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods9() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods10() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public methods for
     * the class excluding inherited methods. The data is pulled from
     * the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @param param (not currently implemented) selects whether inherited
     *               objects are returned
     * @return string array of public methods
     */
    public String[] printMethods(int param) {
        if (cMethods == null)
            return null;
        if (debug)
            System.out.println(""****************************************"");
        String[] data = cMethods;
        StringList tempList = new StringList();
        for (int i = 0; i < cMethods.length; i++) {
            if (cMethods[i].indexOf(getClassName() + '.') != -1)
                tempList.add(cMethods[i]);
        }
        if (!tempList.isEmpty())
            data = tempList.toArray();
        else
            data = null;
        if (debug && data == null)
            System.out.println(""No public methods."");
        else {
            printArray(data);
        }
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfoTest {
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has no public methods.
		*/
		@Test
		void testPrintMethods1() {
				ClassInfo ci = new ClassInfo(String.class);
				String[] data = ci.printMethods(0);
				assertNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods2() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods3() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods4() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods5() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods6() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods7() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods8() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods9() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods10() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public methods for
     * the class excluding inherited methods. The data is pulled from
     * the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @param param (not currently implemented) selects whether inherited
     *               objects are returned
     * @return string array of public methods
     */
    public String[] printMethods(int param) {
        if (cMethods == null)
            return null;
        if (debug)
            System.out.println(""****************************************"");
        String[] data = cMethods;
        StringList tempList = new StringList();
        for (int i = 0; i < cMethods.length; i++) {
            if (cMethods[i].indexOf(getClassName() + '.') != -1)
                tempList.add(cMethods[i]);
        }
        if (!tempList.isEmpty())
            data = tempList.toArray();
        else
            data = null;
        if (debug && data == null)
            System.out.println(""No public methods."");
        else {
            printArray(data);
        }
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfoTest {
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has no public methods.
		*/
		@Test
		void testPrintMethods1() {
				ClassInfo ci = new ClassInfo(String.class);
				String[] data = ci.printMethods(0);
				assertNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods2() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods3() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods4() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods5() {
				ClassInfo ci = new ClassInfo(StringList.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
	"
cmpl-6wwgCiL6wE0ljXl9PtRWXGf9Ro8hy,/EvoSuiteBenchmark/scenario2/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo3.java,128.82418990135193,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public constructors for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return string array of public constructors
     */
    public String[] printConstructors() {
        Constructor[] constr = c.getConstructors();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(constr);
        if (debug && data == null)
            System.out.println(""No public constructors."");
        else
            printArray(data);
        return data;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfoTest {

		/**
		 * Test case for {@link ClassInfo#printConstructors()} method.
		 * It tests the method with a class that has no public constructors.
		 */
		@Test
		void testPrintConstructors1() {
				ClassInfo ci = new ClassInfo(String.class);
				String[] data = ci.printConstructors();
				assertNull(data);
		}
		
		/**
		 * Test case for {@link ClassInfo#printConstructors()} method.
		 * It tests the method with a class that has one public constructor.
		 */
		@Test
		void testPrintConstructors2() {
				ClassInfo ci = new ClassInfo(JFrame.class);
				String[] data = ci.printConstructors();
				assertEquals(1, data.length);
				assertEquals(""public javax.swing.JFrame()"", data[0]);
		}
		
		/**
		 * Test case for {@link ClassInfo#printConstructors()} method.
		 * It tests the method with a class that has two public constructors.
		 */
		@Test
		void testPrintConstructors3() {
				ClassInfo ci = new ClassInfo(JButton.class);
				String[] data = ci.printConstructors();
				assertEquals(2, data.length);
				assertEquals(""public javax.swing.JButton()"", data[0]);
				assertEquals(""public javax.swing.JButton(java.lang.String)"", data[1]);
		}
		
		/**
		 * Test case for {@link ClassInfo#printConstructors()} method.
		 * It tests the method with a class that has three public constructors.
		 */
		@Test
		void testPrintConstructors4() {
				ClassInfo ci = new ClassInfo(JTextField.class);
				String[] data = ci.printConstructors();
				assertEquals(3, data.length);
				assertEquals(""public javax.swing.JTextField()"", data[0]);
				assertEquals(""public javax.swing.JTextField(java.lang.String)"", data[1]);
				assertEquals(""public javax.swing.JTextField(int)"", data[2]);
		}
		
		/**
		 * Test case for {@link ClassInfo#printConstructors()} method.
		 * It tests the method with a class that has four public constructors.
		 */
		@Test
		void testPrintConstructors5() {
				ClassInfo ci = new ClassInfo(JTextArea.class);
				String[] data = ci.printConstructors();
				assertEquals(4, data.length);
				assertEquals(""public javax.swing.JTextArea()"", data[0]);
				assertEquals(""public javax.swing.JTextArea(java.lang.String)"", data[1]);
				assertEquals(""public javax.swing.JTextArea(int,int)"", data[2]);
				assertEquals(""public javax.swing.JTextArea(java.lang.String,int,int)"", data[3]);
		}
		
		/**
		 * Test case for {@link ClassInfo#printConstructors()} method.
		 * It tests the method with a class that has five public constructors.
		 */
		@Test
		void testPrintConstructors6() {
				ClassInfo ci = new ClassInfo(JList.class);
				String[] data = ci.printConstructors();
				assertEquals(5, data.length);
				assertEquals(""public javax.swing.JList()"", data[0]);
				assertEquals(""public javax.swing.JList(java.lang.Object[])"", data[1]);
				assertEquals(""public javax.swing.JList(javax.swing.ListModel)"", data[2]);
				assertEquals(""public javax.swing.JList(java.util.Vector)"", data[3]);
				assertEquals(""public javax.swing.JList(java.util.ListModel)"", data[4]);
		}
		
		/**
		 * Test case for {@link ClassInfo#printConstructors()} method.
		 * It tests the method with a class that has six public constructors.
		 */
		@Test
		void testPrintConstructors7() {
				ClassInfo ci = new ClassInfo(JComboBox.class);
				String[] data = ci.printConstructors();
				assertEquals(6, data.length);
				assertEquals(""public javax.swing.JComboBox()"", data[0]);
				assertEquals(""public javax.swing.JComboBox(java.lang.Object[])"", data[1]);
				assertEquals(""public javax.swing.JComboBox(javax.swing.ComboBoxModel)"", data[2]);
				assertEquals(""public javax.swing.JComboBox(java.util.Vector)"", data[3]);
				assertEquals(""public javax.swing.JComboBox(java.util.ListModel)"", data[4]);
				assertEquals(""public javax.swing.JComboBox(java.util.Vector,javax.swing.ComboBoxModel)"", data[5]);
		}
		
		/**
		 * Test case for {@link ClassInfo#printConstructors()} method.
		 * It tests the method with a class that has seven public constructors.
		 */
		@Test
		void testPrintConstructors8() {
				ClassInfo ci = new ClassInfo(JCheckBox.class);
				String[] data = ci.printConstructors();
				assertEquals(7, data.length);
				assertEquals(""public javax.swing.JCheckBox()"", data[0]);
				assertEquals(""public javax.swing.JCheckBox(java.lang.String)"", data[1]);
				assertEquals(""public javax.swing.JCheckBox(java.lang.String,boolean)"", data[2]);
				assertEquals(""public javax.swing.JCheckBox(javax.swing.Icon)"", data[3]);
				assertEquals(""public javax.swing.JCheckBox(javax.swing.Icon,boolean)"", data[4]);
				assertEquals(""public javax.swing.JCheckBox(java.lang.String,javax.swing.Icon)"", data[5]);
				assertEquals(""public javax.swing.JCheckBox(java.lang.String,javax.swing.Icon,boolean)"", data[6]);
		}
		
		/**
		 * Test case for {@link ClassInfo#printConstructors()} method.
		 * It tests the method with a class that has eight public constructors.
		 */
		@Test
		void testPrintConstructors9() {
				ClassInfo ci = new ClassInfo(JRadioButton.class);
				String[] data = ci.printConstructors();
				assertEquals(8, data.length);
				assertEquals(""public javax.swing.JRadioButton()"", data[0]);
				assertEquals(""public javax.swing.JRadioButton(java.lang.String)"", data[1]);
				assertEquals(""public javax.swing.JRadioButton(java.lang.String,boolean)"", data[2]);
				assertEquals(""public javax.swing.JRadioButton(javax.swing.Icon)"", data[3]);
				assertEquals(""public javax.swing.JRadioButton(javax.swing.Icon,boolean)"", data[4]);
				assertEquals(""public javax.swing.JRadioButton(java.lang.String,javax.swing.Icon)"", data[5]);
				assertEquals(""public javax.swing.JRadioButton(java.lang.String,javax.swing.Icon,boolean)"", data[6]);
				assertEquals(""public javax.swing.JRadioButton(javax.swing.Action)"", data[7]);
		}
		
		/**
		 * Test case for {@link ClassInfo#printConstructors()} method.
		 * It tests the method with a class that has nine public constructors.
		 */
		@Test
		void testPrintConstructors10() {
				ClassInfo ci = new ClassInfo(JToggleButton.class);
				String[] data = ci.printConstructors();
				assertEquals(9, data.length);
				assertEquals(""public javax.swing.JToggleButton()"", data[0]);
				assertEquals(""public javax.swing.JToggleButton(java.lang.String)"", data[1]);
				assertEquals(""public javax.swing.JToggleButton(java.lang.String,boolean)"", data[2]);
				assertEquals(""public javax.swing.JToggleButton(javax.swing.Icon)"", data[3]);
				assertEquals(""public javax.swing.JToggleButton(javax.swing.Icon,boolean)"", data[4]);
				assertEquals(""public javax.swing.JToggleButton(java.lang.String,javax.swing.Icon)"", data[5]);
				assertEquals(""public javax.swing.JToggleButton(java.lang.String,javax.swing.Icon,boolean)"", data[6]);
				assertEquals(""public javax.swing.JToggleButton(javax.swing.Action)"", data[7]);
				assertEquals(""public javax.swing.JToggleButton(javax.swing.Icon,boolean,boolean)"", data[8]);
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public constructors for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return string array of public constructors
     */
    public String[] printConstructors() {
        Constructor[] constr = c.getConstructors();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(constr);
        if (debug && data == null)
            System.out.println(""No public constructors."");
        else
            printArray(data);
        return data;
    }

    /**
     * Returns an array of strings that contain the public methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for methods.
     *
     * @return string array of public methods
     */
    public String[] printMethods() {
        Method[] meth = c.getMethods();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(meth);
        if (debug && data == null)
            System.out.println(""No public methods."");
        else
            printArray(data);
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfoTest {
		
		/**
		 * Test case for {@link ClassInfo#printMethods()} method.
		 * It tests the method with a class that has no public methods.
		 */
		@Test
		void testPrintMethods1() {
				ClassInfo ci = new ClassInfo(String.class);
				String[] data = ci.printMethods();
				assertNull(data);
		}
		
		/**
		 * Test case for {@link ClassInfo#printMethods()} method.
		 * It tests the method with a class that has one public method.
		 */
		@Test
		void testPrintMethods2() {
				ClassInfo ci = new ClassInfo(JFrame.class);
				String[] data = ci.printMethods();
				assertEquals(1, data.length);
				assertEquals(""public void javax.swing.JFrame.setDefaultCloseOperation(int)"", data[0]);
		}
		
		/**
		 * Test case for {@link ClassInfo#printMethods()} method.
		 * It tests the method with a class that has two public methods.
		 */
		@Test
		void testPrintMethods3() {
				ClassInfo ci = new ClassInfo(JButton.class);
				String[] data = ci.printMethods();
				assertEquals(2, data.length);
				assertEquals(""public void javax.swing.JButton.setText(java.lang.String)"", data[0]);
				assertEquals(""public java.lang.String javax.swing.JButton.getText()"", data[1]);
		}
		
		/**
		 * Test case for {@link ClassInfo#printMethods()} method.
		 * It tests the method with a class that has three public methods.
		 */
		@Test
		void testPrintMethods4() {
				ClassInfo ci = new ClassInfo(JTextField.class);
				String[] data = ci.printMethods();
				assertEquals(3, data.length);
				assertEquals(""public void javax.swing.JTextField.setText(java.lang.String)"", data[0]);
				assertEquals(""public java.lang.String javax.swing.JTextField.getText()"", data[1]);
				assertEquals(""public void javax.swing.JTextField.setColumns(int)"", data[2]);
		}
		
		/**
		 * Test case for {@link ClassInfo#printMethods()} method.
		 * It tests the method with a class that has four public methods.
		 */
		@Test
		void testPrintMethods5() {
				ClassInfo ci = new ClassInfo(J"
cmpl-6wwiG6dNnIizvh5wmkzUFYQf35mmB,/EvoSuiteBenchmark/scenario2/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo4.java,127.26373982429504,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the interfaces for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return string array of interfaces
     */
    public String[] printInterfaces() {
        Class[] inter = c.getInterfaces();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(inter);
        if (c != java.lang.Object.class && !c.isInterface()) {
            Class superC = c.getSuperclass();
            TreeSet<String> hInterfaces = new TreeSet<String>();
            int i = 0;
            if (data != null)
                for (i = 0; i < data.length; i++) {
                    hInterfaces.add(data[i]);
                }
            while (superC != null && superC != java.lang.Object.class) {
                inter = superC.getInterfaces();
                if (debug)
                    System.out.println(""****************************************"");
                data = getData(inter);
                if (data != null)
                    for (i = 0; i < data.length; i++) {
                        hInterfaces.add(data[i]);
                    }
                superC = superC.getSuperclass();
            }
            if (hInterfaces.size() != 0) {
                data = new String[hInterfaces.size()];
                Iterator it = hInterfaces.iterator();
                i = 0;
                while (it.hasNext()) {
                    data[i] = (String) it.next();
                    i++;
                }
            }
        }
        if (debug && data == null)
            System.out.println(""No interfaces."");
        else
            printArray(data);
        return data;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printInterfaces()} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printInterfaces()} method.
*/
class ClassInfoTest {

		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has no interfaces.
		*/
		@Test
		void testPrintInterfaces1() {
				ClassInfo ci = new ClassInfo(String.class);
				String[] data = ci.printInterfaces();
				assertNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has one interface.
		*/
		@Test
		void testPrintInterfaces2() {
				ClassInfo ci = new ClassInfo(JButton.class);
				String[] data = ci.printInterfaces();
				assertEquals(1, data.length);
				assertEquals(""java.awt.image.ImageObserver"", data[0]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has two interfaces.
		*/
		@Test
		void testPrintInterfaces3() {
				ClassInfo ci = new ClassInfo(JFrame.class);
				String[] data = ci.printInterfaces();
				assertEquals(2, data.length);
				assertEquals(""java.awt.image.ImageObserver"", data[0]);
				assertEquals(""java.awt.MenuContainer"", data[1]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has three interfaces.
		*/
		@Test
		void testPrintInterfaces4() {
				ClassInfo ci = new ClassInfo(JTextField.class);
				String[] data = ci.printInterfaces();
				assertEquals(3, data.length);
				assertEquals(""java.awt.image.ImageObserver"", data[0]);
				assertEquals(""java.awt.MenuContainer"", data[1]);
				assertEquals(""javax.accessibility.Accessible"", data[2]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has four interfaces.
		*/
		@Test
		void testPrintInterfaces5() {
				ClassInfo ci = new ClassInfo(JTextArea.class);
				String[] data = ci.printInterfaces();
				assertEquals(4, data.length);
				assertEquals(""java.awt.image.ImageObserver"", data[0]);
				assertEquals(""java.awt.MenuContainer"", data[1]);
				assertEquals(""javax.accessibility.Accessible"", data[2]);
				assertEquals(""javax.swing.Scrollable"", data[3]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has five interfaces.
		*/
		@Test
		void testPrintInterfaces6() {
				ClassInfo ci = new ClassInfo(JList.class);
				String[] data = ci.printInterfaces();
				assertEquals(5, data.length);
				assertEquals(""java.awt.image.ImageObserver"", data[0]);
				assertEquals(""java.awt.MenuContainer"", data[1]);
				assertEquals(""javax.accessibility.Accessible"", data[2]);
				assertEquals(""javax.swing.Scrollable"", data[3]);
				assertEquals(""javax.swing.ItemSelectable"", data[4]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has six interfaces.
		*/
		@Test
		void testPrintInterfaces7() {
				ClassInfo ci = new ClassInfo(JComboBox.class);
				String[] data = ci.printInterfaces();
				assertEquals(6, data.length);
				assertEquals(""java.awt.image.ImageObserver"", data[0]);
				assertEquals(""java.awt.MenuContainer"", data[1]);
				assertEquals(""javax.accessibility.Accessible"", data[2]);
				assertEquals(""javax.swing.Scrollable"", data[3]);
				assertEquals(""javax.swing.ItemSelectable"", data[4]);
				assertEquals(""javax.swing.ComboBoxEditor"", data[5]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has seven interfaces.
		*/
		@Test
		void testPrintInterfaces8() {
				ClassInfo ci = new ClassInfo(JTable.class);
				String[] data = ci.printInterfaces();
				assertEquals(7, data.length);
				assertEquals(""java.awt.image.ImageObserver"", data[0]);
				assertEquals(""java.awt.MenuContainer"", data[1]);
				assertEquals(""javax.accessibility.Accessible"", data[2]);
				assertEquals(""javax.swing.Scrollable"", data[3]);
				assertEquals(""javax.swing.ItemSelectable"", data[4]);
				assertEquals(""javax.swing.ComboBoxEditor"", data[5]);
				assertEquals(""javax.swing.table.TableModel"", data[6]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has eight interfaces.
		*/
		@Test
		void testPrintInterfaces9() {
				ClassInfo ci = new ClassInfo(JTree.class);
				String[] data = ci.printInterfaces();
				assertEquals(8, data.length);
				assertEquals(""java.awt.image.ImageObserver"", data[0]);
				assertEquals(""java.awt.MenuContainer"", data[1]);
				assertEquals(""javax.accessibility.Accessible"", data[2]);
				assertEquals(""javax.swing.Scrollable"", data[3]);
				assertEquals(""javax.swing.ItemSelectable"", data[4]);
				assertEquals(""javax.swing.ComboBoxEditor"", data[5]);
				assertEquals(""javax.swing.table.TableModel"", data[6]);
				assertEquals(""javax.swing.tree.TreeModel"", data[7]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has nine interfaces.
		*/
		@Test
		void testPrintInterfaces10() {
				ClassInfo ci = new ClassInfo(JTabbedPane.class);
				String[] data = ci.printInterfaces();
				assertEquals(9, data.length);
				assertEquals(""java.awt.image.ImageObserver"", data[0]);
				assertEquals(""java.awt.MenuContainer"", data[1]);
				assertEquals(""javax.accessibility.Accessible"", data[2]);
				assertEquals(""javax.swing.Scrollable"", data[3]);
				assertEquals(""javax.swing.ItemSelectable"", data[4]);
				assertEquals(""javax.swing.ComboBoxEditor"", data[5]);
				assertEquals(""javax.swing.table.TableModel"", data[6]);
				assertEquals(""javax.swing.tree.TreeModel"", data[7]);
				assertEquals(""javax.swing.SingleSelectionModel"", data[8]);
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the interfaces for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return string array of interfaces
     */
    public String[] printInterfaces() {
        Class[] inter = c.getInterfaces();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(inter);
        if (c != java.lang.Object.class && !c.isInterface()) {
            Class superC = c.getSuperclass();
            TreeSet<String> hInterfaces = new TreeSet<String>();
            int i = 0;
            if (data != null)
                for (i = 0; i < data.length; i++) {
                    hInterfaces.add(data[i]);
                }
            while (superC != null && superC != java.lang.Object.class) {
                inter = superC.getInterfaces();
                if (debug)
                    System.out.println(""****************************************"");
                data = getData(inter);
                if (data != null)
                    for (i = 0; i < data.length; i++) {
                        hInterfaces.add(data[i]);
                    }
                superC = superC.getSuperclass();
            }
            if (hInterfaces.size() != 0) {
                data = new String[hInterfaces.size()];
                Iterator it = hInterfaces.iterator();
                i = 0;
                while (it.hasNext()) {
                    data[i] = (String) it.next();
                    i++;
                }
            }
        }
        if (debug && data == null)
            System.out.println(""No interfaces."");
        else
            printArray(data);
        return data;
    }

    /**
     * Returns an array of strings that contain the constructors for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.reflect.Constructor[])} method for constructors.
     *
     * @return string array of constructors
     */
    public String[] printConstructors() {
        Constructor[] cons = c.getConstructors();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(cons);
        if (debug && data == null)
            System.out.println(""No constructors."");
        else
            printArray(data);
        return data;
    }

    /**
     * Returns an array of strings that contain the methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.reflect.Method[])} method for constructors.
     *
     * @return string array of methods
     */
    public String[] printMethods() {
        Method[] meth = c.getMethods();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(meth);
        if (debug && data == null)
            System.out.println(""No methods."");
        else
            printArray(data);
        return data;
    }

    /**
     * Returns an array of strings that contain the fields for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.reflect.Field[])} method for constructors.
     *
     * @return string array of fields
     */
    public String[] printFields() {
        Field[] fiel = c.getFields();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(fiel);
        if (debug && data == null)
            System.out.println(""No fields."");
        else
            printArray(data);
        return data;
    }

    /**
     * Returns an array of strings that contain the data for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.reflect.Field[])} method for constructors.
     *
     * @return string array of fields
     */
    public String[] printData() {
        String[] data = new String[4];
        data[0] = printClass();
        data[1] = printSuperClass();
        data[2] = printInterfaces();
        data[3] = printConstructors();
        data[4] = printMethods();
        data[5] = printFields();
        return data;
    }

    /**
     * Returns a string that contains the class for
     * the class. The data is pulled from the c private Class object.
     *
     * @return string of class
     */
    public String printClass() {
        String data = c.getName();
        if (debug)
            System.out.println(""****************************************"");
        if (debug)
            System.out.println(""Class: "" + data);
        return data;
    }

    /**
     * Returns a string that contains the superclass for
     * the class. The data is pulled from the c private Class object.
     *
     * @return string of superclass
     */
    public String printSuperClass() {
        String data = c.getSuperclass().getName();
        if (debug)
            System.out.println(""****************************************"");
        if (debug)
            System.out.println(""Superclass: "" + data);
        return data;
    }

    /**
     * Returns an array of strings that contain the data for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.reflect.Field[])} method for constructors.
     *
     * @return string array of fields
     */
    public String[] printData() {
        String[] data = new String[4];
        data[0] = printClass();
        data[1] = printSuperClass();
        data[2] = printInterfaces();
        data[3] = printConstructors();
        data[4] = printMethods();
        data[5] = printFields();
        return data;
    }

    /**
     * Returns a string that contains the class for
     * the class. The data is pulled from the c private Class object.
     *
     * @return string of class
     */
    public String printClass() {
        String data = c.getName();
        if (debug)
            System.out.println(""****************************************"");
        if (debug)
            System.out"
cmpl-6wwkKEVBhntzt6kz5ZGDwdm9Z5qll,/EvoSuiteBenchmark/scenario2/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo5.java,127.56857419013977,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Takes an array of Member objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param m array of Member objects
     * @return string array of names
     */
    public static String[] getData(Member[] m) {
        length = m.length;
        if (length == 0)
            return null;
        String[] StringData = new String[length];
        String tempStr;
        for (count = 0; count < m.length; count++) {
            tempStr = m[count].toString();
            StringData[count] = tempStr;
        }
        return StringData;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {

	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is empty.
	 */
	@Test
	void testGetDataEmptyArray() {
		Member[] m = new Member[0];
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray2() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray3() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray4() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray5() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray6() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray7() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray8() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray9() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray10() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is empty.
	 */
	@Test
	void testGetDataEmptyArray() {
		Member[] m = new Member[0];
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray2() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray3() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray4() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray5() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray6() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray7() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray8() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray9() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray10() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is empty.
	 */
	@Test
	void testGetDataEmptyArray() {
		Member[] m = new Member[0];
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray2() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray3() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray4() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray5() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray6() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray7() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray8() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray9() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray10() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is empty.
	 */
	@Test
	void testGetDataEmptyArray() {
		Member[] m = new Member[0];
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray2() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns null when the array is null.
	 */
	@Test
	void testGetDataNullArray3() {
		Member[] m = null;
		assertNull(ClassInfo.getData(m));
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns"
cmpl-6wwmN8qetjsidYk3lpsfmDG9abYib,/EvoSuiteBenchmark/scenario2/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo6.java,108.59170818328857,stop,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Takes an array of Class objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param m array of Class objects
     * @return string array of names
     */
    public static String[] getData(Class[] m) {
        length = m.length;
        if (length == 0)
            return null;
        String[] StringData = new String[length];
        String tempStr;
        for (count = 0; count < m.length; count++) {
            tempStr = m[count].getName();
            StringData[count] = tempStr;
        }
        return StringData;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.
*/
class ClassInfoTest {

	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the {@link ClassInfo#getData(Class[])} method
	 * with a null array.
	 */
	@Test
	void testGetDataNull() {
		Class[] m = null;
		String[] expected = null;
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the {@link ClassInfo#getData(Class[])} method
	 * with an empty array.
	 */
	@Test
	void testGetDataEmpty() {
		Class[] m = new Class[0];
		String[] expected = null;
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the {@link ClassInfo#getData(Class[])} method
	 * with an array of one element.
	 */
	@Test
	void testGetDataOneElement() {
		Class[] m = new Class[1];
		m[0] = String.class;
		String[] expected = new String[1];
		expected[0] = ""java.lang.String"";
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the {@link ClassInfo#getData(Class[])} method
	 * with an array of two elements.
	 */
	@Test
	void testGetDataTwoElements() {
		Class[] m = new Class[2];
		m[0] = String.class;
		m[1] = Integer.class;
		String[] expected = new String[2];
		expected[0] = ""java.lang.String"";
		expected[1] = ""java.lang.Integer"";
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the {@link ClassInfo#getData(Class[])} method
	 * with an array of three elements.
	 */
	@Test
	void testGetDataThreeElements() {
		Class[] m = new Class[3];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		String[] expected = new String[3];
		expected[0] = ""java.lang.String"";
		expected[1] = ""java.lang.Integer"";
		expected[2] = ""java.lang.Double"";
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the {@link ClassInfo#getData(Class[])} method
	 * with an array of four elements.
	 */
	@Test
	void testGetDataFourElements() {
		Class[] m = new Class[4];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		String[] expected = new String[4];
		expected[0] = ""java.lang.String"";
		expected[1] = ""java.lang.Integer"";
		expected[2] = ""java.lang.Double"";
		expected[3] = ""java.lang.Boolean"";
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the {@link ClassInfo#getData(Class[])} method
	 * with an array of five elements.
	 */
	@Test
	void testGetDataFiveElements() {
		Class[] m = new Class[5];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		m[4] = Character.class;
		String[] expected = new String[5];
		expected[0] = ""java.lang.String"";
		expected[1] = ""java.lang.Integer"";
		expected[2] = ""java.lang.Double"";
		expected[3] = ""java.lang.Boolean"";
		expected[4] = ""java.lang.Character"";
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the {@link ClassInfo#getData(Class[])} method
	 * with an array of six elements.
	 */
	@Test
	void testGetDataSixElements() {
		Class[] m = new Class[6];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		m[4] = Character.class;
		m[5] = Byte.class;
		String[] expected = new String[6];
		expected[0] = ""java.lang.String"";
		expected[1] = ""java.lang.Integer"";
		expected[2] = ""java.lang.Double"";
		expected[3] = ""java.lang.Boolean"";
		expected[4] = ""java.lang.Character"";
		expected[5] = ""java.lang.Byte"";
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the {@link ClassInfo#getData(Class[])} method
	 * with an array of seven elements.
	 */
	@Test
	void testGetDataSevenElements() {
		Class[] m = new Class[7];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		m[4] = Character.class;
		m[5] = Byte.class;
		m[6] = Short.class;
		String[] expected = new String[7];
		expected[0] = ""java.lang.String"";
		expected[1] = ""java.lang.Integer"";
		expected[2] = ""java.lang.Double"";
		expected[3] = ""java.lang.Boolean"";
		expected[4] = ""java.lang.Character"";
		expected[5] = ""java.lang.Byte"";
		expected[6] = ""java.lang.Short"";
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the {@link ClassInfo#getData(Class[])} method
	 * with an array of eight elements.
	 */
	@Test
	void testGetDataEightElements() {
		Class[] m = new Class[8];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		m[4] = Character.class;
		m[5] = Byte.class;
		m[6] = Short.class;
		m[7] = Long.class;
		String[] expected = new String[8];
		expected[0] = ""java.lang.String"";
		expected[1] = ""java.lang.Integer"";
		expected[2] = ""java.lang.Double"";
		expected[3] = ""java.lang.Boolean"";
		expected[4] = ""java.lang.Character"";
		expected[5] = ""java.lang.Byte"";
		expected[6] = ""java.lang.Short"";
		expected[7] = ""java.lang.Long"";
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the {@link ClassInfo#getData(Class[])} method
	 * with an array of nine elements.
	 */
	@Test
	void testGetDataNineElements() {
		Class[] m = new Class[9];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		m[4] = Character.class;
		m[5] = Byte.class;
		m[6] = Short.class;
		m[7] = Long.class;
		m[8] = Float.class;
		String[] expected = new String[9];
		expected[0] = ""java.lang.String"";
		expected[1] = ""java.lang.Integer"";
		expected[2] = ""java.lang.Double"";
		expected[3] = ""java.lang.Boolean"";
		expected[4] = ""java.lang.Character"";
		expected[5] = ""java.lang.Byte"";
		expected[6] = ""java.lang.Short"";
		expected[7] = ""java.lang.Long"";
		expected[8] = ""java.lang.Float"";
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the {@link ClassInfo#getData(Class[])} method
	 * with an array of ten elements.
	 */
	@Test
	void testGetDataTenElements() {
		Class[] m = new Class[10];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		m[4] = Character.class;
		m[5] = Byte.class;
		m[6] = Short.class;
		m[7] = Long.class;
		m[8] = Float.class;
		m[9] = Void.class;
		String[] expected = new String[10];
		expected[0] = ""java.lang.String"";
		expected[1] = ""java.lang.Integer"";
		expected[2] = ""java.lang.Double"";
		expected[3] = ""java.lang.Boolean"";
		expected[4] = ""java.lang.Character"";
		expected[5] = ""java.lang.Byte"";
		expected[6] = ""java.lang.Short"";
		expected[7] = ""java.lang.Long"";
		expected[8] = ""java.lang.Float"";
		expected[9] = ""java.lang.Void"";
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
}"
cmpl-6wwo8yrYmhudVk1RAFf7b19cbDxhx,/EvoSuiteBenchmark/scenario2/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo7.java,63.545114278793335,stop,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, and selects methods that have that
     * fragment in them.
     * <p>
     * This method calls searchStrings().
     *
     * @param tempStr string fragment with which to search
     * @return string array of found methods
     */
    public String[] srchMethods(String tempStr) {
        if (tempStr == null)
            return null;
        fndMethods = StringTools.searchStrings(cMethods, tempStr);
        if (fndMethods != null) {
            String[] tempArray = new String[fndMethods.length];
            System.arraycopy(fndMethods, 0, tempArray, 0, fndMethods.length);
            return tempArray;
        }
        return null;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfoTest {

	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case tests the method with a null string.
	 * <p>
	 * The expected result is a null string array.
	 */
	@Test
	void testSrchMethodsNull() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(null);
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case tests the method with an empty string.
	 * <p>
	 * The expected result is a null string array.
	 */
	@Test
	void testSrchMethodsEmpty() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods("""");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case tests the method with a string that is not found.
	 * <p>
	 * The expected result is a null string array.
	 */
	@Test
	void testSrchMethodsNotFound() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""not found"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case tests the method with a string that is found.
	 * <p>
	 * The expected result is a string array with one element.
	 */
	@Test
	void testSrchMethodsFound() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""get"");
		assertNotNull(result);
		assertEquals(1, result.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case tests the method with a string that is found.
	 * <p>
	 * The expected result is a string array with one element.
	 */
	@Test
	void testSrchMethodsFound2() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""get"");
		assertNotNull(result);
		assertEquals(1, result.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case tests the method with a string that is found.
	 * <p>
	 * The expected result is a string array with one element.
	 */
	@Test
	void testSrchMethodsFound3() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""get"");
		assertNotNull(result);
		assertEquals(1, result.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case tests the method with a string that is found.
	 * <p>
	 * The expected result is a string array with one element.
	 */
	@Test
	void testSrchMethodsFound4() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""get"");
		assertNotNull(result);
		assertEquals(1, result.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case tests the method with a string that is found.
	 * <p>
	 * The expected result is a string array with one element.
	 */
	@Test
	void testSrchMethodsFound5() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""get"");
		assertNotNull(result);
		assertEquals(1, result.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case tests the method with a string that is found.
	 * <p>
	 * The expected result is a string array with one element.
	 */
	@Test
	void testSrchMethodsFound6() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""get"");
		assertNotNull(result);
		assertEquals(1, result.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case tests the method with a string that is found.
	 * <p>
	 * The expected result is a string array with one element.
	 */
	@Test
	void testSrchMethodsFound7() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""get"");
		assertNotNull(result);
		assertEquals(1, result.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case tests the method with a string that is found.
	 * <p>
	 * The expected result is a string array with one element.
	 */
	@Test
	void testSrchMethodsFound8() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""get"");
		assertNotNull(result);
		assertEquals(1, result.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case tests the method with a string that is found.
	 * <p>
	 * The expected result is a string array with one element.
	 */
	@Test
	void testSrchMethodsFound9() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""get"");
		assertNotNull(result);
		assertEquals(1, result.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case tests the method with a string that is found.
	 * <p>
	 * The expected result is a string array with one element.
	 */
	@Test
	void testSrchMethodsFound10() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""get"");
		assertNotNull(result);
		assertEquals(1, result.length);
	}
}"
cmpl-6wwp97xgUmvc5RoBmuqkMYQ5faU9k,/EvoSuiteBenchmark/scenario2/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo8.java,3.9570627212524414,stop,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Searches through found methods and returns method at given
     * position, uses anonymous inner class.  If no methods
     * have been searched for it returns null.
     *
     * @param pos position of found methods in array 0 is first.
     * @return MethodData object with information about method
     */
    public MethodData getFoundMethod(final int pos) {
        if (fndMethods == null || pos > fndMethods.length)
            return null;
        return new MethodData() {

            //check to make sure position isn't out of range
            String tempStr = fndMethods[pos], tempStr2;

            String className, methodName;

            int begin, end;

            Class methClass;

            {
                end = tempStr.indexOf("")"");
                tempStr = tempStr.substring(0, end + 1);
                begin = tempStr.lastIndexOf("" "");
                tempStr = tempStr.substring(begin + 1, tempStr.length());
                begin = tempStr.indexOf(""("");
                end = tempStr.lastIndexOf(""."", begin);
                className = tempStr.substring(0, end);
                methodName = tempStr.substring(end + 1, tempStr.length());
                if (debug)
                    System.out.println(""className="" + className);
                methClass = ClassInfo.tryClass(className);
                if (debug)
                    System.out.println(""methClass="" + methClass);
            }

            public String getMethPackage() {
                if (methClass == null)
                    return null;
                return methClass.getPackage() != null ? methClass.getPackage().getName() : null;
            }

            public String getMethClass() {
                if (methClass == null)
                    return null;
                return methClass.getName();
            }

            public String getMethName() {
                return methodName;
            }
        };
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfoTest {

		@Test
		void testGetFoundMethod() {
				ClassInfo classInfo = new ClassInfo();
				MethodData methodData = classInfo.getFoundMethod(0);
				assertEquals(""java.lang.String"", methodData.getMethClass());
				assertEquals(""java.lang"", methodData.getMethPackage());
				assertEquals(""toString"", methodData.getMethName());
		}
}"
