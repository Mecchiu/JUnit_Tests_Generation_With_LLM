ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wuPNgfhX0BkGEVZiIssFLa5IazH3,/EvoSuiteBenchmark/scenario3/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState0.java,123.53388810157776,length,"// EndState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a  state machines ending state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the end state.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 * @stereotype singleton
 */
public final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the EndState object.
     * Creation date: (2/20/01 11:05:10 AM)
     *
     * @return com.objectmentors.state.EndState
     */
    public static EndState getSingleton();
}
","// EndStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getSingleton()} method.
*/
class EndStateTest {","// EndStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getSingleton()} method.
*/
class EndStateTest {

	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_2() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_3() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_4() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_5() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_6() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_7() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_8() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_9() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_10() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
}

// EndStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getSingleton()} method.
*/
class EndStateTest {
		
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_2() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_3() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_4() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_5() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_6() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_7() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_8() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_9() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_10() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
}

// EndStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getSingleton()} method.
*/
class EndStateTest {
		
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_2() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_3() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_4() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_5() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_6() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_7() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_8() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_9() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_10() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
}

// EndStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getSingleton()} method.
*/
class EndStateTest {
		
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_2() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_3() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_4() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_5() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_6() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_7() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_8() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_9() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_10() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
}

// EndStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getSingleton()} method.
*/
class EndStateTest {
		
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_2() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_3() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton"
cmpl-6wuRNocon9h2DjJO0yTmzoc0YInlW,/EvoSuiteBenchmark/scenario3/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState1.java,122.87768220901489,length,"// EndState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a  state machines ending state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the end state.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 * @stereotype singleton
 */
public final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Returns this EndState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}
","// EndStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#toObject()} method.
*/
class EndStateTest {","// EndStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#toObject()} method.
*/
class EndStateTest {

	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject() {
		// TODO: implement test
	}
}

// IState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Interface for all state objects.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public interface IState {

    /**
     * Returns this state object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}

// IStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IState}.
* It contains ten unit test cases for the {@link IState#toObject()} method.
*/
class IStateTest {
		
	/**
	* Test case for {@link IState#toObject()}.
	*/
	@Test
	void testToObject() {
		// TODO: implement test
	}
}

// State.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state in a state machine.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public class State implements IState {

    /**
     * Returns this State object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}

// StateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link State}.
* It contains ten unit test cases for the {@link State#toObject()} method.
*/
class StateTest {
		
	/**
	* Test case for {@link State#toObject()}.
	*/
	@Test
	void testToObject() {
		// TODO: implement test
	}
}

// StateMachine.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machine.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public class StateMachine {

    /**
     * Returns this StateMachine object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}

// StateMachineTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StateMachine}.
* It contains ten unit test cases for the {@link StateMachine#toObject()} method.
*/
class StateMachineTest {
		
	/**
	* Test case for {@link StateMachine#toObject()}.
	*/
	@Test
	void testToObject() {
		// TODO: implement test
	}
}

// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a transition between two states.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public class Transition {

    /**
     * Returns this Transition object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}

// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#toObject()} method.
*/
class TransitionTest {
		
	/**
	* Test case for {@link Transition#toObject()}.
	*/
	@Test
	void testToObject() {
		// TODO: implement test
	}
}

// TransitionException.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Exception thrown when a transition is attempted that is not allowed.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public class TransitionException extends java.lang.Exception {

    /**
     * Returns this TransitionException object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}

// TransitionExceptionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TransitionException}.
* It contains ten unit test cases for the {@link TransitionException#toObject()} method.
*/
class TransitionExceptionTest {
		
	/**
	* Test case for {@link TransitionException#toObject()}.
	*/
	@Test
	void testToObject() {
		// TODO: implement test
	}
}

// TransitionListener.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Interface for objects that wish to be notified of state transitions.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public interface TransitionListener {

    /**
     * Returns this TransitionListener object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}

// TransitionListenerTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TransitionListener}.
* It contains ten unit test cases for the {@link TransitionListener#toObject()} method.
*/
class TransitionListenerTest {
		
	/**
	* Test case for {@link TransitionListener#toObject()}.
	*/
	@Test
	void testToObject() {
		// TODO: implement test
	}
}

// TransitionListenerAdapter.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Adapter class for the TransitionListener interface.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public class TransitionListenerAdapter implements TransitionListener {

    /**
     * Returns this TransitionListenerAdapter object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}

// TransitionListenerAdapterTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TransitionListenerAdapter}.
* It contains ten unit test cases for the {@link TransitionListenerAdapter#toObject()} method.
*/
class TransitionListenerAdapterTest {
		
	/**
	* Test case for {@link TransitionListenerAdapter#toObject()}.
	*/
	@Test
	void testToObject() {
		// TODO: implement test
	}
}

// TransitionListenerException.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Exception thrown when a transition listener throws an exception.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public class TransitionListenerException extends java.lang.Exception {

    /**
     * Returns this TransitionListenerException object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}

// TransitionListenerExceptionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TransitionListenerException}.
* It contains ten unit test cases for the {@link TransitionListenerException#toObject()} method.
*/
class TransitionListenerExceptionTest {
		
	/**
	* Test case for {@link TransitionListenerException#toObject()}.
	*/
	@Test
	void testToObject() {
		// TODO: implement test
	}
}

// TransitionListenerManager.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class that manages the transition listeners for a state machine.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public class TransitionListenerManager {

    /**
     * Returns this TransitionListenerManager object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}

// TransitionListenerManagerTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TransitionListenerManager}.
* It contains ten unit test cases for the {@link TransitionListenerManager#toObject()} method.
*/
class TransitionListenerManagerTest {
		
	/**
	* Test case for {@link TransitionListenerManager#toObject()}.
	*/
	@Test
	void testToObject() {
		// TODO: implement test
	}
}

// TransitionManager.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class that manages the transitions for a state machine.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public class TransitionManager {

    /**
     * Returns this TransitionManager object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}

// TransitionManagerTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TransitionManager}.
* It contains ten unit test cases for the {@link TransitionManager#toObject()} method.
*/
class TransitionManagerTest {
		
	/**
	* Test case for {@link TransitionManager#toObject()}.
	*/
	@Test
	void testToObject() {
		// TODO: implement test
	}
}

// TransitionNotFoundException.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Exception thrown when a transition is attempted that does not exist.
 * Creation date: (2/19/01 4:22:51 PM"
67c66d5e-92f2-43d1-ae30-830aed781260,/EvoSuiteBenchmark/scenario3/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState0.java,-1,"ERROR - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)","// StartState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines staring state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the start state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the StartState object.
     * Creation date: (2/20/01 11:05:10 AM)
     *
     * @return com.objectmentors.state.StartState
     */
    public static StartState getSingleton();
}
","// StartStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#getSingleton()} method.
*/
class StartStateTest {","// StartStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#getSingleton()} method.
*/
class StartStateTest {
"
839eea56-2167-48f5-b91a-4ce328413dc6,/EvoSuiteBenchmark/scenario3/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState1.java,-1,"ERROR - HTTP code 502 from API (<html>
<head><title>502 Bad Gateway</title></head>
<body>
<center><h1>502 Bad Gateway</h1></center>
<hr><center>nginx</center>
</body>
</html>
)","// StartState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines staring state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the start state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Returns this StartState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}
","// StartStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#toObject()} method.
*/
class StartStateTest {","// StartStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#toObject()} method.
*/
class StartStateTest {
"
cmpl-6wujpBFfnfVRAacD9feeglwIq8MKa,/EvoSuiteBenchmark/scenario3/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StringMatchesGuardCondition.java,172.9847412109375,length,"// StringMatchesGuardCondition.java
package uk.me.jockmacmad.jstate.state;

/**
 * Insert the type's description here.
 * Creation date: (2/26/01 5:09:09 PM)
 *
 * @author: Administrator
 */
public class StringMatchesGuardCondition implements uk.me.jockmacmad.jstate.state.IGuardCondition {

    /**
     * Insert the method's description here.
     * Creation date: (2/26/01 5:09:09 PM)
     *
     * @return boolean
     * @param o java.lang.Object
     */
    public boolean evaluate(Object o);
}
","// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains ten unit test cases for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {","// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains ten unit test cases for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {

	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: null.
	* Expected result: false.
	*/
	@Test
	void testEvaluate_Null() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition("""");
		assertFalse(guard.evaluate(null));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: empty string.
	* Expected result: false.
	*/
	@Test
	void testEvaluate_EmptyString() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition("""");
		assertFalse(guard.evaluate(""""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that does not match.
	* Expected result: false.
	*/
	@Test
	void testEvaluate_StringDoesNotMatch() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"");
		assertFalse(guard.evaluate(""def""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatches() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"");
		assertTrue(guard.evaluate(""abc""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches with leading and trailing whitespace.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatchesWithLeadingAndTrailingWhitespace() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"");
		assertTrue(guard.evaluate("" abc ""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches with leading whitespace.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatchesWithLeadingWhitespace() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"");
		assertTrue(guard.evaluate("" abc""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches with trailing whitespace.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatchesWithTrailingWhitespace() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"");
		assertTrue(guard.evaluate(""abc ""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches with leading and trailing whitespace.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatchesWithLeadingAndTrailingWhitespaceAndCaseInsensitive() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"", true);
		assertTrue(guard.evaluate("" ABC ""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches with leading whitespace.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatchesWithLeadingWhitespaceAndCaseInsensitive() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"", true);
		assertTrue(guard.evaluate("" ABC""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches with trailing whitespace.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatchesWithTrailingWhitespaceAndCaseInsensitive() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"", true);
		assertTrue(guard.evaluate(""ABC ""));
	}
}

// StringMatchesGuardCondition.java
package uk.me.jockmacmad.jstate.state;

/**
 * Insert the type's description here.
 * Creation date: (2/26/01 5:09:09 PM)
 *
 * @author: Administrator
 */
public class StringMatchesGuardCondition implements uk.me.jockmacmad.jstate.state.IGuardCondition {

    /**
     * Insert the method's description here.
     * Creation date: (2/26/01 5:09:09 PM)
     *
     * @return boolean
     * @param o java.lang.Object
     */
    public boolean evaluate(Object o);
}

// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains ten unit test cases for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {
		
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: null.
	* Expected result: false.
	*/
	@Test
	void testEvaluate_Null() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition("""");
		assertFalse(guard.evaluate(null));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: empty string.
	* Expected result: false.
	*/
	@Test
	void testEvaluate_EmptyString() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition("""");
		assertFalse(guard.evaluate(""""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that does not match.
	* Expected result: false.
	*/
	@Test
	void testEvaluate_StringDoesNotMatch() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"");
		assertFalse(guard.evaluate(""def""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatches() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"");
		assertTrue(guard.evaluate(""abc""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches with leading and trailing whitespace.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatchesWithLeadingAndTrailingWhitespace() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"");
		assertTrue(guard.evaluate("" abc ""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches with leading whitespace.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatchesWithLeadingWhitespace() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"");
		assertTrue(guard.evaluate("" abc""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches with trailing whitespace.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatchesWithTrailingWhitespace() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"");
		assertTrue(guard.evaluate(""abc ""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches with leading and trailing whitespace.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatchesWithLeadingAndTrailingWhitespaceAndCaseInsensitive() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"", true);
		assertTrue(guard.evaluate("" ABC ""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches with leading whitespace.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatchesWithLeadingWhitespaceAndCaseInsensitive() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"", true);
		assertTrue(guard.evaluate("" ABC""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches with trailing whitespace.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatchesWithTrailingWhitespaceAndCaseInsensitive() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"", true);
		assertTrue(guard.evaluate(""ABC ""));
	}
}

// StringMatchesGuardCondition.java
package uk.me.jockmacmad.jstate.state;

/**
 * Insert the type's description here.
 * Creation date: (2/26/01 5:09:09 PM)
 *
 * @author: Administrator
 */
public class StringMatchesGuardCondition implements uk.me.jockmacmad.jstate.state.IGuardCondition {

    /**
     * Insert the method's description here.
     * Creation date: (2/26/01 5:09:09 PM)
     *
     * @return boolean
     * @param o java.lang.Object
     */
    public boolean evaluate(Object o);
}

// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains ten unit test cases for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {
		
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: null.
	* Expected result: false.
	*/
	@Test
	void testEvaluate_Null() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition("""");
		assertFalse(guard.evaluate(null));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: empty string.
	* Expected result: false.
	*/
	@Test
	void testEvaluate_EmptyString() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition("""");
		assertFalse(guard.evaluate(""""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that does not match.
	* Expected result: false.
	*/
	@Test
	void testEvaluate_StringDoesNotMatch() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"");
		assertFalse(guard.evaluate(""def""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatches() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"");
		assertTrue(guard.evaluate(""abc""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches with leading and trailing whitespace.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatchesWithLeadingAndTrailingWhitespace() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"");
		assertTrue(guard.evaluate("" abc ""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches with leading whitespace.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatchesWithLeadingWhitespace() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"");
		assertTrue(guard.evaluate("" abc""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches with trailing whitespace.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatchesWithTrailingWhitespace() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"");
		assertTrue(guard.evaluate(""abc ""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches with leading and trailing whitespace.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatchesWithLeadingAndTrailingWhitespaceAndCaseInsensitive() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"", true);
		assertTrue(guard.evaluate("" ABC ""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches with leading whitespace.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatchesWithLeadingWhitespaceAndCaseInsensitive() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"", true);
		assertTrue(guard.evaluate("" ABC""));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: string that matches with trailing whitespace.
	* Expected result: true.
	*/
	@Test
	void testEvaluate_StringMatchesWithTrailingWhitespaceAndCaseInsensitive() {
		StringMatchesGuardCondition guard = new StringMatchesGuardCondition(""abc"", true);
		assertTrue(guard.evaluate(""ABC ""));
	}
}

// StringMatchesGuardCondition.java
package uk.me.jockmacmad.jstate.state;

/**
 * Insert the type's description here.
 * Creation date: (2/26/01 5:09:09 PM)
 *
 * @author: Administrator
 */
public class StringMatchesGuardCondition implements uk.me.jockmacmad.jstate.state.IGuardCondition {

    /**
     * Insert the method's description here.
     * Creation date: (2/26/01 5:09:09 PM)
     *
     * @return boolean
     * @param o java.lang.Object
     */
    public boolean evaluate(Object o);
}

// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import"
cmpl-6wumc5OgaKR8cxdr3m8QORW2htHx2,/EvoSuiteBenchmark/scenario3/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition0.java,149.05209612846375,length,"// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    /**
     * Causes this Transition to fire.
     * Creation date: (14/02/01 6:21:09 PM)
     *
     * @author Don Stewart
     * @since 0.1
     * @param pCurrentState the current State
     * @param pEvent the Event to trigger
     * @return com.objectmentors.state.State
     */
    public final IState trigger(final IState pCurrentState, final Event pEvent);
}
","// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#trigger(IState, Event)} method.
*/
class TransitionTest {","// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#trigger(IState, Event)} method.
*/
class TransitionTest {

	/**
	* Test case for the {@link Transition#trigger(IState, Event)} method.
	* <p>
	* This test case is used to test the {@link Transition#trigger(IState, Event)} method.
	* It checks that the method returns the correct value.
	*/
	@Test
	void testTrigger() {
		// TODO: implement this test case
		// Ensure the constructor and attributes are correct
		assertEquals(0, 0, ""0 must be 0"");
	}
}

// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    /**
     * Causes this Transition to fire.
     * Creation date: (14/02/01 6:21:09 PM)
     *
     * @author Don Stewart
     * @since 0.1
     * @param pCurrentState the current State
     * @param pEvent the Event to trigger
     * @return com.objectmentors.state.State
     */
    public final IState trigger(final IState pCurrentState, final Event pEvent);
}

// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#trigger(IState, Event)} method.
*/
class TransitionTest {
		
	/**
	* Test case for the {@link Transition#trigger(IState, Event)} method.
	* <p>
	* This test case is used to test the {@link Transition#trigger(IState, Event)} method.
	* It checks that the method returns the correct value.
	*/
	@Test
	void testTrigger() {
		// TODO: implement this test case
		// Ensure the constructor and attributes are correct
		assertEquals(0, 0, ""0 must be 0"");
	}
}

// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    /**
     * Causes this Transition to fire.
     * Creation date: (14/02/01 6:21:09 PM)
     *
     * @author Don Stewart
     * @since 0.1
     * @param pCurrentState the current State
     * @param pEvent the Event to trigger
     * @return com.objectmentors.state.State
     */
    public final IState trigger(final IState pCurrentState, final Event pEvent);
}

// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#trigger(IState, Event)} method.
*/
class TransitionTest {
		
	/**
	* Test case for the {@link Transition#trigger(IState, Event)} method.
	* <p>
	* This test case is used to test the {@link Transition#trigger(IState, Event)} method.
	* It checks that the method returns the correct value.
	*/
	@Test
	void testTrigger() {
		// TODO: implement this test case
		// Ensure the constructor and attributes are correct
		assertEquals(0, 0, ""0 must be 0"");
	}
}

// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    /**
     * Causes this Transition to fire.
     * Creation date: (14/02/01 6:21:09 PM)
     *
     * @author Don Stewart
     * @since 0.1
     * @param pCurrentState the current State
     * @param pEvent the Event to trigger
     * @return com.objectmentors.state.State
     */
    public final IState trigger(final IState pCurrentState, final Event pEvent);
}

// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#trigger(IState, Event)} method.
*/
class TransitionTest {
		
	/**
	* Test case for the {@link Transition#trigger(IState, Event)} method.
	* <p>
	* This test case is used to test the {@link Transition#trigger(IState, Event)} method.
	* It checks that the method returns the correct value.
	*/
	@Test
	void testTrigger() {
		// TODO: implement this test case
		// Ensure the constructor and attributes are correct
		assertEquals(0, 0, ""0 must be 0"");
	}
}

// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    /**
     * Causes this Transition to fire.
     * Creation date: (14/02/01 6:21:09 PM)
     *
     * @author Don Stewart
     * @since 0.1
     * @param pCurrentState the current State
     * @param pEvent the Event to trigger
     * @return com.objectmentors.state.State
     */
    public final IState trigger(final IState pCurrentState, final Event pEvent);
}

// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#trigger(IState, Event)} method.
*/
class TransitionTest {
		
	/**
	* Test case for the {@link Transition#trigger(IState, Event)} method.
	* <p>
	* This test case is used to test the {@link Transition#trigger(IState, Event)} method.
	* It checks that the method returns the correct value.
	*/
	@Test
	void testTrigger() {
		// TODO: implement this test case
		// Ensure the constructor and attributes are correct
		assertEquals(0, 0, ""0 must be 0"");
	}
}

// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    /**
     * Causes this Transition to fire.
     * Creation date: (14/02/01 6:21:09 PM)
     *
     * @author Don Stewart
     * @since 0.1
     * @param pCurrentState the current State
     * @param pEvent the Event to trigger
     * @return com.objectmentors.state.State
     */
    public final IState trigger(final IState pCurrentState, final Event pEvent);
}

// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#trigger(IState, Event)} method.
*/
class TransitionTest {
		
	/**
	* Test case for the {@link Transition#trigger(IState, Event)} method.
	* <p>
	* This test case is used to test the {@link Transition#trigger(IState, Event)} method.
	* It checks that the method returns the correct value.
	*/
	@Test
	void testTrigger() {
		// TODO: implement this test case
		// Ensure the constructor and attributes are correct
		assertEquals(0, 0, ""0 must be 0"");
	}
}

// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    /**
     * Causes this Transition to fire.
     * Creation date: (14/02/01 6:21:09 PM)
     *
     * @author Don Stewart
     * @since 0.1
     * @param pCurrentState the current State
     * @param pEvent the Event to trigger
     * @return com.objectmentors.state.State
     */
    public final IState trigger(final IState pCurrentState, final Event pEvent);
}

// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#trigger(IState, Event)} method.
*/
class TransitionTest {
		
	/**
	* Test case for the {@link Transition#trigger(IState, Event)} method.
	* <p>
	* This test case is used to test the {@link Transition#trigger(IState, Event)} method.
	* It checks that the method returns the correct value.
	*/
	@Test
	void testTrigger() {
		// TODO: implement this test case
		// Ensure the constructor and attributes are correct
		assertEquals(0, 0, ""0 must be 0"");
	}
}

// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own"
cmpl-6wup1y73Yfc6NKbVFFxYPmzmYTYkp,/EvoSuiteBenchmark/scenario3/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition1.java,114.70349144935608,length,"// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    /**
     * Check to evaluate if this Transition will trigger
     * given the supplied current State of the State Machine
     * and the supplied Event.
     * Creation date: (14/02/01 6:21:09 PM)
     *
     * @param pCurrentState current State of the State Machine
     * @param pEvent the supplied Event
     * @return com.objectmentors.state.State
     */
    public final boolean willTrigger(final IState pCurrentState, final Event pEvent);
}
","// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#willTrigger(IState, Event)} method.
*/
class TransitionTest {","// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#willTrigger(IState, Event)} method.
*/
class TransitionTest {

	@Test
	void testWillTrigger_1() {
		// Arrange
		Transition transition = new Transition();
		IState currentState = new State();
		Event event = new Event();
		
		// Act
		boolean result = transition.willTrigger(currentState, event);
		
		// Assert
		assertTrue(result);
	}
	
	@Test
	void testWillTrigger_2() {
		// Arrange
		Transition transition = new Transition();
		IState currentState = new State();
		Event event = new Event();
		
		// Act
		boolean result = transition.willTrigger(currentState, event);
		
		// Assert
		assertTrue(result);
	}
	
	@Test
	void testWillTrigger_3() {
		// Arrange
		Transition transition = new Transition();
		IState currentState = new State();
		Event event = new Event();
		
		// Act
		boolean result = transition.willTrigger(currentState, event);
		
		// Assert
		assertTrue(result);
	}
	
	@Test
	void testWillTrigger_4() {
		// Arrange
		Transition transition = new Transition();
		IState currentState = new State();
		Event event = new Event();
		
		// Act
		boolean result = transition.willTrigger(currentState, event);
		
		// Assert
		assertTrue(result);
	}
	
	@Test
	void testWillTrigger_5() {
		// Arrange
		Transition transition = new Transition();
		IState currentState = new State();
		Event event = new Event();
		
		// Act
		boolean result = transition.willTrigger(currentState, event);
		
		// Assert
		assertTrue(result);
	}
	
	@Test
	void testWillTrigger_6() {
		// Arrange
		Transition transition = new Transition();
		IState currentState = new State();
		Event event = new Event();
		
		// Act
		boolean result = transition.willTrigger(currentState, event);
		
		// Assert
		assertTrue(result);
	}
	
	@Test
	void testWillTrigger_7() {
		// Arrange
		Transition transition = new Transition();
		IState currentState = new State();
		Event event = new Event();
		
		// Act
		boolean result = transition.willTrigger(currentState, event);
		
		// Assert
		assertTrue(result);
	}
	
	@Test
	void testWillTrigger_8() {
		// Arrange
		Transition transition = new Transition();
		IState currentState = new State();
		Event event = new Event();
		
		// Act
		boolean result = transition.willTrigger(currentState, event);
		
		// Assert
		assertTrue(result);
	}
	
	@Test
	void testWillTrigger_9() {
		// Arrange
		Transition transition = new Transition();
		IState currentState = new State();
		Event event = new Event();
		
		// Act
		boolean result = transition.willTrigger(currentState, event);
		
		// Assert
		assertTrue(result);
	}
	
	@Test
	void testWillTrigger_10() {
		// Arrange
		Transition transition = new Transition();
		IState currentState = new State();
		Event event = new Event();
		
		// Act
		boolean result = transition.willTrigger(currentState, event);
		
		// Assert
		assertTrue(result);
	}
}

// StateMachine.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A state machine that can be in one of a number of states.
 * <p>
 *   The state machine is in one state at any given time.
 *     When an event is received, the state machine
 *     evaluates all the transitions it has for the
 *     current state and the event. If a transition
 *     is found that applies, then the state machine
 *     executes the transition and enters the new state.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class StateMachine {

    /**
     * The current state of the state machine.
     */
    private IState currentState;

    /**
     * The name of the state machine.
     */
    private String name;

    /**
     * The transitions that the state machine has.
     */
    private List transitions;

    /**
     * Constructor for the StateMachine object.
     * Creation date: (14/02/01 6:16:11 PM)
     *
     * @param pName the name of the state machine
     */
    public StateMachine(final String pName);

    /**
     * Add a transition to the state machine.
     * Creation date: (14/02/01 6:17:11 PM)
     *
     * @param pTransition the transition to add
     */
    public final void addTransition(final Transition pTransition);

    /**
     * Get the current state of the state machine.
     * Creation date: (14/02/01 6:17:11 PM)
     *
     * @return the current state of the state machine
     */
    public final IState getCurrentState();

    /**
     * Get the name of the state machine.
     * Creation date: (14/02/01 6:17:11 PM)
     *
     * @return the name of the state machine
     */
    public final String getName();

    /**
     * Get the transitions that the state machine has.
     * Creation date: (14/02/01 6:17:11 PM)
     *
     * @return the transitions that the state machine has
     */
    public final List getTransitions();

    /**
     * Set the current state of the state machine.
     * Creation date: (14/02/01 6:17:11 PM)
     *
     * @param pCurrentState the current state of the state machine
     */
    public final void setCurrentState(final IState pCurrentState);

    /**
     * Set the name of the state machine.
     * Creation date: (14/02/01 6:17:11 PM)
     *
     * @param pName the name of the state machine
     */
    public final void setName(final String pName);

    /**
     * Set the transitions that the state machine has.
     * Creation date: (14/02/01 6:17:11 PM)
     *
     * @param pTransitions the transitions that the state machine has
     */
    public final void setTransitions(final List pTransitions);

    /**
     * Process an event.
     * <p>
     *   The state machine evaluates all the transitions it has for the
     *     current state and the event. If a transition
     *     is found that applies, then the state machine
     *     executes the transition and enters the new state.
     * Creation date: (14/02/01 6:17:11 PM)
     *
     * @param pEvent the event to process
     */
    public final void processEvent(final Event pEvent);
}

// StateMachineTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StateMachine}.
* It contains ten unit test cases for the {@link StateMachine#processEvent(Event)} method.
*/
class StateMachineTest {
		
	@Test
	void testProcessEvent_1() {
		// Arrange
		StateMachine stateMachine = new StateMachine();
		Event event = new Event();
		
		// Act
		stateMachine.processEvent(event);
		
		// Assert
		assertTrue(true);
	}
	
	@Test
	void testProcessEvent_2() {
		// Arrange
		StateMachine stateMachine = new StateMachine();
		Event event = new Event();
		
		// Act
		stateMachine.processEvent(event);
		
		// Assert
		assertTrue(true);
	}
	
	@Test
	void testProcessEvent_3() {
		// Arrange
		StateMachine stateMachine = new StateMachine();
		Event event = new Event();
		
		// Act
		stateMachine.processEvent(event);
		
		// Assert
		assertTrue(true);
	}
	
	@Test
	void testProcessEvent_4() {
		// Arrange
		StateMachine stateMachine = new StateMachine();
		Event event = new Event();
		
		// Act
		stateMachine.processEvent(event);
		
		// Assert
		assertTrue(true);
	}
	
	@Test
	void testProcessEvent_5() {
		// Arrange
		StateMachine stateMachine = new StateMachine();
		Event event = new Event();
		
		// Act
		stateMachine.processEvent(event);
		
		// Assert
		assertTrue(true);
	}
	
	@Test
	void testProcessEvent_6() {
		// Arrange
		StateMachine stateMachine = new StateMachine();
		Event event = new Event();
		
		// Act
		stateMachine.processEvent(event);
		
		// Assert
		assertTrue(true);
	}
	
	@Test
	void testProcessEvent_7() {
		// Arrange
		StateMachine stateMachine = new StateMachine();
		Event event = new Event();
		
		// Act
		stateMachine.processEvent(event);
		
		// Assert
		assertTrue(true);
	}
	
	@Test
	void testProcessEvent_8() {
		// Arrange
		StateMachine stateMachine = new StateMachine();
		Event event = new Event();
		
		// Act
		stateMachine.processEvent(event);
		
		// Assert
		assertTrue(true);
	}
	
	@Test
	void testProcessEvent_9() {
		// Arrange
		StateMachine stateMachine = new StateMachine();
		Event event = new Event();
		
		// Act
		stateMachine.processEvent(event);
		
		// Assert
		assertTrue(true);
	}
	
	@Test
	void testProcessEvent_10() {
		// Arrange
		StateMachine stateMachine = new StateMachine();
		Event event = new Event();
		
		// Act
		stateMachine.processEvent(event);
		
		// Assert
		assertTrue(true);
	}
}

// StateMachineBuilder.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A builder for state machines.
 * <p>
 *   The builder allows the state machine to be built
 *     in a fluent manner.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class StateMachineBuilder {

    /**
     * The state machine that is being built.
     */
    private StateMachine stateMachine;

    /**
     * Constructor for the StateMachineBuilder object.
     * Creation date: (14/02/01 6:16:11 PM)
     *
     * @param pName the name of the state machine
     */
    public StateMachineBuilder(final String pName);

    /**
     * Add a transition to the state machine.
     * Creation date: (14/02/01 6:17:11 PM)
     *
     * @param pTransition the transition to add
     * @return the state machine builder
     */
    public final StateMachineBuilder addTransition(final Transition pTransition);

    /**
     * Get the state machine that is being built.
     * Creation date: (14/02/01 6:17:11 PM)
     *
     * @return the state machine that is being built
     */
    public final StateMachine getStateMachine();

    /**
     * Set the state machine that is being built.
     * Creation date: (14/02/01 6:17:11 PM)
     *
     * @param pStateMachine the state machine that is being built
     */
    public final void setStateMachine(final StateMachine pStateMachine);
}

// StateMachineBuilderTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StateMachineBuilder}.
* It contains ten unit test cases for the {@link StateMachineBuilder#addTransition(Transition)} method.
*/
class StateMachineBuilderTest {
		
	@Test
	void testAddTransition_1() {
		// Arrange
		StateMachineBuilder stateMachineBuilder = new StateMachineBuilder();
		Transition transition = new Transition();
		
		// Act
		StateMachineBuilder result = stateMachineBuilder.addTransition(transition);
		
		// Assert
		assertTrue(result);
	}
	
	@Test
	void testAddTransition_2() {
		// Arrange
		StateMachineBuilder stateMachineBuilder = new StateMachineBuilder();
		Transition transition = new Transition();
		
		// Act
		StateMachineBuilder result = stateMachineBuilder.addTransition(transition);
		
		// Assert
		assertTrue(result);
	}
	
	@Test
	void testAddTransition_3() {
		// Arrange
		StateMachineBuilder stateMachineBuilder = new StateMachineBuilder();
		Transition transition = new Transition();
		
		// Act
		StateMachineBuilder result = stateMachineBuilder.addTransition(transition);
		
		// Assert
		assertTrue(result);
	}
	
	@Test
	void testAddTransition_4() {
		// Arrange
		StateMachineBuilder stateMachineBuilder = new StateMachineBuilder();
		Transition transition = new Transition();
		
		// Act
		StateMachineBuilder result = stateMachineBuilder.addTransition(transition);
		
		// Assert
		assertTrue(result);
	}
	
	@Test
	void testAddTransition_5() {
		// Arrange
		StateMachineBuilder stateMachineBuilder = new StateMachineBuilder();
		Transition transition = new Transition();
		
		// Act
		StateMachineBuilder result = stateMachineBuilder.addTransition(transition);
		
		// Assert
		assertTrue(result);
	}
	
	@Test
	void testAddTransition_6() {
		// Arrange
		StateMachineBuilder stateMachineBuilder = new StateMachineBuilder();
		Transition transition = new Transition();
		
		"
