ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wsN4Lo8CoIGDYsHgIkgadUAatgZi,/EvoSuiteBenchmark/scenario1/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale0.java,78.39495491981506,length,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    public String dateLimForm() {
        String date = comboBoxJourDLM.getSelectedItem().toString() + comboBoxMoisDLM.getSelectedItem().toString() + comboBoxAnneeDLM.getSelectedItem().toString();
        return date;
    }
}
","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipaleTest {","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipaleTest {

	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>dateLimForm = ""01/01/2000""</li>
	* </ul>
	* and the expected output is:
	* <ul>
	* <li>dateLimForm = ""01/01/2000""</li>
	* </ul>
	*/
	@Test
	public void testDateLimForm1() {
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDLM.setSelectedItem(""01"");
		fenetrePrincipale.comboBoxMoisDLM.setSelectedItem(""01"");
		fenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(""2000"");
		assertEquals(""01/01/2000"", fenetrePrincipale.dateLimForm());
	}
		
	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>dateLimForm = ""02/02/2001""</li>
	* </ul>
	* and the expected output is:
	* <ul>
	* <li>dateLimForm = ""02/02/2001""</li>
	* </ul>
	*/
	@Test
	public void testDateLimForm2() {
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDLM.setSelectedItem(""02"");
		fenetrePrincipale.comboBoxMoisDLM.setSelectedItem(""02"");
		fenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(""2001"");
		assertEquals(""02/02/2001"", fenetrePrincipale.dateLimForm());
	}
		
	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>dateLimForm = ""03/03/2002""</li>
	* </ul>
	* and the expected output is:
	* <ul>
	* <li>dateLimForm = ""03/03/2002""</li>
	* </ul>
	*/
	@Test
	public void testDateLimForm3() {
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDLM.setSelectedItem(""03"");
		fenetrePrincipale.comboBoxMoisDLM.setSelectedItem(""03"");
		fenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(""2002"");
		assertEquals(""03/03/2002"", fenetrePrincipale.dateLimForm());
	}
		
	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>dateLimForm = ""04/04/2003""</li>
	* </ul>
	* and the expected output is:
	* <ul>
	* <li>dateLimForm = ""04/04/2003""</li>
	* </ul>
	*/
	@Test
	public void testDateLimForm4() {
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDLM.setSelectedItem(""04"");
		fenetrePrincipale.comboBoxMoisDLM.setSelectedItem(""04"");
		fenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(""2003"");
		assertEquals(""04/04/2003"", fenetrePrincipale.dateLimForm());
	}
		
	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>dateLimForm = ""05/05/2004""</li>
	* </ul>
	* and the expected output is:
	* <ul>
	* <li>dateLimForm = ""05/05/2004""</li>
	* </ul>
	*/
	@Test
	public void testDateLimForm5() {
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDLM.setSelectedItem(""05"");
		fenetrePrincipale.comboBoxMoisDLM.setSelectedItem(""05"");
		fenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(""2004"");
		assertEquals(""05/05/2004"", fenetrePrincipale.dateLimForm());
	}
		
	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>dateLimForm = ""06/06/2005""</li>
	* </ul>
	* and the expected output is:
	* <ul>
	* <li>dateLimForm = ""06/06/2005""</li>
	* </ul>
	*/
	@Test
	public void testDateLimForm6() {
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDLM.setSelectedItem(""06"");
		fenetrePrincipale.comboBoxMoisDLM.setSelectedItem(""06"");
		fenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(""2005"");
		assertEquals(""06/06/2005"", fenetrePrincipale.dateLimForm());
	}
		
	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>dateLimForm = ""07/07/2006""</li>
	* </ul>
	* and the expected output is:
	* <ul>
	* <li>dateLimForm = ""07/07/2006""</li>
	* </ul>
	*/
	@Test
	public void testDateLimForm7() {
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDLM.setSelectedItem(""07"");
		fenetrePrincipale.comboBoxMoisDLM.setSelectedItem(""07"");
		fenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(""2006"");
		assertEquals(""07/07/2006"", fenetrePrincipale.dateLimForm());
	}
		
	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>dateLimForm = ""08/08/2007""</li>
	* </ul>
	* and the expected output is:
	* <ul>
	* <li>dateLimForm = ""08/08/2007""</li>
	* </ul>
	*/
	@Test
	public void testDateLimForm8() {
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale."
cmpl-6wsOKhYPHzSeQLlEIv7fKrzNZ3q5Q,/EvoSuiteBenchmark/scenario1/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale1.java,78.52924346923828,length,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    public String dateDeNaiss() {
        String date = comboBoxJourDDNEtu.getSelectedItem().toString() + comboBoxMoisDDNEtu.getSelectedItem().toString() + comboBoxAnneeDDNEtu.getSelectedItem().toString();
        return date;
    }
}
","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipaleTest {","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipaleTest {

	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input values :
	* <ul>
	* 	<li>comboBoxJourDDNEtu = ""1""</li>
	* 	<li>comboBoxMoisDDNEtu = ""1""</li>
	* 	<li>comboBoxAnneeDDNEtu = ""1""</li>
	* </ul>
	* and the following expected output value :
	* <ul>
	* 	<li>expected = ""11/1/1""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss_1() {
		// Initialize the input values
		String comboBoxJourDDNEtu = ""1"";
		String comboBoxMoisDDNEtu = ""1"";
		String comboBoxAnneeDDNEtu = ""1"";
		
		// Set the input values
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDDNEtu = comboBoxJourDDNEtu;
		fenetrePrincipale.comboBoxMoisDDNEtu = comboBoxMoisDDNEtu;
		fenetrePrincipale.comboBoxAnneeDDNEtu = comboBoxAnneeDDNEtu;
		
		// Call the method under test
		String actual = fenetrePrincipale.dateDeNaiss();
		
		// Verify the result
		String expected = ""11/1/1"";
		assertEquals(expected, actual);
		// TODO : Add more validations
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input values :
	* <ul>
	* 	<li>comboBoxJourDDNEtu = ""2""</li>
	* 	<li>comboBoxMoisDDNEtu = ""2""</li>
	* 	<li>comboBoxAnneeDDNEtu = ""2""</li>
	* </ul>
	* and the following expected output value :
	* <ul>
	* 	<li>expected = ""22/2/2""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss_2() {
		// Initialize the input values
		String comboBoxJourDDNEtu = ""2"";
		String comboBoxMoisDDNEtu = ""2"";
		String comboBoxAnneeDDNEtu = ""2"";
		
		// Set the input values
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDDNEtu = comboBoxJourDDNEtu;
		fenetrePrincipale.comboBoxMoisDDNEtu = comboBoxMoisDDNEtu;
		fenetrePrincipale.comboBoxAnneeDDNEtu = comboBoxAnneeDDNEtu;
		
		// Call the method under test
		String actual = fenetrePrincipale.dateDeNaiss();
		
		// Verify the result
		String expected = ""22/2/2"";
		assertEquals(expected, actual);
		// TODO : Add more validations
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input values :
	* <ul>
	* 	<li>comboBoxJourDDNEtu = ""3""</li>
	* 	<li>comboBoxMoisDDNEtu = ""3""</li>
	* 	<li>comboBoxAnneeDDNEtu = ""3""</li>
	* </ul>
	* and the following expected output value :
	* <ul>
	* 	<li>expected = ""33/3/3""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss_3() {
		// Initialize the input values
		String comboBoxJourDDNEtu = ""3"";
		String comboBoxMoisDDNEtu = ""3"";
		String comboBoxAnneeDDNEtu = ""3"";
		
		// Set the input values
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDDNEtu = comboBoxJourDDNEtu;
		fenetrePrincipale.comboBoxMoisDDNEtu = comboBoxMoisDDNEtu;
		fenetrePrincipale.comboBoxAnneeDDNEtu = comboBoxAnneeDDNEtu;
		
		// Call the method under test
		String actual = fenetrePrincipale.dateDeNaiss();
		
		// Verify the result
		String expected = ""33/3/3"";
		assertEquals(expected, actual);
		// TODO : Add more validations
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input values :
	* <ul>
	* 	<li>comboBoxJourDDNEtu = ""4""</li>
	* 	<li>comboBoxMoisDDNEtu = ""4""</li>
	* 	<li>comboBoxAnneeDDNEtu = ""4""</li>
	* </ul>
	* and the following expected output value :
	* <ul>
	* 	<li>expected = ""44/4/4""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss_4() {
		// Initialize the input values
		String comboBoxJourDDNEtu = ""4"";
		String comboBoxMoisDDNEtu = ""4"";
		String comboBoxAnneeDDNEtu = ""4"";
		
		// Set the input values
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDDNEtu = comboBoxJourDDNEtu;
		fenetrePrincipale.comboBoxMoisDDNEtu = comboBoxMoisDDNEtu;
		fenetrePrincipale.comboBoxAnneeDDNEtu = comboBoxAnneeDDNEtu;
		
		// Call the method under test
		String actual = fenetrePrincipale.dateDeNaiss();
		
		// Verify the result
		String expected = ""44/4/4"";
		assertEquals(expected, actual);
		// TODO : Add more validations
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input values :
	* <ul>
	* 	<li>comboBoxJourDDNEtu = ""5""</li>
	* 	<li>comboBoxMoisDDNEtu = ""5""</li>
	* 	<li>comboBoxAnneeDDNEtu = ""5""</li>
	* </ul>
	* and the following expected output value :
	* <ul>
	* 	<li>expected = ""55/5/5""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss_5() {
		// Initialize the input values
		String comboBoxJourDDNEtu = ""5"";
		String comboBoxMoisDDNEtu = ""5"";
		String comboBoxAnneeDDNEtu = ""5"";
		
		// Set the input values
		"
cmpl-6wsPbrr646rOWwtfqpYsCOq8pSCPC,/EvoSuiteBenchmark/scenario1/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage0.java,66.63655924797058,length,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    public TableStockage ajouterLigne() {
        if (nbColonnes > 0) {
            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)
            this.nbLignes++;
            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
            /* on recopie les noms des colonnes */
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j));
            }
            /* on recopie les valeurs dans les colonnes */
            for (int i = 0; i < nbLignes - 2; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i, j);
                }
            }
            for (int j = 0; j < nbColonnes; j++) {
                if (ts.getColumnClass(j).equals(String.class)) {
                    // la derniere ligne sera a null
                    tableS.setValueAt("""", nbLignes - 2, j);
                } else if (ts.getColumnClass(j).equals(Double.class)) {
                    tableS.setValueAt(new Double(""0""), nbLignes - 2, j);
                } else
                    // sauf si de la classe Boolean
                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);
            }
            return tableS;
        } else {
            // pas de colonne pour construire une ligne
            JOptionPane.showMessageDialog(null, ""PAS DE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockageTest {","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockageTest {

	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has no column.
	*/
	@Test
	void testAjouterLigne1() {
		TableStockage ts = new TableStockage(0, 0);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts, ts2);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has one column.
	*/
	@Test
	void testAjouterLigne2() {
		TableStockage ts = new TableStockage(0, 1);
		ts.setColumnName(0, ""colonne1"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getValueAt(0, 0), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has two columns.
	*/
	@Test
	void testAjouterLigne3() {
		TableStockage ts = new TableStockage(0, 2);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has three columns.
	*/
	@Test
	void testAjouterLigne4() {
		TableStockage ts = new TableStockage(0, 3);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
		assertEquals(ts2.getValueAt(0, 2), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has four columns.
	*/
	@Test
	void testAjouterLigne5() {
		TableStockage ts = new TableStockage(0, 4);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ts.setColumnName(3, ""colonne4"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getColumnName(3), ""colonne4"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
		assertEquals(ts2.getValueAt(0, 2), """");
		assertEquals(ts2.getValueAt(0, 3), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has five columns.
	*/
	@Test
	void testAjouterLigne6() {
		TableStockage ts = new TableStockage(0, 5);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ts.setColumnName(3, ""colonne4"");
		ts.setColumnName(4, ""colonne5"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getColumnName(3), ""colonne4"");
		assertEquals(ts2.getColumnName(4), ""colonne5"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
		assertEquals(ts2.getValueAt(0, 2), """");
		assertEquals(ts2.getValueAt(0, 3), """");
		assertEquals(ts2.getValueAt(0, 4), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has six columns.
	*/
	@Test
	void testAjouterLigne7() {
		TableStockage ts = new TableStockage(0, 6);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ts.setColumnName(3, ""colonne4"");
		ts.setColumnName(4, ""colonne5"");
		ts.setColumnName(5, ""colonne6"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getColumnName(3), ""colonne4"");
		assertEquals(ts2.getColumnName(4), ""colonne5"");
		assertEquals(ts2.getColumnName(5), ""colonne6"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
		assertEquals(ts2.getValueAt(0, 2), """");
		assertEquals(ts2.getValueAt(0, 3), """");
		"
cmpl-6wsQgM2D6l6AB1LIl9O1dX8cHuw57,/EvoSuiteBenchmark/scenario1/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage1.java,58.80125045776367,stop,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }
}
","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockageTest {","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockageTest {

	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object.
	*/
	@Test
	void testColonneMail() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertTrue(tableS instanceof TableStockage);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of columns.
	*/
	@Test
	void testColonneMail2() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbColonnes + 1, tableS.getColumnCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of rows.
	*/
	@Test
	void testColonneMail3() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of rows.
	*/
	@Test
	void testColonneMail4() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of rows.
	*/
	@Test
	void testColonneMail5() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of rows.
	*/
	@Test
	void testColonneMail6() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of rows.
	*/
	@Test
	void testColonneMail7() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of rows.
	*/
	@Test
	void testColonneMail8() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of rows.
	*/
	@Test
	void testColonneMail9() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of rows.
	*/
	@Test
	void testColonneMail10() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbLignes, tableS.getRowCount());
	}
}"
cmpl-6wsRj3Pco0ifH4Tjzj6C7ju0JJ5h8,/EvoSuiteBenchmark/scenario1/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage2.java,69.58650875091553,length,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    public TableStockage selectMail() {
        int j = 0;
        Boolean bool;
        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(""Envoyer E-Mail a:""))) {
            // renverra la position de la colonne E-Mail si elle existe
            j++;
        }
        if (j != this.nbColonnes) {
            // la colonne E-Mail (de type Booleen) existe bien
            int newNbLignes = 0;
            for (int i = 0; i < nbLignes - 1; i++) {
                bool = (Boolean) ts.getValueAt(i, j);
                if (bool) {
                    newNbLignes++;
                }
            }
            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);
            int k = 0;
            for (int ind = 0; ind < nbColonnes; ind++) {
                tableS.setColumnName(ind, ts.getColumnName(ind));
            }
            for (int row = 0; row < nbLignes - 1; row++) {
                bool = (Boolean) ts.getValueAt(row, j);
                if (bool) {
                    for (int column = 0; column < nbColonnes; column++) {
                        tableS.setValueAt(ts.getValueAt(row, column), k, column);
                        bool = false;
                    }
                    k++;
                }
            }
            return tableS;
        } else {
            JOptionPane.showMessageDialog(null, ""Le mail sera envoye a toute la liste"", ""Information"", JOptionPane.INFORMATION_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockageTest {","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockageTest {

	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* The test case is successful if the method returns a table with the same number of rows as the original table.
	*/
	@Test
	void testSelectMail1() {
		TableStockage ts = new TableStockage(3, 3);
		ts.setColumnName(0, ""Nom"");
		ts.setColumnName(1, ""Prenom"");
		ts.setColumnName(2, ""Envoyer E-Mail a:"");
		ts.setValueAt(""Dupont"", 0, 0);
		ts.setValueAt(""Jean"", 0, 1);
		ts.setValueAt(true, 0, 2);
		ts.setValueAt(""Durand"", 1, 0);
		ts.setValueAt(""Pierre"", 1, 1);
		ts.setValueAt(false, 1, 2);
		ts.setValueAt(""Martin"", 2, 0);
		ts.setValueAt(""Paul"", 2, 1);
		ts.setValueAt(true, 2, 2);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts.getRowCount(), ts2.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* The test case is successful if the method returns a table with the same number of columns as the original table.
	*/
	@Test
	void testSelectMail2() {
		TableStockage ts = new TableStockage(3, 3);
		ts.setColumnName(0, ""Nom"");
		ts.setColumnName(1, ""Prenom"");
		ts.setColumnName(2, ""Envoyer E-Mail a:"");
		ts.setValueAt(""Dupont"", 0, 0);
		ts.setValueAt(""Jean"", 0, 1);
		ts.setValueAt(true, 0, 2);
		ts.setValueAt(""Durand"", 1, 0);
		ts.setValueAt(""Pierre"", 1, 1);
		ts.setValueAt(false, 1, 2);
		ts.setValueAt(""Martin"", 2, 0);
		ts.setValueAt(""Paul"", 2, 1);
		ts.setValueAt(true, 2, 2);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts.getColumnCount(), ts2.getColumnCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* The test case is successful if the method returns a table with the same number of rows as the original table.
	*/
	@Test
	void testSelectMail3() {
		TableStockage ts = new TableStockage(3, 3);
		ts.setColumnName(0, ""Nom"");
		ts.setColumnName(1, ""Prenom"");
		ts.setColumnName(2, ""Envoyer E-Mail a:"");
		ts.setValueAt(""Dupont"", 0, 0);
		ts.setValueAt(""Jean"", 0, 1);
		ts.setValueAt(true, 0, 2);
		ts.setValueAt(""Durand"", 1, 0);
		ts.setValueAt(""Pierre"", 1, 1);
		ts.setValueAt(false, 1, 2);
		ts.setValueAt(""Martin"", 2, 0);
		ts.setValueAt(""Paul"", 2, 1);
		ts.setValueAt(true, 2, 2);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts.getRowCount(), ts2.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* The test case is successful if the method returns a table with the same number of columns as the original table.
	*/
	@Test
	void testSelectMail4() {
		TableStockage ts = new TableStockage(3, 3);
		ts.setColumnName(0, ""Nom"");
		ts.setColumnName(1, ""Prenom"");
		ts.setColumnName(2, ""Envoyer E-Mail a:"");
		ts.setValueAt(""Dupont"", 0, 0);
		ts.setValueAt(""Jean"", 0, 1);
		ts.setValueAt(true, 0, 2);
		ts.setValueAt(""Durand"", 1, 0);
		ts.setValueAt(""Pierre"", 1, 1);
		ts.setValueAt(false, 1, 2);
		ts.setValueAt(""Martin"", 2, 0);
		ts.setValueAt(""Paul"", 2, 1);
		ts.setValueAt(true, 2, 2);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts.getColumnCount(), ts2.getColumnCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* The test case is successful if the method returns a table with the same number of rows as the original table.
	*/
	@Test
	void testSelectMail5() {
		TableStockage ts = new TableStockage(3, 3);
		ts.setColumnName(0, ""Nom"");
		ts.setColumnName(1, ""Prenom"");
		ts.setColumnName(2, ""Envoyer E-Mail a:"");
		ts.setValueAt(""Dupont"", 0, 0);
		ts.setValueAt(""Jean"", 0, 1);
		ts.setValueAt(true, 0, 2);
		ts.setValueAt(""Durand"", 1, 0);
		ts.setValueAt(""Pierre"", 1, 1);
		ts.setValueAt(false, 1, 2);
		ts.setValueAt(""Martin"", 2, 0);
		ts.setValueAt(""Paul"", 2, 1);
		ts.setValueAt(true, 2, 2);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts.getRowCount(), ts2.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* The test case is successful if the method returns a table with the same number of columns as the original table.
	*/
	@Test
	void testSelectMail6() {
		TableStockage ts = new TableStockage(3, 3);
		ts.setColumnName(0, ""Nom"");
		ts.setColumnName(1, ""Prenom"");
		ts.setColumnName(2, ""Envoyer E-Mail a:"");
		ts.setValueAt(""Dupont"", 0, 0);
		ts.setValueAt(""Jean"", 0, 1);
		ts.setValueAt(true, 0, 2);
		ts.setValueAt(""Durand"", 1, 0);
		ts.setValueAt(""Pierre"", 1, 1);
		ts.setValueAt(false, 1, 2);
		ts.setValueAt(""Martin"", 2, 0);
		ts.setValueAt(""Paul"", 2, 1);
		ts.setValueAt(true, 2, 2);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts.getColumnCount(), ts2.getColumnCount());
	}
	
	"
cmpl-6wsSsxXK2kkWtUT0Wy7etdevRpHav,/EvoSuiteBenchmark/scenario1/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler.java,70.3343460559845,length,"// Controler.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;

/**
 * Fait la liaison entre l'interface graphique et le moteur de l'application
 * Rend comprehensible les requetes de l'interface graphique pour les bases de
 * donnees
 *
 * @author scarankle
 */
public class Controler {

    public Formation[] findAllFormation() {
        return fdao.findFormation(null, null);
    }
}
","// ControlerTest.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findAllFormation()} method.
*/
class ControlerTest {","// ControlerTest.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findAllFormation()} method.
*/
class ControlerTest {

	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* This test case is used to test the {@link Controler#findAllFormation()} method.
	* It checks if the method returns an array of formations.
	*/
	@Test
	void testFindAllFormation() {
		Controler c = new Controler();
		Formation[] f = c.findAllFormation();
		assertNotNull(f);
	}
}

// DaoFactory.java
package fr.unice.gfarce.dao;

import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.dao.JdbcDaoFactory;
import fr.unice.gfarce.dao.XmlDaoFactory;

/**
 * Fabrique de DAO
 *
 * @author scarankle
 */
public abstract class DaoFactory {

    /**
     * Enumeration des types de fabriques de DAO
     */
    public enum TypeFabrique {

        JDBC, XML
    };

    /**
     * Fabrique de DAO
     *
     * @param typeFabrique
     * @return
     * @throws DaoFactoryException
     */
    public static DaoFactory getDaoFactory(TypeFabrique typeFabrique) throws DaoFactoryException {
        switch (typeFabrique) {
            case JDBC:
                return new JdbcDaoFactory();
            case XML:
                return new XmlDaoFactory();
            default:
                throw new DaoFactoryException(""Type de fabrique inconnu"");
        }
    }

    /**
     * Retourne un DAO de formation
     *
     * @return
     */
    public abstract FormationDao getFormationDao();

    /**
     * Retourne un DAO d'identite
     *
     * @return
     */
    public abstract IdentiteDao getIdentiteDao();
}

// DaoFactoryException.java
package fr.unice.gfarce.dao;

/**
 * Exception levee par les DAO
 *
 * @author scarankle
 */
public class DaoFactoryException extends Exception {

    /**
     * Constructeur
     *
     * @param message
     */
    public DaoFactoryException(String message) {
        super(message);
    }
}

// Formation.java
package fr.unice.gfarce.identity;

import java.util.Calendar;

/**
 * Classe representant une formation
 *
 * @author scarankle
 */
public class Formation {

    private String nom;
    private Calendar dateDebut;
    private Calendar dateFin;
    private String lieu;
    private String description;
    private String objectif;
    private String prerequis;
    private String publicVise;
    private String programme;
    private String evaluation;
    private String certification;
    private String organisme;
    private String responsable;
    private String contact;
    private String email;
    private String telephone;
    private String fax;
    private String siteWeb;
    private String adresse;
    private String codePostal;
    private String ville;
    private String pays;

    /**
     * Constructeur
     *
     * @param nom
     * @param dateDebut
     * @param dateFin
     * @param lieu
     * @param description
     * @param objectif
     * @param prerequis
     * @param publicVise
     * @param programme
     * @param evaluation
     * @param certification
     * @param organisme
     * @param responsable
     * @param contact
     * @param email
     * @param telephone
     * @param fax
     * @param siteWeb
     * @param adresse
     * @param codePostal
     * @param ville
     * @param pays
     */
    public Formation(String nom, Calendar dateDebut, Calendar dateFin, String lieu, String description, String objectif, String prerequis, String publicVise, String programme, String evaluation, String certification, String organisme, String responsable, String contact, String email, String telephone, String fax, String siteWeb, String adresse, String codePostal, String ville, String pays) {
        this.nom = nom;
        this.dateDebut = dateDebut;
        this.dateFin = dateFin;
        this.lieu = lieu;
        this.description = description;
        this.objectif = objectif;
        this.prerequis = prerequis;
        this.publicVise = publicVise;
        this.programme = programme;
        this.evaluation = evaluation;
        this.certification = certification;
        this.organisme = organisme;
        this.responsable = responsable;
        this.contact = contact;
        this.email = email;
        this.telephone = telephone;
        this.fax = fax;
        this.siteWeb = siteWeb;
        this.adresse = adresse;
        this.codePostal = codePostal;
        this.ville = ville;
        this.pays = pays;
    }

    /**
     * Constructeur
     *
     * @param nom
     * @param dateDebut
     * @param dateFin
     * @param lieu
     * @param description
     * @param objectif
     * @param prerequis
     * @param publicVise
     * @param programme
     * @param evaluation
     * @param certification
     * @param organisme
     * @param responsable
     * @param contact
     * @param email
     * @param telephone
     * @param fax
     * @param siteWeb
     * @param adresse
     * @param codePostal
     * @param ville
     * @param pays
     */
    public Formation(String nom, String dateDebut, String dateFin, String lieu, String description, String objectif, String prerequis, String publicVise, String programme, String evaluation, String certification, String organisme, String responsable, String contact, String email, String telephone, String fax, String siteWeb, String adresse, String codePostal, String ville, String pays) {
        this.nom = nom;
        this.dateDebut = Calendar.getInstance();
        this.dateFin = Calendar.getInstance();
        this.lieu = lieu;
        this.description = description;
        this.objectif = objectif;
        this.prerequis = prerequis;
        this.publicVise = publicVise;
        this.programme = programme;
        this.evaluation = evaluation;
        this.certification = certification;
        this.organisme = organisme;
        this.responsable = responsable;
        this.contact = contact;
        this.email = email;
        this.telephone = telephone;
        this.fax = fax;
        this.siteWeb = siteWeb;
        this.adresse = adresse;
        this.codePostal = codePostal;
        this.ville = ville;
        this.pays = pays;
    }

    /**
     * Constructeur
     *
     * @param nom
     * @param dateDebut
     * @param dateFin
     * @param lieu
     * @param description
     * @param objectif
     * @param prerequis
     * @param publicVise
     * @param programme
     * @param evaluation
     * @param certification
     * @param organisme
     * @param responsable
     * @param contact
     * @param email
     * @param telephone
     * @param fax
     * @param siteWeb
     * @param adresse
     * @param codePostal
     * @param ville
     * @param pays
     */
    public Formation(String nom, String dateDebut, String dateFin, String lieu, String description, String objectif, String prerequis, String publicVise, String programme, String evaluation, String certification, String organisme, String responsable, String contact, String email, String telephone, String fax, String siteWeb"
