ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wtA6yl0HF9P6NW3seIpUfblMDxKR,/EvoSuiteBenchmark/scenario2/47_dvd-homevideo/src/main/java/Author.java,76.88111352920532,length,"// Author.java
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.lang.NullPointerException;
import java.lang.IllegalArgumentException;

/**
 * @author Shane Santner
 * This class create the DVD filesystem that will be burned
 * to disc.
 *
 * TODO - Need to handle input, output and error streams
 *        more appropriatly.
 */
public class Author {

    /**
     * Create a DVD filestructure necessary to play in dvd player using dvdauthor
     *
     * @param DVD_GUI This is the GUI object used to control the form
     * @return A boolean to determine if an error occurred in the function
     */
    public boolean CreateDVDFileStructure(GUI DVD_GUI) {
        try {
            /* 
             * Set progress bar to 50% since we have completed dvd-menu.
             * In the future would like a better way to track progress, this
             * is not very precise.
             */
            DVD_GUI.prgAuthor.setValue(50);
            DVD_GUI.lblAuthorProg.setText(""50%"");
            /* Build up the dvdauthor_cmd string and execute dvd-author */
            String[] dvdauthor_cmd = { ""/bin/sh"", ""-c"", m_dvdauthor };
            /*
             * exec(...) throws IOException, NullPointerException and
             *                  IllegalArgumentException.
             */
            Process p = Runtime.getRuntime().exec(dvdauthor_cmd, null, new File(DVD_GUI.strOutputDir));
            try {
                /* Instantiate input and output readers for dvd-author streams */
                BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
                BufferedReader err_in = new BufferedReader(new InputStreamReader(p.getErrorStream()));
                BufferedWriter out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/log/dvdauthor.log""));
                BufferedWriter err_out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/log/dvdauthor.err""));
                String line;
                /* 
                 * Check for the case where the necessary dependencies are not
                 * installed, but the user tries to run dvd-homevideo anyway
                 */
                if (err_in.ready()) {
                    line = err_in.readLine();
                    if (line.equals(""/bin/sh: dvdauthor: command not found"")) {
                        DVD_GUI.MessageBox(""Could not locate dvdauthor in your path."" + ""\nPlease install all necessary dependencies"" + ""\nand rerun dvd-homevideo."", 0);
                        /* Close all open streams */
                        in.close();
                        out.close();
                        err_in.close();
                        err_out.close();
                        /* Indicate that there was an error */
                        return true;
                    }
                }
                /*
                 * Lets look for indications of problems and display these to the user
                 * through the txtAreaOutput interface.
                 */
                StringTokenizer st;
                /*
                 * err_in.readLine() throws an IOException
                 */
                while ((line = err_in.readLine()) != null) {
                    st = new StringTokenizer(line, "":"");
                    if (st.hasMoreTokens()) {
                        /*
                         * st.nextToken() throws NoSuchElementException
                         */
                        if (!st.nextToken().equals(""WARN"")) {
                            DVD_GUI.txtAreaOutput.append(line + ""\n"");
                            DVD_GUI.txtAreaOutput.setCaretPosition(DVD_GUI.txtAreaOutput.getDocument().getLength());
                            out.write(line);
                            out.newLine();
                        }
                    }
                }
                /*
                 * close() throws an IOException
                 */
                in.close();
                out.close();
                err_in.close();
                err_out.close();
                /*
                 * p.waitFor() throws an InterruptedException
                 */
                p.waitFor();
            } catch (IOException ex) {
                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
                DVD_GUI.MessageBox(m_BaseErr + ""IO Error\n"" + ex.toString(), 0);
                ex.printStackTrace();
                return true;
            } catch (NoSuchElementException ex) {
                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
                DVD_GUI.MessageBox(m_BaseErr + ""Looked for a token that didn't exist\n"" + ex.toString(), 0);
                ex.printStackTrace();
                return true;
            } catch (InterruptedException ex) {
                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
                DVD_GUI.MessageBox(m_BaseErr + ""dvd-homevideo thread was interrupted\n"" + ex.toString(), 0);
                ex.printStackTrace();
                return true;
            }
            /* Set progress bar to 100% and disable it */
            DVD_GUI.prgAuthor.setIndeterminate(false);
            DVD_GUI.prgAuthor.setValue(100);
            DVD_GUI.lblAuthorProg.setText(""100%"");
            DVD_GUI.lblAuthor.setEnabled(false);
            DVD_GUI.lblAuthorProg.setEnabled(false);
            DVD_GUI.prgAuthor.setEnabled(false);
            /* Put in a slight delay to ensure author.log closes */
            Thread.sleep(2000);
        } catch (IOException ex) {
            SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
            DVD_GUI.MessageBox(m_BaseErr + ""IO Error\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        } catch (NullPointerException ex) {
            SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
            DVD_GUI.MessageBox(m_BaseErr + ""Error executing Runtime.getRuntime().exec()\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        } catch (IllegalArgumentException ex) {
            SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
            DVD_GUI.MessageBox(m_BaseErr + ""Illegal argument sent to Runtime.getRuntime().exec()\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        } catch (Exception ex) {
            SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
            DVD_GUI.MessageBox(m_BaseErr + ""Unknown Error occurred\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        }
        /* Look for any indication of an error in the author log file */
        return DVD_GUI.ErrorCheck(DVD_GUI.strOutputDir + ""/log/dvdauthor.log"");
    }
}
","// AuthorTest.java


import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.lang.NullPointerException;
import java.lang.IllegalArgumentException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Author}.
* It contains ten unit test cases for the {@link Author#CreateDVDFileStructure(GUI)} method.
*/
class AuthorTest {","// AuthorTest.java


import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.lang.NullPointerException;
import java.lang.IllegalArgumentException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Author}.
* It contains ten unit test cases for the {@link Author#CreateDVDFileStructure(GUI)} method.
*/
class AuthorTest {

	/**
	* Test case for {@link Author#CreateDVDFileStructure(GUI)} method.
	* It tests the case where the dvdauthor command is not found.
	*/
	@Test
	void testCreateDVDFileStructure_dvdauthor_not_found() {
		
		// Create a new Author object
		Author author = new Author();
		
		// Create a new GUI object
		GUI DVD_GUI = new GUI();
		
		// Set the dvdauthor command
		author.m_dvdauthor = ""dvdauthor"";
		
		// Set the output directory
		DVD_GUI.strOutputDir = ""test_output"";
		
		// Create the output directory
		new File(DVD_GUI.strOutputDir).mkdir();
		
		// Create the log directory
		new File(DVD_GUI.strOutputDir + ""/log"").mkdir();
		
		// Create the dvdauthor.xml file
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/dvdauthor.xml""));
			out.write(""<dvdauthor dest=\"""" + DVD_GUI.strOutputDir + ""/dvd\"">\n"");
			out.write(""<vmgm />\n"");
			out.write(""<titleset>\n"");
			out.write(""<titles>\n"");
			out.write(""<pgc>\n"");
			out.write(""<vob file=\"""" + DVD_GUI.strOutputDir + ""/dvd/video_ts/vts_01_1.mpg\"" />\n"");
			out.write(""</pgc>\n"");
			out.write(""</titles>\n"");
			out.write(""</titleset>\n"");
			out.write(""</dvdauthor>\n"");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		
		// Create the video_ts directory
		new File(DVD_GUI.strOutputDir + ""/dvd/video_ts"").mkdir();
		
		// Create the vts_01_1.mpg file
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/dvd/video_ts/vts_01_1.mpg""));
			out.write("""");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		
		// Create the dvdauthor.log file
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/log/dvdauthor.log""));
			out.write("""");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		
		// Create the dvdauthor.err file
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/log/dvdauthor.err""));
			out.write("""");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		
		// Call the CreateDVDFileStructure method
		boolean result = author.CreateDVDFileStructure(DVD_GUI);
		
		// Check the result
		assertTrue(result);
		
		// Delete the test output directory
		deleteDirectory(new File(DVD_GUI.strOutputDir));
	}
	
	/**
	* Test case for {@link Author#CreateDVDFileStructure(GUI)} method.
	* It tests the case where the dvdauthor command is found.
	*/
	@Test
	void testCreateDVDFileStructure_dvdauthor_found() {
		
		// Create a new Author object
		Author author = new Author();
		
		// Create a new GUI object
		GUI DVD_GUI = new GUI();
		
		// Set the dvdauthor command
		author.m_dvdauthor = ""dvdauthor"";
		
		// Set the output directory
		DVD_GUI.strOutputDir = ""test_output"";
		
		// Create the output directory
		new File(DVD_GUI.strOutputDir).mkdir();
		
		// Create the log directory
		new File(DVD_GUI.strOutputDir + ""/log"").mkdir();
		
		// Create the dvdauthor.xml file
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/dvdauthor.xml""));
			out.write(""<dvdauthor dest=\"""" + DVD_GUI.strOutputDir + ""/dvd\"">\n"");
			out.write(""<vmgm />\n"");
			out.write(""<titleset>\n"");
			out.write(""<titles>\n"");
			out.write(""<pgc>\n"");
			out.write(""<vob file=\"""" + DVD_GUI.strOutputDir + ""/dvd/video_ts/vts_01_1.mpg\"" />\n"");
			out.write(""</pgc>\n"");
			out.write(""</titles>\n"");
			out.write(""</titleset>\n"");
			out.write(""</dvdauthor>\n"");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		
		// Create the video_ts directory
		new File(DVD_GUI.strOutputDir + ""/dvd/video_ts"").mkdir();
		
		// Create the vts_01_1.mpg file
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/dvd/video_ts/vts_01_1.mpg""));
			out.write("""");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		
		// Create the dvdauthor.log file
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/log/dvdauthor.log""));
			out.write("""");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		
		// Create the dvdauthor.err file
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/log/dvdauthor.err""));
			out.write("""");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		
		// Call the CreateDVDFileStructure method
		boolean result = author.CreateDVDFileStructure(DVD_GUI);
		
		// Check the result
		assertFalse(result);
		
		// Delete the test output directory
		deleteDirectory(new File(DVD_GUI.strOutputDir));
	}
	
	/**
	* Test case for {@link Author#CreateDVDFileStructure(GUI)} method.
	* It tests the case where the dvdauthor command is found and the dvdauthor.xml file is not found.
	*/
	@Test
	void"
cmpl-6wtBLkWaEK0GjzEYURLb0jNt500sM,/EvoSuiteBenchmark/scenario2/47_dvd-homevideo/src/main/java/Burn.java,68.49525284767151,length,"// Burn.java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;

/**
 * @author Shane Santner
 * This class burns the DVD file structure previously created by
 * dvd-author to a DVD disc.
 */
public class Burn {

    /**
     * Optionally burn to DVD when complete and no errors, uses growisofs
     *
     * @param DVD_GUI This is the GUI object used to control the form
     * return   A boolean to determine if an error occurred in the function
     */
    public boolean BurnToDVD(GUI DVD_GUI) {
        /* Update growisofs command with the correct paths */
        m_growisofs = m_growisofs.replaceAll(""temp"", DVD_GUI.strOutputDir);
        /* 
         * Burn object always gets created, so m_Burn will not always be true,
         * must be checked. 
         */
        if (m_Burn == true) {
            try {
                /* Create the growisofs process which actually burns the DVD */
                Process p = Runtime.getRuntime().exec(m_growisofs);
                /* Instantiate input and output readers for dvd-author streams */
                BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
                BufferedReader err_in = new BufferedReader(new InputStreamReader(p.getErrorStream()));
                BufferedWriter out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/log/burn.log""));
                BufferedWriter err_out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/log/burn.err""));
                String line;
                /* We will miss the error without this delay */
                Thread.sleep(50);
                /* 
                 * Check for the case where the necessary dependencies are not
                 * installed, but the user tries to run dvd-homevideo anyway
                 */
                if (err_in.ready()) {
                    line = err_in.readLine();
                    if (line.equals(""/bin/sh: growisofs: command not found"")) {
                        DVD_GUI.MessageBox(""Could not locate growisofs in your path."" + ""\nPlease install all necessary dependencies"" + ""\nand rerun dvd-homevideo."", 0);
                        /* Close all open streams */
                        in.close();
                        out.close();
                        err_in.close();
                        err_out.close();
                        /* Indicate that there was an error */
                        return true;
                    } else {
                        DVD_GUI.txtAreaOutput.append(line + ""\n"");
                        out.write(line);
                        out.newLine();
                    }
                }
                out.write(""burn.log--->dvd-homevideo"");
                out.newLine();
                /* Write the output to the txtAreaOutput user display */
                while ((line = in.readLine()) != null) {
                    DVD_GUI.txtAreaOutput.append(line + ""\n"");
                    out.write(line);
                    out.newLine();
                }
                /*
                 * close() throws an IOException
                 */
                in.close();
                out.close();
                err_in.close();
                err_out.close();
                /*
                 * p.waitFor() throws an InterruptedException
                 */
                p.waitFor();
            } catch (IOException ex) {
                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
                DVD_GUI.MessageBox(m_BaseErr + ""IO Error\n"" + ex.toString(), 0);
                ex.printStackTrace();
                return true;
            } catch (InterruptedException ex) {
                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
                DVD_GUI.MessageBox(m_BaseErr + ""dvd-homevideo thread was interrupted\n"" + ex.toString(), 0);
                ex.printStackTrace();
                return true;
            } catch (NullPointerException ex) {
                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
                DVD_GUI.MessageBox(m_BaseErr + ""Error executing Runtime.getRuntime().exec()\n"" + ex.toString(), 0);
                ex.printStackTrace();
                return true;
            } catch (IllegalArgumentException ex) {
                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
                DVD_GUI.MessageBox(m_BaseErr + ""Illegal argument sent to Runtime.getRuntime().exec()\n"" + ex.toString(), 0);
                ex.printStackTrace();
                return true;
            } catch (Exception ex) {
                SaveStackTrace.printTrace(DVD_GUI.strOutputDir, ex);
                DVD_GUI.MessageBox(m_BaseErr + ""Unknown Error occurred\n"" + ex.toString(), 0);
                ex.printStackTrace();
                return true;
            }
        }
        if (m_Burn)
            return DVD_GUI.ErrorCheck(DVD_GUI.strOutputDir + ""/log/burn.log"");
        return false;
    }
}
","// BurnTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Burn}.
* It contains ten unit test cases for the {@link Burn#BurnToDVD(GUI)} method.
*/
class BurnTest {","// BurnTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Burn}.
* It contains ten unit test cases for the {@link Burn#BurnToDVD(GUI)} method.
*/
class BurnTest {

	/**
	* Test case for {@link Burn#BurnToDVD(GUI)} method.
	* This test case checks if the method returns true when the growisofs command is not found.
	*/
	@Test
	void testBurnToDVD_1() {
		GUI DVD_GUI = new GUI();
		DVD_GUI.strOutputDir = ""temp"";
		Burn burn = new Burn();
		burn.m_growisofs = ""/bin/sh: growisofs: command not found"";
		burn.m_Burn = true;
		assertTrue(burn.BurnToDVD(DVD_GUI));
	}
	
	/**
	* Test case for {@link Burn#BurnToDVD(GUI)} method.
	* This test case checks if the method returns true when the growisofs command is not found.
	*/
	@Test
	void testBurnToDVD_2() {
		GUI DVD_GUI = new GUI();
		DVD_GUI.strOutputDir = ""temp"";
		Burn burn = new Burn();
		burn.m_growisofs = ""/bin/sh: growisofs: command not found"";
		burn.m_Burn = false;
		assertFalse(burn.BurnToDVD(DVD_GUI));
	}
	
	/**
	* Test case for {@link Burn#BurnToDVD(GUI)} method.
	* This test case checks if the method returns true when the growisofs command is not found.
	*/
	@Test
	void testBurnToDVD_3() {
		GUI DVD_GUI = new GUI();
		DVD_GUI.strOutputDir = ""temp"";
		Burn burn = new Burn();
		burn.m_growisofs = ""/bin/sh: growisofs: command not found"";
		burn.m_Burn = true;
		assertTrue(burn.BurnToDVD(DVD_GUI));
	}
	
	/**
	* Test case for {@link Burn#BurnToDVD(GUI)} method.
	* This test case checks if the method returns true when the growisofs command is not found.
	*/
	@Test
	void testBurnToDVD_4() {
		GUI DVD_GUI = new GUI();
		DVD_GUI.strOutputDir = ""temp"";
		Burn burn = new Burn();
		burn.m_growisofs = ""/bin/sh: growisofs: command not found"";
		burn.m_Burn = false;
		assertFalse(burn.BurnToDVD(DVD_GUI));
	}
	
	/**
	* Test case for {@link Burn#BurnToDVD(GUI)} method.
	* This test case checks if the method returns true when the growisofs command is not found.
	*/
	@Test
	void testBurnToDVD_5() {
		GUI DVD_GUI = new GUI();
		DVD_GUI.strOutputDir = ""temp"";
		Burn burn = new Burn();
		burn.m_growisofs = ""/bin/sh: growisofs: command not found"";
		burn.m_Burn = true;
		assertTrue(burn.BurnToDVD(DVD_GUI));
	}
	
	/**
	* Test case for {@link Burn#BurnToDVD(GUI)} method.
	* This test case checks if the method returns true when the growisofs command is not found.
	*/
	@Test
	void testBurnToDVD_6() {
		GUI DVD_GUI = new GUI();
		DVD_GUI.strOutputDir = ""temp"";
		Burn burn = new Burn();
		burn.m_growisofs = ""/bin/sh: growisofs: command not found"";
		burn.m_Burn = false;
		assertFalse(burn.BurnToDVD(DVD_GUI));
	}
	
	/**
	* Test case for {@link Burn#BurnToDVD(GUI)} method.
	* This test case checks if the method returns true when the growisofs command is not found.
	*/
	@Test
	void testBurnToDVD_7() {
		GUI DVD_GUI = new GUI();
		DVD_GUI.strOutputDir = ""temp"";
		Burn burn = new Burn();
		burn.m_growisofs = ""/bin/sh: growisofs: command not found"";
		burn.m_Burn = true;
		assertTrue(burn.BurnToDVD(DVD_GUI));
	}
	
	/**
	* Test case for {@link Burn#BurnToDVD(GUI)} method.
	* This test case checks if the method returns true when the growisofs command is not found.
	*/
	@Test
	void testBurnToDVD_8() {
		GUI DVD_GUI = new GUI();
		DVD_GUI.strOutputDir = ""temp"";
		Burn burn = new Burn();
		burn.m_growisofs = ""/bin/sh: growisofs: command not found"";
		burn.m_Burn = false;
		assertFalse(burn.BurnToDVD(DVD_GUI));
	}
	
	/**
	* Test case for {@link Burn#BurnToDVD(GUI)} method.
	* This test case checks if the method returns true when the growisofs command is not found.
	*/
	@Test
	void testBurnToDVD_9() {
		GUI DVD_GUI = new GUI();
		DVD_GUI.strOutputDir = ""temp"";
		Burn burn = new Burn();
		burn.m_growisofs = ""/bin/sh: growisofs: command not found"";
		burn.m_Burn = true;
		assertTrue(burn.BurnToDVD(DVD_GUI));
	}
	
	/**
	* Test case for {@link Burn#BurnToDVD(GUI)} method.
	* This test case checks if the method returns true when the growisofs command is not found.
	*/
	@Test
	void testBurnToDVD_10() {
		GUI DVD_GUI = new GUI();
		DVD_GUI.strOutputDir = ""temp"";
		Burn burn = new Burn();
		burn.m_growisofs = ""/bin/sh: growisofs: command not found"";
		burn.m_Burn = false;
		assertFalse(burn.BurnToDVD(DVD_GUI));
	}
}

// CheckDependencies.java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.FileWriter;
import java.io.IOException;

/**
 * @author Shane Santner
 * This class checks for the necessary dependencies to run dvd-homevideo.
 */
public class CheckDependencies {

    /**
     * Check for the necessary dependencies to run dvd-homevideo
     *
     * @param DVD_GUI This is the GUI object used to control the form
     * return   A boolean to determine if an error occurred in the function
     */
    public boolean CheckDependencies(GUI DVD_GUI) {
        try {
            /* Create the dvd-author process */
            Process p = Runtime.getRuntime().exec(m_dependencies);
            /* Instantiate input and output readers for dvd-author streams */
            BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
            BufferedReader err_in = new BufferedReader(new InputStreamReader(p.getErrorStream()));
            BufferedWriter out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/log/dependencies.log""));
            BufferedWriter err_out = new BufferedWriter(new FileWriter(DVD_GUI.strOutputDir + ""/log/dependencies.err""));
            String line;
            /* We will miss the error without this delay */
            Thread.sleep(50);
            /* 
             * Check for the case where the necessary dependencies are not
             * installed, but the user tries to run dvd-homevideo anyway
             */
            if (err_in.ready()) {
                line = err_in.readLine();
                if (line.equals(""/bin/sh: dvdauthor: command not found"")) {
                    DVD_GUI.MessageBox("""
cmpl-6wtCS6gfqdkm6KD21h1fUVKqT1qXj,/EvoSuiteBenchmark/scenario2/47_dvd-homevideo/src/main/java/Capture.java,50.198283433914185,stop,"// Capture.java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;

/**
 * @author Shane Santner
 * The Capture class utilizes dvgrab to capture audio and video
 * data from a dv camcorder.  It captures for the amount of time
 * specified by the user.
 *
 * TODO - Is there a way to get the camcorder time from dvgrab?
 *        This would be a more accurate way of determining when
 *        to stop the camcorder.  Also need to handle input, output
 *        and error streams more appropriatly.
 */
public class Capture implements Runnable {

    /**
     * Used to instantiate a new thread and to perform error checking.
     *
     * @return A boolean to determine if an error occurred in the function
     */
    public boolean init() {
        if (m_GUI.menuChkThread.isSelected()) {
            /* Create and start the new thread */
            m_Thread = new Thread(this);
            /* Increase priority so we don't drop frames */
            m_Thread.setPriority(10);
            m_Thread.start();
            /* Need to fix this */
            return false;
        } else {
            DV_Capture();
            return (m_Error | m_GUI.ErrorCheck(m_GUI.strOutputDir + ""/log/dvgrab.log""));
        }
        /* 
         * If an error occurred while executing DV_Capture then m_Error will be set
         * to true.  Also check the log file for any evidence of an error.
         */
    }
}
","// CaptureTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Capture}.
* It contains ten unit test cases for the {@link Capture#init()} method.
*/
class CaptureTest {","// CaptureTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Capture}.
* It contains ten unit test cases for the {@link Capture#init()} method.
*/
class CaptureTest {

	/**
	* Test case for the {@link Capture#init()} method.
	* This test case checks if the {@link Capture#init()} method returns true when the thread is selected.
	*/
	@Test
	void testInit_threadSelected() {
		Capture capture = new Capture();
		capture.m_GUI.menuChkThread.setSelected(true);
		assertTrue(capture.init());
	}
	
	/**
	* Test case for the {@link Capture#init()} method.
	* This test case checks if the {@link Capture#init()} method returns false when the thread is not selected.
	*/
	@Test
	void testInit_threadNotSelected() {
		Capture capture = new Capture();
		capture.m_GUI.menuChkThread.setSelected(false);
		assertFalse(capture.init());
	}
	
	/**
	* Test case for the {@link Capture#init()} method.
	* This test case checks if the {@link Capture#init()} method returns true when the thread is selected and the error is true.
	*/
	@Test
	void testInit_threadSelected_errorTrue() {
		Capture capture = new Capture();
		capture.m_GUI.menuChkThread.setSelected(true);
		capture.m_Error = true;
		assertTrue(capture.init());
	}
	
	/**
	* Test case for the {@link Capture#init()} method.
	* This test case checks if the {@link Capture#init()} method returns false when the thread is selected and the error is false.
	*/
	@Test
	void testInit_threadSelected_errorFalse() {
		Capture capture = new Capture();
		capture.m_GUI.menuChkThread.setSelected(true);
		capture.m_Error = false;
		assertFalse(capture.init());
	}
	
	/**
	* Test case for the {@link Capture#init()} method.
	* This test case checks if the {@link Capture#init()} method returns true when the thread is not selected and the error is true.
	*/
	@Test
	void testInit_threadNotSelected_errorTrue() {
		Capture capture = new Capture();
		capture.m_GUI.menuChkThread.setSelected(false);
		capture.m_Error = true;
		assertTrue(capture.init());
	}
	
	/**
	* Test case for the {@link Capture#init()} method.
	* This test case checks if the {@link Capture#init()} method returns false when the thread is not selected and the error is false.
	*/
	@Test
	void testInit_threadNotSelected_errorFalse() {
		Capture capture = new Capture();
		capture.m_GUI.menuChkThread.setSelected(false);
		capture.m_Error = false;
		assertFalse(capture.init());
	}
	
	/**
	* Test case for the {@link Capture#init()} method.
	* This test case checks if the {@link Capture#init()} method returns true when the thread is selected and the error is true and the error check is true.
	*/
	@Test
	void testInit_threadSelected_errorTrue_errorCheckTrue() {
		Capture capture = new Capture();
		capture.m_GUI.menuChkThread.setSelected(true);
		capture.m_Error = true;
		capture.m_GUI.ErrorCheck(capture.m_GUI.strOutputDir + ""/log/dvgrab.log"");
		assertTrue(capture.init());
	}
	
	/**
	* Test case for the {@link Capture#init()} method.
	* This test case checks if the {@link Capture#init()} method returns false when the thread is selected and the error is true and the error check is false.
	*/
	@Test
	void testInit_threadSelected_errorTrue_errorCheckFalse() {
		Capture capture = new Capture();
		capture.m_GUI.menuChkThread.setSelected(true);
		capture.m_Error = true;
		capture.m_GUI.ErrorCheck(capture.m_GUI.strOutputDir + ""/log/dvgrab.log"");
		assertFalse(capture.init());
	}
	
	/**
	* Test case for the {@link Capture#init()} method.
	* This test case checks if the {@link Capture#init()} method returns true when the thread is selected and the error is false and the error check is true.
	*/
	@Test
	void testInit_threadSelected_errorFalse_errorCheckTrue() {
		Capture capture = new Capture();
		capture.m_GUI.menuChkThread.setSelected(true);
		capture.m_Error = false;
		capture.m_GUI.ErrorCheck(capture.m_GUI.strOutputDir + ""/log/dvgrab.log"");
		assertTrue(capture.init());
	}
	
	/**
	* Test case for the {@link Capture#init()} method.
	* This test case checks if the {@link Capture#init()} method returns false when the thread is selected and the error is false and the error check is false.
	*/
	@Test
	void testInit_threadSelected_errorFalse_errorCheckFalse() {
		Capture capture = new Capture();
		capture.m_GUI.menuChkThread.setSelected(true);
		capture.m_Error = false;
		capture.m_GUI.ErrorCheck(capture.m_GUI.strOutputDir + ""/log/dvgrab.log"");
		assertFalse(capture.init());
	}
}"
cmpl-6wtDVZiEAgWmgBd2IFsCvhWjc3CSk,/EvoSuiteBenchmark/scenario2/47_dvd-homevideo/src/main/java/Convert.java,80.67292332649231,length,"// Convert.java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.StringIndexOutOfBoundsException;
import java.util.StringTokenizer;

/**
 * @author Shane Santner
 * This class is used to transcode the video captured
 * from the digital camcorder into mpeg4, the DVD compatible
 * format.  It explicitly calls the transcode command
 * after meticulously preparing the options that can be passed
 * to transcode.
 *
 * TODO - Break mplex out into its own class.
 *        Figure out how to calculate remaining time even if
 *        video was not captured from the camcorder during the
 *        current session.
 *        Need to handle input, output and error streams
 *        more appropriatly.
 */
public class Convert implements Runnable {

    /**
     * Used to instantiate a new thread and to perform error checking.
     *
     * @return A boolean to determine if an error occurred in the function
     */
    public boolean init() {
        if (m_GUI.menuChkThread.isSelected()) {
            m_Thread = new Thread(this);
            m_Thread.start();
            try {
                m_Thread.join();
            } catch (InterruptedException ex) {
                SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
                m_GUI.MessageBox(m_BaseErr + ""Could not join Convert.java thread\n"" + ex.toString(), 0);
                ex.printStackTrace();
                m_Error = true;
            }
        } else
            Transcode();
        /* 
         * Check transcode.log and mplex.log for any sign of an error.
         * If either file contains an error then return an error.  Also
         * check m_Error to see if it was set while executing the 
         * Transcode method.
         */
        return (m_Error || m_GUI.ErrorCheck(m_GUI.strOutputDir + ""/log/transcode.log"") || m_GUI.ErrorCheck(m_GUI.strOutputDir + ""/log/mplex.log""));
    }
}
","// ConvertTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.StringIndexOutOfBoundsException;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Convert}.
* It contains ten unit test cases for the {@link Convert#init()} method.
*/
class ConvertTest {","// ConvertTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.StringIndexOutOfBoundsException;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Convert}.
* It contains ten unit test cases for the {@link Convert#init()} method.
*/
class ConvertTest {

	/**
	* Test case for {@link Convert#init()} method.
	* This test case checks if the method returns true when the transcode.log file contains an error.
	*/
	@Test
	void testInit_1() {
		Convert convert = new Convert();
		convert.m_GUI.strOutputDir = ""test"";
		convert.m_GUI.menuChkThread = false;
		convert.m_GUI.ErrorCheck = true;
		convert.m_GUI.MessageBox = true;
		convert.m_GUI.SaveStackTrace = true;
		convert.m_GUI.Transcode = true;
		convert.m_GUI.Mplex = true;
		convert.m_GUI.Mkvmerge = true;
		convert.m_GUI.Mkvmerge_GUI = true;
		convert.m_GUI.Mkvmerge_GUI_exe = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent = ""test"";
		convert.m_GUI.Mkvmerge_GUI_exe_path_file_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_getParent_get"
cmpl-6wtEnseObAk6U22gKOYPYxNNaan60,/EvoSuiteBenchmark/scenario2/47_dvd-homevideo/src/main/java/GUI0.java,2.6723382472991943,stop,"// GUI.java
//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;

/**
 * @author Shane Santner
 * This class provides the GUI for dvd-homevideo.
 */
public class GUI extends javax.swing.JFrame {

    /**
     * On startup, checks to ensure that the raw1394 module is loaded.
     * This module is only needed to capture audio and video from the
     * dv camcorder.
     * return   A boolean indicating if the module is present
     */
    public boolean checkForModules() {
        try {
            String line;
            String modules = ""cat /proc/modules | grep raw1394"";
            String[] module_cmd = { ""/bin/sh"", ""-c"", modules };
            Process p = Runtime.getRuntime().exec(module_cmd);
            BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
            line = in.readLine();
            p.waitFor();
            if (line == null)
                return false;
            else
                return true;
        } catch (Exception ioe) {
            /* If we have made it here then the module is not loaded */
            return false;
        }
    }
}
","// GUITest.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains ten unit test cases for the {@link GUI#checkForModules()} method.
*/
class GUITest {","// GUITest.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains ten unit test cases for the {@link GUI#checkForModules()} method.
*/
class GUITest {

	/**
	* Test case for {@link GUI#checkForModules()} method.
	* This test case checks if the raw1394 module is loaded.
	*/
	@Test
	void testCheckForModules() {
		GUI gui = new GUI();
		assertTrue(gui.checkForModules());
	}
}"
cmpl-6wtFqUxTy4R0ezVzOBFQBLAnDakgQ,/EvoSuiteBenchmark/scenario2/47_dvd-homevideo/src/main/java/GUI1.java,32.34927201271057,stop,"// GUI.java
//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;

/**
 * @author Shane Santner
 * This class provides the GUI for dvd-homevideo.
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Displays a message box with the supplied text and yes/no options
     *
     * @param message The message to display in the box
     */
    public int MessageBox(String message) {
        return JOptionPane.showConfirmDialog(null, message, ""dvd-homevideo"", JOptionPane.YES_NO_OPTION);
    }
}
","// GUITest.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains ten unit test cases for the {@link GUI#MessageBox(String)} method.
*/
class GUITest {","// GUITest.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains ten unit test cases for the {@link GUI#MessageBox(String)} method.
*/
class GUITest {

	/**
	* Test case for {@link GUI#MessageBox(String)} method.
	* This test case tests the method with a null string.
	*/
	@Test
	void testMessageBoxNull() {
		GUI gui = new GUI();
		assertEquals(JOptionPane.NO_OPTION, gui.MessageBox(null));
	}
	
	/**
	* Test case for {@link GUI#MessageBox(String)} method.
	* This test case tests the method with an empty string.
	*/
	@Test
	void testMessageBoxEmpty() {
		GUI gui = new GUI();
		assertEquals(JOptionPane.NO_OPTION, gui.MessageBox(""""));
	}
	
	/**
	* Test case for {@link GUI#MessageBox(String)} method.
	* This test case tests the method with a string of length 1.
	*/
	@Test
	void testMessageBoxLength1() {
		GUI gui = new GUI();
		assertEquals(JOptionPane.NO_OPTION, gui.MessageBox(""a""));
	}
	
	/**
	* Test case for {@link GUI#MessageBox(String)} method.
	* This test case tests the method with a string of length 2.
	*/
	@Test
	void testMessageBoxLength2() {
		GUI gui = new GUI();
		assertEquals(JOptionPane.NO_OPTION, gui.MessageBox(""ab""));
	}
	
	/**
	* Test case for {@link GUI#MessageBox(String)} method.
	* This test case tests the method with a string of length 3.
	*/
	@Test
	void testMessageBoxLength3() {
		GUI gui = new GUI();
		assertEquals(JOptionPane.NO_OPTION, gui.MessageBox(""abc""));
	}
	
	/**
	* Test case for {@link GUI#MessageBox(String)} method.
	* This test case tests the method with a string of length 4.
	*/
	@Test
	void testMessageBoxLength4() {
		GUI gui = new GUI();
		assertEquals(JOptionPane.NO_OPTION, gui.MessageBox(""abcd""));
	}
	
	/**
	* Test case for {@link GUI#MessageBox(String)} method.
	* This test case tests the method with a string of length 5.
	*/
	@Test
	void testMessageBoxLength5() {
		GUI gui = new GUI();
		assertEquals(JOptionPane.NO_OPTION, gui.MessageBox(""abcde""));
	}
	
	/**
	* Test case for {@link GUI#MessageBox(String)} method.
	* This test case tests the method with a string of length 6.
	*/
	@Test
	void testMessageBoxLength6() {
		GUI gui = new GUI();
		assertEquals(JOptionPane.NO_OPTION, gui.MessageBox(""abcdef""));
	}
	
	/**
	* Test case for {@link GUI#MessageBox(String)} method.
	* This test case tests the method with a string of length 7.
	*/
	@Test
	void testMessageBoxLength7() {
		GUI gui = new GUI();
		assertEquals(JOptionPane.NO_OPTION, gui.MessageBox(""abcdefg""));
	}
	
	/**
	* Test case for {@link GUI#MessageBox(String)} method.
	* This test case tests the method with a string of length 8.
	*/
	@Test
	void testMessageBoxLength8() {
		GUI gui = new GUI();
		assertEquals(JOptionPane.NO_OPTION, gui.MessageBox(""abcdefgh""));
	}
}"
cmpl-6wtGtCJftrW8YIdxBWkxlelrdHzjm,/EvoSuiteBenchmark/scenario2/47_dvd-homevideo/src/main/java/GUI2.java,72.70415258407593,length,"// GUI.java
//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;

/**
 * @author Shane Santner
 * This class provides the GUI for dvd-homevideo.
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Check dvd-homevideo for runtime errors
     *
     * @param fileName This is a log file to parse through, looking for
     *                      the keyword ""Error""
     * @return A boolean indicating if an error was found
     */
    public boolean ErrorCheck(String fileName) {
        String line;
        StringTokenizer st;
        String testToken;
        boolean error = false;
        /*
         * Need to parse through the supplies file and look for any
         * instances of the words 'error' or 'broken'.  If found, this
         * is treated as a run-time error of one of the dependent programs
         * that dvd-homevideo relies on.
         */
        try {
            BufferedReader in = new BufferedReader(new FileReader(fileName));
            while ((line = in.readLine()) != null) {
                /* Check for a specific burn error */
                if (line.equals("":-( /dev/dvd: media is not recognized as recordable DVD: 9"")) {
                    MessageBox(""Non-recoverable error occurred."" + ""\nClass Name: "" + new Exception().getStackTrace()[1].getClassName() + ""\nMethod Name: "" + new Exception().getStackTrace()[1].getMethodName() + ""\nError was: "" + line, 0);
                    return true;
                }
                /*
                 * Need to catch all instances of 'error' or 'broken'.  This
                 * includes cases such as:
                 * **Error:
                 * error~
                 * Broken pipe
                 * etc, etc, etc.  We need to catch ALL instances.
                 */
                st = new StringTokenizer(line, ""*,;:'-~\t "");
                while (st.hasMoreTokens()) {
                    testToken = st.nextToken();
                    if (// ||
                    //testToken.equalsIgnoreCase(""Broken""))
                    testToken.equalsIgnoreCase(""Error"")) {
                        MessageBox(""Non-recoverable error occurred."" + ""\nClass Name: "" + new Exception().getStackTrace()[1].getClassName() + ""\nMethod Name: "" + new Exception().getStackTrace()[1].getMethodName() + ""\nError was: "" + line, 0);
                        error = true;
                    }
                }
            }
        } catch (FileNotFoundException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""Can not find "" + fileName + ""\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        } catch (IOException ex) {
            SaveStackTrace.printTrace(strOutputDir, ex);
            MessageBox(""IO Error\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        }
        return error;
    }
}
","// GUITest.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains ten unit test cases for the {@link GUI#ErrorCheck(String)} method.
*/
class GUITest {","// GUITest.java


//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;
import java.io.FileNotFoundException;
import java.io.File;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.FileFilter;
import java.awt.Color;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GUI}.
* It contains ten unit test cases for the {@link GUI#ErrorCheck(String)} method.
*/
class GUITest {

	/**
	* Test case for {@link GUI#ErrorCheck(String)} method.
	* This test case checks if the method returns true when the log file contains the word ""Error"".
	*/
	@Test
	void testErrorCheck_Error() {
		GUI gui = new GUI();
		String fileName = ""testErrorCheck_Error.txt"";
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(fileName));
			out.write(""Error"");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		assertTrue(gui.ErrorCheck(fileName));
	}
	
	/**
	* Test case for {@link GUI#ErrorCheck(String)} method.
	* This test case checks if the method returns true when the log file contains the word ""error"".
	*/
	@Test
	void testErrorCheck_error() {
		GUI gui = new GUI();
		String fileName = ""testErrorCheck_error.txt"";
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(fileName));
			out.write(""error"");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		assertTrue(gui.ErrorCheck(fileName));
	}
	
	/**
	* Test case for {@link GUI#ErrorCheck(String)} method.
	* This test case checks if the method returns true when the log file contains the word ""ERROR"".
	*/
	@Test
	void testErrorCheck_ERROR() {
		GUI gui = new GUI();
		String fileName = ""testErrorCheck_ERROR.txt"";
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(fileName));
			out.write(""ERROR"");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		assertTrue(gui.ErrorCheck(fileName));
	}
	
	/**
	* Test case for {@link GUI#ErrorCheck(String)} method.
	* This test case checks if the method returns true when the log file contains the word ""Broken"".
	*/
	@Test
	void testErrorCheck_Broken() {
		GUI gui = new GUI();
		String fileName = ""testErrorCheck_Broken.txt"";
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(fileName));
			out.write(""Broken"");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		assertTrue(gui.ErrorCheck(fileName));
	}
	
	/**
	* Test case for {@link GUI#ErrorCheck(String)} method.
	* This test case checks if the method returns true when the log file contains the word ""broken"".
	*/
	@Test
	void testErrorCheck_broken() {
		GUI gui = new GUI();
		String fileName = ""testErrorCheck_broken.txt"";
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(fileName));
			out.write(""broken"");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		assertTrue(gui.ErrorCheck(fileName));
	}
	
	/**
	* Test case for {@link GUI#ErrorCheck(String)} method.
	* This test case checks if the method returns true when the log file contains the word ""BROKEN"".
	*/
	@Test
	void testErrorCheck_BROKEN() {
		GUI gui = new GUI();
		String fileName = ""testErrorCheck_BROKEN.txt"";
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(fileName));
			out.write(""BROKEN"");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		assertTrue(gui.ErrorCheck(fileName));
	}
	
	/**
	* Test case for {@link GUI#ErrorCheck(String)} method.
	* This test case checks if the method returns true when the log file contains the word ""Error"" and the word ""broken"".
	*/
	@Test
	void testErrorCheck_ErrorBroken() {
		GUI gui = new GUI();
		String fileName = ""testErrorCheck_ErrorBroken.txt"";
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(fileName));
			out.write(""Error broken"");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		assertTrue(gui.ErrorCheck(fileName));
	}
	
	/**
	* Test case for {@link GUI#ErrorCheck(String)} method.
	* This test case checks if the method returns true when the log file contains the word ""Error"" and the word ""broken"" and the word ""error"".
	*/
	@Test
	void testErrorCheck_ErrorBrokenError() {
		GUI gui = new GUI();
		String fileName = ""testErrorCheck_ErrorBrokenError.txt"";
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(fileName));
			out.write(""Error broken error"");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		assertTrue(gui.ErrorCheck(fileName));
	}
	
	/**
	* Test case for {@link GUI#ErrorCheck(String)} method.
	* This test case checks if the method returns true when the log file contains the word ""Error"" and the word ""broken"" and the word ""error"" and the word ""ERROR"".
	*/
	@Test
	void testErrorCheck_ErrorBrokenErrorERROR() {
		GUI gui = new GUI();
		String fileName = ""testErrorCheck_ErrorBrokenErrorERROR.txt"";
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(fileName));
			out.write(""Error broken error ERROR"");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		assertTrue(gui.ErrorCheck(fileName));
	}
	
	/**
	* Test case for {@link GUI#ErrorCheck(String)} method.
	* This test case checks if the method returns true when the log file contains the word ""Error"" and the word ""broken"" and the word ""error"" and the word ""ERROR"" and the word ""BROKEN"".
	*/
	@Test
	void testErrorCheck_ErrorBrokenErrorERRORBROKEN() {
		GUI gui = new GUI();
		String fileName = ""testErrorCheck_ErrorBrokenErrorERRORBROKEN.txt"";
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(fileName));
			out.write(""Error broken error ERROR BROKEN"");
			out.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
		assertTrue(gui.ErrorCheck(fileName));
	}
	
	/**
	* Test case for {@link GUI#ErrorCheck(String)} method.
	* This test case checks if the method returns false when the log file does not contain the word ""Error"" or the word ""broken"" or the word ""error"" or the word ""ERROR"" or the word ""BROKEN"".
	*/
	@Test
	void testErrorCheck_NoError() {
		GUI gui = new GUI();
		String fileName = ""testErrorCheck_NoError.txt"";
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(fileName));
"
cmpl-6wtI4afL19LUZ2JMk0BWTW4SZaniQ,/EvoSuiteBenchmark/scenario2/47_dvd-homevideo/src/main/java/Menu0.java,69.29718685150146,length,"// Menu.java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.StringTokenizer;

/**
 * @author Shane Santner
 * This class creates a background menu for a DVD.  The user
 * can specify a background picture and audio to use for the
 * menu, or a default background can also be used.  The user
 * also has the option of specifying unique titles for each
 * chapter of the DVD.  If nothing is specified then the title
 * of the DVD will be used followed by an underscore and increasing
 * integer for each video clip.
 *
 * TODO - Can I use streams on dvd-menu?  Really need to standardize
 *        how I use streams across the board for all classes.
 */
public class Menu implements Runnable {

    /**
     * Used to instantiate a new thread and to perform error checking.
     *
     * @return A boolean to determine if an error occurred in the function
     */
    public boolean init() {
        /* Create and start the new thread */
        m_Thread = new Thread(this);
        m_Thread.start();
        try {
            m_Thread.join();
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }
        /* 
         * If an error occurred while executing DV_Capture then m_Error will be set
         * to true.  Also check the log file for any evidence of an error.
         */
        return (m_Error || m_GUI.ErrorCheck(m_GUI.strOutputDir + ""/log/dvd-menu.log""));
    }
}
","// MenuTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Menu}.
* It contains ten unit test cases for the {@link Menu#init()} method.
*/
class MenuTest {","// MenuTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Menu}.
* It contains ten unit test cases for the {@link Menu#init()} method.
*/
class MenuTest {

	/**
	* Test case for {@link Menu#init()} method.
	* This test case checks if the {@link Menu#init()} method returns true when the
	* {@link Menu#m_Error} variable is set to true.
	*/
	@Test
	void testInit_m_Error_true() {
		Menu menu = new Menu();
		menu.m_Error = true;
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()} method.
	* This test case checks if the {@link Menu#init()} method returns true when the
	* {@link Menu#m_GUI} variable is set to null.
	*/
	@Test
	void testInit_m_GUI_null() {
		Menu menu = new Menu();
		menu.m_GUI = null;
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()} method.
	* This test case checks if the {@link Menu#init()} method returns true when the
	* {@link Menu#m_Thread} variable is set to null.
	*/
	@Test
	void testInit_m_Thread_null() {
		Menu menu = new Menu();
		menu.m_Thread = null;
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()} method.
	* This test case checks if the {@link Menu#init()} method returns true when the
	* {@link Menu#m_Thread} variable is set to null.
	*/
	@Test
	void testInit_m_Thread_not_null() {
		Menu menu = new Menu();
		menu.m_Thread = new Thread();
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()} method.
	* This test case checks if the {@link Menu#init()} method returns true when the
	* {@link Menu#m_Thread} variable is set to null.
	*/
	@Test
	void testInit_m_Thread_not_null_2() {
		Menu menu = new Menu();
		menu.m_Thread = new Thread();
		menu.m_Thread.start();
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()} method.
	* This test case checks if the {@link Menu#init()} method returns true when the
	* {@link Menu#m_Thread} variable is set to null.
	*/
	@Test
	void testInit_m_Thread_not_null_3() {
		Menu menu = new Menu();
		menu.m_Thread = new Thread();
		menu.m_Thread.start();
		menu.m_Thread.interrupt();
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()} method.
	* This test case checks if the {@link Menu#init()} method returns true when the
	* {@link Menu#m_Thread} variable is set to null.
	*/
	@Test
	void testInit_m_Thread_not_null_4() {
		Menu menu = new Menu();
		menu.m_Thread = new Thread();
		menu.m_Thread.start();
		menu.m_Thread.interrupt();
		menu.m_GUI = new GUI();
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()} method.
	* This test case checks if the {@link Menu#init()} method returns true when the
	* {@link Menu#m_Thread} variable is set to null.
	*/
	@Test
	void testInit_m_Thread_not_null_5() {
		Menu menu = new Menu();
		menu.m_Thread = new Thread();
		menu.m_Thread.start();
		menu.m_Thread.interrupt();
		menu.m_GUI = new GUI();
		menu.m_GUI.strOutputDir = """";
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()} method.
	* This test case checks if the {@link Menu#init()} method returns true when the
	* {@link Menu#m_Thread} variable is set to null.
	*/
	@Test
	void testInit_m_Thread_not_null_6() {
		Menu menu = new Menu();
		menu.m_Thread = new Thread();
		menu.m_Thread.start();
		menu.m_Thread.interrupt();
		menu.m_GUI = new GUI();
		menu.m_GUI.strOutputDir = """";
		menu.m_GUI.ErrorCheck("""");
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()} method.
	* This test case checks if the {@link Menu#init()} method returns true when the
	* {@link Menu#m_Thread} variable is set to null.
	*/
	@Test
	void testInit_m_Thread_not_null_7() {
		Menu menu = new Menu();
		menu.m_Thread = new Thread();
		menu.m_Thread.start();
		menu.m_Thread.interrupt();
		menu.m_GUI = new GUI();
		menu.m_GUI.strOutputDir = """";
		menu.m_GUI.ErrorCheck("""");
		menu.m_Error = false;
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()} method.
	* This test case checks if the {@link Menu#init()} method returns true when the
	* {@link Menu#m_Thread} variable is set to null.
	*/
	@Test
	void testInit_m_Thread_not_null_8() {
		Menu menu = new Menu();
		menu.m_Thread = new Thread();
		menu.m_Thread.start();
		menu.m_Thread.interrupt();
		menu.m_GUI = new GUI();
		menu.m_GUI.strOutputDir = """";
		menu.m_GUI.ErrorCheck("""");
		menu.m_Error = false;
		menu.m_GUI.ErrorCheck("""");
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()} method.
	* This test case checks if the {@link Menu#init()} method returns true when the
	* {@link Menu#m_Thread} variable is set to null.
	*/
	@Test
	void testInit_m_Thread_not_null_9() {
		Menu menu = new Menu();
		menu.m_Thread = new Thread();
		menu.m_Thread.start();
		menu.m_Thread.interrupt();
		menu.m_GUI = new GUI();
		menu.m_GUI.strOutputDir = """";
		menu.m_GUI.ErrorCheck("""");
		menu.m_Error = false;
		menu.m_GUI.ErrorCheck("""");
		menu.m_GUI.ErrorCheck("""");
		assertTrue(menu.init());
	}
	
	/**
	* Test case for {@link Menu#init()} method.
	* This test case checks if the {@link Menu#init()} method returns true when the
	* {@link Menu#m_Thread} variable is set to null.
	*/
	@Test
	void testInit_m_Thread_not_null_10() {
		Menu menu = new Menu();
		menu.m_Thread = new Thread();
		menu.m_Thread.start();
		menu.m_Thread.interrupt();
		menu.m_GUI = new GUI();
		menu.m_"
cmpl-6wtJBMqdJSKfLu0ad0XygVFpEFmFb,/EvoSuiteBenchmark/scenario2/47_dvd-homevideo/src/main/java/Menu1.java,31.8054678440094,stop,"// Menu.java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.StringTokenizer;

/**
 * @author Shane Santner
 * This class creates a background menu for a DVD.  The user
 * can specify a background picture and audio to use for the
 * menu, or a default background can also be used.  The user
 * also has the option of specifying unique titles for each
 * chapter of the DVD.  If nothing is specified then the title
 * of the DVD will be used followed by an underscore and increasing
 * integer for each video clip.
 *
 * TODO - Can I use streams on dvd-menu?  Really need to standardize
 *        how I use streams across the board for all classes.
 */
public class Menu implements Runnable {

    /**
     * Creates the xml file to pass to dvdauthor
     *
     * @param m_GUI This is the GUI object used to control the form
     */
    public boolean createXML() {
        File xmlFile = new File(m_GUI.strOutputDir + ""/vmgm.xml"");
        File ListDir = new File(m_GUI.strOutputDir);
        /* 
         * Need to find all vob files, but don't want to include menu.vob
         * which was created by dvd-menu.
         */
        FilenameFilter filter = new FilenameFilter() {

            boolean ret_val = true;

            public boolean accept(File dir, String name) {
                if (name.endsWith(""vob"")) {
                    if (!name.equals(""menu.vob""))
                        ret_val = true;
                    else
                        ret_val = false;
                } else
                    ret_val = false;
                return ret_val;
            }
        };
        video_files = ListDir.list(filter);
        /* Write the xml file.  It's not pretty, but it works. */
        int i;
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(xmlFile));
            writer.write(""<dvdauthor dest=\"""" + m_GUI.strOutputDir + ""/DVD/\"" jumppad=\""0\"">"");
            writer.newLine();
            writer.write(""\t<vmgm>"");
            writer.newLine();
            writer.write(""\t\t<menus>"");
            writer.newLine();
            writer.write(""\t\t\t<pgc entry=\""title\"" >"");
            writer.newLine();
            writer.write(""\t\t\t\t<vob file=\"""" + m_GUI.strOutputDir + ""/menu.vob\"" pause=\""inf\"" />"");
            writer.newLine();
            if (titles[0] == null) {
                for (i = 1; i <= video_files.length; i++) {
                    writer.write(""\t\t\t\t<button>jump title "" + i + "";</button>"");
                    writer.newLine();
                }
            } else {
                for (i = 1; i < titles.length; i++) {
                    if (!titles[i - 1].equals(""BLANK"") && !titles[i - 1].equals(""DONE"")) {
                        writer.write(""\t\t\t\t<button>jump title "" + i + "";</button>"");
                        writer.newLine();
                    } else if (titles[i - 1].equals(""DONE""))
                        break;
                }
            }
            writer.write(""\t\t\t\t<post> jump vmgm menu 1; </post>"");
            writer.newLine();
            writer.write(""\t\t\t</pgc>"");
            writer.newLine();
            writer.write(""\t\t</menus>"");
            writer.newLine();
            writer.write(""\t</vmgm>"");
            writer.newLine();
            writer.write(""\t<titleset>"");
            writer.newLine();
            writer.write(""\t<titles>"");
            writer.newLine();
            for (i = 1; i < video_files.length; i++) {
                writer.write(""\t\t<pgc>"");
                writer.newLine();
                writer.write(""\t\t\t<vob file=\"""" + video_files[i - 1] + ""\"" />"");
                writer.newLine();
                writer.write(""\t\t\t<post>jump title "" + (i + 1) + "";</post>"");
                writer.newLine();
                writer.write(""\t\t</pgc>"");
                writer.newLine();
            }
            writer.write(""\t\t<pgc>"");
            writer.newLine();
            writer.write(""\t\t\t<vob file=\"""" + video_files[i - 1] + ""\"" />"");
            writer.newLine();
            writer.write(""\t\t\t<post>call vmgm menu 1;</post>"");
            writer.newLine();
            writer.write(""\t\t</pgc>"");
            writer.newLine();
            writer.write(""\t</titles>"");
            writer.newLine();
            writer.write(""\t</titleset>"");
            writer.newLine();
            writer.write(""</dvdauthor>"");
            writer.newLine();
            writer.close();
        } catch (IOException ex) {
            SaveStackTrace.printTrace(m_GUI.strOutputDir, ex);
            m_GUI.MessageBox(baseErr + ""IO Error\n"" + ex.toString(), 0);
            ex.printStackTrace();
            return true;
        }
        /* Shouldn't expect to see any errors from this method call. */
        return false;
    }
}
","// MenuTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Menu}.
* It contains ten unit test cases for the {@link Menu#createXML()} method.
*/
class MenuTest {","// MenuTest.java


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.File;
import java.io.FileWriter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Menu}.
* It contains ten unit test cases for the {@link Menu#createXML()} method.
*/
class MenuTest {

		/**
		* Test case for {@link Menu#createXML()} method.
		* This test case checks if the method returns true when the file is not found.
		*/
		@Test
		void testCreateXML_1() {
				Menu menu = new Menu();
				menu.m_GUI.strOutputDir = """";
				assertTrue(menu.createXML());
		}
		
		/**
		* Test case for {@link Menu#createXML()} method.
		* This test case checks if the method returns true when the file is not found.
		*/
		@Test
		void testCreateXML_2() {
				Menu menu = new Menu();
				menu.m_GUI.strOutputDir = """";
				assertTrue(menu.createXML());
		}
		
		/**
		* Test case for {@link Menu#createXML()} method.
		* This test case checks if the method returns true when the file is not found.
		*/
		@Test
		void testCreateXML_3() {
				Menu menu = new Menu();
				menu.m_GUI.strOutputDir = """";
				assertTrue(menu.createXML());
		}
		
		/**
		* Test case for {@link Menu#createXML()} method.
		* This test case checks if the method returns true when the file is not found.
		*/
		@Test
		void testCreateXML_4() {
				Menu menu = new Menu();
				menu.m_GUI.strOutputDir = """";
				assertTrue(menu.createXML());
		}
		
		/**
		* Test case for {@link Menu#createXML()} method.
		* This test case checks if the method returns true when the file is not found.
		*/
		@Test
		void testCreateXML_5() {
				Menu menu = new Menu();
				menu.m_GUI.strOutputDir = """";
				assertTrue(menu.createXML());
		}
		
		/**
		* Test case for {@link Menu#createXML()} method.
		* This test case checks if the method returns true when the file is not found.
		*/
		@Test
		void testCreateXML_6() {
				Menu menu = new Menu();
				menu.m_GUI.strOutputDir = """";
				assertTrue(menu.createXML());
		}
		
		/**
		* Test case for {@link Menu#createXML()} method.
		* This test case checks if the method returns true when the file is not found.
		*/
		@Test
		void testCreateXML_7() {
				Menu menu = new Menu();
				menu.m_GUI.strOutputDir = """";
				assertTrue(menu.createXML());
		}
		
		/**
		* Test case for {@link Menu#createXML()} method.
		* This test case checks if the method returns true when the file is not found.
		*/
		@Test
		void testCreateXML_8() {
				Menu menu = new Menu();
				menu.m_GUI.strOutputDir = """";
				assertTrue(menu.createXML());
		}
		
		/**
		* Test case for {@link Menu#createXML()} method.
		* This test case checks if the method returns true when the file is not found.
		*/
		@Test
		void testCreateXML_9() {
				Menu menu = new Menu();
				menu.m_GUI.strOutputDir = """";
				assertTrue(menu.createXML());
		}
		
		/**
		* Test case for {@link Menu#createXML()} method.
		* This test case checks if the method returns true when the file is not found.
		*/
		@Test
		void testCreateXML_10() {
				Menu menu = new Menu();
				menu.m_GUI.strOutputDir = """";
				assertTrue(menu.createXML());
		}
}"
