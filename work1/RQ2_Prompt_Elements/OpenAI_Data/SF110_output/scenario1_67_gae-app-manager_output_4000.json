[
{
    "id": "cmpl-6x6SKt9doZQm9t4vWjsMFpBpP24wK",
    "object": "text_completion",
    "created": 1679544188,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t/**\n\t* Test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the method with a valid userid and password.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine1() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"password\";\n\t\tString source = \"source\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t* Test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the method with a valid userid and password.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine2() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"password\";\n\t\tString source = \"source\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t* Test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the method with a valid userid and password.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine3() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"password\";\n\t\tString source = \"source\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t* Test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the method with a valid userid and password.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine4() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"password\";\n\t\tString source = \"source\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t* Test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the method with a valid userid and password.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine5() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"password\";\n\t\tString source = \"source\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t* Test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the method with a valid userid and password.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine6() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"password\";\n\t\tString source = \"source\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t* Test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the method with a valid userid and password.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine7() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"password\";\n\t\tString source = \"source\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t* Test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the method with a valid userid and password.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine8() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"password\";\n\t\tString source = \"source\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t* Test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the method with a valid userid and password.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine9() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"password\";\n\t\tString source = \"source\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertNotNull(result);\n\t}\n\t\n\t/**\n\t* Test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the method with a valid userid and password.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine10() throws Exception {\n\t\tString userid = \"userid\";\n\t\tString password = \"password\";\n\t\tString source = \"source\";\n\t\tString result = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n\t\tassertNotNull(result);\n\t}\n}",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 1023,
        "completion_tokens": 1330,
        "total_tokens": 2353
    },
    "time_taken": 43.844889879226685,
    "prompt_id": "/EvoSuiteBenchmark/scenario1/67_gae-app-manager/src/main/java/net/sf/gaeappmanager/google/LogonHelper.java",
    "original_code": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode() != 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n}\n",
    "test_prompt": "// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains ten unit test cases for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {"
},
{
    "id": "cmpl-6x6TNYH61vUgfmzEPzQCXmnodh2fC",
    "object": "text_completion",
    "created": 1679544253,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t\t@Test\n\t\tvoid testRetrieveAppQuotaDetails() throws Exception {\n\t\t\t\tString userid = \"userid\";\n\t\t\t\tString password = \"password\";\n\t\t\t\tString source = \"source\";\n\t\t\t\tString application = \"application\";\n\t\t\t\tString authCookie = \"authCookie\";\n\t\t\t\tString url = \"https://appengine.google.com/dashboard/quotadetails?&app_id=\" + application;\n\t\t\t\tString cookie = \"ACSID=\" + authCookie;\n\t\t\t\tQuotaDetails quotaDetails = new QuotaDetails();\n\t\t\t\t\n\t\t\t\tManager manager = new Manager();\n\t\t\t\t\n\t\t\t\tLogonHelper logonHelper = new LogonHelper();\n\t\t\t\tLogonHelper spyLogonHelper = spy(logonHelper);\n\t\t\t\tdoReturn(authCookie).when(spyLogonHelper).loginToGoogleAppEngine(userid, password, source);\n\t\t\t\tmanager.logonHelper = spyLogonHelper;\n\t\t\t\t\n\t\t\t\tDefaultHttpClient client = new DefaultHttpClient();\n\t\t\t\tDefaultHttpClient spyClient = spy(client);\n\t\t\t\tHttpGet get = new HttpGet(url);\n\t\t\t\tget.setHeader(\"Cookie\", cookie);\n\t\t\t\tHttpResponse response = new HttpResponse();\n\t\t\t\tdoReturn(response).when(spyClient).execute(get);\n\t\t\t\tmanager.client = spyClient;\n\t\t\t\t\n\t\t\t\tQuotaDetailsParser quotaDetailsParser = new QuotaDetailsParser();\n\t\t\t\tQuotaDetailsParser spyQuotaDetailsParser = spy(quotaDetailsParser);\n\t\t\t\tdoReturn(quotaDetails).when(spyQuotaDetailsParser).parse(response.getEntity().getContent());\n\t\t\t\tmanager.quotaDetailsParser = spyQuotaDetailsParser;\n\t\t\t\t\n\t\t\t\tQuotaDetails result = manager.retrieveAppQuotaDetails(userid, password, source, application);\n\t\t\t\t\n\t\t\t\tassertEquals(quotaDetails, result);\n\t\t\t\tverify(spyLogonHelper).loginToGoogleAppEngine(userid, password, source);\n\t\t\t\tverify(spyClient).execute(get);\n\t\t\t\tverify(spyQuotaDetailsParser).parse(response.getEntity().getContent());\n\t\t}\n}\n\n// QuotaDetails.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Google App Engine application quota details.\n *\n * @author Alois Belaska\n */\npublic class QuotaDetails {\n\n    private List<Quota> quotas = new ArrayList<Quota>();\n\n    public List<Quota> getQuotas() {\n        return quotas;\n    }\n\n    public void setQuotas(List<Quota> quotas) {\n        this.quotas = quotas;\n    }\n}\n\n// QuotaDetailsParser.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\n\n/**\n * Google App Engine application quota details parser.\n *\n * @author Alois Belaska\n */\npublic class QuotaDetailsParser {\n\n    public QuotaDetails parse(InputStream is) throws ParserConfigurationException, SAXException, IOException {\n        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n        DocumentBuilder db = dbf.newDocumentBuilder();\n        Document doc = db.parse(is);\n        doc.getDocumentElement().normalize();\n        QuotaDetails quotaDetails = new QuotaDetails();\n        List<Quota> quotas = new ArrayList<Quota>();\n        NodeList nodeLst = doc.getElementsByTagName(\"tr\");\n        for (int s = 0; s < nodeLst.getLength(); s++) {\n            Node fstNode = nodeLst.item(s);\n            if (fstNode.getNodeType() == Node.ELEMENT_NODE) {\n                Element fstElmnt = (Element) fstNode;\n                NodeList fstNmElmntLst = fstElmnt.getElementsByTagName(\"td\");\n                Element fstNmElmnt = (Element) fstNmElmntLst.item(0);\n                NodeList fstNm = fstNmElmnt.getChildNodes();\n                String name = ((Node) fstNm.item(0)).getNodeValue();\n                Element lstNmElmnt = (Element) fstNmElmntLst.item(1);\n                NodeList lstNm = lstNmElmnt.getChildNodes();\n                String value = ((Node) lstNm.item(0)).getNodeValue();\n                Quota quota = new Quota();\n                quota.setName(name);\n                quota.setValue(value);\n                quotas.add(quota);\n            }\n        }\n        quotaDetails.setQuotas(quotas);\n        return quotaDetails;\n    }\n}\n\n// Quota.java\npackage net.sf.gaeappmanager.google.appengine;\n\n/**\n * Google App Engine application quota.\n *\n * @author Alois Belaska\n */\npublic class Quota {\n\n    private String name;\n    private String value;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getValue() {\n        return value;\n    }\n\n    public void setValue(String value) {\n        this.value = value;\n    }\n}\n\n// LogonHelper.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\n\n/**\n * Google App Engine application logon helper.\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    public String loginToGoogleAppEngine(String userid, String password, String source) throws IOException, ParserConfigurationException, SAXException {\n        HttpClient client = new DefaultHttpClient();\n        HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n        List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(3);\n        nameValuePairs.add(new BasicNameValuePair(\"Email\", userid));\n        nameValuePairs.add(new BasicNameValuePair(\"Passwd\", password));\n        nameValuePairs.add(new BasicNameValuePair(\"source\", source));\n        nameValuePairs.add(new BasicNameValuePair(\"service\", \"ah\"));\n        post.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n        HttpResponse response = client.execute(post);\n        InputStream is = response.getEntity().getContent();\n        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n        DocumentBuilder db = dbf.newDocumentBuilder();\n        Document doc = db.parse(is);\n        doc.getDocumentElement().normalize();\n        NodeList nodeLst = doc.getElementsByTagName(\"Auth\");\n        Node fstNode = nodeLst.item(0);\n        String authCookie = fstNode.getTextContent();\n        return authCookie;\n    }\n}",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 459,
        "completion_tokens": 2156,
        "total_tokens": 2615
    },
    "time_taken": 43.628917932510376,
    "prompt_id": "/EvoSuiteBenchmark/scenario1/67_gae-app-manager/src/main/java/net/sf/gaeappmanager/google/appengine/Manager.java",
    "original_code": "// Manager.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport net.sf.gaeappmanager.google.LogonHelper;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\n\n/**\n * Google App Engine application manager.\n *\n * @author Alois Belaska\n */\npublic class Manager {\n\n    public static QuotaDetails retrieveAppQuotaDetails(String userid, String password, String source, String application) throws Exception {\n        String authCookie = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            HttpGet get = new HttpGet(\"https://appengine.google.com/dashboard/quotadetails?&app_id=\" + application);\n            get.setHeader(\"Cookie\", \"ACSID=\" + authCookie);\n            HttpResponse response = client.execute(get);\n            return new QuotaDetailsParser().parse(response.getEntity().getContent());\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n}\n",
    "test_prompt": "// ManagerTest.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport net.sf.gaeappmanager.google.LogonHelper;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Manager}.\n* It contains ten unit test cases for the {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n*/\nclass ManagerTest {"
}
]