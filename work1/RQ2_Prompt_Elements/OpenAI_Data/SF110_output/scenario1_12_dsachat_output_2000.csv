ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wlX5mhbHcJV7MJuOKlOLJzy6zLUD,/EvoSuiteBenchmark/scenario1/12_dsachat/src/main/java/dsachat/gm/gui/InternalGmHeroFrame.java,79.10430073738098,length,"// InternalGmHeroFrame.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;

/**
 * this displays the heros or the enemies
 * it can send challenges or challenge requests.
 *
 * @author bernshausen
 */
public class InternalGmHeroFrame extends JInternalFrame implements TreeSelectionListener {

    public boolean silent() {
        return false;
    }
}
","// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains ten unit test cases for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {","// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains ten unit test cases for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {

	/**
	* Test case for {@link InternalGmHeroFrame#silent()}.
	* It tests if the method returns false.
	*/
	@Test
	void testSilent() {
		InternalGmHeroFrame internalGmHeroFrame = new InternalGmHeroFrame();
		assertFalse(internalGmHeroFrame.silent());
	}
}

// InternalGmHeroFrame.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;

/**
 * this displays the heros or the enemies
 * it can send challenges or challenge requests.
 *
 * @author bernshausen
 */
public class InternalGmHeroFrame extends JInternalFrame implements TreeSelectionListener {

    public boolean silent() {
        return false;
    }
}

// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains ten unit test cases for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {
		
	/**
	* Test case for {@link InternalGmHeroFrame#silent()}.
	* It tests if the method returns false.
	*/
	@Test
	void testSilent() {
		InternalGmHeroFrame internalGmHeroFrame = new InternalGmHeroFrame();
		assertFalse(internalGmHeroFrame.silent());
	}
}

// InternalGmHeroFrame.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;

/**
 * this displays the heros or the enemies
 * it can send challenges or challenge requests.
 *
 * @author bernshausen
 */
public class InternalGmHeroFrame extends JInternalFrame implements TreeSelectionListener {

    public boolean silent() {
        return false;
    }
}

// InternalGmHeroFrameTest.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link InternalGmHeroFrame}.
* It contains ten unit test cases for the {@link InternalGmHeroFrame#silent()} method.
*/
class InternalGmHeroFrameTest {
		
	/**
	* Test case for {@link InternalGmHeroFrame#silent()}.
	* It tests if the method returns false.
	*/
	@Test
	void testSilent() {
		InternalGmHeroFrame internalGmHeroFrame = new InternalGmHeroFrame();
		assertFalse(internalGmHeroFrame.silent());
	}
}

// InternalGmHeroFrame.java
package dsachat.gm.gui;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTree;
import javax.swing"
cmpl-6wlYMwbDk1b2QwFPp2wsbwg2oz2yU,/EvoSuiteBenchmark/scenario1/12_dsachat/src/main/java/dsachat/share/Challenge0.java,70.18402647972107,length,"// Challenge.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;

/**
 * This class represents a challenge.<br>
 * It is created by a client and sent to the server which executes the internal task.
 * <br>
 * A challenge can be a talent, spell, attribute or weapon.
 *
 * @author bernshausen
 */
public class Challenge implements Serializable {

    public String roll() {
        if (t != null)
            return rollTalent();
        if (attrib != null)
            return rollAttr();
        if (w != null) {
            return rollFight();
        }
        return "" missing Talent, Spell, ..."";
    }
}
","// ChallengeTest.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains ten unit test cases for the {@link Challenge#roll()} method.
*/
class ChallengeTest {","// ChallengeTest.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains ten unit test cases for the {@link Challenge#roll()} method.
*/
class ChallengeTest {

		/**
		 * Test case for {@link Challenge#roll()}
		 * <br>
		 * This test case tests the roll of a talent.
		 * <br>
		 * The test case is successful if the result is a string containing the talent name and the result of the roll.
		 */
		@Test
		void testRollTalent() {
				Hero h = new Hero();
				h.setName(""Testhero"");
				h.setRace(""Mensch"");
				h.setProfession(""Krieger"");
				h.setAttribute(""MU"", 10);
				h.setAttribute(""KL"", 10);
				h.setAttribute(""IN"", 10);
				h.setAttribute(""CH"", 10);
				h.setAttribute(""FF"", 10);
				h.setAttribute(""GE"", 10);
				h.setAttribute(""KO"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""LE"", 10);
				h.setAttribute(""AE"", 10);
				h.setAttribute(""MR"", 10);
				h.setAttribute(""RS"", 10);
				h.setAttribute(""SO"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""GS"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h.setAttribute(""KK"", 10);
				h"
cmpl-6wlZVxzCtNxifFIXWHjgaLVgnxWeD,/EvoSuiteBenchmark/scenario1/12_dsachat/src/main/java/dsachat/share/Challenge1.java,37.32112503051758,stop,"// Challenge.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;

/**
 * This class represents a challenge.<br>
 * It is created by a client and sent to the server which executes the internal task.
 * <br>
 * A challenge can be a talent, spell, attribute or weapon.
 *
 * @author bernshausen
 */
public class Challenge implements Serializable {

    public static int dice(int sides) {
        int ret = -1;
        ret = (int) Math.rint((Math.random() * sides)) % sides + 1;
        return ret;
    }
}
","// ChallengeTest.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains ten unit test cases for the {@link Challenge#dice(int)} method.
*/
class ChallengeTest {","// ChallengeTest.java
package dsachat.share;

import java.io.Serializable;
import java.util.Vector;
import dsachat.share.hero.Hero;
import dsachat.share.hero.Talent;
import dsachat.share.hero.Weapon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Challenge}.
* It contains ten unit test cases for the {@link Challenge#dice(int)} method.
*/
class ChallengeTest {

	/**
	 * Test of dice method, of class Challenge.
	 */
	@Test
	public void testDice() {
		System.out.println(""dice"");
		int sides = 0;
		int expResult = 0;
		int result = Challenge.dice(sides);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
	/**
	 * Test of dice method, of class Challenge.
	 */
	@Test
	public void testDice2() {
		System.out.println(""dice"");
		int sides = 0;
		int expResult = 0;
		int result = Challenge.dice(sides);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
	/**
	 * Test of dice method, of class Challenge.
	 */
	@Test
	public void testDice3() {
		System.out.println(""dice"");
		int sides = 0;
		int expResult = 0;
		int result = Challenge.dice(sides);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
	/**
	 * Test of dice method, of class Challenge.
	 */
	@Test
	public void testDice4() {
		System.out.println(""dice"");
		int sides = 0;
		int expResult = 0;
		int result = Challenge.dice(sides);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
	/**
	 * Test of dice method, of class Challenge.
	 */
	@Test
	public void testDice5() {
		System.out.println(""dice"");
		int sides = 0;
		int expResult = 0;
		int result = Challenge.dice(sides);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
	/**
	 * Test of dice method, of class Challenge.
	 */
	@Test
	public void testDice6() {
		System.out.println(""dice"");
		int sides = 0;
		int expResult = 0;
		int result = Challenge.dice(sides);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
	/**
	 * Test of dice method, of class Challenge.
	 */
	@Test
	public void testDice7() {
		System.out.println(""dice"");
		int sides = 0;
		int expResult = 0;
		int result = Challenge.dice(sides);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
	/**
	 * Test of dice method, of class Challenge.
	 */
	@Test
	public void testDice8() {
		System.out.println(""dice"");
		int sides = 0;
		int expResult = 0;
		int result = Challenge.dice(sides);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
	/**
	 * Test of dice method, of class Challenge.
	 */
	@Test
	public void testDice9() {
		System.out.println(""dice"");
		int sides = 0;
		int expResult = 0;
		int result = Challenge.dice(sides);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
	/**
	 * Test of dice method, of class Challenge.
	 */
	@Test
	public void testDice10() {
		System.out.println(""dice"");
		int sides = 0;
		int expResult = 0;
		int result = Challenge.dice(sides);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
}"
cmpl-6wlaYlNtvCYz8vqikFcOfJRDXok0P,/EvoSuiteBenchmark/scenario1/12_dsachat/src/main/java/dsachat/share/hero/Hero.java,34.84057378768921,stop,"// Hero.java
package dsachat.share.hero;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;
import org.dom4j.Document;
import org.dom4j.Element;

/**
 * a Hero describes all attributes, talents, spells and weapons of an hero.
 *
 * @author bernshausen
 */
public class Hero implements Serializable {

    public int getAttrValue(String shortcut) {
        for (int i = 0; i < attributes.size(); i++) {
            if (attributes.elementAt(i).getShortcut().equals(shortcut)) {
                return attributes.elementAt(i).getValue();
            }
        }
        return -1;
    }
}
","// HeroTest.java
package dsachat.share.hero;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;
import org.dom4j.Document;
import org.dom4j.Element;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Hero}.
* It contains ten unit test cases for the {@link Hero#getAttrValue(String)} method.
*/
class HeroTest {","// HeroTest.java
package dsachat.share.hero;

import java.io.Serializable;
import java.util.Iterator;
import java.util.Vector;
import org.dom4j.Document;
import org.dom4j.Element;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Hero}.
* It contains ten unit test cases for the {@link Hero#getAttrValue(String)} method.
*/
class HeroTest {

	/**
	* Test case for {@link Hero#getAttrValue(String)}.
	* It tests if the method returns the correct value for the attribute ""MU"".
	*/
	@Test
	void testGetAttrValueMU() {
		Hero hero = new Hero();
		hero.attributes = new Vector<Attribute>();
		Attribute mu = new Attribute();
		mu.setShortcut(""MU"");
		mu.setValue(10);
		hero.attributes.add(mu);
		assertEquals(10, hero.getAttrValue(""MU""));
	}
	
	/**
	* Test case for {@link Hero#getAttrValue(String)}.
	* It tests if the method returns the correct value for the attribute ""KL"".
	*/
	@Test
	void testGetAttrValueKL() {
		Hero hero = new Hero();
		hero.attributes = new Vector<Attribute>();
		Attribute kl = new Attribute();
		kl.setShortcut(""KL"");
		kl.setValue(10);
		hero.attributes.add(kl);
		assertEquals(10, hero.getAttrValue(""KL""));
	}
	
	/**
	* Test case for {@link Hero#getAttrValue(String)}.
	* It tests if the method returns the correct value for the attribute ""IN"".
	*/
	@Test
	void testGetAttrValueIN() {
		Hero hero = new Hero();
		hero.attributes = new Vector<Attribute>();
		Attribute in = new Attribute();
		in.setShortcut(""IN"");
		in.setValue(10);
		hero.attributes.add(in);
		assertEquals(10, hero.getAttrValue(""IN""));
	}
	
	/**
	* Test case for {@link Hero#getAttrValue(String)}.
	* It tests if the method returns the correct value for the attribute ""CH"".
	*/
	@Test
	void testGetAttrValueCH() {
		Hero hero = new Hero();
		hero.attributes = new Vector<Attribute>();
		Attribute ch = new Attribute();
		ch.setShortcut(""CH"");
		ch.setValue(10);
		hero.attributes.add(ch);
		assertEquals(10, hero.getAttrValue(""CH""));
	}
	
	/**
	* Test case for {@link Hero#getAttrValue(String)}.
	* It tests if the method returns the correct value for the attribute ""FF"".
	*/
	@Test
	void testGetAttrValueFF() {
		Hero hero = new Hero();
		hero.attributes = new Vector<Attribute>();
		Attribute ff = new Attribute();
		ff.setShortcut(""FF"");
		ff.setValue(10);
		hero.attributes.add(ff);
		assertEquals(10, hero.getAttrValue(""FF""));
	}
	
	/**
	* Test case for {@link Hero#getAttrValue(String)}.
	* It tests if the method returns the correct value for the attribute ""GE"".
	*/
	@Test
	void testGetAttrValueGE() {
		Hero hero = new Hero();
		hero.attributes = new Vector<Attribute>();
		Attribute ge = new Attribute();
		ge.setShortcut(""GE"");
		ge.setValue(10);
		hero.attributes.add(ge);
		assertEquals(10, hero.getAttrValue(""GE""));
	}
	
	/**
	* Test case for {@link Hero#getAttrValue(String)}.
	* It tests if the method returns the correct value for the attribute ""KO"".
	*/
	@Test
	void testGetAttrValueKO() {
		Hero hero = new Hero();
		hero.attributes = new Vector<Attribute>();
		Attribute ko = new Attribute();
		ko.setShortcut(""KO"");
		ko.setValue(10);
		hero.attributes.add(ko);
		assertEquals(10, hero.getAttrValue(""KO""));
	}
	
	/**
	* Test case for {@link Hero#getAttrValue(String)}.
	* It tests if the method returns the correct value for the attribute ""KK"".
	*/
	@Test
	void testGetAttrValueKK() {
		Hero hero = new Hero();
		hero.attributes = new Vector<Attribute>();
		Attribute kk = new Attribute();
		kk.setShortcut(""KK"");
		kk.setValue(10);
		hero.attributes.add(kk);
		assertEquals(10, hero.getAttrValue(""KK""));
	}
	
	/**
	* Test case for {@link Hero#getAttrValue(String)}.
	* It tests if the method returns the correct value for the attribute ""SO"".
	*/
	@Test
	void testGetAttrValueSO() {
		Hero hero = new Hero();
		hero.attributes = new Vector<Attribute>();
		Attribute so = new Attribute();
		so.setShortcut(""SO"");
		so.setValue(10);
		hero.attributes.add(so);
		assertEquals(10, hero.getAttrValue(""SO""));
	}
	
	/**
	* Test case for {@link Hero#getAttrValue(String)}.
	* It tests if the method returns the correct value for the attribute ""IN"".
	*/
	@Test
	void testGetAttrValueIN2() {
		Hero hero = new Hero();
		hero.attributes = new Vector<Attribute>();
		Attribute in = new Attribute();
		in.setShortcut(""IN"");
		in.setValue(10);
		hero.attributes.add(in);
		assertEquals(10, hero.getAttrValue(""IN""));
	}
}"
