ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wjJuwUbqDE9lMFsrMLYtWUYwRzl6,/EvoSuiteBenchmark/scenario3/29_apbsmem/src/main/java/apbs_mem_gui/FileEditor0.java,54.969860792160034,length,"// FileEditor.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;

public class FileEditor {

    /**
     * Extract energy from the final APBS output file.
     *
     * @param filename Path to APBS output file.
     * @return String array of total energies in kilojoules, kilocalories and k_BT
     */
    public String[] getEnergy(String filename);
}
","// FileEditorTest.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEditor}.
* It contains ten unit test cases for the {@link FileEditor#getEnergy(String)} method.
*/
class FileEditorTest {","// FileEditorTest.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEditor}.
* It contains ten unit test cases for the {@link FileEditor#getEnergy(String)} method.
*/
class FileEditorTest {

	/**
	 * Test case for {@link FileEditor#getEnergy(String)} method.
	 * It tests the method with a valid APBS output file.
	 */
	@Test
	void testGetEnergy() {
		FileEditor fe = new FileEditor();
		String[] energy = fe.getEnergy(""test/test_files/test_output.out"");
		assertEquals(""-0.0012"", energy[0]);
		assertEquals(""-0.0003"", energy[1]);
		assertEquals(""-0.0015"", energy[2]);
	}
}

// FileEditor.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;

public class FileEditor {

    /**
     * Extract energy from the final APBS output file.
     *
     * @param filename Path to APBS output file.
     * @return String array of total energies in kilojoules, kilocalories and k_BT
     */
    public String[] getEnergy(String filename) {
        String[] energy = new String[3];
        try {
            File file = new File(filename);
            Scanner sc = new Scanner(file);
            while (sc.hasNextLine()) {
                String line = sc.nextLine();
                if (line.contains(""Total energy"")) {
                    String[] split = line.split(""\\s+"");
                    energy[0] = split[3];
                    energy[1] = split[5];
                    energy[2] = split[7];
                }
            }
            sc.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        return energy;
    }
}

// FileEditorTest.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEditor}.
* It contains ten unit test cases for the {@link FileEditor#getEnergy(String)} method.
*/
class FileEditorTest {
		
	/**
	 * Test case for {@link FileEditor#getEnergy(String)} method.
	 * It tests the method with a valid APBS output file.
	 */
	@Test
	void testGetEnergy() {
		FileEditor fe = new FileEditor();
		String[] energy = fe.getEnergy(""test/test_files/test_output.out"");
		assertEquals(""-0.0012"", energy[0]);
		assertEquals(""-0.0003"", energy[1]);
		assertEquals(""-0.0015"", energy[2]);
	}
	
	/**
	 * Test case for {@link FileEditor#getEnergy(String)} method.
	 * It tests the method with a valid APBS output file.
	 */
	@Test
	void testGetEnergy2() {
		FileEditor fe = new FileEditor();
		String[] energy = fe.getEnergy(""test/test_files/test_output2.out"");
		assertEquals(""-0.0012"", energy[0]);
		assertEquals(""-0.0003"", energy[1]);
		assertEquals(""-0.0015"", energy[2]);
	}
	
	/**
	 * Test case for {@link FileEditor#getEnergy(String)} method.
	 * It tests the method with a valid APBS output file.
	 */
	@Test
	void testGetEnergy3() {
		FileEditor fe = new FileEditor();
		String[] energy = fe.getEnergy(""test/test_files/test_output3.out"");
		assertEquals(""-0.0012"", energy[0]);
		assertEquals(""-0.0003"", energy[1]);
		assertEquals(""-0.0015"", energy[2]);
	}
	
	/**
	 * Test case for {@link FileEditor#getEnergy(String)} method.
	 * It tests the method with a valid APBS output file.
	 */
	@Test
	void testGetEnergy4() {
		FileEditor fe = new FileEditor();
		String[] energy = fe.getEnergy(""test/test_files/test_output4.out"");
		assertEquals(""-0.0012"", energy[0]);
		assertEquals(""-0.0003"", energy[1]);
		assertEquals(""-0.0015"", energy[2]);
	}
	
	/**
	 * Test case for {@link FileEditor#getEnergy(String)} method.
	 * It tests the method with a valid APBS output file.
	 */
	@Test
	void testGetEnergy5() {
		FileEditor fe = new FileEditor();
		String[] energy = fe.getEnergy(""test/test_files/test_output5.out"");
		assertEquals(""-0.0012"", energy[0]);
		assertEquals(""-0.0003"", energy[1]);
		assertEquals(""-0.0015"", energy[2]);
	}
	
	/**
	 * Test case for {@link FileEditor#getEnergy(String)} method.
	 * It tests the method with a valid APBS output file.
	 */
	@Test
	void testGetEnergy6() {
		FileEditor fe = new FileEditor();
		String[] energy = fe.getEnergy(""test/test_files/test_output6.out"");
		assertEquals(""-0.0012"", energy[0]);
		assertEquals(""-0.0003"", energy[1]);
		assertEquals(""-0.0015"", energy[2]);
	}
	
	/**
	 * Test case for {@link FileEditor#getEnergy(String)} method.
	 * It tests the method with a valid APBS output file.
	 */
	@Test
	void testGetEnergy7() {
		FileEditor fe = new FileEditor();
		String[] energy = fe.getEnergy(""test/test_files/test_output7.out"");
		assertEquals(""-0.0012"", energy[0]);
		assertEquals(""-0.0003"", energy[1]);
		assertEquals(""-0.0015"", energy[2]);
	}
	
	/**
	 * Test case for {@link FileEditor#getEnergy(String)} method.
	 * It tests the method with a valid APBS output file.
	 */
	@Test
	void testGetEnergy8() {
		FileEditor fe = new FileEditor();
		String[] energy = fe.getEnergy(""test/test_files/test_output8.out"");
		assertEquals(""-0.0012"", energy[0]);
		assertEquals(""-0.0003"", energy[1]);
		assertEquals(""-0.0015"", energy[2]);
	}
	
	/**
	 * Test case for {@link FileEditor#getEnergy(String)} method.
	 * It tests the method with a valid APBS output file.
	 */
	@Test
	void testGetEnergy9() {
		FileEditor fe = new FileEditor();
		String[] energy = fe.getEnergy(""test/test_files/test_output9.out"");
		assertEquals(""-0.0012"", energy[0]);
		assertEquals(""-0.0003"", energy[1]);
		assertEquals(""-0.0015"", energy[2]);
	}
	
	/**
	 * Test case for {@link FileEditor#getEnergy(String)} method.
	 * It tests the method with a valid APBS output file.
	 */
	@Test
	void testGetEnergy10() {
		FileEditor fe = new FileEditor();
		String[] energy = fe.getEnergy(""test/test_files/test_output10.out"");
		assertEquals(""-0.0012"", energy[0]);
		assertEquals(""-0.0003"", energy[1]);
		assertEquals("""
cmpl-6wjKxF2OyaNlLpd9v7HeUbY1Fl7qb,/EvoSuiteBenchmark/scenario3/29_apbsmem/src/main/java/apbs_mem_gui/FileEditor1.java,92.76557660102844,stop,"// FileEditor.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;

public class FileEditor {

    /**
     * Extract the energy from a calculation that has summed the component atom energies
     * rather than simply taking the total. (pull_comps.c)
     *
     * @param filename Path to the file written by pull_comps with the energy sum.
     * @return a double array of the total energy of each calculation (up to 6 calculations if there are 3 focus levels).
     */
    public double[] getCompEnergy(String filename);
}
","// FileEditorTest.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEditor}.
* It contains ten unit test cases for the {@link FileEditor#getCompEnergy(String)} method.
*/
class FileEditorTest {","// FileEditorTest.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEditor}.
* It contains ten unit test cases for the {@link FileEditor#getCompEnergy(String)} method.
*/
class FileEditorTest {

	/**
	 * Test of getCompEnergy method, of class FileEditor.
	 * This test case is for a file with a single energy value.
	 */
	@Test
	public void testGetCompEnergy_1() {
		System.out.println(""getCompEnergy_1"");
		String filename = ""test/test_files/test_getCompEnergy_1.txt"";
		FileEditor instance = new FileEditor();
		double[] expResult = {-0.0};
		double[] result = instance.getCompEnergy(filename);
		assertArrayEquals(expResult, result, 0.0);
	}
	
	/**
	 * Test of getCompEnergy method, of class FileEditor.
	 * This test case is for a file with two energy values.
	 */
	@Test
	public void testGetCompEnergy_2() {
		System.out.println(""getCompEnergy_2"");
		String filename = ""test/test_files/test_getCompEnergy_2.txt"";
		FileEditor instance = new FileEditor();
		double[] expResult = {-0.0, -0.0};
		double[] result = instance.getCompEnergy(filename);
		assertArrayEquals(expResult, result, 0.0);
	}
	
	/**
	 * Test of getCompEnergy method, of class FileEditor.
	 * This test case is for a file with three energy values.
	 */
	@Test
	public void testGetCompEnergy_3() {
		System.out.println(""getCompEnergy_3"");
		String filename = ""test/test_files/test_getCompEnergy_3.txt"";
		FileEditor instance = new FileEditor();
		double[] expResult = {-0.0, -0.0, -0.0};
		double[] result = instance.getCompEnergy(filename);
		assertArrayEquals(expResult, result, 0.0);
	}
	
	/**
	 * Test of getCompEnergy method, of class FileEditor.
	 * This test case is for a file with four energy values.
	 */
	@Test
	public void testGetCompEnergy_4() {
		System.out.println(""getCompEnergy_4"");
		String filename = ""test/test_files/test_getCompEnergy_4.txt"";
		FileEditor instance = new FileEditor();
		double[] expResult = {-0.0, -0.0, -0.0, -0.0};
		double[] result = instance.getCompEnergy(filename);
		assertArrayEquals(expResult, result, 0.0);
	}
	
	/**
	 * Test of getCompEnergy method, of class FileEditor.
	 * This test case is for a file with five energy values.
	 */
	@Test
	public void testGetCompEnergy_5() {
		System.out.println(""getCompEnergy_5"");
		String filename = ""test/test_files/test_getCompEnergy_5.txt"";
		FileEditor instance = new FileEditor();
		double[] expResult = {-0.0, -0.0, -0.0, -0.0, -0.0};
		double[] result = instance.getCompEnergy(filename);
		assertArrayEquals(expResult, result, 0.0);
	}
	
	/**
	 * Test of getCompEnergy method, of class FileEditor.
	 * This test case is for a file with six energy values.
	 */
	@Test
	public void testGetCompEnergy_6() {
		System.out.println(""getCompEnergy_6"");
		String filename = ""test/test_files/test_getCompEnergy_6.txt"";
		FileEditor instance = new FileEditor();
		double[] expResult = {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0};
		double[] result = instance.getCompEnergy(filename);
		assertArrayEquals(expResult, result, 0.0);
	}
	
	/**
	 * Test of getCompEnergy method, of class FileEditor.
	 * This test case is for a file with seven energy values.
	 */
	@Test
	public void testGetCompEnergy_7() {
		System.out.println(""getCompEnergy_7"");
		String filename = ""test/test_files/test_getCompEnergy_7.txt"";
		FileEditor instance = new FileEditor();
		double[] expResult = {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0};
		double[] result = instance.getCompEnergy(filename);
		assertArrayEquals(expResult, result, 0.0);
	}
	
	/**
	 * Test of getCompEnergy method, of class FileEditor.
	 * This test case is for a file with eight energy values.
	 */
	@Test
	public void testGetCompEnergy_8() {
		System.out.println(""getCompEnergy_8"");
		String filename = ""test/test_files/test_getCompEnergy_8.txt"";
		FileEditor instance = new FileEditor();
		double[] expResult = {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0};
		double[] result = instance.getCompEnergy(filename);
		assertArrayEquals(expResult, result, 0.0);
	}
	
	/**
	 * Test of getCompEnergy method, of class FileEditor.
	 * This test case is for a file with nine energy values.
	 */
	@Test
	public void testGetCompEnergy_9() {
		System.out.println(""getCompEnergy_9"");
		String filename = ""test/test_files/test_getCompEnergy_9.txt"";
		FileEditor instance = new FileEditor();
		double[] expResult = {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0};
		double[] result = instance.getCompEnergy(filename);
		assertArrayEquals(expResult, result, 0.0);
	}
	
	/**
	 * Test of getCompEnergy method, of class FileEditor.
	 * This test case is for a file with ten energy values.
	 */
	@Test
	public void testGetCompEnergy_10() {
		System.out.println(""getCompEnergy_10"");
		String filename = ""test/test_files/test_getCompEnergy_10.txt"";
		FileEditor instance = new FileEditor();
		double[] expResult = {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0};
		double[] result = instance.getCompEnergy(filename);
		assertArrayEquals(expResult, result, 0.0);
	}
}"
cmpl-6wjMRqxu5tJoE6vvjscgybgjGXlEs,/EvoSuiteBenchmark/scenario3/29_apbsmem/src/main/java/apbs_mem_gui/Main.java,37.23866415023804,stop,"// Main.java
package apbs_mem_gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;
import com.jgoodies.forms.layout.*;
import com.jgoodies.forms.builder.*;
import org.jmol.api.JmolViewer;
import org.jmol.api.JmolAdapter;
import org.jmol.popup.JmolPopup;

/**
 * @author Keith Callenberg, Gabriel de Forest
 */
public class Main {

    /**
     * Store the current GUI text field values in the inFile object.
     *
     * @return True if the operation was succesful, false otherwise.
     */
    public boolean SaveData();
}
","// MainTest.java
package apbs_mem_gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;
import com.jgoodies.forms.layout.*;
import com.jgoodies.forms.builder.*;
import org.jmol.api.JmolViewer;
import org.jmol.api.JmolAdapter;
import org.jmol.popup.JmolPopup;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#SaveData()} method.
*/
class MainTest {","// MainTest.java
package apbs_mem_gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;
import com.jgoodies.forms.layout.*;
import com.jgoodies.forms.builder.*;
import org.jmol.api.JmolViewer;
import org.jmol.api.JmolAdapter;
import org.jmol.popup.JmolPopup;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#SaveData()} method.
*/
class MainTest {

	/**
	 * Test case for {@link Main#SaveData()} method.
	 * This test case checks if the method returns true when the operation is successful.
	 */
	@Test
	void testSaveData_1() {
		Main main = new Main();
		assertTrue(main.SaveData());
	}
	
	/**
	 * Test case for {@link Main#SaveData()} method.
	 * This test case checks if the method returns false when the operation is not successful.
	 */
	@Test
	void testSaveData_2() {
		Main main = new Main();
		assertFalse(main.SaveData());
	}
	
	/**
	 * Test case for {@link Main#SaveData()} method.
	 * This test case checks if the method returns true when the operation is successful.
	 */
	@Test
	void testSaveData_3() {
		Main main = new Main();
		assertTrue(main.SaveData());
	}
	
	/**
	 * Test case for {@link Main#SaveData()} method.
	 * This test case checks if the method returns false when the operation is not successful.
	 */
	@Test
	void testSaveData_4() {
		Main main = new Main();
		assertFalse(main.SaveData());
	}
	
	/**
	 * Test case for {@link Main#SaveData()} method.
	 * This test case checks if the method returns true when the operation is successful.
	 */
	@Test
	void testSaveData_5() {
		Main main = new Main();
		assertTrue(main.SaveData());
	}
	
	/**
	 * Test case for {@link Main#SaveData()} method.
	 * This test case checks if the method returns false when the operation is not successful.
	 */
	@Test
	void testSaveData_6() {
		Main main = new Main();
		assertFalse(main.SaveData());
	}
	
	/**
	 * Test case for {@link Main#SaveData()} method.
	 * This test case checks if the method returns true when the operation is successful.
	 */
	@Test
	void testSaveData_7() {
		Main main = new Main();
		assertTrue(main.SaveData());
	}
	
	/**
	 * Test case for {@link Main#SaveData()} method.
	 * This test case checks if the method returns false when the operation is not successful.
	 */
	@Test
	void testSaveData_8() {
		Main main = new Main();
		assertFalse(main.SaveData());
	}
	
	/**
	 * Test case for {@link Main#SaveData()} method.
	 * This test case checks if the method returns true when the operation is successful.
	 */
	@Test
	void testSaveData_9() {
		Main main = new Main();
		assertTrue(main.SaveData());
	}
	
	/**
	 * Test case for {@link Main#SaveData()} method.
	 * This test case checks if the method returns false when the operation is not successful.
	 */
	@Test
	void testSaveData_10() {
		Main main = new Main();
		assertFalse(main.SaveData());
	}
}"
cmpl-6wjNU1y50V3doAAcGJNnf9BJ7JDNL,/EvoSuiteBenchmark/scenario3/29_apbsmem/src/main/java/jahuwaldt/plot/ContourGenerator.java,96.58686327934265,length,"// ContourGenerator.java
package jahuwaldt.plot;

import java.util.*;

/**
 *  <p> An object used to generate a list of contour lines
 *      or paths from a set of gridded three dimensional data.
 *  </p>
 *
 *  <p> Based on contour_plot.c from NeXTcontour1.4 by Thomas H. Pulliam,
 *      pulliam@rft29.nas.nasa.gov, MS 202A-1 NASA Ames Research Center,
 *      Moffett Field, CA 94035.
 *      I don't know how the original Fortran code looked like or where it came from,
 *      other than that NeXTcontour1.4 is based on Pieter Bunings' PLOT3D package
 *      for Computational Fluid Dynamics.
 *  </p>
 *
 *  <p> Ported from C to Java by Joseph A. Huwaldt, November 16, 2000.  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  November 11, 2000
 * @version November 23, 2000
 */
public class ContourGenerator {

    /**
     *  Returns true if the contour generation process is done.  False if it is not.
     */
    public boolean done();
}
","// ContourGeneratorTest.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourGenerator}.
* It contains ten unit test cases for the {@link ContourGenerator#done()} method.
*/
class ContourGeneratorTest {","// ContourGeneratorTest.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourGenerator}.
* It contains ten unit test cases for the {@link ContourGenerator#done()} method.
*/
class ContourGeneratorTest {

	/**
	* Test case for the {@link ContourGenerator#done()} method.
	*/
	@Test
	public void testDone() {
		ContourGenerator generator = new ContourGenerator();
		assertTrue(generator.done());
	}
}

// ContourPath.java
package jahuwaldt.plot;

import java.util.*;

/**
 *  <p> A class that represents a contour path.  A contour path is a
 *      list of points that form a closed path.  The path may be
 *      either a line or a filled area.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  November 11, 2000
 * @version November 23, 2000
 */
public class ContourPath {

    /**
     *  Returns true if this contour path is a filled area.
     *  False if it is a line.
     */
    public boolean isFilled();
}

// ContourPathTest.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourPath}.
* It contains ten unit test cases for the {@link ContourPath#isFilled()} method.
*/
class ContourPathTest {
		
	/**
	* Test case for the {@link ContourPath#isFilled()} method.
	*/
	@Test
	public void testIsFilled() {
		ContourPath path = new ContourPath();
		assertTrue(path.isFilled());
	}
}

// ContourPlot.java
package jahuwaldt.plot;

import java.util.*;

/**
 *  <p> A class that represents a contour plot.  A contour plot is a
 *      list of contour paths.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  November 11, 2000
 * @version November 23, 2000
 */
public class ContourPlot {

    /**
     *  Returns the number of contour paths in this contour plot.
     */
    public int getNumPaths();
}

// ContourPlotTest.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourPlot}.
* It contains ten unit test cases for the {@link ContourPlot#getNumPaths()} method.
*/
class ContourPlotTest {
		
	/**
	* Test case for the {@link ContourPlot#getNumPaths()} method.
	*/
	@Test
	public void testGetNumPaths() {
		ContourPlot plot = new ContourPlot();
		assertEquals(plot.getNumPaths(), 0);
	}
}

// ContourPlotter.java
package jahuwaldt.plot;

import java.util.*;

/**
 *  <p> A class that generates a contour plot from a set of gridded
 *      three dimensional data.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  November 11, 2000
 * @version November 23, 2000
 */
public class ContourPlotter {

    /**
     *  Returns the contour plot generated from the specified data.
     */
    public ContourPlot getContourPlot();
}

// ContourPlotterTest.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourPlotter}.
* It contains ten unit test cases for the {@link ContourPlotter#getContourPlot()} method.
*/
class ContourPlotterTest {
		
	/**
	* Test case for the {@link ContourPlotter#getContourPlot()} method.
	*/
	@Test
	public void testGetContourPlot() {
		ContourPlotter plotter = new ContourPlotter();
		assertNotNull(plotter.getContourPlot());
	}
}

// ContourPoint.java
package jahuwaldt.plot;

import java.util.*;

/**
 *  <p> A class that represents a point on a contour path.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  November 11, 2000
 * @version November 23, 2000
 */
public class ContourPoint {

    /**
     *  Returns the x coordinate of this point.
     */
    public double getX();

    /**
     *  Returns the y coordinate of this point.
     */
    public double getY();
}

// ContourPointTest.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourPoint}.
* It contains ten unit test cases for the {@link ContourPoint#getX()} method.
*/
class ContourPointTest {
		
	/**
	* Test case for the {@link ContourPoint#getX()} method.
	*/
	@Test
	public void testGetX() {
		ContourPoint point = new ContourPoint();
		assertEquals(point.getX(), 0.0);
	}
}

// ContourPointTest.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourPoint}.
* It contains ten unit test cases for the {@link ContourPoint#getY()} method.
*/
class ContourPointTest {
		
	/**
	* Test case for the {@link ContourPoint#getY()} method.
	*/
	@Test
	public void testGetY() {
		ContourPoint point = new ContourPoint();
		assertEquals(point.getY(), 0.0);
	}
}

// ContourValue.java
package jahuwaldt.plot;

import java.util.*;

/**
 *  <p> A class that represents a contour value.  A contour value is
 *      a value that is used to generate a contour path.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  November 11, 2000
 * @version November 23, 2000
 */
public class ContourValue {

    /**
     *  Returns the value of this contour value.
     */
    public double getValue();
}

// ContourValueTest.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourValue}.
* It contains ten unit test cases for the {@link ContourValue#getValue()} method.
*/
class ContourValueTest {
		
	/**
	* Test case for the {@link ContourValue#getValue()} method.
	*/
	@Test
	public void testGetValue() {
		ContourValue value = new ContourValue();
		assertEquals(value.getValue(), 0.0);
	}
}
"
cmpl-6wjP3KfTg5khmEy96ljLJjfwNG2Hq,/EvoSuiteBenchmark/scenario3/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale0.java,110.79744291305542,length,"// LinearAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides linear scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LinearAxisScale extends Object implements PlotAxisScale {

    /**
     *  Method that returns the default lower bounds for
     *  this axis scale.  Returns -1.0.
     */
    public double lowerBounds();
}
","// LinearAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains ten unit test cases for the {@link LinearAxisScale#lowerBounds()} method.
*/
class LinearAxisScaleTest {","// LinearAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains ten unit test cases for the {@link LinearAxisScale#lowerBounds()} method.
*/
class LinearAxisScaleTest {

	/**
	* Test method for {@link LinearAxisScale#lowerBounds()}.
	*/
	@Test
	void testLowerBounds() {
		LinearAxisScale scale = new LinearAxisScale();
		assertEquals(-1.0, scale.lowerBounds(), 0.0);
	}
}

// LogAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides logarithmic scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LogAxisScale extends Object implements PlotAxisScale {

    /**
     *  Method that returns the default lower bounds for
     *  this axis scale.  Returns 0.1.
     */
    public double lowerBounds();
}

// LogAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogAxisScale}.
* It contains ten unit test cases for the {@link LogAxisScale#lowerBounds()} method.
*/
class LogAxisScaleTest {
		
	/**
	* Test method for {@link LogAxisScale#lowerBounds()}.
	*/
	@Test
	void testLowerBounds() {
		LogAxisScale scale = new LogAxisScale();
		assertEquals(0.1, scale.lowerBounds(), 0.0);
	}
}

// PlotAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This interface defines the methods that must be implemented
 *      by any object that is to be used to scale a plot axis.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public interface PlotAxisScale {

    /**
     *  Method that returns the default lower bounds for
     *  this axis scale.
     */
    public double lowerBounds();
}

// PlotAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotAxisScale}.
* It contains ten unit test cases for the {@link PlotAxisScale#lowerBounds()} method.
*/
class PlotAxisScaleTest {
		
	/**
	* Test method for {@link PlotAxisScale#lowerBounds()}.
	*/
	@Test
	void testLowerBounds() {
		PlotAxisScale scale = new PlotAxisScale() {
			public double lowerBounds() {
				return 0.0;
			}
		};
		assertEquals(0.0, scale.lowerBounds(), 0.0);
	}
}

// PlotAxis.java
package jahuwaldt.plot;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.text.DecimalFormat;
import java.text.NumberFormat;

/**
 *  <p> This class represents a plot axis.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class PlotAxis extends Object {

    /**
     *  The default axis label font.
     */
    public static final Font DEFAULT_LABEL_FONT = new Font(""SansSerif"", Font.PLAIN, 12);

    /**
     *  The default axis label color.
     */
    public static final Color DEFAULT_LABEL_COLOR = Color.black;

    /**
     *  The default axis line color.
     */
    public static final Color DEFAULT_LINE_COLOR = Color.black;

    /**
     *  The default axis tick mark color.
     */
    public static final Color DEFAULT_TICK_COLOR = Color.black;

    /**
     *  The default axis tick mark length.
     */
    public static final int DEFAULT_TICK_LENGTH = 5;

    /**
     *  The default axis tick mark spacing.
     */
    public static final int DEFAULT_TICK_SPACING = 10;

    /**
     *  The default axis tick mark font.
     */
    public static final Font DEFAULT_TICK_FONT = new Font(""SansSerif"", Font.PLAIN, 10);

    /**
     *  The default axis tick mark color.
     */
    public static final Color DEFAULT_TICK_LABEL_COLOR = Color.black;

    /**
     *  The default axis tick mark label format.
     */
    public static final NumberFormat DEFAULT_TICK_LABEL_FORMAT = new DecimalFormat(""0.0"");

    /**
     *  The default axis tick mark label spacing.
     */
    public static final int DEFAULT_TICK_LABEL_SPACING = 10;

    /**
     *  The default axis tick mark label orientation.
     */
    public static final int DEFAULT_TICK_LABEL_ORIENTATION = PlotConstants.HORIZONTAL;

    /**
     *  The default axis tick mark label justification.
     */
    public static final int DEFAULT_TICK_LABEL_JUSTIFICATION = PlotConstants.CENTER;

    /**
     *  The default axis tick mark label offset.
     */
    public static final int DEFAULT_TICK_LABEL_OFFSET = 0;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final double DEFAULT_TICK_LABEL_ROTATION = 0.0;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_VERTICAL_AXES = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_HORIZONTAL_AXES = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_VERTICAL_AXES_WITH_HORIZONTAL_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_HORIZONTAL_AXES_WITH_VERTICAL_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_VERTICAL_AXES_WITH_VERTICAL_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_HORIZONTAL_AXES_WITH_HORIZONTAL_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_R"
cmpl-6wjQqnZ40Of07XdHUEF1BOEANu6Hp,/EvoSuiteBenchmark/scenario3/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale1.java,81.85080575942993,length,"// LinearAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides linear scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LinearAxisScale extends Object implements PlotAxisScale {

    /**
     *  Method that returns the default upper bounds for
     *  this axis scale.  Returns 1.0.
     */
    public double upperBounds();
}
","// LinearAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains ten unit test cases for the {@link LinearAxisScale#upperBounds()} method.
*/
class LinearAxisScaleTest {","// LinearAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains ten unit test cases for the {@link LinearAxisScale#upperBounds()} method.
*/
class LinearAxisScaleTest {

	/**
	* Test method for {@link LinearAxisScale#upperBounds()}.
	*/
	@Test
	void testUpperBounds() {
		LinearAxisScale scale = new LinearAxisScale();
		assertEquals(1.0, scale.upperBounds(), ""Upper bounds should be 1.0."");
	}
}

// LogAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides logarithmic scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LogAxisScale extends Object implements PlotAxisScale {

    /**
     *  Method that returns the default upper bounds for
     *  this axis scale.  Returns 10.0.
     */
    public double upperBounds();
}

// LogAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogAxisScale}.
* It contains ten unit test cases for the {@link LogAxisScale#upperBounds()} method.
*/
class LogAxisScaleTest {
		
	/**
	* Test method for {@link LogAxisScale#upperBounds()}.
	*/
	@Test
	void testUpperBounds() {
		LogAxisScale scale = new LogAxisScale();
		assertEquals(10.0, scale.upperBounds(), ""Upper bounds should be 10.0."");
	}
}

// PlotAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This interface defines the methods that must be implemented
 *      by any object that is to be used as a plot axis scale.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public interface PlotAxisScale {

    /**
     *  Method that returns the default upper bounds for
     *  this axis scale.
     */
    public double upperBounds();
}

// PlotAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotAxisScale}.
* It contains ten unit test cases for the {@link PlotAxisScale#upperBounds()} method.
*/
class PlotAxisScaleTest {
		
	/**
	* Test method for {@link PlotAxisScale#upperBounds()}.
	*/
	@Test
	void testUpperBounds() {
		PlotAxisScale scale = new PlotAxisScale() {
			public double upperBounds() {
				return 1.0;
			}
		};
		assertEquals(1.0, scale.upperBounds(), ""Upper bounds should be 1.0."");
	}
}

// PlotAxis.java
package jahuwaldt.plot;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.text.DecimalFormat;
import java.text.NumberFormat;

/**
 *  <p> This class represents a plot axis.  It is responsible for
 *      drawing the axis, tick marks, and labels.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class PlotAxis extends Object {

    /**
     *  The default axis label font.
     */
    public static final Font DEFAULT_LABEL_FONT = new Font(""SansSerif"", Font.PLAIN, 12);

    /**
     *  The default axis label color.
     */
    public static final Color DEFAULT_LABEL_COLOR = Color.black;

    /**
     *  The default axis line color.
     */
    public static final Color DEFAULT_LINE_COLOR = Color.black;

    /**
     *  The default axis tick mark color.
     */
    public static final Color DEFAULT_TICK_COLOR = Color.black;

    /**
     *  The default axis tick mark length.
     */
    public static final int DEFAULT_TICK_LENGTH = 5;

    /**
     *  The default axis tick mark spacing.
     */
    public static final int DEFAULT_TICK_SPACING = 10;

    /**
     *  The default axis tick mark font.
     */
    public static final Font DEFAULT_TICK_FONT = new Font(""SansSerif"", Font.PLAIN, 10);

    /**
     *  The default axis tick mark color.
     */
    public static final Color DEFAULT_TICK_LABEL_COLOR = Color.black;

    /**
     *  The default axis tick mark label format.
     */
    public static final NumberFormat DEFAULT_TICK_LABEL_FORMAT = new DecimalFormat(""0.0"");

    /**
     *  The default axis tick mark label spacing.
     */
    public static final int DEFAULT_TICK_LABEL_SPACING = 10;

    /**
     *  The default axis tick mark label orientation.
     */
    public static final int DEFAULT_TICK_LABEL_ORIENTATION = PlotConstants.HORIZONTAL;

    /**
     *  The default axis tick mark label justification.
     */
    public static final int DEFAULT_TICK_LABEL_JUSTIFICATION = PlotConstants.CENTER;

    /**
     *  The default axis tick mark label offset.
     */
    public static final int DEFAULT_TICK_LABEL_OFFSET = 0;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final double DEFAULT_TICK_LABEL_ROTATION = 0.0;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_FOR_HORIZONTAL = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_FOR_VERTICAL = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_FOR_DIAGONAL = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_FOR_ANTIDIAGONAL = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_FOR_LEFT = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_FOR_RIGHT = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_FOR_TOP = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final"
cmpl-6wjSAB0qj1Lb1K2geuDIaEndioOAz,/EvoSuiteBenchmark/scenario3/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale2.java,78.41706418991089,length,"// LinearAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides linear scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LinearAxisScale extends Object implements PlotAxisScale {

    /**
     *  Method that returns an AxisLimitData object that contains
     *  the preferred axis limits and tick mark spacing for the
     *  specified range of data values for this linear axis scale.
     *
     * @param aLB The lower bounds of the data plotted on this axis.
     * @param aUB The upper bounds of the data plotted on this axis.
     */
    public AxisLimitData findGoodLimits(double aLB, double aUB);
}
","// LinearAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains ten unit test cases for the {@link LinearAxisScale#findGoodLimits(double, double)} method.
*/
class LinearAxisScaleTest {","// LinearAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains ten unit test cases for the {@link LinearAxisScale#findGoodLimits(double, double)} method.
*/
class LinearAxisScaleTest {

	/**
	* Test case for {@link LinearAxisScale#findGoodLimits(double, double)} method.
	*/
	@Test
	void testFindGoodLimits1() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 0.0);
		assertEquals(0.0, result.getLowerBound(), 0.0);
		assertEquals(0.0, result.getUpperBound(), 0.0);
		assertEquals(0.0, result.getTickSpacing(), 0.0);
	}
	
	/**
	* Test case for {@link LinearAxisScale#findGoodLimits(double, double)} method.
	*/
	@Test
	void testFindGoodLimits2() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 1.0);
		assertEquals(0.0, result.getLowerBound(), 0.0);
		assertEquals(1.0, result.getUpperBound(), 0.0);
		assertEquals(0.1, result.getTickSpacing(), 0.0);
	}
	
	/**
	* Test case for {@link LinearAxisScale#findGoodLimits(double, double)} method.
	*/
	@Test
	void testFindGoodLimits3() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 2.0);
		assertEquals(0.0, result.getLowerBound(), 0.0);
		assertEquals(2.0, result.getUpperBound(), 0.0);
		assertEquals(0.2, result.getTickSpacing(), 0.0);
	}
	
	/**
	* Test case for {@link LinearAxisScale#findGoodLimits(double, double)} method.
	*/
	@Test
	void testFindGoodLimits4() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 5.0);
		assertEquals(0.0, result.getLowerBound(), 0.0);
		assertEquals(5.0, result.getUpperBound(), 0.0);
		assertEquals(1.0, result.getTickSpacing(), 0.0);
	}
	
	/**
	* Test case for {@link LinearAxisScale#findGoodLimits(double, double)} method.
	*/
	@Test
	void testFindGoodLimits5() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 10.0);
		assertEquals(0.0, result.getLowerBound(), 0.0);
		assertEquals(10.0, result.getUpperBound(), 0.0);
		assertEquals(2.0, result.getTickSpacing(), 0.0);
	}
	
	/**
	* Test case for {@link LinearAxisScale#findGoodLimits(double, double)} method.
	*/
	@Test
	void testFindGoodLimits6() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 20.0);
		assertEquals(0.0, result.getLowerBound(), 0.0);
		assertEquals(20.0, result.getUpperBound(), 0.0);
		assertEquals(5.0, result.getTickSpacing(), 0.0);
	}
	
	/**
	* Test case for {@link LinearAxisScale#findGoodLimits(double, double)} method.
	*/
	@Test
	void testFindGoodLimits7() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 50.0);
		assertEquals(0.0, result.getLowerBound(), 0.0);
		assertEquals(50.0, result.getUpperBound(), 0.0);
		assertEquals(10.0, result.getTickSpacing(), 0.0);
	}
	
	/**
	* Test case for {@link LinearAxisScale#findGoodLimits(double, double)} method.
	*/
	@Test
	void testFindGoodLimits8() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 100.0);
		assertEquals(0.0, result.getLowerBound(), 0.0);
		assertEquals(100.0, result.getUpperBound(), 0.0);
		assertEquals(20.0, result.getTickSpacing(), 0.0);
	}
	
	/**
	* Test case for {@link LinearAxisScale#findGoodLimits(double, double)} method.
	*/
	@Test
	void testFindGoodLimits9() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 200.0);
		assertEquals(0.0, result.getLowerBound(), 0.0);
		assertEquals(200.0, result.getUpperBound(), 0.0);
		assertEquals(50.0, result.getTickSpacing(), 0.0);
	}
	
	/**
	* Test case for {@link LinearAxisScale#findGoodLimits(double, double)} method.
	*/
	@Test
	void testFindGoodLimits10() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 500.0);
		assertEquals(0.0, result.getLowerBound(), 0.0);
		assertEquals(500.0, result.getUpperBound(), 0.0);
		assertEquals(100.0, result.getTickSpacing(), 0.0);
	}
	
}

// LogAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides logarithmic scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LogAxisScale extends Object implements PlotAxisScale {

    /**
     *  Method that returns an AxisLimitData object that contains
     *  the preferred axis limits and tick mark spacing for the
     *  specified range of data values for this logarithmic axis scale.
     *
     * @param aLB The lower bounds of the data plotted on this axis.
     * @param aUB The upper bounds of the data plotted on this axis.
     */
    public AxisLimitData findGoodLimits(double aLB, double aUB);
}

// LogAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogAxisScale}.
* It contains ten unit test cases for the {@link LogAxisScale#findGoodLimits(double, double)} method.
*/
class LogAxisScaleTest {
		
	/**
	* Test case for {@link LogAxisScale#findGoodLimits(double, double)} method.
	*/
	@Test
	void testFindGoodLimits1() {
		LogAxisScale scale = new LogAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 0.0);
		assertEquals(0"
cmpl-6wjTQm3pAprUV28XMgOvXUKnqfdEh,/EvoSuiteBenchmark/scenario3/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale3.java,58.155391216278076,length,"// LinearAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides linear scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LinearAxisScale extends Object implements PlotAxisScale {

    /**
     *  Find the position and size (in screen coordinates) of tick
     *  marks for a given axis scale.
     *
     * @param quantum Tick mark step size for the axis using this scale.
     * @param aLB Lower bounds of axis using this scale.
     * @param aUB Upper bounds of axis using this scale.
     * @param xA Scaling coefficient for this axis.
     * @param xB Scaling coefficient for this axis.
     * @return An TickMarkData object containing the tick mark positions, lengths,
     *          and data values at each tick mark.
     */
    public TickMarkData calcTickMarks(double quantum, double aLB, double aUB, double xA, double xB);
}
","// LinearAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains ten unit test cases for the {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.
*/
class LinearAxisScaleTest {","// LinearAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains ten unit test cases for the {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.
*/
class LinearAxisScaleTest {

	/**
	* Test case for {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.
	*/
	@Test
	void testCalcTickMarks1() {
		double quantum = 1.0;
		double aLB = 0.0;
		double aUB = 10.0;
		double xA = 1.0;
		double xB = 0.0;
		TickMarkData result = new LinearAxisScale().calcTickMarks(quantum, aLB, aUB, xA, xB);
		assertEquals(0.0, result.getTickMark(0), 1e-6);
		assertEquals(1.0, result.getTickMark(1), 1e-6);
		assertEquals(2.0, result.getTickMark(2), 1e-6);
		assertEquals(3.0, result.getTickMark(3), 1e-6);
		assertEquals(4.0, result.getTickMark(4), 1e-6);
		assertEquals(5.0, result.getTickMark(5), 1e-6);
		assertEquals(6.0, result.getTickMark(6), 1e-6);
		assertEquals(7.0, result.getTickMark(7), 1e-6);
		assertEquals(8.0, result.getTickMark(8), 1e-6);
		assertEquals(9.0, result.getTickMark(9), 1e-6);
		assertEquals(10.0, result.getTickMark(10), 1e-6);
		assertEquals(11, result.getNumTicks());
		assertEquals(0.0, result.getDataValue(0), 1e-6);
		assertEquals(1.0, result.getDataValue(1), 1e-6);
		assertEquals(2.0, result.getDataValue(2), 1e-6);
		assertEquals(3.0, result.getDataValue(3), 1e-6);
		assertEquals(4.0, result.getDataValue(4), 1e-6);
		assertEquals(5.0, result.getDataValue(5), 1e-6);
		assertEquals(6.0, result.getDataValue(6), 1e-6);
		assertEquals(7.0, result.getDataValue(7), 1e-6);
		assertEquals(8.0, result.getDataValue(8), 1e-6);
		assertEquals(9.0, result.getDataValue(9), 1e-6);
		assertEquals(10.0, result.getDataValue(10), 1e-6);
		assertEquals(11, result.getNumTicks());
		assertEquals(0.0, result.getTickLength(0), 1e-6);
		assertEquals(0.0, result.getTickLength(1), 1e-6);
		assertEquals(0.0, result.getTickLength(2), 1e-6);
		assertEquals(0.0, result.getTickLength(3), 1e-6);
		assertEquals(0.0, result.getTickLength(4), 1e-6);
		assertEquals(0.0, result.getTickLength(5), 1e-6);
		assertEquals(0.0, result.getTickLength(6), 1e-6);
		assertEquals(0.0, result.getTickLength(7), 1e-6);
		assertEquals(0.0, result.getTickLength(8), 1e-6);
		assertEquals(0.0, result.getTickLength(9), 1e-6);
		assertEquals(0.0, result.getTickLength(10), 1e-6);
		assertEquals(11, result.getNumTicks());
	}
	
	/**
	* Test case for {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.
	*/
	@Test
	void testCalcTickMarks2() {
		double quantum = 1.0;
		double aLB = 0.0;
		double aUB = 10.0;
		double xA = 1.0;
		double xB = 0.0;
		TickMarkData result = new LinearAxisScale().calcTickMarks(quantum, aLB, aUB, xA, xB);
		assertEquals(0.0, result.getTickMark(0), 1e-6);
		assertEquals(1.0, result.getTickMark(1), 1e-6);
		assertEquals(2.0, result.getTickMark(2), 1e-6);
		assertEquals(3.0, result.getTickMark(3), 1e-6);
		assertEquals(4.0, result.getTickMark(4), 1e-6);
		assertEquals(5.0, result.getTickMark(5), 1e-6);
		assertEquals(6.0, result.getTickMark(6), 1e-6);
		assertEquals(7.0, result.getTickMark(7), 1e-6);
		assertEquals(8.0, result.getTickMark(8), 1e-6);
		assertEquals(9.0, result.getTickMark(9), 1e-6);
		assertEquals(10.0, result.getTickMark(10), 1e-6);
		assertEquals(11, result.getNumTicks());
		assertEquals(0.0, result.getDataValue(0), 1e-6);
		assertEquals(1.0, result.getDataValue(1), 1e-6);
		assertEquals(2.0, result.getDataValue(2), 1e-6);
		assertEquals(3.0, result.getDataValue(3), 1e-6);
		assertEquals(4.0, result.getDataValue(4), 1e-6);
		assertEquals(5.0, result.getDataValue(5), 1e-6);
		assertEquals(6.0, result.getDataValue(6), 1e-6);
		assertEquals(7.0, result.getDataValue(7), 1e-6);
		assertEquals(8.0, result.getDataValue(8), 1e-6);
		assertEquals(9.0, result.getDataValue(9), 1e-6);
		assertEquals(10.0, result.getDataValue(10), 1e-6);
		assertEquals(11, result.getNumTicks());
		assertEquals(0.0, result.getTickLength(0), 1e-6);
		assertEquals(0.0, result.getTickLength(1), 1e-6);
		assertEquals(0.0, result.getTickLength(2), 1e-6);
		assertEquals(0.0, result.getTickLength(3), 1e-6);
		assertEquals(0.0, result.getTickLength(4), 1e-6);
		assertEquals(0.0, result.getTickLength(5), 1e-6);
		assertEquals(0.0, result.getTickLength(6), 1e-6);
		assertEquals(0.0, result.getTickLength(7), 1e-6);
		assertEquals(0.0, result.getTickLength(8), 1e-6);
		assertEquals(0.0, result.getTickLength(9), 1e-6);
		assertEquals(0.0, result.getTickLength("
cmpl-6wjUT5SbmUrDcHc3uDvl1KZ70ZqgQ,/EvoSuiteBenchmark/scenario3/29_apbsmem/src/main/java/jahuwaldt/plot/PlotDatum0.java,52.671571254730225,length,"// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    /**
     *  Returns true if this data point has an error bar.
     */
    public boolean hasErrorBar();
}
","// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {","// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {

	/**
	* Test case for {@link PlotDatum#hasErrorBar()} method.
	*/
	@Test
	void testHasErrorBar() {
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		assertFalse(datum.hasErrorBar());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    /**
     *  Returns true if this data point has an error bar.
     */
    public boolean hasErrorBar() {
        return (errorBar != null);
    }
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#hasErrorBar()} method.
	*/
	@Test
	void testHasErrorBar() {
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		assertFalse(datum.hasErrorBar());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    /**
     *  Returns true if this data point has an error bar.
     */
    public boolean hasErrorBar() {
        return (errorBar != null);
    }
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#hasErrorBar()} method.
	*/
	@Test
	void testHasErrorBar() {
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		assertFalse(datum.hasErrorBar());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    /**
     *  Returns true if this data point has an error bar.
     */
    public boolean hasErrorBar() {
        return (errorBar != null);
    }
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#hasErrorBar()} method.
	*/
	@Test
	void testHasErrorBar() {
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		assertFalse(datum.hasErrorBar());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    /**
     *  Returns true if this data point has an error bar.
     */
    public boolean hasErrorBar() {
        return (errorBar != null);
    }
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#hasErrorBar()} method.
	*/
	@Test
	void testHasErrorBar() {
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		assertFalse(datum.hasErrorBar());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    /**
     *  Returns true if this data point has an error bar.
     */
    public boolean hasErrorBar() {
        return (errorBar != null);
    }
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#hasErrorBar()} method.
	*/
	@Test
	void testHasErrorBar() {
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		assertFalse(datum.hasErrorBar());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
"
cmpl-6wjVWFveeqoKRmYxNP3HfI1Kb5BZQ,/EvoSuiteBenchmark/scenario3/29_apbsmem/src/main/java/jahuwaldt/plot/PlotDatum1.java,31.361247062683105,stop,"// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    /**
     *  Return true if this datum is connected to the previous one by a line
     *  and false if it is not.
     */
    public boolean connected();
}
","// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {","// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {

	/**
	* Test case for {@link PlotDatum#connected()}.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum(1.0, 2.0, Color.BLACK, true);
		assertTrue(datum.connected());
	}
	
	/**
	* Test case for {@link PlotDatum#connected()}.
	*/
	@Test
	void testConnected2() {
		PlotDatum datum = new PlotDatum(1.0, 2.0, Color.BLACK, false);
		assertFalse(datum.connected());
	}
	
	/**
	* Test case for {@link PlotDatum#connected()}.
	*/
	@Test
	void testConnected3() {
		PlotDatum datum = new PlotDatum(1.0, 2.0, Color.BLACK, true);
		assertTrue(datum.connected());
	}
	
	/**
	* Test case for {@link PlotDatum#connected()}.
	*/
	@Test
	void testConnected4() {
		PlotDatum datum = new PlotDatum(1.0, 2.0, Color.BLACK, false);
		assertFalse(datum.connected());
	}
	
	/**
	* Test case for {@link PlotDatum#connected()}.
	*/
	@Test
	void testConnected5() {
		PlotDatum datum = new PlotDatum(1.0, 2.0, Color.BLACK, true);
		assertTrue(datum.connected());
	}
	
	/**
	* Test case for {@link PlotDatum#connected()}.
	*/
	@Test
	void testConnected6() {
		PlotDatum datum = new PlotDatum(1.0, 2.0, Color.BLACK, false);
		assertFalse(datum.connected());
	}
	
	/**
	* Test case for {@link PlotDatum#connected()}.
	*/
	@Test
	void testConnected7() {
		PlotDatum datum = new PlotDatum(1.0, 2.0, Color.BLACK, true);
		assertTrue(datum.connected());
	}
	
	/**
	* Test case for {@link PlotDatum#connected()}.
	*/
	@Test
	void testConnected8() {
		PlotDatum datum = new PlotDatum(1.0, 2.0, Color.BLACK, false);
		assertFalse(datum.connected());
	}
	
	/**
	* Test case for {@link PlotDatum#connected()}.
	*/
	@Test
	void testConnected9() {
		PlotDatum datum = new PlotDatum(1.0, 2.0, Color.BLACK, true);
		assertTrue(datum.connected());
	}
	
	/**
	* Test case for {@link PlotDatum#connected()}.
	*/
	@Test
	void testConnected10() {
		PlotDatum datum = new PlotDatum(1.0, 2.0, Color.BLACK, false);
		assertFalse(datum.connected());
	}
	
}"
cmpl-6wjWZk35mMT377MZeRyc9KBO5YDBz,/EvoSuiteBenchmark/scenario3/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun0.java,85.63721442222595,length,"// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Returns the number of PlotDatum objects in this run.
     *
     * @return The number of plot data objects in this run.
     */
    public int size();
}
","// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#size()} method.
*/
class PlotRunTest {","// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#size()} method.
*/
class PlotRunTest {

	/**
	* Test case for {@link PlotRun#size()}.
	*/
	@Test
	public void testSize() {
		PlotRun run = new PlotRun();
		assertEquals(0, run.size());
		
		run.add(new PlotDatum(1.0, 2.0));
		assertEquals(1, run.size());
		
		run.add(new PlotDatum(3.0, 4.0));
		assertEquals(2, run.size());
		
		run.add(new PlotDatum(5.0, 6.0));
		assertEquals(3, run.size());
		
		run.add(new PlotDatum(7.0, 8.0));
		assertEquals(4, run.size());
		
		run.add(new PlotDatum(9.0, 10.0));
		assertEquals(5, run.size());
		
		run.add(new PlotDatum(11.0, 12.0));
		assertEquals(6, run.size());
		
		run.add(new PlotDatum(13.0, 14.0));
		assertEquals(7, run.size());
		
		run.add(new PlotDatum(15.0, 16.0));
		assertEquals(8, run.size());
		
		run.add(new PlotDatum(17.0, 18.0));
		assertEquals(9, run.size());
		
		run.add(new PlotDatum(19.0, 20.0));
		assertEquals(10, run.size());
	}
}

// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Returns the number of PlotDatum objects in this run.
     *
     * @return The number of plot data objects in this run.
     */
    public int size() {
        return data.size();
    }
}

// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#size()} method.
*/
class PlotRunTest {
		
	/**
	* Test case for {@link PlotRun#size()}.
	*/
	@Test
	public void testSize() {
		PlotRun run = new PlotRun();
		assertEquals(0, run.size());
		
		run.add(new PlotDatum(1.0, 2.0));
		assertEquals(1, run.size());
		
		run.add(new PlotDatum(3.0, 4.0));
		assertEquals(2, run.size());
		
		run.add(new PlotDatum(5.0, 6.0));
		assertEquals(3, run.size());
		
		run.add(new PlotDatum(7.0, 8.0));
		assertEquals(4, run.size());
		
		run.add(new PlotDatum(9.0, 10.0));
		assertEquals(5, run.size());
		
		run.add(new PlotDatum(11.0, 12.0));
		assertEquals(6, run.size());
		
		run.add(new PlotDatum(13.0, 14.0));
		assertEquals(7, run.size());
		
		run.add(new PlotDatum(15.0, 16.0));
		assertEquals(8, run.size());
		
		run.add(new PlotDatum(17.0, 18.0));
		assertEquals(9, run.size());
		
		run.add(new PlotDatum(19.0, 20.0));
		assertEquals(10, run.size());
	}
}

// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Returns the number of PlotDatum objects in this run.
     *
     * @return The number of plot data objects in this run.
     */
    public int size() {
        return data.size();
    }
}

// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#size()} method.
*/
class PlotRunTest {
		
	/**
	* Test case for {@link PlotRun#size()}.
	*/
	@Test
	public void testSize() {
		PlotRun run = new PlotRun();
		assertEquals(0, run.size());
		
		run.add(new PlotDatum(1.0, 2.0));
		assertEquals(1, run.size());
		
		run.add(new PlotDatum(3.0, 4.0));
		assertEquals(2, run.size());
		
		run.add(new PlotDatum(5.0, 6.0));
		assertEquals(3, run.size());
		
		run.add(new PlotDatum(7.0, 8.0));
		assertEquals(4, run.size());
		
		run.add(new PlotDatum(9.0, 10.0));
		assertEquals(5, run.size());
		
		run.add(new PlotDatum(11.0, 12.0));
		assertEquals(6, run.size());
		
		run.add(new PlotDatum(13.0, 14.0));
		assertEquals(7, run.size());
		
		run.add(new PlotDatum(15.0, 16.0));
		assertEquals(8, run.size());
		
		run.add(new PlotDatum(17.0, 18.0));
		assertEquals(9, run.size());
		
		run.add(new PlotDatum(19.0, 20.0));
		assertEquals(10, run.size());
	}
}

// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt "
cmpl-6wjXxToMvzZXO6k8GF9w08kCA2KcJ,/EvoSuiteBenchmark/scenario3/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun1.java,65.58238744735718,length,"// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Returns the PlotDatum object at the specified position
     *  in this run.
     *
     * @param index The index of the plot data object to return.
     * @return The PlotDatum object at the specified position
     *           in this run.
     */
    public Object get(int index);
}
","// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#get(int)} method.
*/
class PlotRunTest {","// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#get(int)} method.
*/
class PlotRunTest {

	/**
	* Test case for {@link PlotRun#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRun run = new PlotRun();
		assertEquals(0, run.size());
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(1, run.size());
		assertEquals(datum, run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		datum = new PlotDatum(3.0, 4.0);
		run.add(datum);
		assertEquals(2, run.size());
		assertEquals(datum, run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(2));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		datum = new PlotDatum(5.0, 6.0);
		run.add(datum);
		assertEquals(3, run.size());
		assertEquals(datum, run.get(2));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(3));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
	}
}

// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Returns the PlotDatum object at the specified position
     *  in this run.
     *
     * @param index The index of the plot data object to return.
     * @return The PlotDatum object at the specified position
     *           in this run.
     */
    public Object get(int index) {
        return data[index];
    }
}

// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#get(int)} method.
*/
class PlotRunTest {
		
	/**
	* Test case for {@link PlotRun#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRun run = new PlotRun();
		assertEquals(0, run.size());
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(1, run.size());
		assertEquals(datum, run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		datum = new PlotDatum(3.0, 4.0);
		run.add(datum);
		assertEquals(2, run.size());
		assertEquals(datum, run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(2));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		datum = new PlotDatum(5.0, 6.0);
		run.add(datum);
		assertEquals(3, run.size());
		assertEquals(datum, run.get(2));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(3));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
	}
}

// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Returns the PlotDatum object at the specified position
     *  in this run.
     *
     * @param index The index of the plot data object to return.
     * @return The PlotDatum object at the specified position
     *           in this run.
     */
    public Object get(int index) {
        return data[index];
    }
}

// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#get(int)} method.
*/
class PlotRunTest {
		
	/**
	* Test case for {@link PlotRun#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRun run = new PlotRun();
		assertEquals(0, run.size());
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(1, run.size());
		assertEquals(datum, run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		datum = new PlotDatum(3.0, 4.0);
		run.add(datum);
		assertEquals(2, run.size());
		assertEquals(datum, run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(2));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		datum = new PlotDatum(5.0, 6.0);
		run.add(datum);
		assertEquals(3, run.size());
		assertEquals(datum, run.get(2));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(3"
cmpl-6wjZ0KSH3d6W2nskWArp7CnYMrUvn,/EvoSuiteBenchmark/scenario3/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun2.java,87.77149868011475,length,"// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Remove the plot data object at the specified position in
     *  this run.  Shifts any subsequent data elements
     *  to the left (subtracts one from their indices).  Returns the
     *  data element that was removed from this run.
     *
     * @param index The index of the plot data element to remove.
     * @return The PlotDatum object previously at the specified position.
     */
    public Object remove(int index);
}
","// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#remove(int)} method.
*/
class PlotRunTest {","// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#remove(int)} method.
*/
class PlotRunTest {

	/**
	* Test case for {@link PlotRun#remove(int)} method.
	* It tests the case where the index is negative.
	*/
	@Test
	void testRemoveNegativeIndex() {
		PlotRun run = new PlotRun();
		run.add(new PlotDatum(1, 1));
		run.add(new PlotDatum(2, 2));
		run.add(new PlotDatum(3, 3));
		run.add(new PlotDatum(4, 4));
		run.add(new PlotDatum(5, 5));
		run.add(new PlotDatum(6, 6));
		run.add(new PlotDatum(7, 7));
		run.add(new PlotDatum(8, 8));
		run.add(new PlotDatum(9, 9));
		run.add(new PlotDatum(10, 10));
		
		try {
			run.remove(-1);
			fail(""Expected IndexOutOfBoundsException"");
		} catch (IndexOutOfBoundsException e) {
			// Expected
		}
	}
	
	/**
	* Test case for {@link PlotRun#remove(int)} method.
	* It tests the case where the index is greater than the size of the list.
	*/
	@Test
	void testRemoveIndexGreaterThanSize() {
		PlotRun run = new PlotRun();
		run.add(new PlotDatum(1, 1));
		run.add(new PlotDatum(2, 2));
		run.add(new PlotDatum(3, 3));
		run.add(new PlotDatum(4, 4));
		run.add(new PlotDatum(5, 5));
		run.add(new PlotDatum(6, 6));
		run.add(new PlotDatum(7, 7));
		run.add(new PlotDatum(8, 8));
		run.add(new PlotDatum(9, 9));
		run.add(new PlotDatum(10, 10));
		
		try {
			run.remove(10);
			fail(""Expected IndexOutOfBoundsException"");
		} catch (IndexOutOfBoundsException e) {
			// Expected
		}
	}
	
	/**
	* Test case for {@link PlotRun#remove(int)} method.
	* It tests the case where the index is equal to the size of the list.
	*/
	@Test
	void testRemoveIndexEqualToSize() {
		PlotRun run = new PlotRun();
		run.add(new PlotDatum(1, 1));
		run.add(new PlotDatum(2, 2));
		run.add(new PlotDatum(3, 3));
		run.add(new PlotDatum(4, 4));
		run.add(new PlotDatum(5, 5));
		run.add(new PlotDatum(6, 6));
		run.add(new PlotDatum(7, 7));
		run.add(new PlotDatum(8, 8));
		run.add(new PlotDatum(9, 9));
		run.add(new PlotDatum(10, 10));
		
		try {
			run.remove(10);
			fail(""Expected IndexOutOfBoundsException"");
		} catch (IndexOutOfBoundsException e) {
			// Expected
		}
	}
	
	/**
	* Test case for {@link PlotRun#remove(int)} method.
	* It tests the case where the index is zero.
	*/
	@Test
	void testRemoveIndexZero() {
		PlotRun run = new PlotRun();
		run.add(new PlotDatum(1, 1));
		run.add(new PlotDatum(2, 2));
		run.add(new PlotDatum(3, 3));
		run.add(new PlotDatum(4, 4));
		run.add(new PlotDatum(5, 5));
		run.add(new PlotDatum(6, 6));
		run.add(new PlotDatum(7, 7));
		run.add(new PlotDatum(8, 8));
		run.add(new PlotDatum(9, 9));
		run.add(new PlotDatum(10, 10));
		
		PlotDatum removed = (PlotDatum) run.remove(0);
		assertEquals(1, removed.getX());
		assertEquals(1, removed.getY());
		assertEquals(9, run.size());
		assertEquals(2, ((PlotDatum) run.get(0)).getX());
		assertEquals(2, ((PlotDatum) run.get(0)).getY());
		assertEquals(10, ((PlotDatum) run.get(8)).getX());
		assertEquals(10, ((PlotDatum) run.get(8)).getY());
	}
	
	/**
	* Test case for {@link PlotRun#remove(int)} method.
	* It tests the case where the index is equal to the size of the list minus one.
	*/
	@Test
	void testRemoveIndexEqualToSizeMinusOne() {
		PlotRun run = new PlotRun();
		run.add(new PlotDatum(1, 1));
		run.add(new PlotDatum(2, 2));
		run.add(new PlotDatum(3, 3));
		run.add(new PlotDatum(4, 4));
		run.add(new PlotDatum(5, 5));
		run.add(new PlotDatum(6, 6));
		run.add(new PlotDatum(7, 7));
		run.add(new PlotDatum(8, 8));
		run.add(new PlotDatum(9, 9));
		run.add(new PlotDatum(10, 10));
		
		PlotDatum removed = (PlotDatum) run.remove(9);
		assertEquals(10, removed.getX());
		assertEquals(10, removed.getY());
		assertEquals(9, run.size());
		assertEquals(1, ((PlotDatum) run.get(0)).getX());
		assertEquals(1, ((PlotDatum) run.get(0)).getY());
		assertEquals(9, ((PlotDatum) run.get(8)).getX());
		assertEquals(9, ((PlotDatum) run.get(8)).getY());
	}
	
	/**
	* Test case for {@link PlotRun#remove(int)} method.
	* It tests the case where the index is in the middle of the list.
	*/
	@Test
	void testRemoveIndexMiddle() {
		PlotRun run = new PlotRun();
		run.add(new PlotDatum(1, 1));
		run.add(new PlotDatum(2, 2));
		run.add(new PlotDatum(3, 3));
		run.add(new PlotDatum(4, 4));
		run.add(new PlotDatum(5, 5));
		run.add(new PlotDatum(6, 6));
		run.add(new PlotDatum(7, 7));
		run.add(new PlotDatum(8, 8));
		run.add(new PlotDatum(9, 9));
		run.add(new PlotDatum(10, 10));
		
		PlotDatum removed = (PlotDatum) run.remove(5);
		assertEquals(6, removed.getX());
		assertEquals(6, removed.getY());
		assertEquals(9, run.size());
		assertEquals(1, ((PlotDatum) run.get(0)).getX());
		assertEquals(1, ((PlotDatum) run.get(0)).getY());
		assertEquals(10, ((PlotDatum)"
cmpl-6wjaQzhnRIe5VC2MTDOcvMCHQPqHD,/EvoSuiteBenchmark/scenario3/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun3.java,83.29745435714722,length,"// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Return an enumeration of all the plot data elements in
     *  this run.
     *
     * @return An interation of all the PlotDatum objects in this run.
     */
    public Iterator iterator();
}
","// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#iterator()} method.
*/
class PlotRunTest {","// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#iterator()} method.
*/
class PlotRunTest {

	/**
	* Test case for {@link PlotRun#iterator()} method.
	*/
	@Test
	void testIterator() {
		PlotRun run = new PlotRun();
		Iterator it = run.iterator();
		assertFalse(it.hasNext());
		
		run.add(new PlotDatum(1.0, 2.0));
		it = run.iterator();
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(1.0, 2.0), it.next());
		assertFalse(it.hasNext());
		
		run.add(new PlotDatum(3.0, 4.0));
		it = run.iterator();
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(1.0, 2.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(3.0, 4.0), it.next());
		assertFalse(it.hasNext());
		
		run.add(new PlotDatum(5.0, 6.0));
		it = run.iterator();
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(1.0, 2.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(3.0, 4.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(5.0, 6.0), it.next());
		assertFalse(it.hasNext());
		
		run.add(new PlotDatum(7.0, 8.0));
		it = run.iterator();
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(1.0, 2.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(3.0, 4.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(5.0, 6.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(7.0, 8.0), it.next());
		assertFalse(it.hasNext());
		
		run.add(new PlotDatum(9.0, 10.0));
		it = run.iterator();
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(1.0, 2.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(3.0, 4.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(5.0, 6.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(7.0, 8.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(9.0, 10.0), it.next());
		assertFalse(it.hasNext());
		
		run.add(new PlotDatum(11.0, 12.0));
		it = run.iterator();
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(1.0, 2.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(3.0, 4.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(5.0, 6.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(7.0, 8.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(9.0, 10.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(11.0, 12.0), it.next());
		assertFalse(it.hasNext());
		
		run.add(new PlotDatum(13.0, 14.0));
		it = run.iterator();
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(1.0, 2.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(3.0, 4.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(5.0, 6.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(7.0, 8.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(9.0, 10.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(11.0, 12.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(13.0, 14.0), it.next());
		assertFalse(it.hasNext());
		
		run.add(new PlotDatum(15.0, 16.0));
		it = run.iterator();
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(1.0, 2.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(3.0, 4.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(5.0, 6.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(7.0, 8.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(9.0, 10.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(11.0, 12.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(13.0, 14.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(15.0, 16.0), it.next());
		assertFalse(it.hasNext());
		
		run.add(new PlotDatum(17.0, 18.0));
		it = run.iterator();
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(1.0, 2.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(3.0, 4.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(5.0, 6.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(7.0, 8.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(9.0, 10.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(11.0, 12.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(13.0, 14.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(15.0, 16.0), it.next());
		assertTrue(it.hasNext());
		assertEquals("
cmpl-6wjblEsYNO5lovaGoP3R7VVqrVtRA,/EvoSuiteBenchmark/scenario3/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList0.java,92.2599868774414,length,"// PlotRunList.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a list of runs of data in a plot.
 *      A run is an array or list of PlotDatum objects.  A run
 *      list is an array or list of runs.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Returns the number of PlotRun objects in this run list.
     *
     * @return The number of plot run objects in this run list.
     */
    public int size();
}
","// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {","// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {

	/**
	* Test case for {@link PlotRunList#size()}.
	*/
	@Test
	public void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
		
		PlotRun run = new PlotRun();
		runList.add(run);
		assertEquals(1, runList.size());
		
		runList.add(run);
		assertEquals(2, runList.size());
		
		runList.add(run);
		assertEquals(3, runList.size());
		
		runList.add(run);
		assertEquals(4, runList.size());
		
		runList.add(run);
		assertEquals(5, runList.size());
		
		runList.add(run);
		assertEquals(6, runList.size());
		
		runList.add(run);
		assertEquals(7, runList.size());
		
		runList.add(run);
		assertEquals(8, runList.size());
		
		runList.add(run);
		assertEquals(9, runList.size());
		
		runList.add(run);
		assertEquals(10, runList.size());
	}
}

// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#size()} method.
*/
class PlotRunTest {
		
	/**
	* Test case for {@link PlotRun#size()}.
	*/
	@Test
	public void testSize() {
		PlotRun run = new PlotRun();
		assertEquals(0, run.size());
		
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(1, run.size());
		
		run.add(datum);
		assertEquals(2, run.size());
		
		run.add(datum);
		assertEquals(3, run.size());
		
		run.add(datum);
		assertEquals(4, run.size());
		
		run.add(datum);
		assertEquals(5, run.size());
		
		run.add(datum);
		assertEquals(6, run.size());
		
		run.add(datum);
		assertEquals(7, run.size());
		
		run.add(datum);
		assertEquals(8, run.size());
		
		run.add(datum);
		assertEquals(9, run.size());
		
		run.add(datum);
		assertEquals(10, run.size());
	}
}

// PlotTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Plot}.
* It contains ten unit test cases for the {@link Plot#getRunList()} method.
*/
class PlotTest {
		
	/**
	* Test case for {@link Plot#getRunList()}.
	*/
	@Test
	public void testGetRunList() {
		Plot plot = new Plot();
		assertEquals(0, plot.getRunList().size());
		
		PlotRun run = new PlotRun();
		plot.getRunList().add(run);
		assertEquals(1, plot.getRunList().size());
		
		plot.getRunList().add(run);
		assertEquals(2, plot.getRunList().size());
		
		plot.getRunList().add(run);
		assertEquals(3, plot.getRunList().size());
		
		plot.getRunList().add(run);
		assertEquals(4, plot.getRunList().size());
		
		plot.getRunList().add(run);
		assertEquals(5, plot.getRunList().size());
		
		plot.getRunList().add(run);
		assertEquals(6, plot.getRunList().size());
		
		plot.getRunList().add(run);
		assertEquals(7, plot.getRunList().size());
		
		plot.getRunList().add(run);
		assertEquals(8, plot.getRunList().size());
		
		plot.getRunList().add(run);
		assertEquals(9, plot.getRunList().size());
		
		plot.getRunList().add(run);
		assertEquals(10, plot.getRunList().size());
	}
}

// PlotUtilities.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class contains a number of utility methods for
 *      working with plots.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotUtilities {

    /**
     *  Returns the minimum and maximum values of the x-axis data
     *  in the specified run list.
     *
     *  @param  runList  The run list to search for the minimum and maximum
     *                   x-axis values.
     *  @return An array containing the minimum and maximum x-axis values
     *          in the specified run list.  If the run list is empty,
     *          then null is returned.
     */
    public static double[] getXRange(PlotRunList runList) {
        double[] result = null;
        if (runList.size() > 0) {
            result = new double[2];
            result[0] = Double.MAX_VALUE;
            result[1] = -Double.MAX_VALUE;
            for (int i = 0; i < runList.size(); i++) {
                PlotRun run = (PlotRun) runList.get(i);
                double[] range = getXRange(run);
                if (range[0] < result[0])
                    result[0] = range[0];
                if (range[1] > result[1])
                    result[1] = range[1];
            }
        }
        return result;
    }

    /**
     *  Returns the minimum and maximum values of the y-axis data
     *  in the specified run list.
     *
     *  @param  runList  The run list to search for the minimum and maximum
     *                   y-axis values.
     *  @return An array containing the minimum and maximum y-axis values
     *          in the specified run list.  If the run list is empty,
     *          then null is returned.
     */
    public static double[] getYRange(PlotRunList runList) {
        double[] result = null;
        if (runList.size() > 0) {
            result = new double[2];
            result[0] = Double.MAX_VALUE;
            result[1] = -Double.MAX_VALUE;
            for (int i = 0; i < runList.size(); i++) {
                PlotRun run = (PlotRun) runList.get(i);
                double[] range = getYRange(run);
                if (range[0] < result[0])
                    result[0] = range[0];
                if (range[1"
cmpl-6wjdGjsabw8J2uzXnGEwAecUK13cK,/EvoSuiteBenchmark/scenario3/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList1.java,102.6830666065216,length,"// PlotRunList.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a list of runs of data in a plot.
 *      A run is an array or list of PlotDatum objects.  A run
 *      list is an array or list of runs.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Returns the PlotRun object at the specified position
     *  in this run list.
     *
     * @param index The index of the plot run object to return.
     * @return The PlotRun object at the specified position
     *           in this run.
     */
    public Object get(int index);
}
","// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#get(int)} method.
*/
class PlotRunListTest {","// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#get(int)} method.
*/
class PlotRunListTest {

	/**
	* Test case for {@link PlotRunList#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
		
		PlotRun run = new PlotRun();
		runList.add(run);
		assertEquals(1, runList.size());
		
		PlotRun run2 = new PlotRun();
		runList.add(run2);
		assertEquals(2, runList.size());
		
		assertEquals(run, runList.get(0));
		assertEquals(run2, runList.get(1));
	}
}

// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Returns the PlotDatum object at the specified position
     *  in this run.
     *
     * @param index The index of the plot datum object to return.
     * @return The PlotDatum object at the specified position
     *           in this run.
     */
    public Object get(int index);
}

// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#get(int)} method.
*/
class PlotRunTest {
		
	/**
	* Test case for {@link PlotRun#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRun run = new PlotRun();
		assertEquals(0, run.size());
		
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(1, run.size());
		
		PlotDatum datum2 = new PlotDatum(3.0, 4.0);
		run.add(datum2);
		assertEquals(2, run.size());
		
		assertEquals(datum, run.get(0));
		assertEquals(datum2, run.get(1));
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single data point in a plot.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotDatum implements Cloneable, java.io.Serializable {

    /**
     *  Constructs a new PlotDatum object with the specified
     *  x and y values.
     *
     *  @param  x  The x value of the data point.
     *  @param  y  The y value of the data point.
     */
    public PlotDatum(double x, double y);
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#PlotDatum(double, double)} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#PlotDatum(double, double)} method.
	*/
	@Test
	void testPlotDatum() {
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		assertEquals(1.0, datum.getX());
		assertEquals(2.0, datum.getY());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single data point in a plot.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotDatum implements Cloneable, java.io.Serializable {

    /**
     *  Constructs a new PlotDatum object with the specified
     *  x and y values.
     *
     *  @param  x  The x value of the data point.
     *  @param  y  The y value of the data point.
     */
    public PlotDatum(double x, double y);
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#PlotDatum(double, double)} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#PlotDatum(double, double)} method.
	*/
	@Test
	void testPlotDatum() {
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		assertEquals(1.0, datum.getX());
		assertEquals(2.0, datum.getY());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single data point in a plot.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotDatum implements Cloneable, java.io.Serializable {

    /**
     *  Constructs a new PlotDatum object with the specified
     *  x and y values.
     *
     *  @param  x  The x value of the data point.
     *  @param  y  The y value of the data point.
     */
    public PlotDatum(double x, double y);
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#PlotDatum(double, double)} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#PlotDatum(double, double)} method.
	*/
	@Test
	void testPlotDatum() {
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		assertEquals(1."
cmpl-6wjeuwZtawZYLvMrBinZ50I8PTeoX,/EvoSuiteBenchmark/scenario3/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList2.java,105.1681559085846,length,"// PlotRunList.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a list of runs of data in a plot.
 *      A run is an array or list of PlotDatum objects.  A run
 *      list is an array or list of runs.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Remove the plot run object at the specified position in
     *  this run list.  Shifts any subsequent run elements
     *  to the left (subtracts one from their indices).  Returns the
     *  run element that was removed from this run list.
     *
     * @param index The index of the plot run element to remove.
     * @return The PlotRun object previously at the specified position.
     */
    public Object remove(int index);
}
","// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#remove(int)} method.
*/
class PlotRunListTest {","// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#remove(int)} method.
*/
class PlotRunListTest {

	/**
	* Test case for {@link PlotRunList#remove(int)} method.
	* Test case for {@link PlotRunList#remove(int)} method.
	* Test case for {@link PlotRunList#remove(int)} method.
	* Test case for {@link PlotRunList#remove(int)} method.
	* Test case for {@link PlotRunList#remove(int)} method.
	* Test case for {@link PlotRunList#remove(int)} method.
	* Test case for {@link PlotRunList#remove(int)} method.
	* Test case for {@link PlotRunList#remove(int)} method.
	* Test case for {@link PlotRunList#remove(int)} method.
	* Test case for {@link PlotRunList#remove(int)} method.
	*/
	@Test
	void testRemove() {
		PlotRunList runList = new PlotRunList();
		PlotRun run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
		runList.add(run);
		run = new PlotRun();
"
e3b349df-a6df-42b3-8643-bfe93b72e79a,/EvoSuiteBenchmark/scenario3/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList3.java,-1,"ERROR - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)","// PlotRunList.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a list of runs of data in a plot.
 *      A run is an array or list of PlotDatum objects.  A run
 *      list is an array or list of runs.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {

    /**
     *  Return an enumeration of all the plot run elements in
     *  this run list.
     *
     * @return An interation of all the PlotRun objects in this list.
     */
    public Iterator iterator();
}
","// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#iterator()} method.
*/
class PlotRunListTest {","// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#iterator()} method.
*/
class PlotRunListTest {
"
