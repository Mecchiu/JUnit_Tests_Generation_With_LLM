ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wvUdlThmDJlEIiMu3K64K27jYpzq,/EvoSuiteBenchmark/scenario3/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale0.java,2.437950611114502,stop,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    /**
     * date de la formation
     *
     * @return la date de la formation sous forme de String
     */
    public String dateLimForm();
}
","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipaleTest {","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipaleTest {

	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	*/
	@Test
	void testDateLimForm() {
		// TODO : implement this test case
		fail(""Not yet implemented"");
	}
}"
cmpl-6wvVfl0UVNNUswHuzh0bGCfeoPXh1,/EvoSuiteBenchmark/scenario3/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale1.java,2.21157169342041,,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    /**
     * date de naissance
     *
     * @return la date de naissance sous form de String
     */
    public String dateDeNaiss();
}
","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipaleTest {","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipaleTest {

	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	*/
	@Test
	void testDateDeNaiss() {
		// TODO
	}
}"
cmpl-6wvWieosbKbxEGfSna6kYJDasSN7G,/EvoSuiteBenchmark/scenario3/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage0.java,25.21236824989319,stop,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     *
     * @return TableStockage
     */
    public TableStockage ajouterLigne();
}
","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockageTest {","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockageTest {

	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is empty.
	*/
	@Test
	public void testAjouterLigne1() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne2() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne3() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne4() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne5() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne6() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne7() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne8() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne9() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne10() {
		// TODO
	}
}"
cmpl-6wvXl9WUz9VfL86HMg7prUJZKVhek,/EvoSuiteBenchmark/scenario3/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage1.java,132.25228548049927,length,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     *
     * @return TableStockage
     */
    public TableStockage colonneMail();
}
","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockageTest {","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockageTest {

	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters a valid email address.
	*/
	@Test
	void testColonneMail1() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters an invalid email address.
	*/
	@Test
	void testColonneMail2() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertNotEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters a valid email address.
	*/
	@Test
	void testColonneMail3() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters an invalid email address.
	*/
	@Test
	void testColonneMail4() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertNotEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters a valid email address.
	*/
	@Test
	void testColonneMail5() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters an invalid email address.
	*/
	@Test
	void testColonneMail6() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertNotEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters a valid email address.
	*/
	@Test
	void testColonneMail7() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters an invalid email address.
	*/
	@Test
	void testColonneMail8() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertNotEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters a valid email address.
	*/
	@Test
	void testColonneMail9() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters an invalid email address.
	*/
	@Test
	void testColonneMail10() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertNotEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
}

// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     *
     * @return TableStockage
     */
    public TableStockage colonneMail() {
        String mail = JOptionPane.showInputDialog(""Entrez votre adresse mail"");
        if (mail.matches(""^[a-zA-Z0-9._-]+@[a-zA-Z0-9._-]{2,}\\.[a-z]{2,4}$"")) {
            TableStockage tableStockage = new TableStockage();
            tableStockage.ajouterColonne(""E-Mail"");
            return tableStockage;
        } else {
            return null;
        }
    }
}

// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockageTest {
		
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters a valid email address.
	*/
	@Test
	void testColonneMail1() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters an invalid email address.
	*/
	@Test
	void testColonneMail2() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertNotEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters a valid email address.
	*/
	@Test
	void testColonneMail3() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters an invalid email address.
	*/
	@Test
	void testColonneMail4() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertNotEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters a valid email address.
	*/
	@Test
	void testColonneMail5() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters an invalid email address.
	*/
	@Test
	void testColonneMail6() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertNotEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters a valid email address.
	*/
	@Test
	void testColonneMail7() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters an invalid email address.
	*/
	@Test
	void testColonneMail8() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertNotEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters a valid email address.
	*/
	@Test
	void testColonneMail9() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters an invalid email address.
	*/
	@Test
	void testColonneMail10() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertNotEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
}

// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     *
     * @return TableStockage
     */
    public TableStockage colonneMail() {
        String mail = JOptionPane.showInputDialog(""Entrez votre adresse mail"");
        if (mail.matches(""^[a-zA-Z0-9._-]+@[a-zA-Z0-9._-]{2,}\\.[a-z]{2,4}$"")) {
            TableStockage tableStockage = new TableStockage();
            tableStockage.ajouterColonne(""E-Mail"");
            return tableStockage;
        } else {
            return null;
        }
    }
}

// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockageTest {
		
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters a valid email address.
	*/
	@Test
	void testColonneMail1() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters an invalid email address.
	*/
	@Test
	void testColonneMail2() {
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		TableStockage tableStockage = modifTableStockage.colonneMail();
		assertNotEquals(tableStockage.getNomColonne(tableStockage.getNbColonnes()-1), ""E-Mail"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters a valid email address.
	*/
	@Test
	void testColonneMail3() {
		ModifTableStockage modifTableStockage = new Mod"
cmpl-6wvZuJy23zeyt5kBrqTOTRVVJBE0A,/EvoSuiteBenchmark/scenario3/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage2.java,152.28704071044922,length,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     *
     * @return TableStockage
     */
    public TableStockage selectMail();
}
","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockageTest {","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockageTest {

	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* It tests the case where the user selects all the emails.
	*/
	@Test
	void selectMailTest1() {
		TableStockage table = new TableStockage();
		table.addColumn(""Email"");
		table.addColumn(""Nom"");
		table.addColumn(""Prenom"");
		table.addColumn(""Age"");
		table.addColumn(""Sexe"");
		table.addColumn(""Ville"");
		table.addColumn(""Pays"");
		table.addColumn(""Date"");
		table.addColumn(""Heure"");
		table.addColumn(""IP"");
		table.addColumn(""URL"");
		table.addColumn(""Nom_Site"");
		table.addColumn(""Nom_Page"");
		table.addColumn(""Nom_Formulaire"");
		table.addColumn(""Nom_Champ"");
		table.addColumn(""Valeur"");
		table.addColumn(""Type"");
		table.addColumn(""Nom_Bouton"");
		table.addColumn(""Nom_Menu"");
		table.addColumn(""Nom_Item"");
		table.addColumn(""Nom_Lien"");
		table.addColumn(""Nom_Image"");
		table.addColumn(""Nom_Son"");
		table.addColumn(""Nom_Video"");
		table.addColumn(""Nom_Applet"");
		table.addColumn(""Nom_ActiveX"");
		table.addColumn(""Nom_Flash"");
		table.addColumn(""Nom_PDF"");
		table.addColumn(""Nom_JavaScript"");
		table.addColumn(""Nom_CSS"");
		table.addColumn(""Nom_Cookie"");
		table.addColumn(""Nom_Fichier"");
		table.addColumn(""Nom_Autre"");
		table.addColumn(""Nom_Autre_Objet"");
		table.addColumn(""Nom_Autre_Attribut"");
		table.addColumn(""Nom_Autre_Valeur"");
		table.addColumn(""Nom_Autre_Type"");
		table.addColumn(""Nom_Autre_Bouton"");
		table.addColumn(""Nom_Autre_Menu"");
		table.addColumn(""Nom_Autre_Item"");
		table.addColumn(""Nom_Autre_Lien"");
		table.addColumn(""Nom_Autre_Image"");
		table.addColumn(""Nom_Autre_Son"");
		table.addColumn(""Nom_Autre_Video"");
		table.addColumn(""Nom_Autre_Applet"");
		table.addColumn(""Nom_Autre_ActiveX"");
		table.addColumn(""Nom_Autre_Flash"");
		table.addColumn(""Nom_Autre_PDF"");
		table.addColumn(""Nom_Autre_JavaScript"");
		table.addColumn(""Nom_Autre_CSS"");
		table.addColumn(""Nom_Autre_Cookie"");
		table.addColumn(""Nom_Autre_Fichier"");
		table.addColumn(""Nom_Autre_Autre"");
		table.addColumn(""Nom_Autre_Autre_Objet"");
		table.addColumn(""Nom_Autre_Autre_Attribut"");
		table.addColumn(""Nom_Autre_Autre_Valeur"");
		table.addColumn(""Nom_Autre_Autre_Type"");
		table.addColumn(""Nom_Autre_Autre_Bouton"");
		table.addColumn(""Nom_Autre_Autre_Menu"");
		table.addColumn(""Nom_Autre_Autre_Item"");
		table.addColumn(""Nom_Autre_Autre_Lien"");
		table.addColumn(""Nom_Autre_Autre_Image"");
		table.addColumn(""Nom_Autre_Autre_Son"");
		table.addColumn(""Nom_Autre_Autre_Video"");
		table.addColumn(""Nom_Autre_Autre_Applet"");
		table.addColumn(""Nom_Autre_Autre_ActiveX"");
		table.addColumn(""Nom_Autre_Autre_Flash"");
		table.addColumn(""Nom_Autre_Autre_PDF"");
		table.addColumn(""Nom_Autre_Autre_JavaScript"");
		table.addColumn(""Nom_Autre_Autre_CSS"");
		table.addColumn(""Nom_Autre_Autre_Cookie"");
		table.addColumn(""Nom_Autre_Autre_Fichier"");
		table.addColumn(""Nom_Autre_Autre_Autre"");
		table.addColumn(""Nom_Autre_Autre_Autre_Objet"");
		table.addColumn(""Nom_Autre_Autre_Autre_Attribut"");
		table.addColumn(""Nom_Autre_Autre_Autre_Valeur"");
		table.addColumn(""Nom_Autre_Autre_Autre_Type"");
		table.addColumn(""Nom_Autre_Autre_Autre_Bouton"");
		table.addColumn(""Nom_Autre_Autre_Autre_Menu"");
		table.addColumn(""Nom_Autre_Autre_Autre_Item"");
		table.addColumn(""Nom_Autre_Autre_Autre_Lien"");
		table.addColumn(""Nom_Autre_Autre_Autre_Image"");
		table.addColumn(""Nom_Autre_Autre_Autre_Son"");
		table.addColumn(""Nom_Autre_Autre_Autre_Video"");
		table.addColumn(""Nom_Autre_Autre_Autre_Applet"");
		table.addColumn(""Nom_Autre_Autre_Autre_ActiveX"");
		table.addColumn(""Nom_Autre_Autre_Autre_Flash"");
		table.addColumn(""Nom_Autre_Autre_Autre_PDF"");
		table.addColumn(""Nom_Autre_Autre_Autre_JavaScript"");
		table.addColumn(""Nom_Autre_Autre_Autre_CSS"");
		table.addColumn(""Nom_Autre_Autre_Autre_Cookie"");
		table.addColumn(""Nom_Autre_Autre_Autre_Fichier"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Objet"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Attribut"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Valeur"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Type"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Bouton"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Menu"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Item"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Lien"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Image"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Son"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Video"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Applet"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_ActiveX"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Flash"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_PDF"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_JavaScript"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_CSS"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Cookie"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Fichier"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Objet"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Attribut"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Valeur"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Type"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Bouton"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Menu"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Item"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Lien"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Image"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Son"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Video"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Applet"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_ActiveX"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Flash"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_PDF"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_JavaScript"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_CSS"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Cookie"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Fichier"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Objet"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Attribut"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Valeur"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Type"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Bouton"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Menu"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Item"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Lien"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Image"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Son"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Video"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Applet"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_ActiveX"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Flash"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_PDF"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_JavaScript"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_CSS"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Cookie"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Fichier"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Autre"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Autre_Objet"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Autre_Attribut"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Autre_Valeur"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Autre_Type"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Autre_Bouton"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Autre_Menu"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Autre_Item"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Autre_Lien"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Autre_Image"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Autre_Son"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Autre_Video"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Autre_Applet"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Autre_ActiveX"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Autre_Flash"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Autre_PDF"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Autre_JavaScript"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre_Autre_CSS"");
		table.addColumn(""Nom_Autre_Autre_Autre_Autre_Autre_Autre"
cmpl-6wvcMMBrdW33sra8JWmqDxXeTW1z5,/EvoSuiteBenchmark/scenario3/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler.java,156.07702016830444,length,"// Controler.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;

/**
 * Fait la liaison entre l'interface graphique et le moteur de l'application
 * Rend comprehensible les requetes de l'interface graphique pour les bases de
 * donnees
 *
 * @author scarankle
 */
public class Controler {

    /**
     * Retourne toutes les formations
     *
     * @return un tableau contenant toutes les formations
     */
    public Formation[] findAllFormation();
}
","// ControlerTest.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findAllFormation()} method.
*/
class ControlerTest {","// ControlerTest.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findAllFormation()} method.
*/
class ControlerTest {

	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation1() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
	
	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation2() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
	
	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation3() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
	
	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation4() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
	
	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation5() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
	
	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation6() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
	
	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation7() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
	
	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation8() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
	
	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation9() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
	
	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation10() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
}

// DaoFactory.java
package fr.unice.gfarce.dao;

import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;

/**
 * Fabrique de DAO
 *
 * @author scarankle
 */
public abstract class DaoFactory {

    /**
     * Enumeration des types de fabriques de DAO
     */
    public enum TypeFabrique {

        /**
         * Fabrique de DAO pour une base de donnees
         */
        DB,
        /**
         * Fabrique de DAO pour un fichier XML
         */
        XML
    }

    /**
     * Fabrique de DAO pour une base de donnees
     */
    public static final TypeFabrique DB = TypeFabrique.DB;
    /**
     * Fabrique de DAO pour un fichier XML
     */
    public static final TypeFabrique XML = TypeFabrique.XML;

    /**
     * Fabrique de DAO
     *
     * @param typeFabrique le type de fabrique de DAO
     * @return une fabrique de DAO
     * @throws DaoFactoryException si le type de fabrique n'est pas reconnu
     */
    public static DaoFactory getDaoFactory(TypeFabrique typeFabrique) throws DaoFactoryException {
        switch (typeFabrique) {
            case DB:
                return new DaoFactoryDB();
            case XML:
                return new DaoFactoryXML();
            default:
                throw new DaoFactoryException(""Type de fabrique inconnu : "" + typeFabrique);
        }
    }

    /**
     * Retourne un DAO pour les formations
     *
     * @return un DAO pour les formations
     */
    public abstract FormationDao getFormationDao();

    /**
     * Retourne un DAO pour les identites
     *
     * @return un DAO pour les identites
     */
    public abstract IdentiteDao getIdentiteDao();
}

// DaoFactoryDB.java
package fr.unice.gfarce.dao;

import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;

/**
 * Fabrique de DAO pour une base de donnees
 *
 * @author scarankle
 */
public class DaoFactoryDB extends DaoFactory {

    /**
     * Retourne un DAO pour les formations
     *
     * @return un DAO pour les formations
     */
    @Override
    public FormationDao getFormationDao() {
        return new FormationDaoDB();
    }

    /**
     * Retourne un DAO pour les identites
     *
     * @return un DAO pour les identites
     */
    @Override
    public IdentiteDao getIdentiteDao() {
        return new IdentiteDaoDB();
    }
}

// DaoFactoryException.java
package fr.unice.gfarce.dao;

/**
 * Exception levee par les fabriques de DAO
 *
 * @author scarankle
 */
public class DaoFactoryException extends Exception {

    /**
     * Constructeur
     *
     * @param message le message de l'exception
     */
    public DaoFactoryException(String message) {
        super(message);
    }
}

// DaoFactoryXML.java
package fr.unice.gfarce.dao;

import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;

/**
 * Fabrique de DAO pour un fichier XML
 *
 * @author scarankle
 */
public class DaoFactoryXML extends DaoFactory {

    /**
     * Retourne un DAO pour les formations
     *
     * @return un DAO pour les formations
     */
    @Override
    public FormationDao getFormationDao() {
        return new FormationDaoXML();
    }

    /**
     * Retourne un DAO pour les identites
     *
     * @return un DAO pour les identites
     */
    @Override
    public IdentiteDao getIdentiteDao() {
        return new IdentiteDaoXML();
    }
}

// Formation.java
package fr.unice.gfarce.identity;

import java.util.Calendar;
import java.util.Collection;

/**
 * Formation
 *
 * @author scarankle
 */
public class Formation {

    /**
     * Nom de la formation
     */
    private String nom;
    /**
     * Date de debut de la formation
     */
    private Calendar dateDebut;
    /**
     * Date de fin de la formation
     */
    private Calendar dateFin;
    /**
     * Candidats de la formation
     */
    private Collection<Candidat> candidats;
    /**
     * Responsable de la formation
     */
    private RespFormation respFormation;

    /**
     * Constructeur
     *
     * @param nom le nom de la formation
     * @param dateDebut la date de debut de la formation
     * @param dateFin la date de fin de la formation
     * @param candidats les candidats de la formation
     * @param respFormation le responsable de la formation
     */
    public Formation(String nom, Calendar dateDebut, Calendar dateFin, Collection<Candidat> candidats, RespFormation respFormation) {
        this.nom = nom;
        this.dateDebut = dateDebut;
        this.dateFin = dateFin;
        this.candidats = candidats;
        this.respFormation = respFormation;
    }

    /**
     * Retourne le nom de la formation
     *
     * @return le nom de la formation
     */
    public String getNom() {
        return nom;
    }

    /**
     * Retourne la date de debut de la formation
     *
     * @return la date de debut de la formation
     */
    public Calendar getDateDebut() {
        return dateDebut;
    }

    /**
     * Retourne la date de fin de la formation
     *
     * @return la date de fin de la formation
     */
    public Calendar getDateFin() {
        return dateFin;
    }

    /**
     * Retourne les candidats de la formation
     *
     * @return les candidats de la formation
     */
    public Collection<Candidat> getCandidats() {
        return candidats;
    }

    /**
     * Retourne le responsable de la formation
     *
     * @return le responsable de la formation
     */
    public RespFormation getRespFormation() {
        return respFormation;
    }
}

// FormationDao.java
package fr.unice.gfarce.dao;

import fr.unice.gfarce.identity.Formation;
import java.util.Collection;

/**
 * DAO pour les formations
 *
 * @author scarankle
 */
public interface FormationDao {

    /**
     * Retourne toutes les formations
     *
     * @return un tableau contenant toutes les formations
     */
    public Formation[] findAllFormation();

    /**
     * Retourne une formation
     *
     * @param nom le nom de la formation
     * @return la formation
     */
    public Formation findFormation(String nom);

    /**
     * Retourne les formations d'un candidat
     *
     * @param candidat le candidat
     * @return les formations du candidat
     */
    public Collection<Formation> findFormationByCandidat(String candidat);

    /**
     * Retourne les formations d'un responsable
     *
     * @param responsable le responsable
     * @return les formations du responsable
     */
    public Collection<Formation> findFormationByResponsable(String responsable);

    /**
     * Retourne les formations d'un candidat
     *
     * @param candidat le candidat
     * @return les formations du candidat
     */
    public Collection<Formation> findFormationByCandidat(int candidat);

    /**
     * Retourne les formations d'un responsable
     *
     * @param responsable le responsable
     * @return les formations du responsable
     */
    public Collection<Formation> findFormationByResponsable(int responsable);

    /**
     * Ajoute une formation
     *
     * @param formation la formation a ajouter
     */
    public void addFormation(Formation formation);

    /**
     * Supprime une formation
     *
     * @param formation la formation a supprimer
     */
    public void removeFormation(Formation formation);
}

// FormationDaoDB.java
package fr.unice.gfarce.dao;

import fr.unice.gfarce.identity.Formation;
import java.util.Collection;

/**
 * DAO pour les formations pour une base de donnees
 *
 * @author scarankle
 */
public class FormationDaoDB implements FormationDao {

    /**
     * Retourne toutes les formations
     *
     * @return un tableau contenant toutes les formations
     */
    @Override
    public Formation[] findAllFormation() {
        return null;
    }

    /**
     * Retourne une formation
     *
     * @param nom le nom de la formation
     * @return la formation
     */
    @Override
    public Formation findFormation(String nom) {
        return null;
    }

    /**
     * Retourne les formations d'un candidat
     *
     * @param candidat le candidat
     * @return les formations du candidat
     */
    @Override
    public Collection<Formation> findFormationByCandidat(String candidat) {
        return null;
    }

    /**
     * Retourne les formations d'un responsable
     *
     * @param responsable le responsable
     * @return les formations du responsable
     */
    @Override
    public Collection<Formation> findFormationByResponsable(String responsable) {
        return null;
    }

    /**
     * Retourne les formations d'un candidat
     *
     * @param candidat le candidat
     * @return les formations du candidat
     */
    @Override
    public Collection<Formation> findFormationByCandidat(int candidat) {
        return null;
    }

    /**
     * Retourne les formations d'un responsable
     *
     * @param responsable le responsable
     * @return les formations du responsable
     */
    @Override
    public Collection<Formation> findFormationByResponsable(int responsable) {
        return null;
    }

    /**
     * Ajoute une formation
     *
     * @param formation la formation a ajouter
     */
    @Override
    public void addFormation(Formation formation) {
    }

    /**
     * Supprime une formation
     *
     * @param formation la formation a supprimer
     */
    @Override
    public void removeFormation(Formation formation) {
    }
}

// FormationDaoXML.java
package fr.unice.gfarce.dao;

import fr.unice.gfarce.identity.Formation;
import java.util.Collection;

/**
 * DAO pour les formations pour un fichier XML
 *
 * @author scarankle
 */
public class FormationDaoXML implements FormationDao {

    /**
     * Retour"
