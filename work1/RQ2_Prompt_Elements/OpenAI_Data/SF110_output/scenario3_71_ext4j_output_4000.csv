ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6x9eSoekZoFH4e2YgrClAOO9BuJCB,/EvoSuiteBenchmark/scenario3/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory0.java,164.78197407722473,length,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create an instance of {@link Page }
     */
    public Page createPage();
}
","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactoryTest {","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactoryTest {

	/**
	* Test case for {@link ObjectFactory#createPage()} method.
	* It tests if the method returns a {@link Page} object.
	*/
	@Test
	void testCreatePage() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page page = objectFactory.createPage();
		assertNotNull(page);
	}
}

// Page.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for anonymous complex type.
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""pageNumber"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""pageSize"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""totalPages"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""totalResults"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = """", propOrder = {
    ""pageNumber"",
    ""pageSize"",
    ""totalPages"",
    ""totalResults""
})
@XmlRootElement(name = ""page"")
public class Page {

    protected int pageNumber;
    protected int pageSize;
    protected int totalPages;
    protected int totalResults;

    /**
     * Gets the value of the pageNumber property.
     */
    public int getPageNumber() {
        return pageNumber;
    }

    /**
     * Sets the value of the pageNumber property.
     */
    public void setPageNumber(int value) {
        this.pageNumber = value;
    }

    /**
     * Gets the value of the pageSize property.
     */
    public int getPageSize() {
        return pageSize;
    }

    /**
     * Sets the value of the pageSize property.
     */
    public void setPageSize(int value) {
        this.pageSize = value;
    }

    /**
     * Gets the value of the totalPages property.
     */
    public int getTotalPages() {
        return totalPages;
    }

    /**
     * Sets the value of the totalPages property.
     */
    public void setTotalPages(int value) {
        this.totalPages = value;
    }

    /**
     * Gets the value of the totalResults property.
     */
    public int getTotalResults() {
        return totalResults;
    }

    /**
     * Sets the value of the totalResults property.
     */
    public void setTotalResults(int value) {
        this.totalResults = value;
    }
}

// PageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Page}.
* It contains ten unit test cases for the {@link Page#getPageNumber()} method.
*/
class PageTest {
		
	/**
	* Test case for {@link Page#getPageNumber()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetPageNumber() {
		Page page = new Page();
		page.setPageNumber(1);
		assertEquals(1, page.getPageNumber());
	}
}

// Pagination.java
package com.tripfilms.os.exttaglib.pagination;

import com.tripfilms.os.exttaglib.pagination.datatype.Page;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.TagSupport;

/**
 * <p>Tag handler class for the pagination tag.</p>
 * <p>It creates a pagination bar with links to the previous and next pages.</p>
 */
public class Pagination extends TagSupport {

    private static final long serialVersionUID = 1L;
    private Page page;
    private String url;
    private String cssClass;
    private String cssClassCurrent;
    private String cssClassPrevious;
    private String cssClassNext;
    private String cssClassFirst;
    private String cssClassLast;
    private String cssClassPreviousDisabled;
    private String cssClassNextDisabled;
    private String cssClassFirstDisabled;
    private String cssClassLastDisabled;
    private String cssClassPreviousHidden;
    private String cssClassNextHidden;
    private String cssClassFirstHidden;
    private String cssClassLastHidden;
    private String cssClassPreviousLink;
    private String cssClassNextLink;
    private String cssClassFirstLink;
    private String cssClassLastLink;
    private String cssClassPreviousLinkDisabled;
    private String cssClassNextLinkDisabled;
    private String cssClassFirstLinkDisabled;
    private String cssClassLastLinkDisabled;
    private String cssClassPreviousLinkHidden;
    private String cssClassNextLinkHidden;
    private String cssClassFirstLinkHidden;
    private String cssClassLastLinkHidden;
    private String previousText;
    private String nextText;
    private String firstText;
    private String lastText;
    private String previousTextDisabled;
    private String nextTextDisabled;
    private String firstTextDisabled;
    private String lastTextDisabled;
    private String previousTextHidden;
    private String nextTextHidden;
    private String firstTextHidden;
    private String lastTextHidden;
    private String previousTextLink;
    private String nextTextLink;
    private String firstTextLink;
    private String lastTextLink;
    private String previousTextLinkDisabled;
    private String nextTextLinkDisabled;
    private String firstTextLinkDisabled;
    private String lastTextLinkDisabled;
    private String previousTextLinkHidden;
    private String nextTextLinkHidden;
    private String firstTextLinkHidden;
    private String lastTextLinkHidden;
    private String previousTitle;
    private String nextTitle;
    private String firstTitle;
    private String lastTitle;
    private String previousTitleDisabled;
    private String nextTitleDisabled;
    private String firstTitleDisabled;
    private String lastTitleDisabled;
    private String previousTitleHidden;
    private String nextTitleHidden;
    private String firstTitleHidden;
    private String lastTitleHidden;
    private String previousTitleLink;
    private String nextTitleLink;
    private String firstTitleLink;
    private String lastTitleLink;
    private String previousTitleLinkDisabled;
    private String nextTitleLinkDisabled;
    private String firstTitleLinkDisabled;
    private String lastTitleLinkDisabled;
    private String previousTitleLinkHidden;
    private String nextTitleLinkHidden;
    private String firstTitleLinkHidden;
    private String lastTitleLinkHidden;
    private String previousUrl;
    private String nextUrl;
    private String firstUrl;
    private String lastUrl;
    private String previousUrlDisabled;
    private String nextUrlDisabled;
    private String firstUrlDisabled;
    private String lastUrlDisabled;
    private String previousUrlHidden;
    private String nextUrlHidden;
    private String firstUrlHidden;
    private String lastUrlHidden;
    private String previousUrlLink;
    private String nextUrlLink;
    private String firstUrlLink;
    private String lastUrlLink;
    private String previousUrlLinkDisabled;
    private String nextUrlLinkDisabled;
    private String firstUrlLinkDisabled;
    private String lastUrlLinkDisabled;
    private String previousUrlLinkHidden;
    private String nextUrlLinkHidden;
    private String firstUrlLinkHidden;
    private String lastUrlLinkHidden;
    private String previousUrlParameter;
    private String nextUrlParameter;
    private String firstUrlParameter;
    private String lastUrlParameter;
    private String previousUrlParameterDisabled;
    private String nextUrlParameterDisabled;
    private String firstUrlParameterDisabled;
    private String lastUrlParameterDisabled;
    private String previousUrlParameterHidden;
    private String nextUrlParameterHidden;
    private String firstUrlParameterHidden;
    private String lastUrlParameterHidden;
    private String previousUrlParameterLink;
    private String nextUrlParameterLink;
    private String firstUrlParameterLink;
    private String lastUrlParameterLink;
    private String previousUrlParameterLinkDisabled;
    private String nextUrlParameterLinkDisabled;
    private String firstUrlParameterLinkDisabled;
    private String lastUrlParameterLinkDisabled;
    private String previousUrlParameterLinkHidden;
    private String nextUrlParameterLinkHidden;
    private String firstUrlParameterLinkHidden;
    private String lastUrlParameterLinkHidden;
    private String previousUrlParameterValue;
    private String nextUrlParameterValue;
    private String firstUrlParameterValue;
    private String lastUrlParameterValue;
    private String previousUrlParameterValueDisabled;
    private String nextUrlParameterValueDisabled;
    private String firstUrlParameterValueDisabled;
    private String lastUrlParameterValueDisabled;
    private String previousUrlParameterValueHidden;
    private String nextUrlParameterValueHidden;
    private String firstUrlParameterValueHidden;
    private String lastUrlParameterValueHidden;
    private String previousUrlParameterValueLink;
    private String nextUrlParameterValueLink;
    private String firstUrlParameterValueLink;
    private String lastUrlParameterValueLink;
    private String previousUrlParameterValueLinkDisabled;
    private String nextUrlParameterValueLinkDisabled;
    private String firstUrlParameterValueLinkDisabled;
    private String lastUrlParameterValueLinkDisabled;
    private String previousUrlParameterValueLinkHidden;
    private String nextUrlParameterValueLinkHidden;
    private String firstUrlParameterValueLinkHidden;
    private String lastUrlParameterValueLinkHidden;
    private String previousUrlParameterValueCurrent;
    private String nextUrlParameterValueCurrent;
    private String firstUrlParameterValueCurrent;
    private String lastUrlParameterValueCurrent;
    private String previousUrlParameterValueCurrentDisabled;
    private String nextUrlParameterValueCurrentDisabled;
    private String firstUrlParameterValueCurrentDisabled;
    private String lastUrlParameterValueCurrentDisabled;
    private String previousUrlParameterValueCurrentHidden;
    private String nextUrlParameterValueCurrentHidden;
    private String firstUrlParameterValueCurrentHidden;
    private String lastUrlParameterValueCurrentHidden;
    private String previousUrlParameterValueCurrentLink;
    private String nextUrlParameterValueCurrentLink;
    private String firstUrlParameterValueCurrentLink;
    private String lastUrlParameterValueCurrentLink;
    private String previousUrlParameterValueCurrentLinkDisabled;
    private String nextUrlParameterValueCurrentLinkDisabled;
    private String firstUrlParameterValueCurrentLinkDisabled;
    private String lastUrlParameterValueCurrentLinkDisabled;
    private String previousUrlParameterValueCurrentLinkHidden;
    private String nextUrlParameterValueCurrentLinkHidden;
    private String firstUrlParameterValueCurrentLinkHidden;
    private String lastUrlParameterValueCurrentLinkHidden;
    private String previousUrlParameterValuePrevious;
    private String nextUrlParameterValuePrevious;
    private String firstUrlParameterValuePrevious;
    private String lastUrlParameterValuePrevious;
    private String previousUrlParameterValuePreviousDisabled;
    private String nextUrlParameterValuePreviousDisabled;
    private String firstUrlParameterValuePreviousDisabled;
    private String lastUrlParameterValuePreviousDisabled;
    private String previousUrlParameterValuePreviousHidden;
    private String nextUrlParameterValuePreviousHidden;
    private String firstUrlParameterValuePreviousHidden;
    private String lastUrlParameterValuePreviousHidden;
    private String previousUrlParameterValuePreviousLink;
    private String nextUrlParameterValuePreviousLink;
    private String firstUrlParameterValuePreviousLink;
    private String lastUrlParameterValuePreviousLink;
    private String previousUrlParameterValuePreviousLinkDisabled;
    private String nextUrlParameterValuePreviousLinkDisabled;
    private String firstUrlParameterValuePreviousLinkDisabled;
    private String lastUrlParameterValuePreviousLinkDisabled;
    private String previousUrlParameterValuePreviousLinkHidden;
    private String nextUrlParameterValuePreviousLinkHidden;
    private String firstUrlParameterValuePreviousLinkHidden;
    private String lastUrlParameterValuePreviousLinkHidden;
    private String previousUrlParameterValueNext;
    private String nextUrlParameterValueNext;
    private String firstUrlParameterValueNext;
    private String lastUrlParameterValueNext;
    private String previousUrlParameterValueNextDisabled;
    private String nextUrlParameterValueNextDisabled;
    private String firstUrlParameterValueNextDisabled;
    private String lastUrlParameterValueNextDisabled;
    private String previousUrlParameterValueNextHidden;
    private String nextUrlParameterValueNextHidden;
    private String firstUrlParameterValueNextHidden;
    private String lastUrlParameterValueNextHidden;
    private String previousUrlParameterValueNextLink;
    private String nextUrlParameterValueNextLink;
    private String firstUrlParameterValueNextLink;
    private String lastUrlParameterValueNextLink;
    private String previousUrlParameterValueNextLinkDisabled;
    private String nextUrlParameterValueNextLinkDisabled;
    private String firstUrlParameterValueNextLinkDisabled;
    private String lastUrlParameterValueNextLinkDisabled;
    private String previousUrlParameterValueNextLinkHidden;
    private String nextUrlParameterValueNextLinkHidden;
    private String firstUrlParameterValueNextLinkHidden;
    private String lastUrlParameterValueNextLinkHidden;
    private String previousUrlParameterValueFirst;
    private String nextUrlParameterValueFirst;
    private String firstUrlParameterValueFirst;
    private String lastUrlParameterValueFirst;
    private String previousUrlParameterValueFirstDisabled;
    private String nextUrlParameterValueFirstDisabled;
    private String firstUrlParameterValueFirstDisabled;
    private String lastUrlParameterValueFirstDisabled;
    private String previousUrlParameterValueFirstHidden;
    private String nextUrlParameterValueFirstHidden;
    private String firstUrlParameterValueFirstHidden;
    private String lastUrlParameterValueFirstHidden;
    private String previousUrlParameterValueFirstLink;
    private String nextUrlParameterValueFirstLink;
    private String firstUrlParameterValueFirstLink;
    private String lastUrlParameterValueFirstLink;
    private String previousUrlParameterValueFirstLinkDisabled;
    private String nextUrlParameterValueFirstLinkDisabled;
    private String firstUrlParameterValueFirstLinkDisabled;
    private String lastUrlParameterValueFirstLinkDisabled;
    private String previousUrlParameterValueFirstLinkHidden;
    private String nextUrlParameterValueFirstLinkHidden;
    private String firstUrlParameterValueFirstLinkHidden;
    private String lastUrlParameterValueFirstLinkHidden;
    private String previousUrlParameterValueLast;
    private String nextUrlParameterValueLast;
    private String firstUrlParameterValueLast;
    private String lastUrlParameterValueLast;
    private String previousUrlParameterValueLastDisabled;
    private String nextUrlParameterValueLastDisabled;
    private String firstUrlParameterValueLastDisabled;
    private String lastUrlParameterValueLastDisabled;
    private String previousUrlParameterValueLastHidden;
    private String nextUrlParameterValueLastHidden;
    private String firstUrlParameterValueLastHidden;
    private String lastUrlParameterValueLastHidden;
    private String previousUrlParameterValueLastLink;
    private String nextUrlParameterValueLastLink;
    private String firstUrlParameterValueLastLink;
    private String lastUrlParameterValueLastLink;
    private String previousUrlParameterValueLastLinkDisabled;
    private String nextUrlParameterValueLastLinkDisabled;
    private String firstUrlParameterValueLastLinkDisabled;
    private String lastUrlParameterValueLastLinkDisabled;
    private String previousUrlParameterValueLastLinkHidden;
"
cmpl-6x9h7VEw2m8EfrEanwzyMWEIqpBEN,/EvoSuiteBenchmark/scenario3/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory1.java,179.4049575328827,length,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create an instance of {@link StaticPage }
     */
    public StaticPage createStaticPage();
}
","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactoryTest {","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactoryTest {

	/**
	* Test case for {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage staticPage = objectFactory.createStaticPage();
		assertNotNull(staticPage);
	}
}

// StaticPage.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for StaticPage complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name=""StaticPage"">
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;attribute name=""pageNumber"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}int"" />
 *       &lt;attribute name=""pageSize"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}int"" />
 *       &lt;attribute name=""totalCount"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}int"" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""StaticPage"")
public class StaticPage {

    @XmlAttribute(name = ""pageNumber"", required = true)
    protected int pageNumber;
    @XmlAttribute(name = ""pageSize"", required = true)
    protected int pageSize;
    @XmlAttribute(name = ""totalCount"", required = true)
    protected int totalCount;

    /**
     * Gets the value of the pageNumber property.
     *
     */
    public int getPageNumber() {
        return pageNumber;
    }

    /**
     * Sets the value of the pageNumber property.
     *
     */
    public void setPageNumber(int value) {
        this.pageNumber = value;
    }

    /**
     * Gets the value of the pageSize property.
     *
     */
    public int getPageSize() {
        return pageSize;
    }

    /**
     * Sets the value of the pageSize property.
     *
     */
    public void setPageSize(int value) {
        this.pageSize = value;
    }

    /**
     * Gets the value of the totalCount property.
     *
     */
    public int getTotalCount() {
        return totalCount;
    }

    /**
     * Sets the value of the totalCount property.
     *
     */
    public void setTotalCount(int value) {
        this.totalCount = value;
    }
}

// StaticPageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StaticPage}.
* It contains ten unit test cases for the {@link StaticPage#getPageNumber()}, {@link StaticPage#setPageNumber(int)}, {@link StaticPage#getPageSize()}, {@link StaticPage#setPageSize(int)}, {@link StaticPage#getTotalCount()} and {@link StaticPage#setTotalCount(int)} methods.
*/
class StaticPageTest {
		
	/**
	* Test case for {@link StaticPage#getPageNumber()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testGetPageNumber() {
		StaticPage staticPage = new StaticPage();
		staticPage.setPageNumber(1);
		assertEquals(1, staticPage.getPageNumber());
	}
	
	/**
	* Test case for {@link StaticPage#setPageNumber(int)} method.
	* It tests the {@link StaticPage#setPageNumber(int)} method.
	*/
	@Test
	void testSetPageNumber() {
		StaticPage staticPage = new StaticPage();
		staticPage.setPageNumber(1);
		assertEquals(1, staticPage.getPageNumber());
	}
	
	/**
	* Test case for {@link StaticPage#getPageSize()} method.
	* It tests the {@link StaticPage#getPageSize()} method.
	*/
	@Test
	void testGetPageSize() {
		StaticPage staticPage = new StaticPage();
		staticPage.setPageSize(1);
		assertEquals(1, staticPage.getPageSize());
	}
	
	/**
	* Test case for {@link StaticPage#setPageSize(int)} method.
	* It tests the {@link StaticPage#setPageSize(int)} method.
	*/
	@Test
	void testSetPageSize() {
		StaticPage staticPage = new StaticPage();
		staticPage.setPageSize(1);
		assertEquals(1, staticPage.getPageSize());
	}
	
	/**
	* Test case for {@link StaticPage#getTotalCount()} method.
	* It tests the {@link StaticPage#getTotalCount()} method.
	*/
	@Test
	void testGetTotalCount() {
		StaticPage staticPage = new StaticPage();
		staticPage.setTotalCount(1);
		assertEquals(1, staticPage.getTotalCount());
	}
	
	/**
	* Test case for {@link StaticPage#setTotalCount(int)} method.
	* It tests the {@link StaticPage#setTotalCount(int)} method.
	*/
	@Test
	void testSetTotalCount() {
		StaticPage staticPage = new StaticPage();
		staticPage.setTotalCount(1);
		assertEquals(1, staticPage.getTotalCount());
	}
}

// PaginationTag.java
package com.tripfilms.os.exttaglib.pagination;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.TagSupport;
import com.tripfilms.os.exttaglib.pagination.datatype.StaticPage;

/**
 * <p>Tag handler class for the pagination tag.</p>
 *
 * <p>This tag handler class is used to display the pagination links.</p>
 *
 * @author  <a href=""mailto:sudhir.kumar@tripfilms.com"">Sudhir Kumar</a>
 * @version 1.0
 */
public class PaginationTag extends TagSupport {

    /**
     * <p>The serial version UID.</p>
     */
    private static final long serialVersionUID = 1L;

    /**
     * <p>The static page.</p>
     */
    private StaticPage staticPage;

    /**
     * <p>The page number.</p>
     */
    private int pageNumber;

    /**
     * <p>The page size.</p>
     */
    private int pageSize;

    /**
     * <p>The total count.</p>
     */
    private int totalCount;

    /**
     * <p>The page link.</p>
     */
    private String pageLink;

    /**
     * <p>The page link parameter.</p>
     */
    private String pageLinkParameter;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue2;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue3;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue4;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue5;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue6;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue7;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue8;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue9;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue10;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue11;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue12;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue13;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue14;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue15;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue16;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue17;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue18;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue19;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue20;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue21;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue22;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue23;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue24;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue25;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue26;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue27;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue28;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue29;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue30;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue31;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue32;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue33;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue34;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue35;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue36;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue37;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue38;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue39;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue40;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue41;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue42;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue43;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue44;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue45;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue46;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue47;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue48;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue49;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue50;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue51;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue52;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue53;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue54;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue55;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue56;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue57;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue58;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue59;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue60;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue61;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue62;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue63;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue64;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue65;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue66;

    /**
     * <p>The page link parameter value"
cmpl-6x9k06aZAdRiw9Hfm4oMeCcYiG0Zb,/EvoSuiteBenchmark/scenario3/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory2.java,57.46865510940552,stop,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create an instance of {@link Pagination }
     */
    public Pagination createPagination();
}
","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactoryTest {","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactoryTest {

	/**
	* Test case for {@link ObjectFactory#createPagination()} method.
	* It tests if the method returns a {@link Pagination} object.
	*/
	@Test
	void testCreatePagination() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pagination pagination = objectFactory.createPagination();
		assertTrue(pagination instanceof Pagination);
	}
}

// Pagination.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for anonymous complex type.
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""currentPage"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""totalPages"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""totalResults"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""resultsPerPage"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = """", propOrder = {
    ""currentPage"",
    ""totalPages"",
    ""totalResults"",
    ""resultsPerPage""
})
@XmlRootElement(name = ""pagination"")
public class Pagination {

    protected int currentPage;
    protected int totalPages;
    protected int totalResults;
    protected int resultsPerPage;

    /**
     * Gets the value of the currentPage property.
     */
    public int getCurrentPage() {
        return currentPage;
    }

    /**
     * Sets the value of the currentPage property.
     */
    public void setCurrentPage(int value) {
        this.currentPage = value;
    }

    /**
     * Gets the value of the totalPages property.
     */
    public int getTotalPages() {
        return totalPages;
    }

    /**
     * Sets the value of the totalPages property.
     */
    public void setTotalPages(int value) {
        this.totalPages = value;
    }

    /**
     * Gets the value of the totalResults property.
     */
    public int getTotalResults() {
        return totalResults;
    }

    /**
     * Sets the value of the totalResults property.
     */
    public void setTotalResults(int value) {
        this.totalResults = value;
    }

    /**
     * Gets the value of the resultsPerPage property.
     */
    public int getResultsPerPage() {
        return resultsPerPage;
    }

    /**
     * Sets the value of the resultsPerPage property.
     */
    public void setResultsPerPage(int value) {
        this.resultsPerPage = value;
    }
}

// PaginationTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Pagination}.
* It contains ten unit test cases for the {@link Pagination#getCurrentPage()}, {@link Pagination#setCurrentPage(int)},
* {@link Pagination#getTotalPages()}, {@link Pagination#setTotalPages(int)}, {@link Pagination#getTotalResults()},
* {@link Pagination#setTotalResults(int)}, {@link Pagination#getResultsPerPage()} and {@link Pagination#setResultsPerPage(int)} methods.
*/
class PaginationTest {
		
	/**
	* Test case for {@link Pagination#getCurrentPage()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetCurrentPage() {
		Pagination pagination = new Pagination();
		pagination.setCurrentPage(1);
		assertEquals(1, pagination.getCurrentPage());
	}
	
	/**
	* Test case for {@link Pagination#setCurrentPage(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetCurrentPage() {
		Pagination pagination = new Pagination();
		pagination.setCurrentPage(1);
		assertEquals(1, pagination.getCurrentPage());
	}
	
	/**
	* Test case for {@link Pagination#getTotalPages()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetTotalPages() {
		Pagination pagination = new Pagination();
		pagination.setTotalPages(1);
		assertEquals(1, pagination.getTotalPages());
	}
	
	/**
	* Test case for {@link Pagination#setTotalPages(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetTotalPages() {
		Pagination pagination = new Pagination();
		pagination.setTotalPages(1);
		assertEquals(1, pagination.getTotalPages());
	}
	
	/**
	* Test case for {@link Pagination#getTotalResults()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetTotalResults() {
		Pagination pagination = new Pagination();
		pagination.setTotalResults(1);
		assertEquals(1, pagination.getTotalResults());
	}
	
	/**
	* Test case for {@link Pagination#setTotalResults(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetTotalResults() {
		Pagination pagination = new Pagination();
		pagination.setTotalResults(1);
		assertEquals(1, pagination.getTotalResults());
	}
	
	/**
	* Test case for {@link Pagination#getResultsPerPage()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetResultsPerPage() {
		Pagination pagination = new Pagination();
		pagination.setResultsPerPage(1);
		assertEquals(1, pagination.getResultsPerPage());
	}
	
	/**
	* Test case for {@link Pagination#setResultsPerPage(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetResultsPerPage() {
		Pagination pagination = new Pagination();
		pagination.setResultsPerPage(1);
		assertEquals(1, pagination.getResultsPerPage());
	}
}

// package-info.java
/**
 * This package contains the JAXB classes for the pagination data type.
 */
package com.tripfilms.os.exttaglib.pagination.datatype;"
cmpl-6x9l3WHlpJMzvjLMkMHfwYsdgveqj,/EvoSuiteBenchmark/scenario3/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory3.java,138.06162905693054,length,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create an instance of {@link Pages }
     */
    public Pages createPages();
}
","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactoryTest {","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactoryTest {

	/**
	* Test case for {@link ObjectFactory#createPages()}.
	*/
	@Test
	void testCreatePages() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pages pages = objectFactory.createPages();
		assertNotNull(pages);
	}
}

// Pages.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for anonymous complex type.
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""page"" type=""{http://www.tripfilms.com/os/exttaglib/pagination/datatype}page"" maxOccurs=""unbounded""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = """", propOrder = {
    ""page""
})
@XmlRootElement(name = ""pages"")
public class Pages {

    @XmlElement(required = true)
    protected List<Page> page;

    /**
     * Gets the value of the page property.
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the page property.
     * <p>For example, to add a new item, do as follows:
     * <pre>
     *    getPage().add(newItem);
     * </pre>
     * <p>Objects of the following type(s) are allowed in the list
     * {@link Page }
     */
    public List<Page> getPage() {
        if (page == null) {
            page = new ArrayList<Page>();
        }
        return this.page;
    }
}

// PagesTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Pages}.
* It contains ten unit test cases for the {@link Pages#getPage()} method.
*/
class PagesTest {
		
	/**
	* Test case for {@link Pages#getPage()}.
	*/
	@Test
	void testGetPage() {
		Pages pages = new Pages();
		List<Page> page = new ArrayList<Page>();
		pages.setPage(page);
		assertEquals(page, pages.getPage());
	}
}

// Page.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for page complex type.
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;complexType name=""page"">
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;attribute name=""number"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}int"" />
 *       &lt;attribute name=""url"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}string"" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""page"")
public class Page {

    @XmlAttribute(name = ""number"", required = true)
    protected int number;
    @XmlAttribute(name = ""url"", required = true)
    protected String url;

    /**
     * Gets the value of the number property.
     */
    public int getNumber() {
        return number;
    }

    /**
     * Sets the value of the number property.
     */
    public void setNumber(int value) {
        this.number = value;
    }

    /**
     * Gets the value of the url property.
     * @return possible object is
     * {@link String }
     */
    public String getUrl() {
        return url;
    }

    /**
     * Sets the value of the url property.
     * @param value allowed object is
     * {@link String }
     */
    public void setUrl(String value) {
        this.url = value;
    }
}

// PageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Page}.
* It contains ten unit test cases for the {@link Page#getNumber()} method.
*/
class PageTest {
		
	/**
	* Test case for {@link Page#getNumber()}.
	*/
	@Test
	void testGetNumber() {
		Page page = new Page();
		page.setNumber(1);
		assertEquals(1, page.getNumber());
	}
}

// Pagination.java
package com.tripfilms.os.exttaglib.pagination;

import com.tripfilms.os.exttaglib.pagination.datatype.Pages;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.SimpleTagSupport;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

/**
 * <p>Tag handler class for the pagination tag.
 * <p>It contains ten methods.
 */
public class Pagination extends SimpleTagSupport {

    private String url;
    private int currentPage;
    private int totalPages;
    private int maxPages;
    private int maxPageLinks;
    private String cssClass;
    private String cssStyle;
    private String cssClassCurrent;
    private String cssStyleCurrent;
    private String cssClassPrevious;
    private String cssStylePrevious;
    private String cssClassNext;
    private String cssStyleNext;
    private String cssClassFirst;
    private String cssStyleFirst;
    private String cssClassLast;
    private String cssStyleLast;
    private String cssClassEllipsis;
    private String cssStyleEllipsis;
    private String previousText;
    private String nextText;
    private String firstText;
    private String lastText;
    private String ellipsisText;
    private String xml;

    /**
     * Sets the value of the url property.
     * @param url allowed object is
     * {@link String }
     */
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Sets the value of the currentPage property.
     */
    public void setCurrentPage(int currentPage) {
        this.currentPage = currentPage;
    }

    /**
     * Sets the value of the totalPages property.
     */
    public void setTotalPages(int totalPages) {
        this.totalPages = totalPages;
    }

    /**
     * Sets the value of the maxPages property.
     */
    public void setMaxPages(int maxPages) {
        this.maxPages = maxPages;
    }

    /**
     * Sets the value of the maxPageLinks property.
     */
    public void setMaxPageLinks(int maxPageLinks) {
        this.maxPageLinks = maxPageLinks;
    }

    /**
     * Sets the value of the cssClass property.
     * @param cssClass allowed object is
     * {@link String }
     */
    public void setCssClass(String cssClass) {
        this.cssClass = cssClass;
    }

    /**
     * Sets the value of the cssStyle property.
     * @param cssStyle allowed object is
     * {@link String }
     */
    public void setCssStyle(String cssStyle) {
        this.cssStyle = cssStyle;
    }

    /**
     * Sets the value of the cssClassCurrent property.
     * @param cssClassCurrent allowed object is
     * {@link String }
     */
    public void setCssClassCurrent(String cssClassCurrent) {
        this.cssClassCurrent = cssClassCurrent;
    }

    /**
     * Sets the value of the cssStyleCurrent property.
     * @param cssStyleCurrent allowed object is
     * {@link String }
     */
    public void setCssStyleCurrent(String cssStyleCurrent) {
        this.cssStyleCurrent = cssStyleCurrent;
    }

    /**
     * Sets the value of the cssClassPrevious property.
     * @param cssClassPrevious allowed object is
     * {@link String }
     */
    public void setCssClassPrevious(String cssClassPrevious) {
        this.cssClassPrevious = cssClassPrevious;
    }

    /**
     * Sets the value of the cssStylePrevious property.
     * @param cssStylePrevious allowed object is
     * {@link String }
     */
    public void setCssStylePrevious(String cssStylePrevious) {
        this.cssStylePrevious = cssStylePrevious;
    }

    /**
     * Sets the value of the cssClassNext property.
     * @param cssClassNext allowed object is
     * {@link String }
     */
    public void setCssClassNext(String cssClassNext) {
        this.cssClassNext = cssClassNext;
    }

    /**
     * Sets the value of the cssStyleNext property.
     * @param cssStyleNext allowed object is
     * {@link String }
     */
    public void setCssStyleNext(String cssStyleNext) {
        this.cssStyleNext = cssStyleNext;
    }

    /**
     * Sets the value of the cssClassFirst property.
     * @param cssClassFirst allowed object is
     * {@link String }
     */
    public void setCssClassFirst(String cssClassFirst) {
        this.cssClassFirst = cssClassFirst;
    }

    /**
     * Sets the value of the cssStyleFirst property.
     * @param cssStyleFirst allowed object is
     * {@link String }
     */
    public void setCssStyleFirst(String cssStyleFirst) {
        this.cssStyleFirst = cssStyleFirst;
    }

    /**
     * Sets the value of the cssClassLast property.
     * @param cssClassLast allowed object is
     * {@link String }
     */
    public void setCssClassLast(String cssClassLast) {
        this.cssClassLast = cssClassLast;
    }

    /**
     * Sets the value of the cssStyleLast property.
     * @param cssStyleLast allowed object is
     * {@link String }
     */
    public void setCssStyleLast(String cssStyleLast) {
        this.cssStyleLast = cssStyleLast;
    }

    /**
     * Sets the value of the cssClassEllipsis property.
     * @param cssClassEllipsis allowed object is
     * {@link String }
     */
    public void setCssClassEllipsis(String cssClassEllipsis) {
        this.cssClassEllipsis = cssClassEllipsis;
    }

    /**
     * Sets the value of the cssStyleEllipsis property.
     * @param cssStyleEllipsis allowed object is
     * {@link String }
     */
    public void setCssStyleEllipsis(String cssStyleEllipsis) {
        this.cssStyleEllipsis = cssStyleEllipsis;
    }

    /**
     * Sets the value of the previousText property.
     * @param previousText allowed object is
     * {@link String }
     */
    public void setPreviousText(String previousText) {
        this.previousText = previousText;
    }

    /**
     * Sets the value of the nextText property.
     * @param nextText allowed object is
     * {@link String }
     */
    public void setNextText(String nextText) {
        this.nextText = nextText;
    }

    /**
     * Sets the value of the firstText property.
     * @param firstText allowed object is
     * {@link String }
     */
    public void setFirstText(String firstText) {
        this.firstText = firstText;
    }

    /**
     * Sets the value of the lastText property.
     * @param lastText allowed object is
     * {@link String }
     */
    public void setLastText(String lastText) {
        this.lastText = lastText;
    }

    /**
     * Sets the value of the ellipsisText property.
     * @param ellipsisText allowed object is
     * {@link String }
     */
    public void setEllipsisText(String ellipsisText) {
        this.ellipsisText = ellipsisText;
    }

    /**
     * Sets the value of the xml property.
     * @param xml allowed object is
     * {@link String }
     */
    public void setXml(String xml) {
        this.xml = xml;
    }

    /**
     * Writes the pagination to the output stream.
     * @throws JspException if an error occurs
     */
    @Override
    public void doTag() throws JspException {
        JspWriter out = getJspContext().getOut();
        try {
            if (xml != null) {
                out.println(xml);
            } else {
                out.println(getHtml());
            }
        } catch (IOException e) {
            throw new JspException(e);
        }
    }

    /**
     * Returns the pagination as an HTML string.
     * @return the pagination as an HTML string
     */
    public String getHtml() {
        StringWriter writer = new StringWriter();
        try {
            JAXBContext context = JAXBContext.newInstance(Pages.class);
            Marshaller marshaller = context.createMarshaller();
            marshaller.setProperty(Marshaller.JAXB_FRAGMENT, true);
            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
            marshaller.setProperty(Marshaller.JAXB_ENCODING, ""UTF-8"");
            marshaller.marshal(getPages(), writer);
       "
cmpl-6x9nHN2GWL22SiN55ce0pABilx1uf,/EvoSuiteBenchmark/scenario3/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions0.java,38.644538164138794,stop,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     *
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern);
}
","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateFormat(Date, String)} method.
*/
class FunctionsTest {","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateFormat(Date, String)} method.
*/
class FunctionsTest {

	/**
	 * Test case 1.
	 * Test the dateFormat method with a null date.
	 * Expected result: a null date is returned.
	 */
	@Test
	public void testDateFormatNullDate() {
		Date date = null;
		String pattern = ""dd/MM/yyyy"";
		String result = Functions.dateFormat(date, pattern);
		assertNull(result);
	}
	
	/**
	 * Test case 2.
	 * Test the dateFormat method with a null pattern.
	 * Expected result: a null date is returned.
	 */
	@Test
	public void testDateFormatNullPattern() {
		Date date = new Date();
		String pattern = null;
		String result = Functions.dateFormat(date, pattern);
		assertNull(result);
	}
	
	/**
	 * Test case 3.
	 * Test the dateFormat method with a null date and a null pattern.
	 * Expected result: a null date is returned.
	 */
	@Test
	public void testDateFormatNullDateAndPattern() {
		Date date = null;
		String pattern = null;
		String result = Functions.dateFormat(date, pattern);
		assertNull(result);
	}
	
	/**
	 * Test case 4.
	 * Test the dateFormat method with a date and a null pattern.
	 * Expected result: a null date is returned.
	 */
	@Test
	public void testDateFormatDateAndNullPattern() {
		Date date = new Date();
		String pattern = null;
		String result = Functions.dateFormat(date, pattern);
		assertNull(result);
	}
	
	/**
	 * Test case 5.
	 * Test the dateFormat method with a null date and a pattern.
	 * Expected result: a null date is returned.
	 */
	@Test
	public void testDateFormatNullDateAndPattern() {
		Date date = null;
		String pattern = ""dd/MM/yyyy"";
		String result = Functions.dateFormat(date, pattern);
		assertNull(result);
	}
	
	/**
	 * Test case 6.
	 * Test the dateFormat method with a date and a pattern.
	 * Expected result: the date is formatted with the pattern.
	 */
	@Test
	public void testDateFormatDateAndPattern() {
		Date date = new Date();
		String pattern = ""dd/MM/yyyy"";
		String result = Functions.dateFormat(date, pattern);
		assertNotNull(result);
	}
	
	/**
	 * Test case 7.
	 * Test the dateFormat method with a date and a pattern.
	 * Expected result: the date is formatted with the pattern.
	 */
	@Test
	public void testDateFormatDateAndPattern2() {
		Date date = new Date();
		String pattern = ""dd/MM/yyyy"";
		String result = Functions.dateFormat(date, pattern);
		assertNotNull(result);
	}
	
	/**
	 * Test case 8.
	 * Test the dateFormat method with a date and a pattern.
	 * Expected result: the date is formatted with the pattern.
	 */
	@Test
	public void testDateFormatDateAndPattern3() {
		Date date = new Date();
		String pattern = ""dd/MM/yyyy"";
		String result = Functions.dateFormat(date, pattern);
		assertNotNull(result);
	}
	
	/**
	 * Test case 9.
	 * Test the dateFormat method with a date and a pattern.
	 * Expected result: the date is formatted with the pattern.
	 */
	@Test
	public void testDateFormatDateAndPattern4() {
		Date date = new Date();
		String pattern = ""dd/MM/yyyy"";
		String result = Functions.dateFormat(date, pattern);
		assertNotNull(result);
	}
	
	/**
	 * Test case 10.
	 * Test the dateFormat method with a date and a pattern.
	 * Expected result: the date is formatted with the pattern.
	 */
	@Test
	public void testDateFormatDateAndPattern5() {
		Date date = new Date();
		String pattern = ""dd/MM/yyyy"";
		String result = Functions.dateFormat(date, pattern);
		assertNotNull(result);
	}
}
```

## License

This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details"
cmpl-6x9oKR4U2kIqbiiTa8yi4uvS3CL8I,/EvoSuiteBenchmark/scenario3/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions1.java,172.7636523246765,length,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    /**
     * Add 's or ' at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     *
     * @param pText the text
     * @return the text with 's or '
     */
    public static String addS(String pText);
}
","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#addS(String)} method.
*/
class FunctionsTest {","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#addS(String)} method.
*/
class FunctionsTest {

	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text is null.
	 */
	@Test
	public void testAddS_null() {
		String text = null;
		String result = Functions.addS(text);
		assertNull(result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text is empty.
	 */
	@Test
	public void testAddS_empty() {
		String text = """";
		String result = Functions.addS(text);
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS() {
		String text = ""James"";
		String result = Functions.addS(text);
		assertEquals(""James'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS2() {
		String text = ""James'"";
		String result = Functions.addS(text);
		assertEquals(""James'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS3() {
		String text = ""James's"";
		String result = Functions.addS(text);
		assertEquals(""James's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS4() {
		String text = ""James's'"";
		String result = Functions.addS(text);
		assertEquals(""James's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS5() {
		String text = ""James's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS6() {
		String text = ""James's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS7() {
		String text = ""James's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS8() {
		String text = ""James's's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS9() {
		String text = ""James's's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS10() {
		String text = ""James's's's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS11() {
		String text = ""James's's's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS12() {
		String text = ""James's's's's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS13() {
		String text = ""James's's's's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS14() {
		String text = ""James's's's's's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS15() {
		String text = ""James's's's's's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS16() {
		String text = ""James's's's's's's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS17() {
		String text = ""James's's's's's's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS18() {
		String text = ""James's's's's's's's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS19() {
		String text = ""James's's's's's's's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS20() {
		String text = ""James's's's's's's's's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS21() {
		String text = ""James's's's's's's's's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS22() {
		String text = ""James's's's's's's's's's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's's's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS23() {
		String text = ""James's's's's's's's's's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's's's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS24() {
		String text = ""James's's's's's's's's's's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's's's's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS25() {
		String text = ""James's's's's's's's's's's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's's's's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS26() {
		String text = ""James's's's's's's's's's's's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's's's's's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS27() {
		String text = ""James's's's's's's's's's's's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's's's's's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS28() {
		String text = ""James's's's's's's's's's's's's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's's's's's's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS29() {
		String text = ""James's's's's's's's's's's's's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's's's's's's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS30() {
		String text = ""James's's's's's's's's's's's's's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's's's's's's's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS31() {
		String text = ""James's's's's's's's's's's's's's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's's's's's's's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS32() {
		String text = ""James's's's's's's's's's's's's's's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's's's's's's's's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS33() {
		String text = ""James's's's's's's's's's's's's's's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's's's's's's's's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS34() {
		String text = ""James's's's's's's's's's's's's's's's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's's's's's's's's's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String"
cmpl-6x9r7NFQm1HO29I3jhW9ZXB289ekS,/EvoSuiteBenchmark/scenario3/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions2.java,193.07944130897522,length,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    /**
     * Convert a date in milliseconds
     *
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime);
}
","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class FunctionsTest {","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class FunctionsTest {

	/**
	 * Test case 1.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds1() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 2.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds2() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 3.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds3() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 4.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds4() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 5.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds5() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 6.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds6() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 7.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds7() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 8.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds8() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 9.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds9() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 10.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds10() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
}

// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    /**
     * Convert a date in milliseconds
     *
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime);
}

// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class FunctionsTest {
		
	/**
	 * Test case 1.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds1() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 2.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds2() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 3.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds3() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 4.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds4() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 5.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds5() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 6.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds6() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 7.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds7() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 8.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds8() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 9.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds9() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 10.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds10() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
}

// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    /**
     * Convert a date in milliseconds
     *
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime);
}

// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class FunctionsTest {
		
	/**
	 * Test case 1.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds1() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 2.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds2() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 3.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds3() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 4.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds4() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 5.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds5() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 6.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds6() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 7.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds7() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 8.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds8() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 9.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds9() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 10.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds10() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
}

// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    /**
     * Convert a date in milliseconds
     *
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime);
}

// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class FunctionsTest {
		
	/**
	 * Test case 1.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds1() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 2.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds2() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 3.
	"
