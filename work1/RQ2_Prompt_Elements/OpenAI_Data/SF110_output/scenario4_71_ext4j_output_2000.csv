ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6x2nXojOFcvBNQsXpH0OqnKgsZnI5,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_0Test.java,86.47319197654724,length,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Page }
     */
    public Page createPage();

    /**
     * Create an instance of {@link StaticPage }
     */
    public StaticPage createStaticPage();

    /**
     * Create an instance of {@link Pagination }
     */
    public Pagination createPagination();

    /**
     * Create an instance of {@link Pages }
     */
    public Pages createPages();
}
","// ObjectFactory_0Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactory_0Test {","// ObjectFactory_0Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactory_0Test {

	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_0() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page page = objectFactory.createPage();
		assertNotNull(page);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_1() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page page = objectFactory.createPage();
		assertNotNull(page);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_2() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page page = objectFactory.createPage();
		assertNotNull(page);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_3() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page page = objectFactory.createPage();
		assertNotNull(page);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_4() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page page = objectFactory.createPage();
		assertNotNull(page);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_5() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page page = objectFactory.createPage();
		assertNotNull(page);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_6() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page page = objectFactory.createPage();
		assertNotNull(page);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_7() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page page = objectFactory.createPage();
		assertNotNull(page);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_8() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page page = objectFactory.createPage();
		assertNotNull(page);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage_9() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page page = objectFactory.createPage();
		assertNotNull(page);
	}
	
}

// ObjectFactory_1Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactory_1Test {
		
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_0() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage staticPage = objectFactory.createStaticPage();
		assertNotNull(staticPage);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_1() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage staticPage = objectFactory.createStaticPage();
		assertNotNull(staticPage);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_2() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage staticPage = objectFactory.createStaticPage();
		assertNotNull(staticPage);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_3() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage staticPage = objectFactory.createStaticPage();
		assertNotNull(staticPage);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_4() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage staticPage = objectFactory.createStaticPage();
		assertNotNull(staticPage);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_5() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage staticPage = objectFactory.createStaticPage();
		assertNotNull(staticPage);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_6() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage staticPage = objectFactory.createStaticPage();
		assertNotNull(staticPage);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_7() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage staticPage = objectFactory.createStaticPage();
		assertNotNull(staticPage);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_8() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage staticPage = objectFactory.createStaticPage();
		assertNotNull(staticPage);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage_9() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage staticPage = objectFactory.createStaticPage();
		assertNotNull(staticPage);
	}
	
}

// ObjectFactory_2Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactory_2Test {
		
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*/
	@Test
	void testCreatePagination_0() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pagination pagination = objectFactory.createPagination();
		assertNotNull(pagination);
	}
	
	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	*/
	@Test
	void testCreatePagination_1"
cmpl-6x2owKqhLK3tvr0KZZb6iFHuCRQva,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_1Test.java,58.33032941818237,length,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Page }
     */
    public Page createPage();

    /**
     * Create an instance of {@link StaticPage }
     */
    public StaticPage createStaticPage();

    /**
     * Create an instance of {@link Pagination }
     */
    public Pagination createPagination();

    /**
     * Create an instance of {@link Pages }
     */
    public Pages createPages();
}
","// ObjectFactory_1Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactory_1Test {","// ObjectFactory_1Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactory_1Test {

	/**
	* Test case for {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage staticPage = objectFactory.createStaticPage();
		assertNotNull(staticPage);
	}
}

// ObjectFactory_2Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactory_2Test {
		
	/**
	* Test case for {@link ObjectFactory#createPage()} method.
	* It tests the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page page = objectFactory.createPage();
		assertNotNull(page);
	}
}

// ObjectFactory_3Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactory_3Test {
		
	/**
	* Test case for {@link ObjectFactory#createPagination()} method.
	* It tests the {@link ObjectFactory#createPagination()} method.
	*/
	@Test
	void testCreatePagination() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pagination pagination = objectFactory.createPagination();
		assertNotNull(pagination);
	}
}

// ObjectFactory_4Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactory_4Test {
		
	/**
	* Test case for {@link ObjectFactory#createPages()} method.
	* It tests the {@link ObjectFactory#createPages()} method.
	*/
	@Test
	void testCreatePages() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pages pages = objectFactory.createPages();
		assertNotNull(pages);
	}
}

// Page.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for page complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name=""page"">
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;attribute name=""number"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}int"" />
 *       &lt;attribute name=""url"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}string"" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""page"")
public class Page {

    @XmlAttribute(name = ""number"", required = true)
    protected int number;
    @XmlAttribute(name = ""url"", required = true)
    protected String url;

    /**
     * Gets the value of the number property.
     *
     */
    public int getNumber() {
        return number;
    }

    /**
     * Sets the value of the number property.
     *
     */
    public void setNumber(int value) {
        this.number = value;
    }

    /**
     * Gets the value of the url property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    public String getUrl() {
        return url;
    }

    /**
     * Sets the value of the url property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setUrl(String value) {
        this.url = value;
    }

}

// Page_1Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Page}.
* It contains ten unit test cases for the {@link Page#getNumber()} method.
*/
class Page_1Test {
		
	/**
	* Test case for {@link Page#getNumber()} method.
	* It tests the {@link Page#getNumber()} method.
	*/
	@Test
	void testGetNumber() {
		Page page = new Page();
		int number = page.getNumber();
		assertEquals(0, number);
	}
}

// Page_2Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Page}.
* It contains ten unit test cases for the {@link Page#setNumber(int)} method.
*/
class Page_2Test {
		
	/**
	* Test case for {@link Page#setNumber(int)} method.
	* It tests the {@link Page#setNumber(int)} method.
	*/
	@Test
	void testSetNumber() {
		Page page = new Page();
		page.setNumber(1);
		int number = page.getNumber();
		assertEquals(1, number);
	}
}

// Page_3Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax"
cmpl-6x2pz5lcMNmaT0mjip3jSe41YrLfO,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_2Test.java,74.99976348876953,length,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Page }
     */
    public Page createPage();

    /**
     * Create an instance of {@link StaticPage }
     */
    public StaticPage createStaticPage();

    /**
     * Create an instance of {@link Pagination }
     */
    public Pagination createPagination();

    /**
     * Create an instance of {@link Pages }
     */
    public Pages createPages();
}
","// ObjectFactory_2Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactory_2Test {","// ObjectFactory_2Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactory_2Test {

	/**
	* Test case for the {@link ObjectFactory#createPagination()} method.
	* It tests the {@link ObjectFactory#createPagination()} method.
	*/
	@Test
	void testCreatePagination() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pagination pagination = objectFactory.createPagination();
		assertNotNull(pagination);
	}
}

// ObjectFactory_3Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactory_3Test {
		
	/**
	* Test case for the {@link ObjectFactory#createPages()} method.
	* It tests the {@link ObjectFactory#createPages()} method.
	*/
	@Test
	void testCreatePages() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pages pages = objectFactory.createPages();
		assertNotNull(pages);
	}
}

// ObjectFactory_4Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactory_4Test {
		
	/**
	* Test case for the {@link ObjectFactory#createPage()} method.
	* It tests the {@link ObjectFactory#createPage()} method.
	*/
	@Test
	void testCreatePage() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page page = objectFactory.createPage();
		assertNotNull(page);
	}
}

// ObjectFactory_5Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactory_5Test {
		
	/**
	* Test case for the {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage staticPage = objectFactory.createStaticPage();
		assertNotNull(staticPage);
	}
}

// Page.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for page complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name=""page"">
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;attribute name=""number"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}int"" />
 *       &lt;attribute name=""url"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}string"" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""page"")
public class Page {

    @XmlAttribute(name = ""number"", required = true)
    protected int number;
    @XmlAttribute(name = ""url"", required = true)
    protected String url;

    /**
     * Gets the value of the number property.
     *
     */
    public int getNumber() {
        return number;
    }

    /**
     * Sets the value of the number property.
     *
     */
    public void setNumber(int value) {
        this.number = value;
    }

    /**
     * Gets the value of the url property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    public String getUrl() {
        return url;
    }

    /**
     * Sets the value of the url property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setUrl(String value) {
        this.url = value;
    }

}

// Page_1Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Page}.
* It contains ten unit test cases for the {@link Page#getNumber()} method.
*/
class Page_1Test {
		
	/**
	* Test case for the {@link Page#getNumber()} method.
	* It tests the {@link Page#getNumber()} method.
	*/
	@Test
	void testGetNumber() {
		Page page = new Page();
		int number = page.getNumber();
		assertEquals(0, number);
	}
}

// Page_2Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Page}.
* It contains ten unit test cases for the {@link Page#setNumber(int)} method.
*/
class Page_2Test {
		
	/**
	* Test case for the {@link Page#setNumber(int)} method.
	* It tests the {@link Page#setNumber(int)} method.
	*/
	@Test
	void testSetNumber() {
		Page page = new Page();
		page.setNumber(1);
		int number = page.getNumber();
		assertEquals(1, number);
	}
}

// Page_3Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Page}.
* It contains ten unit test cases for the {@link Page#getUrl()} method.
*/
class Page_3Test {
		
	/**
	* Test case for the {@link Page#getUrl()} method.
	* It tests the {@link Page#getUrl()} method.
	*/
	@Test
	void testGetUrl() {
		Page page = new Page();
		String url = page.getUrl();
		assertNull(url);
	}
}

// Page_4Test.java
package com.tripfil"
cmpl-6x2rC06Fk4FXx6DYpDOkmkmyNoHee,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_3Test.java,73.51859974861145,length,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Page }
     */
    public Page createPage();

    /**
     * Create an instance of {@link StaticPage }
     */
    public StaticPage createStaticPage();

    /**
     * Create an instance of {@link Pagination }
     */
    public Pagination createPagination();

    /**
     * Create an instance of {@link Pages }
     */
    public Pages createPages();
}
","// ObjectFactory_3Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactory_3Test {","// ObjectFactory_3Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactory_3Test {

	/**
	* Test case for {@link ObjectFactory#createPages()} method.
	* It tests the {@link Pages#getPage()} method.
	*/
	@Test
	void testCreatePages_1() {
		Pages pages = new ObjectFactory().createPages();
		assertNotNull(pages.getPage());
	}
	
	/**
	* Test case for {@link ObjectFactory#createPages()} method.
	* It tests the {@link Pages#getPage()} method.
	*/
	@Test
	void testCreatePages_2() {
		Pages pages = new ObjectFactory().createPages();
		assertNotNull(pages.getPage());
	}
	
	/**
	* Test case for {@link ObjectFactory#createPages()} method.
	* It tests the {@link Pages#getPage()} method.
	*/
	@Test
	void testCreatePages_3() {
		Pages pages = new ObjectFactory().createPages();
		assertNotNull(pages.getPage());
	}
	
	/**
	* Test case for {@link ObjectFactory#createPages()} method.
	* It tests the {@link Pages#getPage()} method.
	*/
	@Test
	void testCreatePages_4() {
		Pages pages = new ObjectFactory().createPages();
		assertNotNull(pages.getPage());
	}
	
	/**
	* Test case for {@link ObjectFactory#createPages()} method.
	* It tests the {@link Pages#getPage()} method.
	*/
	@Test
	void testCreatePages_5() {
		Pages pages = new ObjectFactory().createPages();
		assertNotNull(pages.getPage());
	}
	
	/**
	* Test case for {@link ObjectFactory#createPages()} method.
	* It tests the {@link Pages#getPage()} method.
	*/
	@Test
	void testCreatePages_6() {
		Pages pages = new ObjectFactory().createPages();
		assertNotNull(pages.getPage());
	}
	
	/**
	* Test case for {@link ObjectFactory#createPages()} method.
	* It tests the {@link Pages#getPage()} method.
	*/
	@Test
	void testCreatePages_7() {
		Pages pages = new ObjectFactory().createPages();
		assertNotNull(pages.getPage());
	}
	
	/**
	* Test case for {@link ObjectFactory#createPages()} method.
	* It tests the {@link Pages#getPage()} method.
	*/
	@Test
	void testCreatePages_8() {
		Pages pages = new ObjectFactory().createPages();
		assertNotNull(pages.getPage());
	}
	
	/**
	* Test case for {@link ObjectFactory#createPages()} method.
	* It tests the {@link Pages#getPage()} method.
	*/
	@Test
	void testCreatePages_9() {
		Pages pages = new ObjectFactory().createPages();
		assertNotNull(pages.getPage());
	}
	
	/**
	* Test case for {@link ObjectFactory#createPages()} method.
	* It tests the {@link Pages#getPage()} method.
	*/
	@Test
	void testCreatePages_10() {
		Pages pages = new ObjectFactory().createPages();
		assertNotNull(pages.getPage());
	}
}

// ObjectFactory_4Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactory_4Test {
		
	/**
	* Test case for {@link ObjectFactory#createPage()} method.
	* It tests the {@link Page#getNumber()} method.
	*/
	@Test
	void testCreatePage_1() {
		Page page = new ObjectFactory().createPage();
		assertEquals(0, page.getNumber());
	}
	
	/**
	* Test case for {@link ObjectFactory#createPage()} method.
	* It tests the {@link Page#getNumber()} method.
	*/
	@Test
	void testCreatePage_2() {
		Page page = new ObjectFactory().createPage();
		assertEquals(0, page.getNumber());
	}
	
	/**
	* Test case for {@link ObjectFactory#createPage()} method.
	* It tests the {@link Page#getNumber()} method.
	*/
	@Test
	void testCreatePage_3() {
		Page page = new ObjectFactory().createPage();
		assertEquals(0, page.getNumber());
	}
	
	/**
	* Test case for {@link ObjectFactory#createPage()} method.
	* It tests the {@link Page#getNumber()} method.
	*/
	@Test
	void testCreatePage_4() {
		Page page = new ObjectFactory().createPage();
		assertEquals(0, page.getNumber());
	}
	
	/**
	* Test case for {@link ObjectFactory#createPage()} method.
	* It tests the {@link Page#getNumber()} method.
	*/
	@Test
	void testCreatePage_5() {
		Page page = new ObjectFactory().createPage();
		assertEquals(0, page.getNumber());
	}
	
	/**
	* Test case for {@link ObjectFactory#createPage()} method.
	* It tests the {@link Page#getNumber()} method.
	*/
	@Test
	void testCreatePage_6() {
		Page page = new ObjectFactory().createPage();
		assertEquals(0, page.getNumber());
	}
	
	/**
	* Test case for {@link ObjectFactory#createPage()} method.
	* It tests the {@link Page#getNumber()} method.
	*/
	@Test
	void testCreatePage_7() {
		Page page = new ObjectFactory().createPage();
		assertEquals(0, page.getNumber());
	}
	
	/**
	* Test case for {@link ObjectFactory#createPage()} method.
	* It tests the {@link Page#getNumber()} method.
	*/
	@Test
	void testCreatePage_8() {
		Page page = new ObjectFactory().createPage();
		assertEquals(0, page.getNumber());
	}
	
	/**
	* Test case for {@link ObjectFactory#createPage()} method.
	* It tests the {@link Page#getNumber()} method.
	*/
	@Test
	void testCreatePage_9() {
		Page page = new ObjectFactory().createPage();
		assertEquals(0, page.getNumber());
	}
	
	/**
	* Test case for {@link ObjectFactory#createPage()} method.
	* It tests the {@link Page#getNumber()} method.
	*/
	@Test
	void testCreatePage_10() {
		Page page = new ObjectFactory().createPage();
		assertEquals(0, page.getNumber());
	}
}

// ObjectFactory_5Test.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactory_5Test {
		
	/**
	* Test case for {@link ObjectFactory#"
cmpl-6x2sNTuPgQ1DrrmjYgsOc5MYQEgje,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_0Test.java,75.08307337760925,length,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    //private static Log mLogger = LogFactory.getLog(Functions.class);
    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();

    private static final String UNDERSCORE = ""_"";

    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = ""_+"";

    private static final String REGEX_WHITESPACE_ONE_OR_MORE = ""\\s+"";

    private static final String[] TO_REPLACE = { ""-"", "":"", "","", ""'"", ""!"", ""\"""", ""\\*"", ""\\("", ""\\)"", ""~"", ""`"" };

    private static final String BLURB_SUFFIX = ""..."";

    private static final String STRING_SPACE = "" "";

    private static final String STRING_DOT = ""."";

    private static final String STRING_COMMA = "","";

    private static final String STRING_EMPTY = """";

    private static final String STRING_HTML_CR = ""<br />"";

    //private static final String STRING_CR = System.getProperty(""line.separator"");
    private final static String EOL_LINUX = ""\n"";

    private final static String EOL_WIN32 = ""\r\n"";

    private final static String EOL_MAC_LEGACY = ""\n\r"";

    public static final String LINK_PREFIX = ""webtools.link."";

    static {
    }

    public static int year(int pOffset);

    public static char toUpper(char c);

    public static char forDigit(int pDigit, int pRadix);

    public static int length(Object pCollection) throws JspTagException;

    public static String join(String[] pStrings, String pSep);

    public static String seo(String pValue);

    public static long round(double pValue);

    public static String stripHTML(String s);

    public static String blurb(String s, int pMaxLength);

    public static String blurbHTML(String s, int pMaxLength);

    public static String since(Date pFrom);

    public static String decimalFormat(double pDouble, String pPattern);

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern);

    /**
     * Add 's or ' at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     * @param pText the text
     * @return the text with 's or '
     */
    public static String addS(String pText);

    /**
     * Return the pMaxLength first characters of the string s with ""...""
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String blurbChar(String s, int pMaxLength);

    /**
     *  Break up a too big word on several lines
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String cutWordCR(String s, int pMaxLength);

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String cutWordCRText(String pText, int pMaxLength);

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String replaceCRWithBR(String pText);

    /**
     * Convert a date in milliseconds
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime);

    /**
     * Order the words of a String
     * @param s
     * @param separator the words separator
     * @return
     */
    public static String orderWords(String s, String pSeparator);

    public static String capFirstLetters(String s);

    private static void fillTens(int pTen, String pTenWord);

    public static String numberInWord(int pValue) throws Exception;

    public static String ordinal(int pInteger);

    private static int getLastDigit(int pInteger);

    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception;

    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception;

    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception;
}
","// Functions_0Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateFormat(Date, String)} method.
*/
class Functions_0Test {","// Functions_0Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateFormat(Date, String)} method.
*/
class Functions_0Test {

	/**
	 * Test case for {@link Functions#dateFormat(Date, String)}.
	 * @throws Exception
	 */
	@Test
	void testDateFormat_0() throws Exception {
		Date date = new Date();
		String pattern = ""yyyy-MM-dd"";
		String result = Functions.dateFormat(date, pattern);
		assertEquals(new SimpleDateFormat(pattern).format(date), result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)}.
	 * @throws Exception
	 */
	@Test
	void testDateFormat_1() throws Exception {
		Date date = new Date();
		String pattern = ""yyyy-MM-dd HH:mm:ss"";
		String result = Functions.dateFormat(date, pattern);
		assertEquals(new SimpleDateFormat(pattern).format(date), result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)}.
	 * @throws Exception
	 */
	@Test
	void testDateFormat_2() throws Exception {
		Date date = new Date();
		String pattern = ""yyyy-MM-dd HH:mm:ss.SSS"";
		String result = Functions.dateFormat(date, pattern);
		assertEquals(new SimpleDateFormat(pattern).format(date), result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)}.
	 * @throws Exception
	 */
	@Test
	void testDateFormat_3() throws Exception {
		Date date = new Date();
		String pattern = ""yyyy-MM-dd HH:mm:ss.SSS z"";
		String result = Functions.dateFormat(date, pattern);
		assertEquals(new SimpleDateFormat(pattern).format(date), result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)}.
	 * @throws Exception
	 */
	@Test
	void testDateFormat_4() throws Exception {
		Date date = new Date();
		String pattern = ""yyyy-MM-dd HH:mm:ss.SSS zzzz"";
		String result = Functions.dateFormat(date, pattern);
		assertEquals(new SimpleDateFormat(pattern).format(date), result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)}.
	 * @throws Exception
	 */
	@Test
	void testDateFormat_5() throws Exception {
		Date date = new Date();
		String pattern = ""yyyy-MM-dd HH:mm:ss.SSS zzzz G"";
		String result = Functions.dateFormat(date, pattern);
		assertEquals(new SimpleDateFormat(pattern).format(date), result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)}.
	 * @throws Exception
	 */
	@Test
	void testDateFormat_6() throws Exception {
		Date date = new Date();
		String pattern = ""yyyy-MM-dd HH:mm:ss.SSS zzzz G 'at' HH:mm:ss"";
		String result = Functions.dateFormat(date, pattern);
		assertEquals(new SimpleDateFormat(pattern).format(date), result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)}.
	 * @throws Exception
	 */
	@Test
	void testDateFormat_7() throws Exception {
		Date date = new Date();
		String pattern = ""yyyy-MM-dd HH:mm:ss.SSS zzzz G 'at' HH:mm:ss z"";
		String result = Functions.dateFormat(date, pattern);
		assertEquals(new SimpleDateFormat(pattern).format(date), result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)}.
	 * @throws Exception
	 */
	@Test
	void testDateFormat_8() throws Exception {
		Date date = new Date();
		String pattern = ""yyyy-MM-dd HH:mm:ss.SSS zzzz G 'at' HH:mm:ss zzzz"";
		String result = Functions.dateFormat(date, pattern);
		assertEquals(new SimpleDateFormat(pattern).format(date), result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)}.
	 * @throws Exception
	 */
	@Test
	void testDateFormat_9() throws Exception {
		Date date = new Date();
		String pattern = ""yyyy-MM-dd HH:mm:ss.SSS zzzz G 'at' HH:mm:ss zzzz '('Z')'"";
		String result = Functions.dateFormat(date, pattern);
		assertEquals(new SimpleDateFormat(pattern).format(date), result);
	}
	
}

// Functions_1Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateFormat(Date, String)} method.
*/
class Functions_1Test {
		
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)}.
	 * @throws Exception
	 */
	@Test
	void testDateFormat_0() throws Exception {
		Date date = new Date();
		String pattern = ""yyyy-MM-dd"";
		String result = Functions.dateFormat(date, pattern);
		assertEquals(new SimpleDateFormat(pattern).format(date), result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)}.
	 * @throws Exception
	 */
	@Test
	void testDateFormat_1() throws Exception {
		Date date = new Date();
		String pattern = ""yyyy-MM-dd HH:mm:ss"";
		String result = Functions.dateFormat(date, pattern);
		assertEquals(new SimpleDateFormat(pattern).format(date), result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)}.
	 * @throws Exception
	 */
	@Test
	void testDateFormat_2() throws Exception {
		Date date = new Date();
		String pattern = ""yyyy-MM-dd HH:mm:ss.SSS"";
		String result = Functions.dateFormat(date, pattern);
		assertEquals(new SimpleDateFormat(pattern).format(date), result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)}.
	 * @throws Exception
	 */
	@Test
	void testDateFormat_3() throws Exception {
		Date date = new Date();
		String pattern = ""yyyy-MM-dd HH:mm:ss.SSS z"";
		String result = Functions.dateFormat(date, pattern);
		assertEquals(new SimpleDateFormat(pattern).format(date), result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)}.
	 * @throws Exception
	 */
	@Test
	void testDateFormat_4() throws Exception {
		Date date = new Date();
		String pattern = ""yyyy-MM-"
cmpl-6x2tab3ZpRPeKYaibxpYyRVcNYpSK,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_1Test.java,78.60968208312988,length,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    //private static Log mLogger = LogFactory.getLog(Functions.class);
    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();

    private static final String UNDERSCORE = ""_"";

    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = ""_+"";

    private static final String REGEX_WHITESPACE_ONE_OR_MORE = ""\\s+"";

    private static final String[] TO_REPLACE = { ""-"", "":"", "","", ""'"", ""!"", ""\"""", ""\\*"", ""\\("", ""\\)"", ""~"", ""`"" };

    private static final String BLURB_SUFFIX = ""..."";

    private static final String STRING_SPACE = "" "";

    private static final String STRING_DOT = ""."";

    private static final String STRING_COMMA = "","";

    private static final String STRING_EMPTY = """";

    private static final String STRING_HTML_CR = ""<br />"";

    //private static final String STRING_CR = System.getProperty(""line.separator"");
    private final static String EOL_LINUX = ""\n"";

    private final static String EOL_WIN32 = ""\r\n"";

    private final static String EOL_MAC_LEGACY = ""\n\r"";

    public static final String LINK_PREFIX = ""webtools.link."";

    static {
    }

    public static int year(int pOffset);

    public static char toUpper(char c);

    public static char forDigit(int pDigit, int pRadix);

    public static int length(Object pCollection) throws JspTagException;

    public static String join(String[] pStrings, String pSep);

    public static String seo(String pValue);

    public static long round(double pValue);

    public static String stripHTML(String s);

    public static String blurb(String s, int pMaxLength);

    public static String blurbHTML(String s, int pMaxLength);

    public static String since(Date pFrom);

    public static String decimalFormat(double pDouble, String pPattern);

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern);

    /**
     * Add 's or ' at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     * @param pText the text
     * @return the text with 's or '
     */
    public static String addS(String pText);

    /**
     * Return the pMaxLength first characters of the string s with ""...""
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String blurbChar(String s, int pMaxLength);

    /**
     *  Break up a too big word on several lines
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String cutWordCR(String s, int pMaxLength);

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String cutWordCRText(String pText, int pMaxLength);

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String replaceCRWithBR(String pText);

    /**
     * Convert a date in milliseconds
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime);

    /**
     * Order the words of a String
     * @param s
     * @param separator the words separator
     * @return
     */
    public static String orderWords(String s, String pSeparator);

    public static String capFirstLetters(String s);

    private static void fillTens(int pTen, String pTenWord);

    public static String numberInWord(int pValue) throws Exception;

    public static String ordinal(int pInteger);

    private static int getLastDigit(int pInteger);

    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception;

    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception;

    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception;
}
","// Functions_1Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#addS(String)} method.
*/
class Functions_1Test {","// Functions_1Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#addS(String)} method.
*/
class Functions_1Test {

	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input string is null.
	 */
	@Test
	void testAddS_1() {
		String input = null;
		String expected = null;
		String actual = Functions.addS(input);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input string is empty.
	 */
	@Test
	void testAddS_2() {
		String input = """";
		String expected = """";
		String actual = Functions.addS(input);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input string is a single character.
	 */
	@Test
	void testAddS_3() {
		String input = ""a"";
		String expected = ""a's"";
		String actual = Functions.addS(input);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input string is a single character.
	 */
	@Test
	void testAddS_4() {
		String input = ""A"";
		String expected = ""A's"";
		String actual = Functions.addS(input);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input string is a single character.
	 */
	@Test
	void testAddS_5() {
		String input = ""b"";
		String expected = ""b's"";
		String actual = Functions.addS(input);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input string is a single character.
	 */
	@Test
	void testAddS_6() {
		String input = ""B"";
		String expected = ""B's"";
		String actual = Functions.addS(input);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input string is a single character.
	 */
	@Test
	void testAddS_7() {
		String input = ""z"";
		String expected = ""z's"";
		String actual = Functions.addS(input);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input string is a single character.
	 */
	@Test
	void testAddS_8() {
		String input = ""Z"";
		String expected = ""Z's"";
		String actual = Functions.addS(input);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input string is a single character.
	 */
	@Test
	void testAddS_9() {
		String input = ""James"";
		String expected = ""James'"";
		String actual = Functions.addS(input);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input string is a single character.
	 */
	@Test
	void testAddS_10() {
		String input = ""Daniel"";
		String expected = ""Daniel's"";
		String actual = Functions.addS(input);
		assertEquals(expected, actual);
	}
}

// Functions_2Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#addS(String)} method.
*/
class Functions_2Test {
		
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input string is null.
	 */
	@Test
	void testAddS_1() {
		String input = null;
		String expected = null;
		String actual = Functions.addS(input);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input string is empty.
	 */
	@Test
	void testAddS_2() {
		String input = """";
		String expected = """";
		String actual = Functions.addS(input);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input string is a single character.
	 */
	@Test
	void testAddS_3() {
		String input = ""a"";
		String expected = ""a's"";
		String actual = Functions.addS(input);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input string is a single character.
	 */
	@Test
	void testAddS_4() {
		String input = ""A"";
		String expected = ""A's"";
		String actual = Functions.addS(input);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input string is a single character.
	 */
	@Test
	void testAddS_5() {
		String input = ""b"";
		String expected = ""b's"";
		String actual = Functions.addS(input);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input string is a single character.
	 */
	@Test
	void testAddS_6() {
		String input = ""B"";
		String expected = ""B's"";
		String actual = Functions.addS(input);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input string is a single character.
	 */
	@Test
	void testAddS_7() {
		String input = ""z"";
		String expected = ""z's"";
		String actual = Functions.addS(input);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input string is a single character.
	 */
	@Test
	void testAddS_8() {
		String input = ""Z"";
		String expected = ""Z's"
cmpl-6x2ur8AZoDRTGLNTnD1maxqadSifF,/EvoSuiteBenchmark/original/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_2Test.java,71.47621273994446,length,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    //private static Log mLogger = LogFactory.getLog(Functions.class);
    private static final Map<Integer, String> NUMBERS_WORD = new HashMap<Integer, String>();

    private static final String UNDERSCORE = ""_"";

    private static final String REGEX_UNDERSCORE_ONE_OR_MORE = ""_+"";

    private static final String REGEX_WHITESPACE_ONE_OR_MORE = ""\\s+"";

    private static final String[] TO_REPLACE = { ""-"", "":"", "","", ""'"", ""!"", ""\"""", ""\\*"", ""\\("", ""\\)"", ""~"", ""`"" };

    private static final String BLURB_SUFFIX = ""..."";

    private static final String STRING_SPACE = "" "";

    private static final String STRING_DOT = ""."";

    private static final String STRING_COMMA = "","";

    private static final String STRING_EMPTY = """";

    private static final String STRING_HTML_CR = ""<br />"";

    //private static final String STRING_CR = System.getProperty(""line.separator"");
    private final static String EOL_LINUX = ""\n"";

    private final static String EOL_WIN32 = ""\r\n"";

    private final static String EOL_MAC_LEGACY = ""\n\r"";

    public static final String LINK_PREFIX = ""webtools.link."";

    static {
    }

    public static int year(int pOffset);

    public static char toUpper(char c);

    public static char forDigit(int pDigit, int pRadix);

    public static int length(Object pCollection) throws JspTagException;

    public static String join(String[] pStrings, String pSep);

    public static String seo(String pValue);

    public static long round(double pValue);

    public static String stripHTML(String s);

    public static String blurb(String s, int pMaxLength);

    public static String blurbHTML(String s, int pMaxLength);

    public static String since(Date pFrom);

    public static String decimalFormat(double pDouble, String pPattern);

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern);

    /**
     * Add 's or ' at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     * @param pText the text
     * @return the text with 's or '
     */
    public static String addS(String pText);

    /**
     * Return the pMaxLength first characters of the string s with ""...""
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String blurbChar(String s, int pMaxLength);

    /**
     *  Break up a too big word on several lines
     * @param s
     * @param pMaxLength
     * @return
     */
    public static String cutWordCR(String s, int pMaxLength);

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String cutWordCRText(String pText, int pMaxLength);

    /**
     * Break up the too big words in the given text
     * @param pText
     * @param pMaxLength
     * @return
     */
    public static String replaceCRWithBR(String pText);

    /**
     * Convert a date in milliseconds
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime);

    /**
     * Order the words of a String
     * @param s
     * @param separator the words separator
     * @return
     */
    public static String orderWords(String s, String pSeparator);

    public static String capFirstLetters(String s);

    private static void fillTens(int pTen, String pTenWord);

    public static String numberInWord(int pValue) throws Exception;

    public static String ordinal(int pInteger);

    private static int getLastDigit(int pInteger);

    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception;

    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception;

    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception;
}
","// Functions_2Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class Functions_2Test {","// Functions_2Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class Functions_2Test {

	/**
	 * Test case for {@link Functions#dateToMilliseconds(Date)} method.
	 * It tests the case when the date is null.
	 */
	@Test
	void testDateToMilliseconds_1() {
		Date date = null;
		long result = Functions.dateToMilliseconds(date);
		assertEquals(0, result);
	}
	
	/**
	 * Test case for {@link Functions#dateToMilliseconds(Date)} method.
	 * It tests the case when the date is not null.
	 */
	@Test
	void testDateToMilliseconds_2() {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case for {@link Functions#dateToMilliseconds(Date)} method.
	 * It tests the case when the date is not null.
	 */
	@Test
	void testDateToMilliseconds_3() {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case for {@link Functions#dateToMilliseconds(Date)} method.
	 * It tests the case when the date is not null.
	 */
	@Test
	void testDateToMilliseconds_4() {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case for {@link Functions#dateToMilliseconds(Date)} method.
	 * It tests the case when the date is not null.
	 */
	@Test
	void testDateToMilliseconds_5() {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case for {@link Functions#dateToMilliseconds(Date)} method.
	 * It tests the case when the date is not null.
	 */
	@Test
	void testDateToMilliseconds_6() {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case for {@link Functions#dateToMilliseconds(Date)} method.
	 * It tests the case when the date is not null.
	 */
	@Test
	void testDateToMilliseconds_7() {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case for {@link Functions#dateToMilliseconds(Date)} method.
	 * It tests the case when the date is not null.
	 */
	@Test
	void testDateToMilliseconds_8() {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case for {@link Functions#dateToMilliseconds(Date)} method.
	 * It tests the case when the date is not null.
	 */
	@Test
	void testDateToMilliseconds_9() {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case for {@link Functions#dateToMilliseconds(Date)} method.
	 * It tests the case when the date is not null.
	 */
	@Test
	void testDateToMilliseconds_10() {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
}

// Functions_3Test.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateFormat(Date, String)} method.
*/
class Functions_3Test {
		
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)} method.
	 * It tests the case when the date is null.
	 */
	@Test
	void testDateFormat_1() {
		Date date = null;
		String pattern = """";
		String result = Functions.dateFormat(date, pattern);
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)} method.
	 * It tests the case when the date is not null.
	 */
	@Test
	void testDateFormat_2() {
		Date date = new Date();
		String pattern = """";
		String result = Functions.dateFormat(date, pattern);
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)} method.
	 * It tests the case when the date is not null.
	 */
	@Test
	void testDateFormat_3() {
		Date date = new Date();
		String pattern = """";
		String result = Functions.dateFormat(date, pattern);
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)} method.
	 * It tests the case when the date is not null.
	 */
	@Test
	void testDateFormat_4() {
		Date date = new Date();
		String pattern = """";
		String result = Functions.dateFormat(date, pattern);
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)} method.
	 * It tests the case when the date is not null.
	 */
	@Test
	void testDateFormat_5() {
		Date date = new Date();
		String pattern = """";
		String result = Functions.dateFormat(date, pattern);
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)} method.
	 * It tests the case when the date is not null.
	 */
	@Test
	void testDateFormat_6() {
		Date date = new Date();
		String pattern = """";
		String result = Functions.dateFormat(date, pattern);
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)} method.
	 * It tests the case when the date is not null.
	 */
	@Test
	void testDateFormat_7() {
		Date date = new Date();
		String pattern = """";
		String result = Functions.dateFormat(date, pattern);
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link Functions#dateFormat(Date, String)} method.
	 * It tests the case when the date is not null.
	 */
	@Test
	void testDateFormat_8() {
		Date date = new Date();
"
