ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wsJyk34zBvy0S2mwGcC4pXFhLdyU,/EvoSuiteBenchmark/scenario1/100_jgaap/src/main/java/Document.java,6.56128191947937,stop,"// Document.java
import java.io.*;
import java.util.Vector;

/**
 *   Code for storing and processing individual documents of any type.
 */
public class Document {

    public String stringify() {
        String t = new String();
        for (int i = 0; i < procText.size(); i++) t += (char) procText.elementAt(i);
        return t;
    }
}
","// DocumentTest.java


import java.io.*;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Document}.
* It contains ten unit test cases for the {@link Document#stringify()} method.
*/
class DocumentTest {","// DocumentTest.java


import java.io.*;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Document}.
* It contains ten unit test cases for the {@link Document#stringify()} method.
*/
class DocumentTest {

		/**
		* Test case for {@link Document#stringify()} method.
		* It checks if the method returns the correct string.
		*/
		@Test
		void testStringify() {
				Document doc = new Document();
				doc.procText = new Vector<Integer>();
				doc.procText.add(97);
				doc.procText.add(98);
				doc.procText.add(99);
				assertEquals(""abc"", doc.stringify());
		}
}"
cmpl-6wsL1MnlSi1DRnRhjqmYiy3QRVfZi,/EvoSuiteBenchmark/scenario1/100_jgaap/src/main/java/DocumentSet.java,61.308313608169556,,"// DocumentSet.java
import java.util.Vector;
import java.util.Hashtable;
import java.util.StringTokenizer;
import java.util.*;

/**
 * A Document Set is a group of documents written by the same author.
 * This can be used to facilitate event sets that are larger than just
 * a single document, which may be more indicative of an author's
 * entire body of work.
 */
public class DocumentSet {

    public int documentCount() {
        return documents.size();
    }
}
","// DocumentSetTest.java


import java.util.Vector;
import java.util.Hashtable;
import java.util.StringTokenizer;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DocumentSet}.
* It contains ten unit test cases for the {@link DocumentSet#documentCount()} method.
*/
class DocumentSetTest {","// DocumentSetTest.java


import java.util.Vector;
import java.util.Hashtable;
import java.util.StringTokenizer;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DocumentSet}.
* It contains ten unit test cases for the {@link DocumentSet#documentCount()} method.
*/
class DocumentSetTest {

		/**
		* Test case 1 for {@link DocumentSet#documentCount()}.
		* It tests the case when the document set is empty.
		*/
		@Test
		public void testDocumentCount1() {
				DocumentSet ds = new DocumentSet();
				assertEquals(0, ds.documentCount());
		}
		
		/**
		* Test case 2 for {@link DocumentSet#documentCount()}.
		* It tests the case when the document set has one document.
		*/
		@Test
		public void testDocumentCount2() {
				DocumentSet ds = new DocumentSet();
				ds.addDocument(new Document(""test1.txt""));
				assertEquals(1, ds.documentCount());
		}
		
		/**
		* Test case 3 for {@link DocumentSet#documentCount()}.
		* It tests the case when the document set has two documents.
		*/
		@Test
		public void testDocumentCount3() {
				DocumentSet ds = new DocumentSet();
				ds.addDocument(new Document(""test1.txt""));
				ds.addDocument(new Document(""test2.txt""));
				assertEquals(2, ds.documentCount());
		}
		
		/**
		* Test case 4 for {@link DocumentSet#documentCount()}.
		* It tests the case when the document set has three documents.
		*/
		@Test
		public void testDocumentCount4() {
				DocumentSet ds = new DocumentSet();
				ds.addDocument(new Document(""test1.txt""));
				ds.addDocument(new Document(""test2.txt""));
				ds.addDocument(new Document(""test3.txt""));
				assertEquals(3, ds.documentCount());
		}
		
		/**
		* Test case 5 for {@link DocumentSet#documentCount()}.
		* It tests the case when the document set has four documents.
		*/
		@Test
		public void testDocumentCount5() {
				DocumentSet ds = new DocumentSet();
				ds.addDocument(new Document(""test1.txt""));
				ds.addDocument(new Document(""test2.txt""));
				ds.addDocument(new Document(""test3.txt""));
				ds.addDocument(new Document(""test4.txt""));
				assertEquals(4, ds.documentCount());
		}
		
		/**
		* Test case 6 for {@link DocumentSet#documentCount()}.
		* It tests the case when the document set has five documents.
		*/
		@Test
		public void testDocumentCount6() {
				DocumentSet ds = new DocumentSet();
				ds.addDocument(new Document(""test1.txt""));
				ds.addDocument(new Document(""test2.txt""));
				ds.addDocument(new Document(""test3.txt""));
				ds.addDocument(new Document(""test4.txt""));
				ds.addDocument(new Document(""test5.txt""));
				assertEquals(5, ds.documentCount());
		}
		
		/**
		* Test case 7 for {@link DocumentSet#documentCount()}.
		* It tests the case when the document set has six documents.
		*/
		@Test
		public void testDocumentCount7() {
				DocumentSet ds = new DocumentSet();
				ds.addDocument(new Document(""test1.txt""));
				ds.addDocument(new Document(""test2.txt""));
				ds.addDocument(new Document(""test3.txt""));
				ds.addDocument(new Document(""test4.txt""));
				ds.addDocument(new Document(""test5.txt""));
				ds.addDocument(new Document(""test6.txt""));
				assertEquals(6, ds.documentCount());
		}
		
		/**
		* Test case 8 for {@link DocumentSet#documentCount()}.
		* It tests the case when the document set has seven documents.
		*/
		@Test
		public void testDocumentCount8() {
				DocumentSet ds = new DocumentSet();
				ds.addDocument(new Document(""test1.txt""));
				ds.addDocument(new Document(""test2.txt""));
				ds.addDocument(new Document(""test3.txt""));
				ds.addDocument(new Document(""test4.txt""));
				ds.addDocument(new Document(""test5.txt""));
				ds.addDocument(new Document(""test6.txt""));
				ds.addDocument(new Document(""test7.txt""));
				assertEquals(7, ds.documentCount());
		}
		
		/**
		* Test case 9 for {@link DocumentSet#documentCount()}.
		* It tests the case when the document set has eight documents.
		*/
		@Test
		public void testDocumentCount9() {
				DocumentSet ds = new DocumentSet();
				ds.addDocument(new Document(""test1.txt""));
				ds.addDocument(new Document(""test2.txt""));
				ds.addDocument(new Document(""test3.txt""));
				ds.addDocument(new Document(""test4.txt""));
				ds.addDocument(new Document(""test5.txt""));
				ds.addDocument(new Document(""test6.txt""));
				ds.addDocument(new Document(""test7.txt""));
				ds.addDocument(new Document(""test8.txt""));
				assertEquals(8, ds.documentCount());
		}
		
		/**
		* Test case 10 for {@link DocumentSet#documentCount()}.
		* It tests the case when the document set has nine documents.
		*/
		@Test
		public void testDocumentCount10() {
				DocumentSet ds = new DocumentSet();
				ds.addDocument(new Document(""test1.txt""));
				ds.addDocument(new Document(""test2.txt""));
				ds.addDocument(new Document(""test3.txt""));
				ds.addDocument(new Document(""test4.txt""));
				ds.addDocument(new Document(""test5.txt""));
				ds.addDocument(new Document(""test6.txt""));
				ds.addDocument(new Document(""test7.txt""));
				ds.addDocument(new Document(""test8.txt""));
				ds.addDocument(new Document(""test9.txt""));
				assertEquals(9, ds.documentCount());
		}
}"
cmpl-6wsM1Ej39th530joutEOLFKUjX5QJ,/EvoSuiteBenchmark/scenario1/100_jgaap/src/main/java/EventSet.java,1.8927886486053467,stop,"// EventSet.java
import java.util.Vector;
import java.util.List;

public class EventSet {

    public int size() {
        return events.size();
    }
}
","// EventSetTest.java


import java.util.Vector;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EventSet}.
* It contains ten unit test cases for the {@link EventSet#size()} method.
*/
class EventSetTest {","// EventSetTest.java


import java.util.Vector;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EventSet}.
* It contains ten unit test cases for the {@link EventSet#size()} method.
*/
class EventSetTest {

		@Test
		void testSize() {
				EventSet eventSet = new EventSet();
				assertEquals(0, eventSet.size());
		}
}"
