ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6xGwdwY4q52HhNrBIfETfqgM6WpSr,/EvoSuiteBenchmark/original/24_saxpath/src/main/java/saxpath/helpers/XPathReaderFactory_0Test.java,105.17034888267517,length,"// XPathReaderFactory.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;

/**
 * Create an {@link org.saxpath.XPathReader} from
 *  either a system property, or a named class.
 *
 *  <p>
 *  Similar to the SAX API, the <code>XPathReaderFactory</code>
 *  can create an <code>XPathReader</code> from a name of a
 *  class passed in directly, or by inspecting the system
 *  property <code>org.saxpath.driver</code>.
 *
 * @author bob mcwhirter (bob@werken.com)
 */
public class XPathReaderFactory {

    /**
     * The <code>org.saxpath.driver</code> property name.
     */
    public static final String DRIVER_PROPERTY = ""org.saxpath.driver"";

    /**
     * The default driver to use if none is configured.
     */
    protected static final String DEFAULT_DRIVER = ""com.werken.saxpath.XPathReader"";

    /**
     * Should the default driver be used
     */
    private static boolean USE_DEFAULT = true;

    /**
     * Create an <code>XPathReader</code> using the value of
     *  the <code>org.saxpath.driver</code> system property.
     *
     *  @return An instance of the <code>XPathReader</code> specified
     *          by the <code>org.saxpath.driver</code> property.
     *
     *  @throws SAXPathException if the property is unset, or if
     *          the class can not be instantiated for some reason.,
     *          or if the class doesn't implement the <code>XPathReader</code>
     *          interface.
     */
    public static XPathReader createReader() throws SAXPathException;

    /**
     * Create an <code>XPathReader</code> using the passed
     *  in class name.
     *
     *  @param className The name of the class which implements
     *         the <code>XPathReader</code> interface.
     *
     *  @throws SAXPathException if the class can not be
     *          instantiated for some reason, or if the
     *          class doesn't implement the <code>XPathReader</code>
     *          interface.
     */
    public static XPathReader createReader(String className) throws SAXPathException;
}
","// XPathReaderFactory_0Test.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XPathReaderFactory}.
* It contains ten unit test cases for the {@link XPathReaderFactory#createReader()} method.
*/
class XPathReaderFactory_0Test {","// XPathReaderFactory_0Test.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XPathReaderFactory}.
* It contains ten unit test cases for the {@link XPathReaderFactory#createReader()} method.
*/
class XPathReaderFactory_0Test {

	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is unset, and the default driver is used.
	* It expects the {@link XPathReader} instance is created successfully.
	*/
	@Test
	public void testCreateReader_0() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = true;
		XPathReader reader = XPathReaderFactory.createReader();
		assertNotNull(reader);
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is unset, and the default driver is not used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader_1() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = false;
		assertThrows(SAXPathException.class, () -> {
			XPathReaderFactory.createReader();
		});
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is used.
	* It expects the {@link XPathReader} instance is created successfully.
	*/
	@Test
	public void testCreateReader_2() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = true;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader"");
		XPathReader reader = XPathReaderFactory.createReader();
		assertNotNull(reader);
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is not used.
	* It expects the {@link XPathReader} instance is created successfully.
	*/
	@Test
	public void testCreateReader_3() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = false;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader"");
		XPathReader reader = XPathReaderFactory.createReader();
		assertNotNull(reader);
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader_4() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = true;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader_0"");
		assertThrows(SAXPathException.class, () -> {
			XPathReaderFactory.createReader();
		});
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is not used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader_5() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = false;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader_0"");
		assertThrows(SAXPathException.class, () -> {
			XPathReaderFactory.createReader();
		});
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader_6() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = true;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader_1"");
		assertThrows(SAXPathException.class, () -> {
			XPathReaderFactory.createReader();
		});
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is not used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader_7() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = false;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader_1"");
		assertThrows(SAXPathException.class, () -> {
			XPathReaderFactory.createReader();
		});
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader_8() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = true;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader_2"");
		assertThrows(SAXPathException.class, () -> {
			XPathReaderFactory.createReader();
		});
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is not used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader_9() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = false;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader_2"");
		assertThrows(SAXPathException.class, () -> {
			XPathReaderFactory.createReader();
		});
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader_10() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = true;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader_3"");
		assertThrows(SAXPathException.class, () -> {
			XPathReaderFactory.createReader();
		});
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is not used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader_11() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = false;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader_3"");
		assertThrows(SAXPathException.class, () -> {
			XPathReaderFactory.createReader();
		});
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader_12() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = true;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader_4"");
		assertThrows(SAXPathException.class, () -> {
			XPathReaderFactory.createReader();
		});
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is not used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader_13() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = false;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader_4"");
		assertThrows(SAXPathException.class, () -> {
			XPathReaderFactory.createReader();
		});
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader_14() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = true;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader_5"");
		assertThrows(SAXPathException.class, () -> {
			XPathReaderFactory.createReader();
		});
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is not used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader_15() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = false;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader_5"");
		assertThrows(SAXPathException.class, () -> {
			XPathReaderFactory.createReader();
		});
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader_16() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = true;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader_6"");
		assertThrows(SAXPathException.class, () -> {
			XPathReaderFactory.createReader();
		});
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is not used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader_17() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = false;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader_6"");
		assertThrows(SAXPathException.class, () -> {
			XPathReaderFactory.createReader();
		});
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader_18() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = true;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader_7"");
		assertThrows(SAXPathException.class, () -> {
			XPathReaderFactory.createReader();
		});
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is not used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader_19() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = false;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader_7"");
		assertThrows(SAXPathException.class, () -> {
			XPathReaderFactory.createReader();
		});
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader_20() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = true;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader_8"");
		assertThrows(SAXPathException.class, () -> {
			XPathReaderFactory.createReader();
		});
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is not used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader_21() throws SAXPathException {
		XPathReaderFactory.USE_DEFAULT = false;
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactory_0Test$TestXPathReader_8"");
		assertThrows(SAXPathException.class, () -> {
			XPathReaderFactory.createReader();
		});
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case that when the system property is set, and the default driver is used.
	* It expects the {@link SAXPathException} is thrown.
	*/
	@Test
	public void testCreateReader"
cmpl-6xGyKJoLhmPZvWEX4w5arJ6ivmWe9,/EvoSuiteBenchmark/original/24_saxpath/src/main/java/saxpath/helpers/XPathReaderFactory_1Test.java,126.63375210762024,length,"// XPathReaderFactory.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;

/**
 * Create an {@link org.saxpath.XPathReader} from
 *  either a system property, or a named class.
 *
 *  <p>
 *  Similar to the SAX API, the <code>XPathReaderFactory</code>
 *  can create an <code>XPathReader</code> from a name of a
 *  class passed in directly, or by inspecting the system
 *  property <code>org.saxpath.driver</code>.
 *
 * @author bob mcwhirter (bob@werken.com)
 */
public class XPathReaderFactory {

    /**
     * The <code>org.saxpath.driver</code> property name.
     */
    public static final String DRIVER_PROPERTY = ""org.saxpath.driver"";

    /**
     * The default driver to use if none is configured.
     */
    protected static final String DEFAULT_DRIVER = ""com.werken.saxpath.XPathReader"";

    /**
     * Should the default driver be used
     */
    private static boolean USE_DEFAULT = true;

    /**
     * Create an <code>XPathReader</code> using the value of
     *  the <code>org.saxpath.driver</code> system property.
     *
     *  @return An instance of the <code>XPathReader</code> specified
     *          by the <code>org.saxpath.driver</code> property.
     *
     *  @throws SAXPathException if the property is unset, or if
     *          the class can not be instantiated for some reason.,
     *          or if the class doesn't implement the <code>XPathReader</code>
     *          interface.
     */
    public static XPathReader createReader() throws SAXPathException;

    /**
     * Create an <code>XPathReader</code> using the passed
     *  in class name.
     *
     *  @param className The name of the class which implements
     *         the <code>XPathReader</code> interface.
     *
     *  @throws SAXPathException if the class can not be
     *          instantiated for some reason, or if the
     *          class doesn't implement the <code>XPathReader</code>
     *          interface.
     */
    public static XPathReader createReader(String className) throws SAXPathException;
}
","// XPathReaderFactory_1Test.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XPathReaderFactory}.
* It contains ten unit test cases for the {@link XPathReaderFactory#createReader(String)} method.
*/
class XPathReaderFactory_1Test {","// XPathReaderFactory_1Test.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XPathReaderFactory}.
* It contains ten unit test cases for the {@link XPathReaderFactory#createReader(String)} method.
*/
class XPathReaderFactory_1Test {

	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is null and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_Null() {
		try {
			XPathReaderFactory.createReader(null);
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is empty and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_Empty() {
		try {
			XPathReaderFactory.createReader("""");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName() {
		try {
			XPathReaderFactory.createReader(""InvalidClassName"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName2() {
		try {
			XPathReaderFactory.createReader(""java.lang.String"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName3() {
		try {
			XPathReaderFactory.createReader(""java.lang.String[]"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName4() {
		try {
			XPathReaderFactory.createReader(""java.lang.String[][]"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName5() {
		try {
			XPathReaderFactory.createReader(""java.lang.String[][][]"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName6() {
		try {
			XPathReaderFactory.createReader(""java.lang.String[][][][]"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName7() {
		try {
			XPathReaderFactory.createReader(""java.lang.String[][][][][]"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName8() {
		try {
			XPathReaderFactory.createReader(""java.lang.String[][][][][][]"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName9() {
		try {
			XPathReaderFactory.createReader(""java.lang.String[][][][][][][]"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName10() {
		try {
			XPathReaderFactory.createReader(""java.lang.String[][][][][][][][]"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
}

// XPathReaderFactory_2Test.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XPathReaderFactory}.
* It contains ten unit test cases for the {@link XPathReaderFactory#createReader(String)} method.
*/
class XPathReaderFactory_2Test {
		
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is null and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_Null() {
		try {
			XPathReaderFactory.createReader(null);
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is empty and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_Empty() {
		try {
			XPathReaderFactory.createReader("""");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName() {
		try {
			XPathReaderFactory.createReader(""InvalidClassName"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName2() {
		try {
			XPathReaderFactory.createReader(""java.lang.String"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName3() {
		try {
			XPathReaderFactory.createReader(""java.lang.String[]"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName4() {
		try {
			XPathReaderFactory.createReader(""java.lang.String[][]"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName5() {
		try {
			XPathReaderFactory.createReader(""java.lang.String[][][]"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName6() {
		try {
			XPathReaderFactory.createReader(""java.lang.String[][][][]"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName7() {
		try {
			XPathReaderFactory.createReader(""java.lang.String[][][][][]"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName8() {
		try {
			XPathReaderFactory.createReader(""java.lang.String[][][][][][]"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName9() {
		try {
			XPathReaderFactory.createReader(""java.lang.String[][][][][][][]"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName10() {
		try {
			XPathReaderFactory.createReader(""java.lang.String[][][][][][][][]"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
}

// XPathReaderFactory_3Test.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XPathReaderFactory}.
* It contains ten unit test cases for the {@link XPathReaderFactory#createReader(String)} method.
*/
class XPathReaderFactory_3Test {
		
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is null and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_Null() {
		try {
			XPathReaderFactory.createReader(null);
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is empty and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_Empty() {
		try {
			XPathReaderFactory.createReader("""");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName() {
		try {
			XPathReaderFactory.createReader(""InvalidClassName"");
			fail(""Expects a SAXPathException"");
		} catch (SAXPathException e) {
			// good
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case that the class name is not a valid class name and expects SAXPathException.
	*/
	@Test
	public void testCreateReader_InvalidClassName2() {
		try {
			XPathReaderFactory.createReader(""java.lang.String"");
			fail(""Expects"
