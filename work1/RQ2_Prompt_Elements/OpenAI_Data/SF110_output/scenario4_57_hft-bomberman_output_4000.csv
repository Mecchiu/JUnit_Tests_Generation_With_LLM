ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6xGLlpqUtluF5hKJomwEVHVlfCWx5,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/BomberClient_0Test.java,100.55826687812805,length,"// BomberClient.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;

/**
 * This is central client class. It is responsible for globally scoped messages
 * and the creation of sessions.
 *
 * @author andi
 */
public class BomberClient extends Observable {

    private static Logger logger = Logger.getLogger(BomberClient.class);

    /**
     * The socket that is used to communicate with the server.
     */
    public Socket server;

    /**
     * The ip address of the server.
     */
    private String serverName = ""localhost"";

    /**
     * The port on the server to connect to.
     */
    private int serverPort = 6666;

    /**
     * The name of the player that is running this client.
     */
    private String playerName;

    private ClientMsgReceiver msgReceiver;

    private ClientMsgSender msgSender;

    /**
     * The id offset of this client. Generated ids will be in the range from
     * idOffset to idOffset + 1000000.
     */
    private int idOffset = -1;

    /**
     * Singleton instance
     */
    private static BomberClient instance;

    /**
     * The currently used (and sole) session.
     */
    private ClientGameSession currentSession;

    /**
     * A list of sessions that are running on the server.
     */
    private Vector<SessionDetailsMsg> availableSessions = new Vector<SessionDetailsMsg>();

    /**
     * A list of maps that are availbale on the server.
     */
    private Vector<MapInfo> availableMaps;

    private ClientGameSession requestedSession;

    /**
     * @return The current game session.
     */
    public ClientGameSession getCurrentSession();

    /**
     * Creates a new BomberClient. Use getInstance() to aquire an instance.
     *
     * @param playerName
     *            The name of the player on this client.
     */
    private BomberClient(String playerName) {
    }

    /**
     * Returns the singleton.
     *
     * @return The only BomberClient instance.
     */
    public static BomberClient getInstance();

    /**
     * Tries to connect to the server.
     *
     * @throws RuntimeException
     *             Thrown when the connection attempt was not successful.
     */
    public boolean connectToSrv();

    /**
     * Sends a message to the server. The passed object will be serialized and
     * transmitted to the server.
     *
     * @param msg
     *            The message to send.
     */
    public void sendMsg(Message msg);

    /**
     * Creates a new id that is guaranteed to be unique for this class.
     *
     * @return The next valid id for this class.
     */
    public int getNextId();

    /**
     * Sets the id offset.
     *
     * @param idOffset
     *            to set
     */
    public void setIdOffset(int idOffset);

    /**
     * Sets the current session.
     *
     * @param The
     *            ClientGameSession to set.
     */
    public void setCurrentSession(ClientGameSession currentSession);

    /**
     * Create a new session on the server. The given arguments are rolled up
     * into a SessionDetailsMsg and sent to the server.
     *
     * @param name
     *            The name for the new session.
     * @param maps
     *            A list of map names that will be used for this session
     * @param totalPlayers
     *            The total number of players.
     * @param rounds
     *            The number of rounds to play.
     */
    public void createSession(String name, List<String> maps, ImageIcon mapPreview, int totalPlayers, int rounds);

    public void openSession();

    /**
     * Requests a list of active sessions on the server.
     */
    public void requestSessionList();

    /**
     * Requests a list of available maps from the server.
     */
    public void requestMapList();

    /**
     * Returns a list of active sessions on the server. Invoke
     * requestSessionList() to update this list.
     *
     * @return
     */
    public Vector<SessionDetailsMsg> getAvailableSessions();

    /**
     * @param sessionInfos
     */
    public void setAvailableSessions(Vector<SessionDetailsMsg> sessionInfos);

    /**
     * @param maps
     */
    public void setAvailableMaps(List<MapInfo> maps);

    /**
     * @return the availableMaps
     */
    public Vector<MapInfo> getAvailableMaps();

    /**
     * Creates a session from the details specified in the given
     * SessionDetailMsg.
     *
     * @param session
     *            The session to open on this client.
     */
    public void createSession(SessionDetailsMsg sessionDetails);

    /**
     * Sets the server-name
     *
     * @author Bj�rn
     */
    public void setServerName(String serverName);

    /**
     * Sets the server-port
     *
     * @author Bj�rn
     */
    public void setServerPort(int serverPort);

    /**
     * @param sender
     * @param msg
     */
    public void addChatGlobal(String sender, String msg);

    /**
     * @param sender
     * @param msg
     */
    public void addChatSession(String sender, String msg);

    public void discardSessionRequest();

    /**
     * Closes the current session.
     */
    public void closeSession();

    /**
     * Closes the current session.
     */
    public void closeSessionAndShowHighscores();

    /**
     * Leave the current session.
     */
    public void leaveSession();

    public void closeConnection();

    public String getPlayerName();

    public void setPlayerName(String playerName);

    public void requestGlobalScore();

    public void setGlobalscores(ArrayList scores);

    public void setRoundScore(HashMap<String, Integer> rndscore);

    public void setSessionScore(HashMap<String, Integer> rndscore);

    /**
     * @param i
     */
    public void quitRunningSession(int playerId);
}
","// BomberClient_0Test.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#getInstance()} method.
*/
class BomberClient_0Test {","// BomberClient_0Test.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#getInstance()} method.
*/
class BomberClient_0Test {

	/**
	* Test case for {@link BomberClient#getInstance()}
	*
	* @throws IOException
	*/
	@Test
	void testGetInstance() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		assertNotNull(bomberClient);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()}
	*
	* @throws IOException
	*/
	@Test
	void testGetInstance_0() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		assertNotNull(bomberClient);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()}
	*
	* @throws IOException
	*/
	@Test
	void testGetInstance_1() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		assertNotNull(bomberClient);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()}
	*
	* @throws IOException
	*/
	@Test
	void testGetInstance_2() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		assertNotNull(bomberClient);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()}
	*
	* @throws IOException
	*/
	@Test
	void testGetInstance_3() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		assertNotNull(bomberClient);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()}
	*
	* @throws IOException
	*/
	@Test
	void testGetInstance_4() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		assertNotNull(bomberClient);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()}
	*
	* @throws IOException
	*/
	@Test
	void testGetInstance_5() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		assertNotNull(bomberClient);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()}
	*
	* @throws IOException
	*/
	@Test
	void testGetInstance_6() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		assertNotNull(bomberClient);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()}
	*
	* @throws IOException
	*/
	@Test
	void testGetInstance_7() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		assertNotNull(bomberClient);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()}
	*
	* @throws IOException
	*/
	@Test
	void testGetInstance_8() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		assertNotNull(bomberClient);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()}
	*
	* @throws IOException
	*/
	@Test
	void testGetInstance_9() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		assertNotNull(bomberClient);
	}
	
}

// BomberClient_1Test.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#connectToSrv()} method.
*/
class BomberClient_1Test {
		
	/**
	* Test case for {@link BomberClient#connectToSrv()}
	*
	* @throws IOException
	*/
	@Test
	void testConnectToSrv() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		boolean result = bomberClient.connectToSrv();
		assertTrue(result);
	}
	
	/**
	* Test case for {@link BomberClient#connectToSrv()}
	*
	* @throws IOException
	*/
	@Test
	void testConnectToSrv_0() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		boolean result = bomberClient.connectToSrv();
		assertTrue(result);
	}
	
	/**
	* Test case for {@link BomberClient#connectToSrv()}
	*
	* @throws IOException
	*/
	@Test
	void testConnectToSrv_1() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		boolean result = bomberClient.connectToSrv();
		assertTrue(result);
	}
	
	/**
	* Test case for {@link BomberClient#connectToSrv()}
	*
	* @throws IOException
	*/
	@Test
	void testConnectToSrv_2() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		boolean result = bomberClient.connectToSrv();
		assertTrue(result);
	}
	
	/**
	* Test case for {@link BomberClient#connectToSrv()}
	*
	* @throws IOException
	*/
	@Test
	void testConnectToSrv_3() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		boolean result = bomberClient.connectToSrv();
		assertTrue(result);
	}
	
	/**
	* Test case for {@link BomberClient#connectToSrv()}
	*
	* @throws IOException
	*/
	@Test
	void testConnectToSrv_4() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		boolean result = bomberClient.connectToSrv();
		assertTrue(result);
	}
	
	/**
	* Test case for {@link BomberClient#connectToSrv()}
	*
	* @throws IOException
	*/
	@Test
	void testConnectToSrv_5() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		boolean result = bomberClient.connectToSrv();
		assertTrue(result);
	}
	
	/**
	* Test case for {@link BomberClient#connectToSrv()}
	*
	* @throws IOException
	*/
	@Test
	void testConnectToSrv_6() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		boolean result = bomberClient.connectToSrv();
		assertTrue(result);
	}
	
	/**
	* Test case for {@link BomberClient#connectToSrv()}
	*
	* @throws IOException
	*/
	@Test
	void testConnectToSrv_7() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		boolean result = bomberClient.connectToSrv();
		assertTrue(result);
	}
	
	/**
	* Test case for {@link BomberClient#connectToSrv()}
	*
	* @throws IOException
	*/
	@Test
	void testConnectToSrv_8() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		boolean result = bomberClient.connectToSrv();
		assertTrue(result);
	}
	
	/**
	* Test case for {@link BomberClient#connectToSrv()}
	*
	* @throws IOException
	*/
	@Test
	void testConnectToSrv_9() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		boolean result = bomberClient.connectToSrv();
		assertTrue(result);
	}
	
}

// BomberClient_2Test.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#sendMsg(Message)} method.
*/
class BomberClient_2Test {
		
	/**
	* Test case for {@link BomberClient#sendMsg(Message)}
	*
	* @throws IOException
	*/
	@Test
	void testSendMsg() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		Message msg = new InfoRequestMsg();
		bomberClient.sendMsg(msg);
	}
	
	/**
	* Test case for {@link BomberClient#sendMsg(Message)}
	*
	* @throws IOException
	*/
	@Test
	void testSendMsg_0() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		Message msg = new InfoRequestMsg();
		bomberClient.sendMsg(msg);
	}
	
	/**
	* Test case for {@link BomberClient#sendMsg(Message)}
	*
	* @throws IOException
	*/
	@Test
	void testSendMsg_1() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		Message msg = new InfoRequestMsg();
		bomberClient.sendMsg(msg);
	}
	
	/**
	* Test case for {@link BomberClient#sendMsg(Message)}
	*
	* @throws IOException
	*/
	@Test
	void testSendMsg_2() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		Message msg = new InfoRequestMsg();
		bomberClient.sendMsg(msg);
	}
	
	/**
	* Test case for {@link BomberClient#sendMsg(Message)}
	*
	* @throws IOException
	*/
	@Test
	void testSendMsg_3() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		Message msg = new InfoRequestMsg();
		bomberClient.sendMsg(msg);
	}
	
	/**
	* Test case for {@link BomberClient#sendMsg(Message)}
	*
	* @throws IOException
	*/
	@Test
	void testSendMsg_4() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		Message msg = new InfoRequestMsg();
		bomberClient.sendMsg(msg);
	}
	
	/**
	* Test case for {@link BomberClient#sendMsg(Message)}
	*
	* @throws IOException
	*/
	@Test
	void testSendMsg_5() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		Message msg = new InfoRequestMsg();
		bomberClient.sendMsg(msg);
	}
	
	/**
	* Test case for {@link BomberClient#sendMsg(Message)}
	*
	* @throws IOException
	*/
	@Test
	void testSendMsg_6() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		Message msg = new InfoRequestMsg();
		bomberClient.sendMsg(msg);
	}
	
	/**
	* Test case for {@link BomberClient#sendMsg(Message)}
	*
	* @throws IOException
	*/
	@Test
	void testSendMsg_7() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		Message msg = new InfoRequestMsg();
		bomberClient.sendMsg(msg);
	}
	
	/**
	* Test case for {@link BomberClient#sendMsg(Message)}
	*
	* @throws IOException
	*/
	@Test
	void testSendMsg_8() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		Message msg = new InfoRequestMsg();
		bomberClient.sendMsg(msg);
	}
	
	/**
	* Test case for {@link BomberClient#sendMsg(Message)}
	*
	* @throws IOException
	*/
	@Test
	void testSendMsg_9() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		Message msg = new InfoRequestMsg();
		bomberClient.sendMsg(msg);
	}
	
}

// BomberClient_3Test.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#getNextId()} method.
*/
class BomberClient_3Test {
		
	/**
	* Test case for {@link BomberClient#getNextId()}
	*
	* @throws IOException
	*/
	@Test
	void testGetNextId() throws IOException {
		BomberClient bomberClient = BomberClient.getInstance();
		int result = bomberClient.getNextId();
		assertEquals(0, result);
	}
	
	/**
	* Test case for {"
cmpl-6xGNO1GUAgKTfseXxzBG5n2enId7t,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/BomberClient_1Test.java,103.1179130077362,length,"// BomberClient.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;

/**
 * This is central client class. It is responsible for globally scoped messages
 * and the creation of sessions.
 *
 * @author andi
 */
public class BomberClient extends Observable {

    private static Logger logger = Logger.getLogger(BomberClient.class);

    /**
     * The socket that is used to communicate with the server.
     */
    public Socket server;

    /**
     * The ip address of the server.
     */
    private String serverName = ""localhost"";

    /**
     * The port on the server to connect to.
     */
    private int serverPort = 6666;

    /**
     * The name of the player that is running this client.
     */
    private String playerName;

    private ClientMsgReceiver msgReceiver;

    private ClientMsgSender msgSender;

    /**
     * The id offset of this client. Generated ids will be in the range from
     * idOffset to idOffset + 1000000.
     */
    private int idOffset = -1;

    /**
     * Singleton instance
     */
    private static BomberClient instance;

    /**
     * The currently used (and sole) session.
     */
    private ClientGameSession currentSession;

    /**
     * A list of sessions that are running on the server.
     */
    private Vector<SessionDetailsMsg> availableSessions = new Vector<SessionDetailsMsg>();

    /**
     * A list of maps that are availbale on the server.
     */
    private Vector<MapInfo> availableMaps;

    private ClientGameSession requestedSession;

    /**
     * @return The current game session.
     */
    public ClientGameSession getCurrentSession();

    /**
     * Creates a new BomberClient. Use getInstance() to aquire an instance.
     *
     * @param playerName
     *            The name of the player on this client.
     */
    private BomberClient(String playerName) {
    }

    /**
     * Returns the singleton.
     *
     * @return The only BomberClient instance.
     */
    public static BomberClient getInstance();

    /**
     * Tries to connect to the server.
     *
     * @throws RuntimeException
     *             Thrown when the connection attempt was not successful.
     */
    public boolean connectToSrv();

    /**
     * Sends a message to the server. The passed object will be serialized and
     * transmitted to the server.
     *
     * @param msg
     *            The message to send.
     */
    public void sendMsg(Message msg);

    /**
     * Creates a new id that is guaranteed to be unique for this class.
     *
     * @return The next valid id for this class.
     */
    public int getNextId();

    /**
     * Sets the id offset.
     *
     * @param idOffset
     *            to set
     */
    public void setIdOffset(int idOffset);

    /**
     * Sets the current session.
     *
     * @param The
     *            ClientGameSession to set.
     */
    public void setCurrentSession(ClientGameSession currentSession);

    /**
     * Create a new session on the server. The given arguments are rolled up
     * into a SessionDetailsMsg and sent to the server.
     *
     * @param name
     *            The name for the new session.
     * @param maps
     *            A list of map names that will be used for this session
     * @param totalPlayers
     *            The total number of players.
     * @param rounds
     *            The number of rounds to play.
     */
    public void createSession(String name, List<String> maps, ImageIcon mapPreview, int totalPlayers, int rounds);

    public void openSession();

    /**
     * Requests a list of active sessions on the server.
     */
    public void requestSessionList();

    /**
     * Requests a list of available maps from the server.
     */
    public void requestMapList();

    /**
     * Returns a list of active sessions on the server. Invoke
     * requestSessionList() to update this list.
     *
     * @return
     */
    public Vector<SessionDetailsMsg> getAvailableSessions();

    /**
     * @param sessionInfos
     */
    public void setAvailableSessions(Vector<SessionDetailsMsg> sessionInfos);

    /**
     * @param maps
     */
    public void setAvailableMaps(List<MapInfo> maps);

    /**
     * @return the availableMaps
     */
    public Vector<MapInfo> getAvailableMaps();

    /**
     * Creates a session from the details specified in the given
     * SessionDetailMsg.
     *
     * @param session
     *            The session to open on this client.
     */
    public void createSession(SessionDetailsMsg sessionDetails);

    /**
     * Sets the server-name
     *
     * @author Bj�rn
     */
    public void setServerName(String serverName);

    /**
     * Sets the server-port
     *
     * @author Bj�rn
     */
    public void setServerPort(int serverPort);

    /**
     * @param sender
     * @param msg
     */
    public void addChatGlobal(String sender, String msg);

    /**
     * @param sender
     * @param msg
     */
    public void addChatSession(String sender, String msg);

    public void discardSessionRequest();

    /**
     * Closes the current session.
     */
    public void closeSession();

    /**
     * Closes the current session.
     */
    public void closeSessionAndShowHighscores();

    /**
     * Leave the current session.
     */
    public void leaveSession();

    public void closeConnection();

    public String getPlayerName();

    public void setPlayerName(String playerName);

    public void requestGlobalScore();

    public void setGlobalscores(ArrayList scores);

    public void setRoundScore(HashMap<String, Integer> rndscore);

    public void setSessionScore(HashMap<String, Integer> rndscore);

    /**
     * @param i
     */
    public void quitRunningSession(int playerId);
}
","// BomberClient_1Test.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#connectToSrv()} method.
*/
class BomberClient_1Test {","// BomberClient_1Test.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#connectToSrv()} method.
*/
class BomberClient_1Test {

	/**
	* Test case 1 for method {@link BomberClient#connectToSrv()}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testConnectToSrv_1() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		// when
		boolean result = bomberClient.connectToSrv();
		// then
		assertTrue(result);
	}
		
	/**
	* Test case 2 for method {@link BomberClient#connectToSrv()}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testConnectToSrv_2() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		// when
		boolean result = bomberClient.connectToSrv();
		// then
		assertTrue(result);
	}
		
	/**
	* Test case 3 for method {@link BomberClient#connectToSrv()}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testConnectToSrv_3() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		// when
		boolean result = bomberClient.connectToSrv();
		// then
		assertTrue(result);
	}
		
	/**
	* Test case 4 for method {@link BomberClient#connectToSrv()}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testConnectToSrv_4() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		// when
		boolean result = bomberClient.connectToSrv();
		// then
		assertTrue(result);
	}
		
	/**
	* Test case 5 for method {@link BomberClient#connectToSrv()}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testConnectToSrv_5() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		// when
		boolean result = bomberClient.connectToSrv();
		// then
		assertTrue(result);
	}
		
	/**
	* Test case 6 for method {@link BomberClient#connectToSrv()}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testConnectToSrv_6() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		// when
		boolean result = bomberClient.connectToSrv();
		// then
		assertTrue(result);
	}
		
	/**
	* Test case 7 for method {@link BomberClient#connectToSrv()}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testConnectToSrv_7() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		// when
		boolean result = bomberClient.connectToSrv();
		// then
		assertTrue(result);
	}
		
	/**
	* Test case 8 for method {@link BomberClient#connectToSrv()}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testConnectToSrv_8() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		// when
		boolean result = bomberClient.connectToSrv();
		// then
		assertTrue(result);
	}
		
	/**
	* Test case 9 for method {@link BomberClient#connectToSrv()}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testConnectToSrv_9() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		// when
		boolean result = bomberClient.connectToSrv();
		// then
		assertTrue(result);
	}
		
	/**
	* Test case 10 for method {@link BomberClient#connectToSrv()}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testConnectToSrv_10() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		// when
		boolean result = bomberClient.connectToSrv();
		// then
		assertTrue(result);
	}
}

// BomberClient_2Test.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#sendMsg(Message)} method.
*/
class BomberClient_2Test {
		
	/**
	* Test case 1 for method {@link BomberClient#sendMsg(Message)}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testSendMsg_1() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		bomberClient.connectToSrv();
		Message msg = new InfoRequestMsg();
		// when
		bomberClient.sendMsg(msg);
		// then
		assertTrue(true);
	}
		
	/**
	* Test case 2 for method {@link BomberClient#sendMsg(Message)}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testSendMsg_2() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		bomberClient.connectToSrv();
		Message msg = new InfoRequestMsg();
		// when
		bomberClient.sendMsg(msg);
		// then
		assertTrue(true);
	}
		
	/**
	* Test case 3 for method {@link BomberClient#sendMsg(Message)}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testSendMsg_3() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		bomberClient.connectToSrv();
		Message msg = new InfoRequestMsg();
		// when
		bomberClient.sendMsg(msg);
		// then
		assertTrue(true);
	}
		
	/**
	* Test case 4 for method {@link BomberClient#sendMsg(Message)}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testSendMsg_4() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		bomberClient.connectToSrv();
		Message msg = new InfoRequestMsg();
		// when
		bomberClient.sendMsg(msg);
		// then
		assertTrue(true);
	}
		
	/**
	* Test case 5 for method {@link BomberClient#sendMsg(Message)}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testSendMsg_5() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		bomberClient.connectToSrv();
		Message msg = new InfoRequestMsg();
		// when
		bomberClient.sendMsg(msg);
		// then
		assertTrue(true);
	}
		
	/**
	* Test case 6 for method {@link BomberClient#sendMsg(Message)}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testSendMsg_6() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		bomberClient.connectToSrv();
		Message msg = new InfoRequestMsg();
		// when
		bomberClient.sendMsg(msg);
		// then
		assertTrue(true);
	}
		
	/**
	* Test case 7 for method {@link BomberClient#sendMsg(Message)}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testSendMsg_7() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		bomberClient.connectToSrv();
		Message msg = new InfoRequestMsg();
		// when
		bomberClient.sendMsg(msg);
		// then
		assertTrue(true);
	}
		
	/**
	* Test case 8 for method {@link BomberClient#sendMsg(Message)}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testSendMsg_8() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		bomberClient.connectToSrv();
		Message msg = new InfoRequestMsg();
		// when
		bomberClient.sendMsg(msg);
		// then
		assertTrue(true);
	}
		
	/**
	* Test case 9 for method {@link BomberClient#sendMsg(Message)}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testSendMsg_9() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		bomberClient.connectToSrv();
		Message msg = new InfoRequestMsg();
		// when
		bomberClient.sendMsg(msg);
		// then
		assertTrue(true);
	}
		
	/**
	* Test case 10 for method {@link BomberClient#sendMsg(Message)}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testSendMsg_10() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"";
		bomberClient.serverPort = 6666;
		bomberClient.connectToSrv();
		Message msg = new InfoRequestMsg();
		// when
		bomberClient.sendMsg(msg);
		// then
		assertTrue(true);
	}
}

// BomberClient_3Test.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#getNextId()} method.
*/
class BomberClient_3Test {
		
	/**
	* Test case 1 for method {@link BomberClient#getNextId()}.
	*
	* @throws IOException
	* @throws RuntimeException
	*/
	@Test
	void testGetNextId_1() throws IOException, RuntimeException {
		// given
		BomberClient bomberClient = new BomberClient(""playerName"");
		bomberClient.serverName = ""localhost"
cmpl-6xGP3o67DlLpNdXE07jgyrUKz9BNR,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/ClientGameRound.java,94.87133002281189,length,"// ClientGameRound.java
package client;

import java.awt.Point;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import org.apache.log4j.Logger;
import client.controller.LocalControl;
import client.gui.StartFrame;
import client.network.ForwardingObserver;
import client.view.BombView;
import client.view.GameCanvas;
import client.view.GameView;
import client.view.GfxFactory;
import client.view.OffGamePainter;
import client.view.PlayerView;
import client.view.PowerUpView;
import client.view.StatusView;
import client.view.TileView;
import common.Bomb;
import common.Constants;
import common.GameModel;
import common.GameObject;
import common.GameRound;
import common.Map;
import common.Player;
import common.PowerUp;
import common.Tile;

/**
 * Represents a game on the client side. This class serves as a connection
 * between the model, view and game loop.
 *
 * @author Andi, Bj�rn
 */
public class ClientGameRound extends GameRound implements Observer {

    /**
     * The GameModel instance for this game.
     */
    private GameModel model;

    /**
     * The GameView instance for this game.
     */
    private GameView view;

    /**
     * The GameLoop instance for this game.
     */
    private ClientGameLoop gameLoop;

    /**
     * The GfxFactory instance for this game.
     */
    private GfxFactory gfxFactory;

    private static final Logger logger = Logger.getLogger(ClientGameRound.class);

    private Player localPlayer;

    private final ClientGameSession session;

    private Thread offGamePainter;

    private final GameCanvas gameCanvas;

    private ForwardingObserver forwardingObserver;

    /**
     * Creates a new game that will be painted on the passed GameCanvas object.
     * When this constructor finishes, all necessary game objects will be
     * initialized, but they will lack player and map objects.
     *
     * @param gameCanvas
     *            The canvas that will be used for painting the view.
     */
    public ClientGameRound(ClientGameSession session, GameCanvas gameCanvas) {
    }

    /**
     * Adds a player to the game. Adds the player object to GameModel and
     * creates a view object for the player and adds it to the GameView.
     *
     * @param player
     *            The player to add to this game.
     */
    public void addPlayer(int id, ClientPlayer player);

    public void addBomb(int id, Bomb bomb);

    /**
     * Sets the map for this game. All tiles that are contained in the map are
     * added to the GameModel. For every tile a TileView is created and added to
     * the GameView.
     *
     * @param map=
     *            The map that will be used in this game.
     */
    public void setMap(Map map);

    /**
     * Starts this game by creating a new thread and running the game loop in
     * it.
     */
    public void start();

    /**
     * Set the local control for this game. This control will be used to move
     * the local player on the screen.
     *
     * @param localControl
     *            The local control to use.
     */
    public void setLocalControl(LocalControl localControl);

    /**
     * Called when an observable has changed. Usages:
     * <ul>
     * <li>Player plants a bomb
     * </ul>
     *
     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)
     */
    @Override
    public void update(Observable o, Object arg);

    /**
     * Searches and returns a GameObject by its id.
     *
     * @param id
     *            The id of the GameObject that should be returned.
     * @return The matching GameObject or null if the id is unknown.
     */
    public GameObject getGameObjectById(int id);

    /**
     * Updates the countdown for this GameRound. Visual and acoustic
     * notifications will be triggered.
     *
     * @param countdown
     *            The current countdown.
     */
    public void countdown(int countdown);

    /**
     * @param player
     */
    public void setLocalPlayer(Player localPlayer);

    /**
     * Finishes this game round by calculating the score and notifying the
     * session that the round has ended.
     *
     * @see common.GameRound#doPostRoundProcessing()
     */
    @Override
    public void doPostRoundProcessing();

    /**
     * Snaps the location of the given bomb to the next intersection on the
     * grid.
     *
     * @param bomb
     *            The bomb that should be relocated on the grid.
     */
    public void snapToGrid(Bomb bomb);

    /**
     * Sets the status of the round. This is used to inform the user about
     * what's happening.
     *
     * @param string
     *            The string that will be displayed to the user.
     */
    public void setStatus(String string);

    /**
     * End the game round. The action will stop but the game will still be
     * painted on the canvas.
     */
    public void endRound();

    /**
     * Terminate this round. This will stop the rendering of the game.
     */
    public void terminateRound();

    /**
     * Returns the actual time of this GameRound.
     *
     * @return long - actual time
     */
    public long getTime();

    /**
     * Sets the time of this GameRound.
     *
     * @param time
     *            the time, which should be set
     */
    public void setTime(long time);

    /**
     * {@inheritDoc}
     */
    @Override
    public void createNewTile(Point point, int id, String type, boolean bombable, boolean accessible, boolean active);

    public void toggleDisplayNames();

    public void setRoundScore(HashMap<String, Integer> rndscore);
}
","// ClientGameRoundTest.java
package client;

import java.awt.Point;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import org.apache.log4j.Logger;
import client.controller.LocalControl;
import client.gui.StartFrame;
import client.network.ForwardingObserver;
import client.view.BombView;
import client.view.GameCanvas;
import client.view.GameView;
import client.view.GfxFactory;
import client.view.OffGamePainter;
import client.view.PlayerView;
import client.view.PowerUpView;
import client.view.StatusView;
import client.view.TileView;
import common.Bomb;
import common.Constants;
import common.GameModel;
import common.GameObject;
import common.GameRound;
import common.Map;
import common.Player;
import common.PowerUp;
import common.Tile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientGameRound}.
* It contains ten unit test cases for the {@link ClientGameRound#getGameObjectById(int)} method.
*/
class ClientGameRoundTest {","// ClientGameRoundTest.java
package client;

import java.awt.Point;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import org.apache.log4j.Logger;
import client.controller.LocalControl;
import client.gui.StartFrame;
import client.network.ForwardingObserver;
import client.view.BombView;
import client.view.GameCanvas;
import client.view.GameView;
import client.view.GfxFactory;
import client.view.OffGamePainter;
import client.view.PlayerView;
import client.view.PowerUpView;
import client.view.StatusView;
import client.view.TileView;
import common.Bomb;
import common.Constants;
import common.GameModel;
import common.GameObject;
import common.GameRound;
import common.Map;
import common.Player;
import common.PowerUp;
import common.Tile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientGameRound}.
* It contains ten unit test cases for the {@link ClientGameRound#getGameObjectById(int)} method.
*/
class ClientGameRoundTest {

		private static final Logger logger = Logger.getLogger(ClientGameRoundTest.class);
		
		private ClientGameRound clientGameRound;
		
		private GameModel model;
		
		private GameView view;
		
		private ClientGameLoop gameLoop;
		
		private GfxFactory gfxFactory;
		
		private Player localPlayer;
		
		private ClientGameSession session;
		
		private Thread offGamePainter;
		
		private GameCanvas gameCanvas;
		
		private ForwardingObserver forwardingObserver;
		
		private int id;
		
		private ClientPlayer player;
		
		private Bomb bomb;
		
		private Map map;
		
		private LocalControl localControl;
		
		private Observable o;
		
		private Object arg;
		
		private GameObject gameObject;
		
		private int countdown;
		
		private String string;
		
		private long time;
		
		private Point point;
		
		private String type;
		
		private boolean bombable;
		
		private boolean accessible;
		
		private boolean active;
		
		private HashMap<String, Integer> rndscore;
		
		/**
		* Test case for {@link ClientGameRound#getGameObjectById(int)}.
		* It tests the case when the id is unknown.
		*/
		@Test
		void testGetGameObjectById_1() {
				clientGameRound = new ClientGameRound(session, gameCanvas);
				clientGameRound.addPlayer(id, player);
				clientGameRound.addBomb(id, bomb);
				clientGameRound.setMap(map);
				clientGameRound.start();
				clientGameRound.setLocalControl(localControl);
				clientGameRound.update(o, arg);
				clientGameRound.getGameObjectById(id);
				clientGameRound.countdown(countdown);
				clientGameRound.setLocalPlayer(localPlayer);
				clientGameRound.doPostRoundProcessing();
				clientGameRound.snapToGrid(bomb);
				clientGameRound.setStatus(string);
				clientGameRound.endRound();
				clientGameRound.terminateRound();
				clientGameRound.getTime();
				clientGameRound.setTime(time);
				clientGameRound.createNewTile(point, id, type, bombable, accessible, active);
				clientGameRound.toggleDisplayNames();
				clientGameRound.setRoundScore(rndscore);
				assertNull(clientGameRound.getGameObjectById(id));
		}
		
		/**
		* Test case for {@link ClientGameRound#getGameObjectById(int)}.
		* It tests the case when the id is unknown.
		*/
		@Test
		void testGetGameObjectById_2() {
				clientGameRound = new ClientGameRound(session, gameCanvas);
				clientGameRound.addPlayer(id, player);
				clientGameRound.addBomb(id, bomb);
				clientGameRound.setMap(map);
				clientGameRound.start();
				clientGameRound.setLocalControl(localControl);
				clientGameRound.update(o, arg);
				clientGameRound.getGameObjectById(id);
				clientGameRound.countdown(countdown);
				clientGameRound.setLocalPlayer(localPlayer);
				clientGameRound.doPostRoundProcessing();
				clientGameRound.snapToGrid(bomb);
				clientGameRound.setStatus(string);
				clientGameRound.endRound();
				clientGameRound.terminateRound();
				clientGameRound.getTime();
				clientGameRound.setTime(time);
				clientGameRound.createNewTile(point, id, type, bombable, accessible, active);
				clientGameRound.toggleDisplayNames();
				clientGameRound.setRoundScore(rndscore);
				assertNull(clientGameRound.getGameObjectById(id));
		}
		
		/**
		* Test case for {@link ClientGameRound#getGameObjectById(int)}.
		* It tests the case when the id is unknown.
		*/
		@Test
		void testGetGameObjectById_3() {
				clientGameRound = new ClientGameRound(session, gameCanvas);
				clientGameRound.addPlayer(id, player);
				clientGameRound.addBomb(id, bomb);
				clientGameRound.setMap(map);
				clientGameRound.start();
				clientGameRound.setLocalControl(localControl);
				clientGameRound.update(o, arg);
				clientGameRound.getGameObjectById(id);
				clientGameRound.countdown(countdown);
				clientGameRound.setLocalPlayer(localPlayer);
				clientGameRound.doPostRoundProcessing();
				clientGameRound.snapToGrid(bomb);
				clientGameRound.setStatus(string);
				clientGameRound.endRound();
				clientGameRound.terminateRound();
				clientGameRound.getTime();
				clientGameRound.setTime(time);
				clientGameRound.createNewTile(point, id, type, bombable, accessible, active);
				clientGameRound.toggleDisplayNames();
				clientGameRound.setRoundScore(rndscore);
				assertNull(clientGameRound.getGameObjectById(id));
		}
		
		/**
		* Test case for {@link ClientGameRound#getGameObjectById(int)}.
		* It tests the case when the id is unknown.
		*/
		@Test
		void testGetGameObjectById_4() {
				clientGameRound = new ClientGameRound(session, gameCanvas);
				clientGameRound.addPlayer(id, player);
				clientGameRound.addBomb(id, bomb);
				clientGameRound.setMap(map);
				clientGameRound.start();
				clientGameRound.setLocalControl(localControl);
				clientGameRound.update(o, arg);
				clientGameRound.getGameObjectById(id);
				clientGameRound.countdown(countdown);
				clientGameRound.setLocalPlayer(localPlayer);
				clientGameRound.doPostRoundProcessing();
				clientGameRound.snapToGrid(bomb);
				clientGameRound.setStatus(string);
				clientGameRound.endRound();
				clientGameRound.terminateRound();
				clientGameRound.getTime();
				clientGameRound.setTime(time);
				clientGameRound.createNewTile(point, id, type, bombable, accessible, active);
				clientGameRound.toggleDisplayNames();
				clientGameRound.setRoundScore(rndscore);
				assertNull(clientGameRound.getGameObjectById(id));
		}
		
		/**
		* Test case for {@link ClientGameRound#getGameObjectById(int)}.
		* It tests the case when the id is unknown.
		*/
		@Test
		void testGetGameObjectById_5() {
				clientGameRound = new ClientGameRound(session, gameCanvas);
				clientGameRound.addPlayer(id, player);
				clientGameRound.addBomb(id, bomb);
				clientGameRound.setMap(map);
				clientGameRound.start();
				clientGameRound.setLocalControl(localControl);
				clientGameRound.update(o, arg);
				clientGameRound.getGameObjectById(id);
				clientGameRound.countdown(countdown);
				clientGameRound.setLocalPlayer(localPlayer);
				clientGameRound.doPostRoundProcessing();
				clientGameRound.snapToGrid(bomb);
				clientGameRound.setStatus(string);
				clientGameRound.endRound();
				clientGameRound.terminateRound();
				clientGameRound.getTime();
				clientGameRound.setTime(time);
				clientGameRound.createNewTile(point, id, type, bombable, accessible, active);
				clientGameRound.toggleDisplayNames();
				clientGameRound.setRoundScore(rndscore);
				assertNull(clientGameRound.getGameObjectById(id));
		}
		
		/**
		* Test case for {@link ClientGameRound#getGameObjectById(int)}.
		* It tests the case when the id is unknown.
		*/
		@Test
		void testGetGameObjectById_6() {
				clientGameRound = new ClientGameRound(session, gameCanvas);
				clientGameRound.addPlayer(id, player);
				clientGameRound.addBomb(id, bomb);
				clientGameRound.setMap(map);
				clientGameRound.start();
				clientGameRound.setLocalControl(localControl);
				clientGameRound.update(o, arg);
				clientGameRound.getGameObjectById(id);
				clientGameRound.countdown(countdown);
				clientGameRound.setLocalPlayer(localPlayer);
				clientGameRound.doPostRoundProcessing();
				clientGameRound.snapToGrid(bomb);
				clientGameRound.setStatus(string);
				clientGameRound.endRound();
				clientGameRound.terminateRound();
				clientGameRound.getTime();
				clientGameRound.setTime(time);
				clientGameRound.createNewTile(point, id, type, bombable, accessible, active);
				clientGameRound.toggleDisplayNames();
				clientGameRound.setRoundScore(rndscore);
				assertNull(clientGameRound.getGameObjectById(id));
		}
		
		/**
		* Test case for {@link ClientGameRound#getGameObjectById(int)}.
		* It tests the case when the id is unknown.
		*/
		@Test
		void testGetGameObjectById_7() {
				clientGameRound = new ClientGameRound(session, gameCanvas);
				clientGameRound.addPlayer(id, player);
				clientGameRound.addBomb(id, bomb);
				clientGameRound.setMap(map);
				clientGameRound.start();
				clientGameRound.setLocalControl(localControl);
				clientGameRound.update(o, arg);
				clientGameRound.getGameObjectById(id);
				clientGameRound.countdown(countdown);
				clientGameRound.setLocalPlayer(localPlayer);
				clientGameRound.doPostRoundProcessing();
				clientGameRound.snapToGrid(bomb);
				clientGameRound.setStatus(string);
				clientGameRound.endRound();
				clientGameRound.terminateRound();
				clientGameRound.getTime();
				clientGameRound.setTime(time);
				clientGameRound.createNewTile(point, id, type, bombable, accessible, active);
				clientGameRound.toggleDisplayNames();
				clientGameRound.setRoundScore(rndscore);
				assertNull(clientGameRound.getGameObjectById(id));
		}
		
		/**
		* Test case for {@link ClientGameRound#getGameObjectById(int)}.
		* It tests the case when the id is unknown.
		*/
		@Test
		void testGetGameObjectById_8() {
				clientGameRound = new ClientGameRound(session, gameCanvas);
				clientGameRound.addPlayer(id, player);
				clientGameRound.addBomb(id, bomb);
				clientGameRound.setMap(map);
				clientGameRound.start();
				clientGameRound.setLocalControl(localControl);
				clientGameRound.update(o, arg);
				clientGameRound.getGameObjectById(id);
				clientGameRound.countdown(countdown);
				clientGameRound.setLocalPlayer(localPlayer);
				clientGameRound.doPostRoundProcessing();
				clientGameRound.snapToGrid(bomb);
				clientGameRound.setStatus(string);
				clientGameRound.endRound();
				clientGameRound.terminateRound();
				clientGameRound.getTime();
				clientGameRound.setTime(time);
				clientGameRound.createNewTile(point, id, type, bombable, accessible, active);
				clientGameRound.toggleDisplayNames();
				clientGameRound.setRoundScore(rndscore);
				assertNull(clientGameRound.getGameObjectById(id));
		}
		
		/**
		* Test case for {@link ClientGameRound#getGameObjectById(int)}.
		* It tests the case when the id is unknown.
		*/
		@Test
		void testGetGameObjectById_9() {
				clientGameRound = new ClientGameRound(session, gameCanvas);
				clientGameRound.addPlayer(id, player);
				clientGameRound.addBomb(id, bomb);
				clientGameRound.setMap(map);
				clientGameRound.start();
				clientGameRound.setLocalControl(localControl);
				clientGameRound.update(o, arg);
				clientGameRound.getGameObjectById(id);
				clientGameRound.countdown(countdown);
				clientGameRound.setLocalPlayer(localPlayer);
				clientGameRound.doPostRoundProcessing();
				clientGameRound.snapToGrid(bomb);
				clientGameRound.setStatus(string);
				clientGameRound.endRound();
				clientGameRound.terminateRound();
				clientGameRound.getTime();
				clientGameRound.setTime(time);
				clientGameRound.createNewTile(point, id, type, bombable, accessible, active);
				clientGameRound.toggleDisplayNames();
				clientGameRound.setRoundScore(rndscore);
				assertNull(clientGameRound.getGameObjectById(id));
		}
		
		/**
		* Test case for {@link ClientGameRound#getGameObjectById(int)}.
		* It tests the case when the id is unknown.
		*/
		@Test
		void testGetGameObjectById_10() {
				clientGameRound = new ClientGameRound(session, gameCanvas);
				clientGameRound.addPlayer(id, player);
				clientGameRound.addBomb(id, bomb);"
cmpl-6xGQa9mrZma2e7l4TpQU2KKIcfZJA,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/ClientPlayer.java,81.71930074691772,length,"// ClientPlayer.java
package client;

import java.awt.Point;
import org.apache.log4j.Logger;
import sound.SoundPlayer;
import common.Actor;
import common.Constants;
import common.Player;

/**
 * The client specific implemetation of a Player. This implementation will
 * notify any number of registered observers about changes to their state.
 *
 * @author Andi, Bj�rn
 */
public class ClientPlayer extends Player {

    private boolean bowlBombs = false;

    private Logger logger = Logger.getLogger(ClientPlayer.class);

    private int bombsPlanted = 0;

    private int bombDiameter = Constants.BOMB_DIAMETER;

    private int maxBombs = Constants.MIN_BOMBS;

    private long lastPlant;

    /**
     * Creates a new ClientPlayer that starts on a fixed position.
     *
     * @param position
     *            The starting location for this player.
     */
    public ClientPlayer(Point position, int id) {
    }

    /*
	 * (non-Javadoc)
	 * 
	 * @see common.Actor#preUpdate()
	 */
    @Override
    protected void preUpdate();

    /**
     * Plants a bomb on the battlefield. The bomb will be located at the current
     * position. If the user can bowl bombs the bomb get a moveVector. This will
     * trigger a notification for the observers.
     */
    public void plantBomb();

    /*
	 * (non-Javadoc)
	 * 
	 * @see common.Player#die()
	 */
    @Override
    public void die();

    /**
     * Increases the maximum number of bombs this player can plant by one. If
     * the player can already plant MAX_BOMDS bombs, this method will do
     * nothing.
     */
    public void increaseMaxBombs();

    /**
     * Resets the maximum number of bombs this player can plant by one.
     */
    public void resetMaxBombs();

    /**
     * Notifies this player that a previously planted bomb has exploded. This
     * will decrease the count of currently planted bombs.
     */
    public void plantedBombExploded();

    /**
     * Increases the diameter of the bomb, that this player can plant.
     */
    public void increaseBombDiameter();

    /**
     * Resets the diameter of the bomb, that this player can plant.
     */
    public void resetBombDiameter();

    /**
     * Sets, that player can bowl bombs
     */
    public void setBowlBombs();

    /**
     * Sets, that player can't bowl bombs
     */
    public void resetBowlBombs();

    /**
     * Returns weather the player can bowl bombs
     *
     * @return boolean can bowl bombs
     */
    public boolean canBowlBombs();
}
","// ClientPlayerTest.java
package client;

import java.awt.Point;
import org.apache.log4j.Logger;
import sound.SoundPlayer;
import common.Actor;
import common.Constants;
import common.Player;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientPlayer}.
* It contains ten unit test cases for the {@link ClientPlayer#canBowlBombs()} method.
*/
class ClientPlayerTest {","// ClientPlayerTest.java
package client;

import java.awt.Point;
import org.apache.log4j.Logger;
import sound.SoundPlayer;
import common.Actor;
import common.Constants;
import common.Player;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientPlayer}.
* It contains ten unit test cases for the {@link ClientPlayer#canBowlBombs()} method.
*/
class ClientPlayerTest {

		private Logger logger = Logger.getLogger(ClientPlayerTest.class);
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can bowl bombs.
		*/
		@Test
		void testCanBowlBombsTrue() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				assertTrue(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can't bowl bombs.
		*/
		@Test
		void testCanBowlBombsFalse() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can bowl bombs.
		*/
		@Test
		void testCanBowlBombsTrue2() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				assertTrue(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can't bowl bombs.
		*/
		@Test
		void testCanBowlBombsFalse2() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can bowl bombs.
		*/
		@Test
		void testCanBowlBombsTrue3() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				assertTrue(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can't bowl bombs.
		*/
		@Test
		void testCanBowlBombsFalse3() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can bowl bombs.
		*/
		@Test
		void testCanBowlBombsTrue4() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				assertTrue(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can't bowl bombs.
		*/
		@Test
		void testCanBowlBombsFalse4() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can bowl bombs.
		*/
		@Test
		void testCanBowlBombsTrue5() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				assertTrue(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can't bowl bombs.
		*/
		@Test
		void testCanBowlBombsFalse5() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can bowl bombs.
		*/
		@Test
		void testCanBowlBombsTrue6() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				assertTrue(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can't bowl bombs.
		*/
		@Test
		void testCanBowlBombsFalse6() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can bowl bombs.
		*/
		@Test
		void testCanBowlBombsTrue7() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				assertTrue(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can't bowl bombs.
		*/
		@Test
		void testCanBowlBombsFalse7() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can bowl bombs.
		*/
		@Test
		void testCanBowlBombsTrue8() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				assertTrue(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can't bowl bombs.
		*/
		@Test
		void testCanBowlBombsFalse8() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can bowl bombs.
		*/
		@Test
		void testCanBowlBombsTrue9() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				assertTrue(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can't bowl bombs.
		*/
		@Test
		void testCanBowlBombsFalse9() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can bowl bombs.
		*/
		@Test
		void testCanBowlBombsTrue10() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				assertTrue(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can't bowl bombs.
		*/
		@Test
		void testCanBowlBombsFalse10() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
}

// ClientPlayerTest.java
package client;

import java.awt.Point;
import org.apache.log4j.Logger;
import sound.SoundPlayer;
import common.Actor;
import common.Constants;
import common.Player;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientPlayer}.
* It contains ten unit test cases for the {@link ClientPlayer#canBowlBombs()} method.
*/
class ClientPlayerTest {
		
		private Logger logger = Logger.getLogger(ClientPlayerTest.class);
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can bowl bombs.
		*/
		@Test
		void testCanBowlBombsTrue() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				assertTrue(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can't bowl bombs.
		*/
		@Test
		void testCanBowlBombsFalse() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can bowl bombs.
		*/
		@Test
		void testCanBowlBombsTrue2() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				assertTrue(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can't bowl bombs.
		*/
		@Test
		void testCanBowlBombsFalse2() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can bowl bombs.
		*/
		@Test
		void testCanBowlBombsTrue3() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				assertTrue(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can't bowl bombs.
		*/
		@Test
		void testCanBowlBombsFalse3() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can bowl bombs.
		*/
		@Test
		void testCanBowlBombsTrue4() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				assertTrue(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can't bowl bombs.
		*/
		@Test
		void testCanBowlBombsFalse4() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can bowl bombs.
		*/
		@Test
		void testCanBowlBombsTrue5() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				assertTrue(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can't bowl bombs.
		*/
		@Test
		void testCanBowlBombsFalse5() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.resetBowlBombs();
				assertFalse(player.canBowlBombs());
		}
		
		/**
		* Test case for {@link ClientPlayer#canBowlBombs()}.
		* The test case tests the method with a player that can bowl bombs.
		*/
		@Test
		void testCanBowlBombsTrue6() {
				ClientPlayer player = new ClientPlayer(new Point(0, 0), 0);
				player.setBowlBombs();
				assertTrue(player"
cmpl-6xGRuU9F12YvuK94777DmMo8AASnH,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/ClientProperties_0Test.java,82.8265163898468,length,"// ClientProperties.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;

/**
 * reads and writes properties to xml-file
 * properties file is saved to user directory
 *
 * @author christian
 */
public class ClientProperties {

    private XmlFunctions xmlFunctions;

    // if set to true, class is ignoring invocations
    private boolean fileError = false;

    private static final Logger logger = Logger.getLogger(ClientProperties.class);

    /**
     * constructor, opens file for reading if exists
     *
     * @param fileName -
     *            Name to xml file
     */
    public ClientProperties(String fileName) {
    }

    /**
     * checks if local properties file is present, if not tries to copy empty
     * file to location. If this fails, flag fileError is set to true and read
     * or write access is bypassed
     *
     * @param fileName -
     *            name of file
     */
    private void CheckPropertiesFile(String fileName);

    /**
     * get property value by element-name returns empty string if fileError is
     * true
     *
     * @param element -
     *            Name of element
     * @return String - value
     */
    public String getProperty(String element);

    /**
     * (over)writes value of specific element
     * does nothing if fileError is true
     *
     * @param element -
     *            Name of element
     * @param value -
     *            new value
     */
    public void setProperty(String element, String value);

    /**
     * copies a file from a to b
     * used InputStream as provided from ResourceService class as
     * source and File as destination
     *
     * @param sourceFile -
     *            InputStream - File which should be copied
     * @param destFile -
     *            destination where file should be copied to
     * @return boolean - true if successfully copied, otherwise false
     */
    public static boolean fileCopy(InputStream sourceFile, File destFile);
}
","// ClientProperties_0Test.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.
*/
class ClientProperties_0Test {","// ClientProperties_0Test.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.
*/
class ClientProperties_0Test {

	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testGetProperty_0() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String expected = """";
		// Act
		String actual = clientProperties.getProperty(element);
		// Assert result
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testGetProperty_1() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String expected = """";
		// Act
		String actual = clientProperties.getProperty(element);
		// Assert result
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testGetProperty_2() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String expected = """";
		// Act
		String actual = clientProperties.getProperty(element);
		// Assert result
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testGetProperty_3() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String expected = """";
		// Act
		String actual = clientProperties.getProperty(element);
		// Assert result
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testGetProperty_4() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String expected = """";
		// Act
		String actual = clientProperties.getProperty(element);
		// Assert result
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testGetProperty_5() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String expected = """";
		// Act
		String actual = clientProperties.getProperty(element);
		// Assert result
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testGetProperty_6() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String expected = """";
		// Act
		String actual = clientProperties.getProperty(element);
		// Assert result
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testGetProperty_7() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String expected = """";
		// Act
		String actual = clientProperties.getProperty(element);
		// Assert result
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testGetProperty_8() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String expected = """";
		// Act
		String actual = clientProperties.getProperty(element);
		// Assert result
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testGetProperty_9() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String expected = """";
		// Act
		String actual = clientProperties.getProperty(element);
		// Assert result
		assertEquals(expected, actual);
	}
	
}

// ClientProperties_1Test.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#setProperty(String, String)} method.
*/
class ClientProperties_1Test {
		
	/**
	* Test case for {@link ClientProperties#setProperty(String, String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testSetProperty_0() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String value = """";
		// Act
		clientProperties.setProperty(element, value);
		// Assert result
	}
	
	/**
	* Test case for {@link ClientProperties#setProperty(String, String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testSetProperty_1() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String value = """";
		// Act
		clientProperties.setProperty(element, value);
		// Assert result
	}
	
	/**
	* Test case for {@link ClientProperties#setProperty(String, String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testSetProperty_2() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String value = """";
		// Act
		clientProperties.setProperty(element, value);
		// Assert result
	}
	
	/**
	* Test case for {@link ClientProperties#setProperty(String, String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testSetProperty_3() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String value = """";
		// Act
		clientProperties.setProperty(element, value);
		// Assert result
	}
	
	/**
	* Test case for {@link ClientProperties#setProperty(String, String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testSetProperty_4() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String value = """";
		// Act
		clientProperties.setProperty(element, value);
		// Assert result
	}
	
	/**
	* Test case for {@link ClientProperties#setProperty(String, String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testSetProperty_5() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String value = """";
		// Act
		clientProperties.setProperty(element, value);
		// Assert result
	}
	
	/**
	* Test case for {@link ClientProperties#setProperty(String, String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testSetProperty_6() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String value = """";
		// Act
		clientProperties.setProperty(element, value);
		// Assert result
	}
	
	/**
	* Test case for {@link ClientProperties#setProperty(String, String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testSetProperty_7() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String value = """";
		// Act
		clientProperties.setProperty(element, value);
		// Assert result
	}
	
	/**
	* Test case for {@link ClientProperties#setProperty(String, String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testSetProperty_8() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String value = """";
		// Act
		clientProperties.setProperty(element, value);
		// Assert result
	}
	
	/**
	* Test case for {@link ClientProperties#setProperty(String, String)} method.
	*
	* @throws IOException
	*/
	@Test
	void testSetProperty_9() throws IOException {
		// Arrange
		ClientProperties clientProperties = new ClientProperties(""test.xml"");
		String element = """";
		String value = """";
		// Act
		clientProperties.setProperty(element, value);
		// Assert result
	}
	
}

// ClientProperties_2Test.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.
*/
class ClientProperties_2Test {
		
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	*
	* @throws IOException
	*/
	@Test
	void testFileCopy_0() throws IOException {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		boolean expected = false;
		// Act
		boolean actual = ClientProperties.fileCopy(sourceFile, destFile);
		// Assert result
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	*
	* @throws IOException
	*/
	@Test
	void testFileCopy_1() throws IOException {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		boolean expected = false;
		// Act
		boolean actual = ClientProperties.fileCopy(sourceFile, destFile);
		// Assert result
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	*
	* @throws IOException
	*/
	@Test
	void testFileCopy_2() throws IOException {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		boolean expected = false;
		// Act
		boolean actual = ClientProperties.fileCopy(sourceFile, destFile);
		// Assert result
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	*
	* @throws IOException
	*/
	@Test
	void testFileCopy_3() throws IOException {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		boolean expected = false;
		// Act
		boolean actual = ClientProperties.fileCopy(sourceFile, destFile);
		// Assert result
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	*
	* @throws IOException
	*/
	@Test
	void testFileCopy_4() throws IOException {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		boolean expected = false;
		// Act
		boolean actual = ClientProperties.fileCopy(sourceFile, destFile);
		// Assert result
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	*
	* @throws IOException
	*/
	@Test
	void testFileCopy_5() throws IOException {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		boolean expected = false;
		// Act
		boolean actual = ClientProperties.fileCopy(sourceFile, destFile);
		// Assert result
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	*
	* @throws IOException
	*/
	@Test
	void testFileCopy_6() throws IOException {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		boolean expected = false;
		// Act
		boolean actual = ClientProperties.fileCopy(sourceFile, destFile);
		// Assert result
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method."
cmpl-6xGTE041NOqaVtSHUous5Lvyb7rn5,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/ClientProperties_1Test.java,106.59720730781555,length,"// ClientProperties.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;

/**
 * reads and writes properties to xml-file
 * properties file is saved to user directory
 *
 * @author christian
 */
public class ClientProperties {

    private XmlFunctions xmlFunctions;

    // if set to true, class is ignoring invocations
    private boolean fileError = false;

    private static final Logger logger = Logger.getLogger(ClientProperties.class);

    /**
     * constructor, opens file for reading if exists
     *
     * @param fileName -
     *            Name to xml file
     */
    public ClientProperties(String fileName) {
    }

    /**
     * checks if local properties file is present, if not tries to copy empty
     * file to location. If this fails, flag fileError is set to true and read
     * or write access is bypassed
     *
     * @param fileName -
     *            name of file
     */
    private void CheckPropertiesFile(String fileName);

    /**
     * get property value by element-name returns empty string if fileError is
     * true
     *
     * @param element -
     *            Name of element
     * @return String - value
     */
    public String getProperty(String element);

    /**
     * (over)writes value of specific element
     * does nothing if fileError is true
     *
     * @param element -
     *            Name of element
     * @param value -
     *            new value
     */
    public void setProperty(String element, String value);

    /**
     * copies a file from a to b
     * used InputStream as provided from ResourceService class as
     * source and File as destination
     *
     * @param sourceFile -
     *            InputStream - File which should be copied
     * @param destFile -
     *            destination where file should be copied to
     * @return boolean - true if successfully copied, otherwise false
     */
    public static boolean fileCopy(InputStream sourceFile, File destFile);
}
","// ClientProperties_1Test.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.
*/
class ClientProperties_1Test {","// ClientProperties_1Test.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.
*/
class ClientProperties_1Test {

	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	public void testFileCopy_1() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertTrue(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopy_2() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertFalse(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	public void testFileCopy_3() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertTrue(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopy_4() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertFalse(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	public void testFileCopy_5() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertTrue(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopy_6() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertFalse(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	public void testFileCopy_7() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertTrue(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopy_8() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertFalse(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	public void testFileCopy_9() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertTrue(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopy_10() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertFalse(result);
	}
}

// ClientProperties_2Test.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.
*/
class ClientProperties_2Test {
		
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	public void testFileCopy_1() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertTrue(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopy_2() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertFalse(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	public void testFileCopy_3() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertTrue(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopy_4() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertFalse(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	public void testFileCopy_5() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertTrue(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopy_6() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertFalse(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	public void testFileCopy_7() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertTrue(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopy_8() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertFalse(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	public void testFileCopy_9() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertTrue(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopy_10() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertFalse(result);
	}
}

// ClientProperties_3Test.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.
*/
class ClientProperties_3Test {
		
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	public void testFileCopy_1() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertTrue(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopy_2() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertFalse(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	public void testFileCopy_3() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertTrue(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopy_4() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertFalse(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	public void testFileCopy_5() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertTrue(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopy_6() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile);
		
		// Assert
		assertFalse(result);
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	public void testFileCopy_7() {
		// Arrange
		InputStream sourceFile = null;
		File destFile = null;
		
		// Act
		boolean result = ClientProperties.fileCopy(sourceFile, destFile"
cmpl-6xGUxF5IgAJ0NfpMeApXaY9B44d31,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/view/GfxFactory.java,89.11845016479492,length,"// GfxFactory.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;

/**
 * @author Andreas Glauner
 * @autor Adam Kozielski
 */
public class GfxFactory {

    private HashMap<Integer, Image> wallImageCache;

    private HashMap<String, Image> tileImageCache;

    private HashMap<String, Image> powerUpImageCache;

    private HashMap<String, Image> o;

    private HashMap<Integer, Image>[] playerImageCache;

    private HashMap<Integer, Image>[] bombImageCache;

    private HashMap<Integer, Integer> idTranslator;

    private HashMap<Integer, Image>[] explosionImageCache;

    private ExplosionGfxFactory explosionGfxFactory;

    private int currentId = 1;

    private static String basePath = ""/gfx"";

    private String tileSet = ""ice"";

    private Logger logger = Logger.getLogger(GfxFactory.class);

    public GfxFactory() {
    }

    /**
     * @param id The player id.
     * @param state
     * @return
     */
    public Image getPlayerImage(int id, int state);

    public Image getTileImage(String type);

    private int translateId(int id);

    private Image loadImage(String path);

    /**
     * @param id The planter's id.
     * @return
     */
    public Image getBombImage(int id);

    /**
     * @param id The planter's id.
     * @return
     */
    public Image getBombImage(int id, int state);

    public Image getExplosionImage(int diameter, int id);

    public void setTileSet(String tileSet);

    public Image getWallImage(int state);

    /**
     * Power up image loading
     * @param type A String value describing the type of powerUp
     *  *
     */
    public Image getPowerUpImage(String type);
}
","// GfxFactoryTest.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GfxFactory}.
* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.
*/
class GfxFactoryTest {","// GfxFactoryTest.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GfxFactory}.
* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.
*/
class GfxFactoryTest {

		private GfxFactory gfxFactory;
		
		private Logger logger = Logger.getLogger(GfxFactoryTest.class);
		
		private String basePath = ""/gfx"";
		
		private String tileSet = ""ice"";
		
		private String powerUpType = """";
		
		private Image powerUpImage;
		
		private HashMap<String, Image> powerUpImageCache;
		
		private String path = """";
		
		private Image image;
		
		private String type = """";
		
		private String powerUpType1 = ""bomb"";
		
		private String powerUpType2 = ""flame"";
		
		private String powerUpType3 = ""speed"";
		
		private String powerUpType4 = ""wallpass"";
		
		private String powerUpType5 = ""bombpass"";
		
		private String powerUpType6 = ""flamepass"";
		
		private String powerUpType7 = ""detonator"";
		
		private String powerUpType8 = ""kick"";
		
		private String powerUpType9 = ""skate"";
		
		private String powerUpType10 = """";
		
		private String powerUpType11 = """";
		
		private String powerUpType12 = """";
		
		private String powerUpType13 = """";
		
		private String powerUpType14 = """";
		
		private String powerUpType15 = """";
		
		private String powerUpType16 = """";
		
		private String powerUpType17 = """";
		
		private String powerUpType18 = """";
		
		private String powerUpType19 = """";
		
		private String powerUpType20 = """";
		
		private String powerUpType21 = """";
		
		private String powerUpType22 = """";
		
		private String powerUpType23 = """";
		
		private String powerUpType24 = """";
		
		private String powerUpType25 = """";
		
		private String powerUpType26 = """";
		
		private String powerUpType27 = """";
		
		private String powerUpType28 = """";
		
		private String powerUpType29 = """";
		
		private String powerUpType30 = """";
		
		private String powerUpType31 = """";
		
		private String powerUpType32 = """";
		
		private String powerUpType33 = """";
		
		private String powerUpType34 = """";
		
		private String powerUpType35 = """";
		
		private String powerUpType36 = """";
		
		private String powerUpType37 = """";
		
		private String powerUpType38 = """";
		
		private String powerUpType39 = """";
		
		private String powerUpType40 = """";
		
		private String powerUpType41 = """";
		
		private String powerUpType42 = """";
		
		private String powerUpType43 = """";
		
		private String powerUpType44 = """";
		
		private String powerUpType45 = """";
		
		private String powerUpType46 = """";
		
		private String powerUpType47 = """";
		
		private String powerUpType48 = """";
		
		private String powerUpType49 = """";
		
		private String powerUpType50 = """";
		
		private String powerUpType51 = """";
		
		private String powerUpType52 = """";
		
		private String powerUpType53 = """";
		
		private String powerUpType54 = """";
		
		private String powerUpType55 = """";
		
		private String powerUpType56 = """";
		
		private String powerUpType57 = """";
		
		private String powerUpType58 = """";
		
		private String powerUpType59 = """";
		
		private String powerUpType60 = """";
		
		private String powerUpType61 = """";
		
		private String powerUpType62 = """";
		
		private String powerUpType63 = """";
		
		private String powerUpType64 = """";
		
		private String powerUpType65 = """";
		
		private String powerUpType66 = """";
		
		private String powerUpType67 = """";
		
		private String powerUpType68 = """";
		
		private String powerUpType69 = """";
		
		private String powerUpType70 = """";
		
		private String powerUpType71 = """";
		
		private String powerUpType72 = """";
		
		private String powerUpType73 = """";
		
		private String powerUpType74 = """";
		
		private String powerUpType75 = """";
		
		private String powerUpType76 = """";
		
		private String powerUpType77 = """";
		
		private String powerUpType78 = """";
		
		private String powerUpType79 = """";
		
		private String powerUpType80 = """";
		
		private String powerUpType81 = """";
		
		private String powerUpType82 = """";
		
		private String powerUpType83 = """";
		
		private String powerUpType84 = """";
		
		private String powerUpType85 = """";
		
		private String powerUpType86 = """";
		
		private String powerUpType87 = """";
		
		private String powerUpType88 = """";
		
		private String powerUpType89 = """";
		
		private String powerUpType90 = """";
		
		private String powerUpType91 = """";
		
		private String powerUpType92 = """";
		
		private String powerUpType93 = """";
		
		private String powerUpType94 = """";
		
		private String powerUpType95 = """";
		
		private String powerUpType96 = """";
		
		private String powerUpType97 = """";
		
		private String powerUpType98 = """";
		
		private String powerUpType99 = """";
		
		private String powerUpType100 = """";
		
		private String powerUpType101 = """";
		
		private String powerUpType102 = """";
		
		private String powerUpType103 = """";
		
		private String powerUpType104 = """";
		
		private String powerUpType105 = """";
		
		private String powerUpType106 = """";
		
		private String powerUpType107 = """";
		
		private String powerUpType108 = """";
		
		private String powerUpType109 = """";
		
		private String powerUpType110 = """";
		
		private String powerUpType111 = """";
		
		private String powerUpType112 = """";
		
		private String powerUpType113 = """";
		
		private String powerUpType114 = """";
		
		private String powerUpType115 = """";
		
		private String powerUpType116 = """";
		
		private String powerUpType117 = """";
		
		private String powerUpType118 = """";
		
		private String powerUpType119 = """";
		
		private String powerUpType120 = """";
		
		private String powerUpType121 = """";
		
		private String powerUpType122 = """";
		
		private String powerUpType123 = """";
		
		private String powerUpType124 = """";
		
		private String powerUpType125 = """";
		
		private String powerUpType126 = """";
		
		private String powerUpType127 = """";
		
		private String powerUpType128 = """";
		
		private String powerUpType129 = """";
		
		private String powerUpType130 = """";
		
		private String powerUpType131 = """";
		
		private String powerUpType132 = """";
		
		private String powerUpType133 = """";
		
		private String powerUpType134 = """";
		
		private String powerUpType135 = """";
		
		private String powerUpType136 = """";
		
		private String powerUpType137 = """";
		
		private String powerUpType138 = """";
		
		private String powerUpType139 = """";
		
		private String powerUpType140 = """";
		
		private String powerUpType141 = """";
		
		private String powerUpType142 = """";
		
		private String powerUpType143 = """";
		
		private String powerUpType144 = """";
		
		private String powerUpType145 = """";
		
		private String powerUpType146 = """";
		
		private String powerUpType147 = """";
		
		private String powerUpType148 = """";
		
		private String powerUpType149 = """";
		
		private String powerUpType150 = """";
		
		private String powerUpType151 = """";
		
		private String powerUpType152 = """";
		
		private String powerUpType153 = """";
		
		private String powerUpType154 = """";
		
		private String powerUpType155 = """";
		
		private String powerUpType156 = """";
		
		private String powerUpType157 = """";
		
		private String powerUpType158 = """";
		
		private String powerUpType159 = """";
		
		private String powerUpType160 = """";
		
		private String powerUpType161 = """";
		
		private String powerUpType162 = """";
		
		private String powerUpType163 = """";
		
		private String powerUpType164 = """";
		
		private String powerUpType165 = """";
		
		private String powerUpType166 = """";
		
		private String powerUpType167 = """";
		
		private String powerUpType168 = """";
		
		private String powerUpType169 = """";
		
		private String powerUpType170 = """";
		
		private String powerUpType171 = """";
		
		private String powerUpType172 = """";
		
		private String powerUpType173 = """";
		
		private String powerUpType174 = """";
		
		private String powerUpType175 = """";
		
		private String powerUpType176 = """";
		
		private String powerUpType177 = """";
		
		private String powerUpType178 = """";
		
		private String powerUpType179 = """";
		
		private String powerUpType180 = """";
		
		private String powerUpType181 = """";
		
		private String powerUpType182 = """";
		
		private String powerUpType183 = """";
		
		private String powerUpType184 = """";
		
		private String powerUpType185 = """";
		
		private String powerUpType186 = """";
		
		private String powerUpType187 = """";
		
		private String powerUpType188 = """";
		
		private String powerUpType189 = """";
		
		private String powerUpType190 = """";
		
		private String powerUpType191 = """";
		
		private String powerUpType192 = """";
		
		private String powerUpType193 = """";
		
		private String powerUpType194 = """";
		
		private String powerUpType195 = """";
		
		private String powerUpType196 = """";
		
		private String powerUpType197 = """";
		
		private String powerUpType198 = """";
		
		private String powerUpType199 = """";
		
		private String powerUpType200 = """";
		
		private String powerUpType201 = """";
		
		private String powerUpType202 = """";
		
		private String powerUpType203 = """";
		
		private String powerUpType204 = """";
		
		private String powerUpType205 = """";
		
		private String powerUpType206 = """";
		
		private String powerUpType207 = """";
		
		private String powerUpType208 = """";
		
		private String powerUpType209 = """";
		
		private String powerUpType210 = """";
		
		private String powerUpType211 = """";
		
		private String powerUpType212 = """";
		
		private String powerUpType213 = """";
		
		private String powerUpType214 = """";
		
		private String powerUpType215 = """";
		
		private String powerUpType216 = """";
		
		private String powerUpType217 = """";
		
		private String powerUpType218 = """";
		
		private String powerUpType219 = """";
		
		private String powerUpType220 = """";
		
		private String powerUpType221 = """";
		
		private String powerUpType222 = """";
		
		private String powerUpType223 = """";
		
		private String powerUpType224 = """";
		
		private String powerUpType225 = """";
		
		private String powerUpType226 = """";
		
		private String powerUpType227 = """";
		
		private String powerUpType228 = """";
		
		private String powerUpType229 = """";
		
		private String powerUpType230 = """";
		
		private String powerUpType231 = """";
		
		private String powerUpType232 = """";
		
		private String powerUpType233 = """";
		
		private String powerUpType234 = """";
		
		private String powerUpType235 = """";
		
		private String powerUpType236 = """";
		
		private String powerUpType237 = """";
		
		private String powerUpType238 = """";
		
		private String powerUpType239 = """";
		
		private String powerUpType240 = """";
		
		private String powerUpType241 = """";
		
		private String powerUpType242 = """";
		
		private String powerUpType243 = """";
		
		private String powerUpType244 = """";
		
		private String powerUpType245 = """";
		
		private String powerUpType246 = """";
		
		private String powerUpType247 = """";
		
		private String powerUpType248 = """";
		
		private String powerUpType249 = """";
		
		private String powerUpType250 = """";
		
		private String powerUpType251 = """";
		
		private String powerUpType252 = """";
		
		private String powerUpType253 = """";
		
		private String powerUpType254 = """";
		
		private String powerUpType255 = """";
		
		private String powerUpType256 = """";
"
cmpl-6xGWPp4VevJVv9VZ9kwVBaoTHc76h,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/GameModel.java,79.08622097969055,length,"// GameModel.java
package common;

import java.awt.Point;
import java.util.Collection;
import java.util.HashMap;
import java.util.Vector;
import java.util.Map.Entry;
import messages.round.RoundTimeOverMsg;
import org.apache.log4j.Logger;

/**
 * @author Steffen, Andi, Bj�rn
 */
public class GameModel {

    protected HashMap<Integer, GameObject> gameObjects = new HashMap<Integer, GameObject>();

    protected Vector<Player> players = new Vector<Player>();

    protected long time = Constants.time;

    protected static final Logger logger = Logger.getLogger(GameModel.class);

    public void update();

    /**
     * Checks if the game is over and if yes returns the gameObjectId of the
     * winner.
     *
     * @return -1 if game still running, 0 in case of a tie, gameObjectId of the
     *         winner in all other cases
     */
    public int checkForWinner();

    public void addGameObject(int id, GameObject newGameObject);

    /**
     * @param id
     * @return
     */
    public GameObject getGameObjectById(int id);

    public void snapToGrid(Bomb bomb);

    /**
     * Returns the actual time of this GameModel.
     *
     * @return long - actual time
     */
    public long getTime();

    /**
     * Sets the time of this GameModel.
     *
     * @param time
     *            the time, which should be set
     */
    public void setTime(long time);

    public Vector<Player> getPlayers();
}
","// GameModelTest.java
package common;

import java.awt.Point;
import java.util.Collection;
import java.util.HashMap;
import java.util.Vector;
import java.util.Map.Entry;
import messages.round.RoundTimeOverMsg;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GameModel}.
* It contains ten unit test cases for the {@link GameModel#checkForWinner()} method.
*/
class GameModelTest {","// GameModelTest.java
package common;

import java.awt.Point;
import java.util.Collection;
import java.util.HashMap;
import java.util.Vector;
import java.util.Map.Entry;
import messages.round.RoundTimeOverMsg;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GameModel}.
* It contains ten unit test cases for the {@link GameModel#checkForWinner()} method.
*/
class GameModelTest {

		/**
		* Test case 1:
		* The game is over and there is a winner.
		*/
		@Test
		void testCheckForWinner1() {
				GameModel gameModel = new GameModel();
				gameModel.addGameObject(1, new Player(1, ""Player1"", new Point(0, 0), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
cmpl-6xGXgteQXpqXVmLIL35yWFmNL5ap4,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/MapFilesLister.java,86.14983892440796,length,"// MapFilesLister.java
package common;

import java.io.File;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.log4j.Logger;
import messages.global.MapInfo;

/**
 * class for listing maps and returning map information
 *
 * @author christian
 */
public class MapFilesLister {

    private static final Logger logger = Logger.getLogger(MapFilesLister.class);

    public MapFilesLister() {
    }

    /**
     * reads directory and returns a list of found xml-files
     *
     * @param dir -
     *            directory to be searched in
     * @return Vector<File>
     */
    public Vector<File> ListMaps(String dir);

    /**
     * retrieve list of MapInfo objects
     *
     * @return
     */
    public List<MapInfo> getMapInfoList();

    /**
     * clears unused or obsolete map preview files
     */
    public void clearPreviews();
}
","// MapFilesListerTest.java
package common;

import java.io.File;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.log4j.Logger;
import messages.global.MapInfo;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapFilesLister}.
* It contains ten unit test cases for the {@link MapFilesLister#ListMaps(String)} method.
*/
class MapFilesListerTest {","// MapFilesListerTest.java
package common;

import java.io.File;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.log4j.Logger;
import messages.global.MapInfo;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapFilesLister}.
* It contains ten unit test cases for the {@link MapFilesLister#ListMaps(String)} method.
*/
class MapFilesListerTest {

	private static final Logger logger = Logger.getLogger(MapFilesListerTest.class);
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory is empty.
	 */
	@Test
	void testListMapsEmptyDirectory() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/empty"");
		assertEquals(0, mapFiles.size());
	}
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory contains only one map file.
	 */
	@Test
	void testListMapsOneMapFile() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/oneMapFile"");
		assertEquals(1, mapFiles.size());
	}
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory contains only one map file and one non-map file.
	 */
	@Test
	void testListMapsOneMapFileOneNonMapFile() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/oneMapFileOneNonMapFile"");
		assertEquals(1, mapFiles.size());
	}
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory contains only one map file and one non-map file.
	 */
	@Test
	void testListMapsOneMapFileOneNonMapFileOneEmptyFile() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/oneMapFileOneNonMapFileOneEmptyFile"");
		assertEquals(1, mapFiles.size());
	}
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory contains only one map file and one non-map file.
	 */
	@Test
	void testListMapsOneMapFileOneNonMapFileOneEmptyFileOneDirectory() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/oneMapFileOneNonMapFileOneEmptyFileOneDirectory"");
		assertEquals(1, mapFiles.size());
	}
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory contains only one map file and one non-map file.
	 */
	@Test
	void testListMapsOneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFile() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/oneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFile"");
		assertEquals(2, mapFiles.size());
	}
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory contains only one map file and one non-map file.
	 */
	@Test
	void testListMapsOneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFileOneNonMapFile() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/oneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFileOneNonMapFile"");
		assertEquals(2, mapFiles.size());
	}
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory contains only one map file and one non-map file.
	 */
	@Test
	void testListMapsOneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFileOneNonMapFileOneEmptyFile() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/oneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFileOneNonMapFileOneEmptyFile"");
		assertEquals(2, mapFiles.size());
	}
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory contains only one map file and one non-map file.
	 */
	@Test
	void testListMapsOneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFileOneNonMapFileOneEmptyFileOneDirectory() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/oneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFileOneNonMapFileOneEmptyFileOneDirectory"");
		assertEquals(2, mapFiles.size());
	}
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory contains only one map file and one non-map file.
	 */
	@Test
	void testListMapsOneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFile() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/oneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFile"");
		assertEquals(3, mapFiles.size());
	}
}

// MapFilesLister.java
package common;

import java.io.File;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.log4j.Logger;
import messages.global.MapInfo;

/**
 * class for listing maps and returning map information
 *
 * @author christian
 */
public class MapFilesLister {

    private static final Logger logger = Logger.getLogger(MapFilesLister.class);

    public MapFilesLister() {
    }

    /**
     * reads directory and returns a list of found xml-files
     *
     * @param dir -
     *            directory to be searched in
     * @return Vector<File>
     */
    public Vector<File> ListMaps(String dir) {
        Vector<File> mapFiles = new Vector<File>();
        File directory = new File(dir);
        if (directory.isDirectory()) {
            File[] files = directory.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isFile() && files[i].getName().endsWith("".xml"")) {
                    mapFiles.add(files[i]);
                }
            }
        }
        return mapFiles;
    }

    /**
     * retrieve list of MapInfo objects
     *
     * @return
     */
    public List<MapInfo> getMapInfoList() {
        List<MapInfo> mapInfoList = new LinkedList<MapInfo>();
        Vector<File> mapFiles = ListMaps(""maps"");
        for (File mapFile : mapFiles) {
            MapInfo mapInfo = new MapInfo();
            mapInfo.setName(mapFile.getName());
            mapInfo.setPath(mapFile.getPath());
            mapInfoList.add(mapInfo);
        }
        return mapInfoList;
    }

    /**
     * clears unused or obsolete map preview files
     */
    public void clearPreviews() {
        Vector<File> mapFiles = ListMaps(""maps"");
        File directory = new File(""previews"");
        if (directory.isDirectory()) {
            File[] files = directory.listFiles();
            for (int i = 0; i < files.length; i++) {
                if (files[i].isFile() && files[i].getName().endsWith("".png"")) {
                    boolean found = false;
                    for (File mapFile : mapFiles) {
                        if (mapFile.getName().equals(files[i].getName())) {
                            found = true;
                            break;
                        }
                    }
                    if (!found) {
                        files[i].delete();
                    }
                }
            }
        }
    }
}

// MapFilesListerTest.java
package common;

import java.io.File;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.log4j.Logger;
import messages.global.MapInfo;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapFilesLister}.
* It contains ten unit test cases for the {@link MapFilesLister#ListMaps(String)} method.
*/
class MapFilesListerTest {
		
	private static final Logger logger = Logger.getLogger(MapFilesListerTest.class);
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory is empty.
	 */
	@Test
	void testListMapsEmptyDirectory() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/empty"");
		assertEquals(0, mapFiles.size());
	}
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory contains only one map file.
	 */
	@Test
	void testListMapsOneMapFile() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/oneMapFile"");
		assertEquals(1, mapFiles.size());
	}
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory contains only one map file and one non-map file.
	 */
	@Test
	void testListMapsOneMapFileOneNonMapFile() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/oneMapFileOneNonMapFile"");
		assertEquals(1, mapFiles.size());
	}
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory contains only one map file and one non-map file.
	 */
	@Test
	void testListMapsOneMapFileOneNonMapFileOneEmptyFile() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/oneMapFileOneNonMapFileOneEmptyFile"");
		assertEquals(1, mapFiles.size());
	}
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory contains only one map file and one non-map file.
	 */
	@Test
	void testListMapsOneMapFileOneNonMapFileOneEmptyFileOneDirectory() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/oneMapFileOneNonMapFileOneEmptyFileOneDirectory"");
		assertEquals(1, mapFiles.size());
	}
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory contains only one map file and one non-map file.
	 */
	@Test
	void testListMapsOneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFile() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/oneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFile"");
		assertEquals(2, mapFiles.size());
	}
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory contains only one map file and one non-map file.
	 */
	@Test
	void testListMapsOneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFileOneNonMapFile() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/oneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFileOneNonMapFile"");
		assertEquals(2, mapFiles.size());
	}
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory contains only one map file and one non-map file.
	 */
	@Test
	void testListMapsOneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFileOneNonMapFileOneEmptyFile() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/oneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFileOneNonMapFileOneEmptyFile"");
		assertEquals(2, mapFiles.size());
	}
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory contains only one map file and one non-map file.
	 */
	@Test
	void testListMapsOneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFileOneNonMapFileOneEmptyFileOneDirectory() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/oneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFileOneNonMapFileOneEmptyFileOneDirectory"");
		assertEquals(2, mapFiles.size());
	}
	
	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests the case when the directory contains only one map file and one non-map file.
	 */
	@Test
	void testListMapsOneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFile() {
		MapFilesLister mapFilesLister = new MapFilesLister();
		Vector<File> mapFiles = mapFilesLister.ListMaps(""src/test/resources/oneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFileOneNonMapFileOneEmptyFileOneDirectoryOneMapFile"");
		assertEquals(3, mapFiles.size());
	}
}

// MapFilesLister.java
package common;

import java.io.File;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.log4j.Logger;
import messages.global.MapInfo;

/**
 * class for listing maps and returning map information
 *
 * @author christian
 */
public class MapFilesLister {

    private static final Logger logger = Logger.getLogger(MapFilesLister.class);

    public MapFilesL"
cmpl-6xGZ4mtvH2jvI4h9XQyfHKnOu68C3,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/MapPreview.java,90.4855260848999,length,"// MapPreview.java
package common;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.apache.log4j.Logger;

/**
 * create a ImageIcon Map Preview of a map object
 *
 * usage example: MapPreview mp = new MapPreview(map); mp.setImageSet(""desert"");
 * (optional) ImageIcon ii = mp.getMapPreview(150); !!
 *
 * @author christian
 */
public class MapPreview {

    private String mapImageSet;

    private Point mapArea;

    private ImageIcon mapPreviewIcon;

    private BufferedImage mapPreview;

    private Map mapMap;

    private String mapFile;

    // map tile Images, for caching purposes
    private static Image TILE_WALL_IMAGE;

    private static Image TILE_STONE_IMAGE;

    private static final Logger logger = Logger.getLogger(MapPreview.class);

    /**
     * class for creating map Preview of Map map
     *
     * @param map -
     *            map for which preview should be created
     */
    public MapPreview(Map map) {
    }

    /**
     * set imageSet, overrides default map imageSet
     *
     * @param imageSet -
     *            String, imageSet (-folder)
     */
    public void setImageSet(String imageSet);

    /**
     * returns preview of current map
     *
     * @param previewWidth -
     *            Width of preview. Proportions are constrained
     * @return BufferedImage with map preview
     */
    public ImageIcon getMapPreview(int previewWidth);

    /**
     * draws all map tiles to Graphics object
     */
    private void drawMap();

    /**
     * method for scaling/resizing BufferedImages to target width
     *
     * @param bi -
     *            BufferedImage
     * @param targetWidth -
     *            target width of resized image
     * @return BufferedImage - with map preview
     */
    private BufferedImage scale(BufferedImage bi, int targetWidth);

    public Image LoadImage(String fileName);

    /**
     * draws tile at specific position
     *
     * @param g2d -
     *            Graphics2D object
     * @param position -
     *            Point, coordinates
     * @param fileName -
     *            String, name of file, w/o path and ending
     * @param middle -
     *            is the position of element set to middle, correct the upper
     *            left coordinate
     */
    public void drawTile(Graphics g, Point position, String fileName, Boolean middle);
}
","// MapPreviewTest.java
package common;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapPreview}.
* It contains ten unit test cases for the {@link MapPreview#getMapPreview(int)} method.
*/
class MapPreviewTest {","// MapPreviewTest.java
package common;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapPreview}.
* It contains ten unit test cases for the {@link MapPreview#getMapPreview(int)} method.
*/
class MapPreviewTest {

		private static final Logger logger = Logger.getLogger(MapPreviewTest.class);
		
		/**
		* Test case for {@link MapPreview#getMapPreview(int)} method.
		* It tests the case when the map is empty.
		*/
		@Test
		void testGetMapPreviewEmptyMap() {
				Map map = new Map();
				MapPreview mapPreview = new MapPreview(map);
				ImageIcon mapPreviewIcon = mapPreview.getMapPreview(150);
				assertEquals(mapPreviewIcon.getIconWidth(), 150);
				assertEquals(mapPreviewIcon.getIconHeight(), 150);
		}
		
		/**
		* Test case for {@link MapPreview#getMapPreview(int)} method.
		* It tests the case when the map is not empty.
		*/
		@Test
		void testGetMapPreviewNotEmptyMap() {
				Map map = new Map();
				map.setMapSize(new Point(10, 10));
				map.setMapArea(new Point(10, 10));
				map.setMapFile(""testMap.map"");
				map.setMapImageSet(""desert"");
				map.setMapName(""testMap"");
				map.setMapTiles(new Vector<Vector<Tile>>());
				for (int i = 0; i < 10; i++) {
						Vector<Tile> row = new Vector<Tile>();
						for (int j = 0; j < 10; j++) {
								Tile tile = new Tile();
								tile.setTileType(TileType.WALL);
								row.add(tile);
						}
						map.getMapTiles().add(row);
				}
				MapPreview mapPreview = new MapPreview(map);
				ImageIcon mapPreviewIcon = mapPreview.getMapPreview(150);
				assertEquals(mapPreviewIcon.getIconWidth(), 150);
				assertEquals(mapPreviewIcon.getIconHeight(), 150);
		}
		
		/**
		* Test case for {@link MapPreview#getMapPreview(int)} method.
		* It tests the case when the map is not empty and the map image set is set.
		*/
		@Test
		void testGetMapPreviewNotEmptyMapImageSet() {
				Map map = new Map();
				map.setMapSize(new Point(10, 10));
				map.setMapArea(new Point(10, 10));
				map.setMapFile(""testMap.map"");
				map.setMapImageSet(""desert"");
				map.setMapName(""testMap"");
				map.setMapTiles(new Vector<Vector<Tile>>());
				for (int i = 0; i < 10; i++) {
						Vector<Tile> row = new Vector<Tile>();
						for (int j = 0; j < 10; j++) {
								Tile tile = new Tile();
								tile.setTileType(TileType.WALL);
								row.add(tile);
						}
						map.getMapTiles().add(row);
				}
				MapPreview mapPreview = new MapPreview(map);
				mapPreview.setImageSet(""desert"");
				ImageIcon mapPreviewIcon = mapPreview.getMapPreview(150);
				assertEquals(mapPreviewIcon.getIconWidth(), 150);
				assertEquals(mapPreviewIcon.getIconHeight(), 150);
		}
		
		/**
		* Test case for {@link MapPreview#getMapPreview(int)} method.
		* It tests the case when the map is not empty and the map image set is set to null.
		*/
		@Test
		void testGetMapPreviewNotEmptyMapImageSetNull() {
				Map map = new Map();
				map.setMapSize(new Point(10, 10));
				map.setMapArea(new Point(10, 10));
				map.setMapFile(""testMap.map"");
				map.setMapImageSet(""desert"");
				map.setMapName(""testMap"");
				map.setMapTiles(new Vector<Vector<Tile>>());
				for (int i = 0; i < 10; i++) {
						Vector<Tile> row = new Vector<Tile>();
						for (int j = 0; j < 10; j++) {
								Tile tile = new Tile();
								tile.setTileType(TileType.WALL);
								row.add(tile);
						}
						map.getMapTiles().add(row);
				}
				MapPreview mapPreview = new MapPreview(map);
				mapPreview.setImageSet(null);
				ImageIcon mapPreviewIcon = mapPreview.getMapPreview(150);
				assertEquals(mapPreviewIcon.getIconWidth(), 150);
				assertEquals(mapPreviewIcon.getIconHeight(), 150);
		}
		
		/**
		* Test case for {@link MapPreview#getMapPreview(int)} method.
		* It tests the case when the map is not empty and the map image set is set to an empty string.
		*/
		@Test
		void testGetMapPreviewNotEmptyMapImageSetEmptyString() {
				Map map = new Map();
				map.setMapSize(new Point(10, 10));
				map.setMapArea(new Point(10, 10));
				map.setMapFile(""testMap.map"");
				map.setMapImageSet(""desert"");
				map.setMapName(""testMap"");
				map.setMapTiles(new Vector<Vector<Tile>>());
				for (int i = 0; i < 10; i++) {
						Vector<Tile> row = new Vector<Tile>();
						for (int j = 0; j < 10; j++) {
								Tile tile = new Tile();
								tile.setTileType(TileType.WALL);
								row.add(tile);
						}
						map.getMapTiles().add(row);
				}
				MapPreview mapPreview = new MapPreview(map);
				mapPreview.setImageSet("""");
				ImageIcon mapPreviewIcon = mapPreview.getMapPreview(150);
				assertEquals(mapPreviewIcon.getIconWidth(), 150);
				assertEquals(mapPreviewIcon.getIconHeight(), 150);
		}
		
		/**
		* Test case for {@link MapPreview#getMapPreview(int)} method.
		* It tests the case when the map is not empty and the map image set is set to a non-existing image set.
		*/
		@Test
		void testGetMapPreviewNotEmptyMapImageSetNonExisting() {
				Map map = new Map();
				map.setMapSize(new Point(10, 10));
				map.setMapArea(new Point(10, 10));
				map.setMapFile(""testMap.map"");
				map.setMapImageSet(""desert"");
				map.setMapName(""testMap"");
				map.setMapTiles(new Vector<Vector<Tile>>());
				for (int i = 0; i < 10; i++) {
						Vector<Tile> row = new Vector<Tile>();
						for (int j = 0; j < 10; j++) {
								Tile tile = new Tile();
								tile.setTileType(TileType.WALL);
								row.add(tile);
						}
						map.getMapTiles().add(row);
				}
				MapPreview mapPreview = new MapPreview(map);
				mapPreview.setImageSet(""nonExisting"");
				ImageIcon mapPreviewIcon = mapPreview.getMapPreview(150);
				assertEquals(mapPreviewIcon.getIconWidth(), 150);
				assertEquals(mapPreviewIcon.getIconHeight(), 150);
		}
		
		/**
		* Test case for {@link MapPreview#getMapPreview(int)} method.
		* It tests the case when the map is not empty and the map image set is set to a non-existing image set.
		*/
		@Test
		void testGetMapPreviewNotEmptyMapImageSetNonExisting2() {
				Map map = new Map();
				map.setMapSize(new Point(10, 10));
				map.setMapArea(new Point(10, 10));
				map.setMapFile(""testMap.map"");
				map.setMapImageSet(""desert"");
				map.setMapName(""testMap"");
				map.setMapTiles(new Vector<Vector<Tile>>());
				for (int i = 0; i < 10; i++) {
						Vector<Tile> row = new Vector<Tile>();
						for (int j = 0; j < 10; j++) {
								Tile tile = new Tile();
								tile.setTileType(TileType.WALL);
								row.add(tile);
						}
						map.getMapTiles().add(row);
				}
				MapPreview mapPreview = new MapPreview(map);
				mapPreview.setImageSet(""nonExisting2"");
				ImageIcon mapPreviewIcon = mapPreview.getMapPreview(150);
				assertEquals(mapPreviewIcon.getIconWidth(), 150);
				assertEquals(mapPreviewIcon.getIconHeight(), 150);
		}
		
		/**
		* Test case for {@link MapPreview#getMapPreview(int)} method.
		* It tests the case when the map is not empty and the map image set is set to a non-existing image set.
		*/
		@Test
		void testGetMapPreviewNotEmptyMapImageSetNonExisting3() {
				Map map = new Map();
				map.setMapSize(new Point(10, 10));
				map.setMapArea(new Point(10, 10));
				map.setMapFile(""testMap.map"");
				map.setMapImageSet(""desert"");
				map.setMapName(""testMap"");
				map.setMapTiles(new Vector<Vector<Tile>>());
				for (int i = 0; i < 10; i++) {
						Vector<Tile> row = new Vector<Tile>();
						for (int j = 0; j < 10; j++) {
								Tile tile = new Tile();
								tile.setTileType(TileType.WALL);
								row.add(tile);
						}
						map.getMapTiles().add(row);
				}
				MapPreview mapPreview = new MapPreview(map);
				mapPreview.setImageSet(""nonExisting3"");
				ImageIcon mapPreviewIcon = mapPreview.getMapPreview(150);
				assertEquals(mapPreviewIcon.getIconWidth(), 150);
				assertEquals(mapPreviewIcon.getIconHeight(), 150);
		}
		
		/**
		* Test case for {@link MapPreview#getMapPreview(int)} method.
		* It tests the case when the map is not empty and the map image set is set to a non-existing image set.
		*/
		@Test
		void testGetMapPreviewNotEmptyMapImageSetNonExisting4() {
				Map map = new Map();
				map.setMapSize(new Point(10, 10));
				map.setMapArea(new Point(10, 10));
				map.setMapFile(""testMap.map"");
				map.setMapImageSet(""desert"");
				map.setMapName(""testMap"");
				map.setMapTiles(new Vector<Vector<Tile>>());
				for (int i = 0; i < 10; i++) {
						Vector<Tile> row = new Vector<Tile>();
						for (int j = 0; j < 10; j++) {
								Tile tile = new Tile();
								tile.setTileType(TileType.WALL);
								row.add(tile);
						}
						map.getMapTiles().add(row);
				}
				MapPreview mapPreview = new MapPreview(map);
				mapPreview.setImageSet(""nonExisting4"");
				ImageIcon mapPreviewIcon = mapPreview.getMapPreview(150);
				assertEquals(mapPreviewIcon.getIconWidth(), 150);
				assertEquals(mapPreviewIcon.getIconHeight(), 150);
		}
		
		/**
		* Test case for {@link MapPreview#getMapPreview(int)} method.
		* It tests the case when the map is not empty and the map image set is set to a non-existing image set.
		*/
		@Test
		void testGetMapPreviewNotEmptyMapImageSetNonExisting5() {
				Map map = new Map();
				map.setMapSize(new Point(10, 10));
				map.setMapArea(new Point(10, 10));
				map.setMapFile(""testMap.map"");
				map.setMapImageSet(""desert"");
				map.setMapName(""testMap"");
				map.setMapTiles(new Vector<Vector<Tile>>());
				for (int i = 0; i < 10; i++) {
						Vector<Tile> row = new Vector<Tile>();
						for (int j = 0; j < 10; j++) {
								Tile tile = new Tile();
								tile.setTileType(TileType.WALL);
								row.add(tile);
						}
						map.getMapTiles().add(row);
				}
				MapPreview mapPreview = new MapPreview(map);
				mapPreview.setImageSet(""nonExisting5"");
				ImageIcon mapPreviewIcon = mapPreview.getMapPreview(150);
				assertEquals(mapPreviewIcon.getIconWidth(), 150);
				assertEquals(mapPreviewIcon.get"
cmpl-6xGaXO1Tuh9La4mVmgpcI51D4BPG1,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/MapReader.java,96.61783456802368,length,"// MapReader.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;

/**
 * Loads a XML-file and write read properties, tiles and start points to
 * map-object
 *
 * @author christian
 */
public class MapReader {

    private XmlFunctions xmlFunctions;

    private String mapFilePath;

    private static final Logger logger = Logger.getLogger(MapReader.class);

    /**
     * constructor
     *
     * @param mapFile -
     *            Path to XML-file with map information
     */
    public MapReader(String mapFile) {
    }

    /**
     * Returns a specific value in a group of nodes using XPath expressions
     *
     * @param node -
     *            node(set) in which value should be searched
     * @param XMLPath -
     *            XPath expression
     * @return String - found value
     */
    public String getXMLValue(Node node, String XMLPath);

    /**
     * Sets read properties to map-object using the setter-methods of map-object
     *
     * @param map -
     *            Map object
     */
    public void setMapProperies(Map map);

    /**
     * sets the specific tiles to map object
     *
     * @param map
     */
    public void setTiles(Map map);

    public void setPowerups(Map map);

    /**
     * automatically sets wall on the border of map set
     *
     * @param map
     */
    public void autoWall(Map map, String Type);

    /**
     * sets the start-points in map object. start points are read from xml
     *
     * @param map
     */
    public void setStartPoints(Map map);

    /**
     * gets area of map
     *
     * @return Point with x and y dimension/number of tiles
     */
    public Point getArea();
}
","// MapReaderTest.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapReader}.
* It contains ten unit test cases for the {@link MapReader#getXMLValue(Node, String)} method.
*/
class MapReaderTest {","// MapReaderTest.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapReader}.
* It contains ten unit test cases for the {@link MapReader#getXMLValue(Node, String)} method.
*/
class MapReaderTest {

		private static final Logger logger = Logger.getLogger(MapReaderTest.class);
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests the method with a valid node and a valid XPath expression.
		* The expected result is a String with the value of the node.
		*/
		@Test
		public void testGetXMLValueValidNodeValidXPath() {
				logger.info(""testGetXMLValueValidNodeValidXPath"");
				
				// create a new MapReader object
				MapReader mapReader = new MapReader("""");
				
				// create a new node
				Node node = new Node() {
						@Override
						public String getNodeName() {
								return ""testNode"";
						}
						
						@Override
						public String getNodeValue() throws DOMException {
								return ""testValue"";
						}
						
						@Override
						public short getNodeType() {
								return 0;
						}
						
						@Override
						public Node getParentNode() {
								return null;
						}
						
						@Override
						public NodeList getChildNodes() {
								return null;
						}
						
						@Override
						public Node getFirstChild() {
								return null;
						}
						
						@Override
						public Node getLastChild() {
								return null;
						}
						
						@Override
						public Node getPreviousSibling() {
								return null;
						}
						
						@Override
						public Node getNextSibling() {
								return null;
						}
						
						@Override
						public NamedNodeMap getAttributes() {
								return null;
						}
						
						@Override
						public Document getOwnerDocument() {
								return null;
						}
						
						@Override
						public Node insertBefore(Node newChild, Node refChild) throws DOMException {
								return null;
						}
						
						@Override
						public Node replaceChild(Node newChild, Node oldChild) throws DOMException {
								return null;
						}
						
						@Override
						public Node removeChild(Node oldChild) throws DOMException {
								return null;
						}
						
						@Override
						public Node appendChild(Node newChild) throws DOMException {
								return null;
						}
						
						@Override
						public boolean hasChildNodes() {
								return false;
						}
						
						@Override
						public Node cloneNode(boolean deep) {
								return null;
						}
						
						@Override
						public void normalize() {
								
						}
						
						@Override
						public boolean isSupported(String feature, String version) {
								return false;
						}
						
						@Override
						public String getNamespaceURI() {
								return null;
						}
						
						@Override
						public String getPrefix() {
								return null;
						}
						
						@Override
						public void setPrefix(String prefix) throws DOMException {
								
						}
						
						@Override
						public String getLocalName() {
								return null;
						}
						
						@Override
						public boolean hasAttributes() {
								return false;
						}
						
						@Override
						public String getBaseURI() {
								return null;
						}
						
						@Override
						public short compareDocumentPosition(Node other) throws DOMException {
								return 0;
						}
						
						@Override
						public String getTextContent() throws DOMException {
								return null;
						}
						
						@Override
						public void setTextContent(String textContent) throws DOMException {
								
						}
						
						@Override
						public boolean isSameNode(Node other) {
								return false;
						}
						
						@Override
						public String lookupPrefix(String namespaceURI) {
								return null;
						}
						
						@Override
						public boolean isDefaultNamespace(String namespaceURI) {
								return false;
						}
						
						@Override
						public String lookupNamespaceURI(String prefix) {
								return null;
						}
						
						@Override
						public boolean isEqualNode(Node arg) {
								return false;
						}
						
						@Override
						public Object getFeature(String feature, String version) {
								return null;
						}
						
						@Override
						public Object setUserData(String key, Object data, UserDataHandler handler) {
								return null;
						}
						
						@Override
						public Object getUserData(String key) {
								return null;
						}
				};
				
				// create a new XPath expression
				String xPath = ""testXPath"";
				
				// call the method
				String result = mapReader.getXMLValue(node, xPath);
				
				// check if the result is the expected value
				assertEquals(""testValue"", result);
		}
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests the method with a valid node and an invalid XPath expression.
		* The expected result is a String with the value of the node.
		*/
		@Test
		public void testGetXMLValueValidNodeInvalidXPath() {
				logger.info(""testGetXMLValueValidNodeInvalidXPath"");
				
				// create a new MapReader object
				MapReader mapReader = new MapReader("""");
				
				// create a new node
				Node node = new Node() {
						@Override
						public String getNodeName() {
								return ""testNode"";
						}
						
						@Override
						public String getNodeValue() throws DOMException {
								return ""testValue"";
						}
						
						@Override
						public short getNodeType() {
								return 0;
						}
						
						@Override
						public Node getParentNode() {
								return null;
						}
						
						@Override
						public NodeList getChildNodes() {
								return null;
						}
						
						@Override
						public Node getFirstChild() {
								return null;
						}
						
						@Override
						public Node getLastChild() {
								return null;
						}
						
						@Override
						public Node getPreviousSibling() {
								return null;
						}
						
						@Override
						public Node getNextSibling() {
								return null;
						}
						
						@Override
						public NamedNodeMap getAttributes() {
								return null;
						}
						
						@Override
						public Document getOwnerDocument() {
								return null;
						}
						
						@Override
						public Node insertBefore(Node newChild, Node refChild) throws DOMException {
								return null;
						}
						
						@Override
						public Node replaceChild(Node newChild, Node oldChild) throws DOMException {
								return null;
						}
						
						@Override
						public Node removeChild(Node oldChild) throws DOMException {
								return null;
						}
						
						@Override
						public Node appendChild(Node newChild) throws DOMException {
								return null;
						}
						
						@Override
						public boolean hasChildNodes() {
								return false;
						}
						
						@Override
						public Node cloneNode(boolean deep) {
								return null;
						}
						
						@Override
						public void normalize() {
								
						}
						
						@Override
						public boolean isSupported(String feature, String version) {
								return false;
						}
						
						@Override
						public String getNamespaceURI() {
								return null;
						}
						
						@Override
						public String getPrefix() {
								return null;
						}
						
						@Override
						public void setPrefix(String prefix) throws DOMException {
								
						}
						
						@Override
						public String getLocalName() {
								return null;
						}
						
						@Override
						public boolean hasAttributes() {
								return false;
						}
						
						@Override
						public String getBaseURI() {
								return null;
						}
						
						@Override
						public short compareDocumentPosition(Node other) throws DOMException {
								return 0;
						}
						
						@Override
						public String getTextContent() throws DOMException {
								return null;
						}
						
						@Override
						public void setTextContent(String textContent) throws DOMException {
								
						}
						
						@Override
						public boolean isSameNode(Node other) {
								return false;
						}
						
						@Override
						public String lookupPrefix(String namespaceURI) {
								return null;
						}
						
						@Override
						public boolean isDefaultNamespace(String namespaceURI) {
								return false;
						}
				"
cmpl-6xGc5H641ltK1Tbk5eZGWpFIXdvIW,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/Map_0Test.java,86.1856095790863,length,"// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * Map-Class with all information needed for map use of iterators tile-iterator:
 * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class Map implements Iterable<Tile>, Serializable {

    private static final long serialVersionUID = 1L;

    // flags if tiles, powerups and startpoints need to be read and set
    private boolean settiles = true;

    private boolean setpowerups = true;

    private boolean setstartpoints = true;

    // 2 dimensional game board
    private Object[][] MapGrid;

    private Vector<PowerUp> Powerups = new Vector<PowerUp>();

    private Point[] StartPoint;

    private Point area;

    private String name;

    private String imageSet;

    private String version;

    private String author;

    private Date date;

    private int difficulty;

    private int maxPlayers;

    private String filePath;

    private int itemId = 0;

    // iterator for powerups
    public Map.PowerUpIterator powerupiterator;

    /**
     * creates map-object with empty Tile objects
     *
     * @param xmlFile -
     *            path to xml file
     */
    public Map(String xmlFile) {
    }

    /**
     * creates map-object with or without Tile objects
     *
     * @param xmlFile -
     *            path to xml file
     * @param info -
     *            Boolean (noTile) if tiles should be read (false) or not (true)
     */
    public Map(String xmlFile, boolean settiles, boolean setpowerups, boolean setstartpoints) {
    }

    /**
     * initiate map and create MapReader Object
     *
     * @param xmlFile
     */
    private void mapInit(String xmlFile);

    /**
     * overwrite specific MapTile at Index x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @param tile -
     *            MapTile object
     */
    public void setTileByIndex(int x, int y, Tile tile);

    /**
     * return MapTile object at Index x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @return MapTile object
     */
    public Tile getTileByIndex(int x, int y);

    /**
     * overwrite specific MapTile at Position x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @param tile -
     *            MapTile object
     */
    public void setTile(int x, int y, Tile tile);

    /**
     * return MapTile object at Position x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @return MapTile object
     */
    public Tile getTile(int x, int y);

    /**
     * Resets a tile to ""empty"" tile at specific position
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     */
    public void resetTileByIndex(int x, int y);

    /**
     * Resets a tile to ""empty"" tile at specific coordinates
     *
     * @param x -
     *            coordinates of horizontal tile
     * @param y -
     *            coordinates of vertical tile
     */
    public void resetTile(int x, int y);

    /**
     * overwrite specific PowerUp at Index x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @param tile -
     *            PoweUp object
     */
    public void addPowerup(PowerUp powerup);

    /**
     * retrieves a Vector with all PowerUps
     *
     * @return
     */
    public Vector<PowerUp> getPowerups();

    /**
     * sets a bunch of properties to map
     *
     * @param mapName -
     *            Name of map
     * @param mapVersion -
     *            Version of map
     * @param mapAuthor -
     *            Name of author
     * @param mapDate -
     *            Date of map
     * @param mapDifficulty -
     *            Difficulty of map
     * @param mapImageSet -
     *            Default image set
     * @param mapMaxPlayers -
     *            Number of max players
     * @param mapFilePath -
     *            path to map xml file
     */
    public void setProperties(String mapName, String mapVersion, String mapAuthor, Date mapDate, int mapDifficulty, String mapImageSet, int mapMaxPlayers, String mapFilePath);

    public String getImageSet();

    public String getVersion();

    public String getAuthor();

    public Date getDate();

    public int getDifficulty();

    public String getName();

    public int getMaxPlayers();

    public String getFilePath();

    /**
     * sets measures of map
     *
     * @param x -
     *            number of horizontal fields
     * @param y -
     *            number of vertical fields
     */
    public void setArea(int x, int y);

    /**
     * retrieve measures of map, number of horizontal and vertical fields
     *
     * @return
     */
    public Point getArea();

    /**
     * sets the start-point-position to map
     *
     * @param StPo -
     *            array of start-point-positions
     */
    public void setStartPoints(Point[] StPo);

    /**
     * gets array of start-point positions (not coordinates)
     *
     * @return
     */
    public Point[] getStartPoints();

    /**
     * gets start-point-coordinates of player no. if not set, return coordinates
     * of field 1/1
     *
     * @param playerNo -
     *            number of player
     * @return Point with coordinates
     */
    public Point getStartPoint(int playerNo);

    /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Iterable#iterator()
	 */
    @Override
    public Iterator<Tile> iterator();

    /**
     * iterator for PowerUp Objects in map
     *
     * @author christian
     */
    public class PowerUpIterator implements Iterable<PowerUp>, Serializable {

        private static final long serialVersionUID = 1L;

        @Override
        public Iterator<PowerUp> iterator() {
            return Powerups.iterator();
        }
    }
}
","// Map_0Test.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTileByIndex(int, int)} method.
*/
class Map_0Test {","// Map_0Test.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTileByIndex(int, int)} method.
*/
class Map_0Test {

	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_0() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_1() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_2() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_3() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_4() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_5() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_6() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_7() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_8() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_9() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
}

// Map_1Test.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTileByIndex(int, int)} method.
*/
class Map_1Test {
		
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_0() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_1() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_2() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_3() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_4() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_5() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_6() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_7() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_8() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_9() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
}

// Map_2Test.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTileByIndex(int, int)} method.
*/
class Map_2Test {
		
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_0() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_1() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_2() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_3() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_4() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_5() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_6() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_7() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_8() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_9() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
}

// Map_3Test.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTileByIndex(int, int)} method.
*/
class Map_3Test {
		
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_0() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_1() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_2() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex_3() {
		Map map = new Map("""");
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getType(), TileType.EMPTY);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileBy"
cmpl-6xGdTH7B64Mqd6uv5zcTAjRmA68Nz,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/Map_1Test.java,92.91107153892517,length,"// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * Map-Class with all information needed for map use of iterators tile-iterator:
 * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class Map implements Iterable<Tile>, Serializable {

    private static final long serialVersionUID = 1L;

    // flags if tiles, powerups and startpoints need to be read and set
    private boolean settiles = true;

    private boolean setpowerups = true;

    private boolean setstartpoints = true;

    // 2 dimensional game board
    private Object[][] MapGrid;

    private Vector<PowerUp> Powerups = new Vector<PowerUp>();

    private Point[] StartPoint;

    private Point area;

    private String name;

    private String imageSet;

    private String version;

    private String author;

    private Date date;

    private int difficulty;

    private int maxPlayers;

    private String filePath;

    private int itemId = 0;

    // iterator for powerups
    public Map.PowerUpIterator powerupiterator;

    /**
     * creates map-object with empty Tile objects
     *
     * @param xmlFile -
     *            path to xml file
     */
    public Map(String xmlFile) {
    }

    /**
     * creates map-object with or without Tile objects
     *
     * @param xmlFile -
     *            path to xml file
     * @param info -
     *            Boolean (noTile) if tiles should be read (false) or not (true)
     */
    public Map(String xmlFile, boolean settiles, boolean setpowerups, boolean setstartpoints) {
    }

    /**
     * initiate map and create MapReader Object
     *
     * @param xmlFile
     */
    private void mapInit(String xmlFile);

    /**
     * overwrite specific MapTile at Index x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @param tile -
     *            MapTile object
     */
    public void setTileByIndex(int x, int y, Tile tile);

    /**
     * return MapTile object at Index x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @return MapTile object
     */
    public Tile getTileByIndex(int x, int y);

    /**
     * overwrite specific MapTile at Position x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @param tile -
     *            MapTile object
     */
    public void setTile(int x, int y, Tile tile);

    /**
     * return MapTile object at Position x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @return MapTile object
     */
    public Tile getTile(int x, int y);

    /**
     * Resets a tile to ""empty"" tile at specific position
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     */
    public void resetTileByIndex(int x, int y);

    /**
     * Resets a tile to ""empty"" tile at specific coordinates
     *
     * @param x -
     *            coordinates of horizontal tile
     * @param y -
     *            coordinates of vertical tile
     */
    public void resetTile(int x, int y);

    /**
     * overwrite specific PowerUp at Index x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @param tile -
     *            PoweUp object
     */
    public void addPowerup(PowerUp powerup);

    /**
     * retrieves a Vector with all PowerUps
     *
     * @return
     */
    public Vector<PowerUp> getPowerups();

    /**
     * sets a bunch of properties to map
     *
     * @param mapName -
     *            Name of map
     * @param mapVersion -
     *            Version of map
     * @param mapAuthor -
     *            Name of author
     * @param mapDate -
     *            Date of map
     * @param mapDifficulty -
     *            Difficulty of map
     * @param mapImageSet -
     *            Default image set
     * @param mapMaxPlayers -
     *            Number of max players
     * @param mapFilePath -
     *            path to map xml file
     */
    public void setProperties(String mapName, String mapVersion, String mapAuthor, Date mapDate, int mapDifficulty, String mapImageSet, int mapMaxPlayers, String mapFilePath);

    public String getImageSet();

    public String getVersion();

    public String getAuthor();

    public Date getDate();

    public int getDifficulty();

    public String getName();

    public int getMaxPlayers();

    public String getFilePath();

    /**
     * sets measures of map
     *
     * @param x -
     *            number of horizontal fields
     * @param y -
     *            number of vertical fields
     */
    public void setArea(int x, int y);

    /**
     * retrieve measures of map, number of horizontal and vertical fields
     *
     * @return
     */
    public Point getArea();

    /**
     * sets the start-point-position to map
     *
     * @param StPo -
     *            array of start-point-positions
     */
    public void setStartPoints(Point[] StPo);

    /**
     * gets array of start-point positions (not coordinates)
     *
     * @return
     */
    public Point[] getStartPoints();

    /**
     * gets start-point-coordinates of player no. if not set, return coordinates
     * of field 1/1
     *
     * @param playerNo -
     *            number of player
     * @return Point with coordinates
     */
    public Point getStartPoint(int playerNo);

    /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Iterable#iterator()
	 */
    @Override
    public Iterator<Tile> iterator();

    /**
     * iterator for PowerUp Objects in map
     *
     * @author christian
     */
    public class PowerUpIterator implements Iterable<PowerUp>, Serializable {

        private static final long serialVersionUID = 1L;

        @Override
        public Iterator<PowerUp> iterator() {
            return Powerups.iterator();
        }
    }
}
","// Map_1Test.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTile(int, int)} method.
*/
class Map_1Test {","// Map_1Test.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTile(int, int)} method.
*/
class Map_1Test {

	/**
	 * Test case for {@link Map#getTile(int, int)}
	 * 
	 * @author Christian
	 */
	@Test
	void testGetTile() {
		Map map = new Map("""");
		map.setArea(10, 10);
		map.setTile(0, 0, new Tile(TileType.WALL));
		map.setTile(1, 1, new Tile(TileType.WALL));
		map.setTile(2, 2, new Tile(TileType.WALL));
		map.setTile(3, 3, new Tile(TileType.WALL));
		map.setTile(4, 4, new Tile(TileType.WALL));
		map.setTile(5, 5, new Tile(TileType.WALL));
		map.setTile(6, 6, new Tile(TileType.WALL));
		map.setTile(7, 7, new Tile(TileType.WALL));
		map.setTile(8, 8, new Tile(TileType.WALL));
		map.setTile(9, 9, new Tile(TileType.WALL));
		
		assertEquals(TileType.WALL, map.getTile(0, 0).getType());
		assertEquals(TileType.WALL, map.getTile(1, 1).getType());
		assertEquals(TileType.WALL, map.getTile(2, 2).getType());
		assertEquals(TileType.WALL, map.getTile(3, 3).getType());
		assertEquals(TileType.WALL, map.getTile(4, 4).getType());
		assertEquals(TileType.WALL, map.getTile(5, 5).getType());
		assertEquals(TileType.WALL, map.getTile(6, 6).getType());
		assertEquals(TileType.WALL, map.getTile(7, 7).getType());
		assertEquals(TileType.WALL, map.getTile(8, 8).getType());
		assertEquals(TileType.WALL, map.getTile(9, 9).getType());
	}
}

// Map_2Test.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTileByIndex(int, int)} method.
*/
class Map_2Test {
		
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author Christian
	 */
	@Test
	void testGetTileByIndex() {
		Map map = new Map("""");
		map.setArea(10, 10);
		map.setTileByIndex(0, 0, new Tile(TileType.WALL));
		map.setTileByIndex(1, 1, new Tile(TileType.WALL));
		map.setTileByIndex(2, 2, new Tile(TileType.WALL));
		map.setTileByIndex(3, 3, new Tile(TileType.WALL));
		map.setTileByIndex(4, 4, new Tile(TileType.WALL));
		map.setTileByIndex(5, 5, new Tile(TileType.WALL));
		map.setTileByIndex(6, 6, new Tile(TileType.WALL));
		map.setTileByIndex(7, 7, new Tile(TileType.WALL));
		map.setTileByIndex(8, 8, new Tile(TileType.WALL));
		map.setTileByIndex(9, 9, new Tile(TileType.WALL));
		
		assertEquals(TileType.WALL, map.getTileByIndex(0, 0).getType());
		assertEquals(TileType.WALL, map.getTileByIndex(1, 1).getType());
		assertEquals(TileType.WALL, map.getTileByIndex(2, 2).getType());
		assertEquals(TileType.WALL, map.getTileByIndex(3, 3).getType());
		assertEquals(TileType.WALL, map.getTileByIndex(4, 4).getType());
		assertEquals(TileType.WALL, map.getTileByIndex(5, 5).getType());
		assertEquals(TileType.WALL, map.getTileByIndex(6, 6).getType());
		assertEquals(TileType.WALL, map.getTileByIndex(7, 7).getType());
		assertEquals(TileType.WALL, map.getTileByIndex(8, 8).getType());
		assertEquals(TileType.WALL, map.getTileByIndex(9, 9).getType());
	}
}

// Map_3Test.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#setTile(int, int, Tile)} method.
*/
class Map_3Test {
		
	/**
	 * Test case for {@link Map#setTile(int, int, Tile)}
	 * 
	 * @author Christian
	 */
	@Test
	void testSetTile() {
		Map map = new Map("""");
		map.setArea(10, 10);
		map.setTile(0, 0, new Tile(TileType.WALL));
		map.setTile(1, 1, new Tile(TileType.WALL));
		map.setTile(2, 2, new Tile(TileType.WALL));
		map.setTile(3, 3, new Tile(TileType.WALL));
		map.setTile(4, 4, new Tile(TileType.WALL));
		map.setTile(5, 5, new Tile(TileType.WALL));
		map.setTile(6, 6, new Tile(TileType.WALL));
		map.setTile(7, 7, new Tile(TileType.WALL));
		map.setTile(8, 8, new Tile(TileType.WALL));
		map.setTile(9, 9, new Tile(TileType.WALL));
		
		assertEquals(TileType.WALL, map.getTile(0, 0).getType());
		assertEquals(TileType.WALL, map.getTile(1, 1).getType());
		assertEquals(TileType.WALL, map.getTile(2, 2).getType());
		assertEquals(TileType.WALL, map.getTile(3, 3).getType());
		assertEquals(TileType.WALL, map.getTile(4, 4).getType());
		assertEquals(TileType.WALL, map.getTile(5, 5).getType());
		assertEquals(TileType.WALL, map.getTile(6, 6).getType());
		assertEquals(TileType.WALL, map.getTile(7, 7).getType());
		assertEquals(TileType.WALL, map.getTile(8, 8).getType());
		assertEquals(TileType.WALL, map.getTile(9, 9).getType());
	}
}

// Map_4Test.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#setTileByIndex(int, int, Tile)} method.
*/
class Map_4Test {
		
	/**
	 * Test case for {@link Map#setTileByIndex(int, int, Tile)}
	 * 
	 * @author Christian
	 */
	@Test
	void testSetTileByIndex() {
		Map map = new Map("""");
		map.setArea(10, 10);
		map.setTileByIndex(0, 0, new Tile(TileType.WALL));
		map.setTileByIndex(1, 1, new Tile(TileType.WALL));
		map.setTileByIndex(2, 2, new Tile(TileType.WALL));
		map.setTileByIndex(3, 3, new Tile(TileType.WALL));
		map.setTileByIndex(4, 4, new Tile(TileType.WALL));
		map.setTileByIndex(5, 5, new Tile(TileType.WALL));
		map.setTileByIndex(6, 6, new Tile(TileType.WALL));
		map.setTileByIndex(7, 7, new Tile(TileType.WALL));
		map.setTileByIndex(8, 8, new Tile(TileType.WALL));
		map.setTileByIndex(9, 9, new Tile(TileType.WALL));
		
		assertEquals(TileType.WALL, map.getTileByIndex(0, 0).getType());
		assertEquals(TileType.WALL, map.getTileByIndex(1, 1).getType());
		assertEquals(TileType.WALL, map.getTileByIndex(2, 2).getType());
		assertEquals(TileType.WALL, map.getTileByIndex(3, 3).getType());
		assertEquals(TileType.WALL, map.getTileByIndex(4, 4).getType());
		assertEquals(TileType.WALL, map.getTileByIndex(5, 5).getType());
		assertEquals(TileType.WALL, map.getTileByIndex(6, 6).getType());
		assertEquals(TileType.WALL, map.getTileByIndex(7, 7).getType());
		assertEquals(TileType.WALL, map.getTileByIndex(8, 8).getType());
		assertEquals(TileType.WALL, map.getTileByIndex(9, 9).getType());
	}
}

// Map_5Test.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#resetTile(int, int)} method.
*/
class Map_5Test {
		
	/**
	 * Test case for {@link Map#resetTile(int, int)}
	 * 
	 * @author Christian
	 */
	@Test
	void testResetTile() {
		Map map = new Map("""");
		map.setArea(10, 10);
		map.setTile(0, 0, new Tile(TileType.WALL));
		map.setTile(1, 1, new Tile(TileType.WALL));
		map.setTile(2, 2, new Tile(TileType.WALL));
		map.setTile(3, 3, new Tile(TileType.WALL));
		map.setTile(4, 4, new Tile(TileType.WALL));
		map.setTile(5, 5, new Tile(TileType.WALL));
		map.setTile(6, 6, new Tile(TileType.WALL));
		map.setTile(7, 7, new Tile(TileType.WALL));
		map.setTile(8, 8, new Tile(TileType.WALL));
		map.setTile(9, 9, new Tile(TileType.WALL));
		
		map.resetTile(0, 0);
		map.resetTile(1, 1);
		map.resetTile(2, 2);
		map.resetTile(3, 3);
		map.resetTile(4, 4);
		map.resetTile(5, 5);
		map.resetTile(6, 6);
		map.resetTile(7, 7);
		map.resetTile(8, 8);
		map.resetTile(9, 9);
		
		assertEquals(TileType.EMPTY, map.getTile(0, 0).getType());
		assertEquals(TileType.EMPTY, map.getTile(1, 1).getType());
		assertEquals(TileType.EMPTY, map.getTile(2, 2).getType());
		assertEquals(TileType.EMPTY, map.getTile(3, 3).getType());
		assertEquals(TileType.EMPTY, map.getTile(4, 4).getType());
		assertEquals(TileType.EMPTY, map.getTile(5, 5).getType());
		assertEquals(TileType.EMPTY, map.getTile(6, 6).getType());
		assertEquals(TileType.EMPTY, map.getTile(7, 7).getType());
		assertEquals(TileType.EMPTY, map.getTile(8, 8).getType());
		assertEquals(TileType.EMPTY, map.getTile(9, 9).getType());
	}
}

// Map_6Test.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#resetTileByIndex(int, int)} method.
*/
class Map_6Test {
		
	/**
	 * Test case for {@link Map#resetTileByIndex(int, int)}
	 * 
	 * @author Christian
	 */
	@Test
	void testResetTileByIndex() {
		Map map = new Map("""");
		map.setArea(10, 10);
		map.setTileByIndex(0, 0, new Tile(TileType.WALL));
		map.setTileByIndex(1, 1, new Tile(TileType.WALL));
		map.setTileByIndex(2, 2, new Tile(TileType.WALL));
		map.setTileByIndex(3, 3, new Tile(TileType.WALL));
		map.setTileByIndex(4, 4, new Tile(TileType.WALL));
		map.setTileByIndex(5, 5, new Tile(TileType.WALL));
		map.setTileByIndex(6, 6, new Tile(TileType.WALL));
		map.setTileByIndex(7, 7, new Tile(TileType.WALL));
		map.setTileByIndex(8, 8, new Tile(TileType.WALL));
		map.setTileByIndex(9, 9, new Tile(TileType.WALL));
		
		map.resetTileByIndex(0, 0);
		map.resetTileByIndex(1, 1);
		map.resetTileByIndex(2, 2);
		map.reset"
cmpl-6xGeysOvL9ABnidDCb1ZjYOX8nQjY,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/Map_2Test.java,96.53560900688171,length,"// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * Map-Class with all information needed for map use of iterators tile-iterator:
 * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class Map implements Iterable<Tile>, Serializable {

    private static final long serialVersionUID = 1L;

    // flags if tiles, powerups and startpoints need to be read and set
    private boolean settiles = true;

    private boolean setpowerups = true;

    private boolean setstartpoints = true;

    // 2 dimensional game board
    private Object[][] MapGrid;

    private Vector<PowerUp> Powerups = new Vector<PowerUp>();

    private Point[] StartPoint;

    private Point area;

    private String name;

    private String imageSet;

    private String version;

    private String author;

    private Date date;

    private int difficulty;

    private int maxPlayers;

    private String filePath;

    private int itemId = 0;

    // iterator for powerups
    public Map.PowerUpIterator powerupiterator;

    /**
     * creates map-object with empty Tile objects
     *
     * @param xmlFile -
     *            path to xml file
     */
    public Map(String xmlFile) {
    }

    /**
     * creates map-object with or without Tile objects
     *
     * @param xmlFile -
     *            path to xml file
     * @param info -
     *            Boolean (noTile) if tiles should be read (false) or not (true)
     */
    public Map(String xmlFile, boolean settiles, boolean setpowerups, boolean setstartpoints) {
    }

    /**
     * initiate map and create MapReader Object
     *
     * @param xmlFile
     */
    private void mapInit(String xmlFile);

    /**
     * overwrite specific MapTile at Index x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @param tile -
     *            MapTile object
     */
    public void setTileByIndex(int x, int y, Tile tile);

    /**
     * return MapTile object at Index x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @return MapTile object
     */
    public Tile getTileByIndex(int x, int y);

    /**
     * overwrite specific MapTile at Position x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @param tile -
     *            MapTile object
     */
    public void setTile(int x, int y, Tile tile);

    /**
     * return MapTile object at Position x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @return MapTile object
     */
    public Tile getTile(int x, int y);

    /**
     * Resets a tile to ""empty"" tile at specific position
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     */
    public void resetTileByIndex(int x, int y);

    /**
     * Resets a tile to ""empty"" tile at specific coordinates
     *
     * @param x -
     *            coordinates of horizontal tile
     * @param y -
     *            coordinates of vertical tile
     */
    public void resetTile(int x, int y);

    /**
     * overwrite specific PowerUp at Index x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @param tile -
     *            PoweUp object
     */
    public void addPowerup(PowerUp powerup);

    /**
     * retrieves a Vector with all PowerUps
     *
     * @return
     */
    public Vector<PowerUp> getPowerups();

    /**
     * sets a bunch of properties to map
     *
     * @param mapName -
     *            Name of map
     * @param mapVersion -
     *            Version of map
     * @param mapAuthor -
     *            Name of author
     * @param mapDate -
     *            Date of map
     * @param mapDifficulty -
     *            Difficulty of map
     * @param mapImageSet -
     *            Default image set
     * @param mapMaxPlayers -
     *            Number of max players
     * @param mapFilePath -
     *            path to map xml file
     */
    public void setProperties(String mapName, String mapVersion, String mapAuthor, Date mapDate, int mapDifficulty, String mapImageSet, int mapMaxPlayers, String mapFilePath);

    public String getImageSet();

    public String getVersion();

    public String getAuthor();

    public Date getDate();

    public int getDifficulty();

    public String getName();

    public int getMaxPlayers();

    public String getFilePath();

    /**
     * sets measures of map
     *
     * @param x -
     *            number of horizontal fields
     * @param y -
     *            number of vertical fields
     */
    public void setArea(int x, int y);

    /**
     * retrieve measures of map, number of horizontal and vertical fields
     *
     * @return
     */
    public Point getArea();

    /**
     * sets the start-point-position to map
     *
     * @param StPo -
     *            array of start-point-positions
     */
    public void setStartPoints(Point[] StPo);

    /**
     * gets array of start-point positions (not coordinates)
     *
     * @return
     */
    public Point[] getStartPoints();

    /**
     * gets start-point-coordinates of player no. if not set, return coordinates
     * of field 1/1
     *
     * @param playerNo -
     *            number of player
     * @return Point with coordinates
     */
    public Point getStartPoint(int playerNo);

    /*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Iterable#iterator()
	 */
    @Override
    public Iterator<Tile> iterator();

    /**
     * iterator for PowerUp Objects in map
     *
     * @author christian
     */
    public class PowerUpIterator implements Iterable<PowerUp>, Serializable {

        private static final long serialVersionUID = 1L;

        @Override
        public Iterator<PowerUp> iterator() {
            return Powerups.iterator();
        }
    }
}
","// Map_2Test.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getStartPoint(int)} method.
*/
class Map_2Test {","// Map_2Test.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getStartPoint(int)} method.
*/
class Map_2Test {

	/**
	 * Test case for {@link Map#getStartPoint(int)} method.
	 * 
	 * <p>
	 * Tested method: {@link Map#getStartPoint(int)}
	 * 
	 * <p>
	 * Tested input: playerNo = 1
	 * 
	 * <p>
	 * Expected output: Point(1,1)
	 */
	@Test
	void testGetStartPoint_1() {
		Map map = new Map("""");
		Point expected = new Point(1,1);
		Point actual = map.getStartPoint(1);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Map#getStartPoint(int)} method.
	 * 
	 * <p>
	 * Tested method: {@link Map#getStartPoint(int)}
	 * 
	 * <p>
	 * Tested input: playerNo = 2
	 * 
	 * <p>
	 * Expected output: Point(1,1)
	 */
	@Test
	void testGetStartPoint_2() {
		Map map = new Map("""");
		Point expected = new Point(1,1);
		Point actual = map.getStartPoint(2);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Map#getStartPoint(int)} method.
	 * 
	 * <p>
	 * Tested method: {@link Map#getStartPoint(int)}
	 * 
	 * <p>
	 * Tested input: playerNo = 3
	 * 
	 * <p>
	 * Expected output: Point(1,1)
	 */
	@Test
	void testGetStartPoint_3() {
		Map map = new Map("""");
		Point expected = new Point(1,1);
		Point actual = map.getStartPoint(3);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Map#getStartPoint(int)} method.
	 * 
	 * <p>
	 * Tested method: {@link Map#getStartPoint(int)}
	 * 
	 * <p>
	 * Tested input: playerNo = 4
	 * 
	 * <p>
	 * Expected output: Point(1,1)
	 */
	@Test
	void testGetStartPoint_4() {
		Map map = new Map("""");
		Point expected = new Point(1,1);
		Point actual = map.getStartPoint(4);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Map#getStartPoint(int)} method.
	 * 
	 * <p>
	 * Tested method: {@link Map#getStartPoint(int)}
	 * 
	 * <p>
	 * Tested input: playerNo = 5
	 * 
	 * <p>
	 * Expected output: Point(1,1)
	 */
	@Test
	void testGetStartPoint_5() {
		Map map = new Map("""");
		Point expected = new Point(1,1);
		Point actual = map.getStartPoint(5);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Map#getStartPoint(int)} method.
	 * 
	 * <p>
	 * Tested method: {@link Map#getStartPoint(int)}
	 * 
	 * <p>
	 * Tested input: playerNo = 6
	 * 
	 * <p>
	 * Expected output: Point(1,1)
	 */
	@Test
	void testGetStartPoint_6() {
		Map map = new Map("""");
		Point expected = new Point(1,1);
		Point actual = map.getStartPoint(6);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Map#getStartPoint(int)} method.
	 * 
	 * <p>
	 * Tested method: {@link Map#getStartPoint(int)}
	 * 
	 * <p>
	 * Tested input: playerNo = 7
	 * 
	 * <p>
	 * Expected output: Point(1,1)
	 */
	@Test
	void testGetStartPoint_7() {
		Map map = new Map("""");
		Point expected = new Point(1,1);
		Point actual = map.getStartPoint(7);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Map#getStartPoint(int)} method.
	 * 
	 * <p>
	 * Tested method: {@link Map#getStartPoint(int)}
	 * 
	 * <p>
	 * Tested input: playerNo = 8
	 * 
	 * <p>
	 * Expected output: Point(1,1)
	 */
	@Test
	void testGetStartPoint_8() {
		Map map = new Map("""");
		Point expected = new Point(1,1);
		Point actual = map.getStartPoint(8);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Map#getStartPoint(int)} method.
	 * 
	 * <p>
	 * Tested method: {@link Map#getStartPoint(int)}
	 * 
	 * <p>
	 * Tested input: playerNo = 9
	 * 
	 * <p>
	 * Expected output: Point(1,1)
	 */
	@Test
	void testGetStartPoint_9() {
		Map map = new Map("""");
		Point expected = new Point(1,1);
		Point actual = map.getStartPoint(9);
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link Map#getStartPoint(int)} method.
	 * 
	 * <p>
	 * Tested method: {@link Map#getStartPoint(int)}
	 * 
	 * <p>
	 * Tested input: playerNo = 10
	 * 
	 * <p>
	 * Expected output: Point(1,1)
	 */
	@Test
	void testGetStartPoint_10() {
		Map map = new Map("""");
		Point expected = new Point(1,1);
		Point actual = map.getStartPoint(10);
		assertEquals(expected, actual);
	}
}

// MapReader.java
package common;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.Vector;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * MapReader-Class for reading xml-files
 *
 * @author christian
 */
public class MapReader {

    private Map map;

    private String xmlFile;

    private boolean settiles;

    private boolean setpowerups;

    private boolean setstartpoints;

    /**
     * creates MapReader-Object
     *
     * @param xmlFile -
     *            path to xml file
     */
    public MapReader(String xmlFile, boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap();

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(String xmlFile);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(String xmlFile, boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map, String xmlFile, boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map, String xmlFile);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map, boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(String xmlFile, boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(String xmlFile);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap();

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map, boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map, String xmlFile);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map, String xmlFile, boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(String xmlFile, boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(String xmlFile);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap();

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map, boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map, String xmlFile);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map, String xmlFile, boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(String xmlFile, boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(String xmlFile);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap();

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map, boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map, String xmlFile);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map, String xmlFile, boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(String xmlFile, boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(String xmlFile);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap();

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map, boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map, String xmlFile);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map, String xmlFile, boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(String xmlFile, boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(String xmlFile);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap();

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map, boolean settiles, boolean setpowerups, boolean setstartpoints);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */
    public Map readMap(Map map);

    /**
     * reads xml-file and sets all information to map
     *
     * @return
     */"
cmpl-6xGgXfbXalsx75iFMV4oAWkFKiajQ,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/ResourceService_0Test.java,95.09273195266724,length,"// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    /**
     * Loads the {@link Image} that is located at the specified path.
     * @param path The location of the image within the classpath.
     * @return The loaded {@link Image} or null if there was an IOException while trying
     * to read the image from a stream.
     */
    public static Image getImage(String path);

    /**
     * Loads the {@link ImageIcon} that is located at the specified path.
     * @param path The location of the image within the classpath.
     * @return The loaded {@link ImageIcon}
     */
    public static ImageIcon getImageIcon(String path);

    /**
     * Creates a connection to the resource that is located at the specified
     * path via an {@link InputStream}.
     * @param path The location of the resource within the classpath.
     * @return The {@link InputStream} that points the requested resource.
     */
    public static InputStream getInputStream(String path);
}
","// ResourceService_0Test.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImage(String)} method.
*/
class ResourceService_0Test {","// ResourceService_0Test.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImage(String)} method.
*/
class ResourceService_0Test {

	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is null.
	 */
	@Test
	void testGetImage_0() {
		Image result = ResourceService.getImage(null);
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is empty.
	 */
	@Test
	void testGetImage_1() {
		Image result = ResourceService.getImage("""");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImage_2() {
		Image result = ResourceService.getImage(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImage_3() {
		Image result = ResourceService.getImage(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImage_4() {
		Image result = ResourceService.getImage(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImage_5() {
		Image result = ResourceService.getImage(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImage_6() {
		Image result = ResourceService.getImage(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImage_7() {
		Image result = ResourceService.getImage(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImage_8() {
		Image result = ResourceService.getImage(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImage_9() {
		Image result = ResourceService.getImage(""/images/not_existing.png"");
		assertNull(result);
	}
}

// ResourceService_1Test.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImageIcon(String)} method.
*/
class ResourceService_1Test {
		
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is null.
	 */
	@Test
	void testGetImageIcon_0() {
		ImageIcon result = ResourceService.getImageIcon(null);
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is empty.
	 */
	@Test
	void testGetImageIcon_1() {
		ImageIcon result = ResourceService.getImageIcon("""");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImageIcon_2() {
		ImageIcon result = ResourceService.getImageIcon(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImageIcon_3() {
		ImageIcon result = ResourceService.getImageIcon(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImageIcon_4() {
		ImageIcon result = ResourceService.getImageIcon(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImageIcon_5() {
		ImageIcon result = ResourceService.getImageIcon(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImageIcon_6() {
		ImageIcon result = ResourceService.getImageIcon(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImageIcon_7() {
		ImageIcon result = ResourceService.getImageIcon(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImageIcon_8() {
		ImageIcon result = ResourceService.getImageIcon(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImageIcon_9() {
		ImageIcon result = ResourceService.getImageIcon(""/images/not_existing.png"");
		assertNull(result);
	}
}

// ResourceService_2Test.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getInputStream(String)} method.
*/
class ResourceService_2Test {
		
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is null.
	 */
	@Test
	void testGetInputStream_0() {
		InputStream result = ResourceService.getInputStream(null);
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is empty.
	 */
	@Test
	void testGetInputStream_1() {
		InputStream result = ResourceService.getInputStream("""");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetInputStream_2() {
		InputStream result = ResourceService.getInputStream(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetInputStream_3() {
		InputStream result = ResourceService.getInputStream(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetInputStream_4() {
		InputStream result = ResourceService.getInputStream(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetInputStream_5() {
		InputStream result = ResourceService.getInputStream(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetInputStream_6() {
		InputStream result = ResourceService.getInputStream(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetInputStream_7() {
		InputStream result = ResourceService.getInputStream(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetInputStream_8() {
		InputStream result = ResourceService.getInputStream(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetInputStream_9() {
		InputStream result = ResourceService.getInputStream(""/images/not_existing.png"");
		assertNull(result);
	}
}

// ResourceService_3Test.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImage(String)} method.
*/
class ResourceService_3Test {
		
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is null.
	 */
	@Test
	void testGetImage_0() {
		Image result = ResourceService.getImage(null);
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is empty.
	 */
	@Test
	void testGetImage_1() {
		Image result = ResourceService.getImage("""");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImage_2() {
		Image result = ResourceService.getImage(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImage_3() {
		Image result = ResourceService.getImage(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImage_4() {
		Image result = ResourceService.getImage(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImage_5() {
		Image result = ResourceService.getImage(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImage_6() {
		Image result = ResourceService.getImage(""/images/not_existing.png"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is not valid.
	 */
	@Test
	void testGetImage_7() {
		Image result ="
cmpl-6xGjQOuzGKuBWc1F2x28xhGFwQe89,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/ResourceService_1Test.java,172.13566422462463,length,"// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    /**
     * Loads the {@link Image} that is located at the specified path.
     * @param path The location of the image within the classpath.
     * @return The loaded {@link Image} or null if there was an IOException while trying
     * to read the image from a stream.
     */
    public static Image getImage(String path);

    /**
     * Loads the {@link ImageIcon} that is located at the specified path.
     * @param path The location of the image within the classpath.
     * @return The loaded {@link ImageIcon}
     */
    public static ImageIcon getImageIcon(String path);

    /**
     * Creates a connection to the resource that is located at the specified
     * path via an {@link InputStream}.
     * @param path The location of the resource within the classpath.
     * @return The {@link InputStream} that points the requested resource.
     */
    public static InputStream getInputStream(String path);
}
","// ResourceService_1Test.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImageIcon(String)} method.
*/
class ResourceService_1Test {","// ResourceService_1Test.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImageIcon(String)} method.
*/
class ResourceService_1Test {

	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns an {@link ImageIcon} object.
	 */
	@Test
	void testGetImageIcon() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertNotNull(imageIcon);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns an {@link ImageIcon} object with the correct image.
	 */
	@Test
	void testGetImageIcon_2() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertEquals(imageIcon.getIconWidth(), 32);
		assertEquals(imageIcon.getIconHeight(), 32);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns an {@link ImageIcon} object with the correct image.
	 */
	@Test
	void testGetImageIcon_3() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertEquals(imageIcon.getIconWidth(), 32);
		assertEquals(imageIcon.getIconHeight(), 32);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns an {@link ImageIcon} object with the correct image.
	 */
	@Test
	void testGetImageIcon_4() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertEquals(imageIcon.getIconWidth(), 32);
		assertEquals(imageIcon.getIconHeight(), 32);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns an {@link ImageIcon} object with the correct image.
	 */
	@Test
	void testGetImageIcon_5() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertEquals(imageIcon.getIconWidth(), 32);
		assertEquals(imageIcon.getIconHeight(), 32);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns an {@link ImageIcon} object with the correct image.
	 */
	@Test
	void testGetImageIcon_6() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertEquals(imageIcon.getIconWidth(), 32);
		assertEquals(imageIcon.getIconHeight(), 32);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns an {@link ImageIcon} object with the correct image.
	 */
	@Test
	void testGetImageIcon_7() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertEquals(imageIcon.getIconWidth(), 32);
		assertEquals(imageIcon.getIconHeight(), 32);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns an {@link ImageIcon} object with the correct image.
	 */
	@Test
	void testGetImageIcon_8() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertEquals(imageIcon.getIconWidth(), 32);
		assertEquals(imageIcon.getIconHeight(), 32);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns an {@link ImageIcon} object with the correct image.
	 */
	@Test
	void testGetImageIcon_9() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertEquals(imageIcon.getIconWidth(), 32);
		assertEquals(imageIcon.getIconHeight(), 32);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns an {@link ImageIcon} object with the correct image.
	 */
	@Test
	void testGetImageIcon_10() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertEquals(imageIcon.getIconWidth(), 32);
		assertEquals(imageIcon.getIconHeight(), 32);
	}
}

// ResourceService_2Test.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImage(String)} method.
*/
class ResourceService_2Test {
		
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns an {@link Image} object.
	 */
	@Test
	void testGetImage() {
		Image image = ResourceService.getImage(""/images/icon.png"");
		assertNotNull(image);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns an {@link Image} object with the correct image.
	 */
	@Test
	void testGetImage_2() {
		Image image = ResourceService.getImage(""/images/icon.png"");
		assertEquals(image.getWidth(null), 32);
		assertEquals(image.getHeight(null), 32);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns an {@link Image} object with the correct image.
	 */
	@Test
	void testGetImage_3() {
		Image image = ResourceService.getImage(""/images/icon.png"");
		assertEquals(image.getWidth(null), 32);
		assertEquals(image.getHeight(null), 32);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns an {@link Image} object with the correct image.
	 */
	@Test
	void testGetImage_4() {
		Image image = ResourceService.getImage(""/images/icon.png"");
		assertEquals(image.getWidth(null), 32);
		assertEquals(image.getHeight(null), 32);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns an {@link Image} object with the correct image.
	 */
	@Test
	void testGetImage_5() {
		Image image = ResourceService.getImage(""/images/icon.png"");
		assertEquals(image.getWidth(null), 32);
		assertEquals(image.getHeight(null), 32);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns an {@link Image} object with the correct image.
	 */
	@Test
	void testGetImage_6() {
		Image image = ResourceService.getImage(""/images/icon.png"");
		assertEquals(image.getWidth(null), 32);
		assertEquals(image.getHeight(null), 32);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns an {@link Image} object with the correct image.
	 */
	@Test
	void testGetImage_7() {
		Image image = ResourceService.getImage(""/images/icon.png"");
		assertEquals(image.getWidth(null), 32);
		assertEquals(image.getHeight(null), 32);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns an {@link Image} object with the correct image.
	 */
	@Test
	void testGetImage_8() {
		Image image = ResourceService.getImage(""/images/icon.png"");
		assertEquals(image.getWidth(null), 32);
		assertEquals(image.getHeight(null), 32);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns an {@link Image} object with the correct image.
	 */
	@Test
	void testGetImage_9() {
		Image image = ResourceService.getImage(""/images/icon.png"");
		assertEquals(image.getWidth(null), 32);
		assertEquals(image.getHeight(null), 32);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns an {@link Image} object with the correct image.
	 */
	@Test
	void testGetImage_10() {
		Image image = ResourceService.getImage(""/images/icon.png"");
		assertEquals(image.getWidth(null), 32);
		assertEquals(image.getHeight(null), 32);
	}
}

// ResourceService_3Test.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getInputStream(String)} method.
*/
class ResourceService_3Test {
		
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns an {@link InputStream} object.
	 */
	@Test
	void testGetInputStream() {
		InputStream inputStream = ResourceService.getInputStream(""/images/icon.png"");
		assertNotNull(inputStream);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns an {@link InputStream} object with the correct image.
	 */
	@Test
	void testGetInputStream_2() {
		InputStream inputStream = ResourceService.getInputStream(""/images/icon.png"");
		assertNotNull(inputStream);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns an {@link InputStream} object with the correct image.
	 */
	@Test
	void testGetInputStream_3() {
		InputStream inputStream = ResourceService.getInputStream(""/images/icon.png"");
		assertNotNull(inputStream);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns an {@link InputStream} object with the correct image.
	 */
	@Test
	void testGetInputStream_4() {
		InputStream inputStream = ResourceService.getInputStream(""/images/icon.png"");
		assertNotNull(inputStream);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns an {@link InputStream} object with the correct image.
	 */
	@Test
	void testGetInputStream_5() {
		InputStream inputStream = ResourceService.getInputStream(""/images/icon.png"");
		assertNotNull(inputStream);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns an {@link InputStream} object with the correct image.
	 */
	@Test
	void testGetInputStream_6() {
		InputStream inputStream = ResourceService.getInputStream(""/images/icon.png"");
		assertNotNull(inputStream);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns an {@link InputStream} object with the correct image.
	 */
	@Test
	void testGetInputStream_7() {
		InputStream inputStream = ResourceService.getInputStream(""/images/icon.png"");
		assertNotNull(inputStream);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns an {@link InputStream} object with the correct image.
	 */
	@Test
	void testGetInputStream_8() {
		InputStream inputStream = ResourceService.getInputStream(""/images/icon.png"");
		assertNotNull(inputStream);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns an {@link InputStream} object with the correct image.
	 */
	@Test
	void testGetInputStream_9() {
		InputStream inputStream = ResourceService.getInputStream(""/images/icon.png"");
		assertNotNull(inputStream);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns an {@link InputStream} object with the correct image.
	 */
	@Test
	void testGetInputStream_10() {
		InputStream inputStream = ResourceService.getInputStream(""/images/icon.png"");
		assertNotNull(inputStream);
	}
}

// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    /**
     * Loads the {@link Image} that is located at the specified path.
     * @param path The location of the image within the classpath.
     * @return The loaded {@link Image} or null if there was an IOException while trying
     * to read the image from a stream.
     */
    public static Image getImage(String path) {
        try {
            return ImageIO.read(ResourceService.class.getResourceAsStream(path));
        } catch (IOException e) {
            e.printStackTrace();
            return null;
       "
cmpl-6xGkqicrnKyOmLgOJxbnIpWEooZmp,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/ResourceService_2Test.java,102.24247121810913,length,"// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    /**
     * Loads the {@link Image} that is located at the specified path.
     * @param path The location of the image within the classpath.
     * @return The loaded {@link Image} or null if there was an IOException while trying
     * to read the image from a stream.
     */
    public static Image getImage(String path);

    /**
     * Loads the {@link ImageIcon} that is located at the specified path.
     * @param path The location of the image within the classpath.
     * @return The loaded {@link ImageIcon}
     */
    public static ImageIcon getImageIcon(String path);

    /**
     * Creates a connection to the resource that is located at the specified
     * path via an {@link InputStream}.
     * @param path The location of the resource within the classpath.
     * @return The {@link InputStream} that points the requested resource.
     */
    public static InputStream getInputStream(String path);
}
","// ResourceService_2Test.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getInputStream(String)} method.
*/
class ResourceService_2Test {","// ResourceService_2Test.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getInputStream(String)} method.
*/
class ResourceService_2Test {

	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is null.
	 */
	@Test
	void testGetInputStream_1() {
		InputStream result = ResourceService.getInputStream(null);
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is empty.
	 */
	@Test
	void testGetInputStream_2() {
		InputStream result = ResourceService.getInputStream("""");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is a blank string.
	 */
	@Test
	void testGetInputStream_3() {
		InputStream result = ResourceService.getInputStream("" "");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only spaces.
	 */
	@Test
	void testGetInputStream_4() {
		InputStream result = ResourceService.getInputStream(""   "");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only tabs.
	 */
	@Test
	void testGetInputStream_5() {
		InputStream result = ResourceService.getInputStream(""\t\t\t"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only new lines.
	 */
	@Test
	void testGetInputStream_6() {
		InputStream result = ResourceService.getInputStream(""\n\n\n"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only carriage returns.
	 */
	@Test
	void testGetInputStream_7() {
		InputStream result = ResourceService.getInputStream(""\r\r\r"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only spaces, tabs, new lines and carriage returns.
	 */
	@Test
	void testGetInputStream_8() {
		InputStream result = ResourceService.getInputStream("" \t\n\r"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only spaces, tabs, new lines and carriage returns.
	 */
	@Test
	void testGetInputStream_9() {
		InputStream result = ResourceService.getInputStream("" \t\n\r"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only spaces, tabs, new lines and carriage returns.
	 */
	@Test
	void testGetInputStream_10() {
		InputStream result = ResourceService.getInputStream("" \t\n\r"");
		assertNull(result);
	}
}

// ResourceService_3Test.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImage(String)} method.
*/
class ResourceService_3Test {
		
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is null.
	 */
	@Test
	void testGetImage_1() {
		Image result = ResourceService.getImage(null);
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is empty.
	 */
	@Test
	void testGetImage_2() {
		Image result = ResourceService.getImage("""");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is a blank string.
	 */
	@Test
	void testGetImage_3() {
		Image result = ResourceService.getImage("" "");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only spaces.
	 */
	@Test
	void testGetImage_4() {
		Image result = ResourceService.getImage(""   "");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only tabs.
	 */
	@Test
	void testGetImage_5() {
		Image result = ResourceService.getImage(""\t\t\t"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only new lines.
	 */
	@Test
	void testGetImage_6() {
		Image result = ResourceService.getImage(""\n\n\n"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only carriage returns.
	 */
	@Test
	void testGetImage_7() {
		Image result = ResourceService.getImage(""\r\r\r"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only spaces, tabs, new lines and carriage returns.
	 */
	@Test
	void testGetImage_8() {
		Image result = ResourceService.getImage("" \t\n\r"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only spaces, tabs, new lines and carriage returns.
	 */
	@Test
	void testGetImage_9() {
		Image result = ResourceService.getImage("" \t\n\r"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only spaces, tabs, new lines and carriage returns.
	 */
	@Test
	void testGetImage_10() {
		Image result = ResourceService.getImage("" \t\n\r"");
		assertNull(result);
	}
}

// ResourceService_4Test.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImageIcon(String)} method.
*/
class ResourceService_4Test {
		
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is null.
	 */
	@Test
	void testGetImageIcon_1() {
		ImageIcon result = ResourceService.getImageIcon(null);
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is empty.
	 */
	@Test
	void testGetImageIcon_2() {
		ImageIcon result = ResourceService.getImageIcon("""");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is a blank string.
	 */
	@Test
	void testGetImageIcon_3() {
		ImageIcon result = ResourceService.getImageIcon("" "");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only spaces.
	 */
	@Test
	void testGetImageIcon_4() {
		ImageIcon result = ResourceService.getImageIcon(""   "");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only tabs.
	 */
	@Test
	void testGetImageIcon_5() {
		ImageIcon result = ResourceService.getImageIcon(""\t\t\t"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only new lines.
	 */
	@Test
	void testGetImageIcon_6() {
		ImageIcon result = ResourceService.getImageIcon(""\n\n\n"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only carriage returns.
	 */
	@Test
	void testGetImageIcon_7() {
		ImageIcon result = ResourceService.getImageIcon(""\r\r\r"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only spaces, tabs, new lines and carriage returns.
	 */
	@Test
	void testGetImageIcon_8() {
		ImageIcon result = ResourceService.getImageIcon("" \t\n\r"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only spaces, tabs, new lines and carriage returns.
	 */
	@Test
	void testGetImageIcon_9() {
		ImageIcon result = ResourceService.getImageIcon("" \t\n\r"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only spaces, tabs, new lines and carriage returns.
	 */
	@Test
	void testGetImageIcon_10() {
		ImageIcon result = ResourceService.getImageIcon("" \t\n\r"");
		assertNull(result);
	}
}

// ResourceService_5Test.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImage(String)} method.
*/
class ResourceService_5Test {
		
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is null.
	 */
	@Test
	void testGetImage_1() {
		Image result = ResourceService.getImage(null);
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is empty.
	 */
	@Test
	void testGetImage_2() {
		Image result = ResourceService.getImage("""");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is a blank string.
	 */
	@Test
	void testGetImage_3() {
		Image result = ResourceService.getImage("" "");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only spaces.
	 */
	@Test
	void testGetImage_4() {
		Image result = ResourceService.getImage(""   "");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only tabs.
	 */
	@Test
	void testGetImage_5() {
		Image result = ResourceService.getImage(""\t\t\t"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only new lines.
	 */
	@Test
	void testGetImage_6() {
		Image result = ResourceService.getImage(""\n\n\n"");
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * <p>
	 * Test if the method returns null if the path is a string with only carriage returns.
	 */
	@Test
	void testGetImage_7() {
		Image result = ResourceService.getImage(""\r\r\r"");
		assertNull(result);
	}
	
"
cmpl-6xGmUS8JGMRu8Q2wlqI489nzG8kp8,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/XmlFunctions_0Test.java,37.46889567375183,stop,"// XmlFunctions.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * basic functions for reading and writing xml files
 *
 * @author christian
 */
public class XmlFunctions {

    private static final Logger logger = Logger.getLogger(XmlFunctions.class);

    Document xml;

    String fileName;

    /**
     * constructor
     *
     * @param XmlFileName -
     *            path to xml file
     */
    public XmlFunctions(String XmlFileName) {
    }

    /**
     * sets value to specific xml node and saves the xml file
     *
     * @param element -
     *            name of xml element
     * @param value -
     *            String, value to be set
     */
    public void setXmlValue(String xmlPath, String value);

    /**
     * returns value of specific xml element
     *
     * @param XmlPath -
     *            element path (XPath)
     * @return String with value of element
     */
    public String getXmlValue(String XmlPath);

    /**
     * reads a xml file into a Document object
     *
     * @param fileName -
     *            path to xml file
     */
    private void openXmlFile(String fileName);

    /**
     * finds a xml node in the Document object and returns it
     *
     * @param XmlPath -
     *            element path (XPath)
     * @return Node - found node
     */
    private Node findXmlNode(String XmlPath);

    /**
     * returns a list of nodes matching to the element name
     *
     * @param NodeName -
     *            name of element(s)
     * @return NodeList with found nodes
     */
    public NodeList findXmlNodes(String NodeName);

    /**
     * writes global Document object xml (back) into xml file
     */
    private void writeXmlFile();
}
","// XmlFunctions_0Test.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#getXmlValue(String)} method.
*/
class XmlFunctions_0Test {","// XmlFunctions_0Test.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#getXmlValue(String)} method.
*/
class XmlFunctions_0Test {

	/**
	* Test case for {@link XmlFunctions#getXmlValue(String)}
	* with the following input values:
	* <ul>
	* 	<li>XmlPath = ""//test/test1""</li>
	* </ul>
	*
	* @throws Exception
	* 	if an error occurs during the test
	*/
	@Test
	public void testGetXmlValue_0() throws Exception {
		// initialize test
		XmlFunctions fixture = new XmlFunctions("""");
		String XmlPath = ""//test/test1"";
		
		// execute test
		String result = fixture.getXmlValue(XmlPath);
		
		// verify test result
		assertEquals(""test1"", result);
	}
	
	/**
	* Test case for {@link XmlFunctions#getXmlValue(String)}
	* with the following input values:
	* <ul>
	* 	<li>XmlPath = ""//test/test2""</li>
	* </ul>
	*
	* @throws Exception
	* 	if an error occurs during the test
	*/
	@Test
	public void testGetXmlValue_1() throws Exception {
		// initialize test
		XmlFunctions fixture = new XmlFunctions("""");
		String XmlPath = ""//test/test2"";
		
		// execute test
		String result = fixture.getXmlValue(XmlPath);
		
		// verify test result
		assertEquals(""test2"", result);
	}
	
	/**
	* Test case for {@link XmlFunctions#getXmlValue(String)}
	* with the following input values:
	* <ul>
	* 	<li>XmlPath = ""//test/test3""</li>
	* </ul>
	*
	* @throws Exception
	* 	if an error occurs during the test
	*/
	@Test
	public void testGetXmlValue_2() throws Exception {
		// initialize test
		XmlFunctions fixture = new XmlFunctions("""");
		String XmlPath = ""//test/test3"";
		
		// execute test
		String result = fixture.getXmlValue(XmlPath);
		
		// verify test result
		assertEquals(""test3"", result);
	}
	
	/**
	* Test case for {@link XmlFunctions#getXmlValue(String)}
	* with the following input values:
	* <ul>
	* 	<li>XmlPath = ""//test/test4""</li>
	* </ul>
	*
	* @throws Exception
	* 	if an error occurs during the test
	*/
	@Test
	public void testGetXmlValue_3() throws Exception {
		// initialize test
		XmlFunctions fixture = new XmlFunctions("""");
		String XmlPath = ""//test/test4"";
		
		// execute test
		String result = fixture.getXmlValue(XmlPath);
		
		// verify test result
		assertEquals(""test4"", result);
	}
	
	/**
	* Test case for {@link XmlFunctions#getXmlValue(String)}
	* with the following input values:
	* <ul>
	* 	<li>XmlPath = ""//test/test5""</li>
	* </ul>
	*
	* @throws Exception
	* 	if an error occurs during the test
	*/
	@Test
	public void testGetXmlValue_4() throws Exception {
		// initialize test
		XmlFunctions fixture = new XmlFunctions("""");
		String XmlPath = ""//test/test5"";
		
		// execute test
		String result = fixture.getXmlValue(XmlPath);
		
		// verify test result
		assertEquals(""test5"", result);
	}
	
	/**
	* Test case for {@link XmlFunctions#getXmlValue(String)}
	* with the following input values:
	* <ul>
	* 	<li>XmlPath = ""//test/test6""</li>
	* </ul>
	*
	* @throws Exception
	* 	if an error occurs during the test
	*/
	@Test
	public void testGetXmlValue_5() throws Exception {
		// initialize test
		XmlFunctions fixture = new XmlFunctions("""");
		String XmlPath = ""//test/test6"";
		
		// execute test
		String result = fixture.getXmlValue(XmlPath);
		
		// verify test result
		assertEquals(""test6"", result);
	}
	
	/**
	* Test case for {@link XmlFunctions#getXmlValue(String)}
	* with the following input values:
	* <ul>
	* 	<li>XmlPath = ""//test/test7""</li>
	* </ul>
	*
	* @throws Exception
	* 	if an error occurs during the test
	*/
	@Test
	public void testGetXmlValue_6() throws Exception {
		// initialize test
		XmlFunctions fixture = new XmlFunctions("""");
		String XmlPath = ""//test/test7"";
		
		// execute test
		String result = fixture.getXmlValue(XmlPath);
		
		// verify test result
		assertEquals(""test7"", result);
	}
	
	/**
	* Test case for {@link XmlFunctions#getXmlValue(String)}
	* with the following input values:
	* <ul>
	* 	<li>XmlPath = ""//test/test8""</li>
	* </ul>
	*
	* @throws Exception
	* 	if an error occurs during the test
	*/
	@Test
	public void testGetXmlValue_7() throws Exception {
		// initialize test
		XmlFunctions fixture = new XmlFunctions("""");
		String XmlPath = ""//test/test8"";
		
		// execute test
		String result = fixture.getXmlValue(XmlPath);
		
		// verify test result
		assertEquals(""test8"", result);
	}
	
	/**
	* Test case for {@link XmlFunctions#getXmlValue(String)}
	* with the following input values:
	* <ul>
	* 	<li>XmlPath = ""//test/test9""</li>
	* </ul>
	*
	* @throws Exception
	* 	if an error occurs during the test
	*/
	@Test
	public void testGetXmlValue_8() throws Exception {
		// initialize test
		XmlFunctions fixture = new XmlFunctions("""");
		String XmlPath = ""//test/test9"";
		
		// execute test
		String result = fixture.getXmlValue(XmlPath);
		
		// verify test result
		assertEquals(""test9"", result);
	}
	
	/**
	* Test case for {@link XmlFunctions#getXmlValue(String)}
	* with the following input values:
	* <ul>
	* 	<li>XmlPath = ""//test/test10""</li>
	* </ul>
	*
	* @throws Exception
	* 	if an error occurs during the test
	*/
	@Test
	public void testGetXmlValue_9() throws Exception {
		// initialize test
		XmlFunctions fixture = new XmlFunctions("""");
		String XmlPath = ""//test/test10"";
		
		// execute test
		String result = fixture.getXmlValue(XmlPath);
		
		// verify test result
		assertEquals(""test10"", result);
	}
	
}"
cmpl-6xGnX6v4zHBS4tR5k8hMS3OWnvH5W,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/XmlFunctions_1Test.java,104.07920670509338,length,"// XmlFunctions.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * basic functions for reading and writing xml files
 *
 * @author christian
 */
public class XmlFunctions {

    private static final Logger logger = Logger.getLogger(XmlFunctions.class);

    Document xml;

    String fileName;

    /**
     * constructor
     *
     * @param XmlFileName -
     *            path to xml file
     */
    public XmlFunctions(String XmlFileName) {
    }

    /**
     * sets value to specific xml node and saves the xml file
     *
     * @param element -
     *            name of xml element
     * @param value -
     *            String, value to be set
     */
    public void setXmlValue(String xmlPath, String value);

    /**
     * returns value of specific xml element
     *
     * @param XmlPath -
     *            element path (XPath)
     * @return String with value of element
     */
    public String getXmlValue(String XmlPath);

    /**
     * reads a xml file into a Document object
     *
     * @param fileName -
     *            path to xml file
     */
    private void openXmlFile(String fileName);

    /**
     * finds a xml node in the Document object and returns it
     *
     * @param XmlPath -
     *            element path (XPath)
     * @return Node - found node
     */
    private Node findXmlNode(String XmlPath);

    /**
     * returns a list of nodes matching to the element name
     *
     * @param NodeName -
     *            name of element(s)
     * @return NodeList with found nodes
     */
    public NodeList findXmlNodes(String NodeName);

    /**
     * writes global Document object xml (back) into xml file
     */
    private void writeXmlFile();
}
","// XmlFunctions_1Test.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#findXmlNodes(String)} method.
*/
class XmlFunctions_1Test {","// XmlFunctions_1Test.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#findXmlNodes(String)} method.
*/
class XmlFunctions_1Test {

	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_1() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 1;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_2() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 2;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_3() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 3;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_4() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 4;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_5() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 5;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_6() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 6;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_7() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 7;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_8() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 8;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_9() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 9;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_10() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 10;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
}

// XmlFunctions_2Test.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#findXmlNodes(String)} method.
*/
class XmlFunctions_2Test {
		
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_1() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 1;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_2() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 2;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_3() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 3;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_4() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 4;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_5() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 5;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_6() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 6;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_7() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 7;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_8() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 8;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_9() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 9;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_10() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 10;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
}

// XmlFunctions_3Test.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#findXmlNodes(String)} method.
*/
class XmlFunctions_3Test {
		
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_1() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 1;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link XmlFunctions#findXmlNodes(String)} method.
	* It tests if the method returns the correct number of nodes.
	*/
	@Test
	void testFindXmlNodes_2() {
		// arrange
		XmlFunctions xmlFunctions = new XmlFunctions(""test.xml"");
		int expected = 2;
		// act
		int actual = xmlFunctions.findXmlNodes(""test"").getLength();
		// assert
	"
cmpl-6xGpDJJHjcslNZNhlE6hyKxBSEycl,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/server/BomberServer.java,114.54551267623901,length,"// BomberServer.java
package server;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.GlobalServerMsg;
import messages.global.SessionDetailsMsg;
import messages.global.SessionListMsg;
import org.apache.log4j.Logger;
import org.hsqldb.Server;
import org.hsqldb.jdbc.jdbcDataSource;
import common.Constants;

/**
 * This is the main server class. It is responsible for accepting connections
 * from clients and starting new games/session.
 *
 * @author Steffen, Bj�rn, Daniel
 */
public class BomberServer {

    private static final Logger logger = Logger.getLogger(BomberServer.class);

    /**
     * The BomberServer singleton.
     */
    private static BomberServer bomberServer;

    /**
     * The ServerSocket on which connections are accepted.
     */
    private ServerSocket srvSocket;

    /**
     * The sessions currently running on this on this server. key: session name,
     * value: corresponding session object
     */
    private HashMap<String, ServerGameSession> gameSessions = new HashMap<String, ServerGameSession>();

    /**
     * Contains all the clients who are currently in the global lobby.
     */
    private Vector<ClientInfo> globalClients = new Vector<ClientInfo>();

    /**
     * Contains all the clients who are currently connected to the Server.
     */
    private Vector<ClientInfo> allClients = new Vector<ClientInfo>();

    private static int port = Constants.DEFAULT_SERVER_PORT;

    private ServerGameSession newSession;

    /**
     * Private constructor. Creates a new BomberServer. Use the
     * getInstance-method to obtain the BomberServer singleton.
     */
    private BomberServer() {
    }

    private void startDB();

    /**
     * Main method. One optional parameter may be specified, which will be
     * interpreted as the port number the server accepts client connections on.
     *
     * @param args
     */
    public static void main(String[] args);

    /**
     * Accepts incoming client connections.
     */
    public void waitForClients();

    /**
     * Creates a new GameSession.
     *
     * @param name
     * @param totalRounds
     * @return The newly created GameSession-object, null if the session name
     *         was already taken
     */
    public ServerGameSession createSession(String name, List<String> maps, ImageIcon mapPreview, int nrOfPlayers, int totalRounds);

    /**
     * Creates a SessionListMsg from all open sessions and
     * sends it to all clients.
     */
    private void broadcastSessionList();

    /**
     * Sends the message to all clients except the original sender itself.
     *
     * @param msg
     *            The message to be sent.
     * @param sender
     *            The original sender of the msg.
     */
    public void multicastMsg(Message msg, ClientInfo sender);

    /**
     * Broadcasts a message to all connected clients.
     *
     * @param msg
     *            The message to be sent.
     */
    public void broadcastMsg(Message msg);

    /**
     * this will exit the server
     *
     * @author Bj�rn
     */
    public void stopServer();

    // shutdown database
    public static void closeDB();

    private static jdbcDataSource setupDataSource();

    /**
     * Removes the client whose ClientInfo object is passed as a parameter from
     * the global area. As a result this client will no longer receive global
     * messages.
     *
     * @param clientInfo
     */
    public void removeClientFromGlobal(ClientInfo clientInfo);

    public void addClientToGlobal(ClientInfo clientInfo);

    /**
     * Removes a client
     *
     * @param clientInfo
     */
    public void removeClient(ClientInfo clientInfo);

    public void addClient(ClientInfo clientInfo);

    /**
     * Static factory method.
     *
     * @return The BomberServer Singleton
     */
    public static BomberServer getInstance();

    public Collection<ServerGameSession> getGameSessions();

    public ServerGameSession getGameSession(String name);

    public void removeSession(String name);

    public Vector<ClientInfo> getClients();
}
","// BomberServerTest.java
package server;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.GlobalServerMsg;
import messages.global.SessionDetailsMsg;
import messages.global.SessionListMsg;
import org.apache.log4j.Logger;
import org.hsqldb.Server;
import org.hsqldb.jdbc.jdbcDataSource;
import common.Constants;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberServer}.
* It contains ten unit test cases for the {@link BomberServer#getInstance()} method.
*/
class BomberServerTest {","// BomberServerTest.java
package server;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.GlobalServerMsg;
import messages.global.SessionDetailsMsg;
import messages.global.SessionListMsg;
import org.apache.log4j.Logger;
import org.hsqldb.Server;
import org.hsqldb.jdbc.jdbcDataSource;
import common.Constants;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberServer}.
* It contains ten unit test cases for the {@link BomberServer#getInstance()} method.
*/
class BomberServerTest {

	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It tests if the method returns a {@link BomberServer} object.
	*/
	@Test
	void testGetInstance() {
		BomberServer bomberServer = BomberServer.getInstance();
		assertNotNull(bomberServer);
	}
	
	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It tests if the method returns the same {@link BomberServer} object.
	*/
	@Test
	void testGetInstance2() {
		BomberServer bomberServer = BomberServer.getInstance();
		BomberServer bomberServer2 = BomberServer.getInstance();
		assertEquals(bomberServer, bomberServer2);
	}
	
	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It tests if the method returns a {@link BomberServer} object.
	*/
	@Test
	void testGetInstance3() {
		BomberServer bomberServer = BomberServer.getInstance();
		assertNotNull(bomberServer);
	}
	
	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It tests if the method returns a {@link BomberServer} object.
	*/
	@Test
	void testGetInstance4() {
		BomberServer bomberServer = BomberServer.getInstance();
		assertNotNull(bomberServer);
	}
	
	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It tests if the method returns a {@link BomberServer} object.
	*/
	@Test
	void testGetInstance5() {
		BomberServer bomberServer = BomberServer.getInstance();
		assertNotNull(bomberServer);
	}
	
	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It tests if the method returns a {@link BomberServer} object.
	*/
	@Test
	void testGetInstance6() {
		BomberServer bomberServer = BomberServer.getInstance();
		assertNotNull(bomberServer);
	}
	
	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It tests if the method returns a {@link BomberServer} object.
	*/
	@Test
	void testGetInstance7() {
		BomberServer bomberServer = BomberServer.getInstance();
		assertNotNull(bomberServer);
	}
	
	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It tests if the method returns a {@link BomberServer} object.
	*/
	@Test
	void testGetInstance8() {
		BomberServer bomberServer = BomberServer.getInstance();
		assertNotNull(bomberServer);
	}
	
	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It tests if the method returns a {@link BomberServer} object.
	*/
	@Test
	void testGetInstance9() {
		BomberServer bomberServer = BomberServer.getInstance();
		assertNotNull(bomberServer);
	}
	
	/**
	* Test case for {@link BomberServer#getInstance()} method.
	* It tests if the method returns a {@link BomberServer} object.
	*/
	@Test
	void testGetInstance10() {
		BomberServer bomberServer = BomberServer.getInstance();
		assertNotNull(bomberServer);
	}
}

// ClientInfo.java
package server;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import messages.Message;
import messages.global.GlobalServerMsg;
import messages.global.SessionDetailsMsg;
import messages.global.SessionListMsg;
import org.apache.log4j.Logger;
import common.Constants;

/**
 * This class represents a client connected to the server. It contains the
 * client's socket and the streams to communicate with the client.
 *
 * @author Steffen, Bj�rn, Daniel
 */
public class ClientInfo {

    private static final Logger logger = Logger.getLogger(ClientInfo.class);

    /**
     * The socket on which the client is connected.
     */
    private Socket socket;

    /**
     * The stream to send messages to the client.
     */
    private ObjectOutputStream out;

    /**
     * The stream to receive messages from the client.
     */
    private ObjectInputStream in;

    /**
     * The name of the client.
     */
    private String name;

    /**
     * The session the client is currently in.
     */
    private ServerGameSession session;

    /**
     * The thread that listens for incoming messages from the client.
     */
    private ClientListener clientListener;

    /**
     * Creates a new ClientInfo object.
     *
     * @param socket
     *            The socket on which the client is connected.
     * @param name
     *            The name of the client.
     * @throws IOException
     */
    public ClientInfo(Socket socket, String name) throws IOException {
        this.socket = socket;
        this.name = name;
        out = new ObjectOutputStream(socket.getOutputStream());
        in = new ObjectInputStream(socket.getInputStream());
        clientListener = new ClientListener(this);
        clientListener.start();
    }

    /**
     * Sends a message to the client.
     *
     * @param msg
     *            The message to be sent.
     */
    public void sendMsg(Message msg);

    /**
     * Returns the name of the client.
     *
     * @return The name of the client.
     */
    public String getName();

    /**
     * Returns the session the client is currently in.
     *
     * @return The session the client is currently in.
     */
    public ServerGameSession getSession();

    /**
     * Sets the session the client is currently in.
     *
     * @param session
     *            The session the client is currently in.
     */
    public void setSession(ServerGameSession session);

    /**
     * Returns the socket on which the client is connected.
     *
     * @return The socket on which the client is connected.
     */
    public Socket getSocket();

    /**
     * Returns the stream to send messages to the client.
     *
     * @return The stream to send messages to the client.
     */
    public ObjectOutputStream getOut();

    /**
     * Returns the stream to receive messages from the client.
     *
     * @return The stream to receive messages from the client.
     */
    public ObjectInputStream getIn();

    /**
     * Returns the thread that listens for incoming messages from the client.
     *
     * @return The thread that listens for incoming messages from the client.
     */
    public ClientListener getClientListener();

    /**
     * Closes the socket and the streams.
     */
    public void close();
}

// ClientListener.java
package server;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import messages.Message;
import messages.global.GlobalServerMsg;
import messages.global.SessionDetailsMsg;
import messages.global.SessionListMsg;
import org.apache.log4j.Logger;
import common.Constants;

/**
 * This class represents a thread that listens for incoming messages from a
 * client.
 *
 * @author Steffen, Bj�rn, Daniel
 */
public class ClientListener extends Thread {

    private static final Logger logger = Logger.getLogger(ClientListener.class);

    /**
     * The client this thread listens for.
     */
    private ClientInfo clientInfo;

    /**
     * Creates a new ClientListener object.
     *
     * @param clientInfo
     *            The client this thread listens for.
     */
    public ClientListener(ClientInfo clientInfo);

    /**
     * Listens for incoming messages from the client.
     */
    public void run();

    /**
     * Returns the client this thread listens for.
     *
     * @return The client this thread listens for.
     */
    public ClientInfo getClientInfo();
}

// ServerGameSession.java
package server;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.GlobalServerMsg;
import messages.global.SessionDetailsMsg;
import messages.global.SessionListMsg;
import org.apache.log4j.Logger;
import common.Constants;

/**
 * This class represents a game session. It contains the clients that are
 * currently in the session and the session's name.
 *
 * @author Steffen, Bj�rn, Daniel
 */
public class ServerGameSession {

    private static final Logger logger = Logger.getLogger(ServerGameSession.class);

    /**
     * The name of the session.
     */
    private String name;

    /**
     * The clients that are currently in the session.
     */
    private Vector<ClientInfo> clients = new Vector<ClientInfo>();

    /**
     * The maps that are available in this session.
     */
    private List<String> maps;

    /**
     * The preview image of the map.
     */
    private ImageIcon mapPreview;

    /**
     * The number of players that are needed to start the game.
     */
    private int nrOfPlayers;

    /**
     * The number of rounds that are played in this session.
     */
    private int totalRounds;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsPlayed;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsWon;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLost;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsDrawn;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLeft;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsPlayed;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsWon;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLost;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsDrawn;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLeft;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsPlayed;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsWon;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLost;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsDrawn;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLeft;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsPlayed;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsWon;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLost;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsDrawn;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLeft;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsPlayed;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsWon;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLost;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsDrawn;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLeft;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsPlayed;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsWon;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLost;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsDrawn;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLeft;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsPlayed;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsWon;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLost;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsDrawn;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLeft;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsPlayed;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsWon;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLost;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsDrawn;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLeft;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsPlayed;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsWon;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLost;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsDrawn;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLeft;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsPlayed;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsWon;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLost;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsDrawn;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLeft;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsPlayed;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsWon;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLost;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsDrawn;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsLeft;

    /**
     * The number of rounds that have already been played.
     */
    private int roundsPlayed;

"
cmpl-6xGr4KHzqB4aGrZcJDKq0t8cCu8En,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/server/ExplosionBounds.java,113.77545404434204,length,"// ExplosionBounds.java
package server;

import java.awt.Point;

/**
 * This class is used by the server to define the bounds of a bomb explosion.
 * It contains four integer fields indicating the min/max pixel value
 * in the given direction that is affected by the explosion. It further offers
 * a method to test if a given point lies within the defined bounds.
 *
 * @author Steffen
 */
public class ExplosionBounds {

    private int up;

    private int down;

    private int right;

    private int left;

    /**
     * Creates a new ExplosionBounds object. The four integer parameters define
     * the min/max pixel value in the given direction.
     *
     * @param up
     * @param down
     * @param right
     * @param left
     */
    public ExplosionBounds(int up, int down, int right, int left) {
    }

    public int getUp();

    public int getDown();

    public int getRight();

    public int getLeft();

    /**
     * Checks whether the given point lies within the bounds of the explosion.
     *
     * @param p The Point to be checked.
     * @return True if p lies within the bounds, false if not.
     */
    public boolean contain(Point p);
}
","// ExplosionBoundsTest.java
package server;

import java.awt.Point;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExplosionBounds}.
* It contains ten unit test cases for the {@link ExplosionBounds#contain(Point)} method.
*/
class ExplosionBoundsTest {","// ExplosionBoundsTest.java
package server;

import java.awt.Point;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExplosionBounds}.
* It contains ten unit test cases for the {@link ExplosionBounds#contain(Point)} method.
*/
class ExplosionBoundsTest {

	@Test
	void testContain() {
		ExplosionBounds bounds = new ExplosionBounds(0, 0, 0, 0);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertFalse(bounds.contain(new Point(1, 0)));
		assertFalse(bounds.contain(new Point(0, 1)));
		assertFalse(bounds.contain(new Point(-1, 0)));
		assertFalse(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(0, 0, 0, 1);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertTrue(bounds.contain(new Point(1, 0)));
		assertFalse(bounds.contain(new Point(0, 1)));
		assertFalse(bounds.contain(new Point(-1, 0)));
		assertFalse(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(0, 0, 1, 0);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertFalse(bounds.contain(new Point(1, 0)));
		assertTrue(bounds.contain(new Point(0, 1)));
		assertFalse(bounds.contain(new Point(-1, 0)));
		assertFalse(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(0, 0, 1, 1);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertTrue(bounds.contain(new Point(1, 0)));
		assertTrue(bounds.contain(new Point(0, 1)));
		assertFalse(bounds.contain(new Point(-1, 0)));
		assertFalse(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(0, 1, 0, 0);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertFalse(bounds.contain(new Point(1, 0)));
		assertFalse(bounds.contain(new Point(0, 1)));
		assertFalse(bounds.contain(new Point(-1, 0)));
		assertTrue(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(0, 1, 0, 1);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertTrue(bounds.contain(new Point(1, 0)));
		assertFalse(bounds.contain(new Point(0, 1)));
		assertFalse(bounds.contain(new Point(-1, 0)));
		assertTrue(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(0, 1, 1, 0);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertFalse(bounds.contain(new Point(1, 0)));
		assertTrue(bounds.contain(new Point(0, 1)));
		assertFalse(bounds.contain(new Point(-1, 0)));
		assertTrue(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(0, 1, 1, 1);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertTrue(bounds.contain(new Point(1, 0)));
		assertTrue(bounds.contain(new Point(0, 1)));
		assertFalse(bounds.contain(new Point(-1, 0)));
		assertTrue(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(1, 0, 0, 0);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertFalse(bounds.contain(new Point(1, 0)));
		assertFalse(bounds.contain(new Point(0, 1)));
		assertTrue(bounds.contain(new Point(-1, 0)));
		assertFalse(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(1, 0, 0, 1);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertTrue(bounds.contain(new Point(1, 0)));
		assertFalse(bounds.contain(new Point(0, 1)));
		assertTrue(bounds.contain(new Point(-1, 0)));
		assertFalse(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(1, 0, 1, 0);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertFalse(bounds.contain(new Point(1, 0)));
		assertTrue(bounds.contain(new Point(0, 1)));
		assertTrue(bounds.contain(new Point(-1, 0)));
		assertFalse(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(1, 0, 1, 1);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertTrue(bounds.contain(new Point(1, 0)));
		assertTrue(bounds.contain(new Point(0, 1)));
		assertTrue(bounds.contain(new Point(-1, 0)));
		assertFalse(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(1, 1, 0, 0);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertFalse(bounds.contain(new Point(1, 0)));
		assertFalse(bounds.contain(new Point(0, 1)));
		assertTrue(bounds.contain(new Point(-1, 0)));
		assertTrue(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(1, 1, 0, 1);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertTrue(bounds.contain(new Point(1, 0)));
		assertFalse(bounds.contain(new Point(0, 1)));
		assertTrue(bounds.contain(new Point(-1, 0)));
		assertTrue(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(1, 1, 1, 0);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertFalse(bounds.contain(new Point(1, 0)));
		assertTrue(bounds.contain(new Point(0, 1)));
		assertTrue(bounds.contain(new Point(-1, 0)));
		assertTrue(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(1, 1, 1, 1);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertTrue(bounds.contain(new Point(1, 0)));
		assertTrue(bounds.contain(new Point(0, 1)));
		assertTrue(bounds.contain(new Point(-1, 0)));
		assertTrue(bounds.contain(new Point(0, -1)));
	}
}

// ExplosionBoundsTest.java
package server;

import java.awt.Point;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExplosionBounds}.
* It contains ten unit test cases for the {@link ExplosionBounds#contain(Point)} method.
*/
class ExplosionBoundsTest {
		
	@Test
	void testContain() {
		ExplosionBounds bounds = new ExplosionBounds(0, 0, 0, 0);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertFalse(bounds.contain(new Point(1, 0)));
		assertFalse(bounds.contain(new Point(0, 1)));
		assertFalse(bounds.contain(new Point(-1, 0)));
		assertFalse(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(0, 0, 0, 1);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertTrue(bounds.contain(new Point(1, 0)));
		assertFalse(bounds.contain(new Point(0, 1)));
		assertFalse(bounds.contain(new Point(-1, 0)));
		assertFalse(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(0, 0, 1, 0);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertFalse(bounds.contain(new Point(1, 0)));
		assertTrue(bounds.contain(new Point(0, 1)));
		assertFalse(bounds.contain(new Point(-1, 0)));
		assertFalse(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(0, 0, 1, 1);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertTrue(bounds.contain(new Point(1, 0)));
		assertTrue(bounds.contain(new Point(0, 1)));
		assertFalse(bounds.contain(new Point(-1, 0)));
		assertFalse(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(0, 1, 0, 0);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertFalse(bounds.contain(new Point(1, 0)));
		assertFalse(bounds.contain(new Point(0, 1)));
		assertFalse(bounds.contain(new Point(-1, 0)));
		assertTrue(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(0, 1, 0, 1);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertTrue(bounds.contain(new Point(1, 0)));
		assertFalse(bounds.contain(new Point(0, 1)));
		assertFalse(bounds.contain(new Point(-1, 0)));
		assertTrue(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(0, 1, 1, 0);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertFalse(bounds.contain(new Point(1, 0)));
		assertTrue(bounds.contain(new Point(0, 1)));
		assertFalse(bounds.contain(new Point(-1, 0)));
		assertTrue(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(0, 1, 1, 1);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertTrue(bounds.contain(new Point(1, 0)));
		assertTrue(bounds.contain(new Point(0, 1)));
		assertFalse(bounds.contain(new Point(-1, 0)));
		assertTrue(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(1, 0, 0, 0);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertFalse(bounds.contain(new Point(1, 0)));
		assertFalse(bounds.contain(new Point(0, 1)));
		assertTrue(bounds.contain(new Point(-1, 0)));
		assertFalse(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(1, 0, 0, 1);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertTrue(bounds.contain(new Point(1, 0)));
		assertFalse(bounds.contain(new Point(0, 1)));
		assertTrue(bounds.contain(new Point(-1, 0)));
		assertFalse(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(1, 0, 1, 0);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertFalse(bounds.contain(new Point(1, 0)));
		assertTrue(bounds.contain(new Point(0, 1)));
		assertTrue(bounds.contain(new Point(-1, 0)));
		assertFalse(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(1, 0, 1, 1);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertTrue(bounds.contain(new Point(1, 0)));
		assertTrue(bounds.contain(new Point(0, 1)));
		assertTrue(bounds.contain(new Point(-1, 0)));
		assertFalse(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(1, 1, 0, 0);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertFalse(bounds.contain(new Point(1, 0)));
		assertFalse(bounds.contain(new Point(0, 1)));
		assertTrue(bounds.contain(new Point(-1, 0)));
		assertTrue(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(1, 1, 0, 1);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertTrue(bounds.contain(new Point(1, 0)));
		assertFalse(bounds.contain(new Point(0, 1)));
		assertTrue(bounds.contain(new Point(-1, 0)));
		assertTrue(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(1, 1, 1, 0);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertFalse(bounds.contain(new Point(1, 0)));
		assertTrue(bounds.contain(new Point(0, 1)));
		assertTrue(bounds.contain(new Point(-1, 0)));
		assertTrue(bounds.contain(new Point(0, -1)));
		
		bounds = new ExplosionBounds(1, 1, 1, 1);
		assertTrue(bounds.contain(new Point(0, 0)));
		assertTrue(bounds.cont"
cmpl-6xGsuAvPHKo0Ljv7CJkt98NXbTZDh,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/server/ServerBomb.java,124.08985233306885,length,"// ServerBomb.java
package server;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.Collection;
import java.util.Vector;
import messages.round.BombExplodedMsg;
import org.apache.log4j.Logger;
import common.Bomb;
import common.Constants;
import common.GameObject;
import common.Player;
import common.PowerUp;
import common.Tile;
import db.DBException;
import db.DBGameUser;
import db.DBServiceFactory;

/**
 * The Bomb Object of the Server. This Bomb ticks some times and then exploded.
 * Then it detects the player and the tile hits.
 *
 * @author Bj�rn, Steffen, Daniel
 */
public class ServerBomb extends Bomb {

    /**
     * The negated number of frames rendered after an explosion
     */
    private static final int POST_EXPLOSION_FRAMES = -40;

    private static final Logger logger = Logger.getLogger(ServerBomb.class);

    private int tickTime = 2500;

    private int tickFrames = tickTime / 16;

    private ServerGameSession session;

    private boolean hasAlreadyExploded;

    private ExplosionBounds bounds;

    private boolean explodesrightnow = false;

    public ServerBomb(Point position, ServerGameSession session) {
    }

    @Override
    protected synchronized void move();

    @Override
    public synchronized void updateMovement(Point targetPosition);

    /**
     * Handles the explosion and the hit-detection of the bomb
     *
     * @return
     */
    public void explode(Collection<GameObject> gameObjects);

    private void determineHits(Collection<GameObject> gameObjects);

    private ExplosionBounds getExplosionBounds(Collection<GameObject> gameObjects);

    /**
     * Returns the vertical hitbox of the bomb
     *
     * @return
     */
    private Rectangle getVerticalHitBox();

    /**
     * Returns the horizontal hitbox of the bomb
     *
     * @return
     */
    private Rectangle getHorizontalHitBox();

    @Override
    public void updateWithCollisionCheck(Collection<GameObject> gameObjects);

    /**
     * handles the tick of the bomb
     *
     * @return
     */
    public boolean tick();

    /**
     * check if a gameObject is hit by the bomb
     *
     * @param gameObject
     * @return
     */
    private boolean checkHit(GameObject gameObject);
}
","// ServerBombTest.java
package server;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.Collection;
import java.util.Vector;
import messages.round.BombExplodedMsg;
import org.apache.log4j.Logger;
import common.Bomb;
import common.Constants;
import common.GameObject;
import common.Player;
import common.PowerUp;
import common.Tile;
import db.DBException;
import db.DBGameUser;
import db.DBServiceFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ServerBomb}.
* It contains ten unit test cases for the {@link ServerBomb#tick()} method.
*/
class ServerBombTest {","// ServerBombTest.java
package server;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.Collection;
import java.util.Vector;
import messages.round.BombExplodedMsg;
import org.apache.log4j.Logger;
import common.Bomb;
import common.Constants;
import common.GameObject;
import common.Player;
import common.PowerUp;
import common.Tile;
import db.DBException;
import db.DBGameUser;
import db.DBServiceFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ServerBomb}.
* It contains ten unit test cases for the {@link ServerBomb#tick()} method.
*/
class ServerBombTest {

		/**
		* Test case 1 for {@link ServerBomb#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick1() {
				ServerBomb bomb = new ServerBomb(new Point(0, 0), null);
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
		
		/**
		* Test case 2 for {@link ServerBomb#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick2() {
				ServerBomb bomb = new ServerBomb(new Point(0, 0), null);
				bomb.tick();
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
		
		/**
		* Test case 3 for {@link ServerBomb#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick3() {
				ServerBomb bomb = new ServerBomb(new Point(0, 0), null);
				bomb.tick();
				bomb.tick();
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
		
		/**
		* Test case 4 for {@link ServerBomb#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick4() {
				ServerBomb bomb = new ServerBomb(new Point(0, 0), null);
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
		
		/**
		* Test case 5 for {@link ServerBomb#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick5() {
				ServerBomb bomb = new ServerBomb(new Point(0, 0), null);
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
		
		/**
		* Test case 6 for {@link ServerBomb#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick6() {
				ServerBomb bomb = new ServerBomb(new Point(0, 0), null);
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
		
		/**
		* Test case 7 for {@link ServerBomb#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick7() {
				ServerBomb bomb = new ServerBomb(new Point(0, 0), null);
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
		
		/**
		* Test case 8 for {@link ServerBomb#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick8() {
				ServerBomb bomb = new ServerBomb(new Point(0, 0), null);
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
		
		/**
		* Test case 9 for {@link ServerBomb#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick9() {
				ServerBomb bomb = new ServerBomb(new Point(0, 0), null);
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
		
		/**
		* Test case 10 for {@link ServerBomb#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick10() {
				ServerBomb bomb = new ServerBomb(new Point(0, 0), null);
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
}

// ServerGameSession.java
package server;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.Collection;
import java.util.Vector;
import messages.round.BombExplodedMsg;
import org.apache.log4j.Logger;
import common.Bomb;
import common.Constants;
import common.GameObject;
import common.Player;
import common.PowerUp;
import common.Tile;
import db.DBException;
import db.DBGameUser;
import db.DBServiceFactory;

/**
 * The GameSession of the Server. This class contains the game logic.
 *
 * @author Bj�rn, Steffen, Daniel
 */
public class ServerGameSession {

    /**
     * The negated number of frames rendered after an explosion
     */
    private static final int POST_EXPLOSION_FRAMES = -40;

    private static final Logger logger = Logger.getLogger(ServerGameSession.class);

    private int tickTime = 2500;

    private int tickFrames = tickTime / 16;

    private ServerGameSession session;

    private boolean hasAlreadyExploded;

    private ExplosionBounds bounds;

    private boolean explodesrightnow = false;

    public ServerGameSession(Point position, ServerGameSession session) {
    }

    @Override
    protected synchronized void move();

    @Override
    public synchronized void updateMovement(Point targetPosition);

    /**
     * Handles the explosion and the hit-detection of the bomb
     *
     * @return
     */
    public void explode(Collection<GameObject> gameObjects);

    private void determineHits(Collection<GameObject> gameObjects);

    private ExplosionBounds getExplosionBounds(Collection<GameObject> gameObjects);

    /**
     * Returns the vertical hitbox of the bomb
     *
     * @return
     */
    private Rectangle getVerticalHitBox();

    /**
     * Returns the horizontal hitbox of the bomb
     *
     * @return
     */
    private Rectangle getHorizontalHitBox();

    @Override
    public void updateWithCollisionCheck(Collection<GameObject> gameObjects);

    /**
     * handles the tick of the bomb
     *
     * @return
     */
    public boolean tick();

    /**
     * check if a gameObject is hit by the bomb
     *
     * @param gameObject
     * @return
     */
    private boolean checkHit(GameObject gameObject);
}

// ServerGameSessionTest.java
package server;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.Collection;
import java.util.Vector;
import messages.round.BombExplodedMsg;
import org.apache.log4j.Logger;
import common.Bomb;
import common.Constants;
import common.GameObject;
import common.Player;
import common.PowerUp;
import common.Tile;
import db.DBException;
import db.DBGameUser;
import db.DBServiceFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ServerGameSession}.
* It contains ten unit test cases for the {@link ServerGameSession#tick()} method.
*/
class ServerGameSessionTest {
		
		/**
		* Test case 1 for {@link ServerGameSession#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick1() {
				ServerGameSession bomb = new ServerGameSession(new Point(0, 0), null);
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
		
		/**
		* Test case 2 for {@link ServerGameSession#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick2() {
				ServerGameSession bomb = new ServerGameSession(new Point(0, 0), null);
				bomb.tick();
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
		
		/**
		* Test case 3 for {@link ServerGameSession#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick3() {
				ServerGameSession bomb = new ServerGameSession(new Point(0, 0), null);
				bomb.tick();
				bomb.tick();
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
		
		/**
		* Test case 4 for {@link ServerGameSession#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick4() {
				ServerGameSession bomb = new ServerGameSession(new Point(0, 0), null);
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
		
		/**
		* Test case 5 for {@link ServerGameSession#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick5() {
				ServerGameSession bomb = new ServerGameSession(new Point(0, 0), null);
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
		
		/**
		* Test case 6 for {@link ServerGameSession#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick6() {
				ServerGameSession bomb = new ServerGameSession(new Point(0, 0), null);
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
		
		/**
		* Test case 7 for {@link ServerGameSession#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick7() {
				ServerGameSession bomb = new ServerGameSession(new Point(0, 0), null);
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
		
		/**
		* Test case 8 for {@link ServerGameSession#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick8() {
				ServerGameSession bomb = new ServerGameSession(new Point(0, 0), null);
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
		
		/**
		* Test case 9 for {@link ServerGameSession#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick9() {
				ServerGameSession bomb = new ServerGameSession(new Point(0, 0), null);
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
		
		/**
		* Test case 10 for {@link ServerGameSession#tick()}.
		* The test case checks if the bomb explodes after the tick time.
		*/
		@Test
		public void testTick10() {
				ServerGameSession bomb = new ServerGameSession(new Point(0, 0), null);
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				bomb.tick();
				assertTrue(bomb.isExploded());
		}
}

// ServerGameUser.java
package server;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.Collection;
import java.util.Vector;
import messages.round.BombExplodedMsg;
import org.apache.log4j.Logger;
import common.Bomb;
import common.Constants;
import common.GameObject;
import common.Player;
import common.PowerUp;
import common.Tile;
import db.DBException;
import db.DBGameUser;
import db.DBServiceFactory;

/**
 * The GameUser of the Server."
cmpl-6xGuu2CXmGi3eWtHeKONI4NGeOd4A,/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/server/StopServer.java,106.91995096206665,length,"// StopServer.java
package server;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import messages.Message;
import messages.global.StopServerMsg;

/**
 * Sends a Message to the Server, that he should closed
 *
 * @author Bj�rn
 */
public class StopServer {

    private ObjectOutputStream out;

    private Socket server;

    private String serverName = ""193.196.141.182"";

    private int serverPort = 6666;

    /**
     * sends a message
     *
     * @param msg
     */
    public void sendMsg(Message msg);

    /**
     * Connect to the Server
     */
    public boolean connectToSrv();

    /**
     * Connect to the server, and send the message
     *
     * @param stop
     */
    public void callingStopServer(StopServer stop);

    /**
     * @param args
     */
    public static void main(String[] args);
}
","// StopServerTest.java
package server;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import messages.Message;
import messages.global.StopServerMsg;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StopServer}.
* It contains ten unit test cases for the {@link StopServer#connectToSrv()} method.
*/
class StopServerTest {","// StopServerTest.java
package server;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import messages.Message;
import messages.global.StopServerMsg;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StopServer}.
* It contains ten unit test cases for the {@link StopServer#connectToSrv()} method.
*/
class StopServerTest {

	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv2() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv3() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv4() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv5() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv6() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv7() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv8() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv9() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv10() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
}

// StopServer.java
package server;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import messages.Message;
import messages.global.StopServerMsg;

/**
 * Sends a Message to the Server, that he should closed
 *
 * @author Bj�rn
 */
public class StopServer {

    private ObjectOutputStream out;

    private Socket server;

    private String serverName = ""193.196.141.182"";

    private int serverPort = 6666;

    /**
     * sends a message
     *
     * @param msg
     */
    public void sendMsg(Message msg) {
        try {
            out.writeObject(msg);
            out.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Connect to the Server
     */
    public boolean connectToSrv() {
        try {
            server = new Socket(serverName, serverPort);
            out = new ObjectOutputStream(server.getOutputStream());
            return true;
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Connect to the server, and send the message
     *
     * @param stop
     */
    public void callingStopServer(StopServer stop) {
        if (stop.connectToSrv()) {
            stop.sendMsg(new StopServerMsg());
        }
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        StopServer stop = new StopServer();
        stop.callingStopServer(stop);
    }
}

// StopServerTest.java
package server;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import messages.Message;
import messages.global.StopServerMsg;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StopServer}.
* It contains ten unit test cases for the {@link StopServer#connectToSrv()} method.
*/
class StopServerTest {
		
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv2() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv3() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv4() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv5() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv6() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv7() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv8() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv9() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv10() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
}

// StopServer.java
package server;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import messages.Message;
import messages.global.StopServerMsg;

/**
 * Sends a Message to the Server, that he should closed
 *
 * @author Bj�rn
 */
public class StopServer {

    private ObjectOutputStream out;

    private Socket server;

    private String serverName = ""193.196.141.182"";

    private int serverPort = 6666;

    /**
     * sends a message
     *
     * @param msg
     */
    public void sendMsg(Message msg) {
        try {
            out.writeObject(msg);
            out.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Connect to the Server
     */
    public boolean connectToSrv() {
        try {
            server = new Socket(serverName, serverPort);
            out = new ObjectOutputStream(server.getOutputStream());
            return true;
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Connect to the server, and send the message
     *
     * @param stop
     */
    public void callingStopServer(StopServer stop) {
        if (stop.connectToSrv()) {
            stop.sendMsg(new StopServerMsg());
        }
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
        StopServer stop = new StopServer();
        stop.callingStopServer(stop);
    }
}

// StopServerTest.java
package server;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import messages.Message;
import messages.global.StopServerMsg;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StopServer}.
* It contains ten unit test cases for the {@link StopServer#connectToSrv()} method.
*/
class StopServerTest {
		
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv2() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv3() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv4() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv5() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv6() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv7() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv8() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv9() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
	
	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * It tests if the connection to the server is established.
	 */
	@Test
	void testConnectToSrv10() {
		StopServer stop = new StopServer();
		assertTrue(stop.connectToSrv());
	}
}

// StopServer.java
package server;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import messages.Message;
import messages.global.StopServerMsg;

/**
 * Sends a Message to the Server, that he should closed
 *
 * @author Bj�rn
 */
public class StopServer {

    private ObjectOutputStream out;

    private Socket server;

    private String serverName = ""193.196.141.182"";

    private int serverPort = 6666;

    /**
     * sends a message
     *
     * @param msg
     */
    public void sendMsg(Message msg) {
        try {
            out.writeObject(msg);
            out.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Connect to the Server
     */
    public boolean connectToSrv() {
        try {
            server = new Socket(serverName, serverPort);
            out = new ObjectOutputStream(server.getOutputStream());
            return true;
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Connect to the server, and send the message
     *
     * @param stop
     */
    public void callingStopServer(StopServer stop) {
        if (stop.connectToS"
