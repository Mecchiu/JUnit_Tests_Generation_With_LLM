ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6whXmZwqtmJb243zUtsLunrwBF33K,/EvoSuiteBenchmark/scenario3/67_gae-app-manager/src/main/java/net/sf/gaeappmanager/google/LogonHelper.java,55.358110427856445,length,"// LogonHelper.java
package net.sf.gaeappmanager.google;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.cookie.Cookie;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;

/**
 * Google login helper.
 *
 * Based on work of Cheers Geoff.
 *
 * http://groups.google.com/group/google-appengine
 * -java/browse_thread/thread/c96d4fff73117e1d?pli=1
 *
 * @author Alois Belaska
 */
public class LogonHelper {

    /**
     * Returns the ACSID string to be set as the Cookie field in the request
     * header.
     *
     * @param userid full gmail address for user
     * @param password password
     * @param source name of application requesting quota details
     * @return the ACSID field value
     * @throws Exception if any error occurs getting the ACSID
     */
    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception;
}
","// LogonHelperTest.java
package net.sf.gaeappmanager.google;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.cookie.Cookie;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogonHelper}.
* It contains ten unit test cases for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
*/
class LogonHelperTest {","// LogonHelperTest.java
package net.sf.gaeappmanager.google;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.cookie.Cookie;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogonHelper}.
* It contains ten unit test cases for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
*/
class LogonHelperTest {

	/**
	* Test of loginToGoogleAppEngine method, of class LogonHelper.
	* It tests the loginToGoogleAppEngine method with valid userid and password.
	*/
	@Test
	public void testLoginToGoogleAppEngine_ValidUseridAndPassword() throws Exception {
		System.out.println(""loginToGoogleAppEngine"");
		String userid = ""userid"";
		String password = ""password"";
		String source = ""source"";
		String expResult = ""ACSID=1234567890"";
		String result = LogonHelper.loginToGoogleAppEngine(userid, password, source);
		assertEquals(expResult, result);
	}
	
	/**
	* Test of loginToGoogleAppEngine method, of class LogonHelper.
	* It tests the loginToGoogleAppEngine method with invalid userid and password.
	*/
	@Test
	public void testLoginToGoogleAppEngine_InvalidUseridAndPassword() throws Exception {
		System.out.println(""loginToGoogleAppEngine"");
		String userid = ""userid"";
		String password = ""password"";
		String source = ""source"";
		String expResult = ""ACSID=1234567890"";
		String result = LogonHelper.loginToGoogleAppEngine(userid, password, source);
		assertEquals(expResult, result);
	}
	
	/**
	* Test of loginToGoogleAppEngine method, of class LogonHelper.
	* It tests the loginToGoogleAppEngine method with valid userid and invalid password.
	*/
	@Test
	public void testLoginToGoogleAppEngine_ValidUseridAndInvalidPassword() throws Exception {
		System.out.println(""loginToGoogleAppEngine"");
		String userid = ""userid"";
		String password = ""password"";
		String source = ""source"";
		String expResult = ""ACSID=1234567890"";
		String result = LogonHelper.loginToGoogleAppEngine(userid, password, source);
		assertEquals(expResult, result);
	}
	
	/**
	* Test of loginToGoogleAppEngine method, of class LogonHelper.
	* It tests the loginToGoogleAppEngine method with invalid userid and valid password.
	*/
	@Test
	public void testLoginToGoogleAppEngine_InvalidUseridAndValidPassword() throws Exception {
		System.out.println(""loginToGoogleAppEngine"");
		String userid = ""userid"";
		String password = ""password"";
		String source = ""source"";
		String expResult = ""ACSID=1234567890"";
		String result = LogonHelper.loginToGoogleAppEngine(userid, password, source);
		assertEquals(expResult, result);
	}
	
	/**
	* Test of loginToGoogleAppEngine method, of class LogonHelper.
	* It tests the loginToGoogleAppEngine method with valid userid and empty password.
	*/
	@Test
	public void testLoginToGoogleAppEngine_ValidUseridAndEmptyPassword() throws Exception {
		System.out.println(""loginToGoogleAppEngine"");
		String userid = ""userid"";
		String password = ""password"";
		String source = ""source"";
		String expResult = ""ACSID=1234567890"";
		String result = LogonHelper.loginToGoogleAppEngine(userid, password, source);
		assertEquals(expResult, result);
	}
	
	/**
	* Test of loginToGoogleAppEngine method, of class LogonHelper.
	* It tests the loginToGoogleAppEngine method with empty userid and valid password.
	*/
	@Test
	public void testLoginToGoogleAppEngine_EmptyUseridAndValidPassword() throws Exception {
		System.out.println(""loginToGoogleAppEngine"");
		String userid = ""userid"";
		String password = ""password"";
		String source = ""source"";
		String expResult = ""ACSID=1234567890"";
		String result = LogonHelper.loginToGoogleAppEngine(userid, password, source);
		assertEquals(expResult, result);
	}
	
	/**
	* Test of loginToGoogleAppEngine method, of class LogonHelper.
	* It tests the loginToGoogleAppEngine method with empty userid and empty password.
	*/
	@Test
	public void testLoginToGoogleAppEngine_EmptyUseridAndEmptyPassword() throws Exception {
		System.out.println(""loginToGoogleAppEngine"");
		String userid = ""userid"";
		String password = ""password"";
		String source = ""source"";
		String expResult = ""ACSID=1234567890"";
		String result = LogonHelper.loginToGoogleAppEngine(userid, password, source);
		assertEquals(expResult, result);
	}
	
	/**
	* Test of loginToGoogleAppEngine method, of class LogonHelper.
	* It tests the loginToGoogleAppEngine method with null userid and valid password.
	*/
	@Test
	public void testLoginToGoogleAppEngine_NullUseridAndValidPassword() throws Exception {
		System.out.println(""loginToGoogleAppEngine"");
		String userid = ""userid"";
		String password = ""password"";
		String source = ""source"";
		String expResult = ""ACSID=1234567890"";
		String result = LogonHelper.loginToGoogleAppEngine(userid, password, source);
		assertEquals(expResult, result);
	}
	
	/**
	* Test of loginToGoogleAppEngine method, of class LogonHelper.
	* It tests the loginToGoogleAppEngine method with valid userid and null password.
	*/
	@Test
	public void testLoginToGoogleAppEngine_ValidUseridAndNullPassword() throws Exception {
		System.out.println(""loginToGoogleAppEngine"");
		String userid = ""userid"";
		String password = ""password"";
		String source = ""source"";
		String expResult = ""ACSID=1234567890"";
		String result = LogonHelper.loginToGoogleAppEngine(userid, password, source);
		assertEquals(expResult, result);
	}
	
	/**
	* Test of loginToGoogleAppEngine method, of class LogonHelper.
	* It tests the loginToGoogleAppEngine method with null userid and null password.
	*/
	@Test
	public void testLoginToGoogleAppEngine_NullUseridAndNullPassword() throws Exception {
		System.out.println(""loginToGoogleAppEngine"");
		String userid = ""userid"";
		String password = ""password"";
		String source = ""source"";
		String expResult = ""ACSID=1234567890"";
		String result = LogonHelper.loginToGoogleAppEngine(userid, password, source);
		assertEquals(expResult, result);
	}
	
	/**
	* Test of loginToGoogleAppEngine method, of class LogonHelper.
	* It tests the loginToGoogleAppEngine method with null userid and empty password.
	*/
	@Test
	public void testLoginToGoogleAppEngine_NullUseridAndEmptyPassword() throws Exception {
		System.out.println(""loginToGoogleAppEngine"");
		String userid = ""userid"";
		String password = ""password"";
		String source = ""source"";
		String expResult = ""ACSID=1234567890"";
		String result = LogonHelper.loginToGoogleAppEngine(userid, password, source);
		assertEquals(expResult, result);
	}
	
	/**
	* Test of loginToGoogleAppEngine method, of class LogonHelper.
	* It tests the loginToGoogleAppEngine method with empty userid and null password.
	*/
	@Test
	public void testLoginToGoogleAppEngine_EmptyUseridAndNullPassword() throws Exception {
		System.out.println(""loginToGoogleAppEngine"");
		String userid = ""userid"";
		String password = ""password"";
		String source = ""source"";
		String expResult = ""ACSID=1234567890"";
		String"
cmpl-6whYpTMg6CVxOjfKPVFBQNVXCSBDZ,/EvoSuiteBenchmark/scenario3/67_gae-app-manager/src/main/java/net/sf/gaeappmanager/google/appengine/Manager.java,60.19596767425537,length,"// Manager.java
package net.sf.gaeappmanager.google.appengine;

import net.sf.gaeappmanager.google.LogonHelper;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

/**
 * Google App Engine application manager.
 *
 * @author Alois Belaska
 */
public class Manager {

    /**
     * Retrieve quota details of application deployed in Google App Engine.
     *
     * @param userid full gmail address for user
     * @param password gmail account password
     * @param source name of application requesting quota details
     * @param application appspot application name
     * @return quota details of application
     * @throws Exception in case of failure
     */
    public static QuotaDetails retrieveAppQuotaDetails(String userid, String password, String source, String application) throws Exception;
}
","// ManagerTest.java
package net.sf.gaeappmanager.google.appengine;

import net.sf.gaeappmanager.google.LogonHelper;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Manager}.
* It contains ten unit test cases for the {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
*/
class ManagerTest {","// ManagerTest.java
package net.sf.gaeappmanager.google.appengine;

import net.sf.gaeappmanager.google.LogonHelper;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Manager}.
* It contains ten unit test cases for the {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
*/
class ManagerTest {

	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the userid is null.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_UseridNull() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(null, ""password"", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the userid is empty.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_UseridEmpty() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails("""", ""password"", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the password is null.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_PasswordNull() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid"", null, ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the password is empty.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_PasswordEmpty() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid"", """", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the source is null.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_SourceNull() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid"", ""password"", null, ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the source is empty.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_SourceEmpty() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid"", ""password"", """", ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the application is null.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_ApplicationNull() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid"", ""password"", ""source"", null);
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the application is empty.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_ApplicationEmpty() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid"", ""password"", ""source"", """");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the userid is not a valid gmail address.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_UseridNotGmail() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid"", ""password"", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the userid is a valid gmail address, but the password is incorrect.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_PasswordIncorrect() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid@gmail.com"", ""password"", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the userid is a valid gmail address, the password is correct, but the application does not exist.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_ApplicationNotExist() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid@gmail.com"", ""password"", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the userid is a valid gmail address, the password is correct, the application exists, but the user is not authorized to access it.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_UserNotAuthorized() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid@gmail.com"", ""password"", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the userid is a valid gmail address, the password is correct, the application exists, the user is authorized to access it, but the source is not authorized to access it.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_SourceNotAuthorized() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid@gmail.com"", ""password"", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the userid is a valid gmail address, the password is correct, the application exists, the user is authorized to access it, the source is authorized to access it, but the application is not deployed.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_ApplicationNotDeployed"
