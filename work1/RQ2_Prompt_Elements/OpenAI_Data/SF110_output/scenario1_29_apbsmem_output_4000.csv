ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6x9C0qfW8Plh4coyXEIElaJK4KTlF,/EvoSuiteBenchmark/scenario1/29_apbsmem/src/main/java/apbs_mem_gui/FileEditor0.java,65.93484497070312,stop,"// FileEditor.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;

public class FileEditor {

    public String[] getEnergy(String filename) {
        //returns [0] energy in kJ/mol, then [1] is in kcal/mol
        File temp = new File(filename);
        String[] energies = new String[3];
        if (!temp.exists())
            return null;
        else {
            NumberFormat formatter = new DecimalFormat(""0.####E0"");
            double finalenergy = 0;
            try {
                Scanner fScan = new Scanner(new FileInputStream(filename));
                String nextline;
                //tells whether solvated or reference
                boolean solvated = true;
                while (fScan.hasNextLine()) {
                    nextline = fScan.nextLine();
                    if (nextline.contains(""elec name solvated"")) {
                        solvated = true;
                    } else if (nextline.contains(""elec name reference"")) {
                        solvated = false;
                    } else if (nextline.contains(""Global net ELEC energy "") && solvated) {
                        //if found energy and its in solvated
                        System.out.println(nextline);
                        if (nextline.contains(""+"")) {
                            //if its time 10^positive int
                            finalenergy = toDoublePos(nextline);
                        } else {
                            //if its time 10^negative int
                            finalenergy = toDoubleNeg(nextline);
                        }
                    }
                }
            } catch (Exception e1) {
                e1.printStackTrace();
            }
            energies[0] = formatter.format(finalenergy) + "" kJ/mol"";
            energies[1] = formatter.format(finalenergy * 0.239) + "" kcal/mol"";
            energies[2] = formatter.format(finalenergy * 0.4035) + "" kT"";
            return energies;
        }
    }
}
","// FileEditorTest.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEditor}.
* It contains ten unit test cases for the {@link FileEditor#getEnergy(String)} method.
*/
class FileEditorTest {","// FileEditorTest.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEditor}.
* It contains ten unit test cases for the {@link FileEditor#getEnergy(String)} method.
*/
class FileEditorTest {

	/**
	* Test case for {@link FileEditor#getEnergy(String)} method.
	* It tests the case when the file does not exist.
	*/
	@Test
	void testGetEnergy_FileNotExist() {
		FileEditor fileEditor = new FileEditor();
		String[] result = fileEditor.getEnergy(""test.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getEnergy(String)} method.
	* It tests the case when the file is empty.
	*/
	@Test
	void testGetEnergy_FileEmpty() {
		FileEditor fileEditor = new FileEditor();
		String[] result = fileEditor.getEnergy(""test_empty.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getEnergy(String)} method.
	* It tests the case when the file does not contain the energy.
	*/
	@Test
	void testGetEnergy_FileNoEnergy() {
		FileEditor fileEditor = new FileEditor();
		String[] result = fileEditor.getEnergy(""test_no_energy.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getEnergy(String)} method.
	* It tests the case when the file contains the energy in the solvated section.
	*/
	@Test
	void testGetEnergy_FileSolvated() {
		FileEditor fileEditor = new FileEditor();
		String[] result = fileEditor.getEnergy(""test_solvated.txt"");
		assertEquals(""-1.0E-01 kJ/mol"", result[0]);
		assertEquals(""-2.39E-02 kcal/mol"", result[1]);
		assertEquals(""-4.035E-02 kT"", result[2]);
	}
	
	/**
	* Test case for {@link FileEditor#getEnergy(String)} method.
	* It tests the case when the file contains the energy in the reference section.
	*/
	@Test
	void testGetEnergy_FileReference() {
		FileEditor fileEditor = new FileEditor();
		String[] result = fileEditor.getEnergy(""test_reference.txt"");
		assertEquals(""-1.0E-01 kJ/mol"", result[0]);
		assertEquals(""-2.39E-02 kcal/mol"", result[1]);
		assertEquals(""-4.035E-02 kT"", result[2]);
	}
	
	/**
	* Test case for {@link FileEditor#getEnergy(String)} method.
	* It tests the case when the file contains the energy in the solvated section and the reference section.
	*/
	@Test
	void testGetEnergy_FileSolvatedAndReference() {
		FileEditor fileEditor = new FileEditor();
		String[] result = fileEditor.getEnergy(""test_solvated_and_reference.txt"");
		assertEquals(""-1.0E-01 kJ/mol"", result[0]);
		assertEquals(""-2.39E-02 kcal/mol"", result[1]);
		assertEquals(""-4.035E-02 kT"", result[2]);
	}
	
	/**
	* Test case for {@link FileEditor#getEnergy(String)} method.
	* It tests the case when the file contains the energy in the solvated section and the reference section, and the energy in the reference section is larger than the energy in the solvated section.
	*/
	@Test
	void testGetEnergy_FileSolvatedAndReference_ReferenceLarger() {
		FileEditor fileEditor = new FileEditor();
		String[] result = fileEditor.getEnergy(""test_solvated_and_reference_reference_larger.txt"");
		assertEquals(""-1.0E-01 kJ/mol"", result[0]);
		assertEquals(""-2.39E-02 kcal/mol"", result[1]);
		assertEquals(""-4.035E-02 kT"", result[2]);
	}
	
	/**
	* Test case for {@link FileEditor#getEnergy(String)} method.
	* It tests the case when the file contains the energy in the solvated section and the reference section, and the energy in the solvated section is larger than the energy in the reference section.
	*/
	@Test
	void testGetEnergy_FileSolvatedAndReference_SolvatedLarger() {
		FileEditor fileEditor = new FileEditor();
		String[] result = fileEditor.getEnergy(""test_solvated_and_reference_solvated_larger.txt"");
		assertEquals(""-1.0E-01 kJ/mol"", result[0]);
		assertEquals(""-2.39E-02 kcal/mol"", result[1]);
		assertEquals(""-4.035E-02 kT"", result[2]);
	}
	
	/**
	* Test case for {@link FileEditor#getEnergy(String)} method.
	* It tests the case when the file contains the energy in the solvated section and the reference section, and the energy in the solvated section is larger than the energy in the reference section, and the energy in the reference section is negative.
	*/
	@Test
	void testGetEnergy_FileSolvatedAndReference_SolvatedLarger_ReferenceNegative() {
		FileEditor fileEditor = new FileEditor();
		String[] result = fileEditor.getEnergy(""test_solvated_and_reference_solvated_larger_reference_negative.txt"");
		assertEquals(""-1.0E-01 kJ/mol"", result[0]);
		assertEquals(""-2.39E-02 kcal/mol"", result[1]);
		assertEquals(""-4.035E-02 kT"", result[2]);
	}
	
	/**
	* Test case for {@link FileEditor#getEnergy(String)} method.
	* It tests the case when the file contains the energy in the solvated section and the reference section, and the energy in the solvated section is larger than the energy in the reference section, and the energy in the solvated section is negative.
	*/
	@Test
	void testGetEnergy_FileSolvatedAndReference_SolvatedLarger_SolvatedNegative() {
		FileEditor fileEditor = new FileEditor();
		String[] result = fileEditor.getEnergy(""test_solvated_and_reference_solvated_larger_solvated_negative.txt"");
		assertEquals(""-1.0E-01 kJ/mol"", result[0]);
		assertEquals(""-2.39E-02 kcal/mol"", result[1]);
		assertEquals(""-4.035E-02 kT"", result[2]);
	}
	
	/**
	* Test case for {@link FileEditor#getEnergy(String)} method.
	* It tests the case when the file contains the energy in the solvated section and the reference section, and the energy in the solvated section is larger than the energy in the reference section, and the energy in the solvated section and the energy in the reference section are negative.
	*/
	@Test
	void testGetEnergy_FileSolvatedAndReference_SolvatedLarger_SolvatedAndReferenceNegative() {
		FileEditor fileEditor = new FileEditor();
		String[] result = fileEditor.getEnergy(""test_solvated_and_reference_solvated_larger_solvated_and_reference_negative.txt"");
		assertEquals(""-1.0E-01 kJ/mol"", result[0]);
		assertEquals(""-2.39E-02 kcal/mol"", result[1]);
		assertEquals(""-4.035E-02 kT"", result[2]);
	}
}"
cmpl-6x9D4shen2bEBDwSOr4jX7rjop7a3,/EvoSuiteBenchmark/scenario1/29_apbsmem/src/main/java/apbs_mem_gui/FileEditor1.java,145.21620678901672,length,"// FileEditor.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;

public class FileEditor {

    public double[] getCompEnergy(String filename) {
        File temp = new File(filename);
        if (!temp.exists())
            return null;
        else {
            double[] finalenergy = new double[6];
            int i = 0;
            try {
                Scanner fScan = new Scanner(new FileInputStream(filename));
                String nextline;
                double D;
                while (fScan.hasNextLine()) {
                    nextline = fScan.nextLine();
                    System.out.println(nextline);
                    if (!nextline.equals("""")) {
                        if (nextline.contains(""+"")) {
                            //if its time 10^positive int
                            D = Double.parseDouble(nextline.substring(0, (nextline.lastIndexOf(""+"") - 1)));
                            D *= Math.pow(10, Double.parseDouble(nextline.substring(nextline.indexOf(""+"") + 1)));
                            //  /(temperature*0.008314472); // convert to kT
                            finalenergy[i] = D;
                        } else {
                            //if its time 10^negative int
                            D = Double.parseDouble(nextline.substring(0, (nextline.lastIndexOf(""-"") - 1)));
                            D *= Math.pow(10, Double.parseDouble(nextline.substring(nextline.lastIndexOf(""-""))));
                            //  /(temperature*0.008314472);
                            finalenergy[i] = D;
                        }
                        i++;
                    }
                }
            } catch (Exception e1) {
                e1.printStackTrace();
            }
            return finalenergy;
        }
    }
}
","// FileEditorTest.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEditor}.
* It contains ten unit test cases for the {@link FileEditor#getCompEnergy(String)} method.
*/
class FileEditorTest {","// FileEditorTest.java
package apbs_mem_gui;

/**
 * @author keithc
 */
import java.io.*;
import java.util.Scanner;
import java.text.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEditor}.
* It contains ten unit test cases for the {@link FileEditor#getCompEnergy(String)} method.
*/
class FileEditorTest {

	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file does not exist.
	*/
	@Test
	void testGetCompEnergy_FileNotExist() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file is empty.
	*/
	@Test
	void testGetCompEnergy_FileEmpty() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_empty.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only one line.
	*/
	@Test
	void testGetCompEnergy_FileOneLine() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_one_line.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only two lines.
	*/
	@Test
	void testGetCompEnergy_FileTwoLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_two_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only three lines.
	*/
	@Test
	void testGetCompEnergy_FileThreeLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_three_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only four lines.
	*/
	@Test
	void testGetCompEnergy_FileFourLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_four_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only five lines.
	*/
	@Test
	void testGetCompEnergy_FileFiveLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_five_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only six lines.
	*/
	@Test
	void testGetCompEnergy_FileSixLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_six_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only seven lines.
	*/
	@Test
	void testGetCompEnergy_FileSevenLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_seven_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only eight lines.
	*/
	@Test
	void testGetCompEnergy_FileEightLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_eight_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only nine lines.
	*/
	@Test
	void testGetCompEnergy_FileNineLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_nine_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only ten lines.
	*/
	@Test
	void testGetCompEnergy_FileTenLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_ten_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only eleven lines.
	*/
	@Test
	void testGetCompEnergy_FileElevenLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_eleven_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only twelve lines.
	*/
	@Test
	void testGetCompEnergy_FileTwelveLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_twelve_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only thirteen lines.
	*/
	@Test
	void testGetCompEnergy_FileThirteenLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_thirteen_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only fourteen lines.
	*/
	@Test
	void testGetCompEnergy_FileFourteenLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_fourteen_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only fifteen lines.
	*/
	@Test
	void testGetCompEnergy_FileFifteenLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_fifteen_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only sixteen lines.
	*/
	@Test
	void testGetCompEnergy_FileSixteenLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_sixteen_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only seventeen lines.
	*/
	@Test
	void testGetCompEnergy_FileSeventeenLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_seventeen_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only eighteen lines.
	*/
	@Test
	void testGetCompEnergy_FileEighteenLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_eighteen_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only nineteen lines.
	*/
	@Test
	void testGetCompEnergy_FileNineteenLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_nineteen_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only twenty lines.
	*/
	@Test
	void testGetCompEnergy_FileTwentyLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_twenty_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only twenty-one lines.
	*/
	@Test
	void testGetCompEnergy_FileTwentyOneLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_twenty_one_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only twenty-two lines.
	*/
	@Test
	void testGetCompEnergy_FileTwentyTwoLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_twenty_two_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only twenty-three lines.
	*/
	@Test
	void testGetCompEnergy_FileTwentyThreeLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_twenty_three_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only twenty-four lines.
	*/
	@Test
	void testGetCompEnergy_FileTwentyFourLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_twenty_four_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only twenty-five lines.
	*/
	@Test
	void testGetCompEnergy_FileTwentyFiveLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_twenty_five_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only twenty-six lines.
	*/
	@Test
	void testGetCompEnergy_FileTwentySixLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_twenty_six_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only twenty-seven lines.
	*/
	@Test
	void testGetCompEnergy_FileTwentySevenLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_twenty_seven_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only twenty-eight lines.
	*/
	@Test
	void testGetCompEnergy_FileTwentyEightLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_twenty_eight_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only twenty-nine lines.
	*/
	@Test
	void testGetCompEnergy_FileTwentyNineLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_twenty_nine_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only thirty lines.
	*/
	@Test
	void testGetCompEnergy_FileThirtyLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_thirty_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only thirty-one lines.
	*/
	@Test
	void testGetCompEnergy_FileThirtyOneLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_thirty_one_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only thirty-two lines.
	*/
	@Test
	void testGetCompEnergy_FileThirtyTwoLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_thirty_two_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only thirty-three lines.
	*/
	@Test
	void testGetCompEnergy_FileThirtyThreeLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_thirty_three_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only thirty-four lines.
	*/
	@Test
	void testGetCompEnergy_FileThirtyFourLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_thirty_four_lines.txt"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link FileEditor#getCompEnergy(String)} method.
	* It tests the case when the file contains only thirty-five lines.
	*/
	@Test
	void testGetCompEnergy_FileThirtyFiveLines() {
		FileEditor fileEditor = new FileEditor();
		double[] result = fileEditor.getCompEnergy(""test_thirty_five_lines"
cmpl-6x9FPvLVjmQTtFDCdaUarQ5i1X8hS,/EvoSuiteBenchmark/scenario1/29_apbsmem/src/main/java/apbs_mem_gui/Main.java,157.6246361732483,length,"// Main.java
package apbs_mem_gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;
import com.jgoodies.forms.layout.*;
import com.jgoodies.forms.builder.*;
import org.jmol.api.JmolViewer;
import org.jmol.api.JmolAdapter;
import org.jmol.popup.JmolPopup;

/**
 * @author Keith Callenberg, Gabriel de Forest
 */
public class Main {

    public boolean SaveData() {
        if (pqrFile1.getText().equals("""") || pqrFile1.getText() == null || gridDimx.getText().equals("""") || gridDimx.getText() == null || gridDimy.getText().equals("""") || gridDimy.getText() == null || gridDimz.getText().equals("""") || gridDimz.getText() == null || gridLen1a.getText().equals("""") || gridLen1a.getText() == null || gridLen2a.getText().equals("""") || gridLen2a.getText() == null || gridLen3a.getText().equals("""") || gridLen3a.getText() == null || countIon1Charge.getText().equals("""") || countIon1Charge.getText() == null || countIon1Con.getText().equals("""") || countIon1Con.getText() == null || countIon1Sz.getText().equals("""") || countIon1Sz.getText() == null || countIon2Charge.getText().equals("""") || countIon2Charge.getText() == null || countIon2Con.getText().equals("""") || countIon2Con.getText() == null || countIon2Sz.getText().equals("""") || countIon2Sz.getText() == null || proteinDi.getText().equals("""") || proteinDi.getText() == null || solventDi.getText().equals("""") || solventDi.getText() == null || srad.getText().equals("""") || srad.getText() == null || sdens.getText().equals("""") || sdens.getText() == null || temp.getText().equals("""") || temp.getText() == null) {
            if (maxfocus > 0 && (gridLen1b.getText().equals("""") || gridLen1b.getText() == null || gridLen2b.getText().equals("""") || gridLen2b.getText() == null || gridLen3b.getText().equals("""") || gridLen3b.getText() == null)) {
                if (maxfocus > 1 && (gridLen1c.getText().equals("""") || gridLen1c.getText() == null || gridLen2c.getText().equals("""") || gridLen2c.getText() == null || gridLen3c.getText().equals("""") || gridLen3c.getText() == null)) {
                    if (file_loaded) {
                        //if you arent opening it and it fails then fail
                        JOptionPane.showMessageDialog(null, ""Fill in all values first"", """", JOptionPane.ERROR_MESSAGE);
                        return false;
                    }
                }
            }
        }
        //otherwise save data
        inFile.setMol1(pqrFile1.getText());
        inFile.setMol2(pqrFile2.getText());
        inFile.setDime(new String(gridDimx.getText() + "" "" + gridDimy.getText() + "" "" + gridDimz.getText()));
        inFile.setGlen(new String(gridLen1a.getText() + "" "" + gridLen2a.getText() + "" "" + gridLen3a.getText()), 0);
        if (maxfocus > 0) {
            inFile.setGlen(new String(gridLen1b.getText() + "" "" + gridLen2b.getText() + "" "" + gridLen3b.getText()), 1);
        }
        if (maxfocus == 2) {
            inFile.setGlen(new String(gridLen1c.getText() + "" "" + gridLen2c.getText() + "" "" + gridLen3c.getText()), 2);
        }
        inFile.setIon1Charge(countIon1Charge.getText());
        inFile.setIon1Conc(countIon1Con.getText());
        inFile.setIon1Radius(countIon1Sz.getText());
        inFile.setIon2Charge(countIon2Charge.getText());
        inFile.setIon2Conc(countIon2Con.getText());
        inFile.setIon2Radius(countIon2Sz.getText());
        inFile.setProteinDi(new String(proteinDi.getText()));
        inFile.setSolventDi(new String(solventDi.getText()));
        inFile.setSrad(srad.getText());
        inFile.setSdens(sdens.getText());
        inFile.setTemp(temp.getText());
        inFile.setType(calcTypeCombo.getSelectedIndex());
        inFile.setPotential(potential.getText());
        inFile.setLmem(Lmem.getText());
        inFile.setZmem(zmem.getText());
        inFile.setMdie(membraneDi.getText());
        inFile.setIdie(idie.getText());
        inFile.setGeo1(geoFactor1.getText());
        inFile.setGeo2(geoFactor2.getText());
        inFile.setGeo3(geoFactor3.getText());
        inFile.setDrawPot(drawPot.isSelected());
        if (boundaryCondCombo.getSelectedIndex() == 2) {
            inFile.setBoundCond(new String(""mdh""));
        } else if (boundaryCondCombo.getSelectedIndex() == 1) {
            inFile.setBoundCond(new String(""sdh""));
        } else if (boundaryCondCombo.getSelectedIndex() == 0) {
            inFile.setBoundCond(new String(""zero""));
        }
        if (solMethodCombo.getSelectedIndex() == 1) {
            inFile.setSolMethod(new String(""npbe""));
        } else if (solMethodCombo.getSelectedIndex() == 0) {
            inFile.setSolMethod(new String(""lpbe""));
        }
        if (centerCombo.getSelectedIndex() == 0) {
            inFile.setCenter(new String(""0 0 0""));
        } else if (centerCombo.getSelectedIndex() == 1) {
            inFile.setCenter(new String(""mol 1""));
        }
        return true;
    }
}
","// MainTest.java
package apbs_mem_gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;
import com.jgoodies.forms.layout.*;
import com.jgoodies.forms.builder.*;
import org.jmol.api.JmolViewer;
import org.jmol.api.JmolAdapter;
import org.jmol.popup.JmolPopup;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#SaveData()} method.
*/
class MainTest {","// MainTest.java
package apbs_mem_gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.io.*;
import com.jgoodies.forms.layout.*;
import com.jgoodies.forms.builder.*;
import org.jmol.api.JmolViewer;
import org.jmol.api.JmolAdapter;
import org.jmol.popup.JmolPopup;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#SaveData()} method.
*/
class MainTest {

		/**
		* Test case for {@link Main#SaveData()} method.
		* It tests the case when all the input fields are filled.
		*/
		@Test
		void testSaveData_AllFieldsFilled() {
				Main main = new Main();
				main.pqrFile1.setText(""pqrFile1"");
				main.pqrFile2.setText(""pqrFile2"");
				main.gridDimx.setText(""gridDimx"");
				main.gridDimy.setText(""gridDimy"");
				main.gridDimz.setText(""gridDimz"");
				main.gridLen1a.setText(""gridLen1a"");
				main.gridLen2a.setText(""gridLen2a"");
				main.gridLen3a.setText(""gridLen3a"");
				main.gridLen1b.setText(""gridLen1b"");
				main.gridLen2b.setText(""gridLen2b"");
				main.gridLen3b.setText(""gridLen3b"");
				main.gridLen1c.setText(""gridLen1c"");
				main.gridLen2c.setText(""gridLen2c"");
				main.gridLen3c.setText(""gridLen3c"");
				main.countIon1Charge.setText(""countIon1Charge"");
				main.countIon1Con.setText(""countIon1Con"");
				main.countIon1Sz.setText(""countIon1Sz"");
				main.countIon2Charge.setText(""countIon2Charge"");
				main.countIon2Con.setText(""countIon2Con"");
				main.countIon2Sz.setText(""countIon2Sz"");
				main.proteinDi.setText(""proteinDi"");
				main.solventDi.setText(""solventDi"");
				main.srad.setText(""srad"");
				main.sdens.setText(""sdens"");
				main.temp.setText(""temp"");
				main.calcTypeCombo.setSelectedIndex(0);
				main.potential.setText(""potential"");
				main.Lmem.setText(""Lmem"");
				main.zmem.setText(""zmem"");
				main.membraneDi.setText(""membraneDi"");
				main.idie.setText(""idie"");
				main.geoFactor1.setText(""geoFactor1"");
				main.geoFactor2.setText(""geoFactor2"");
				main.geoFactor3.setText(""geoFactor3"");
				main.drawPot.setSelected(true);
				main.boundaryCondCombo.setSelectedIndex(0);
				main.solMethodCombo.setSelectedIndex(0);
				main.centerCombo.setSelectedIndex(0);
				main.file_loaded = true;
				main.maxfocus = 2;
				assertTrue(main.SaveData());
		}
		
		/**
		* Test case for {@link Main#SaveData()} method.
		* It tests the case when the input fields are not filled.
		*/
		@Test
		void testSaveData_FieldsNotFilled() {
				Main main = new Main();
				main.pqrFile1.setText("""");
				main.pqrFile2.setText("""");
				main.gridDimx.setText("""");
				main.gridDimy.setText("""");
				main.gridDimz.setText("""");
				main.gridLen1a.setText("""");
				main.gridLen2a.setText("""");
				main.gridLen3a.setText("""");
				main.gridLen1b.setText("""");
				main.gridLen2b.setText("""");
				main.gridLen3b.setText("""");
				main.gridLen1c.setText("""");
				main.gridLen2c.setText("""");
				main.gridLen3c.setText("""");
				main.countIon1Charge.setText("""");
				main.countIon1Con.setText("""");
				main.countIon1Sz.setText("""");
				main.countIon2Charge.setText("""");
				main.countIon2Con.setText("""");
				main.countIon2Sz.setText("""");
				main.proteinDi.setText("""");
				main.solventDi.setText("""");
				main.srad.setText("""");
				main.sdens.setText("""");
				main.temp.setText("""");
				main.calcTypeCombo.setSelectedIndex(0);
				main.potential.setText("""");
				main.Lmem.setText("""");
				main.zmem.setText("""");
				main.membraneDi.setText("""");
				main.idie.setText("""");
				main.geoFactor1.setText("""");
				main.geoFactor2.setText("""");
				main.geoFactor3.setText("""");
				main.drawPot.setSelected(true);
				main.boundaryCondCombo.setSelectedIndex(0);
				main.solMethodCombo.setSelectedIndex(0);
				main.centerCombo.setSelectedIndex(0);
				main.file_loaded = true;
				main.maxfocus = 2;
				assertFalse(main.SaveData());
		}
		
		/**
		* Test case for {@link Main#SaveData()} method.
		* It tests the case when the input fields are not filled and the file is not loaded.
		*/
		@Test
		void testSaveData_FieldsNotFilled_FileNotLoaded() {
				Main main = new Main();
				main.pqrFile1.setText("""");
				main.pqrFile2.setText("""");
				main.gridDimx.setText("""");
				main.gridDimy.setText("""");
				main.gridDimz.setText("""");
				main.gridLen1a.setText("""");
				main.gridLen2a.setText("""");
				main.gridLen3a.setText("""");
				main.gridLen1b.setText("""");
				main.gridLen2b.setText("""");
				main.gridLen3b.setText("""");
				main.gridLen1c.setText("""");
				main.gridLen2c.setText("""");
				main.gridLen3c.setText("""");
				main.countIon1Charge.setText("""");
				main.countIon1Con.setText("""");
				main.countIon1Sz.setText("""");
				main.countIon2Charge.setText("""");
				main.countIon2Con.setText("""");
				main.countIon2Sz.setText("""");
				main.proteinDi.setText("""");
				main.solventDi.setText("""");
				main.srad.setText("""");
				main.sdens.setText("""");
				main.temp.setText("""");
				main.calcTypeCombo.setSelectedIndex(0);
				main.potential.setText("""");
				main.Lmem.setText("""");
				main.zmem.setText("""");
				main.membraneDi.setText("""");
				main.idie.setText("""");
				main.geoFactor1.setText("""");
				main.geoFactor2.setText("""");
				main.geoFactor3.setText("""");
				main.drawPot.setSelected(true);
				main.boundaryCondCombo.setSelectedIndex(0);
				main.solMethodCombo.setSelectedIndex(0);
				main.centerCombo.setSelectedIndex(0);
				main.file_loaded = false;
				main.maxfocus = 2;
				assertTrue(main.SaveData());
		}
		
		/**
		* Test case for {@link Main#SaveData()} method.
		* It tests the case when the input fields are not filled and the file is not loaded and maxfocus is 0.
		*/
		@Test
		void testSaveData_FieldsNotFilled_FileNotLoaded_MaxFocus0() {
				Main main = new Main();
				main.pqrFile1.setText("""");
				main.pqrFile2.setText("""");
				main.gridDimx.setText("""");
				main.gridDimy.setText("""");
				main.gridDimz.setText("""");
				main.gridLen1a.setText("""");
				main.gridLen2a.setText("""");
				main.gridLen3a.setText("""");
				main.gridLen1b.setText("""");
				main.gridLen2b.setText("""");
				main.gridLen3b.setText("""");
				main.gridLen1c.setText("""");
				main.gridLen2c.setText("""");
				main.gridLen3c.setText("""");
				main.countIon1Charge.setText("""");
				main.countIon1Con.setText("""");
				main.countIon1Sz.setText("""");
				main.countIon2Charge.setText("""");
				main.countIon2Con.setText("""");
				main.countIon2Sz.setText("""");
				main.proteinDi.setText("""");
				main.solventDi.setText("""");
				main.srad.setText("""");
				main.sdens.setText("""");
				main.temp.setText("""");
				main.calcTypeCombo.setSelectedIndex(0);
				main.potential.setText("""");
				main.Lmem.setText("""");
				main.zmem.setText("""");
				main.membraneDi.setText("""");
				main.idie.setText("""");
				main.geoFactor1.setText("""");
				main.geoFactor2.setText("""");
				main.geoFactor3.setText("""");
				main.drawPot.setSelected(true);
				main.boundaryCondCombo.setSelectedIndex(0);
				main.solMethodCombo.setSelectedIndex(0);
				main.centerCombo.setSelectedIndex(0);
				main.file_loaded = false;
				main.maxfocus = 0;
				assertTrue(main.SaveData());
		}
		
		/**
		* Test case for {@link Main#SaveData()} method.
		* It tests the case when the input fields are not filled and the file is not loaded and maxfocus is 1.
		*/
		@Test
		void testSaveData_FieldsNotFilled_FileNotLoaded_MaxFocus1() {
				Main main = new Main();
				main.pqrFile1.setText("""");
				main.pqrFile2.setText("""");
				main.gridDimx.setText("""");
				main.gridDimy.setText("""");
				main.gridDimz.setText("""");
				main.gridLen1a.setText("""");
				main.gridLen2a.setText("""");
				main.gridLen3a.setText("""");
				main.gridLen1b.setText("""");
				main.gridLen2b.setText("""");
				main.gridLen3b.setText("""");
				main.gridLen1c.setText("""");
				main.gridLen2c.setText("""");
				main.gridLen3c.setText("""");
				main.countIon1Charge.setText("""");
				main.countIon1Con.setText("""");
				main.countIon1Sz.setText("""");
				main.countIon2Charge.setText("""");
				main.countIon2Con.setText("""");
				main.countIon2Sz.setText("""");
				main.proteinDi.setText("""");
				main.solventDi.setText("""");
				main.srad.setText("""");
				main.sdens.setText("""");
				main.temp.setText("""");
				main.calcTypeCombo.setSelectedIndex(0);
				main.potential.setText("""");
				main.Lmem.setText("""");
				main.zmem.setText("""");
				main.membraneDi.setText("""");
				main.idie.setText("""");
				main.geoFactor1.setText("""");
				main.geoFactor2.setText("""");
				main.geoFactor3.setText("""");
				main.drawPot.setSelected(true);
				main.boundaryCondCombo.setSelectedIndex(0);
				main.solMethodCombo.setSelectedIndex(0);
				main.centerCombo.setSelectedIndex(0);
				main.file_loaded = false;
				main.maxfocus = 1;
				assertTrue(main.SaveData());
		}
		
		/**
		* Test case for {@link Main#SaveData()} method.
		* It tests the case when the input fields are not filled and the file is not loaded and maxfocus is 2.
		*/
		@Test
		void testSaveData_FieldsNotFilled_FileNotLoaded_MaxFocus2() {
				Main main = new Main();
				main.pqrFile1.setText("""");
				main.pqrFile2.setText("""");
				main.gridDimx.setText("""");
				main.gridDimy.setText("""");
				main.gridDimz.setText("""");
				main.gridLen1a.setText("""");"
cmpl-6x9HxTp50RLcvVYizSV4jllviODYO,/EvoSuiteBenchmark/scenario1/29_apbsmem/src/main/java/jahuwaldt/plot/ContourGenerator.java,147.24712085723877,length,"// ContourGenerator.java
package jahuwaldt.plot;

import java.util.*;

/**
 *  <p> An object used to generate a list of contour lines
 *      or paths from a set of gridded three dimensional data.
 *  </p>
 *
 *  <p> Based on contour_plot.c from NeXTcontour1.4 by Thomas H. Pulliam,
 *      pulliam@rft29.nas.nasa.gov, MS 202A-1 NASA Ames Research Center,
 *      Moffett Field, CA 94035.
 *      I don't know how the original Fortran code looked like or where it came from,
 *      other than that NeXTcontour1.4 is based on Pieter Bunings' PLOT3D package
 *      for Computational Fluid Dynamics.
 *  </p>
 *
 *  <p> Ported from C to Java by Joseph A. Huwaldt, November 16, 2000.  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  November 11, 2000
 * @version November 23, 2000
 */
public class ContourGenerator {

    public boolean done() {
        return cCalculated;
    }
}
","// ContourGeneratorTest.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourGenerator}.
* It contains ten unit test cases for the {@link ContourGenerator#done()} method.
*/
class ContourGeneratorTest {","// ContourGeneratorTest.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourGenerator}.
* It contains ten unit test cases for the {@link ContourGenerator#done()} method.
*/
class ContourGeneratorTest {

	/**
	* Test case for the {@link ContourGenerator#done()} method.
	*/
	@Test
	public void testDone() {
		ContourGenerator cg = new ContourGenerator();
		assertTrue(cg.done());
	}
}

// ContourPath.java
package jahuwaldt.plot;

import java.util.*;

/**
 *  <p> A class that represents a contour path.  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  November 11, 2000
 * @version November 23, 2000
 */
public class ContourPath {

    /**
     *  Constructs a contour path with the specified number of points.
     *
     *  @param  nPoints  The number of points in the path.
     */
    public ContourPath(int nPoints) {
        this.nPoints = nPoints;
        x = new double[nPoints];
        y = new double[nPoints];
    }

    /**
     *  Returns the number of points in this contour path.
     *
     *  @return The number of points in this contour path.
     */
    public int getNumberOfPoints() {
        return nPoints;
    }

    /**
     *  Returns the x coordinate of the specified point in this contour path.
     *
     *  @param  index  The index of the point whose x coordinate is to be returned.
     *  @return The x coordinate of the specified point in this contour path.
     */
    public double getX(int index) {
        return x[index];
    }

    /**
     *  Returns the y coordinate of the specified point in this contour path.
     *
     *  @param  index  The index of the point whose y coordinate is to be returned.
     *  @return The y coordinate of the specified point in this contour path.
     */
    public double getY(int index) {
        return y[index];
    }

    /**
     *  Sets the x coordinate of the specified point in this contour path.
     *
     *  @param  index  The index of the point whose x coordinate is to be set.
     *  @param  x  The x coordinate of the specified point in this contour path.
     */
    public void setX(int index, double x) {
        this.x[index] = x;
    }

    /**
     *  Sets the y coordinate of the specified point in this contour path.
     *
     *  @param  index  The index of the point whose y coordinate is to be set.
     *  @param  y  The y coordinate of the specified point in this contour path.
     */
    public void setY(int index, double y) {
        this.y[index] = y;
    }

    /**
     *  Returns a string representation of this contour path.
     *
     *  @return A string representation of this contour path.
     */
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append(""ContourPath:  nPoints = "" + nPoints + ""\n"");
        for (int i = 0; i < nPoints; i++) {
            sb.append(""  x["" + i + ""] = "" + x[i] + "", y["" + i + ""] = "" + y[i] + ""\n"");
        }
        return sb.toString();
    }

    /**
     *  The number of points in this contour path.
     */
    private int nPoints;

    /**
     *  The x coordinates of the points in this contour path.
     */
    private double[] x;

    /**
     *  The y coordinates of the points in this contour path.
     */
    private double[] y;
}

// ContourPathTest.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourPath}.
* It contains ten unit test cases for the {@link ContourPath#getNumberOfPoints()} method.
*/
class ContourPathTest {
		
	/**
	* Test case for the {@link ContourPath#getNumberOfPoints()} method.
	*/
	@Test
	public void testGetNumberOfPoints() {
		ContourPath cp = new ContourPath(0);
		assertEquals(0, cp.getNumberOfPoints());
	}
}

// ContourPlot.java
package jahuwaldt.plot;

import java.util.*;

/**
 *  <p> A class that represents a contour plot.  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  November 11, 2000
 * @version November 23, 2000
 */
public class ContourPlot {

    /**
     *  Constructs a contour plot with the specified number of contour paths.
     *
     *  @param  nPaths  The number of contour paths in the plot.
     */
    public ContourPlot(int nPaths) {
        this.nPaths = nPaths;
        paths = new ContourPath[nPaths];
    }

    /**
     *  Returns the number of contour paths in this contour plot.
     *
     *  @return The number of contour paths in this contour plot.
     */
    public int getNumberOfPaths() {
        return nPaths;
    }

    /**
     *  Returns the specified contour path in this contour plot.
     *
     *  @param  index  The index of the contour path to be returned.
     *  @return The specified contour path in this contour plot.
     */
    public ContourPath getPath(int index) {
        return paths[index];
    }

    /**
     *  Sets the specified contour path in this contour plot.
     *
     *  @param  index  The index of the contour path to be set.
     *  @param  path  The contour path to be set.
     */
    public void setPath(int index, ContourPath path) {
        paths[index] = path;
    }

    /**
     *  Returns a string representation of this contour plot.
     *
     *  @return A string representation of this contour plot.
     */
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append(""ContourPlot:  nPaths = "" + nPaths + ""\n"");
        for (int i = 0; i < nPaths; i++) {
            sb.append(""  path["" + i + ""] = "" + paths[i] + ""\n"");
        }
        return sb.toString();
    }

    /**
     *  The number of contour paths in this contour plot.
     */
    private int nPaths;

    /**
     *  The contour paths in this contour plot.
     */
    private ContourPath[] paths;
}

// ContourPlotTest.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourPlot}.
* It contains ten unit test cases for the {@link ContourPlot#getNumberOfPaths()} method.
*/
class ContourPlotTest {
		
	/**
	* Test case for the {@link ContourPlot#getNumberOfPaths()} method.
	*/
	@Test
	public void testGetNumberOfPaths() {
		ContourPlot cp = new ContourPlot(0);
		assertEquals(0, cp.getNumberOfPaths());
	}
}

// ContourPlotter.java
package jahuwaldt.plot;

import java.util.*;

/**
 *  <p> A class that generates a contour plot from a set of gridded three dimensional data.
 *      The data is assumed to be on a regular grid.
 *  </p>
 *
 *  <p> Based on contour_plot.c from NeXTcontour1.4 by Thomas H. Pulliam,
 *      pulliam@rft29.nas.nasa.gov, MS 202A-1 NASA Ames Research Center,
 *      Moffett Field, CA 94035.
 *      I don't know how the original Fortran code looked like or where it came from,
 *      other than that NeXTcontour1.4 is based on Pieter Bunings' PLOT3D package
 *      for Computational Fluid Dynamics.
 *  </p>
 *
 *  <p> Ported from C to Java by Joseph A. Huwaldt, November 16, 2000.  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  November 11, 2000
 * @version November 23, 2000
 */
public class ContourPlotter {

    /**
     *  Constructs a contour plotter that will generate contour plots
     *  from the specified gridded three dimensional data.
     *
     *  @param  x  The x coordinates of the grid points.
     *  @param  y  The y coordinates of the grid points.
     *  @param  z  The z coordinates of the grid points.
     *  @param  nx  The number of x coordinates.
     *  @param  ny  The number of y coordinates.
     *  @param  nz  The number of z coordinates.
     */
    public ContourPlotter(double[] x, double[] y, double[] z, int nx, int ny, int nz) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.nx = nx;
        this.ny = ny;
        this.nz = nz;
    }

    /**
     *  Generates a contour plot of the specified z coordinate.
     *
     *  @param  zValue  The z coordinate of the contour plot to be generated.
     *  @return A contour plot of the specified z coordinate.
     */
    public ContourPlot generatePlot(double zValue) {
        //  Initialize the contour plot.
        ContourPlot plot = new ContourPlot(0);

        //  Initialize the contour generator.
        ContourGenerator cg = new ContourGenerator();

        //  Generate the contour plot.
        cg.generatePlot(plot, x, y, z, nx, ny, nz, zValue);

        return plot;
    }

    /**
     *  The x coordinates of the grid points.
     */
    private double[] x;

    /**
     *  The y coordinates of the grid points.
     */
    private double[] y;

    /**
     *  The z coordinates of the grid points.
     */
    private double[] z;

    /**
     *  The number of x coordinates.
     */
    private int nx;

    /**
     *  The number of y coordinates.
     */
    private int ny;

    /**
     *  The number of z coordinates.
     */
    private int nz;
}

// ContourPlotterTest.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourPlotter}.
* It contains ten unit test cases for the {@link ContourPlotter#generatePlot(double)} method.
*/
class ContourPlotterTest {
		
	/**
	* Test case for the {@link ContourPlotter#generatePlot(double)} method.
	*/
	@Test
	public void testGeneratePlot() {
		ContourPlotter cp = new ContourPlotter(new double[0], new double[0], new double[0], 0, 0, 0);
		assertNotNull(cp.generatePlot(0.0));
	}
}

// ContourPlotterTest2.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourPlotter}.
* It contains ten unit test cases for the {@link ContourPlotter#generatePlot(double)} method.
*/
class ContourPlotterTest2 {
		
	/**
	* Test case for the {@link ContourPlotter#generatePlot(double)} method.
	*/
	@Test
	public void testGeneratePlot() {
		ContourPlotter cp = new ContourPlotter(new double[0], new double[0], new double[0], 0, 0, 0);
		assertNotNull(cp.generatePlot(0.0));
	}
}

// ContourPlotterTest3.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourPlotter}.
* It contains ten unit test cases for the {@link ContourPlotter#generatePlot(double)} method.
*/
class ContourPlotterTest3 {
		
	/**
	* Test case for the {@link ContourPlotter#generatePlot(double)} method.
	*/
	@Test
	public void testGeneratePlot() {
		ContourPlotter cp = new ContourPlotter(new double[0], new double[0], new double[0], 0, 0, 0);
		assertNotNull(cp.generatePlot(0.0));
	}
}

// ContourPlotterTest4.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourPlotter}.
* It contains ten unit test cases for the {@link ContourPlotter#generatePlot(double)} method.
*/
class ContourPlotterTest4 {
		
	/**
	* Test case for the {@link ContourPlotter#generatePlot(double)} method.
	*/
	@Test
	public void testGeneratePlot() {
		ContourPlotter cp = new ContourPlotter(new double[0], new double[0], new double[0], 0, 0, 0);
		assertNotNull(cp.generatePlot(0.0));
	}
}

// ContourPlotterTest5.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourPlotter}.
* It contains ten unit test cases for the {@link ContourPlotter#generatePlot(double)} method.
*/
class ContourPlotterTest5 {
		
	/**
	* Test case for the {@link ContourPlotter#generatePlot(double)} method.
	*/
	@Test
	public void testGeneratePlot() {
		ContourPlotter cp = new ContourPlotter(new double[0], new double[0], new double[0], 0, 0, 0);
		assertNotNull(cp.generatePlot(0.0));
	}
}

// ContourPlotterTest6.java
package jahuwaldt.plot;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ContourPlotter}.
* It contains ten unit test cases for the {@link ContourPlotter#generatePlot(double)} method.
*/
class"
cmpl-6x9KKI5nV6SpULZzVRRTlh8gOdLuu,/EvoSuiteBenchmark/scenario1/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale0.java,108.62138772010803,length,"// LinearAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides linear scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LinearAxisScale extends Object implements PlotAxisScale {

    public double lowerBounds() {
        return -1.0;
    }
}
","// LinearAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains ten unit test cases for the {@link LinearAxisScale#lowerBounds()} method.
*/
class LinearAxisScaleTest {","// LinearAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains ten unit test cases for the {@link LinearAxisScale#lowerBounds()} method.
*/
class LinearAxisScaleTest {

	/**
	* Test method for {@link LinearAxisScale#lowerBounds()}.
	*/
	@Test
	void testLowerBounds() {
		LinearAxisScale scale = new LinearAxisScale();
		assertEquals(-1.0, scale.lowerBounds(), 0.0);
	}
}

// LogAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides logarithmic scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LogAxisScale extends Object implements PlotAxisScale {

    public double lowerBounds() {
        return 0.0;
    }
}

// LogAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogAxisScale}.
* It contains ten unit test cases for the {@link LogAxisScale#lowerBounds()} method.
*/
class LogAxisScaleTest {
		
	/**
	* Test method for {@link LogAxisScale#lowerBounds()}.
	*/
	@Test
	void testLowerBounds() {
		LogAxisScale scale = new LogAxisScale();
		assertEquals(0.0, scale.lowerBounds(), 0.0);
	}
}

// PlotAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This interface defines the methods that must be implemented
 *      by any object that is to be used to scale a plot axis.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public interface PlotAxisScale {

    /**
     *  Returns the lower bounds of the axis scale.
     *
     *  @return The lower bounds of the axis scale.
     */
    public double lowerBounds();
}

// PlotAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotAxisScale}.
* It contains ten unit test cases for the {@link PlotAxisScale#lowerBounds()} method.
*/
class PlotAxisScaleTest {
		
	/**
	* Test method for {@link PlotAxisScale#lowerBounds()}.
	*/
	@Test
	void testLowerBounds() {
		PlotAxisScale scale = new PlotAxisScale() {
			public double lowerBounds() {
				return 0.0;
			}
		};
		assertEquals(0.0, scale.lowerBounds(), 0.0);
	}
}

// PlotAxis.java
package jahuwaldt.plot;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;

/**
 *  <p> This class provides a plot axis that can be used to
 *      label a plot.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class PlotAxis extends Object {

    /**
     *  The default axis label.
     */
    public static final String DEFAULT_LABEL = """";

    /**
     *  The default axis label font.
     */
    public static final Font DEFAULT_LABEL_FONT = new Font(""SansSerif"", Font.PLAIN, 12);

    /**
     *  The default axis label color.
     */
    public static final Color DEFAULT_LABEL_COLOR = Color.black;

    /**
     *  The default axis label position.
     */
    public static final int DEFAULT_LABEL_POSITION = PlotConstants.BOTTOM;

    /**
     *  The default axis label offset.
     */
    public static final int DEFAULT_LABEL_OFFSET = 0;

    /**
     *  The default axis tick mark length.
     */
    public static final int DEFAULT_TICK_LENGTH = 5;

    /**
     *  The default axis tick mark color.
     */
    public static final Color DEFAULT_TICK_COLOR = Color.black;

    /**
     *  The default axis tick mark position.
     */
    public static final int DEFAULT_TICK_POSITION = PlotConstants.BOTTOM;

    /**
     *  The default axis tick mark offset.
     */
    public static final int DEFAULT_TICK_OFFSET = 0;

    /**
     *  The default axis tick mark label font.
     */
    public static final Font DEFAULT_TICK_LABEL_FONT = new Font(""SansSerif"", Font.PLAIN, 10);

    /**
     *  The default axis tick mark label color.
     */
    public static final Color DEFAULT_TICK_LABEL_COLOR = Color.black;

    /**
     *  The default axis tick mark label position.
     */
    public static final int DEFAULT_TICK_LABEL_POSITION = PlotConstants.BOTTOM;

    /**
     *  The default axis tick mark label offset.
     */
    public static final int DEFAULT_TICK_LABEL_OFFSET = 0;

    /**
     *  The default axis tick mark label format.
     */
    public static final NumberFormat DEFAULT_TICK_LABEL_FORMAT = new DecimalFormat(""0.0"");

    /**
     *  The default axis tick mark label precision.
     */
    public static final int DEFAULT_TICK_LABEL_PRECISION = 1;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final double DEFAULT_TICK_LABEL_ROTATION = 0.0;

    /**
     *  The default axis tick mark label justification.
     */
    public static final int DEFAULT_TICK_LABEL_JUSTIFICATION = PlotConstants.CENTER;

    /**
     *  The default axis tick mark label spacing.
     */
    public static final int DEFAULT_TICK_LABEL_SPACING = 0;

    /**
     *  The default axis tick mark label exponent.
     */
    public static final boolean DEFAULT_TICK_LABEL_EXPONENT = false;

    /**
     *  The default axis tick mark label exponent font.
     */
    public static final Font DEFAULT_TICK_LABEL_EXPONENT_FONT = new Font(""SansSerif"", Font.PLAIN, 10);

    /**
     *  The default axis tick mark label exponent color.
     */
    public static final Color DEFAULT_TICK_LABEL_EXPONENT_COLOR = Color.black;

    /**
     *  The default axis tick mark label exponent position.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_POSITION = PlotConstants.BOTTOM;

    /**
     *  The default axis tick mark label exponent offset.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_OFFSET = 0;

    /**
     *  The default axis tick mark label exponent format.
     */
    public static final NumberFormat DEFAULT_TICK_LABEL_EXPONENT_FORMAT = new DecimalFormat(""0.0"");

    /**
     *  The default axis tick mark label exponent precision.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_PRECISION = 1;

    /**
     *  The default axis tick mark label exponent rotation.
     */
    public static final double DEFAULT_TICK_LABEL_EXPONENT_ROTATION = 0.0;

    /**
     *  The default axis tick mark label exponent justification.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_JUSTIFICATION = PlotConstants.CENTER;

    /**
     *  The default axis tick mark label exponent spacing.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_SPACING = 0;

    /**
     *  The default axis tick mark label exponent exponent.
     */
    public static final boolean DEFAULT_TICK_LABEL_EXPONENT_EXPONENT = false;

    /**
     *  The default axis tick mark label exponent exponent font.
     */
    public static final Font DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_FONT = new Font(""SansSerif"", Font.PLAIN, 10);

    /**
     *  The default axis tick mark label exponent exponent color.
     */
    public static final Color DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_COLOR = Color.black;

    /**
     *  The default axis tick mark label exponent exponent position.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_POSITION = PlotConstants.BOTTOM;

    /**
     *  The default axis tick mark label exponent exponent offset.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_OFFSET = 0;

    /**
     *  The default axis tick mark label exponent exponent format.
     */
    public static final NumberFormat DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_FORMAT = new DecimalFormat(""0.0"");

    /**
     *  The default axis tick mark label exponent exponent precision.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_PRECISION = 1;

    /**
     *  The default axis tick mark label exponent exponent rotation.
     */
    public static final double DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_ROTATION = 0.0;

    /**
     *  The default axis tick mark label exponent exponent justification.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_JUSTIFICATION = PlotConstants.CENTER;

    /**
     *  The default axis tick mark label exponent exponent spacing.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_SPACING = 0;

    /**
     *  The default axis tick mark label exponent exponent exponent.
     */
    public static final boolean DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT = false;

    /**
     *  The default axis tick mark label exponent exponent exponent font.
     */
    public static final Font DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_FONT = new Font(""SansSerif"", Font.PLAIN, 10);

    /**
     *  The default axis tick mark label exponent exponent exponent color.
     */
    public static final Color DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_COLOR = Color.black;

    /**
     *  The default axis tick mark label exponent exponent exponent position.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_POSITION = PlotConstants.BOTTOM;

    /**
     *  The default axis tick mark label exponent exponent exponent offset.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_OFFSET = 0;

    /**
     *  The default axis tick mark label exponent exponent exponent format.
     */
    public static final NumberFormat DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_FORMAT = new DecimalFormat(""0.0"");

    /**
     *  The default axis tick mark label exponent exponent exponent precision.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_PRECISION = 1;

    /**
     *  The default axis tick mark label exponent exponent exponent rotation.
     */
    public static final double DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_ROTATION = 0.0;

    /**
     *  The default axis tick mark label exponent exponent exponent justification.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_JUSTIFICATION = PlotConstants.CENTER;

    /**
     *  The default axis tick mark label exponent exponent exponent spacing.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_SPACING = 0;

    /**
     *  The default axis tick mark label exponent exponent exponent exponent.
     */
    public static final boolean DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_EXPONENT = false;

    /**
     *  The default axis tick mark label exponent exponent exponent exponent font.
     */
    public static final Font DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_EXPONENT_FONT = new Font(""SansSerif"", Font.PLAIN, 10);

    /**
     *  The default axis tick mark label exponent exponent exponent exponent color.
     */
    public static final Color DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_EXPONENT_COLOR = Color.black;

    /**
     *  The default axis tick mark label exponent exponent exponent exponent position.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_EXPONENT_POSITION = PlotConstants.BOTTOM;

    /**
     *  The default axis tick mark label exponent exponent exponent exponent offset.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_EXPONENT_OFFSET = 0;

    /**
     *  The default axis tick mark label exponent exponent exponent exponent format.
     */
    public static final NumberFormat DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_EXPONENT_FORMAT = new DecimalFormat(""0.0"");

    /**
     *  The default axis tick mark label exponent exponent exponent exponent precision.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_EXPONENT_PRECISION = 1;

    /**
     *  The default axis tick mark label exponent exponent exponent exponent rotation.
     */
    public static final double DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_EXPONENT_ROTATION = 0.0;

    /**
     *  The default axis tick mark label exponent exponent exponent exponent justification.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_EXPONENT_JUSTIFICATION = PlotConstants.CENTER;

    /**
     *  The default axis tick mark label exponent exponent exponent exponent spacing.
     */
    public static final int DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_EXPONENT_SPACING = 0;

    /**
     *  The default axis tick mark label exponent exponent exponent exponent exponent.
     */
    public static final boolean DEFAULT_TICK_LABEL_EXPONENT_EXPONENT_EXPONENT_EXPONENT_EXPONENT = false;

    /**
     *  The default axis tick mark label exponent exponent exponent exponent exponent font.
     */
    public static final Font DE"
cmpl-6x9M5dBPQQTD9GMNXvecNmEeEyu6Q,/EvoSuiteBenchmark/scenario1/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale1.java,130.15571546554565,length,"// LinearAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides linear scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LinearAxisScale extends Object implements PlotAxisScale {

    public double upperBounds() {
        return 1.0;
    }
}
","// LinearAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains ten unit test cases for the {@link LinearAxisScale#upperBounds()} method.
*/
class LinearAxisScaleTest {","// LinearAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains ten unit test cases for the {@link LinearAxisScale#upperBounds()} method.
*/
class LinearAxisScaleTest {

	/**
	* Test method for {@link LinearAxisScale#upperBounds()}.
	*/
	@Test
	void testUpperBounds() {
		LinearAxisScale scale = new LinearAxisScale();
		assertEquals(1.0, scale.upperBounds(), 0.0);
	}
}

// LogAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides logarithmic scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LogAxisScale extends Object implements PlotAxisScale {

    public double upperBounds() {
        return 1.0;
    }
}

// LogAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogAxisScale}.
* It contains ten unit test cases for the {@link LogAxisScale#upperBounds()} method.
*/
class LogAxisScaleTest {
		
	/**
	* Test method for {@link LogAxisScale#upperBounds()}.
	*/
	@Test
	void testUpperBounds() {
		LogAxisScale scale = new LogAxisScale();
		assertEquals(1.0, scale.upperBounds(), 0.0);
	}
}

// PlotAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This interface defines the methods that must be implemented
 *      by any object that is to be used to scale a plot axis.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public interface PlotAxisScale {

    /**
     *  Returns the upper bounds of the axis scale.
     *
     *  @return The upper bounds of the axis scale.
     */
    public double upperBounds();
}

// PlotAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotAxisScale}.
* It contains ten unit test cases for the {@link PlotAxisScale#upperBounds()} method.
*/
class PlotAxisScaleTest {
		
	/**
	* Test method for {@link PlotAxisScale#upperBounds()}.
	*/
	@Test
	void testUpperBounds() {
		PlotAxisScale scale = new PlotAxisScale() {
			public double upperBounds() {
				return 1.0;
			}
		};
		assertEquals(1.0, scale.upperBounds(), 0.0);
	}
}

// PlotAxis.java
package jahuwaldt.plot;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.text.DecimalFormat;
import java.text.NumberFormat;

/**
 *  <p> This class represents a plot axis.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class PlotAxis extends Object {

    /**
     *  The default axis label font.
     */
    public static final Font DEFAULT_LABEL_FONT = new Font(""SansSerif"", Font.PLAIN, 12);

    /**
     *  The default axis label color.
     */
    public static final Color DEFAULT_LABEL_COLOR = Color.black;

    /**
     *  The default axis line color.
     */
    public static final Color DEFAULT_LINE_COLOR = Color.black;

    /**
     *  The default axis tick mark color.
     */
    public static final Color DEFAULT_TICK_COLOR = Color.black;

    /**
     *  The default axis tick mark length.
     */
    public static final int DEFAULT_TICK_LENGTH = 5;

    /**
     *  The default axis tick mark spacing.
     */
    public static final int DEFAULT_TICK_SPACING = 10;

    /**
     *  The default axis tick mark font.
     */
    public static final Font DEFAULT_TICK_FONT = new Font(""SansSerif"", Font.PLAIN, 10);

    /**
     *  The default axis tick mark color.
     */
    public static final Color DEFAULT_TICK_LABEL_COLOR = Color.black;

    /**
     *  The default axis tick mark label format.
     */
    public static final NumberFormat DEFAULT_TICK_LABEL_FORMAT = new DecimalFormat(""0.0"");

    /**
     *  The default axis tick mark label spacing.
     */
    public static final int DEFAULT_TICK_LABEL_SPACING = 10;

    /**
     *  The default axis tick mark label orientation.
     */
    public static final int DEFAULT_TICK_LABEL_ORIENTATION = PlotConstants.HORIZONTAL;

    /**
     *  The default axis tick mark label justification.
     */
    public static final int DEFAULT_TICK_LABEL_JUSTIFICATION = PlotConstants.CENTER;

    /**
     *  The default axis tick mark label offset.
     */
    public static final int DEFAULT_TICK_LABEL_OFFSET = 0;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final double DEFAULT_TICK_LABEL_ROTATION = 0.0;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_HORIZONTAL_AXES = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_VERTICAL_AXES = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_HORIZONTAL_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_VERTICAL_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_HORIZONTAL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_VERTICAL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_HORIZONTAL_AXIS_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_VERTICAL_AXIS_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_HORIZONTAL_AXIS_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_VERTICAL_AXIS_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_HORIZONTAL_AXIS_LABEL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_VERTICAL_AXIS_LABEL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_HORIZONTAL_AXIS_LABEL_TICK_LABEL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_VERTICAL_AXIS_LABEL_TICK_LABEL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_HORIZONTAL_AXIS_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_VERTICAL_AXIS_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_HORIZONTAL_AXIS_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_VERTICAL_AXIS_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_HORIZONTAL_AXIS_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_VERTICAL_AXIS_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_HORIZONTAL_AXIS_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_VERTICAL_AXIS_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_HORIZONTAL_AXIS_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_VERTICAL_AXIS_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_HORIZONTAL_AXIS_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_VERTICAL_AXIS_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_HORIZONTAL_AXIS_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_VERTICAL_AXIS_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_HORIZONTAL_AXIS_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABELS = false;

    /**
     *  The default axis tick mark label rotation.
     */
    public static final boolean DEFAULT_TICK_LABEL_ROTATION_ENABLED_ONLY_FOR_VERTICAL_AXIS_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABEL_TICK_LABELS = false;

    /**
     *  The"
cmpl-6x9OBLTn6drXSW42HJiDOsUox4TT8,/EvoSuiteBenchmark/scenario1/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale2.java,135.5418610572815,length,"// LinearAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides linear scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LinearAxisScale extends Object implements PlotAxisScale {

    public AxisLimitData findGoodLimits(double aLB, double aUB) {
        //	The lower limit and tick mark spacing being calculated.
        double s = 0., r = 0.;
        //	Make sure we don't have a degenerate case.
        if (Math.abs(aUB - aLB) <= 0.000001) {
            if (aUB > 0.) {
                aUB = 2. * aUB;
                aLB = 0.;
            } else if (aLB < 0) {
                aLB = 2. * aLB;
                aUB = 0.;
            }
            if (Math.abs(aUB - aLB) <= 0.000001) {
                aLB = lowerBounds();
                aUB = upperBounds();
            }
        }
        if (DEBUG) {
            System.out.println(""In findGoodLimits()..."");
            System.out.println(""   aLB = "" + aLB + "", aUB = "" + aUB);
        }
        //	Object used to return results.
        AxisLimitData limData = new AxisLimitData();
        boolean done = false;
        while (!done) {
            done = true;
            double ub = aUB;
            double lb = aLB;
            double delta = ub - lb;
            //	Scale up by s, a power of 10, so range (delta) exceeds 1.
            s = 1.;
            while (delta * s < 10.) s *= 10.;
            //	Find power of 10 quantum, r, such that delta/10 <= r < delta.
            r = 1. / s;
            while (10. * r < delta) r *= 10.;
            //	Set r=(1,2,5)*10**n so that 3-5 quanta cover range.
            if (r >= delta / 2.)
                r /= 2.;
            else if (r < delta / 5.)
                r *= 2.;
            limData.ub = modceil(ub, r);
            limData.lb = modfloor(lb, r);
            //	If lower bound is <= r and > 0, then repeat.
            if (limData.lb <= r && limData.lb > 0.) {
                aLB = 0.;
                done = false;
                //	If upper bound >= -r and < 0, then repeat.
            } else if (limData.ub >= -r && limData.ub < 0.) {
                aUB = 0.;
                done = false;
            }
        }
        //	Save off tick mark spacing.
        limData.quantum = r;
        if (DEBUG) {
            System.out.println(""    limData.lb = "" + limData.lb + "", limData.ub = "" + limData.ub + "", limData.quantum = "" + limData.quantum);
        }
        return limData;
    }
}
","// LinearAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains ten unit test cases for the {@link LinearAxisScale#findGoodLimits(double, double)} method.
*/
class LinearAxisScaleTest {","// LinearAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains ten unit test cases for the {@link LinearAxisScale#findGoodLimits(double, double)} method.
*/
class LinearAxisScaleTest {

	/**
	* Test case 1 for {@link LinearAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits1() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 0.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(0.0, result.ub, 0.0);
		assertEquals(0.0, result.quantum, 0.0);
	}
	
	/**
	* Test case 2 for {@link LinearAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits2() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 1.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(1.0, result.ub, 0.0);
		assertEquals(1.0, result.quantum, 0.0);
	}
	
	/**
	* Test case 3 for {@link LinearAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits3() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 2.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(2.0, result.ub, 0.0);
		assertEquals(1.0, result.quantum, 0.0);
	}
	
	/**
	* Test case 4 for {@link LinearAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits4() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 3.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(3.0, result.ub, 0.0);
		assertEquals(1.0, result.quantum, 0.0);
	}
	
	/**
	* Test case 5 for {@link LinearAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits5() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 4.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(4.0, result.ub, 0.0);
		assertEquals(1.0, result.quantum, 0.0);
	}
	
	/**
	* Test case 6 for {@link LinearAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits6() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 5.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(5.0, result.ub, 0.0);
		assertEquals(1.0, result.quantum, 0.0);
	}
	
	/**
	* Test case 7 for {@link LinearAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits7() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 6.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(6.0, result.ub, 0.0);
		assertEquals(1.0, result.quantum, 0.0);
	}
	
	/**
	* Test case 8 for {@link LinearAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits8() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 7.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(7.0, result.ub, 0.0);
		assertEquals(1.0, result.quantum, 0.0);
	}
	
	/**
	* Test case 9 for {@link LinearAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits9() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 8.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(8.0, result.ub, 0.0);
		assertEquals(1.0, result.quantum, 0.0);
	}
	
	/**
	* Test case 10 for {@link LinearAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits10() {
		LinearAxisScale scale = new LinearAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 9.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(9.0, result.ub, 0.0);
		assertEquals(1.0, result.quantum, 0.0);
	}
	
}

// LogAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides logarithmic scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LogAxisScale extends Object implements PlotAxisScale {

    public AxisLimitData findGoodLimits(double aLB, double aUB) {
        //	The lower limit and tick mark spacing being calculated.
        double s = 0., r = 0.;
        //	Make sure we don't have a degenerate case.
        if (Math.abs(aUB - aLB) <= 0.000001) {
            if (aUB > 0.) {
                aUB = 2. * aUB;
                aLB = 0.;
            } else if (aLB < 0) {
                aLB = 2. * aLB;
                aUB = 0.;
            }
            if (Math.abs(aUB - aLB) <= 0.000001) {
                aLB = lowerBounds();
                aUB = upperBounds();
            }
        }
        if (DEBUG) {
            System.out.println(""In findGoodLimits()..."");
            System.out.println(""   aLB = "" + aLB + "", aUB = "" + aUB);
        }
        //	Object used to return results.
        AxisLimitData limData = new AxisLimitData();
        boolean done = false;
        while (!done) {
            done = true;
            double ub = aUB;
            double lb = aLB;
            double delta = ub - lb;
            //	Scale up by s, a power of 10, so range (delta) exceeds 1.
            s = 1.;
            while (delta * s < 10.) s *= 10.;
            //	Find power of 10 quantum, r, such that delta/10 <= r < delta.
            r = 1. / s;
            while (10. * r < delta) r *= 10.;
            //	Set r=(1,2,5)*10**n so that 3-5 quanta cover range.
            if (r >= delta / 2.)
                r /= 2.;
            else if (r < delta / 5.)
                r *= 2.;
            limData.ub = modceil(ub, r);
            limData.lb = modfloor(lb, r);
            //	If lower bound is <= r and > 0, then repeat.
            if (limData.lb <= r && limData.lb > 0.) {
                aLB = 0.;
                done = false;
                //	If upper bound >= -r and < 0, then repeat.
            } else if (limData.ub >= -r && limData.ub < 0.) {
                aUB = 0.;
                done = false;
            }
        }
        //	Save off tick mark spacing.
        limData.quantum = r;
        if (DEBUG) {
            System.out.println(""    limData.lb = "" + limData.lb + "", limData.ub = "" + limData.ub + "", limData.quantum = "" + limData.quantum);
        }
        return limData;
    }
}

// LogAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogAxisScale}.
* It contains ten unit test cases for the {@link LogAxisScale#findGoodLimits(double, double)} method.
*/
class LogAxisScaleTest {
		
	/**
	* Test case 1 for {@link LogAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits1() {
		LogAxisScale scale = new LogAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 0.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(0.0, result.ub, 0.0);
		assertEquals(0.0, result.quantum, 0.0);
	}
	
	/**
	* Test case 2 for {@link LogAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits2() {
		LogAxisScale scale = new LogAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 1.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(1.0, result.ub, 0.0);
		assertEquals(1.0, result.quantum, 0.0);
	}
	
	/**
	* Test case 3 for {@link LogAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits3() {
		LogAxisScale scale = new LogAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 2.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(2.0, result.ub, 0.0);
		assertEquals(1.0, result.quantum, 0.0);
	}
	
	/**
	* Test case 4 for {@link LogAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits4() {
		LogAxisScale scale = new LogAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 3.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(3.0, result.ub, 0.0);
		assertEquals(1.0, result.quantum, 0.0);
	}
	
	/**
	* Test case 5 for {@link LogAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits5() {
		LogAxisScale scale = new LogAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 4.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(4.0, result.ub, 0.0);
		assertEquals(1.0, result.quantum, 0.0);
	}
	
	/**
	* Test case 6 for {@link LogAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits6() {
		LogAxisScale scale = new LogAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 5.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(5.0, result.ub, 0.0);
		assertEquals(1.0, result.quantum, 0.0);
	}
	
	/**
	* Test case 7 for {@link LogAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits7() {
		LogAxisScale scale = new LogAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 6.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(6.0, result.ub, 0.0);
		assertEquals(1.0, result.quantum, 0.0);
	}
	
	/**
	* Test case 8 for {@link LogAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits8() {
		LogAxisScale scale = new LogAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 7.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(7.0, result.ub, 0.0);
		assertEquals(1.0, result.quantum, 0.0);
	}
	
	/**
	* Test case 9 for {@link LogAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits9() {
		LogAxisScale scale = new LogAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 8.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(8.0, result.ub, 0.0);
		assertEquals(1.0, result.quantum, 0.0);
	}
	
	/**
	* Test case 10 for {@link LogAxisScale#findGoodLimits(double, double)}.
	*/
	@Test
	public void testFindGoodLimits10() {
		LogAxisScale scale = new LogAxisScale();
		AxisLimitData result = scale.findGoodLimits(0.0, 9.0);
		assertEquals(0.0, result.lb, 0.0);
		assertEquals(9.0, result.ub, 0.0);
		assertEquals(1.0, result.quantum, 0.0);
	}
	
}

// PlotAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This interface defines the methods that must be implemented
 *      by any object that is to be used to scale a plot axis.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:"
cmpl-6x9QMiuPxQrC0tOz6FDZhYhsGKc3Y,/EvoSuiteBenchmark/scenario1/29_apbsmem/src/main/java/jahuwaldt/plot/LinearAxisScale3.java,157.771226644516,length,"// LinearAxisScale.java
package jahuwaldt.plot;

/**
 *  <p> This object provides linear scaling for plot axes.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version January 10, 2001
 */
public class LinearAxisScale extends Object implements PlotAxisScale {

    public TickMarkData calcTickMarks(double quantum, double aLB, double aUB, double xA, double xB) {
        double xl = 0;
        double xu = 0;
        double q = quantum;
        if (q > 0.) {
            xl = modfloor(aLB, q);
            xu = modfloor(aUB - q / 10., q / 5.) + q / 10.;
        } else {
            xl = modfloor(aUB, q);
            xu = modfloor(aLB + q / 10., q / 5.) - q / 10.;
        }
        //	Determine the number of tick marks.
        int xn = (int) ((xu - xl) / (Math.abs(quantum) / 5.));
        if (DEBUG) {
            System.out.println(""In calcTickMarks()..."");
            System.out.println(""    quantum = "" + quantum + "", aLB = "" + aLB + "", aUB = "" + aUB);
            System.out.println(""    xA = "" + xA + "", xB = "" + xB);
            System.out.println(""    xl = "" + xl + "", xu = "" + xu);
            System.out.println(""    xn = "" + xn);
        }
        //	Allocate memory for tick mark arrays.
        int[] mark = new int[xn];
        int[] lmark = new int[xn];
        float[] markValue = new float[xn];
        xn = 0;
        int i = 0;
        for (double x = xl; x <= xu; x += Math.abs(quantum) / 5., ++i) {
            //	Bounds check.
            if (q > 0.)
                if (x <= aLB || x >= aUB)
                    continue;
            if (q < 0.)
                if (x >= aLB || x <= aUB)
                    continue;
            //	Store tick mark.
            mark[xn] = (int) (func(x) * xA + xB);
            markValue[xn] = (float) x;
            if (i % 5 != 0)
                //	Minor tick mark.
                lmark[xn++] = PlotAxis.kTick;
            else
                //	Major tick mark.
                lmark[xn++] = 3 * PlotAxis.kTick;
        }
        if (DEBUG) {
            System.out.println(""Tick mark values:"");
            int length = markValue.length;
            for (i = 0; i < length; ++i) System.out.print(""   "" + markValue[i]);
            System.out.println();
        }
        //	Create a tick mark data object and pass it out.
        TickMarkData data = new TickMarkData();
        data.mark = mark;
        data.lmark = lmark;
        data.markValue = markValue;
        return data;
    }
}
","// LinearAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains ten unit test cases for the {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.
*/
class LinearAxisScaleTest {","// LinearAxisScaleTest.java
package jahuwaldt.plot;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LinearAxisScale}.
* It contains ten unit test cases for the {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.
*/
class LinearAxisScaleTest {

	/**
	* Test case for {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.
	*/
	@Test
	void testCalcTickMarks1() {
		double quantum = 1.0;
		double aLB = 0.0;
		double aUB = 10.0;
		double xA = 1.0;
		double xB = 0.0;
		TickMarkData data = new LinearAxisScale().calcTickMarks(quantum, aLB, aUB, xA, xB);
		assertEquals(10, data.mark.length);
		assertEquals(10, data.lmark.length);
		assertEquals(10, data.markValue.length);
		assertEquals(0, data.mark[0]);
		assertEquals(PlotAxis.kTick, data.lmark[0]);
		assertEquals(0.0f, data.markValue[0]);
		assertEquals(1, data.mark[1]);
		assertEquals(PlotAxis.kTick, data.lmark[1]);
		assertEquals(1.0f, data.markValue[1]);
		assertEquals(2, data.mark[2]);
		assertEquals(PlotAxis.kTick, data.lmark[2]);
		assertEquals(2.0f, data.markValue[2]);
		assertEquals(3, data.mark[3]);
		assertEquals(PlotAxis.kTick, data.lmark[3]);
		assertEquals(3.0f, data.markValue[3]);
		assertEquals(4, data.mark[4]);
		assertEquals(PlotAxis.kTick, data.lmark[4]);
		assertEquals(4.0f, data.markValue[4]);
		assertEquals(5, data.mark[5]);
		assertEquals(3 * PlotAxis.kTick, data.lmark[5]);
		assertEquals(5.0f, data.markValue[5]);
		assertEquals(6, data.mark[6]);
		assertEquals(PlotAxis.kTick, data.lmark[6]);
		assertEquals(6.0f, data.markValue[6]);
		assertEquals(7, data.mark[7]);
		assertEquals(PlotAxis.kTick, data.lmark[7]);
		assertEquals(7.0f, data.markValue[7]);
		assertEquals(8, data.mark[8]);
		assertEquals(PlotAxis.kTick, data.lmark[8]);
		assertEquals(8.0f, data.markValue[8]);
		assertEquals(9, data.mark[9]);
		assertEquals(PlotAxis.kTick, data.lmark[9]);
		assertEquals(9.0f, data.markValue[9]);
	}
	
	/**
	* Test case for {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.
	*/
	@Test
	void testCalcTickMarks2() {
		double quantum = 1.0;
		double aLB = 0.0;
		double aUB = 10.0;
		double xA = 1.0;
		double xB = 10.0;
		TickMarkData data = new LinearAxisScale().calcTickMarks(quantum, aLB, aUB, xA, xB);
		assertEquals(10, data.mark.length);
		assertEquals(10, data.lmark.length);
		assertEquals(10, data.markValue.length);
		assertEquals(10, data.mark[0]);
		assertEquals(PlotAxis.kTick, data.lmark[0]);
		assertEquals(0.0f, data.markValue[0]);
		assertEquals(11, data.mark[1]);
		assertEquals(PlotAxis.kTick, data.lmark[1]);
		assertEquals(1.0f, data.markValue[1]);
		assertEquals(12, data.mark[2]);
		assertEquals(PlotAxis.kTick, data.lmark[2]);
		assertEquals(2.0f, data.markValue[2]);
		assertEquals(13, data.mark[3]);
		assertEquals(PlotAxis.kTick, data.lmark[3]);
		assertEquals(3.0f, data.markValue[3]);
		assertEquals(14, data.mark[4]);
		assertEquals(PlotAxis.kTick, data.lmark[4]);
		assertEquals(4.0f, data.markValue[4]);
		assertEquals(15, data.mark[5]);
		assertEquals(3 * PlotAxis.kTick, data.lmark[5]);
		assertEquals(5.0f, data.markValue[5]);
		assertEquals(16, data.mark[6]);
		assertEquals(PlotAxis.kTick, data.lmark[6]);
		assertEquals(6.0f, data.markValue[6]);
		assertEquals(17, data.mark[7]);
		assertEquals(PlotAxis.kTick, data.lmark[7]);
		assertEquals(7.0f, data.markValue[7]);
		assertEquals(18, data.mark[8]);
		assertEquals(PlotAxis.kTick, data.lmark[8]);
		assertEquals(8.0f, data.markValue[8]);
		assertEquals(19, data.mark[9]);
		assertEquals(PlotAxis.kTick, data.lmark[9]);
		assertEquals(9.0f, data.markValue[9]);
	}
	
	/**
	* Test case for {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.
	*/
	@Test
	void testCalcTickMarks3() {
		double quantum = 1.0;
		double aLB = 0.0;
		double aUB = 10.0;
		double xA = 2.0;
		double xB = 10.0;
		TickMarkData data = new LinearAxisScale().calcTickMarks(quantum, aLB, aUB, xA, xB);
		assertEquals(10, data.mark.length);
		assertEquals(10, data.lmark.length);
		assertEquals(10, data.markValue.length);
		assertEquals(10, data.mark[0]);
		assertEquals(PlotAxis.kTick, data.lmark[0]);
		assertEquals(0.0f, data.markValue[0]);
		assertEquals(13, data.mark[1]);
		assertEquals(PlotAxis.kTick, data.lmark[1]);
		assertEquals(1.0f, data.markValue[1]);
		assertEquals(16, data.mark[2]);
		assertEquals(PlotAxis.kTick, data.lmark[2]);
		assertEquals(2.0f, data.markValue[2]);
		assertEquals(19, data.mark[3]);
		assertEquals(PlotAxis.kTick, data.lmark[3]);
		assertEquals(3.0f, data.markValue[3]);
		assertEquals(22, data.mark[4]);
		assertEquals(PlotAxis.kTick, data.lmark[4]);
		assertEquals(4.0f, data.markValue[4]);
		assertEquals(25, data.mark[5]);
		assertEquals(3 * PlotAxis.kTick, data.lmark[5]);
		assertEquals(5.0f, data.markValue[5]);
		assertEquals(28, data.mark[6]);
		assertEquals(PlotAxis.kTick, data.lmark[6]);
		assertEquals(6.0f, data.markValue[6]);
		assertEquals(31, data.mark[7]);
		assertEquals(PlotAxis.kTick, data.lmark[7]);
		assertEquals(7.0f, data.markValue[7]);
		assertEquals(34, data.mark[8]);
		assertEquals(PlotAxis.kTick, data.lmark[8]);
		assertEquals(8.0f, data.markValue[8]);
		assertEquals(37, data.mark[9]);
		assertEquals(PlotAxis.kTick, data.lmark[9]);
		assertEquals(9.0f, data.markValue[9]);
	}
	
	/**
	* Test case for {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.
	*/
	@Test
	void testCalcTickMarks4() {
		double quantum = 1.0;
		double aLB = 0.0;
		double aUB = 10.0;
		double xA = -1.0;
		double xB = 10.0;
		TickMarkData data = new LinearAxisScale().calcTickMarks(quantum, aLB, aUB, xA, xB);
		assertEquals(10, data.mark.length);
		assertEquals(10, data.lmark.length);
		assertEquals(10, data.markValue.length);
		assertEquals(10, data.mark[0]);
		assertEquals(PlotAxis.kTick, data.lmark[0]);
		assertEquals(0.0f, data.markValue[0]);
		assertEquals(9, data.mark[1]);
		assertEquals(PlotAxis.kTick, data.lmark[1]);
		assertEquals(1.0f, data.markValue[1]);
		assertEquals(8, data.mark[2]);
		assertEquals(PlotAxis.kTick, data.lmark[2]);
		assertEquals(2.0f, data.markValue[2]);
		assertEquals(7, data.mark[3]);
		assertEquals(PlotAxis.kTick, data.lmark[3]);
		assertEquals(3.0f, data.markValue[3]);
		assertEquals(6, data.mark[4]);
		assertEquals(PlotAxis.kTick, data.lmark[4]);
		assertEquals(4.0f, data.markValue[4]);
		assertEquals(5, data.mark[5]);
		assertEquals(3 * PlotAxis.kTick, data.lmark[5]);
		assertEquals(5.0f, data.markValue[5]);
		assertEquals(4, data.mark[6]);
		assertEquals(PlotAxis.kTick, data.lmark[6]);
		assertEquals(6.0f, data.markValue[6]);
		assertEquals(3, data.mark[7]);
		assertEquals(PlotAxis.kTick, data.lmark[7]);
		assertEquals(7.0f, data.markValue[7]);
		assertEquals(2, data.mark[8]);
		assertEquals(PlotAxis.kTick, data.lmark[8]);
		assertEquals(8.0f, data.markValue[8]);
		assertEquals(1, data.mark[9]);
		assertEquals(PlotAxis.kTick, data.lmark[9]);
		assertEquals(9.0f, data.markValue[9]);
	}
	
	/**
	* Test case for {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.
	*/
	@Test
	void testCalcTickMarks5() {
		double quantum = 1.0;
		double aLB = 0.0;
		double aUB = 10.0;
		double xA = -2.0;
		double xB = 10.0;
		TickMarkData data = new LinearAxisScale().calcTickMarks(quantum, aLB, aUB, xA, xB);
		assertEquals(10, data.mark.length);
		assertEquals(10, data.lmark.length);
		assertEquals(10, data.markValue.length);
		assertEquals(10, data.mark[0]);
		assertEquals(PlotAxis.kTick, data.lmark[0]);
		assertEquals(0.0f, data.markValue[0]);
		assertEquals(7, data.mark[1]);
		assertEquals(PlotAxis.kTick, data.lmark[1]);
		assertEquals(1.0f, data.markValue[1]);
		assertEquals(4, data.mark[2]);
		assertEquals(PlotAxis.kTick, data.lmark[2]);
		assertEquals(2.0f, data.markValue[2]);
		assertEquals(1, data.mark[3]);
		assertEquals(PlotAxis.kTick, data.lmark[3]);
		assertEquals(3.0f, data.markValue[3]);
		assertEquals(-2, data.mark[4]);
		assertEquals(PlotAxis.kTick, data.lmark[4]);
		assertEquals(4.0f, data.markValue[4]);
		assertEquals(-5, data.mark[5]);
		assertEquals(3 * PlotAxis.kTick, data.lmark[5]);
		assertEquals(5.0f, data.markValue[5]);
		assertEquals(-8, data.mark[6]);
		assertEquals(PlotAxis.kTick, data.lmark[6]);
		assertEquals(6.0f, data.markValue[6]);
		assertEquals(-11, data.mark[7]);
		assertEquals(PlotAxis.kTick, data.lmark[7]);
		assertEquals(7.0f, data.markValue[7]);
		assertEquals(-14, data.mark[8]);
		assertEquals(PlotAxis.kTick, data.lmark[8]);
		assertEquals(8.0f, data.markValue[8]);
		assertEquals(-17, data.mark[9]);
		assertEquals(PlotAxis.kTick, data.lmark[9]);
		assertEquals(9.0f, data.markValue[9]);
	}
	
	/**
	* Test case for {@link LinearAxisScale#calcTickMarks(double, double, double, double, double)} method.
	*/
	@Test
	void testCalcTickMarks6() {
		double quantum = 1.0;
		double aLB = 0.0;
		double aUB = 10.0;
		double xA = -1.0;
		double xB = -10.0;
		TickMarkData data = new LinearAxisScale().calcTickMarks(quantum, aLB, aUB, xA, xB);
		assertEquals(10, data.mark.length);
		assertEquals(10, data.lmark.length);
		assertEquals(10, data.markValue"
cmpl-6x9SuXfBwig0p2WvqZrlp2fOu6RC7,/EvoSuiteBenchmark/scenario1/29_apbsmem/src/main/java/jahuwaldt/plot/PlotDatum0.java,114.58582186698914,length,"// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    public boolean hasErrorBar() {
        return errBarFlg;
    }
}
","// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {","// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {

	/**
	* Test case for {@link PlotDatum#hasErrorBar()} method.
	*/
	@Test
	void testHasErrorBar() {
		PlotDatum datum = new PlotDatum();
		assertFalse(datum.hasErrorBar());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    public boolean hasErrorBar() {
        return errBarFlg;
    }
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#hasErrorBar()} method.
	*/
	@Test
	void testHasErrorBar() {
		PlotDatum datum = new PlotDatum();
		assertFalse(datum.hasErrorBar());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    public boolean hasErrorBar() {
        return errBarFlg;
    }
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#hasErrorBar()} method.
	*/
	@Test
	void testHasErrorBar() {
		PlotDatum datum = new PlotDatum();
		assertFalse(datum.hasErrorBar());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    public boolean hasErrorBar() {
        return errBarFlg;
    }
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#hasErrorBar()} method.
	*/
	@Test
	void testHasErrorBar() {
		PlotDatum datum = new PlotDatum();
		assertFalse(datum.hasErrorBar());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    public boolean hasErrorBar() {
        return errBarFlg;
    }
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#hasErrorBar()} method.
	*/
	@Test
	void testHasErrorBar() {
		PlotDatum datum = new PlotDatum();
		assertFalse(datum.hasErrorBar());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    public boolean hasErrorBar() {
        return errBarFlg;
    }
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#hasErrorBar()} method.
	*/
	@Test
	void testHasErrorBar() {
		PlotDatum datum = new PlotDatum();
		assertFalse(datum.hasErrorBar());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    public boolean hasErrorBar() {
        return errBarFlg;
    }
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#hasErrorBar()} method.
	*/
	@Test
	void testHasErrorBar() {
		PlotDatum datum = new PlotDatum();
		assertFalse(datum.hasErrorBar());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    public boolean hasErrorBar() {
        return errBarFlg;
    }
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#hasErrorBar()} method.
	*/
	@Test
	void testHasErrorBar() {
		PlotDatum datum = new PlotDatum();
		assertFalse(datum.hasErrorBar());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    public boolean hasErrorBar() {
        return errBarFlg;
    }
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#hasErrorBar()} method.
	*/
	@Test
	void testHasErrorBar() {
		PlotDatum datum = new PlotDatum();
		assertFalse(datum.hasErrorBar());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    public boolean hasErrorBar() {
        return errBarFlg;
    }
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#hasErrorBar()} method.
	*/
	@Test
	void testHasErrorBar() {
		PlotDatum datum = new PlotDatum();
		assertFalse(datum.hasErrorBar());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    public boolean hasErrorBar() {
        return errBarFlg;
    }
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#hasErrorBar()} method.
	*/
	@Test
	void testHasErrorBar() {
		PlotDatum datum = new PlotDatum();
		assertFalse(datum.hasErrorBar());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    public boolean hasErrorBar() {
        return errBarFlg;
    }
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#hasErrorBar()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#hasErrorBar()} method.
	*/
	@Test
	void testHasErrorBar() {
		PlotDatum datum = new PlotDatum();
		assertFalse(datum.hasErrorBar());
	}
}

// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    public boolean hasErrorBar() {
        return errBarFlg;
    }
}

// PlotDatumTest.java
package jahuwaldt.plot;
"
cmpl-6x9UlUMQoigbrkw00weGHCcpIaNJ0,/EvoSuiteBenchmark/scenario1/29_apbsmem/src/main/java/jahuwaldt/plot/PlotDatum1.java,144.72698783874512,length,"// PlotDatum.java
package jahuwaldt.plot;

import java.awt.Color;

/**
 *  <p> This class represents a single data point on a plot
 *      and includes all the information required by each point.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  June 1, 2000
 * @version November 20, 2000
 */
public class PlotDatum extends Object implements Cloneable, java.io.Serializable {

    public boolean connected() {
        return conFlg;
    }
}
","// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {","// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {

	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for the {@link PlotDatum#connected()} method.
*/
class PlotDatumTest {
		
	/**
	* Test case for {@link PlotDatum#connected()} method.
	*/
	@Test
	void testConnected() {
		PlotDatum datum = new PlotDatum();
		assertTrue(datum.connected());
	}
}

// PlotDatumTest.java
package jahuwaldt.plot;

import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotDatum}.
* It contains ten unit test cases for"
cmpl-6x9X6F1Ew56GVFx8TsVcXRqVZmPeA,/EvoSuiteBenchmark/scenario1/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun0.java,14.199446201324463,stop,"// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    public int size() {
        return data.size();
    }
}
","// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#size()} method.
*/
class PlotRunTest {","// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#size()} method.
*/
class PlotRunTest {

	/**
	* Test case for {@link PlotRun#size()} method.
	*/
	@Test
	void testSize() {
		PlotRun run = new PlotRun();
		assertEquals(0, run.size());
		
		run.add(new PlotDatum(1.0, 2.0));
		assertEquals(1, run.size());
		
		run.add(new PlotDatum(3.0, 4.0));
		assertEquals(2, run.size());
		
		run.add(new PlotDatum(5.0, 6.0));
		assertEquals(3, run.size());
		
		run.add(new PlotDatum(7.0, 8.0));
		assertEquals(4, run.size());
		
		run.add(new PlotDatum(9.0, 10.0));
		assertEquals(5, run.size());
		
		run.add(new PlotDatum(11.0, 12.0));
		assertEquals(6, run.size());
		
		run.add(new PlotDatum(13.0, 14.0));
		assertEquals(7, run.size());
		
		run.add(new PlotDatum(15.0, 16.0));
		assertEquals(8, run.size());
		
		run.add(new PlotDatum(17.0, 18.0));
		assertEquals(9, run.size());
		
		run.add(new PlotDatum(19.0, 20.0));
		assertEquals(10, run.size());
	}
}"
cmpl-6x9Y9VRo2LpNHdIzl6ClfHAqDGz9b,/EvoSuiteBenchmark/scenario1/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun1.java,127.91733813285828,length,"// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    public Object get(int index) {
        return data.get(index);
    }
}
","// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#get(int)} method.
*/
class PlotRunTest {","// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#get(int)} method.
*/
class PlotRunTest {

	/**
	* Test case for {@link PlotRun#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRun run = new PlotRun();
		assertEquals(0, run.size());
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(1, run.size());
		assertEquals(datum, run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		datum = new PlotDatum(3.0, 4.0);
		run.add(datum);
		assertEquals(2, run.size());
		assertEquals(datum, run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(2));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
	}
}

// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#get(int)} method.
*/
class PlotRunTest {
		
	/**
	* Test case for {@link PlotRun#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRun run = new PlotRun();
		assertEquals(0, run.size());
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(1, run.size());
		assertEquals(datum, run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		datum = new PlotDatum(3.0, 4.0);
		run.add(datum);
		assertEquals(2, run.size());
		assertEquals(datum, run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(2));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
	}
}

// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#get(int)} method.
*/
class PlotRunTest {
		
	/**
	* Test case for {@link PlotRun#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRun run = new PlotRun();
		assertEquals(0, run.size());
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(1, run.size());
		assertEquals(datum, run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		datum = new PlotDatum(3.0, 4.0);
		run.add(datum);
		assertEquals(2, run.size());
		assertEquals(datum, run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(2));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
	}
}

// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#get(int)} method.
*/
class PlotRunTest {
		
	/**
	* Test case for {@link PlotRun#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRun run = new PlotRun();
		assertEquals(0, run.size());
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(1, run.size());
		assertEquals(datum, run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		datum = new PlotDatum(3.0, 4.0);
		run.add(datum);
		assertEquals(2, run.size());
		assertEquals(datum, run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(2));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
	}
}

// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#get(int)} method.
*/
class PlotRunTest {
		
	/**
	* Test case for {@link PlotRun#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRun run = new PlotRun();
		assertEquals(0, run.size());
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(1, run.size());
		assertEquals(datum, run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		datum = new PlotDatum(3.0, 4.0);
		run.add(datum);
		assertEquals(2, run.size());
		assertEquals(datum, run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(2));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
	}
}

// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#get(int)} method.
*/
class PlotRunTest {
		
	/**
	* Test case for {@link PlotRun#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRun run = new PlotRun();
		assertEquals(0, run.size());
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(1, run.size());
		assertEquals(datum, run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		datum = new PlotDatum(3.0, 4.0);
		run.add(datum);
		assertEquals(2, run.size());
		assertEquals(datum, run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(2));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
	}
}

// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#get(int)} method.
*/
class PlotRunTest {
		
	/**
	* Test case for {@link PlotRun#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRun run = new PlotRun();
		assertEquals(0, run.size());
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(1, run.size());
		assertEquals(datum, run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		datum = new PlotDatum(3.0, 4.0);
		run.add(datum);
		assertEquals(2, run.size());
		assertEquals(datum, run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(2));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
	}
}

// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#get(int)} method.
*/
class PlotRunTest {
		
	/**
	* Test case for {@link PlotRun#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRun run = new PlotRun();
		assertEquals(0, run.size());
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(1, run.size());
		assertEquals(datum, run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		datum = new PlotDatum(3.0, 4.0);
		run.add(datum);
		assertEquals(2, run.size());
		assertEquals(datum, run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(2));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
	}
}

// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#get(int)} method.
*/
class PlotRunTest {
		
	/**
	* Test case for {@link PlotRun#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRun run = new PlotRun();
		assertEquals(0, run.size());
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(1, run.size());
		assertEquals(datum, run.get(0));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
		
		datum = new PlotDatum(3.0, 4.0);
		run.add(datum);
		assertEquals(2, run.size());
		assertEquals(datum, run.get(1));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(2));
		assertThrows(IndexOutOfBoundsException.class, () -> run.get(-1));
	}
}

// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#get(int"
cmpl-6x9aCByP9d08UZETMf0UqRMW98sYk,/EvoSuiteBenchmark/scenario1/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun2.java,40.269368171691895,stop,"// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    public Object remove(int index) {
        return data.remove(index);
    }
}
","// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#remove(int)} method.
*/
class PlotRunTest {","// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#remove(int)} method.
*/
class PlotRunTest {

	/**
	* Test case for {@link PlotRun#remove(int)} method.
	*/
	@Test
	void testRemove() {
		PlotRun run = new PlotRun();
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(datum, run.remove(0));
	}
	
	/**
	* Test case for {@link PlotRun#remove(int)} method.
	*/
	@Test
	void testRemove2() {
		PlotRun run = new PlotRun();
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(datum, run.remove(0));
	}
	
	/**
	* Test case for {@link PlotRun#remove(int)} method.
	*/
	@Test
	void testRemove3() {
		PlotRun run = new PlotRun();
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(datum, run.remove(0));
	}
	
	/**
	* Test case for {@link PlotRun#remove(int)} method.
	*/
	@Test
	void testRemove4() {
		PlotRun run = new PlotRun();
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(datum, run.remove(0));
	}
	
	/**
	* Test case for {@link PlotRun#remove(int)} method.
	*/
	@Test
	void testRemove5() {
		PlotRun run = new PlotRun();
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(datum, run.remove(0));
	}
	
	/**
	* Test case for {@link PlotRun#remove(int)} method.
	*/
	@Test
	void testRemove6() {
		PlotRun run = new PlotRun();
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(datum, run.remove(0));
	}
	
	/**
	* Test case for {@link PlotRun#remove(int)} method.
	*/
	@Test
	void testRemove7() {
		PlotRun run = new PlotRun();
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(datum, run.remove(0));
	}
	
	/**
	* Test case for {@link PlotRun#remove(int)} method.
	*/
	@Test
	void testRemove8() {
		PlotRun run = new PlotRun();
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(datum, run.remove(0));
	}
	
	/**
	* Test case for {@link PlotRun#remove(int)} method.
	*/
	@Test
	void testRemove9() {
		PlotRun run = new PlotRun();
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(datum, run.remove(0));
	}
	
	/**
	* Test case for {@link PlotRun#remove(int)} method.
	*/
	@Test
	void testRemove10() {
		PlotRun run = new PlotRun();
		PlotDatum datum = new PlotDatum(1.0, 2.0);
		run.add(datum);
		assertEquals(datum, run.remove(0));
	}
	
}"
cmpl-6x9bGjSQT4d3VpfdXxeY43nPpsgQG,/EvoSuiteBenchmark/scenario1/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRun3.java,85.81819558143616,stop,"// PlotRun.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a single run of data in a plot.
 *      A run is an array or list of PlotDatum objects.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version December 12, 2000
 */
public class PlotRun extends AbstractList implements Cloneable, java.io.Serializable {

    public Iterator iterator() {
        return data.iterator();
    }
}
","// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#iterator()} method.
*/
class PlotRunTest {","// PlotRunTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRun}.
* It contains ten unit test cases for the {@link PlotRun#iterator()} method.
*/
class PlotRunTest {

	/**
	* Test the {@link PlotRun#iterator()} method.
	*/
	@Test
	public void testIterator() {
		PlotRun run = new PlotRun();
		Iterator it = run.iterator();
		assertFalse(it.hasNext());
		
		run.add(new PlotDatum(1.0, 2.0));
		it = run.iterator();
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(1.0, 2.0), it.next());
		assertFalse(it.hasNext());
		
		run.add(new PlotDatum(3.0, 4.0));
		it = run.iterator();
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(1.0, 2.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(3.0, 4.0), it.next());
		assertFalse(it.hasNext());
		
		run.add(new PlotDatum(5.0, 6.0));
		it = run.iterator();
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(1.0, 2.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(3.0, 4.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(5.0, 6.0), it.next());
		assertFalse(it.hasNext());
		
		run.add(new PlotDatum(7.0, 8.0));
		it = run.iterator();
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(1.0, 2.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(3.0, 4.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(5.0, 6.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(7.0, 8.0), it.next());
		assertFalse(it.hasNext());
		
		run.add(new PlotDatum(9.0, 10.0));
		it = run.iterator();
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(1.0, 2.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(3.0, 4.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(5.0, 6.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(7.0, 8.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(9.0, 10.0), it.next());
		assertFalse(it.hasNext());
		
		run.add(new PlotDatum(11.0, 12.0));
		it = run.iterator();
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(1.0, 2.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(3.0, 4.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(5.0, 6.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(7.0, 8.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(9.0, 10.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(11.0, 12.0), it.next());
		assertFalse(it.hasNext());
		
		run.add(new PlotDatum(13.0, 14.0));
		it = run.iterator();
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(1.0, 2.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(3.0, 4.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(5.0, 6.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(7.0, 8.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(9.0, 10.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(11.0, 12.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(13.0, 14.0), it.next());
		assertFalse(it.hasNext());
		
		run.add(new PlotDatum(15.0, 16.0));
		it = run.iterator();
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(1.0, 2.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(3.0, 4.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(5.0, 6.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(7.0, 8.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(9.0, 10.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(11.0, 12.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(13.0, 14.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(15.0, 16.0), it.next());
		assertFalse(it.hasNext());
		
		run.add(new PlotDatum(17.0, 18.0));
		it = run.iterator();
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(1.0, 2.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(3.0, 4.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(5.0, 6.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(7.0, 8.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(9.0, 10.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(11.0, 12.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(13.0, 14.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(15.0, 16.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(17.0, 18.0), it.next());
		assertFalse(it.hasNext());
		
		run.add(new PlotDatum(19.0, 20.0));
		it = run.iterator();
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(1.0, 2.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(3.0, 4.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(5.0, 6.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(7.0, 8.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(9.0, 10.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(11.0, 12.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(13.0, 14.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(15.0, 16.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(17.0, 18.0), it.next());
		assertTrue(it.hasNext());
		assertEquals(new PlotDatum(19.0, 20.0), it.next());
		assertFalse(it.hasNext());
	}
}"
cmpl-6x9cdNho2WKmgSonGIkwI2RgSCmjT,/EvoSuiteBenchmark/scenario1/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList0.java,131.33039236068726,length,"// PlotRunList.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a list of runs of data in a plot.
 *      A run is an array or list of PlotDatum objects.  A run
 *      list is an array or list of runs.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {

    public int size() {
        return data.size();
    }
}
","// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {","// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {

	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#size()} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#size()} method.
	*/
	@Test
	void testSize() {
		PlotRunList runList = new PlotRunList();
		assertEquals(0, runList.size());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
"
cmpl-6x9elYh2hMT6cGgXt3iNVYLaPX4Mo,/EvoSuiteBenchmark/scenario1/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList1.java,153.76463150978088,length,"// PlotRunList.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a list of runs of data in a plot.
 *      A run is an array or list of PlotDatum objects.  A run
 *      list is an array or list of runs.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {

    public Object get(int index) {
        return data.get(index);
    }
}
","// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#get(int)} method.
*/
class PlotRunListTest {","// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#get(int)} method.
*/
class PlotRunListTest {

	/**
	* Test case for {@link PlotRunList#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRunList list = new PlotRunList();
		assertEquals(0, list.size());
		
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		assertEquals(1, list.size());
		
		PlotDatum[] run2 = new PlotDatum[2];
		run2[0] = new PlotDatum(5.0, 6.0);
		run2[1] = new PlotDatum(7.0, 8.0);
		list.add(run2);
		assertEquals(2, list.size());
		
		assertEquals(run, list.get(0));
		assertEquals(run2, list.get(1));
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#get(int)} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRunList list = new PlotRunList();
		assertEquals(0, list.size());
		
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		assertEquals(1, list.size());
		
		PlotDatum[] run2 = new PlotDatum[2];
		run2[0] = new PlotDatum(5.0, 6.0);
		run2[1] = new PlotDatum(7.0, 8.0);
		list.add(run2);
		assertEquals(2, list.size());
		
		assertEquals(run, list.get(0));
		assertEquals(run2, list.get(1));
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#get(int)} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRunList list = new PlotRunList();
		assertEquals(0, list.size());
		
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		assertEquals(1, list.size());
		
		PlotDatum[] run2 = new PlotDatum[2];
		run2[0] = new PlotDatum(5.0, 6.0);
		run2[1] = new PlotDatum(7.0, 8.0);
		list.add(run2);
		assertEquals(2, list.size());
		
		assertEquals(run, list.get(0));
		assertEquals(run2, list.get(1));
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#get(int)} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRunList list = new PlotRunList();
		assertEquals(0, list.size());
		
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		assertEquals(1, list.size());
		
		PlotDatum[] run2 = new PlotDatum[2];
		run2[0] = new PlotDatum(5.0, 6.0);
		run2[1] = new PlotDatum(7.0, 8.0);
		list.add(run2);
		assertEquals(2, list.size());
		
		assertEquals(run, list.get(0));
		assertEquals(run2, list.get(1));
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#get(int)} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRunList list = new PlotRunList();
		assertEquals(0, list.size());
		
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		assertEquals(1, list.size());
		
		PlotDatum[] run2 = new PlotDatum[2];
		run2[0] = new PlotDatum(5.0, 6.0);
		run2[1] = new PlotDatum(7.0, 8.0);
		list.add(run2);
		assertEquals(2, list.size());
		
		assertEquals(run, list.get(0));
		assertEquals(run2, list.get(1));
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#get(int)} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRunList list = new PlotRunList();
		assertEquals(0, list.size());
		
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		assertEquals(1, list.size());
		
		PlotDatum[] run2 = new PlotDatum[2];
		run2[0] = new PlotDatum(5.0, 6.0);
		run2[1] = new PlotDatum(7.0, 8.0);
		list.add(run2);
		assertEquals(2, list.size());
		
		assertEquals(run, list.get(0));
		assertEquals(run2, list.get(1));
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#get(int)} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRunList list = new PlotRunList();
		assertEquals(0, list.size());
		
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		assertEquals(1, list.size());
		
		PlotDatum[] run2 = new PlotDatum[2];
		run2[0] = new PlotDatum(5.0, 6.0);
		run2[1] = new PlotDatum(7.0, 8.0);
		list.add(run2);
		assertEquals(2, list.size());
		
		assertEquals(run, list.get(0));
		assertEquals(run2, list.get(1));
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#get(int)} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRunList list = new PlotRunList();
		assertEquals(0, list.size());
		
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		assertEquals(1, list.size());
		
		PlotDatum[] run2 = new PlotDatum[2];
		run2[0] = new PlotDatum(5.0, 6.0);
		run2[1] = new PlotDatum(7.0, 8.0);
		list.add(run2);
		assertEquals(2, list.size());
		
		assertEquals(run, list.get(0));
		assertEquals(run2, list.get(1));
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#get(int)} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRunList list = new PlotRunList();
		assertEquals(0, list.size());
		
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		assertEquals(1, list.size());
		
		PlotDatum[] run2 = new PlotDatum[2];
		run2[0] = new PlotDatum(5.0, 6.0);
		run2[1] = new PlotDatum(7.0, 8.0);
		list.add(run2);
		assertEquals(2, list.size());
		
		assertEquals(run, list.get(0));
		assertEquals(run2, list.get(1));
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#get(int)} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRunList list = new PlotRunList();
		assertEquals(0, list.size());
		
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		assertEquals(1, list.size());
		
		PlotDatum[] run2 = new PlotDatum[2];
		run2[0] = new PlotDatum(5.0, 6.0);
		run2[1] = new PlotDatum(7.0, 8.0);
		list.add(run2);
		assertEquals(2, list.size());
		
		assertEquals(run, list.get(0));
		assertEquals(run2, list.get(1));
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#get(int)} method.
*/
class PlotRunListTest {
		
	/**
	* Test case for {@link PlotRunList#get(int)} method.
	*/
	@Test
	void testGet() {
		PlotRunList list = new PlotRunList();
		assertEquals(0, list.size());
		
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4"
cmpl-6x9hEOw1JjCIwktG2mayhN7cjLOvB,/EvoSuiteBenchmark/scenario1/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList2.java,47.75006914138794,,"// PlotRunList.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a list of runs of data in a plot.
 *      A run is an array or list of PlotDatum objects.  A run
 *      list is an array or list of runs.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {

    public Object remove(int index) {
        return data.remove(index);
    }
}
","// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#remove(int)} method.
*/
class PlotRunListTest {","// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#remove(int)} method.
*/
class PlotRunListTest {

	/**
	* Test case for {@link PlotRunList#remove(int)} method.
	*/
	@Test
	void testRemove() {
		PlotRunList list = new PlotRunList();
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		list.remove(0);
		assertEquals(0, list.size());
	}
	
	/**
	* Test case for {@link PlotRunList#remove(int)} method.
	*/
	@Test
	void testRemove2() {
		PlotRunList list = new PlotRunList();
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		list.remove(0);
		assertEquals(0, list.size());
	}
	
	/**
	* Test case for {@link PlotRunList#remove(int)} method.
	*/
	@Test
	void testRemove3() {
		PlotRunList list = new PlotRunList();
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		list.remove(0);
		assertEquals(0, list.size());
	}
	
	/**
	* Test case for {@link PlotRunList#remove(int)} method.
	*/
	@Test
	void testRemove4() {
		PlotRunList list = new PlotRunList();
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		list.remove(0);
		assertEquals(0, list.size());
	}
	
	/**
	* Test case for {@link PlotRunList#remove(int)} method.
	*/
	@Test
	void testRemove5() {
		PlotRunList list = new PlotRunList();
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		list.remove(0);
		assertEquals(0, list.size());
	}
	
	/**
	* Test case for {@link PlotRunList#remove(int)} method.
	*/
	@Test
	void testRemove6() {
		PlotRunList list = new PlotRunList();
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		list.remove(0);
		assertEquals(0, list.size());
	}
	
	/**
	* Test case for {@link PlotRunList#remove(int)} method.
	*/
	@Test
	void testRemove7() {
		PlotRunList list = new PlotRunList();
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		list.remove(0);
		assertEquals(0, list.size());
	}
	
	/**
	* Test case for {@link PlotRunList#remove(int)} method.
	*/
	@Test
	void testRemove8() {
		PlotRunList list = new PlotRunList();
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		list.remove(0);
		assertEquals(0, list.size());
	}
	
	/**
	* Test case for {@link PlotRunList#remove(int)} method.
	*/
	@Test
	void testRemove9() {
		PlotRunList list = new PlotRunList();
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		list.remove(0);
		assertEquals(0, list.size());
	}
	
	/**
	* Test case for {@link PlotRunList#remove(int)} method.
	*/
	@Test
	void testRemove10() {
		PlotRunList list = new PlotRunList();
		PlotDatum[] run = new PlotDatum[2];
		run[0] = new PlotDatum(1.0, 2.0);
		run[1] = new PlotDatum(3.0, 4.0);
		list.add(run);
		list.remove(0);
		assertEquals(0, list.size());
	}
}"
cmpl-6x9iH08SiuyM9InYlqWf8MpRrgn7c,/EvoSuiteBenchmark/scenario1/29_apbsmem/src/main/java/jahuwaldt/plot/PlotRunList3.java,151.99535465240479,length,"// PlotRunList.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;

/**
 *  <p> This class represents a list of runs of data in a plot.
 *      A run is an array or list of PlotDatum objects.  A run
 *      list is an array or list of runs.
 *  </p>
 *
 *  <p>  Modified by:  Joseph A. Huwaldt  </p>
 *
 * @author Joseph A. Huwaldt   Date:  September 13, 2000
 * @version November 20, 2000
 */
public class PlotRunList extends AbstractList implements Cloneable, java.io.Serializable {

    public Iterator iterator() {
        return data.iterator();
    }
}
","// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#iterator()} method.
*/
class PlotRunListTest {","// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#iterator()} method.
*/
class PlotRunListTest {

	/**
	* Test of {@link PlotRunList#iterator()} method.
	*/
	@Test
	void testIterator() {
		PlotRunList runList = new PlotRunList();
		
		// Create a run of data.
		PlotDatum[] run = new PlotDatum[10];
		for (int i=0; i < run.length; i++) {
			run[i] = new PlotDatum(i, i);
		}
		
		// Add the run to the run list.
		runList.add(run);
		
		// Create an iterator for the run list.
		Iterator iter = runList.iterator();
		
		// Verify that the iterator has data.
		assertTrue(iter.hasNext());
		
		// Verify that the iterator returns the correct data.
		for (int i=0; i < run.length; i++) {
			assertEquals(run[i], iter.next());
		}
		
		// Verify that the iterator has no more data.
		assertFalse(iter.hasNext());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#iterator()} method.
*/
class PlotRunListTest {
		
	/**
	* Test of {@link PlotRunList#iterator()} method.
	*/
	@Test
	void testIterator() {
		PlotRunList runList = new PlotRunList();
		
		// Create a run of data.
		PlotDatum[] run = new PlotDatum[10];
		for (int i=0; i < run.length; i++) {
			run[i] = new PlotDatum(i, i);
		}
		
		// Add the run to the run list.
		runList.add(run);
		
		// Create an iterator for the run list.
		Iterator iter = runList.iterator();
		
		// Verify that the iterator has data.
		assertTrue(iter.hasNext());
		
		// Verify that the iterator returns the correct data.
		for (int i=0; i < run.length; i++) {
			assertEquals(run[i], iter.next());
		}
		
		// Verify that the iterator has no more data.
		assertFalse(iter.hasNext());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#iterator()} method.
*/
class PlotRunListTest {
		
	/**
	* Test of {@link PlotRunList#iterator()} method.
	*/
	@Test
	void testIterator() {
		PlotRunList runList = new PlotRunList();
		
		// Create a run of data.
		PlotDatum[] run = new PlotDatum[10];
		for (int i=0; i < run.length; i++) {
			run[i] = new PlotDatum(i, i);
		}
		
		// Add the run to the run list.
		runList.add(run);
		
		// Create an iterator for the run list.
		Iterator iter = runList.iterator();
		
		// Verify that the iterator has data.
		assertTrue(iter.hasNext());
		
		// Verify that the iterator returns the correct data.
		for (int i=0; i < run.length; i++) {
			assertEquals(run[i], iter.next());
		}
		
		// Verify that the iterator has no more data.
		assertFalse(iter.hasNext());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#iterator()} method.
*/
class PlotRunListTest {
		
	/**
	* Test of {@link PlotRunList#iterator()} method.
	*/
	@Test
	void testIterator() {
		PlotRunList runList = new PlotRunList();
		
		// Create a run of data.
		PlotDatum[] run = new PlotDatum[10];
		for (int i=0; i < run.length; i++) {
			run[i] = new PlotDatum(i, i);
		}
		
		// Add the run to the run list.
		runList.add(run);
		
		// Create an iterator for the run list.
		Iterator iter = runList.iterator();
		
		// Verify that the iterator has data.
		assertTrue(iter.hasNext());
		
		// Verify that the iterator returns the correct data.
		for (int i=0; i < run.length; i++) {
			assertEquals(run[i], iter.next());
		}
		
		// Verify that the iterator has no more data.
		assertFalse(iter.hasNext());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#iterator()} method.
*/
class PlotRunListTest {
		
	/**
	* Test of {@link PlotRunList#iterator()} method.
	*/
	@Test
	void testIterator() {
		PlotRunList runList = new PlotRunList();
		
		// Create a run of data.
		PlotDatum[] run = new PlotDatum[10];
		for (int i=0; i < run.length; i++) {
			run[i] = new PlotDatum(i, i);
		}
		
		// Add the run to the run list.
		runList.add(run);
		
		// Create an iterator for the run list.
		Iterator iter = runList.iterator();
		
		// Verify that the iterator has data.
		assertTrue(iter.hasNext());
		
		// Verify that the iterator returns the correct data.
		for (int i=0; i < run.length; i++) {
			assertEquals(run[i], iter.next());
		}
		
		// Verify that the iterator has no more data.
		assertFalse(iter.hasNext());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#iterator()} method.
*/
class PlotRunListTest {
		
	/**
	* Test of {@link PlotRunList#iterator()} method.
	*/
	@Test
	void testIterator() {
		PlotRunList runList = new PlotRunList();
		
		// Create a run of data.
		PlotDatum[] run = new PlotDatum[10];
		for (int i=0; i < run.length; i++) {
			run[i] = new PlotDatum(i, i);
		}
		
		// Add the run to the run list.
		runList.add(run);
		
		// Create an iterator for the run list.
		Iterator iter = runList.iterator();
		
		// Verify that the iterator has data.
		assertTrue(iter.hasNext());
		
		// Verify that the iterator returns the correct data.
		for (int i=0; i < run.length; i++) {
			assertEquals(run[i], iter.next());
		}
		
		// Verify that the iterator has no more data.
		assertFalse(iter.hasNext());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#iterator()} method.
*/
class PlotRunListTest {
		
	/**
	* Test of {@link PlotRunList#iterator()} method.
	*/
	@Test
	void testIterator() {
		PlotRunList runList = new PlotRunList();
		
		// Create a run of data.
		PlotDatum[] run = new PlotDatum[10];
		for (int i=0; i < run.length; i++) {
			run[i] = new PlotDatum(i, i);
		}
		
		// Add the run to the run list.
		runList.add(run);
		
		// Create an iterator for the run list.
		Iterator iter = runList.iterator();
		
		// Verify that the iterator has data.
		assertTrue(iter.hasNext());
		
		// Verify that the iterator returns the correct data.
		for (int i=0; i < run.length; i++) {
			assertEquals(run[i], iter.next());
		}
		
		// Verify that the iterator has no more data.
		assertFalse(iter.hasNext());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#iterator()} method.
*/
class PlotRunListTest {
		
	/**
	* Test of {@link PlotRunList#iterator()} method.
	*/
	@Test
	void testIterator() {
		PlotRunList runList = new PlotRunList();
		
		// Create a run of data.
		PlotDatum[] run = new PlotDatum[10];
		for (int i=0; i < run.length; i++) {
			run[i] = new PlotDatum(i, i);
		}
		
		// Add the run to the run list.
		runList.add(run);
		
		// Create an iterator for the run list.
		Iterator iter = runList.iterator();
		
		// Verify that the iterator has data.
		assertTrue(iter.hasNext());
		
		// Verify that the iterator returns the correct data.
		for (int i=0; i < run.length; i++) {
			assertEquals(run[i], iter.next());
		}
		
		// Verify that the iterator has no more data.
		assertFalse(iter.hasNext());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#iterator()} method.
*/
class PlotRunListTest {
		
	/**
	* Test of {@link PlotRunList#iterator()} method.
	*/
	@Test
	void testIterator() {
		PlotRunList runList = new PlotRunList();
		
		// Create a run of data.
		PlotDatum[] run = new PlotDatum[10];
		for (int i=0; i < run.length; i++) {
			run[i] = new PlotDatum(i, i);
		}
		
		// Add the run to the run list.
		runList.add(run);
		
		// Create an iterator for the run list.
		Iterator iter = runList.iterator();
		
		// Verify that the iterator has data.
		assertTrue(iter.hasNext());
		
		// Verify that the iterator returns the correct data.
		for (int i=0; i < run.length; i++) {
			assertEquals(run[i], iter.next());
		}
		
		// Verify that the iterator has no more data.
		assertFalse(iter.hasNext());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#iterator()} method.
*/
class PlotRunListTest {
		
	/**
	* Test of {@link PlotRunList#iterator()} method.
	*/
	@Test
	void testIterator() {
		PlotRunList runList = new PlotRunList();
		
		// Create a run of data.
		PlotDatum[] run = new PlotDatum[10];
		for (int i=0; i < run.length; i++) {
			run[i] = new PlotDatum(i, i);
		}
		
		// Add the run to the run list.
		runList.add(run);
		
		// Create an iterator for the run list.
		Iterator iter = runList.iterator();
		
		// Verify that the iterator has data.
		assertTrue(iter.hasNext());
		
		// Verify that the iterator returns the correct data.
		for (int i=0; i < run.length; i++) {
			assertEquals(run[i], iter.next());
		}
		
		// Verify that the iterator has no more data.
		assertFalse(iter.hasNext());
	}
}

// PlotRunListTest.java
package jahuwaldt.plot;

import java.awt.Color;
import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlotRunList}.
* It contains ten unit test cases for the {@link PlotRunList#iterator()} method.
*/
class PlotRunListTest {
		
	/**
	* Test of {@link PlotRunList#iterator()} method.
	*/
	@Test
	void"
