ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wnRtKQ7PkYisxT1rfsZtOy4JUXyN,/EvoSuiteBenchmark/scenario1/11_imsmart/src/main/java/com/imsmart/servlet/HTMLFilter.java,44.55480742454529,stop,"// HTMLFilter.java
package com.imsmart.servlet;

public final class HTMLFilter {

    public static String filter(String message) {
        if (message == null)
            return (null);
        char[] content = new char[message.length()];
        message.getChars(0, message.length(), content, 0);
        StringBuffer result = new StringBuffer(content.length + 50);
        for (int i = 0; i < content.length; i++) {
            switch(content[i]) {
                case '<':
                    result.append(""&lt;"");
                    break;
                case '>':
                    result.append(""&gt;"");
                    break;
                case '&':
                    result.append(""&amp;"");
                    break;
                case '""':
                    result.append(""&quot;"");
                    break;
                default:
                    result.append(content[i]);
            }
        }
        return (result.toString());
    }
}
","// HTMLFilterTest.java
package com.imsmart.servlet;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HTMLFilter}.
* It contains ten unit test cases for the {@link HTMLFilter#filter(String)} method.
*/
class HTMLFilterTest {","// HTMLFilterTest.java
package com.imsmart.servlet;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HTMLFilter}.
* It contains ten unit test cases for the {@link HTMLFilter#filter(String)} method.
*/
class HTMLFilterTest {

		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* This test case tests the method with a null input.
		*/
		@Test
		void testFilterWithNullInput() {
				String input = null;
				String expected = null;
				String actual = HTMLFilter.filter(input);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* This test case tests the method with an empty input.
		*/
		@Test
		void testFilterWithEmptyInput() {
				String input = """";
				String expected = """";
				String actual = HTMLFilter.filter(input);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* This test case tests the method with a string containing only '<' character.
		*/
		@Test
		void testFilterWithOnlyLessThan() {
				String input = ""<"";
				String expected = ""&lt;"";
				String actual = HTMLFilter.filter(input);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* This test case tests the method with a string containing only '>' character.
		*/
		@Test
		void testFilterWithOnlyGreaterThan() {
				String input = "">"";
				String expected = ""&gt;"";
				String actual = HTMLFilter.filter(input);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* This test case tests the method with a string containing only '&' character.
		*/
		@Test
		void testFilterWithOnlyAmpersand() {
				String input = ""&"";
				String expected = ""&amp;"";
				String actual = HTMLFilter.filter(input);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* This test case tests the method with a string containing only '""' character.
		*/
		@Test
		void testFilterWithOnlyDoubleQuote() {
				String input = ""\"""";
				String expected = ""&quot;"";
				String actual = HTMLFilter.filter(input);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* This test case tests the method with a string containing only '<' and '>' characters.
		*/
		@Test
		void testFilterWithOnlyLessThanAndGreaterThan() {
				String input = ""<>"";
				String expected = ""&lt;&gt;"";
				String actual = HTMLFilter.filter(input);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* This test case tests the method with a string containing only '<', '>' and '&' characters.
		*/
		@Test
		void testFilterWithOnlyLessThanAndGreaterThanAndAmpersand() {
				String input = ""<>&"";
				String expected = ""&lt;&gt;&amp;"";
				String actual = HTMLFilter.filter(input);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* This test case tests the method with a string containing only '<', '>', '&' and '""' characters.
		*/
		@Test
		void testFilterWithOnlyLessThanAndGreaterThanAndAmpersandAndDoubleQuote() {
				String input = ""<>&\"""";
				String expected = ""&lt;&gt;&amp;&quot;"";
				String actual = HTMLFilter.filter(input);
				assertEquals(expected, actual);
		}
		
		/**
		* Test case for {@link HTMLFilter#filter(String)} method.
		* This test case tests the method with a string containing all the special characters.
		*/
		@Test
		void testFilterWithAllSpecialCharacters() {
				String input = ""<>&\"""";
				String expected = ""&lt;&gt;&amp;&quot;"";
				String actual = HTMLFilter.filter(input);
				assertEquals(expected, actual);
		}
		
}"
