ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wiYfB6C1N5G5BhGK4EAGnp0r3Gca,/EvoSuiteBenchmark/scenario3/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale0.java,2.852638006210327,stop,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    /**
     * date de la formation
     *
     * @return la date de la formation sous forme de String
     */
    public String dateLimForm();
}
","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipaleTest {","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipaleTest {

	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	*/
	@Test
	void testDateLimForm() {
		// TODO : implement this test case
		fail(""Not yet implemented"");
	}
}"
cmpl-6wiZiG3cGfv31n06UmnSnf4lNWtQp,/EvoSuiteBenchmark/scenario3/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale1.java,2.6569888591766357,stop,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    /**
     * date de naissance
     *
     * @return la date de naissance sous form de String
     */
    public String dateDeNaiss();
}
","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipaleTest {","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipaleTest {

	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	*/
	@Test
	void testDateDeNaiss() {
		// TODO : implement this test case
		fail(""Not yet implemented"");
	}
}"
cmpl-6wialA2SgfIkVLnX73JvP5RJW3slh,/EvoSuiteBenchmark/scenario3/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage0.java,60.70041871070862,length,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     *
     * @return TableStockage
     */
    public TableStockage ajouterLigne();
}
","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockageTest {","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockageTest {

	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is empty.
	*/
	@Test
	public void testAjouterLigne1() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne2() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne3() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne4() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne5() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne6() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne7() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne8() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne9() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne10() {
		// TODO
	}
}
```

## Exercice 2

### Question 1

```java
// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     *
     * @return TableStockage
     */
    public TableStockage ajouterLigne() {
        TableStockage table = new TableStockage();
        int nbLignes = table.getRowCount();
        int nbColonnes = table.getColumnCount();
        Object[][] data = new Object[nbLignes + 1][nbColonnes];
        for (int i = 0; i < nbLignes; i++) {
            for (int j = 0; j < nbColonnes; j++) {
                data[i][j] = table.getValueAt(i, j);
            }
        }
        for (int j = 0; j < nbColonnes; j++) {
            data[nbLignes][j] = """";
        }
        return new TableStockage(data);
    }
}

// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockageTest {
		
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is empty.
	*/
	@Test
	public void testAjouterLigne1() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne2() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne3() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne4() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne5() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne6() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne7() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne8() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne9() {
		// TODO
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is not empty.
	*/
	@Test
	public void testAjouterLigne10() {
		// TODO
	}
}
```

### Question 2

```java
// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la"
cmpl-6wibjv8rzYfyztZzSAfOfEB3jCmC0,/EvoSuiteBenchmark/scenario3/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage1.java,56.822235345840454,length,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     *
     * @return TableStockage
     */
    public TableStockage colonneMail();
}
","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockageTest {","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockageTest {

	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters a valid email address.
	*/
	@Test
	void testColonneMail_1() {
		// Arrange
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		String email = ""test@test.com"";
		
		// Act
		TableStockage tableStockage = modifTableStockage.colonneMail();
		
		// Assert
		assertEquals(email, tableStockage.getColonne(""E-Mail""));
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters an invalid email address.
	*/
	@Test
	void testColonneMail_2() {
		// Arrange
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		String email = ""test@test"";
		
		// Act
		TableStockage tableStockage = modifTableStockage.colonneMail();
		
		// Assert
		assertEquals(email, tableStockage.getColonne(""E-Mail""));
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters an empty email address.
	*/
	@Test
	void testColonneMail_3() {
		// Arrange
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		String email = """";
		
		// Act
		TableStockage tableStockage = modifTableStockage.colonneMail();
		
		// Assert
		assertEquals(email, tableStockage.getColonne(""E-Mail""));
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters a valid email address.
	*/
	@Test
	void testColonneMail_4() {
		// Arrange
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		String email = ""test@test.com"";
		
		// Act
		TableStockage tableStockage = modifTableStockage.colonneMail();
		
		// Assert
		assertEquals(email, tableStockage.getColonne(""E-Mail""));
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters an invalid email address.
	*/
	@Test
	void testColonneMail_5() {
		// Arrange
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		String email = ""test@test"";
		
		// Act
		TableStockage tableStockage = modifTableStockage.colonneMail();
		
		// Assert
		assertEquals(email, tableStockage.getColonne(""E-Mail""));
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters an empty email address.
	*/
	@Test
	void testColonneMail_6() {
		// Arrange
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		String email = """";
		
		// Act
		TableStockage tableStockage = modifTableStockage.colonneMail();
		
		// Assert
		assertEquals(email, tableStockage.getColonne(""E-Mail""));
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters a valid email address.
	*/
	@Test
	void testColonneMail_7() {
		// Arrange
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		String email = ""test@test.com"";
		
		// Act
		TableStockage tableStockage = modifTableStockage.colonneMail();
		
		// Assert
		assertEquals(email, tableStockage.getColonne(""E-Mail""));
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters an invalid email address.
	*/
	@Test
	void testColonneMail_8() {
		// Arrange
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		String email = ""test@test"";
		
		// Act
		TableStockage tableStockage = modifTableStockage.colonneMail();
		
		// Assert
		assertEquals(email, tableStockage.getColonne(""E-Mail""));
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters an empty email address.
	*/
	@Test
	void testColonneMail_9() {
		// Arrange
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		String email = """";
		
		// Act
		TableStockage tableStockage = modifTableStockage.colonneMail();
		
		// Assert
		assertEquals(email, tableStockage.getColonne(""E-Mail""));
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the user enters a valid email address.
	*/
	@Test
	void testColonneMail_10() {
		// Arrange
		ModifTableStockage modifTableStockage = new ModifTableStockage();
		String email = ""test@test.com"";
		
		// Act
		TableStockage tableStockage = modifTableStockage.colonneMail();
		
		// Assert
		assertEquals(email, tableStockage.getColonne(""E-Mail""));
	}
}

// TableStockage.java
package fr.unice.gfarce.interGraph;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TableStockage {

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     *
     * @return TableStockage
     */
    public TableStockage colonneMail();

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     *
     * @return TableStockage
     */
    public TableStockage colonneMail() {
        Map<String, String> map = new HashMap<>();
        map.put(""E-Mail"", JOptionPane.showInputDialog(""Entrez votre adresse mail""));
        return new TableStockage(map);
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir"
cmpl-6wicmQ10k3KR8IfKRYM5ihf1GnEON,/EvoSuiteBenchmark/scenario3/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage2.java,69.89660477638245,length,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     *
     * @return TableStockage
     */
    public TableStockage selectMail();
}
","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockageTest {","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockageTest {

	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* It tests the case where the user selects all the rows.
	*/
	@Test
	void selectMailTest1() {
		TableStockage table = new TableStockage();
		table.addColumn(""E-Mail"");
		table.addColumn(""Nom"");
		table.addColumn(""Prénom"");
		table.addColumn(""Adresse"");
		table.addColumn(""Code Postal"");
		table.addColumn(""Ville"");
		table.addColumn(""Pays"");
		table.addColumn(""Téléphone"");
		table.addColumn(""Mobile"");
		table.addColumn(""Fax"");
		table.addColumn(""Site Web"");
		table.addColumn(""Date de naissance"");
		table.addColumn(""Sexe"");
		table.addColumn(""Profession"");
		table.addColumn(""Société"");
		table.addColumn(""Fonction"");
		table.addColumn(""Adresse Société"");
		table.addColumn(""Code Postal Société"");
		table.addColumn(""Ville Société"");
		table.addColumn(""Pays Société"");
		table.addColumn(""Téléphone Société"");
		table.addColumn(""Fax Société"");
		table.addColumn(""Site Web Société"");
		table.addColumn(""Commentaire"");
		table.addColumn(""Groupe"");
		table.addColumn(""Photo"");
		table.addColumn(""Date de création"");
		table.addColumn(""Date de modification"");
		table.addColumn(""Date de suppression"");
		table.addColumn(""Date de dernier envoi"");
		table.addColumn(""Nombre d'envois"");
		table.addColumn(""Nombre de clics"");
		table.addColumn(""Nombre d'ouvertures"");
		table.addColumn(""Nombre de désabonnements"");
		table.addColumn(""Nombre de plaintes"");
		table.addColumn(""Nombre de rebonds"");
		table.addColumn(""Nombre de rebonds durables"");
		table.addColumn(""Nombre de rebonds temporaires"");
		table.addColumn(""Nombre de rebonds administratifs"");
		table.addColumn(""Nombre de rebonds inatteignables"");
		table.addColumn(""Nombre de rebonds inconnus"");
		table.addColumn(""Nombre de rebonds autres"");
		table.addColumn(""Nombre de rebonds durables"");
		table.addColumn(""Nombre de rebonds temporaires"");
		table.addColumn(""Nombre de rebonds administratifs"");
		table.addColumn(""Nombre de rebonds inatteignables"");
		table.addColumn(""Nombre de rebonds inconnus"");
		table.addColumn(""Nombre de rebonds autres"");
		table.addColumn(""Nombre de rebonds durables"");
		table.addColumn(""Nombre de rebonds temporaires"");
		table.addColumn(""Nombre de rebonds administratifs"");
		table.addColumn(""Nombre de rebonds inatteignables"");
		table.addColumn(""Nombre de rebonds inconnus"");
		table.addColumn(""Nombre de rebonds autres"");
		table.addColumn(""Nombre de rebonds durables"");
		table.addColumn(""Nombre de rebonds temporaires"");
		table.addColumn(""Nombre de rebonds administratifs"");
		table.addColumn(""Nombre de rebonds inatteignables"");
		table.addColumn(""Nombre de rebonds inconnus"");
		table.addColumn(""Nombre de rebonds autres"");
		table.addColumn(""Nombre de rebonds durables"");
		table.addColumn(""Nombre de rebonds temporaires"");
		table.addColumn(""Nombre de rebonds administratifs"");
		table.addColumn(""Nombre de rebonds inatteignables"");
		table.addColumn(""Nombre de rebonds inconnus"");
		table.addColumn(""Nombre de rebonds autres"");
		table.addColumn(""Nombre de rebonds durables"");
		table.addColumn(""Nombre de rebonds temporaires"");
		table.addColumn(""Nombre de rebonds administratifs"");
		table.addColumn(""Nombre de rebonds inatteignables"");
		table.addColumn(""Nombre de rebonds inconnus"");
		table.addColumn(""Nombre de rebonds autres"");
		table.addColumn(""Nombre de rebonds durables"");
		table.addColumn(""Nombre de rebonds temporaires"");
		table.addColumn(""Nombre de rebonds administratifs"");
		table.addColumn(""Nombre de rebonds inatteignables"");
		table.addColumn(""Nombre de rebonds inconnus"");
		table.addColumn(""Nombre de rebonds autres"");
		table.addColumn(""Nombre de rebonds durables"");
		table.addColumn(""Nombre de rebonds temporaires"");
		table.addColumn(""Nombre de rebonds administratifs"");
		table.addColumn(""Nombre de rebonds inatteignables"");
		table.addColumn(""Nombre de rebonds inconnus"");
		table.addColumn(""Nombre de rebonds autres"");
		table.addColumn(""Nombre de rebonds durables"");
		table.addColumn(""Nombre de rebonds temporaires"");
		table.addColumn(""Nombre de rebonds administratifs"");
		table.addColumn(""Nombre de rebonds inatteignables"");
		table.addColumn(""Nombre de rebonds inconnus"");
		table.addColumn(""Nombre de rebonds autres"");
		table.addColumn(""Nombre de rebonds durables"");
		table.addColumn(""Nombre de rebonds temporaires"");
		table.addColumn(""Nombre de rebonds administratifs"");
		table.addColumn(""Nombre de rebonds inatteignables"");
		table.addColumn(""Nombre de rebonds inconnus"");
		table.addColumn(""Nombre de rebonds autres"");
		table.addColumn(""Nombre de rebonds durables"");
		table.addColumn(""Nombre de rebonds temporaires"");
		table.addColumn(""Nombre de rebonds administratifs"");
		table.addColumn(""Nombre de rebonds inatteignables"");
		table.addColumn(""Nombre de rebonds inconnus"");
		table.addColumn(""Nombre de rebonds autres"");
		table.addColumn(""Nombre de rebonds durables"");
		table.addColumn(""Nombre de rebonds temporaires"");
		table.addColumn(""Nombre de rebonds administratifs"");
		table.addColumn(""Nombre de rebonds inatteignables"");
		table.addColumn(""Nombre de rebonds inconnus"");
		table.addColumn(""Nombre de rebonds autres"");
		table.addColumn(""Nombre de rebonds durables"");
		table.addColumn(""Nombre de rebonds temporaires"");
		table.addColumn(""Nombre de rebonds administratifs"");
		table.addColumn(""Nombre de rebonds inatteignables"");
		table.addColumn(""Nombre de rebonds inconnus"");
		table.addColumn(""Nombre de rebonds autres"");
		table.addColumn(""Nombre de rebonds durables"");
		table.addColumn(""Nombre de rebonds temporaires"");
		table.addColumn(""Nombre de rebonds administratifs"");
		table."
cmpl-6widuARFxkbiXd2q6bce6RGOhyUyd,/EvoSuiteBenchmark/scenario3/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler.java,43.83627796173096,length,"// Controler.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;

/**
 * Fait la liaison entre l'interface graphique et le moteur de l'application
 * Rend comprehensible les requetes de l'interface graphique pour les bases de
 * donnees
 *
 * @author scarankle
 */
public class Controler {

    /**
     * Retourne toutes les formations
     *
     * @return un tableau contenant toutes les formations
     */
    public Formation[] findAllFormation();
}
","// ControlerTest.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findAllFormation()} method.
*/
class ControlerTest {","// ControlerTest.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findAllFormation()} method.
*/
class ControlerTest {

	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation1() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
	
	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation2() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
	
	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation3() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
	
	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation4() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
	
	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation5() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
	
	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation6() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
	
	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation7() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
	
	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation8() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
	
	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation9() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
	
	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests the method with a null value.
	*/
	@Test
	public void testFindAllFormation10() {
		Controler controler = new Controler();
		Formation[] result = controler.findAllFormation();
		assertNull(result);
	}
}

// DaoFactory.java
package fr.unice.gfarce.dao;

import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;

/**
 * Fabrique de DAO
 *
 * @author scarankle
 */
public abstract class DaoFactory {

    /**
     * Enumeration des types de fabriques de DAO
     */
    public enum TypeFabrique {

        /**
         * Fabrique de DAO pour une base de donnees
         */
        DB,
        /**
         * Fabrique de DAO pour un fichier XML
         */
        XML
    }

    /**
     * Fabrique de DAO pour une base de donnees
     */
    public static final TypeFabrique DB = TypeFabrique.DB;
    /**
     * Fabrique de DAO pour un fichier XML
     */
    public static final TypeFabrique XML = TypeFabrique.XML;

    /**
     * Retourne une fabrique de DAO
     *
     * @param typeFabrique le type de fabrique de DAO
     * @return une fabrique de DAO
     * @throws DaoFactoryException si le type de fabrique de DAO n'est pas
     * supporte
     */
    public static DaoFactory getDaoFactory(TypeFabrique typeFabrique) throws DaoFactoryException {
        switch (typeFabrique) {
            case DB:
                return new DaoFactoryDB();
            case XML:
                return new DaoFactoryXML();
            default:
                throw new DaoFactoryException(""Type de fabrique de DAO inconnu"");
        }
    }

    /**
     * Retourne un DAO pour les identites
     *
     * @return un DAO pour les identites
     */
    public abstract IdentiteDao getIdentiteDao();

    /**
     * Retourne un DAO pour les formations
     *
     * @return un DAO pour les formations
     */
    public abstract FormationDao getFormationDao();
}

// DaoFactoryDB.java
package fr.unice.gfarce.dao;

import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;

/**
 * Fabrique de DAO pour une base de donnees
 *
 * @author scarankle
 */
public class DaoFactoryDB extends DaoFactory {

    /**
     * Retourne un DAO pour les identites
     *
     * @return un DAO pour les identites
     */
    @Override
    public IdentiteDao getIdentiteDao() {
        return new IdentiteDaoDB();
    }

    /**
     * Retourne un DAO pour les formations
     *
     * @return un DAO pour les formations
     */
    @Override
    public FormationDao getFormationDao() {
        return new FormationDaoDB();
    }
}

// DaoFactoryException.java
package fr.unice.gfarce.dao;

/**
 * Exception levee par les fabriques de DAO
 *
 * @author scarankle
 */
public class DaoFactoryException extends Exception {

    /**
     * Constructeur
     *
     * @param message le message de l'exception
     */
    public DaoFactoryException(String message) {
        super(message);
    }
}

// DaoFactoryTest.java
package fr.unice.gfarce.dao;

import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;"
