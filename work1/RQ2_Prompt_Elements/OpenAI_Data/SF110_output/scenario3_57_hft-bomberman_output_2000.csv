ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6woyydMwhVBJocP8xfNwpu53Z5sBq,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/client/BomberClient0.java,55.98043608665466,length,"// BomberClient.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;

/**
 * This is central client class. It is responsible for globally scoped messages
 * and the creation of sessions.
 *
 * @author andi
 */
public class BomberClient extends Observable {

    /**
     * Returns the singleton.
     *
     * @return The only BomberClient instance.
     */
    public static BomberClient getInstance();
}
","// BomberClientTest.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#getInstance()} method.
*/
class BomberClientTest {","// BomberClientTest.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#getInstance()} method.
*/
class BomberClientTest {

	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same instance of the class.
	*/
	@Test
	void testGetInstance() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertEquals(instance1, instance2);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same instance of the class.
	*/
	@Test
	void testGetInstance2() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertEquals(instance1, instance2);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same instance of the class.
	*/
	@Test
	void testGetInstance3() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertEquals(instance1, instance2);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same instance of the class.
	*/
	@Test
	void testGetInstance4() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertEquals(instance1, instance2);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same instance of the class.
	*/
	@Test
	void testGetInstance5() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertEquals(instance1, instance2);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same instance of the class.
	*/
	@Test
	void testGetInstance6() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertEquals(instance1, instance2);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same instance of the class.
	*/
	@Test
	void testGetInstance7() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertEquals(instance1, instance2);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same instance of the class.
	*/
	@Test
	void testGetInstance8() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertEquals(instance1, instance2);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same instance of the class.
	*/
	@Test
	void testGetInstance9() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertEquals(instance1, instance2);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same instance of the class.
	*/
	@Test
	void testGetInstance10() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertEquals(instance1, instance2);
	}
}

// ClientMsgReceiver.java
package client.network;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.Socket;
import java.util.Observable;
import messages.Message;
import org.apache.log4j.Logger;

/**
 * This class is responsible for receiving messages from the server.
 *
 * @author andi
 */
public class ClientMsgReceiver extends Observable implements Runnable {

    /**
     * The logger.
     */
    private static final Logger LOG = Logger.getLogger(ClientMsgReceiver.class);
}

// ClientMsgReceiverTest.java
package client.network;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.Socket;
import java.util.Observable;
import messages.Message;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientMsgReceiver}.
* It contains ten unit test cases for the {@link ClientMsgReceiver#run()} method.
*/
class ClientMsgReceiverTest {
		
	/**
	* Test case for {@link ClientMsgReceiver#run()} method.
	* It tests if the method returns the same instance of the class.
	*/
	@Test
	void testRun() {
		ClientMsgReceiver instance1 = new ClientMsgReceiver();
		ClientMsgReceiver instance2 = new ClientMsgReceiver();
		assertEquals(instance1, instance2);
	}
	
	/**
	* Test case for {@link ClientMsgReceiver#run()} method.
	* It tests if the method returns the same instance of the class.
	*/
	@Test
	void testRun2() {
		ClientMsgReceiver instance1 = new ClientMsgReceiver();
		ClientMsgReceiver instance2 = new ClientMsgReceiver();
		assertEquals(instance1, instance2);
	}
	
	/**
	* Test case for {@link ClientMsgReceiver#run()} method.
	* It tests if the method returns the same instance of the class.
	*/
	@Test
	void testRun3() {
		ClientMsgReceiver instance1 = new ClientMsgReceiver();
		ClientMsgReceiver instance2 = new ClientMsgReceiver();
		assertEquals(instance1, instance2);
	}
	
	/**
	* Test case for {@link ClientMsgReceiver#run()} method.
	* It tests if the method returns the same instance of the class.
	*/
	@Test
	void testRun4() {
		ClientMsgReceiver instance1 = new ClientMsgReceiver();
		ClientMsgReceiver instance2 = new ClientMsgReceiver();
		assertEquals(instance1, instance2);
	}
	
	/**
	* Test case for {@link ClientMsgReceiver#run()} method.
	* It tests if the method returns the same instance of the class.
	*/
	@Test
	void testRun5() {
		ClientMsgReceiver instance1 = new ClientMsgReceiver();
		ClientMsgReceiver instance2 = new ClientMsgReceiver();
		assertEquals(instance1, instance2);
	}
	
	/**
	* Test case for {@link ClientMsgReceiver#run()} method.
	* It tests if the method returns the same instance of the class.
	*/
	@Test
	void testRun6() {
		ClientMsgReceiver instance1 = new ClientMsgReceiver();
		ClientMsgReceiver instance2 = new ClientMsgReceiver();
		assertEquals(instance1, instance2);
	}
	
	/**
	* Test case for {@link ClientMsgReceiver#run()} method.
	* It tests if the method returns the same instance of the class.
	*/
	@Test
	"
cmpl-6wp01UHs3ZPPpOs1gbUbcAX8J58B5,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/client/BomberClient1.java,83.59555888175964,length,"// BomberClient.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;

/**
 * This is central client class. It is responsible for globally scoped messages
 * and the creation of sessions.
 *
 * @author andi
 */
public class BomberClient extends Observable {

    /**
     * Tries to connect to the server.
     *
     * @throws RuntimeException Thrown when the connection attempt was not successful.
     */
    public boolean connectToSrv();
}
","// BomberClientTest.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#connectToSrv()} method.
*/
class BomberClientTest {","// BomberClientTest.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#connectToSrv()} method.
*/
class BomberClientTest {

	/**
	* Test case for {@link BomberClient#connectToSrv()} method.
	* It tests the case when the connection attempt was not successful.
	*/
	@Test
	void testConnectToSrv_1() {
		BomberClient bomberClient = new BomberClient();
		boolean result = bomberClient.connectToSrv();
		assertFalse(result);
	}
	
	/**
	* Test case for {@link BomberClient#connectToSrv()} method.
	* It tests the case when the connection attempt was not successful.
	*/
	@Test
	void testConnectToSrv_2() {
		BomberClient bomberClient = new BomberClient();
		boolean result = bomberClient.connectToSrv();
		assertFalse(result);
	}
	
	/**
	* Test case for {@link BomberClient#connectToSrv()} method.
	* It tests the case when the connection attempt was not successful.
	*/
	@Test
	void testConnectToSrv_3() {
		BomberClient bomberClient = new BomberClient();
		boolean result = bomberClient.connectToSrv();
		assertFalse(result);
	}
	
	/**
	* Test case for {@link BomberClient#connectToSrv()} method.
	* It tests the case when the connection attempt was not successful.
	*/
	@Test
	void testConnectToSrv_4() {
		BomberClient bomberClient = new BomberClient();
		boolean result = bomberClient.connectToSrv();
		assertFalse(result);
	}
	
	/**
	* Test case for {@link BomberClient#connectToSrv()} method.
	* It tests the case when the connection attempt was not successful.
	*/
	@Test
	void testConnectToSrv_5() {
		BomberClient bomberClient = new BomberClient();
		boolean result = bomberClient.connectToSrv();
		assertFalse(result);
	}
	
	/**
	* Test case for {@link BomberClient#connectToSrv()} method.
	* It tests the case when the connection attempt was not successful.
	*/
	@Test
	void testConnectToSrv_6() {
		BomberClient bomberClient = new BomberClient();
		boolean result = bomberClient.connectToSrv();
		assertFalse(result);
	}
	
	/**
	* Test case for {@link BomberClient#connectToSrv()} method.
	* It tests the case when the connection attempt was not successful.
	*/
	@Test
	void testConnectToSrv_7() {
		BomberClient bomberClient = new BomberClient();
		boolean result = bomberClient.connectToSrv();
		assertFalse(result);
	}
	
	/**
	* Test case for {@link BomberClient#connectToSrv()} method.
	* It tests the case when the connection attempt was not successful.
	*/
	@Test
	void testConnectToSrv_8() {
		BomberClient bomberClient = new BomberClient();
		boolean result = bomberClient.connectToSrv();
		assertFalse(result);
	}
	
	/**
	* Test case for {@link BomberClient#connectToSrv()} method.
	* It tests the case when the connection attempt was not successful.
	*/
	@Test
	void testConnectToSrv_9() {
		BomberClient bomberClient = new BomberClient();
		boolean result = bomberClient.connectToSrv();
		assertFalse(result);
	}
	
	/**
	* Test case for {@link BomberClient#connectToSrv()} method.
	* It tests the case when the connection attempt was not successful.
	*/
	@Test
	void testConnectToSrv_10() {
		BomberClient bomberClient = new BomberClient();
		boolean result = bomberClient.connectToSrv();
		assertFalse(result);
	}
}

// ClientMsgReceiver.java
package client.network;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.Socket;
import java.util.Observable;
import messages.Message;
import org.apache.log4j.Logger;

/**
 * This class is responsible for receiving messages from the server.
 *
 * @author andi
 */
public class ClientMsgReceiver extends Observable implements Runnable {

    /**
     * The logger.
     */
    private static final Logger logger = Logger.getLogger(ClientMsgReceiver.class);
}

// ClientMsgReceiverTest.java
package client.network;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.Socket;
import java.util.Observable;
import messages.Message;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientMsgReceiver}.
* It contains ten unit test cases for the {@link ClientMsgReceiver#run()} method.
*/
class ClientMsgReceiverTest {
		
	/**
	* Test case for {@link ClientMsgReceiver#run()} method.
	* It tests the case when the connection attempt was not successful.
	*/
	@Test
	void testRun_1() {
		ClientMsgReceiver clientMsgReceiver = new ClientMsgReceiver();
		clientMsgReceiver.run();
	}
	
	/**
	* Test case for {@link ClientMsgReceiver#run()} method.
	* It tests the case when the connection attempt was not successful.
	*/
	@Test
	void testRun_2() {
		ClientMsgReceiver clientMsgReceiver = new ClientMsgReceiver();
		clientMsgReceiver.run();
	}
	
	/**
	* Test case for {@link ClientMsgReceiver#run()} method.
	* It tests the case when the connection attempt was not successful.
	*/
	@Test
	void testRun_3() {
		ClientMsgReceiver clientMsgReceiver = new ClientMsgReceiver();
		clientMsgReceiver.run();
	}
	
	/**
	* Test case for {@link ClientMsgReceiver#run()} method.
	* It tests the case when the connection attempt was not successful.
	*/
	@Test
	void testRun_4() {
		ClientMsgReceiver clientMsgReceiver = new ClientMsgReceiver();
		clientMsgReceiver.run();
	}
	
	/**
	* Test case for {@link ClientMsgReceiver#run()} method.
	* It tests the case when the connection attempt was not successful.
	*/
	@Test
	void testRun_5() {
		ClientMsgReceiver clientMsgReceiver = new ClientMsgReceiver();
		clientMsgReceiver.run();
	}
	
	/**
	* Test case for {@link ClientMsgReceiver#run()} method.
	* It tests the case when the connection attempt was not successful.
	*/
	@Test
	void testRun_6() {
		ClientMsgReceiver clientMsgReceiver = new ClientMsgReceiver();
		clientMsgReceiver.run();
	}
	
	/**
	* Test case for {@link ClientMsgReceiver#run()} method.
	* It tests the case when the connection attempt was not successful.
	*/
	@Test
	void testRun_7() {
		ClientMsgReceiver clientMsgReceiver = new ClientMsgReceiver();
		clientMsgReceiver.run();
	}
	
	/**
	* Test case for {@link ClientMsgReceiver#run()} method.
	* It tests the case when the connection attempt was not successful.
	*/
	@Test
	void testRun_8() {
		ClientMsgReceiver clientMsgReceiver = new ClientMsgReceiver();"
cmpl-6wp1NeGwDWriE4Y6tqqQ9vqkjH1jH,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/client/ClientGameRound.java,95.4317421913147,length,"// ClientGameRound.java
package client;

import java.awt.Point;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import org.apache.log4j.Logger;
import client.controller.LocalControl;
import client.gui.StartFrame;
import client.network.ForwardingObserver;
import client.view.BombView;
import client.view.GameCanvas;
import client.view.GameView;
import client.view.GfxFactory;
import client.view.OffGamePainter;
import client.view.PlayerView;
import client.view.PowerUpView;
import client.view.StatusView;
import client.view.TileView;
import common.Bomb;
import common.Constants;
import common.GameModel;
import common.GameObject;
import common.GameRound;
import common.Map;
import common.Player;
import common.PowerUp;
import common.Tile;

/**
 * Represents a game on the client side. This class serves as a connection
 * between the model, view and game loop.
 *
 * @author Andi, Bj�rn
 */
public class ClientGameRound extends GameRound implements Observer {

    /**
     * Searches and returns a GameObject by its id.
     *
     * @param id The id of the GameObject that should be returned.
     * @return The matching GameObject or null if the id is unknown.
     */
    public GameObject getGameObjectById(int id);
}
","// ClientGameRoundTest.java
package client;

import java.awt.Point;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import org.apache.log4j.Logger;
import client.controller.LocalControl;
import client.gui.StartFrame;
import client.network.ForwardingObserver;
import client.view.BombView;
import client.view.GameCanvas;
import client.view.GameView;
import client.view.GfxFactory;
import client.view.OffGamePainter;
import client.view.PlayerView;
import client.view.PowerUpView;
import client.view.StatusView;
import client.view.TileView;
import common.Bomb;
import common.Constants;
import common.GameModel;
import common.GameObject;
import common.GameRound;
import common.Map;
import common.Player;
import common.PowerUp;
import common.Tile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientGameRound}.
* It contains ten unit test cases for the {@link ClientGameRound#getGameObjectById(int)} method.
*/
class ClientGameRoundTest {","// ClientGameRoundTest.java
package client;

import java.awt.Point;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import org.apache.log4j.Logger;
import client.controller.LocalControl;
import client.gui.StartFrame;
import client.network.ForwardingObserver;
import client.view.BombView;
import client.view.GameCanvas;
import client.view.GameView;
import client.view.GfxFactory;
import client.view.OffGamePainter;
import client.view.PlayerView;
import client.view.PowerUpView;
import client.view.StatusView;
import client.view.TileView;
import common.Bomb;
import common.Constants;
import common.GameModel;
import common.GameObject;
import common.GameRound;
import common.Map;
import common.Player;
import common.PowerUp;
import common.Tile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientGameRound}.
* It contains ten unit test cases for the {@link ClientGameRound#getGameObjectById(int)} method.
*/
class ClientGameRoundTest {

	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct GameObject.
	*/
	@Test
	void testGetGameObjectById() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
cmpl-6wp2u6HrXp7HdTe9ccvjqoXXK1jhB,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/client/ClientPlayer.java,81.46702599525452,length,"// ClientPlayer.java
package client;

import java.awt.Point;
import org.apache.log4j.Logger;
import sound.SoundPlayer;
import common.Actor;
import common.Constants;
import common.Player;

/**
 * The client specific implemetation of a Player. This implementation will
 * notify any number of registered observers about changes to their state.
 *
 * @author Andi, Bj�rn
 */
public class ClientPlayer extends Player {

    /**
     * Returns weather the player can bowl bombs
     *
     * @return boolean can bowl bombs
     */
    public boolean canBowlBombs();
}
","// ClientPlayerTest.java
package client;

import java.awt.Point;
import org.apache.log4j.Logger;
import sound.SoundPlayer;
import common.Actor;
import common.Constants;
import common.Player;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientPlayer}.
* It contains ten unit test cases for the {@link ClientPlayer#canBowlBombs()} method.
*/
class ClientPlayerTest {","// ClientPlayerTest.java
package client;

import java.awt.Point;
import org.apache.log4j.Logger;
import sound.SoundPlayer;
import common.Actor;
import common.Constants;
import common.Player;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientPlayer}.
* It contains ten unit test cases for the {@link ClientPlayer#canBowlBombs()} method.
*/
class ClientPlayerTest {

	/**
	 * Test case for {@link ClientPlayer#canBowlBombs()}.
	 * It tests if the method returns true if the player has a bomb.
	 */
	@Test
	void testCanBowlBombs_True() {
		ClientPlayer player = new ClientPlayer(new Point(0, 0), ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"", ""test"","
cmpl-6wp4EX4nBOFMtXVAGzvUYpOBNZvAM,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/client/ClientProperties0.java,81.26758813858032,length,"// ClientProperties.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;

/**
 * reads and writes properties to xml-file
 * properties file is saved to user directory
 *
 * @author christian
 */
public class ClientProperties {

    /**
     * get property value by element-name returns empty string if fileError is
     * true
     *
     * @param element -
     *            Name of element
     * @return String - value
     */
    public String getProperty(String element);
}
","// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.
*/
class ClientPropertiesTest {","// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.
*/
class ClientPropertiesTest {

	/**
	 * Test case for {@link ClientProperties#getProperty(String)} method.
	 * It tests if the method returns the correct value for the element ""server"".
	 */
	@Test
	void testGetPropertyServer() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""localhost"";
		String actual = clientProperties.getProperty(""server"");
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClientProperties#getProperty(String)} method.
	 * It tests if the method returns the correct value for the element ""port"".
	 */
	@Test
	void testGetPropertyPort() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""8080"";
		String actual = clientProperties.getProperty(""port"");
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClientProperties#getProperty(String)} method.
	 * It tests if the method returns the correct value for the element ""user"".
	 */
	@Test
	void testGetPropertyUser() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""user"";
		String actual = clientProperties.getProperty(""user"");
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClientProperties#getProperty(String)} method.
	 * It tests if the method returns the correct value for the element ""password"".
	 */
	@Test
	void testGetPropertyPassword() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""password"";
		String actual = clientProperties.getProperty(""password"");
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClientProperties#getProperty(String)} method.
	 * It tests if the method returns the correct value for the element ""database"".
	 */
	@Test
	void testGetPropertyDatabase() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""database"";
		String actual = clientProperties.getProperty(""database"");
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClientProperties#getProperty(String)} method.
	 * It tests if the method returns the correct value for the element ""table"".
	 */
	@Test
	void testGetPropertyTable() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""table"";
		String actual = clientProperties.getProperty(""table"");
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClientProperties#getProperty(String)} method.
	 * It tests if the method returns the correct value for the element ""column"".
	 */
	@Test
	void testGetPropertyColumn() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""column"";
		String actual = clientProperties.getProperty(""column"");
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClientProperties#getProperty(String)} method.
	 * It tests if the method returns the correct value for the element ""file"".
	 */
	@Test
	void testGetPropertyFile() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""file"";
		String actual = clientProperties.getProperty(""file"");
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClientProperties#getProperty(String)} method.
	 * It tests if the method returns the correct value for the element ""fileError"".
	 */
	@Test
	void testGetPropertyFileError() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""false"";
		String actual = clientProperties.getProperty(""fileError"");
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClientProperties#getProperty(String)} method.
	 * It tests if the method returns the correct value for the element ""fileError"".
	 */
	@Test
	void testGetPropertyFileError2() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = """";
		String actual = clientProperties.getProperty(""fileError"");
		assertEquals(expected, actual);
	}
}

// ClientProperties.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;

/**
 * reads and writes properties to xml-file
 * properties file is saved to user directory
 *
 * @author christian
 */
public class ClientProperties {

    /**
     * get property value by element-name returns empty string if fileError is
     * true
     *
     * @param element -
     *            Name of element
     * @return String - value
     */
    public String getProperty(String element) {
        if (element.equals(""fileError"")) {
            if (fileError) {
                return """";
            } else {
                return ""false"";
            }
        }
        return XmlFunctions.getElementValue(element, propertiesFile);
    }
}

// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.
*/
class ClientPropertiesTest {
		
	/**
	 * Test case for {@link ClientProperties#getProperty(String)} method.
	 * It tests if the method returns the correct value for the element ""server"".
	 */
	@Test
	void testGetPropertyServer() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""localhost"";
		String actual = clientProperties.getProperty(""server"");
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClientProperties#getProperty(String)} method.
	 * It tests if the method returns the correct value for the element ""port"".
	 */
	@Test
	void testGetPropertyPort() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""8080"";
		String actual = clientProperties.getProperty(""port"");
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClientProperties#getProperty(String)} method.
	 * It tests if the method returns the correct value for the element ""user"".
	 */
	@Test
	void testGetPropertyUser() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""user"";
		String actual = clientProperties.getProperty(""user"");
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClientProperties#getProperty(String)} method.
	 * It tests if the method returns the correct value for the element ""password"".
	 */
	@Test
	void testGetPropertyPassword() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""password"";
		String actual = clientProperties.getProperty(""password"");
		assertEquals(expected, actual);
	}
	
	/**
	 * Test case for {@link ClientProperties#get"
cmpl-6wp5XcGukF3GMmgp8PjC6uvR0KTJz,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/client/ClientProperties1.java,70.102290391922,length,"// ClientProperties.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;

/**
 * reads and writes properties to xml-file
 * properties file is saved to user directory
 *
 * @author christian
 */
public class ClientProperties {

    /**
     * copies a file from a to b
     * used InputStream as provided from ResourceService class as
     * source and File as destination
     *
     * @param sourceFile -
     *            InputStream - File which should be copied
     * @param destFile -
     *            destination where file should be copied to
     * @return boolean - true if successfully copied, otherwise false
     */
    public static boolean fileCopy(InputStream sourceFile, File destFile);
}
","// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.
*/
class ClientPropertiesTest {","// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.
*/
class ClientPropertiesTest {

	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	public void testFileCopySuccess() {
		// TODO: implement
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopyFailure() {
		// TODO: implement
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopyFailure() {
		// TODO: implement
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopyFailure() {
		// TODO: implement
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopyFailure() {
		// TODO: implement
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopyFailure() {
		// TODO: implement
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopyFailure() {
		// TODO: implement
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopyFailure() {
		// TODO: implement
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopyFailure() {
		// TODO: implement
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopyFailure() {
		// TODO: implement
	}
}

// ClientProperties.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;

/**
 * reads and writes properties to xml-file
 * properties file is saved to user directory
 *
 * @author christian
 */
public class ClientProperties {

    /**
     * copies a file from a to b
     * used InputStream as provided from ResourceService class as
     * source and File as destination
     *
     * @param sourceFile -
     *            InputStream - File which should be copied
     * @param destFile -
     *            destination where file should be copied to
     * @return boolean - true if successfully copied, otherwise false
     */
    public static boolean fileCopy(InputStream sourceFile, File destFile) {
        boolean success = false;
        try {
            FileOutputStream fos = new FileOutputStream(destFile);
            byte[] buffer = new byte[1024];
            int length;
            while ((length = sourceFile.read(buffer)) > 0) {
                fos.write(buffer, 0, length);
            }
            fos.close();
            success = true;
        } catch (IOException e) {
            logger.error(""Error while copying file: "" + e.getMessage());
        }
        return success;
    }
}

// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.
*/
class ClientPropertiesTest {
		
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	public void testFileCopySuccess() {
		// TODO: implement
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopyFailure() {
		// TODO: implement
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopyFailure() {
		// TODO: implement
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopyFailure() {
		// TODO: implement
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopyFailure() {
		// TODO: implement
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopyFailure() {
		// TODO: implement
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopyFailure() {
		// TODO: implement
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopyFailure() {
		// TODO: implement
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopyFailure() {
		// TODO: implement
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	public void testFileCopyFailure() {
		// TODO: implement
	}
"
cmpl-6wp6fyrTQE1DQvpQsghX3LsmZ2k7I,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/client/view/GfxFactory.java,86.32571172714233,length,"// GfxFactory.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;

/**
 * @author Andreas Glauner
 * @autor Adam Kozielski
 */
public class GfxFactory {

    /**
     * Power up image loading
     *
     * @param type A String value describing the type of powerUp
     *  *
     */
    public Image getPowerUpImage(String type);
}
","// GfxFactoryTest.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GfxFactory}.
* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.
*/
class GfxFactoryTest {","// GfxFactoryTest.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GfxFactory}.
* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.
*/
class GfxFactoryTest {

	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage2() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage3() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage4() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage5() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage6() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage7() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage8() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage9() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage10() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
}

// GfxFactory.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;

/**
 * @author Andreas Glauner
 * @autor Adam Kozielski
 */
public class GfxFactory {

    /**
     * Power up image loading
     *
     * @param type A String value describing the type of powerUp
     *  *
     */
    public Image getPowerUpImage(String type);
}

// GfxFactoryTest.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GfxFactory}.
* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.
*/
class GfxFactoryTest {
		
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage2() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage3() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage4() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage"
cmpl-6wp83poU95tRb3HCoSacpq6ErbpyM,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/common/GameModel.java,20.7265944480896,stop,"// GameModel.java
package common;

import java.awt.Point;
import java.util.Collection;
import java.util.HashMap;
import java.util.Vector;
import java.util.Map.Entry;
import messages.round.RoundTimeOverMsg;
import org.apache.log4j.Logger;

/**
 * @author Steffen, Andi, Bj�rn
 */
public class GameModel {

    /**
     * Checks if the game is over and if yes returns the gameObjectId of the
     * winner.
     *
     * @return -1 if game still running, 0 in case of a tie, gameObjectId of the
     *         winner in all other cases
     */
    public int checkForWinner();
}
","// GameModelTest.java
package common;

import java.awt.Point;
import java.util.Collection;
import java.util.HashMap;
import java.util.Vector;
import java.util.Map.Entry;
import messages.round.RoundTimeOverMsg;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GameModel}.
* It contains ten unit test cases for the {@link GameModel#checkForWinner()} method.
*/
class GameModelTest {","// GameModelTest.java
package common;

import java.awt.Point;
import java.util.Collection;
import java.util.HashMap;
import java.util.Vector;
import java.util.Map.Entry;
import messages.round.RoundTimeOverMsg;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GameModel}.
* It contains ten unit test cases for the {@link GameModel#checkForWinner()} method.
*/
class GameModelTest {

	/**
	 * Test case 1:
	 * The game is over and there is a winner.
	 * The gameObjectId of the winner is returned.
	 */
	@Test
	void testCheckForWinner1() {
		// TODO
	}
	
	/**
	 * Test case 2:
	 * The game is over and there is no winner.
	 * The gameObjectId of the winner is returned.
	 */
	@Test
	void testCheckForWinner2() {
		// TODO
	}
	
	/**
	 * Test case 3:
	 * The game is over and there is a tie.
	 * The gameObjectId of the winner is returned.
	 */
	@Test
	void testCheckForWinner3() {
		// TODO
	}
	
	/**
	 * Test case 4:
	 * The game is not over and there is a winner.
	 * The gameObjectId of the winner is returned.
	 */
	@Test
	void testCheckForWinner4() {
		// TODO
	}
	
	/**
	 * Test case 5:
	 * The game is not over and there is no winner.
	 * The gameObjectId of the winner is returned.
	 */
	@Test
	void testCheckForWinner5() {
		// TODO
	}
	
	/**
	 * Test case 6:
	 * The game is not over and there is a tie.
	 * The gameObjectId of the winner is returned.
	 */
	@Test
	void testCheckForWinner6() {
		// TODO
	}
	
	/**
	 * Test case 7:
	 * The game is over and there is a winner.
	 * The gameObjectId of the winner is returned.
	 */
	@Test
	void testCheckForWinner7() {
		// TODO
	}
	
	/**
	 * Test case 8:
	 * The game is over and there is no winner.
	 * The gameObjectId of the winner is returned.
	 */
	@Test
	void testCheckForWinner8() {
		// TODO
	}
	
	/**
	 * Test case 9:
	 * The game is over and there is a tie.
	 * The gameObjectId of the winner is returned.
	 */
	@Test
	void testCheckForWinner9() {
		// TODO
	}
	
	/**
	 * Test case 10:
	 * The game is not over and there is a winner.
	 * The gameObjectId of the winner is returned.
	 */
	@Test
	void testCheckForWinner10() {
		// TODO
	}
}"
cmpl-6wp96uILbsvNvtNiNGF2c4kbNTfnr,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/common/Map0.java,92.0241801738739,length,"// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * Map-Class with all information needed for map use of iterators tile-iterator:
 * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class Map implements Iterable<Tile>, Serializable {

    /**
     * return MapTile object at Index x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @return MapTile object
     */
    public Tile getTileByIndex(int x, int y);
}
","// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTileByIndex(int, int)} method.
*/
class MapTest {","// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTileByIndex(int, int)} method.
*/
class MapTest {

	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @result The method returns the correct tile.
	 */
	@Test
	void testGetTileByIndex() {
		Map map = new Map();
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getX(), 0);
		assertEquals(tile.getY(), 0);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @result The method returns the correct tile.
	 */
	@Test
	void testGetTileByIndex2() {
		Map map = new Map();
		Tile tile = map.getTileByIndex(1, 1);
		assertEquals(tile.getX(), 1);
		assertEquals(tile.getY(), 1);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @result The method returns the correct tile.
	 */
	@Test
	void testGetTileByIndex3() {
		Map map = new Map();
		Tile tile = map.getTileByIndex(2, 2);
		assertEquals(tile.getX(), 2);
		assertEquals(tile.getY(), 2);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @result The method returns the correct tile.
	 */
	@Test
	void testGetTileByIndex4() {
		Map map = new Map();
		Tile tile = map.getTileByIndex(3, 3);
		assertEquals(tile.getX(), 3);
		assertEquals(tile.getY(), 3);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @result The method returns the correct tile.
	 */
	@Test
	void testGetTileByIndex5() {
		Map map = new Map();
		Tile tile = map.getTileByIndex(4, 4);
		assertEquals(tile.getX(), 4);
		assertEquals(tile.getY(), 4);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @result The method returns the correct tile.
	 */
	@Test
	void testGetTileByIndex6() {
		Map map = new Map();
		Tile tile = map.getTileByIndex(5, 5);
		assertEquals(tile.getX(), 5);
		assertEquals(tile.getY(), 5);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @result The method returns the correct tile.
	 */
	@Test
	void testGetTileByIndex7() {
		Map map = new Map();
		Tile tile = map.getTileByIndex(6, 6);
		assertEquals(tile.getX(), 6);
		assertEquals(tile.getY(), 6);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @result The method returns the correct tile.
	 */
	@Test
	void testGetTileByIndex8() {
		Map map = new Map();
		Tile tile = map.getTileByIndex(7, 7);
		assertEquals(tile.getX(), 7);
		assertEquals(tile.getY(), 7);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @result The method returns the correct tile.
	 */
	@Test
	void testGetTileByIndex9() {
		Map map = new Map();
		Tile tile = map.getTileByIndex(8, 8);
		assertEquals(tile.getX(), 8);
		assertEquals(tile.getY(), 8);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @result The method returns the correct tile.
	 */
	@Test
	void testGetTileByIndex10() {
		Map map = new Map();
		Tile tile = map.getTileByIndex(9, 9);
		assertEquals(tile.getX(), 9);
		assertEquals(tile.getY(), 9);
	}
}

// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * Map-Class with all information needed for map use of iterators tile-iterator:
 * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class Map implements Iterable<Tile>, Serializable {

    /**
     * return MapTile object at Index x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @return MapTile object
     */
    public Tile getTileByIndex(int x, int y) {
        return tiles[x][y];
    }
}

// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTileByIndex(int, int)} method.
*/
class MapTest {
		
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @result The method returns the correct tile.
	 */
	@Test
	void testGetTileByIndex() {
		Map map = new Map();
		Tile tile = map.getTileByIndex(0, 0);
		assertEquals(tile.getX(), 0);
		assertEquals(tile.getY(), 0);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @result The method returns the correct tile.
	 */
	@Test
	void testGetTileByIndex2() {
		Map map = new Map();
		Tile tile = map.getTileByIndex(1, 1);
		assertEquals(tile.getX(), 1);
		assertEquals(tile.getY(), 1);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @result The method returns the correct tile.
	 */
	@Test
	void testGetTileByIndex3() {
		Map map = new Map();
		Tile tile = map.getTileByIndex(2, 2);
		assertEquals(tile.getX(), 2);
		assertEquals(tile.getY(), 2);
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @result The method returns the correct tile.
	 */
	@Test
	void testGetTileByIndex4() {
		Map map = new Map();
		Tile tile = map.getTileByIndex(3, 3);
		assertEquals(tile.getX(), 3);
		assertEquals(tile.getY(), 3);
	}
	
	/**
"
cmpl-6wpAbD6x4RgILD9GqHDJn4enthlmo,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/common/Map1.java,57.78118944168091,length,"// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * Map-Class with all information needed for map use of iterators tile-iterator:
 * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class Map implements Iterable<Tile>, Serializable {

    /**
     * return MapTile object at Position x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @return MapTile object
     */
    public Tile getTile(int x, int y);
}
","// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTile(int, int)} method.
*/
class MapTest {","// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTile(int, int)} method.
*/
class MapTest {

	/**
	 * Test case for {@link Map#getTile(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTile() {
		Map map = new Map();
		Tile tile = map.getTile(0, 0);
		assertEquals(tile.getPosition(), new Point(0, 0));
	}
}

// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * Map-Class with all information needed for map use of iterators tile-iterator:
 * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class Map implements Iterable<Tile>, Serializable {

    /**
     * return MapTile object at Position x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @return MapTile object
     */
    public Tile getTile(int x, int y) {
        return tiles[x][y];
    }
}

// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTile(int, int)} method.
*/
class MapTest {
		
	/**
	 * Test case for {@link Map#getTile(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTile() {
		Map map = new Map();
		Tile tile = map.getTile(0, 0);
		assertEquals(tile.getPosition(), new Point(0, 0));
	}
}

// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * Map-Class with all information needed for map use of iterators tile-iterator:
 * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class Map implements Iterable<Tile>, Serializable {

    /**
     * return MapTile object at Position x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @return MapTile object
     */
    public Tile getTile(int x, int y) {
        return tiles[x][y];
    }
}

// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTile(int, int)} method.
*/
class MapTest {
		
	/**
	 * Test case for {@link Map#getTile(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTile() {
		Map map = new Map();
		Tile tile = map.getTile(0, 0);
		assertEquals(tile.getPosition(), new Point(0, 0));
	}
}

// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * Map-Class with all information needed for map use of iterators tile-iterator:
 * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class Map implements Iterable<Tile>, Serializable {

    /**
     * return MapTile object at Position x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @return MapTile object
     */
    public Tile getTile(int x, int y) {
        return tiles[x][y];
    }
}

// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTile(int, int)} method.
*/
class MapTest {
		
	/**
	 * Test case for {@link Map#getTile(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTile() {
		Map map = new Map();
		Tile tile = map.getTile(0, 0);
		assertEquals(tile.getPosition(), new Point(0, 0));
	}
}

// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * Map-Class with all information needed for map use of iterators tile-iterator:
 * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class Map implements Iterable<Tile>, Serializable {

    /**
     * return MapTile object at Position x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @return MapTile object
     */
    public Tile getTile(int x, int y) {
        return tiles[x][y];
    }
}

// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTile(int, int)} method.
*/
class MapTest {
		
	/**
	 * Test case for {@link Map#getTile(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTile() {
		Map map = new Map();
		Tile tile = map.getTile(0, 0);
		assertEquals(tile.getPosition(), new Point(0, 0));
	}
}

// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;"
cmpl-6wpBe5uO3QhWJkC0Z7toF5FE1hUOY,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/common/Map2.java,30.26480197906494,stop,"// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * Map-Class with all information needed for map use of iterators tile-iterator:
 * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class Map implements Iterable<Tile>, Serializable {

    /**
     * gets start-point-coordinates of player no. if not set, return coordinates
     * of field 1/1
     *
     * @param playerNo -
     *            number of player
     * @return Point with coordinates
     */
    public Point getStartPoint(int playerNo);
}
","// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getStartPoint(int)} method.
*/
class MapTest {","// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getStartPoint(int)} method.
*/
class MapTest {

	/**
	 * Test case for {@link Map#getStartPoint(int)}
	 * 
	 * @result The method returns the coordinates of the start point of the player.
	 */
	@Test
	void testGetStartPoint() {
		Map map = new Map();
		Point point = map.getStartPoint(1);
		assertEquals(point.x, 1);
		assertEquals(point.y, 1);
	}
	
	/**
	 * Test case for {@link Map#getStartPoint(int)}
	 * 
	 * @result The method returns the coordinates of the start point of the player.
	 */
	@Test
	void testGetStartPoint2() {
		Map map = new Map();
		Point point = map.getStartPoint(2);
		assertEquals(point.x, 1);
		assertEquals(point.y, 1);
	}
	
	/**
	 * Test case for {@link Map#getStartPoint(int)}
	 * 
	 * @result The method returns the coordinates of the start point of the player.
	 */
	@Test
	void testGetStartPoint3() {
		Map map = new Map();
		Point point = map.getStartPoint(3);
		assertEquals(point.x, 1);
		assertEquals(point.y, 1);
	}
	
	/**
	 * Test case for {@link Map#getStartPoint(int)}
	 * 
	 * @result The method returns the coordinates of the start point of the player.
	 */
	@Test
	void testGetStartPoint4() {
		Map map = new Map();
		Point point = map.getStartPoint(4);
		assertEquals(point.x, 1);
		assertEquals(point.y, 1);
	}
	
	/**
	 * Test case for {@link Map#getStartPoint(int)}
	 * 
	 * @result The method returns the coordinates of the start point of the player.
	 */
	@Test
	void testGetStartPoint5() {
		Map map = new Map();
		Point point = map.getStartPoint(5);
		assertEquals(point.x, 1);
		assertEquals(point.y, 1);
	}
	
	/**
	 * Test case for {@link Map#getStartPoint(int)}
	 * 
	 * @result The method returns the coordinates of the start point of the player.
	 */
	@Test
	void testGetStartPoint6() {
		Map map = new Map();
		Point point = map.getStartPoint(6);
		assertEquals(point.x, 1);
		assertEquals(point.y, 1);
	}
	
	/**
	 * Test case for {@link Map#getStartPoint(int)}
	 * 
	 * @result The method returns the coordinates of the start point of the player.
	 */
	@Test
	void testGetStartPoint7() {
		Map map = new Map();
		Point point = map.getStartPoint(7);
		assertEquals(point.x, 1);
		assertEquals(point.y, 1);
	}
	
	/**
	 * Test case for {@link Map#getStartPoint(int)}
	 * 
	 * @result The method returns the coordinates of the start point of the player.
	 */
	@Test
	void testGetStartPoint8() {
		Map map = new Map();
		Point point = map.getStartPoint(8);
		assertEquals(point.x, 1);
		assertEquals(point.y, 1);
	}
	
	/**
	 * Test case for {@link Map#getStartPoint(int)}
	 * 
	 * @result The method returns the coordinates of the start point of the player.
	 */
	@Test
	void testGetStartPoint9() {
		Map map = new Map();
		Point point = map.getStartPoint(9);
		assertEquals(point.x, 1);
		assertEquals(point.y, 1);
	}
	
	/**
	 * Test case for {@link Map#getStartPoint(int)}
	 * 
	 * @result The method returns the coordinates of the start point of the player.
	 */
	@Test
	void testGetStartPoint10() {
		Map map = new Map();
		Point point = map.getStartPoint(10);
		assertEquals(point.x, 1);
		assertEquals(point.y, 1);
	}
}"
cmpl-6wpChMBWqTHNf6KQMbhnIVfuhABuy,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/common/MapFilesLister.java,62.1736626625061,length,"// MapFilesLister.java
package common;

import java.io.File;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.log4j.Logger;
import messages.global.MapInfo;

/**
 * class for listing maps and returning map information
 *
 * @author christian
 */
public class MapFilesLister {

    /**
     * reads directory and returns a list of found xml-files
     *
     * @param dir -
     *            directory to be searched in
     * @return Vector<File>
     */
    public Vector<File> ListMaps(String dir);
}
","// MapFilesListerTest.java
package common;

import java.io.File;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.log4j.Logger;
import messages.global.MapInfo;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapFilesLister}.
* It contains ten unit test cases for the {@link MapFilesLister#ListMaps(String)} method.
*/
class MapFilesListerTest {","// MapFilesListerTest.java
package common;

import java.io.File;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.log4j.Logger;
import messages.global.MapInfo;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapFilesLister}.
* It contains ten unit test cases for the {@link MapFilesLister#ListMaps(String)} method.
*/
class MapFilesListerTest {

	/**
	 * Test case for {@link MapFilesLister#ListMaps(String)} method.
	 * It tests if the method returns a list of files in the given directory.
	 */
	@Test
	void testListMaps() {
		MapFilesLister mfl = new MapFilesLister();
		Vector<File> files = mfl.ListMaps(""src/test/resources/maps"");
		assertEquals(2, files.size());
	}
}

// MapInfo.java
package messages.global;

import java.io.Serializable;

/**
 * class for map information
 *
 * @author christian
 */
public class MapInfo implements Serializable {

    /**
     *
     */
    private static final long serialVersionUID = 1L;
    private String name;
    private String description;
    private String author;
    private String version;
    private String filename;

    /**
     * constructor
     *
     * @param name -
     *            name of the map
     * @param description -
     *            description of the map
     * @param author -
     *            author of the map
     * @param version -
     *            version of the map
     * @param filename -
     *            filename of the map
     */
    public MapInfo(String name, String description, String author, String version, String filename) {
        this.name = name;
        this.description = description;
        this.author = author;
        this.version = version;
        this.filename = filename;
    }

    /**
     * returns the name of the map
     *
     * @return String
     */
    public String getName() {
        return name;
    }

    /**
     * returns the description of the map
     *
     * @return String
     */
    public String getDescription() {
        return description;
    }

    /**
     * returns the author of the map
     *
     * @return String
     */
    public String getAuthor() {
        return author;
    }

    /**
     * returns the version of the map
     *
     * @return String
     */
    public String getVersion() {
        return version;
    }

    /**
     * returns the filename of the map
     *
     * @return String
     */
    public String getFilename() {
        return filename;
    }
}

// MapInfoTest.java
package messages.global;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapInfo}.
* It contains ten unit test cases for the {@link MapInfo#MapInfo(String, String, String, String, String)} constructor.
*/
class MapInfoTest {
		
	/**
	 * Test case for {@link MapInfo#MapInfo(String, String, String, String, String)} constructor.
	 * It tests if the constructor creates a new MapInfo object.
	 */
	@Test
	void testMapInfo() {
		MapInfo mapInfo = new MapInfo(""name"", ""description"", ""author"", ""version"", ""filename"");
		assertNotNull(mapInfo);
	}
}

// MapLoader.java
package common;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import messages.global.MapInfo;

/**
 * class for loading maps
 *
 * @author christian
 */
public class MapLoader {

    /**
     * loads a map from a file
     *
     * @param filename -
     *            filename of the map
     * @return Map
     */
    public Map LoadMap(String filename);
}

// MapLoaderTest.java
package common;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import messages.global.MapInfo;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapLoader}.
* It contains ten unit test cases for the {@link MapLoader#LoadMap(String)} method.
*/
class MapLoaderTest {
		
	/**
	 * Test case for {@link MapLoader#LoadMap(String)} method.
	 * It tests if the method returns a map.
	 */
	@Test
	void testLoadMap() {
		MapLoader ml = new MapLoader();
		Map map = ml.LoadMap(""src/test/resources/maps/map1.xml"");
		assertNotNull(map);
	}
}

// MapSaver.java
package common;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import messages.global.MapInfo;

/**
 * class for saving maps
 *
 * @author christian
 */
public class MapSaver {

    /**
     * saves a map to a file
     *
     * @param map -
     *            map to be saved
     * @param filename -
     *            filename of the map
     */
    public void SaveMap(Map map, String filename);
}

// MapSaverTest.java
package common;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfiguration"
cmpl-6wpDhbyHpPhmMRHevhq62TD2MuheM,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/common/MapPreview.java,74.96609449386597,length,"// MapPreview.java
package common;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.apache.log4j.Logger;

/**
 * create a ImageIcon Map Preview of a map object
 *
 * usage example: MapPreview mp = new MapPreview(map); mp.setImageSet(""desert"");
 * (optional) ImageIcon ii = mp.getMapPreview(150); !!
 *
 * @author christian
 */
public class MapPreview {

    /**
     * returns preview of current map
     *
     * @param previewWidth -
     *            Width of preview. Proportions are constrained
     * @return BufferedImage with map preview
     */
    public ImageIcon getMapPreview(int previewWidth);
}
","// MapPreviewTest.java
package common;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapPreview}.
* It contains ten unit test cases for the {@link MapPreview#getMapPreview(int)} method.
*/
class MapPreviewTest {","// MapPreviewTest.java
package common;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapPreview}.
* It contains ten unit test cases for the {@link MapPreview#getMapPreview(int)} method.
*/
class MapPreviewTest {

		/**
		 * Test case for {@link MapPreview#getMapPreview(int)}
		 * 
		 * @throws IOException
		 */
		@Test
		void testGetMapPreview() throws IOException {
				Map map = new Map();
				map.setMapName(""TestMap"");
				map.setMapDescription(""TestMapDescription"");
				map.setMapAuthor(""TestMapAuthor"");
				map.setMapSize(new Point(10, 10));
				map.setMapImageSet(""desert"");
				map.setMapImage(new ImageIcon(ImageIO.read(new File(""src/main/resources/images/desert/desert_background.png""))));
				map.setMapBackground(new ImageIcon(ImageIO.read(new File(""src/main/resources/images/desert/desert_background.png""))));
				map.setMapForeground(new ImageIcon(ImageIO.read(new File(""src/main/resources/images/desert/desert_foreground.png""))));
				map.setMapGrid(new ImageIcon(ImageIO.read(new File(""src/main/resources/images/desert/desert_grid.png""))));
				map.setMapGridSize(new Point(32, 32));
				map.setMapGridOffset(new Point(0, 0));
				map.setMapGridColor(Color.BLACK);
				map.setMapGridAlpha(0.5f);
				map.setMapGridVisible(true);
				map.setMapGridSnap(true);
				map.setMapGridSnapTolerance(5);
				map.setMapGridSnapColor(Color.RED);
				map.setMapGridSnapAlpha(0.5f);
				map.setMapGridSnapVisible(true);
				map.setMapGridSnapSize(new Point(32, 32));
				map.setMapGridSnapOffset(new Point(0, 0));
				map.setMapGridSnapRotation(0);
				map.setMapGridSnapFlip(false);
				map.setMapGridSnapMirror(false);
				map.setMapGridSnapProportional(false);
				map.setMapGridSnapKeepRatio(false);
				map.setMapGridSnapKeepRatioMin(0.5f);
				map.setMapGridSnapKeepRatioMax(2.0f);
				map.setMapGridSnapKeepRatioStep(0.1f);
				map.setMapGridSnapKeepRatioLock(false);
				map.setMapGridSnapKeepRatioLockMin(0.5f);
				map.setMapGridSnapKeepRatioLockMax(2.0f);
				map.setMapGridSnapKeepRatioLockStep(0.1f);
				map.setMapGridSnapKeepRatioLockValue(1.0f);
				map.setMapGridSnapKeepRatioLockVisible(true);
				map.setMapGridSnapKeepRatioLockColor(Color.BLUE);
				map.setMapGridSnapKeepRatioLockAlpha(0.5f);
				map.setMapGridSnapKeepRatioLockSize(new Point(32, 32));
				map.setMapGridSnapKeepRatioLockOffset(new Point(0, 0));
				map.setMapGridSnapKeepRatioLockRotation(0);
				map.setMapGridSnapKeepRatioLockFlip(false);
				map.setMapGridSnapKeepRatioLockMirror(false);
				map.setMapGridSnapKeepRatioLockProportional(false);
				map.setMapGridSnapKeepRatioLockKeepRatio(false);
				map.setMapGridSnapKeepRatioLockKeepRatioMin(0.5f);
				map.setMapGridSnapKeepRatioLockKeepRatioMax(2.0f);
				map.setMapGridSnapKeepRatioLockKeepRatioStep(0.1f);
				map.setMapGridSnapKeepRatioLockKeepRatioLock(false);
				map.setMapGridSnapKeepRatioLockKeepRatioLockMin(0.5f);
				map.setMapGridSnapKeepRatioLockKeepRatioLockMax(2.0f);
				map.setMapGridSnapKeepRatioLockKeepRatioLockStep(0.1f);
				map.setMapGridSnapKeepRatioLockKeepRatioLockValue(1.0f);
				map.setMapGridSnapKeepRatioLockKeepRatioLockVisible(true);
				map.setMapGridSnapKeepRatioLockKeepRatioLockColor(Color.BLUE);
				map.setMapGridSnapKeepRatioLockKeepRatioLockAlpha(0.5f);
				map.setMapGridSnapKeepRatioLockKeepRatioLockSize(new Point(32, 32));
				map.setMapGridSnapKeepRatioLockKeepRatioLockOffset(new Point(0, 0));
				map.setMapGridSnapKeepRatioLockKeepRatioLockRotation(0);
				map.setMapGridSnapKeepRatioLockKeepRatioLockFlip(false);
				map.setMapGridSnapKeepRatioLockKeepRatioLockMirror(false);
				map.setMapGridSnapKeepRatioLockKeepRatioLockProportional(false);
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatio(false);
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatioMin(0.5f);
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatioMax(2.0f);
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatioStep(0.1f);
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatioLock(false);
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatioLockMin(0.5f);
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatioLockMax(2.0f);
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatioLockStep(0.1f);
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatioLockValue(1.0f);
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatioLockVisible(true);
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatioLockColor(Color.BLUE);
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatioLockAlpha(0.5f);
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatioLockSize(new Point(32, 32));
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatioLockOffset(new Point(0, 0));
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatioLockRotation(0);
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatioLockFlip(false);
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatioLockMirror(false);
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatioLockProportional(false);
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatioLockKeepRatio(false);
				map.setMapGridSnapKeepRatioLockKeepRatioLockKeepRatioLockKeepRatioMin("
cmpl-6wpEuRANYfqlDDF5pM4M41IYkB4Q5,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/common/MapReader.java,61.60247039794922,length,"// MapReader.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;

/**
 * Loads a XML-file and write read properties, tiles and start points to
 * map-object
 *
 * @author christian
 */
public class MapReader {

    /**
     * Returns a specific value in a group of nodes using XPath expressions
     *
     * @param node -
     *            node(set) in which value should be searched
     * @param XMLPath -
     *            XPath expression
     * @return String - found value
     */
    public String getXMLValue(Node node, String XMLPath);
}
","// MapReaderTest.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapReader}.
* It contains ten unit test cases for the {@link MapReader#getXMLValue(Node, String)} method.
*/
class MapReaderTest {","// MapReaderTest.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapReader}.
* It contains ten unit test cases for the {@link MapReader#getXMLValue(Node, String)} method.
*/
class MapReaderTest {

	/**
	* Test case for {@link MapReader#getXMLValue(Node, String)} method.
	* It tests if the method returns the correct value for a given node and XPath expression.
	*/
	@Test
	void testGetXMLValue() {
		// TODO
	}
}

// MapWriter.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;

/**
 * Writes a map-object to a XML-file
 *
 * @author christian
 */
public class MapWriter {

    /**
     * Writes a map-object to a XML-file
     *
     * @param map -
     *            map-object to be written
     * @param fileName -
     *            name of the file to be written
     */
    public void writeMap(Map map, String fileName);
}

// MapWriterTest.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapWriter}.
* It contains ten unit test cases for the {@link MapWriter#writeMap(Map, String)} method.
*/
class MapWriterTest {
		
	/**
	* Test case for {@link MapWriter#writeMap(Map, String)} method.
	* It tests if the method writes the correct values to a given file.
	*/
	@Test
	void testWriteMap() {
		// TODO
	}
}

// Map.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;

/**
 * Class for a map
 *
 * @author christian
 */
public class Map {

    /**
     * Returns the width of the map
     *
     * @return int - width of the map
     */
    public int getWidth();

    /**
     * Returns the height of the map
     *
     * @return int - height of the map
     */
    public int getHeight();

    /**
     * Returns the tile at a specific position
     *
     * @param x -
     *            x-coordinate of the tile
     * @param y -
     *            y-coordinate of the tile
     * @return Tile - tile at the given position
     */
    public Tile getTile(int x, int y);

    /**
     * Returns the start point of a player
     *
     * @param player -
     *            player whose start point should be returned
     * @return Point - start point of the player
     */
    public Point getStartPoint(Player player);
}

// MapTest.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getWidth()}, {@link Map#getHeight()}, {@link Map#getTile(int, int)} and {@link Map#getStartPoint(Player)} methods.
*/
class MapTest {
		
	/**
	* Test case for {@link Map#getWidth()} method.
	* It tests if the method returns the correct width of the map.
	*/
	@Test
	void testGetWidth() {
		// TODO
	}
	
	/**
	* Test case for {@link Map#getHeight()} method.
	* It tests if the method returns the correct height of the map.
	*/
	@Test
	void testGetHeight() {
		// TODO
	}
	
	/**
	* Test case for {@link Map#getTile(int, int)} method.
	* It tests if the method returns the correct tile at a given position.
	*/
	@Test
	void testGetTile() {
		// TODO
	}
	
	/**
	* Test case for {@link Map#getStartPoint(Player)} method.
	* It tests if the method returns the correct start point of a given player.
	*/
	@Test
	void testGetStartPoint() {
		// TODO
	}
}

// Tile.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;

/**
 * Class for a tile
 *
 * @author christian
 */
public class Tile {

    /**
     * Returns the type of the tile
     *
     * @return TileType - type of the tile
     */
    public TileType getType();
}

// TileTest.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Tile}.
* It contains ten unit test cases for the {@link Tile#getType()} method.
*/
class TileTest {
		
	/**
	* Test case for {@link Tile#getType()} method.
	* It tests if the method returns the correct type of the tile.
	*/
	@Test
	void testGetType() {
		// TODO
	}
}

// TileType.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;

/**
 * Enumeration for the different types of tiles
 *
 * @author christian
 */
public enum TileType {

    /**
     * Tile is a normal tile
     */
    NORMAL,

    /**
     * Tile is a start tile
     */
    START,

    /**
     * Tile is a finish tile
     */
    FINISH,

    /**
     * Tile is a wall
     */
    WALL,

    /**
     * Tile is a water tile
     */
    WATER,

    /**
     * Tile is a mud tile
     */
    MUD,

    /**
     * Tile is a ice tile
     */
    ICE,

    /**
     * Tile is a teleport tile
     */
    TELEPORT,

    /**
     * Tile is a boost tile
     */
    BOOST
}

// TileTypeTest.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions"
cmpl-6wpFtbAlbwy652w6Y9t5UJ0ycTqTA,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/common/ResourceService0.java,66.74243330955505,length,"// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    /**
     * Loads the {@link Image} that is located at the specified path.
     *
     * @param path The location of the image within the classpath.
     * @return The loaded {@link Image} or null if there was an IOException while trying
     * to read the image from a stream.
     */
    public static Image getImage(String path);
}
","// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImage(String)} method.
*/
class ResourceServiceTest {","// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImage(String)} method.
*/
class ResourceServiceTest {

	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * 
	 * <p>
	 * This test case checks if the method returns null if the path is null.
	 * </p>
	 */
	@Test
	void testGetImage_nullPath() {
		Image image = ResourceService.getImage(null);
		assertNull(image);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * 
	 * <p>
	 * This test case checks if the method returns null if the path is empty.
	 * </p>
	 */
	@Test
	void testGetImage_emptyPath() {
		Image image = ResourceService.getImage("""");
		assertNull(image);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * 
	 * <p>
	 * This test case checks if the method returns null if the path is invalid.
	 * </p>
	 */
	@Test
	void testGetImage_invalidPath() {
		Image image = ResourceService.getImage(""invalid"");
		assertNull(image);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * 
	 * <p>
	 * This test case checks if the method returns null if the path is valid but the image
	 * is not found.
	 * </p>
	 */
	@Test
	void testGetImage_validPath_imageNotFound() {
		Image image = ResourceService.getImage(""images/notfound.png"");
		assertNull(image);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * 
	 * <p>
	 * This test case checks if the method returns null if the path is valid but the image
	 * is not found.
	 * </p>
	 */
	@Test
	void testGetImage_validPath_imageFound() {
		Image image = ResourceService.getImage(""images/test.png"");
		assertNotNull(image);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * 
	 * <p>
	 * This test case checks if the method returns null if the path is valid but the image
	 * is not found.
	 * </p>
	 */
	@Test
	void testGetImage_validPath_imageFound_width() {
		Image image = ResourceService.getImage(""images/test.png"");
		assertEquals(image.getWidth(null), 100);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * 
	 * <p>
	 * This test case checks if the method returns null if the path is valid but the image
	 * is not found.
	 * </p>
	 */
	@Test
	void testGetImage_validPath_imageFound_height() {
		Image image = ResourceService.getImage(""images/test.png"");
		assertEquals(image.getHeight(null), 100);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * 
	 * <p>
	 * This test case checks if the method returns null if the path is valid but the image
	 * is not found.
	 * </p>
	 */
	@Test
	void testGetImage_validPath_imageFound_width_height() {
		Image image = ResourceService.getImage(""images/test.png"");
		assertEquals(image.getWidth(null), image.getHeight(null));
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * 
	 * <p>
	 * This test case checks if the method returns null if the path is valid but the image
	 * is not found.
	 * </p>
	 */
	@Test
	void testGetImage_validPath_imageFound_width_height_2() {
		Image image = ResourceService.getImage(""images/test.png"");
		assertEquals(image.getWidth(null), 100);
		assertEquals(image.getHeight(null), 100);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * 
	 * <p>
	 * This test case checks if the method returns null if the path is valid but the image
	 * is not found.
	 * </p>
	 */
	@Test
	void testGetImage_validPath_imageFound_width_height_3() {
		Image image = ResourceService.getImage(""images/test.png"");
		assertEquals(image.getWidth(null), image.getHeight(null));
		assertEquals(image.getWidth(null), 100);
		assertEquals(image.getHeight(null), 100);
	}
}
```

## Unit Test Case

A unit test case is a test case that tests a single method of a class.

### Example

```java
// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    /**
     * Loads the {@link Image} that is located at the specified path.
     *
     * @param path The location of the image within the classpath.
     * @return The loaded {@link Image} or null if there was an IOException while trying
     * to read the image from a stream.
     */
    public static Image getImage(String path);
}

// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImage(String)} method.
*/
class ResourceServiceTest {
		
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * 
	 * <p>
	 * This test case checks if the method returns null if the path is null.
	 * </p>
	 */
	@Test
	void testGetImage_nullPath() {
		Image image = ResourceService.getImage(null);
		assertNull(image);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * 
	 * <p>
	 * This test case checks if the method returns null if the path is empty.
	 * </p>
	 */
	@Test
	void testGetImage_emptyPath() {
		Image image = ResourceService.getImage("""");
		assertNull(image);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * 
	 * <p>
	 * This test case checks if the method returns null if the path is invalid.
	 * </p>
	 */
	@Test
	void testGetImage_invalidPath() {
		Image image = ResourceService.getImage(""invalid"");
		assertNull(image);
	}
	
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 * 
	 * <p>
	 * This test case checks if the method returns null if the path is valid but the image
	 * is not found.
	 *"
cmpl-6wpGy2klPiIBxdzUo945TPV4k2xMy,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/common/ResourceService1.java,48.06205177307129,length,"// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    /**
     * Loads the {@link ImageIcon} that is located at the specified path.
     *
     * @param path The location of the image within the classpath.
     * @return The loaded {@link ImageIcon}
     */
    public static ImageIcon getImageIcon(String path);
}
","// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImageIcon(String)} method.
*/
class ResourceServiceTest {","// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImageIcon(String)} method.
*/
class ResourceServiceTest {

	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * 
	 * <p>
	 * This test case tests the functionality of the {@link ResourceService#getImageIcon(String)} method.
	 * It checks if the method returns an {@link ImageIcon} that is not null.
	 * </p>
	 */
	@Test
	void testGetImageIcon() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertNotNull(imageIcon);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * 
	 * <p>
	 * This test case tests the functionality of the {@link ResourceService#getImageIcon(String)} method.
	 * It checks if the method returns an {@link ImageIcon} that is not null.
	 * </p>
	 */
	@Test
	void testGetImageIcon2() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertNotNull(imageIcon);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * 
	 * <p>
	 * This test case tests the functionality of the {@link ResourceService#getImageIcon(String)} method.
	 * It checks if the method returns an {@link ImageIcon} that is not null.
	 * </p>
	 */
	@Test
	void testGetImageIcon3() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertNotNull(imageIcon);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * 
	 * <p>
	 * This test case tests the functionality of the {@link ResourceService#getImageIcon(String)} method.
	 * It checks if the method returns an {@link ImageIcon} that is not null.
	 * </p>
	 */
	@Test
	void testGetImageIcon4() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertNotNull(imageIcon);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * 
	 * <p>
	 * This test case tests the functionality of the {@link ResourceService#getImageIcon(String)} method.
	 * It checks if the method returns an {@link ImageIcon} that is not null.
	 * </p>
	 */
	@Test
	void testGetImageIcon5() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertNotNull(imageIcon);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * 
	 * <p>
	 * This test case tests the functionality of the {@link ResourceService#getImageIcon(String)} method.
	 * It checks if the method returns an {@link ImageIcon} that is not null.
	 * </p>
	 */
	@Test
	void testGetImageIcon6() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertNotNull(imageIcon);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * 
	 * <p>
	 * This test case tests the functionality of the {@link ResourceService#getImageIcon(String)} method.
	 * It checks if the method returns an {@link ImageIcon} that is not null.
	 * </p>
	 */
	@Test
	void testGetImageIcon7() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertNotNull(imageIcon);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * 
	 * <p>
	 * This test case tests the functionality of the {@link ResourceService#getImageIcon(String)} method.
	 * It checks if the method returns an {@link ImageIcon} that is not null.
	 * </p>
	 */
	@Test
	void testGetImageIcon8() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertNotNull(imageIcon);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * 
	 * <p>
	 * This test case tests the functionality of the {@link ResourceService#getImageIcon(String)} method.
	 * It checks if the method returns an {@link ImageIcon} that is not null.
	 * </p>
	 */
	@Test
	void testGetImageIcon9() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertNotNull(imageIcon);
	}
	
	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 * 
	 * <p>
	 * This test case tests the functionality of the {@link ResourceService#getImageIcon(String)} method.
	 * It checks if the method returns an {@link ImageIcon} that is not null.
	 * </p>
	 */
	@Test
	void testGetImageIcon10() {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/icon.png"");
		assertNotNull(imageIcon);
	}
}
```

## Test Case Prioritization

The test cases are prioritized by the following criteria:

1. Test cases that cover the most important functionality of the system.
2. Test cases that cover the most important functionality of the system.
3. Test cases that cover the most important functionality of the system.
4. Test cases that cover the most important functionality of the system.
5. Test cases that cover the most important functionality of the system.
6. Test cases that cover the most important functionality of the system.
7. Test cases that cover the most important functionality of the system.
8. Test cases that cover the most important functionality of the system.
9. Test cases that cover the most important functionality of the system.
10. Test cases that cover the most important functionality of the system.

## Test Case Selection

The test cases are selected by the following criteria:

1. Test cases that cover the most important functionality of the system.
2. Test cases that cover the most important functionality of the system.
3. Test cases that cover the most important functionality of the system.
4. Test cases that cover the most important functionality of the system.
5. Test cases that cover the most important functionality of the system.
6. Test cases that cover the most important functionality of the system.
7. Test cases that cover the most important functionality of the system.
8. Test cases that cover the most important functionality of the system.
9. Test cases that cover the most important functionality of the system.
10. Test cases that cover the most important functionality of the system.

## Test Case Execution

The test cases are executed by the following criteria:

1. Test cases that cover the most important functionality of the system.
2. Test cases that cover the most important functionality of the system.
3. Test cases that cover the most important functionality of the system.
4. Test cases that cover the most important functionality of the system.
5. Test cases that cover the most important functionality of the system.
6. Test cases that cover the most important functionality of the system.
7. Test cases that cover the most important functionality of the system.
8. Test cases that cover the most important functionality of the system.
9. Test cases that cover the most important functionality of the system.
10. Test cases that cover the most important functionality of the system.

## Test Case Evaluation

The test cases are evaluated by the following criteria:

1. Test cases that cover the most important functionality of the system.
2. Test cases that cover the most important functionality of the system.
3. Test cases that cover the most important functionality of the system.
4. Test cases that cover the most important functionality of the system.
5. Test cases that cover the most important functionality of the system.
6. Test cases that cover the most important functionality of the system.
7. Test cases that cover the most"
cmpl-6wpI13DOYZRhjOzlTjDUwrljUx7Rb,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/common/ResourceService2.java,69.93491530418396,length,"// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    /**
     * Creates a connection to the resource that is located at the specified
     * path via an {@link InputStream}.
     *
     * @param path The location of the resource within the classpath.
     * @return The {@link InputStream} that points the requested resource.
     */
    public static InputStream getInputStream(String path);
}
","// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getInputStream(String)} method.
*/
class ResourceServiceTest {","// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getInputStream(String)} method.
*/
class ResourceServiceTest {

	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetInputStream() throws IOException {
		InputStream is = ResourceService.getInputStream(""/images/logo.png"");
		assertNotNull(is);
		is.close();
	}
}

// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    /**
     * Creates a connection to the resource that is located at the specified
     * path via an {@link InputStream}.
     *
     * @param path The location of the resource within the classpath.
     * @return The {@link InputStream} that points the requested resource.
     */
    public static InputStream getInputStream(String path) {
        return ResourceService.class.getResourceAsStream(path);
    }
}

// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getInputStream(String)} method.
*/
class ResourceServiceTest {
		
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetInputStream() throws IOException {
		InputStream is = ResourceService.getInputStream(""/images/logo.png"");
		assertNotNull(is);
		is.close();
	}
}

// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    /**
     * Creates a connection to the resource that is located at the specified
     * path via an {@link InputStream}.
     *
     * @param path The location of the resource within the classpath.
     * @return The {@link InputStream} that points the requested resource.
     */
    public static InputStream getInputStream(String path) {
        return ResourceService.class.getResourceAsStream(path);
    }
}

// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getInputStream(String)} method.
*/
class ResourceServiceTest {
		
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetInputStream() throws IOException {
		InputStream is = ResourceService.getInputStream(""/images/logo.png"");
		assertNotNull(is);
		is.close();
	}
}

// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    /**
     * Creates a connection to the resource that is located at the specified
     * path via an {@link InputStream}.
     *
     * @param path The location of the resource within the classpath.
     * @return The {@link InputStream} that points the requested resource.
     */
    public static InputStream getInputStream(String path) {
        return ResourceService.class.getResourceAsStream(path);
    }
}

// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getInputStream(String)} method.
*/
class ResourceServiceTest {
		
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetInputStream() throws IOException {
		InputStream is = ResourceService.getInputStream(""/images/logo.png"");
		assertNotNull(is);
		is.close();
	}
}

// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    /**
     * Creates a connection to the resource that is located at the specified
     * path via an {@link InputStream}.
     *
     * @param path The location of the resource within the classpath.
     * @return The {@link InputStream} that points the requested resource.
     */
    public static InputStream getInputStream(String path) {
        return ResourceService.class.getResourceAsStream(path);
    }
}

// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getInputStream(String)} method.
*/
class ResourceServiceTest {
		
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 *
	 * @throws IOException"
cmpl-6wpJ9MtGFDWafbxsQIMjbW7Az8dwa,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/common/XmlFunctions0.java,60.9350106716156,length,"// XmlFunctions.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * basic functions for reading and writing xml files
 *
 * @author christian
 */
public class XmlFunctions {

    /**
     * returns value of specific xml element
     *
     * @param XmlPath -
     *            element path (XPath)
     * @return String with value of element
     */
    public String getXmlValue(String XmlPath);
}
","// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#getXmlValue(String)} method.
*/
class XmlFunctionsTest {","// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#getXmlValue(String)} method.
*/
class XmlFunctionsTest {

		private static final Logger LOGGER = Logger.getLogger(XmlFunctionsTest.class);
		
		private static final String XML_FILE = ""test.xml"";
		
		private static final String XML_PATH = ""//test/test"";
		
		private static final String XML_VALUE = ""test"";
		
		private static final String XML_PATH_INVALID = ""//test/test/test"";
		
		private static final String XML_PATH_EMPTY = ""//test/test/test/test"";
		
		private static final String XML_PATH_NULL = ""//test/test/test/test/test"";
		
		private static final String XML_PATH_EMPTY_VALUE = ""//test/test/test/test/test/test"";
		
		private static final String XML_PATH_INVALID_VALUE = ""//test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_NULL_VALUE = ""//test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_INVALID_FILE = ""//test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_EMPTY_FILE = ""//test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_NULL_FILE = ""//test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_INVALID_FILE_NAME = ""//test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_EMPTY_FILE_NAME = ""//test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_NULL_FILE_NAME = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_INVALID_FILE_PATH = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_EMPTY_FILE_PATH = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_NULL_FILE_PATH = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_INVALID_FILE_PATH_NAME = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_EMPTY_FILE_PATH_NAME = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_NULL_FILE_PATH_NAME = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_INVALID_FILE_PATH_NAME_XML = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_EMPTY_FILE_PATH_NAME_XML = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_NULL_FILE_PATH_NAME_XML = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_INVALID_FILE_PATH_NAME_XML_XML = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_EMPTY_FILE_PATH_NAME_XML_XML = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_NULL_FILE_PATH_NAME_XML_XML = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_INVALID_FILE_PATH_NAME_XML_XML_XML = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_EMPTY_FILE_PATH_NAME_XML_XML_XML = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_NULL_FILE_PATH_NAME_XML_XML_XML = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_INVALID_FILE_PATH_NAME_XML_XML_XML_XML = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_EMPTY_FILE_PATH_NAME_XML_XML_XML_XML = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_NULL_FILE_PATH_NAME_XML_XML_XML_XML = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test"";
		
		private static final String XML_PATH_INVALID_FILE_PATH_NAME_XML_XML_XML_XML_XML = ""//test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test"
cmpl-6wpK8JwpmcPL0w9ExiSCXBNZhi0jl,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/common/XmlFunctions1.java,96.22365164756775,length,"// XmlFunctions.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * basic functions for reading and writing xml files
 *
 * @author christian
 */
public class XmlFunctions {

    /**
     * returns a list of nodes matching to the element name
     *
     * @param NodeName -
     *            name of element(s)
     * @return NodeList with found nodes
     */
    public NodeList findXmlNodes(String NodeName);
}
","// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#findXmlNodes(String)} method.
*/
class XmlFunctionsTest {","// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#findXmlNodes(String)} method.
*/
class XmlFunctionsTest {

		/**
		* Test case for {@link XmlFunctions#findXmlNodes(String)} method.
		* It tests if the method returns a list of nodes matching to the element name.
		*/
		@Test
		public void testFindXmlNodes() {
				// TODO: implement test
		}
}

// XmlFunctions.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * basic functions for reading and writing xml files
 *
 * @author christian
 */
public class XmlFunctions {

    /**
     * returns a list of nodes matching to the element name
     *
     * @param NodeName -
     *            name of element(s)
     * @return NodeList with found nodes
     */
    public NodeList findXmlNodes(String NodeName) {
        NodeList nodeList = null;
        try {
            XPathFactory xPathfactory = XPathFactory.newInstance();
            XPath xpath = xPathfactory.newXPath();
            XPathExpression expr = xpath.compile(""//"" + NodeName);
            nodeList = (NodeList) expr.evaluate(xmlDoc, XPathConstants.NODESET);
        } catch (XPathExpressionException ex) {
            logger.error(""XPathExpressionException: "" + ex.getMessage());
        }
        return nodeList;
    }
}

// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#findXmlNodes(String)} method.
*/
class XmlFunctionsTest {
		
		/**
		* Test case for {@link XmlFunctions#findXmlNodes(String)} method.
		* It tests if the method returns a list of nodes matching to the element name.
		*/
		@Test
		public void testFindXmlNodes() {
				// TODO: implement test
		}
}

// XmlFunctions.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * basic functions for reading and writing xml files
 *
 * @author christian
 */
public class XmlFunctions {

    /**
     * returns a list of nodes matching to the element name
     *
     * @param NodeName -
     *            name of element(s)
     * @return NodeList with found nodes
     */
    public NodeList findXmlNodes(String NodeName) {
        NodeList nodeList = null;
        try {
            XPathFactory xPathfactory = XPathFactory.newInstance();
            XPath xpath = xPathfactory.newXPath();
            XPathExpression expr = xpath.compile(""//"" + NodeName);
            nodeList = (NodeList) expr.evaluate(xmlDoc, XPathConstants.NODESET);
        } catch (XPathExpressionException ex) {
            logger.error(""XPathExpressionException: "" + ex.getMessage());
        }
        return nodeList;
    }
}

// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j."
cmpl-6wpLguuJjlTSJOIkd2NSt2ieKer0z,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/server/BomberServer.java,36.12804913520813,stop,"// BomberServer.java
package server;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.GlobalServerMsg;
import messages.global.SessionDetailsMsg;
import messages.global.SessionListMsg;
import org.apache.log4j.Logger;
import org.hsqldb.Server;
import org.hsqldb.jdbc.jdbcDataSource;
import common.Constants;

/**
 * This is the main server class. It is responsible for accepting connections
 * from clients and starting new games/session.
 *
 * @author Steffen, Bj�rn, Daniel
 */
public class BomberServer {

    /**
     * Static factory method.
     *
     * @return The BomberServer Singleton
     */
    public static BomberServer getInstance();
}
","// BomberServerTest.java
package server;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.GlobalServerMsg;
import messages.global.SessionDetailsMsg;
import messages.global.SessionListMsg;
import org.apache.log4j.Logger;
import org.hsqldb.Server;
import org.hsqldb.jdbc.jdbcDataSource;
import common.Constants;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberServer}.
* It contains ten unit test cases for the {@link BomberServer#getInstance()} method.
*/
class BomberServerTest {","// BomberServerTest.java
package server;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.GlobalServerMsg;
import messages.global.SessionDetailsMsg;
import messages.global.SessionListMsg;
import org.apache.log4j.Logger;
import org.hsqldb.Server;
import org.hsqldb.jdbc.jdbcDataSource;
import common.Constants;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberServer}.
* It contains ten unit test cases for the {@link BomberServer#getInstance()} method.
*/
class BomberServerTest {

	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns a {@link BomberServer} object.
	*/
	@Test
	void testGetInstance() {
		BomberServer server = BomberServer.getInstance();
		assertNotNull(server);
	}
	
	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns the same {@link BomberServer} object.
	*/
	@Test
	void testGetInstance2() {
		BomberServer server = BomberServer.getInstance();
		BomberServer server2 = BomberServer.getInstance();
		assertEquals(server, server2);
	}
	
	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns the same {@link BomberServer} object.
	*/
	@Test
	void testGetInstance3() {
		BomberServer server = BomberServer.getInstance();
		BomberServer server2 = BomberServer.getInstance();
		assertSame(server, server2);
	}
	
	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns the same {@link BomberServer} object.
	*/
	@Test
	void testGetInstance4() {
		BomberServer server = BomberServer.getInstance();
		BomberServer server2 = BomberServer.getInstance();
		assertTrue(server == server2);
	}
	
	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns the same {@link BomberServer} object.
	*/
	@Test
	void testGetInstance5() {
		BomberServer server = BomberServer.getInstance();
		BomberServer server2 = BomberServer.getInstance();
		assertFalse(server != server2);
	}
	
	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns the same {@link BomberServer} object.
	*/
	@Test
	void testGetInstance6() {
		BomberServer server = BomberServer.getInstance();
		BomberServer server2 = BomberServer.getInstance();
		assertFalse(server.equals(server2));
	}
	
	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns the same {@link BomberServer} object.
	*/
	@Test
	void testGetInstance7() {
		BomberServer server = BomberServer.getInstance();
		BomberServer server2 = BomberServer.getInstance();
		assertFalse(server.equals(null));
	}
	
	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns the same {@link BomberServer} object.
	*/
	@Test
	void testGetInstance8() {
		BomberServer server = BomberServer.getInstance();
		BomberServer server2 = BomberServer.getInstance();
		assertFalse(server.equals(new Object()));
	}
	
	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns the same {@link BomberServer} object.
	*/
	@Test
	void testGetInstance9() {
		BomberServer server = BomberServer.getInstance();
		BomberServer server2 = BomberServer.getInstance();
		assertFalse(server.equals(new BomberServer()));
	}
	
	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns the same {@link BomberServer} object.
	*/
	@Test
	void testGetInstance10() {
		BomberServer server = BomberServer.getInstance();
		BomberServer server2 = BomberServer.getInstance();
		assertFalse(server.equals(new BomberServer()));
	}
}"
cmpl-6wpMjREMxRXG2DmJfGuil5yUuffPy,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/server/ExplosionBounds.java,78.04966139793396,length,"// ExplosionBounds.java
package server;

import java.awt.Point;

/**
 * This class is used by the server to define the bounds of a bomb explosion.
 * It contains four integer fields indicating the min/max pixel value
 * in the given direction that is affected by the explosion. It further offers
 * a method to test if a given point lies within the defined bounds.
 *
 * @author Steffen
 */
public class ExplosionBounds {

    /**
     * Checks whether the given point lies within the bounds of the explosion.
     *
     * @param p The Point to be checked.
     * @return True if p lies within the bounds, false if not.
     */
    public boolean contain(Point p);
}
","// ExplosionBoundsTest.java
package server;

import java.awt.Point;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExplosionBounds}.
* It contains ten unit test cases for the {@link ExplosionBounds#contain(Point)} method.
*/
class ExplosionBoundsTest {","// ExplosionBoundsTest.java
package server;

import java.awt.Point;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExplosionBounds}.
* It contains ten unit test cases for the {@link ExplosionBounds#contain(Point)} method.
*/
class ExplosionBoundsTest {

	/**
	 * Test case for {@link ExplosionBounds#contain(Point)}.
	 * It tests if the method returns true for a point that lies within the bounds.
	 */
	@Test
	void testContain_PointWithinBounds_ReturnsTrue() {
		ExplosionBounds bounds = new ExplosionBounds(0, 0, 0, 0);
		Point p = new Point(0, 0);
		assertTrue(bounds.contain(p));
	}
	
	/**
	 * Test case for {@link ExplosionBounds#contain(Point)}.
	 * It tests if the method returns false for a point that lies outside the bounds.
	 */
	@Test
	void testContain_PointOutsideBounds_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds(0, 0, 0, 0);
		Point p = new Point(1, 1);
		assertFalse(bounds.contain(p));
	}
	
	/**
	 * Test case for {@link ExplosionBounds#contain(Point)}.
	 * It tests if the method returns true for a point that lies on the upper bound.
	 */
	@Test
	void testContain_PointOnUpperBound_ReturnsTrue() {
		ExplosionBounds bounds = new ExplosionBounds(0, 0, 0, 0);
		Point p = new Point(0, 1);
		assertTrue(bounds.contain(p));
	}
	
	/**
	 * Test case for {@link ExplosionBounds#contain(Point)}.
	 * It tests if the method returns true for a point that lies on the lower bound.
	 */
	@Test
	void testContain_PointOnLowerBound_ReturnsTrue() {
		ExplosionBounds bounds = new ExplosionBounds(0, 0, 0, 0);
		Point p = new Point(0, -1);
		assertTrue(bounds.contain(p));
	}
	
	/**
	 * Test case for {@link ExplosionBounds#contain(Point)}.
	 * It tests if the method returns true for a point that lies on the left bound.
	 */
	@Test
	void testContain_PointOnLeftBound_ReturnsTrue() {
		ExplosionBounds bounds = new ExplosionBounds(0, 0, 0, 0);
		Point p = new Point(-1, 0);
		assertTrue(bounds.contain(p));
	}
	
	/**
	 * Test case for {@link ExplosionBounds#contain(Point)}.
	 * It tests if the method returns true for a point that lies on the right bound.
	 */
	@Test
	void testContain_PointOnRightBound_ReturnsTrue() {
		ExplosionBounds bounds = new ExplosionBounds(0, 0, 0, 0);
		Point p = new Point(1, 0);
		assertTrue(bounds.contain(p));
	}
	
	/**
	 * Test case for {@link ExplosionBounds#contain(Point)}.
	 * It tests if the method returns true for a point that lies on the upper left bound.
	 */
	@Test
	void testContain_PointOnUpperLeftBound_ReturnsTrue() {
		ExplosionBounds bounds = new ExplosionBounds(0, 0, 0, 0);
		Point p = new Point(-1, 1);
		assertTrue(bounds.contain(p));
	}
	
	/**
	 * Test case for {@link ExplosionBounds#contain(Point)}.
	 * It tests if the method returns true for a point that lies on the upper right bound.
	 */
	@Test
	void testContain_PointOnUpperRightBound_ReturnsTrue() {
		ExplosionBounds bounds = new ExplosionBounds(0, 0, 0, 0);
		Point p = new Point(1, 1);
		assertTrue(bounds.contain(p));
	}
	
	/**
	 * Test case for {@link ExplosionBounds#contain(Point)}.
	 * It tests if the method returns true for a point that lies on the lower left bound.
	 */
	@Test
	void testContain_PointOnLowerLeftBound_ReturnsTrue() {
		ExplosionBounds bounds = new ExplosionBounds(0, 0, 0, 0);
		Point p = new Point(-1, -1);
		assertTrue(bounds.contain(p));
	}
	
	/**
	 * Test case for {@link ExplosionBounds#contain(Point)}.
	 * It tests if the method returns true for a point that lies on the lower right bound.
	 */
	@Test
	void testContain_PointOnLowerRightBound_ReturnsTrue() {
		ExplosionBounds bounds = new ExplosionBounds(0, 0, 0, 0);
		Point p = new Point(1, -1);
		assertTrue(bounds.contain(p));
	}
}

// ExplosionBounds.java
package server;

import java.awt.Point;

/**
 * This class is used by the server to define the bounds of a bomb explosion.
 * It contains four integer fields indicating the min/max pixel value
 * in the given direction that is affected by the explosion. It further offers
 * a method to test if a given point lies within the defined bounds.
 *
 * @author Steffen
 */
public class ExplosionBounds {

    /**
     * Checks whether the given point lies within the bounds of the explosion.
     *
     * @param p The Point to be checked.
     * @return True if p lies within the bounds, false if not.
     */
    public boolean contain(Point p) {
        return p.x >= left && p.x <= right && p.y >= top && p.y <= bottom;
    }
}

// ExplosionBoundsTest.java
package server;

import java.awt.Point;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExplosionBounds}.
* It contains ten unit test cases for the {@link ExplosionBounds#contain(Point)} method.
*/
class ExplosionBoundsTest {
		
	/**
	 * Test case for {@link ExplosionBounds#contain(Point)}.
	 * It tests if the method returns true for a point that lies within the bounds.
	 */
	@Test
	void testContain_PointWithinBounds_ReturnsTrue() {
		ExplosionBounds bounds = new ExplosionBounds(0, 0, 0, 0);
		Point p = new Point(0, 0);
		assertTrue(bounds.contain(p));
	}
	
	/**
	 * Test case for {@link ExplosionBounds#contain(Point)}.
	 * It tests if the method returns false for a point that lies outside the bounds.
	 */
	@Test
	void testContain_PointOutsideBounds_ReturnsFalse() {
		ExplosionBounds bounds = new ExplosionBounds(0, 0, 0, 0);
		Point p = new Point(1, 1);
		assertFalse(bounds.contain(p));
	}
	
	/**
	 * Test case for {@link ExplosionBounds#contain(Point)}.
	 * It tests if the method returns true for a point that lies on the upper bound.
	 */
	@Test
	void testContain_PointOnUpperBound_ReturnsTrue() {
		ExplosionBounds bounds = new ExplosionBounds(0, 0, 0, 0);
		Point p = new Point(0, 1);
		assertTrue(bounds.contain(p));
	}
	
	/**
	 * Test case for {@link ExplosionBounds#contain(Point)}.
	 * It tests if the method returns true for a point that lies on the lower bound.
	 */
	@Test
	void testContain_PointOnLowerBound_ReturnsTrue() {
		ExplosionBounds bounds = new ExplosionBounds(0, 0, 0, 0);
		Point p = new Point(0, -1);
		assertTrue(bounds.contain(p));
	}
	
	/**
	 * Test case for {@link ExplosionB"
cmpl-6wpNzzZagIZwgsndFtiexS6SGb2mr,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/server/ServerBomb.java,71.5666515827179,length,"// ServerBomb.java
package server;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.Collection;
import java.util.Vector;
import messages.round.BombExplodedMsg;
import org.apache.log4j.Logger;
import common.Bomb;
import common.Constants;
import common.GameObject;
import common.Player;
import common.PowerUp;
import common.Tile;
import db.DBException;
import db.DBGameUser;
import db.DBServiceFactory;

/**
 * The Bomb Object of the Server. This Bomb ticks some times and then exploded.
 * Then it detects the player and the tile hits.
 *
 * @author Bj�rn, Steffen, Daniel
 */
public class ServerBomb extends Bomb {

    /**
     * handles the tick of the bomb
     *
     * @return
     */
    public boolean tick();
}
","// ServerBombTest.java
package server;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.Collection;
import java.util.Vector;
import messages.round.BombExplodedMsg;
import org.apache.log4j.Logger;
import common.Bomb;
import common.Constants;
import common.GameObject;
import common.Player;
import common.PowerUp;
import common.Tile;
import db.DBException;
import db.DBGameUser;
import db.DBServiceFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ServerBomb}.
* It contains ten unit test cases for the {@link ServerBomb#tick()} method.
*/
class ServerBombTest {","// ServerBombTest.java
package server;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.Collection;
import java.util.Vector;
import messages.round.BombExplodedMsg;
import org.apache.log4j.Logger;
import common.Bomb;
import common.Constants;
import common.GameObject;
import common.Player;
import common.PowerUp;
import common.Tile;
import db.DBException;
import db.DBGameUser;
import db.DBServiceFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ServerBomb}.
* It contains ten unit test cases for the {@link ServerBomb#tick()} method.
*/
class ServerBombTest {

	/**
	 * Test case 1:
	 * The bomb is placed on a tile with a power up.
	 * The bomb should explode and the power up should be removed.
	 */
	@Test
	void testTick_1() {
		// create a new bomb
		ServerBomb bomb = new ServerBomb(new Point(0, 0), new Player(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
cmpl-6wpP9KrThZZrWEOFZQxNJqxrZjYjq,/EvoSuiteBenchmark/scenario3/57_hft-bomberman/src/main/java/server/StopServer.java,70.43729853630066,length,"// StopServer.java
package server;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import messages.Message;
import messages.global.StopServerMsg;

/**
 * Sends a Message to the Server, that he should closed
 *
 * @author Bj�rn
 */
public class StopServer {

    /**
     * Connect to the Server
     */
    public boolean connectToSrv();
}
","// StopServerTest.java
package server;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import messages.Message;
import messages.global.StopServerMsg;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StopServer}.
* It contains ten unit test cases for the {@link StopServer#connectToSrv()} method.
*/
class StopServerTest {","// StopServerTest.java
package server;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import messages.Message;
import messages.global.StopServerMsg;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StopServer}.
* It contains ten unit test cases for the {@link StopServer#connectToSrv()} method.
*/
class StopServerTest {

	/**
	 * Test case for {@link StopServer#connectToSrv()}.
	 * 
	 * <p>
	 * Test strategy:
	 * <ol>
	 * <li>Start the server.</li>
	 * <li>Connect to the server.</li>
	 * <li>Send a StopServerMsg to the server.</li>
	 * <li>Check if the server is closed.</li>
	 * </ol>
	 * </p>
	 * 
	 * <p>
	 * Expected result: The server is closed.
	 * </p>
	 */
	@Test
	void testConnectToSrv() {
		// Start the server.
		Server server = new Server();
		server.start();
		
		// Connect to the server.
		StopServer stopServer = new StopServer();
		boolean connected = stopServer.connectToSrv();
		
		// Send a StopServerMsg to the server.
		if (connected) {
			try {
				Socket socket = new Socket(""localhost"", Server.PORT);
				ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
				out.writeObject(new StopServerMsg());
				out.close();
				socket.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		// Check if the server is closed.
		assertFalse(server.isAlive());
	}
}

// StopServerMsg.java
package messages.global;

import messages.Message;

/**
 * Message to stop the server
 *
 * @author Bj�rn
 */
public class StopServerMsg extends Message {
}

// User.java
package server;

import java.io.Serializable;

/**
 * Class for a User
 *
 * @author Bj�rn
 */
public class User implements Serializable {

    /**
     * The name of the User
     */
    private String name;

    /**
     * The password of the User
     */
    private String password;

    /**
     * The email of the User
     */
    private String email;

    /**
     * The id of the User
     */
    private int id;

    /**
     * Constructor
     *
     * @param name The name of the User
     * @param password The password of the User
     * @param email The email of the User
     * @param id The id of the User
     */
    public User(String name, String password, String email, int id) {
        this.name = name;
        this.password = password;
        this.email = email;
        this.id = id;
    }

    /**
     * Getter for the name
     *
     * @return The name of the User
     */
    public String getName() {
        return name;
    }

    /**
     * Getter for the password
     *
     * @return The password of the User
     */
    public String getPassword() {
        return password;
    }

    /**
     * Getter for the email
     *
     * @return The email of the User
     */
    public String getEmail() {
        return email;
    }

    /**
     * Getter for the id
     *
     * @return The id of the User
     */
    public int getId() {
        return id;
    }
}

// UserTest.java
package server;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link User}.
* It contains ten unit test cases for the {@link User#User(String, String, String, int)} constructor.
*/
class UserTest {
		
	/**
	 * Test case for {@link User#User(String, String, String, int)}.
	 * 
	 * <p>
	 * Test strategy:
	 * <ol>
	 * <li>Create a new User.</li>
	 * <li>Check if the name is correct.</li>
	 * <li>Check if the password is correct.</li>
	 * <li>Check if the email is correct.</li>
	 * <li>Check if the id is correct.</li>
	 * </ol>
	 * </p>
	 * 
	 * <p>
	 * Expected result: The name, password, email and id are correct.
	 * </p>
	 */
	@Test
	void testUser() {
		// Create a new User.
		User user = new User(""name"", ""password"", ""email"", 1);
		
		// Check if the name is correct.
		assertEquals(""name"", user.getName());
		
		// Check if the password is correct.
		assertEquals(""password"", user.getPassword());
		
		// Check if the email is correct.
		assertEquals(""email"", user.getEmail());
		
		// Check if the id is correct.
		assertEquals(1, user.getId());
	}
}

// UserList.java
package server;

import java.io.Serializable;
import java.util.ArrayList;

/**
 * Class for a list of Users
 *
 * @author Bj�rn
 */
public class UserList implements Serializable {

    /**
     * The list of Users
     */
    private ArrayList<User> userList;

    /**
     * Constructor
     */
    public UserList() {
        userList = new ArrayList<User>();
    }

    /**
     * Adds a User to the list
     *
     * @param user The User to add
     */
    public void addUser(User user) {
        userList.add(user);
    }

    /**
     * Removes a User from the list
     *
     * @param user The User to remove
     */
    public void removeUser(User user) {
        userList.remove(user);
    }

    /**
     * Getter for the list
     *
     * @return The list of Users
     */
    public ArrayList<User> getUserList() {
        return userList;
    }
}

// UserListTest.java
package server;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UserList}.
* It contains ten unit test cases for the {@link UserList#UserList()} constructor.
*/
class UserListTest {
		
	/**
	 * Test case for {@link UserList#UserList()}.
	 * 
	 * <p>
	 * Test strategy:
	 * <ol>
	 * <li>Create a new UserList.</li>
	 * <li>Check if the list is empty.</li>
	 * <li>Add a User to the list.</li>
	 * <li>Check if the list is not empty.</li>
	 * <li>Remove the User from the list.</li>
	 * <li>Check if the list is empty.</li>
	 * </ol>
	 * </p>
	 * 
	 * <p>
	 * Expected result: The list is empty.
	 * </p>
	 */
	@Test
	void testUserList() {
		// Create a new UserList.
		UserList userList = new UserList();
		
		// Check if the list is empty.
		assertTrue(userList.getUserList().isEmpty());
		
		// Add a User to the list.
		User user = new User(""name"", ""password"", ""email"", 1);
		userList.addUser(user);
		
		// Check if the list is not empty.
		assertFalse(userList.getUserList().isEmpty());
		
		// Remove the User from the list.
		userList.removeUser(user);
		
		// Check if the list is empty.
		assertTrue(userList.getUserList"
