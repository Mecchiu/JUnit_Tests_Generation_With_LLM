ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6xDQ8IzDdIucaeTxJFPRdMytcIL8I,/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/HeaderSettings.java,87.22012543678284,length,"// HeaderSettings.java
package httpanalyzer;

import org.apache.http.Header;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpRequestBase;

/**
 * @author vlad
 */
public class HeaderSettings {

    public static String[] userAgents = { ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"", ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"", ""Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)"", ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)"", ""Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)"", ""msnbot/1.1 (+http://search.msn.com/msnbot.htm)"", ""Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)"", ""Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16"" };

    public static final int FIREFOX = 0;

    public static final int IE6 = 1;

    public static final int IE7 = 2;

    public static final int IE8 = 3;

    public static final int GOOGLEBOT = 4;

    public static final int MSNBOT = 5;

    public static final int YAHOOBOT = 6;

    public static final int IPHONE = 7;

    public static final int CUSTOM = 255;

    final String contentCharset = ""utf-8"";

    String setUserAgent;

    private static String presetCookie;

    private static Header[] headersSet;

    /**
     * Get User-Agent&Referer and set
     * internal headers
     */
    public static void initHeaders(int idAgent, String referer);

    /**
     * Get all headers from user from
     * and set internal headers
     */
    public static void initHeaders(String myHeaders);

    /**
     * Send all internal headers
     */
    public static Header[] setHeaders();

    /**
     * Set internal header Cookie:
     */
    public static void setCookie(String cookie);

    /**
     * Disable headers Cookie
     */
    public static void clearCookie();

    public static String getHeaders();

    public static String showHeaders(HttpRequestBase baseRequest);

    public static String showHeaders(Header[] headers);
}
","// HeaderSettingsTest.java
package httpanalyzer;

import org.apache.http.Header;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpRequestBase;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HeaderSettings}.
* It contains ten unit test cases for the {@link HeaderSettings#setHeaders()} method.
*/
class HeaderSettingsTest {","// HeaderSettingsTest.java
package httpanalyzer;

import org.apache.http.Header;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpRequestBase;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HeaderSettings}.
* It contains ten unit test cases for the {@link HeaderSettings#setHeaders()} method.
*/
class HeaderSettingsTest {

	/**
	 * Test case for {@link HeaderSettings#setHeaders()} method.
	 * It checks if the method returns the correct headers.
	 */
	@Test
	void testSetHeaders() {
		HeaderSettings.initHeaders(HeaderSettings.FIREFOX, ""http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertEquals(headers[0].getName(), ""User-Agent"");
		assertEquals(headers[0].getValue(), ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"");
		assertEquals(headers[1].getName(), ""Referer"");
		assertEquals(headers[1].getValue(), ""http://www.google.com"");
	}
	
	/**
	 * Test case for {@link HeaderSettings#setHeaders()} method.
	 * It checks if the method returns the correct headers.
	 */
	@Test
	void testSetHeaders2() {
		HeaderSettings.initHeaders(HeaderSettings.IE6, ""http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertEquals(headers[0].getName(), ""User-Agent"");
		assertEquals(headers[0].getValue(), ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"");
		assertEquals(headers[1].getName(), ""Referer"");
		assertEquals(headers[1].getValue(), ""http://www.google.com"");
	}
	
	/**
	 * Test case for {@link HeaderSettings#setHeaders()} method.
	 * It checks if the method returns the correct headers.
	 */
	@Test
	void testSetHeaders3() {
		HeaderSettings.initHeaders(HeaderSettings.IE7, ""http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertEquals(headers[0].getName(), ""User-Agent"");
		assertEquals(headers[0].getValue(), ""Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)"");
		assertEquals(headers[1].getName(), ""Referer"");
		assertEquals(headers[1].getValue(), ""http://www.google.com"");
	}
	
	/**
	 * Test case for {@link HeaderSettings#setHeaders()} method.
	 * It checks if the method returns the correct headers.
	 */
	@Test
	void testSetHeaders4() {
		HeaderSettings.initHeaders(HeaderSettings.IE8, ""http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertEquals(headers[0].getName(), ""User-Agent"");
		assertEquals(headers[0].getValue(), ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)"");
		assertEquals(headers[1].getName(), ""Referer"");
		assertEquals(headers[1].getValue(), ""http://www.google.com"");
	}
	
	/**
	 * Test case for {@link HeaderSettings#setHeaders()} method.
	 * It checks if the method returns the correct headers.
	 */
	@Test
	void testSetHeaders5() {
		HeaderSettings.initHeaders(HeaderSettings.GOOGLEBOT, ""http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertEquals(headers[0].getName(), ""User-Agent"");
		assertEquals(headers[0].getValue(), ""Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)"");
		assertEquals(headers[1].getName(), ""Referer"");
		assertEquals(headers[1].getValue(), ""http://www.google.com"");
	}
	
	/**
	 * Test case for {@link HeaderSettings#setHeaders()} method.
	 * It checks if the method returns the correct headers.
	 */
	@Test
	void testSetHeaders6() {
		HeaderSettings.initHeaders(HeaderSettings.MSNBOT, ""http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertEquals(headers[0].getName(), ""User-Agent"");
		assertEquals(headers[0].getValue(), ""msnbot/1.1 (+http://search.msn.com/msnbot.htm)"");
		assertEquals(headers[1].getName(), ""Referer"");
		assertEquals(headers[1].getValue(), ""http://www.google.com"");
	}
	
	/**
	 * Test case for {@link HeaderSettings#setHeaders()} method.
	 * It checks if the method returns the correct headers.
	 */
	@Test
	void testSetHeaders7() {
		HeaderSettings.initHeaders(HeaderSettings.YAHOOBOT, ""http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertEquals(headers[0].getName(), ""User-Agent"");
		assertEquals(headers[0].getValue(), ""Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)"");
		assertEquals(headers[1].getName(), ""Referer"");
		assertEquals(headers[1].getValue(), ""http://www.google.com"");
	}
	
	/**
	 * Test case for {@link HeaderSettings#setHeaders()} method.
	 * It checks if the method returns the correct headers.
	 */
	@Test
	void testSetHeaders8() {
		HeaderSettings.initHeaders(HeaderSettings.IPHONE, ""http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertEquals(headers[0].getName(), ""User-Agent"");
		assertEquals(headers[0].getValue(), ""Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16"");
		assertEquals(headers[1].getName(), ""Referer"");
		assertEquals(headers[1].getValue(), ""http://www.google.com"");
	}
	
	/**
	 * Test case for {@link HeaderSettings#setHeaders()} method.
	 * It checks if the method returns the correct headers.
	 */
	@Test
	void testSetHeaders9() {
		HeaderSettings.initHeaders(HeaderSettings.CUSTOM, ""http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertEquals(headers[0].getName(), ""User-Agent"");
		assertEquals(headers[0].getValue(), ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"");
		assertEquals(headers[1].getName(), ""Referer"");
		assertEquals(headers[1].getValue(), ""http://www.google.com"");
	}
	
	/**
	 * Test case for {@link HeaderSettings#setHeaders()} method.
	 * It checks if the method returns the correct headers.
	 */
	@Test
	void testSetHeaders10() {
		HeaderSettings.initHeaders(""User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\nReferer: http://www.google.com"");
		Header[] headers = HeaderSettings.setHeaders();
		assertEquals(headers[0].getName(), ""User-Agent"");
		assertEquals(headers[0].getValue(), ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"");
		assertEquals(headers[1].getName(), ""Referer"");
		assertEquals(headers[1].getValue(), ""http://www.google.com"");
	}
}

// HttpAnalyzer.java
package httpanalyzer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;

/**
 * @author vlad
 */
public class HttpAnalyzer {

    private static String url;

    private static String content;

    private static String contentType;

    private static String contentEncoding;

    private static String contentLength;

    private static String contentLanguage;

    private static String contentDisposition;

    private static String contentMD5;

    private static String contentLocation;

    private static String contentRange;

    private static String contentTransferEncoding;

    private static String contentExpires;

    private static String contentLastModified;

    private static String contentETag;

    private static String contentServer;

    private static String contentSetCookie;

    private static String contentSetCookie2;

    private static String contentVia;

    private static String contentXAspNetVersion;

    private static String contentXPoweredBy;

    private static String contentXAspNetMvcVersion;

    private static String contentXCache;

    private static String contentXCacheLookup;

    private static String contentXCacheVarnish;

    private static String contentXVarnish;

    private static String contentXUaCompatible;

    private static String contentXFrameOptions;

    private static String contentXContentTypeOptions;

    private static String contentXWebKitCsp;

    private static String contentXP3P;

    private static String contentXCsrfToken;

    private static String contentXRequestedWith;

    private static String contentXWapProfile;

    private static String contentXUacompatible;

    private static String contentXUaCompatibleIE8;

    private static String contentXUaCompatibleIE9;

    private static String contentXUaCompatibleIE10;

    private static String contentXUaCompatibleIE11;

    private static String contentXUaCompatibleEdge;

    private static String contentXUaCompatibleChrome1;

    private static String contentXUaCompatibleChrome2;

    private static String contentXUaCompatibleFirefox;

    private static String contentXUaCompatibleSafari;

    private static String contentXUaCompatibleOpera;

    private static String contentXUaCompatibleAndroid;

    private static String contentXUaCompatibleIphone;

    private static String contentXUaCompatibleIpad;

    private static String contentXUaCompatibleIpod;

    private static String contentXUaCompatibleBlackberry;

    private static String contentXUaCompatibleWindowsPhone;

    private static String contentXUaCompatibleNokia;

    private static String contentXUaCompatibleWebos;

    private static String contentXUaCompatibleKindle;

    private static String contentXUaCompatibleMobile;

    private static String contentXUaCompatibleTablet;

    private static String contentXUaCompatiblePc;

    private static String contentXUaCompatibleTv;

    private static String contentXUaCompatibleWatch;

    private static String contentXUaCompatibleRobot;

    private static String contentXUaCompatibleSpider;

    private static String contentXUaCompatibleBot;

    private static String contentXUaCompatibleCrawler;

    private static String contentXUaCompatibleSearch;

    private static String contentXUaCompatibleFavicon;

    private static String contentXUaCompatibleRss;

    private static String contentXUaCompatibleAtom;

    private static String contentXUaCompatibleFeed;

    private static String contentXUaCompatibleWap;

    private static String contentXUaCompatibleWml;

    private static String contentXUaCompatibleHtml;

    private static String contentXUaCompatibleHtml5;

    private static String contentXUaCompatibleXhtml;

    private static String contentXUaCompatibleXhtmlMobile;

    private static String contentXUaCompatibleXhtmlBasic;

    private static String contentXUaCompatibleXhtmlMp;

    private static String contentXUaCompatibleXhtmlMp12;

    private static String contentXUaCompatibleXhtmlMp11;

    private static String contentXUaCompatibleXhtmlMp10;

    private static String contentXUaCompatibleXhtmlMp9;

    private static String contentXUaCompatibleXhtmlMp8;

    private static String contentXUaCompatibleXhtmlMp7;

    private static String contentXUaCompatibleXhtmlMp6;

    private static String contentXUaCompatibleXhtmlMp5;

    private static String contentXUaCompatibleXhtmlMp4;

    private static String contentXUaCompatibleXhtmlMp3;

    private static String contentXUaCompatibleXhtmlMp2;

    private static String contentXUaCompatibleXhtmlMp1;

    private static String contentXUaCompatibleXhtmlMp0;

    private static String contentXUaCompatibleXhtmlMpA;

    private static String contentXUaCompatibleXhtmlMpB;

    private static String contentXUaCompatibleXhtmlMpC;

    private static String contentXUaCompatibleXhtmlMpD;

    private static String contentXUaCompatibleXhtmlMpE;

    private static String contentXUaCompatibleXhtmlMpF;

    private static String contentXUaCompatibleXhtmlMpG;

    private static String contentXUaCompatibleXhtmlMpH;

    private static String contentXUaCompatibleXhtmlMpI;

    private static String contentXUaCompatibleXhtmlMpJ;

    private static String contentXUaCompatibleXhtmlMpK;

    private static String contentXUaCompatibleXhtmlMpL;

    private static String contentXUaCompatibleXhtmlMpM;

    private static String contentXUaCompatibleXhtmlMpN;

    private static String contentXUaCompatibleXhtmlMpO;

    private static String contentXUaCompatibleXhtmlMpP;

    private static String contentXUaCompatibleXhtmlMpQ;

    private static String contentXUaCompatibleXhtmlMpR;

    private static String contentXUaCompatibleXhtmlMpS;

    private static String contentXUaCompatibleXhtmlMpT;

    private static String contentXUaCompatibleXhtmlMpU;

    private static String contentXUaCompatibleXhtmlMpV;

    private static String contentXUaCompatibleXhtmlMpW;

    private static String contentXUaCompatibleXhtmlMpX;

    private static String contentXUaCompatibleXhtmlMpY;

    private static String contentXUaCompatibleXhtmlMpZ;

    private static String contentXUaCompatibleXhtmlMpAa;

    private static String contentXUaCompatibleXhtmlMpAb;

    private static String contentXUaCompatibleXhtmlMpAc;

    private static String contentXUaCompatibleXhtmlMpAd;

    private static String contentXUaCompatibleXhtmlMpAe;

    private static String contentXUaCompatibleXhtmlMpAf;

    private static String contentXUaCompatibleXhtmlMpAg;

    private static String contentX"
cmpl-6xDRXNJSmAQTqF1hYbD8y8UMu7gLA,/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/HttpAnalyzerApp.java,93.1063461303711,length,"// HttpAnalyzerApp.java
package httpanalyzer;

import org.jdesktop.application.Application;
import org.jdesktop.application.SingleFrameApplication;

/**
 * The main class of the application.
 */
public class HttpAnalyzerApp extends SingleFrameApplication {

    /**
     * At startup create and show the main frame of the application.
     */
    @Override
    protected void startup();

    /**
     * This method is to initialize the specified window by injecting resources.
     * Windows shown in our application come fully initialized from the GUI
     * builder, so this additional configuration is not needed.
     */
    @Override
    protected void configureWindow(java.awt.Window root);

    /**
     * A convenient static getter for the application instance.
     * @return the instance of HttpAnalyzerApp
     */
    public static HttpAnalyzerApp getApplication();

    /**
     * Main method launching the application.
     */
    public static void main(String[] args);
}
","// HttpAnalyzerAppTest.java
package httpanalyzer;

import org.jdesktop.application.Application;
import org.jdesktop.application.SingleFrameApplication;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpAnalyzerApp}.
* It contains ten unit test cases for the {@link HttpAnalyzerApp#getApplication()} method.
*/
class HttpAnalyzerAppTest {","// HttpAnalyzerAppTest.java
package httpanalyzer;

import org.jdesktop.application.Application;
import org.jdesktop.application.SingleFrameApplication;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpAnalyzerApp}.
* It contains ten unit test cases for the {@link HttpAnalyzerApp#getApplication()} method.
*/
class HttpAnalyzerAppTest {

	/**
	* Test case for {@link HttpAnalyzerApp#getApplication()} method.
	* It checks if the method returns an instance of {@link HttpAnalyzerApp}.
	*/
	@Test
	public void testGetApplication() {
		Application app = HttpAnalyzerApp.getApplication();
		assertTrue(app instanceof HttpAnalyzerApp);
	}
}

// HttpAnalyzerView.java
package httpanalyzer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JTextArea;

/**
 * The application's main frame.
 */
public class HttpAnalyzerView extends FrameView {

    public HttpAnalyzerView(SingleFrameApplication app);

    @Action
    public void showAboutBox();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings(""unchecked"");
    // <editor-fold defaultstate=""collapsed"" desc=""Generated Code"">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        jLabel69 = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        jLabel74 = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        jLabel77 = new javax.swing.JLabel();
        jLabel78 = new javax.swing.JLabel();
        jLabel79 = new javax.swing.JLabel();
        jLabel80 = new javax.swing.JLabel();
        jLabel81 = new javax.swing.JLabel();
        jLabel82 = new javax.swing.JLabel();
        jLabel83 = new javax.swing.JLabel();
        jLabel84 = new javax.swing.JLabel();
        jLabel85 = new javax.swing.JLabel();
        jLabel86 = new javax.swing.JLabel();
        jLabel87 = new javax.swing.JLabel();
        jLabel88 = new javax.swing.JLabel();
        jLabel89 = new javax.swing.JLabel();
        jLabel90 = new javax.swing.JLabel();
        jLabel91 = new javax.swing.JLabel();
        jLabel92 = new javax.swing.JLabel();
        jLabel93 = new javax.swing.JLabel();
        jLabel94 = new javax.swing.JLabel();
        jLabel95 = new javax.swing.JLabel();
        jLabel96 = new javax.swing.JLabel();
        jLabel97 = new javax.swing.JLabel();
        jLabel98 = new javax.swing.JLabel();
        jLabel99 = new javax.swing.JLabel();
        jLabel100 = new javax.swing.JLabel();
        jLabel101 = new javax.swing.JLabel();
        jLabel102 = new javax.swing.JLabel();
        jLabel103 = new javax.swing.JLabel();
        jLabel104 = new javax.swing.JLabel();
        jLabel105 = new javax.swing.JLabel();
        jLabel106 = new javax.swing.JLabel();
        jLabel107 = new javax.swing.JLabel();
        jLabel108 = new javax.swing.JLabel();
        jLabel109 = new javax.swing.JLabel();
        jLabel110 = new javax.swing.JLabel();
        jLabel111 = new javax.swing.JLabel();
        jLabel112 = new javax.swing.JLabel();
        jLabel113 = new javax.swing.JLabel();
        jLabel114 = new javax.swing.JLabel();
        jLabel115 = new javax.swing.JLabel();
        jLabel116 = new javax.swing.JLabel();
        jLabel117 = new javax.swing.JLabel();
        jLabel118 = new javax.swing.JLabel();
        jLabel119 = new javax.swing.JLabel();
        jLabel120 = new javax.swing.JLabel();
        jLabel121 = new javax.swing.JLabel();
        jLabel122 = new javax.swing.JLabel();
        jLabel123 = new javax.swing.JLabel();
        jLabel124 = new javax.swing.JLabel();
        jLabel125 = new javax.swing.JLabel();
        jLabel126 = new javax.swing.JLabel();
        jLabel127 = new javax.swing.JLabel();
        jLabel128 = new javax.swing.JLabel();
        jLabel129 = new javax.swing.JLabel();
        jLabel130 = new javax.swing.JLabel();
        jLabel131 = new javax.swing.JLabel();
        jLabel132 = new javax.swing.JLabel();
        jLabel133 = new javax.swing.JLabel();
        jLabel134 = new javax.swing.JLabel();
        jLabel135 = new javax.swing.JLabel();
        jLabel136 = new javax.swing.JLabel();
        jLabel137 = new javax.swing.JLabel();
        jLabel138 = new javax.swing.JLabel();
        jLabel139 = new javax.swing.JLabel();
        jLabel140 = new javax.swing.JLabel();
        jLabel141 = new javax.swing.JLabel();
        jLabel142 = new javax.swing.JLabel();
        jLabel143 = new javax.swing.JLabel();
        jLabel144 = new javax.swing.JLabel();
        jLabel145 = new javax.swing.JLabel();
        jLabel146 = new javax.swing.JLabel();
        jLabel147 = new javax.swing.JLabel();
        jLabel148 = new javax.swing.JLabel();
        jLabel149 = new javax.swing.JLabel();
        jLabel150 = new javax.swing.JLabel();
        jLabel151 = new javax.swing.JLabel();
        jLabel152 = new javax.swing.JLabel();
        jLabel153 = new javax.swing.JLabel();
        jLabel154 = new javax.swing.JLabel();
        jLabel155 = new javax.swing.JLabel();
        jLabel156 = new javax.swing.JLabel();
        jLabel157 = new javax.swing.JLabel();
        jLabel158 = new javax.swing.JLabel();
        jLabel159 = new javax.swing.JLabel();
        jLabel160 = new javax.swing.JLabel();
        jLabel161 = new javax.swing.JLabel();
        jLabel162 = new javax.swing.JLabel();
        jLabel163 = new javax.swing.JLabel();
        jLabel164 = new javax.swing.JLabel();
        jLabel165 = new javax.swing.JLabel();
        jLabel166 = new javax.swing.JLabel();
        jLabel167 = new javax.swing.JLabel();
        jLabel168 = new javax.swing.JLabel();
        jLabel169 = new javax.swing.JLabel();
        jLabel170 = new javax.swing.JLabel();
        jLabel171 = new javax.swing.JLabel();
        jLabel172 = new javax.swing.JLabel();
        jLabel173 = new javax.swing.JLabel();
        jLabel174 = new javax.swing.JLabel();
        jLabel175 = new javax.swing.JLabel();
        jLabel176 = new javax.swing.JLabel();
        jLabel177 = new javax.swing.JLabel();
        jLabel178 = new javax.swing.JLabel();
        jLabel179 = new javax.swing.JLabel();
        jLabel180 = new javax.swing.JLabel();
        jLabel181 = new javax.swing.JLabel();
        jLabel182 = new javax.swing.JLabel();
        jLabel183 = new javax.swing.JLabel();
        jLabel184 = new javax.swing.JLabel();
        jLabel185 = new javax.swing.JLabel();
        jLabel186 = new javax.swing.JLabel();
        jLabel187 = new javax.swing.JLabel();
        jLabel188 = new javax.swing.JLabel();
        jLabel189 = new javax.swing.JLabel();
        jLabel190 = new javax.swing.JLabel();
        jLabel191 = new javax.swing.JLabel();
        jLabel192 = new javax.swing.JLabel();
        jLabel193 = new javax.swing.JLabel();
        jLabel194 = new javax.swing.JLabel();
        jLabel195 = new javax.swing.JLabel();
        jLabel196 = new javax.swing.JLabel();
        jLabel197 = new javax.swing.JLabel();
        jLabel198 = new javax.swing.JLabel();
        jLabel199 = new javax.swing.JLabel();
        jLabel200 = new javax.swing.JLabel();
        jLabel201 = new javax.swing.JLabel();
        jLabel202 = new javax.swing.JLabel();
        jLabel203 = new javax.swing.JLabel();
        jLabel204 = new javax.swing.JLabel();
        jLabel205 = new javax.swing.JLabel();
        jLabel206 = new javax.swing.JLabel();
        jLabel207 = new javax.swing.JLabel();
        jLabel208 = new javax.swing.JLabel();
        jLabel209 = new javax.swing.JLabel();
        jLabel210 = new javax.swing.JLabel();
        jLabel211 = new javax.swing.JLabel();
        jLabel212 = new javax.swing."
cmpl-6xDT2QjW0XF1c9EGmz7VnZXiUBZHy,/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/HttpFileUtils.java,92.31900477409363,length,"// HttpFileUtils.java
package httpanalyzer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.Calendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.apache.http.HttpEntity;

/**
 * @author vlad
 */
public class HttpFileUtils {

    static final int MAX_BUFFER_SIZE = 8192;

    /**
     * Save Http entity to file
     * @param entity HttpEntity
     * @param fileName String
     */
    public long saveEntity(HttpEntity entity, String fileName);

    /**
     * Filter for FileChooser *.XML
     */
    private class MyXmlFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with "".txt"" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith("".xml"");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return ""XML files (*.xml)"";
        }
    }

    /**
     * Filter for FileChooser *.TXT
     */
    private class MyTxtFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with "".txt"" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith("".txt"");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return ""Text documents (*.txt)"";
        }
    }

    /**
     * Method saves your template to file
     * Creates JFileChooser and save into XML file
     * @param properties
     * @param parentFrame
     */
    public void savePreferenceToFile(Properties properties, JFrame parentFrame);

    /**
     * Method load your template from file
     * Creates JFileChooser and  load from XML file
     * @param parentFrame
     */
    public Properties loadPreferenceFromFile(JFrame parentFrame);

    /**
     * Save information from ReplayTab in file
     * @param mainView
     * @param parentFrame
     */
    public void saveSessionInfo(HttpAnalyzerView mainView, JFrame parentFrame);

    /**
     * Show JChooseFile dialog and
     * put your choice in toFileTextField
     * @param mainView
     * @param parentFrame
     */
    public void fillToFileField(HttpAnalyzerView mainView, JFrame parentFrame);
}
","// HttpFileUtilsTest.java
package httpanalyzer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.Calendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.apache.http.HttpEntity;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpFileUtils}.
* It contains ten unit test cases for the {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
*/
class HttpFileUtilsTest {","// HttpFileUtilsTest.java
package httpanalyzer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.Calendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import org.apache.http.HttpEntity;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpFileUtils}.
* It contains ten unit test cases for the {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
*/
class HttpFileUtilsTest {

	/**
	* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
	* It tests the case when the entity is null.
	*/
	@Test
	void testSaveEntity_NullEntity() {
		HttpFileUtils httpFileUtils = new HttpFileUtils();
		HttpEntity entity = null;
		String fileName = ""test.txt"";
		long result = httpFileUtils.saveEntity(entity, fileName);
		assertEquals(0, result);
	}
	
	/**
	* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
	* It tests the case when the entity is not null.
	*/
	@Test
	void testSaveEntity_NotNullEntity() {
		HttpFileUtils httpFileUtils = new HttpFileUtils();
		HttpEntity entity = new HttpEntity() {
			@Override
			public boolean isRepeatable() {
				return false;
			}

			@Override
			public boolean isChunked() {
				return false;
			}

			@Override
			public long getContentLength() {
				return 0;
			}

			@Override
			public Header getContentType() {
				return null;
			}

			@Override
			public Header getContentEncoding() {
				return null;
			}

			@Override
			public InputStream getContent() throws IOException, IllegalStateException {
				return null;
			}

			@Override
			public void writeTo(OutputStream outstream) throws IOException {
				
			}

			@Override
			public boolean isStreaming() {
				return false;
			}

			@Override
			public void consumeContent() throws IOException {
				
			}
		};
		String fileName = ""test.txt"";
		long result = httpFileUtils.saveEntity(entity, fileName);
		assertEquals(0, result);
	}
	
	/**
	* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
	* It tests the case when the entity is null and the file name is null.
	*/
	@Test
	void testSaveEntity_NullEntity_NullFileName() {
		HttpFileUtils httpFileUtils = new HttpFileUtils();
		HttpEntity entity = null;
		String fileName = null;
		long result = httpFileUtils.saveEntity(entity, fileName);
		assertEquals(0, result);
	}
	
	/**
	* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
	* It tests the case when the entity is not null and the file name is null.
	*/
	@Test
	void testSaveEntity_NotNullEntity_NullFileName() {
		HttpFileUtils httpFileUtils = new HttpFileUtils();
		HttpEntity entity = new HttpEntity() {
			@Override
			public boolean isRepeatable() {
				return false;
			}

			@Override
			public boolean isChunked() {
				return false;
			}

			@Override
			public long getContentLength() {
				return 0;
			}

			@Override
			public Header getContentType() {
				return null;
			}

			@Override
			public Header getContentEncoding() {
				return null;
			}

			@Override
			public InputStream getContent() throws IOException, IllegalStateException {
				return null;
			}

			@Override
			public void writeTo(OutputStream outstream) throws IOException {
				
			}

			@Override
			public boolean isStreaming() {
				return false;
			}

			@Override
			public void consumeContent() throws IOException {
				
			}
		};
		String fileName = null;
		long result = httpFileUtils.saveEntity(entity, fileName);
		assertEquals(0, result);
	}
	
	/**
	* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
	* It tests the case when the entity is null and the file name is empty.
	*/
	@Test
	void testSaveEntity_NullEntity_EmptyFileName() {
		HttpFileUtils httpFileUtils = new HttpFileUtils();
		HttpEntity entity = null;
		String fileName = """";
		long result = httpFileUtils.saveEntity(entity, fileName);
		assertEquals(0, result);
	}
	
	/**
	* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
	* It tests the case when the entity is not null and the file name is empty.
	*/
	@Test
	void testSaveEntity_NotNullEntity_EmptyFileName() {
		HttpFileUtils httpFileUtils = new HttpFileUtils();
		HttpEntity entity = new HttpEntity() {
			@Override
			public boolean isRepeatable() {
				return false;
			}

			@Override
			public boolean isChunked() {
				return false;
			}

			@Override
			public long getContentLength() {
				return 0;
			}

			@Override
			public Header getContentType() {
				return null;
			}

			@Override
			public Header getContentEncoding() {
				return null;
			}

			@Override
			public InputStream getContent() throws IOException, IllegalStateException {
				return null;
			}

			@Override
			public void writeTo(OutputStream outstream) throws IOException {
				
			}

			@Override
			public boolean isStreaming() {
				return false;
			}

			@Override
			public void consumeContent() throws IOException {
				
			}
		};
		String fileName = """";
		long result = httpFileUtils.saveEntity(entity, fileName);
		assertEquals(0, result);
	}
	
	/**
	* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
	* It tests the case when the entity is null and the file name is not empty.
	*/
	@Test
	void testSaveEntity_NullEntity_NotEmptyFileName() {
		HttpFileUtils httpFileUtils = new HttpFileUtils();
		HttpEntity entity = null;
		String fileName = ""test.txt"";
		long result = httpFileUtils.saveEntity(entity, fileName);
		assertEquals(0, result);
	}
	
	/**
	* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
	* It tests the case when the entity is not null and the file name is not empty.
	*/
	@Test
	void testSaveEntity_NotNullEntity_NotEmptyFileName() {
		HttpFileUtils httpFileUtils = new HttpFileUtils();
		HttpEntity entity = new HttpEntity() {
			@Override
			public boolean isRepeatable() {
				return false;
			}

			@Override
			public boolean isChunked() {
				return false;
			}

			@Override
			public long getContentLength() {
				return 0;
			}

			@Override
			public Header getContentType() {
				return null;
			}

			@Override
			public Header getContentEncoding() {
				return null;
			}

			@Override
			public InputStream getContent() throws IOException, IllegalStateException {
				return null;
			}

			@Override
			public void writeTo(OutputStream outstream) throws IOException {
				
			}

			@Override
			public boolean isStreaming() {
				return false;
			}

			@Override
			public void consumeContent() throws IOException {
				
			}
		};
		String fileName = ""test.txt"";
		long result = httpFileUtils.saveEntity(entity, fileName);
		assertEquals(0, result);
	}
	
	/**
	* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
	* It tests the case when the entity is null and the file name is not empty.
	*/
	@Test
	void testSaveEntity_NullEntity_NotEmptyFileName() {
		HttpFileUtils httpFileUtils = new HttpFileUtils();
		HttpEntity entity = null;
		String fileName = ""test.txt"";
		long result = httpFileUtils.saveEntity(entity, fileName);
		assertEquals(0, result);
	}
	
	/**
	* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
	* It tests the case when the entity is not null and the file name is not empty.
	*/
	@Test
	void testSaveEntity_NotNullEntity_NotEmptyFileName() {
		HttpFileUtils httpFileUtils = new HttpFileUtils();
		HttpEntity entity = new HttpEntity() {
			@Override
			public boolean isRepeatable() {
				return false;
			}

			@Override
			public boolean isChunked() {
				return false;
			}

			@Override
			public long getContentLength() {
				return 0;
			}

			@Override
			public Header getContentType() {
				return null;
			}

			@Override
			public Header getContentEncoding() {
				return null;
			}

			@Override
			public InputStream getContent() throws IOException, IllegalStateException {
				return null;
			}

			@Override
			public void writeTo(OutputStream outstream) throws IOException {
				
			}

			@Override
			public boolean isStreaming() {
				return false;
			}

			@Override
			public void consumeContent() throws IOException {
				
			}
		};
		String fileName = ""test.txt"";
		long result = httpFileUtils.saveEntity(entity, fileName);
		assertEquals(0, result);
	}
	
	/**
	* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
	* It tests the case when the entity is null and the file name is not empty.
	*/
	@Test
	void testSaveEntity_NullEntity_NotEmptyFileName() {
		HttpFileUtils httpFileUtils = new HttpFileUtils();
		HttpEntity entity = null;
		String fileName = ""test.txt"";
		long result = httpFileUtils.saveEntity(entity, fileName);
		assertEquals(0, result);
	}
	
	/**
	* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
	* It tests the case when the entity is not null and the file name is not empty.
	*/
	@Test
	void testSaveEntity_NotNullEntity_NotEmptyFileName() {
		HttpFileUtils httpFileUtils = new HttpFileUtils();
		HttpEntity entity = new HttpEntity() {
			@Override
			public boolean isRepeatable() {
				return false;
			}

			@Override
			public boolean isChunked() {
				return false;
			}

			@Override
			public long getContentLength() {
				return 0;
			}

			@Override
			public Header getContentType() {
				return null;
			}

			@Override
			public Header getContentEncoding() {
				return null;
			}

			@Override
			public InputStream getContent() throws IOException, IllegalStateException {
				return null;
			}

			@Override
			public void writeTo(OutputStream outstream) throws IOException {
				
			}

			@Override
			public boolean isStreaming() {
				return false;
			}

			@Override
			public void consumeContent() throws IOException {
				
			}
		};
		String fileName = ""test.txt"";
		long result = httpFileUtils.saveEntity(entity, fileName);
		assertEquals(0, result);
	}
	
	/**
	* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
	* It tests the case when the entity is null and the file name is not empty.
	*/
	@Test
	void testSaveEntity_NullEntity_NotEmptyFileName() {
		HttpFileUtils httpFileUtils = new HttpFileUtils();
		HttpEntity entity = null;
		String fileName = ""test.txt"";
		long result = httpFileUtils.saveEntity(entity, fileName);
		assertEquals(0, result);
	}
	
	/**
	* Test case for {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.
	* It tests the case when the entity is not null and the file name is not empty.
	*/
	@Test
	void testSaveEntity_NotNullEntity_NotEmptyFileName() {
		HttpFileUtils httpFileUtils = new HttpFileUtils();
		HttpEntity entity = new HttpEntity() {
			@Override
			public boolean isRepeatable() {
				return false;
			}

			@Override
			public boolean isChunked() {
				return false;
			}

			@Override
			public long getContentLength() {
				return 0;
			}

			@Override
			public Header getContentType() {
				return null;
			}

			@Override
			public Header getContentEncoding() {
				return null;
			}

			@Override
			public InputStream getContent() throws IOException, IllegalStateException {
				return null;
			}

			@Override
			public void writeTo(OutputStream outstream) throws IOException {
				
			}

			@Override
			public boolean isStreaming() {
				return false;
			}

			@Override
			public void consumeContent() throws IOException {
				
			}
		};
		"
cmpl-6xDUWPy1rWphyiplelI6wOL37Ui8o,/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/HttpPreference.java,91.37314653396606,length,"// HttpPreference.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;

/**
 * @author vlad
 */
public class HttpPreference {

    /**
     * Get values from work form and set properties
     * Then call method FileUtil.savePreferenceToFile
     * @param mainView HttpAnalyzerView
     * @param parentFrame JFrame
     */
    public void savePreference(HttpAnalyzerView analyseView, JFrame parentFrame, String notes);

    /**
     * Get values from work form and set properties
     * Then call method FileUtil.savePreferenceToFile
     * @param mainView HttpAnalyzerView
     * @param parentFrame JFrame
     * @return String Notes
     */
    public String loadPreference(HttpAnalyzerView mainView, JFrame parentFrame);
}
","// HttpPreferenceTest.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpPreference}.
* It contains ten unit test cases for the {@link HttpPreference#loadPreference(HttpAnalyzerView, JFrame)} method.
*/
class HttpPreferenceTest {","// HttpPreferenceTest.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpPreference}.
* It contains ten unit test cases for the {@link HttpPreference#loadPreference(HttpAnalyzerView, JFrame)} method.
*/
class HttpPreferenceTest {

	/**
	 * Test of loadPreference method, of class HttpPreference.
	 */
	@Test
	public void testLoadPreference() {
		System.out.println(""loadPreference"");
		HttpAnalyzerView mainView = null;
		JFrame parentFrame = null;
		HttpPreference instance = new HttpPreference();
		String expResult = """";
		String result = instance.loadPreference(mainView, parentFrame);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}

	/**
	 * Test of savePreference method, of class HttpPreference.
	 */
	@Test
	public void testSavePreference() {
		System.out.println(""savePreference"");
		HttpAnalyzerView analyseView = null;
		JFrame parentFrame = null;
		String notes = """";
		HttpPreference instance = new HttpPreference();
		instance.savePreference(analyseView, parentFrame, notes);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
}

// HttpPreference.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;

/**
 * @author vlad
 */
public class HttpPreference {

    /**
     * Get values from work form and set properties
     * Then call method FileUtil.savePreferenceToFile
     * @param mainView HttpAnalyzerView
     * @param parentFrame JFrame
     */
    public void savePreference(HttpAnalyzerView analyseView, JFrame parentFrame, String notes);

    /**
     * Get values from work form and set properties
     * Then call method FileUtil.savePreferenceToFile
     * @param mainView HttpAnalyzerView
     * @param parentFrame JFrame
     * @return String Notes
     */
    public String loadPreference(HttpAnalyzerView mainView, JFrame parentFrame);
}

// HttpPreferenceTest.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpPreference}.
* It contains ten unit test cases for the {@link HttpPreference#loadPreference(HttpAnalyzerView, JFrame)} method.
*/
class HttpPreferenceTest {
		
	/**
	 * Test of loadPreference method, of class HttpPreference.
	 */
	@Test
	public void testLoadPreference() {
		System.out.println(""loadPreference"");
		HttpAnalyzerView mainView = null;
		JFrame parentFrame = null;
		HttpPreference instance = new HttpPreference();
		String expResult = """";
		String result = instance.loadPreference(mainView, parentFrame);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}

	/**
	 * Test of savePreference method, of class HttpPreference.
	 */
	@Test
	public void testSavePreference() {
		System.out.println(""savePreference"");
		HttpAnalyzerView analyseView = null;
		JFrame parentFrame = null;
		String notes = """";
		HttpPreference instance = new HttpPreference();
		instance.savePreference(analyseView, parentFrame, notes);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
}

// HttpPreference.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;

/**
 * @author vlad
 */
public class HttpPreference {

    /**
     * Get values from work form and set properties
     * Then call method FileUtil.savePreferenceToFile
     * @param mainView HttpAnalyzerView
     * @param parentFrame JFrame
     */
    public void savePreference(HttpAnalyzerView analyseView, JFrame parentFrame, String notes);

    /**
     * Get values from work form and set properties
     * Then call method FileUtil.savePreferenceToFile
     * @param mainView HttpAnalyzerView
     * @param parentFrame JFrame
     * @return String Notes
     */
    public String loadPreference(HttpAnalyzerView mainView, JFrame parentFrame);
}

// HttpPreferenceTest.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpPreference}.
* It contains ten unit test cases for the {@link HttpPreference#loadPreference(HttpAnalyzerView, JFrame)} method.
*/
class HttpPreferenceTest {
		
	/**
	 * Test of loadPreference method, of class HttpPreference.
	 */
	@Test
	public void testLoadPreference() {
		System.out.println(""loadPreference"");
		HttpAnalyzerView mainView = null;
		JFrame parentFrame = null;
		HttpPreference instance = new HttpPreference();
		String expResult = """";
		String result = instance.loadPreference(mainView, parentFrame);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}

	/**
	 * Test of savePreference method, of class HttpPreference.
	 */
	@Test
	public void testSavePreference() {
		System.out.println(""savePreference"");
		HttpAnalyzerView analyseView = null;
		JFrame parentFrame = null;
		String notes = """";
		HttpPreference instance = new HttpPreference();
		instance.savePreference(analyseView, parentFrame, notes);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
}

// HttpPreference.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;

/**
 * @author vlad
 */
public class HttpPreference {

    /**
     * Get values from work form and set properties
     * Then call method FileUtil.savePreferenceToFile
     * @param mainView HttpAnalyzerView
     * @param parentFrame JFrame
     */
    public void savePreference(HttpAnalyzerView analyseView, JFrame parentFrame, String notes);

    /**
     * Get values from work form and set properties
     * Then call method FileUtil.savePreferenceToFile
     * @param mainView HttpAnalyzerView
     * @param parentFrame JFrame
     * @return String Notes
     */
    public String loadPreference(HttpAnalyzerView mainView, JFrame parentFrame);
}

// HttpPreferenceTest.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpPreference}.
* It contains ten unit test cases for the {@link HttpPreference#loadPreference(HttpAnalyzerView, JFrame)} method.
*/
class HttpPreferenceTest {
		
	/**
	 * Test of loadPreference method, of class HttpPreference.
	 */
	@Test
	public void testLoadPreference() {
		System.out.println(""loadPreference"");
		HttpAnalyzerView mainView = null;
		JFrame parentFrame = null;
		HttpPreference instance = new HttpPreference();
		String expResult = """";
		String result = instance.loadPreference(mainView, parentFrame);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}

	/**
	 * Test of savePreference method, of class HttpPreference.
	 */
	@Test
	public void testSavePreference() {
		System.out.println(""savePreference"");
		HttpAnalyzerView analyseView = null;
		JFrame parentFrame = null;
		String notes = """";
		HttpPreference instance = new HttpPreference();
		instance.savePreference(analyseView, parentFrame, notes);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
}

// HttpPreference.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;

/**
 * @author vlad
 */
public class HttpPreference {

    /**
     * Get values from work form and set properties
     * Then call method FileUtil.savePreferenceToFile
     * @param mainView HttpAnalyzerView
     * @param parentFrame JFrame
     */
    public void savePreference(HttpAnalyzerView analyseView, JFrame parentFrame, String notes);

    /**
     * Get values from work form and set properties
     * Then call method FileUtil.savePreferenceToFile
     * @param mainView HttpAnalyzerView
     * @param parentFrame JFrame
     * @return String Notes
     */
    public String loadPreference(HttpAnalyzerView mainView, JFrame parentFrame);
}

// HttpPreferenceTest.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpPreference}.
* It contains ten unit test cases for the {@link HttpPreference#loadPreference(HttpAnalyzerView, JFrame)} method.
*/
class HttpPreferenceTest {
		
	/**
	 * Test of loadPreference method, of class HttpPreference.
	 */
	@Test
	public void testLoadPreference() {
		System.out.println(""loadPreference"");
		HttpAnalyzerView mainView = null;
		JFrame parentFrame = null;
		HttpPreference instance = new HttpPreference();
		String expResult = """";
		String result = instance.loadPreference(mainView, parentFrame);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}

	/**
	 * Test of savePreference method, of class HttpPreference.
	 */
	@Test
	public void testSavePreference() {
		System.out.println(""savePreference"");
		HttpAnalyzerView analyseView = null;
		JFrame parentFrame = null;
		String notes = """";
		HttpPreference instance = new HttpPreference();
		instance.savePreference(analyseView, parentFrame, notes);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
}

// HttpPreference.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;

/**
 * @author vlad
 */
public class HttpPreference {

    /**
     * Get values from work form and set properties
     * Then call method FileUtil.savePreferenceToFile
     * @param mainView HttpAnalyzerView
     * @param parentFrame JFrame
     */
    public void savePreference(HttpAnalyzerView analyseView, JFrame parentFrame, String notes);

    /**
     * Get values from work form and set properties
     * Then call method FileUtil.savePreferenceToFile
     * @param mainView HttpAnalyzerView
     * @param parentFrame JFrame
     * @return String Notes
     */
    public String loadPreference(HttpAnalyzerView mainView, JFrame parentFrame);
}

// HttpPreferenceTest.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpPreference}.
* It contains ten unit test cases for the {@link HttpPreference#loadPreference(HttpAnalyzerView, JFrame)} method.
*/
class HttpPreferenceTest {
		
	/**
	 * Test of loadPreference method, of class HttpPreference.
	 */
	@Test
	public void testLoadPreference() {
		System.out.println(""loadPreference"");
		HttpAnalyzerView mainView = null;
		JFrame parentFrame = null;
		HttpPreference instance = new HttpPreference();
		String expResult = """";
		String result = instance.loadPreference(mainView, parentFrame);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}

	/**
	 * Test of savePreference method, of class HttpPreference.
	 */
	@Test
	public void testSavePreference() {
		System.out.println(""savePreference"");
		HttpAnalyzerView analyseView = null;
		JFrame parentFrame = null;
		String notes = """";
		HttpPreference instance = new HttpPreference();
		instance.savePreference(analyseView, parentFrame, notes);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
}

// HttpPreference.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;

/**
 * @author vlad
 */
public class HttpPreference {

    /**
     * Get values from work form and set properties
     * Then call method FileUtil.savePreferenceToFile
     * @param mainView HttpAnalyzerView
     * @param parentFrame JFrame
     */
    public void savePreference(HttpAnalyzerView analyseView, JFrame parentFrame, String notes);

    /**
     * Get values from work form and set properties
     * Then call method FileUtil.savePreferenceToFile
     * @param mainView HttpAnalyzerView
     * @param parentFrame JFrame
     * @return String Notes
     */
    public String loadPreference(HttpAnalyzerView mainView, JFrame parentFrame);
}

// HttpPreferenceTest.java
package httpanalyzer;

import java.util.Properties;
import javax.swing.JFrame;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HttpPreference}.
* It contains ten unit test cases for the {@link HttpPreference#loadPreference(HttpAnalyzerView, JFrame)} method.
*/
class HttpPreferenceTest {
		
	/**
	 * Test of loadPreference method, of class HttpPreference.
	 */
	@Test
	public void testLoadPreference() {
		System.out.println(""loadPreference"");
		HttpAnalyzerView mainView = null;
		JFrame parentFrame = null;
		Http"
cmpl-6xDW0kWrvTCVf1iPRcb6AGGVx8VK7,/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/ParamsUrlTools.java,78.80104780197144,length,"// ParamsUrlTools.java
package httpanalyzer;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;

/**
 * @author vlad
 */
public class ParamsUrlTools {

    /**
     * Transform long String line with parameters
     * to List (key, value)
     * @param params String
     * @return List<NameValuePair>
     */
    public List<NameValuePair> getPairParams(String params);

    /**
     * Get URL and check it. Apply HTTP scheme only.
     * Cut URL on some parts and send them.
     * Return String array = {host, port, path, checkedUrl}
     * @return String[]
     */
    public String[] splitUrl(String startUrl, JFrame parentFrame);
}
","// ParamsUrlToolsTest.java
package httpanalyzer;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParamsUrlTools}.
* It contains ten unit test cases for the {@link ParamsUrlTools#getPairParams(String)} method.
*/
class ParamsUrlToolsTest {","// ParamsUrlToolsTest.java
package httpanalyzer;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParamsUrlTools}.
* It contains ten unit test cases for the {@link ParamsUrlTools#getPairParams(String)} method.
*/
class ParamsUrlToolsTest {

	/**
	 * Test of getPairParams method, of class ParamsUrlTools.
	 */
	@Test
	public void testGetPairParams() {
		System.out.println(""getPairParams"");
		ParamsUrlTools instance = new ParamsUrlTools();
		
		// Test case 1
		String params = """";
		List<NameValuePair> expResult = new ArrayList<>();
		List<NameValuePair> result = instance.getPairParams(params);
		assertEquals(expResult, result);
		
		// Test case 2
		params = ""key=value"";
		expResult = new ArrayList<>();
		expResult.add(new BasicNameValuePair(""key"", ""value""));
		result = instance.getPairParams(params);
		assertEquals(expResult, result);
		
		// Test case 3
		params = ""key=value&key2=value2"";
		expResult = new ArrayList<>();
		expResult.add(new BasicNameValuePair(""key"", ""value""));
		expResult.add(new BasicNameValuePair(""key2"", ""value2""));
		result = instance.getPairParams(params);
		assertEquals(expResult, result);
		
		// Test case 4
		params = ""key=value&key2=value2&key3=value3"";
		expResult = new ArrayList<>();
		expResult.add(new BasicNameValuePair(""key"", ""value""));
		expResult.add(new BasicNameValuePair(""key2"", ""value2""));
		expResult.add(new BasicNameValuePair(""key3"", ""value3""));
		result = instance.getPairParams(params);
		assertEquals(expResult, result);
		
		// Test case 5
		params = ""key=value&key2=value2&key3=value3&key4=value4"";
		expResult = new ArrayList<>();
		expResult.add(new BasicNameValuePair(""key"", ""value""));
		expResult.add(new BasicNameValuePair(""key2"", ""value2""));
		expResult.add(new BasicNameValuePair(""key3"", ""value3""));
		expResult.add(new BasicNameValuePair(""key4"", ""value4""));
		result = instance.getPairParams(params);
		assertEquals(expResult, result);
		
		// Test case 6
		params = ""key=value&key2=value2&key3=value3&key4=value4&key5=value5"";
		expResult = new ArrayList<>();
		expResult.add(new BasicNameValuePair(""key"", ""value""));
		expResult.add(new BasicNameValuePair(""key2"", ""value2""));
		expResult.add(new BasicNameValuePair(""key3"", ""value3""));
		expResult.add(new BasicNameValuePair(""key4"", ""value4""));
		expResult.add(new BasicNameValuePair(""key5"", ""value5""));
		result = instance.getPairParams(params);
		assertEquals(expResult, result);
		
		// Test case 7
		params = ""key=value&key2=value2&key3=value3&key4=value4&key5=value5&key6=value6"";
		expResult = new ArrayList<>();
		expResult.add(new BasicNameValuePair(""key"", ""value""));
		expResult.add(new BasicNameValuePair(""key2"", ""value2""));
		expResult.add(new BasicNameValuePair(""key3"", ""value3""));
		expResult.add(new BasicNameValuePair(""key4"", ""value4""));
		expResult.add(new BasicNameValuePair(""key5"", ""value5""));
		expResult.add(new BasicNameValuePair(""key6"", ""value6""));
		result = instance.getPairParams(params);
		assertEquals(expResult, result);
		
		// Test case 8
		params = ""key=value&key2=value2&key3=value3&key4=value4&key5=value5&key6=value6&key7=value7"";
		expResult = new ArrayList<>();
		expResult.add(new BasicNameValuePair(""key"", ""value""));
		expResult.add(new BasicNameValuePair(""key2"", ""value2""));
		expResult.add(new BasicNameValuePair(""key3"", ""value3""));
		expResult.add(new BasicNameValuePair(""key4"", ""value4""));
		expResult.add(new BasicNameValuePair(""key5"", ""value5""));
		expResult.add(new BasicNameValuePair(""key6"", ""value6""));
		expResult.add(new BasicNameValuePair(""key7"", ""value7""));
		result = instance.getPairParams(params);
		assertEquals(expResult, result);
		
		// Test case 9
		params = ""key=value&key2=value2&key3=value3&key4=value4&key5=value5&key6=value6&key7=value7&key8=value8"";
		expResult = new ArrayList<>();
		expResult.add(new BasicNameValuePair(""key"", ""value""));
		expResult.add(new BasicNameValuePair(""key2"", ""value2""));
		expResult.add(new BasicNameValuePair(""key3"", ""value3""));
		expResult.add(new BasicNameValuePair(""key4"", ""value4""));
		expResult.add(new BasicNameValuePair(""key5"", ""value5""));
		expResult.add(new BasicNameValuePair(""key6"", ""value6""));
		expResult.add(new BasicNameValuePair(""key7"", ""value7""));
		expResult.add(new BasicNameValuePair(""key8"", ""value8""));
		result = instance.getPairParams(params);
		assertEquals(expResult, result);
		
		// Test case 10
		params = ""key=value&key2=value2&key3=value3&key4=value4&key5=value5&key6=value6&key7=value7&key8=value8&key9=value9"";
		expResult = new ArrayList<>();
		expResult.add(new BasicNameValuePair(""key"", ""value""));
		expResult.add(new BasicNameValuePair(""key2"", ""value2""));
		expResult.add(new BasicNameValuePair(""key3"", ""value3""));
		expResult.add(new BasicNameValuePair(""key4"", ""value4""));
		expResult.add(new BasicNameValuePair(""key5"", ""value5""));
		expResult.add(new BasicNameValuePair(""key6"", ""value6""));
		expResult.add(new BasicNameValuePair(""key7"", ""value7""));
		expResult.add(new BasicNameValuePair(""key8"", ""value8""));
		expResult.add(new BasicNameValuePair(""key9"", ""value9""));
		result = instance.getPairParams(params);
		assertEquals(expResult, result);
	}
	
	/**
	 * Test of splitUrl method, of class ParamsUrlTools.
	 */
	@Test
	public void testSplitUrl() {
		System.out.println(""splitUrl"");
		ParamsUrlTools instance = new ParamsUrlTools();
		
		// Test case 1
		String startUrl = ""http://www.google.com"";
		JFrame parentFrame = new JFrame();
		String[] expResult = {""www.google.com"", ""80"", ""/"", ""http://www.google.com""};
		String[] result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
		
		// Test case 2
		startUrl = ""http://www.google.com:8080"";
		expResult = {""www.google.com"", ""8080"", ""/"", ""http://www.google.com:8080""};
		result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
		
		// Test case 3
		startUrl = ""http://www.google.com:8080/"";
		expResult = {""www.google.com"", ""8080"", ""/"", ""http://www.google.com:8080/""};
		result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
		
		// Test case 4
		startUrl = ""http://www.google.com:8080/index.html"";
		expResult = {""www.google.com"", ""8080"", ""/index.html"", ""http://www.google.com:8080/index.html""};
		result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
		
		// Test case 5
		startUrl = ""http://www.google.com:8080/index.html?key=value"";
		expResult = {""www.google.com"", ""8080"", ""/index.html"", ""http://www.google.com:8080/index.html?key=value""};
		result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
		
		// Test case 6
		startUrl = ""http://www.google.com:8080/index.html?key=value&key2=value2"";
		expResult = {""www.google.com"", ""8080"", ""/index.html"", ""http://www.google.com:8080/index.html?key=value&key2=value2""};
		result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
		
		// Test case 7
		startUrl = ""http://www.google.com:8080/index.html?key=value&key2=value2&key3=value3"";
		expResult = {""www.google.com"", ""8080"", ""/index.html"", ""http://www.google.com:8080/index.html?key=value&key2=value2&key3=value3""};
		result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
		
		// Test case 8
		startUrl = ""http://www.google.com:8080/index.html?key=value&key2=value2&key3=value3&key4=value4"";
		expResult = {""www.google.com"", ""8080"", ""/index.html"", ""http://www.google.com:8080/index.html?key=value&key2=value2&key3=value3&key4=value4""};
		result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
		
		// Test case 9
		startUrl = ""http://www.google.com:8080/index.html?key=value&key2=value2&key3=value3&key4=value4&key5=value5"";
		expResult = {""www.google.com"", ""8080"", ""/index.html"", ""http://www.google.com:8080/index.html?key=value&key2=value2&key3=value3&key4=value4&key5=value5""};
		result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
		
		// Test case 10
		startUrl = ""http://www.google.com:8080/index.html?key=value&key2=value2&key3=value3&key4=value4&key5=value5&key6=value6"";
		expResult = {""www.google.com"", ""8080"", ""/index.html"", ""http://www.google.com:8080/index.html?key=value&key2=value2&key3=value3&key4=value4&key5=value5&key6=value6""};
		result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
		
		// Test case 11
		startUrl = ""http://www.google.com:8080/index.html?key=value&key2=value2&key3=value3&key4=value4&key5=value5&key6=value6&key7=value7"";
		expResult = {""www.google.com"", ""8080"", ""/index.html"", ""http://www.google.com:8080/index.html?key=value&key2=value2&key3=value3&key4=value4&key5=value5&key6=value6&key7=value7""};
		result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
		
		// Test case 12
		startUrl = ""http://www.google.com:8080/index.html?key=value&key2=value2&key3=value3&key4=value4&key5=value5&key6=value6&key7=value7&key8=value8"";
		expResult = {""www.google.com"", ""8080"", ""/index.html"", ""http://www.google.com:8080/index.html?key=value&key2=value2&key3=value3&key4=value4&key5=value5&key6=value6&key7=value7&key8=value8""};
		result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
		
		// Test case 13
		startUrl = ""http://www.google.com:8080/index.html?key=value&key2=value2&key3=value3&key4=value4&key5=value5&key6=value6&key7=value7&key8=value8&key9=value9"";
		expResult = {""www.google.com"", ""8080"", ""/index.html"", ""http://www.google.com:8080/index.html?key=value&key2=value2&key3=value3&key4=value4&key5=value5&key6=value6&key7=value7&key8=value8&key9=value9""};
		result = instance.splitUrl(startUrl, parentFrame);
		assertArrayEquals(expResult, result);
	}
}

// ParamsUrlTools.java
package httpanalyzer;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;

/**
 * @author vlad
 */
public class ParamsUrlTools {

    /**
     * Transform long String line with parameters
     * to List (key, value)
     * @param params String
     * @return List<NameValuePair>
     */
    public List<NameValuePair> getPairParams(String params) {
        List<NameValuePair> list = new ArrayList<>();
        String[] paramsArray = params.split(""&"");
        for (String param : paramsArray) {
            String[] keyValue = param.split(""="");
            list.add(new BasicNameValue"
cmpl-6xDXHnvUkfvJSV9ieDek6bkL6jS4r,/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/Password.java,27.784087657928467,stop,"// Password.java
package httpanalyzer;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author David Scott
 */
public class Password {

    /**
     * 	Password is a class to implement password encryption as used
     * 	on Unix systems. It is compatible with the crypt(3c) system function.
     * 	This version is a based on the DES encryption algorithm in
     * 	Andrew Tanenbaum's book ""Computer Networks"". It was rewritten
     * 	in C and used in Perl release 4.035. This version was rewritten
     * 	in Java by David Scott, Siemens Ltd., Australia.
     *
     * 	For further details on the methods in this class, refer to the
     * 	Unix man pages for crypt(3c).
     */
    private static byte[] InitialTr = { 58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8, 57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7 };

    private static byte[] FinalTr = { 40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25 };

    private static byte[] swap = { 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 };

    private static byte[] KeyTr1 = { 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4 };

    private static byte[] KeyTr2 = { 14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32 };

    private static byte[] etr = { 32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17, 16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25, 24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1 };

    private static byte[] ptr = { 16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10, 2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25 };

    private static byte[][] s_boxes = { { 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7, 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8, 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0, 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 }, { 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10, 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5, 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15, 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 }, { 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8, 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1, 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7, 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 }, { 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15, 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9, 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4, 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 }, { 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9, 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6, 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14, 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 }, { 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11, 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8, 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6, 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 }, { 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1, 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6, 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2, 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 }, { 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7, 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2, 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8, 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 } };

    private static int[] rots = { 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 };

    private static byte[] key = new byte[64];

    private static byte[] EP = etr;

    /* *** Methods start here *** */
    private static void transpose(byte[] data, byte[] t, int n);

    private static void rotate(byte[] key);

    private static void f(int i, byte[] key, byte[] a, byte[] x);

    private static void definekey(byte[] k);

    private static void encrypt(byte[] blck, int edflag);

    /**
     * 	Returns a String containing the encrypted passwd
     *
     * 	@param	strpw	A String containing the un-encrypted password
     * 	@param	strsalt	A 2 character String, containing the salt to
     * 					encrypt the password with.
     * 	@returns		String containing encrypted password.
     */
    public static String crypt(String strpw, String strsalt);

    public static String hashMD5(String baseString);
}
","// PasswordTest.java
package httpanalyzer;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Password}.
* It contains ten unit test cases for the {@link Password#crypt(String, String)} method.
*/
class PasswordTest {","// PasswordTest.java
package httpanalyzer;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Password}.
* It contains ten unit test cases for the {@link Password#crypt(String, String)} method.
*/
class PasswordTest {

	/**
	* Test case for {@link Password#crypt(String, String)} method.
	* It tests the encryption of the password ""password"" with the salt ""salt"".
	* The expected result is ""salt"".
	*/
	@Test
	void testCrypt1() {
		String strpw = ""password"";
		String strsalt = ""salt"";
		String expResult = ""salt"";
		String result = Password.crypt(strpw, strsalt);
		assertEquals(expResult, result);
	}
	
	/**
	* Test case for {@link Password#crypt(String, String)} method.
	* It tests the encryption of the password ""password"" with the salt ""salt"".
	* The expected result is ""salt"".
	*/
	@Test
	void testCrypt2() {
		String strpw = ""password"";
		String strsalt = ""salt"";
		String expResult = ""salt"";
		String result = Password.crypt(strpw, strsalt);
		assertEquals(expResult, result);
	}
	
	/**
	* Test case for {@link Password#crypt(String, String)} method.
	* It tests the encryption of the password ""password"" with the salt ""salt"".
	* The expected result is ""salt"".
	*/
	@Test
	void testCrypt3() {
		String strpw = ""password"";
		String strsalt = ""salt"";
		String expResult = ""salt"";
		String result = Password.crypt(strpw, strsalt);
		assertEquals(expResult, result);
	}
	
	/**
	* Test case for {@link Password#crypt(String, String)} method.
	* It tests the encryption of the password ""password"" with the salt ""salt"".
	* The expected result is ""salt"".
	*/
	@Test
	void testCrypt4() {
		String strpw = ""password"";
		String strsalt = ""salt"";
		String expResult = ""salt"";
		String result = Password.crypt(strpw, strsalt);
		assertEquals(expResult, result);
	}
	
	/**
	* Test case for {@link Password#crypt(String, String)} method.
	* It tests the encryption of the password ""password"" with the salt ""salt"".
	* The expected result is ""salt"".
	*/
	@Test
	void testCrypt5() {
		String strpw = ""password"";
		String strsalt = ""salt"";
		String expResult = ""salt"";
		String result = Password.crypt(strpw, strsalt);
		assertEquals(expResult, result);
	}
	
	/**
	* Test case for {@link Password#crypt(String, String)} method.
	* It tests the encryption of the password ""password"" with the salt ""salt"".
	* The expected result is ""salt"".
	*/
	@Test
	void testCrypt6() {
		String strpw = ""password"";
		String strsalt = ""salt"";
		String expResult = ""salt"";
		String result = Password.crypt(strpw, strsalt);
		assertEquals(expResult, result);
	}
	
	/**
	* Test case for {@link Password#crypt(String, String)} method.
	* It tests the encryption of the password ""password"" with the salt ""salt"".
	* The expected result is ""salt"".
	*/
	@Test
	void testCrypt7() {
		String strpw = ""password"";
		String strsalt = ""salt"";
		String expResult = ""salt"";
		String result = Password.crypt(strpw, strsalt);
		assertEquals(expResult, result);
	}
	
	/**
	* Test case for {@link Password#crypt(String, String)} method.
	* It tests the encryption of the password ""password"" with the salt ""salt"".
	* The expected result is ""salt"".
	*/
	@Test
	void testCrypt8() {
		String strpw = ""password"";
		String strsalt = ""salt"";
		String expResult = ""salt"";
		String result = Password.crypt(strpw, strsalt);
		assertEquals(expResult, result);
	}
	
	/**
	* Test case for {@link Password#crypt(String, String)} method.
	* It tests the encryption of the password ""password"" with the salt ""salt"".
	* The expected result is ""salt"".
	*/
	@Test
	void testCrypt9() {
		String strpw = ""password"";
		String strsalt = ""salt"";
		String expResult = ""salt"";
		String result = Password.crypt(strpw, strsalt);
		assertEquals(expResult, result);
	}
	
	/**
	* Test case for {@link Password#crypt(String, String)} method.
	* It tests the encryption of the password ""password"" with the salt ""salt"".
	* The expected result is ""salt"".
	*/
	@Test
	void testCrypt10() {
		String strpw = ""password"";
		String strsalt = ""salt"";
		String expResult = ""salt"";
		String result = Password.crypt(strpw, strsalt);
		assertEquals(expResult, result);
	}
}"
