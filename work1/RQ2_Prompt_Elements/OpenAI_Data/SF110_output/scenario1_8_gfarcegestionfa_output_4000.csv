ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6x87womyEwuGhjyhErXfF7oN7msTT,/EvoSuiteBenchmark/scenario1/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale0.java,4.646925687789917,stop,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    public String dateLimForm() {
        String date = comboBoxJourDLM.getSelectedItem().toString() + comboBoxMoisDLM.getSelectedItem().toString() + comboBoxAnneeDLM.getSelectedItem().toString();
        return date;
    }
}
","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipaleTest {","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipaleTest {

	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	* This test case is used to test the {@link FenetrePrincipale#dateLimForm()} method.
	* It checks if the method returns the correct date.
	*/
	@Test
	void testDateLimForm() {
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		assertEquals(""01012020"", fenetrePrincipale.dateLimForm());
	}
}"
cmpl-6x88zA5X5XgfzNFsjcF8SbyOYEIpD,/EvoSuiteBenchmark/scenario1/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale1.java,108.85490393638611,length,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    public String dateDeNaiss() {
        String date = comboBoxJourDDNEtu.getSelectedItem().toString() + comboBoxMoisDDNEtu.getSelectedItem().toString() + comboBoxAnneeDDNEtu.getSelectedItem().toString();
        return date;
    }
}
","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipaleTest {","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipaleTest {

	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input values :
	* <ul>
	* 	<li>comboBoxJourDDNEtu = ""1""</li>
	* 	<li>comboBoxMoisDDNEtu = ""1""</li>
	* 	<li>comboBoxAnneeDDNEtu = ""1""</li>
	* </ul>
	* and the following expected output value :
	* <ul>
	* 	<li>expected = ""11/1/1""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss_1() {
		// Initialize the input values
		String comboBoxJourDDNEtu = ""1"";
		String comboBoxMoisDDNEtu = ""1"";
		String comboBoxAnneeDDNEtu = ""1"";
		
		// Set the input values
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDDNEtu = comboBoxJourDDNEtu;
		fenetrePrincipale.comboBoxMoisDDNEtu = comboBoxMoisDDNEtu;
		fenetrePrincipale.comboBoxAnneeDDNEtu = comboBoxAnneeDDNEtu;
		
		// Call the method under test
		String actual = fenetrePrincipale.dateDeNaiss();
		
		// Verify the result
		String expected = ""11/1/1"";
		assertEquals(expected, actual);
		// TODO : add other tests
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input values :
	* <ul>
	* 	<li>comboBoxJourDDNEtu = ""2""</li>
	* 	<li>comboBoxMoisDDNEtu = ""2""</li>
	* 	<li>comboBoxAnneeDDNEtu = ""2""</li>
	* </ul>
	* and the following expected output value :
	* <ul>
	* 	<li>expected = ""22/2/2""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss_2() {
		// Initialize the input values
		String comboBoxJourDDNEtu = ""2"";
		String comboBoxMoisDDNEtu = ""2"";
		String comboBoxAnneeDDNEtu = ""2"";
		
		// Set the input values
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDDNEtu = comboBoxJourDDNEtu;
		fenetrePrincipale.comboBoxMoisDDNEtu = comboBoxMoisDDNEtu;
		fenetrePrincipale.comboBoxAnneeDDNEtu = comboBoxAnneeDDNEtu;
		
		// Call the method under test
		String actual = fenetrePrincipale.dateDeNaiss();
		
		// Verify the result
		String expected = ""22/2/2"";
		assertEquals(expected, actual);
		// TODO : add other tests
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input values :
	* <ul>
	* 	<li>comboBoxJourDDNEtu = ""3""</li>
	* 	<li>comboBoxMoisDDNEtu = ""3""</li>
	* 	<li>comboBoxAnneeDDNEtu = ""3""</li>
	* </ul>
	* and the following expected output value :
	* <ul>
	* 	<li>expected = ""33/3/3""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss_3() {
		// Initialize the input values
		String comboBoxJourDDNEtu = ""3"";
		String comboBoxMoisDDNEtu = ""3"";
		String comboBoxAnneeDDNEtu = ""3"";
		
		// Set the input values
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDDNEtu = comboBoxJourDDNEtu;
		fenetrePrincipale.comboBoxMoisDDNEtu = comboBoxMoisDDNEtu;
		fenetrePrincipale.comboBoxAnneeDDNEtu = comboBoxAnneeDDNEtu;
		
		// Call the method under test
		String actual = fenetrePrincipale.dateDeNaiss();
		
		// Verify the result
		String expected = ""33/3/3"";
		assertEquals(expected, actual);
		// TODO : add other tests
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input values :
	* <ul>
	* 	<li>comboBoxJourDDNEtu = ""4""</li>
	* 	<li>comboBoxMoisDDNEtu = ""4""</li>
	* 	<li>comboBoxAnneeDDNEtu = ""4""</li>
	* </ul>
	* and the following expected output value :
	* <ul>
	* 	<li>expected = ""44/4/4""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss_4() {
		// Initialize the input values
		String comboBoxJourDDNEtu = ""4"";
		String comboBoxMoisDDNEtu = ""4"";
		String comboBoxAnneeDDNEtu = ""4"";
		
		// Set the input values
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDDNEtu = comboBoxJourDDNEtu;
		fenetrePrincipale.comboBoxMoisDDNEtu = comboBoxMoisDDNEtu;
		fenetrePrincipale.comboBoxAnneeDDNEtu = comboBoxAnneeDDNEtu;
		
		// Call the method under test
		String actual = fenetrePrincipale.dateDeNaiss();
		
		// Verify the result
		String expected = ""44/4/4"";
		assertEquals(expected, actual);
		// TODO : add other tests
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input values :
	* <ul>
	* 	<li>comboBoxJourDDNEtu = ""5""</li>
	* 	<li>comboBoxMoisDDNEtu = ""5""</li>
	* 	<li>comboBoxAnneeDDNEtu = ""5""</li>
	* </ul>
	* and the following expected output value :
	* <ul>
	* 	<li>expected = ""55/5/5""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss_5() {
		// Initialize the input values
		String comboBoxJourDDNEtu = ""5"";
		String comboBoxMoisDDNEtu = ""5"";
		String comboBoxAnneeDDNEtu = ""5"";
		
		// Set the input values
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDDNEtu = comboBoxJourDDNEtu;
		fenetrePrincipale.comboBoxMoisDDNEtu = comboBoxMoisDDNEtu;
		fenetrePrincipale.comboBoxAnneeDDNEtu = comboBoxAnneeDDNEtu;
		
		// Call the method under test
		String actual = fenetrePrincipale.dateDeNaiss();
		
		// Verify the result
		String expected = ""55/5/5"";
		assertEquals(expected, actual);
		// TODO : add other tests
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input values :
	* <ul>
	* 	<li>comboBoxJourDDNEtu = ""6""</li>
	* 	<li>comboBoxMoisDDNEtu = ""6""</li>
	* 	<li>comboBoxAnneeDDNEtu = ""6""</li>
	* </ul>
	* and the following expected output value :
	* <ul>
	* 	<li>expected = ""66/6/6""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss_6() {
		// Initialize the input values
		String comboBoxJourDDNEtu = ""6"";
		String comboBoxMoisDDNEtu = ""6"";
		String comboBoxAnneeDDNEtu = ""6"";
		
		// Set the input values
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDDNEtu = comboBoxJourDDNEtu;
		fenetrePrincipale.comboBoxMoisDDNEtu = comboBoxMoisDDNEtu;
		fenetrePrincipale.comboBoxAnneeDDNEtu = comboBoxAnneeDDNEtu;
		
		// Call the method under test
		String actual = fenetrePrincipale.dateDeNaiss();
		
		// Verify the result
		String expected = ""66/6/6"";
		assertEquals(expected, actual);
		// TODO : add other tests
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input values :
	* <ul>
	* 	<li>comboBoxJourDDNEtu = ""7""</li>
	* 	<li>comboBoxMoisDDNEtu = ""7""</li>
	* 	<li>comboBoxAnneeDDNEtu = ""7""</li>
	* </ul>
	* and the following expected output value :
	* <ul>
	* 	<li>expected = ""77/7/7""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss_7() {
		// Initialize the input values
		String comboBoxJourDDNEtu = ""7"";
		String comboBoxMoisDDNEtu = ""7"";
		String comboBoxAnneeDDNEtu = ""7"";
		
		// Set the input values
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDDNEtu = comboBoxJourDDNEtu;
		fenetrePrincipale.comboBoxMoisDDNEtu = comboBoxMoisDDNEtu;
		fenetrePrincipale.comboBoxAnneeDDNEtu = comboBoxAnneeDDNEtu;
		
		// Call the method under test
		String actual = fenetrePrincipale.dateDeNaiss();
		
		// Verify the result
		String expected = ""77/7/7"";
		assertEquals(expected, actual);
		// TODO : add other tests
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input values :
	* <ul>
	* 	<li>comboBoxJourDDNEtu = ""8""</li>
	* 	<li>comboBoxMoisDDNEtu = ""8""</li>
	* 	<li>comboBoxAnneeDDNEtu = ""8""</li>
	* </ul>
	* and the following expected output value :
	* <ul>
	* 	<li>expected = ""88/8/8""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss_8() {
		// Initialize the input values
		String comboBoxJourDDNEtu = ""8"";
		String comboBoxMoisDDNEtu = ""8"";
		String comboBoxAnneeDDNEtu = ""8"";
		
		// Set the input values
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDDNEtu = comboBoxJourDDNEtu;
		fenetrePrincipale.comboBoxMoisDDNEtu = comboBoxMoisDDNEtu;
		fenetrePrincipale.comboBoxAnneeDDNEtu = comboBoxAnneeDDNEtu;
		
		// Call the method under test
		String actual = fenetrePrincipale.dateDeNaiss();
		
		// Verify the result
		String expected = ""88/8/8"";
		assertEquals(expected, actual);
		// TODO : add other tests
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input values :
	* <ul>
	* 	<li>comboBoxJourDDNEtu = ""9""</li>
	* 	<li>comboBoxMoisDDNEtu = ""9""</li>
	* 	<li>comboBoxAnneeDDNEtu = ""9""</li>
	* </ul>
	* and the following expected output value :
	* <ul>
	* 	<li>expected = ""99/9/9""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss_9() {
		// Initialize the input values
		String comboBoxJourDDNEtu = ""9"";
		String comboBoxMoisDDNEtu = ""9"";
		String comboBoxAnneeDDNEtu = ""9"";
		
		// Set the input values
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDDNEtu = comboBoxJourDDNEtu;
		fenetrePrincipale.comboBoxMoisDDNEtu = comboBoxMoisDDNEtu;
		fenetrePrincipale.comboBoxAnneeDDNEtu = comboBoxAnneeDDNEtu;
		
		// Call the method under test
		String actual = fenetrePrincipale.dateDeNaiss();
		
		// Verify the result
		String expected = ""99/9/9"";
		assertEquals(expected, actual);
		// TODO : add other tests
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input values :
	* <ul>
	* 	<li>comboBoxJourDDNEtu = ""10""</li>
	* 	<"
cmpl-6x8Ajv3Bdg7TJ3hP1T9VZMoGaNNi0,/EvoSuiteBenchmark/scenario1/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage0.java,119.75861549377441,length,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    public TableStockage ajouterLigne() {
        if (nbColonnes > 0) {
            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)
            this.nbLignes++;
            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
            /* on recopie les noms des colonnes */
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j));
            }
            /* on recopie les valeurs dans les colonnes */
            for (int i = 0; i < nbLignes - 2; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i, j);
                }
            }
            for (int j = 0; j < nbColonnes; j++) {
                if (ts.getColumnClass(j).equals(String.class)) {
                    // la derniere ligne sera a null
                    tableS.setValueAt("""", nbLignes - 2, j);
                } else if (ts.getColumnClass(j).equals(Double.class)) {
                    tableS.setValueAt(new Double(""0""), nbLignes - 2, j);
                } else
                    // sauf si de la classe Boolean
                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);
            }
            return tableS;
        } else {
            // pas de colonne pour construire une ligne
            JOptionPane.showMessageDialog(null, ""PAS DE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockageTest {","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockageTest {

	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has no column.
	*/
	@Test
	void testAjouterLigne_noColumn() {
		TableStockage ts = new TableStockage(0, 0);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts, ts2);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has one column.
	*/
	@Test
	void testAjouterLigne_oneColumn() {
		TableStockage ts = new TableStockage(0, 1);
		ts.setColumnName(0, ""colonne1"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getValueAt(0, 0), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has two columns.
	*/
	@Test
	void testAjouterLigne_twoColumns() {
		TableStockage ts = new TableStockage(0, 2);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has three columns.
	*/
	@Test
	void testAjouterLigne_threeColumns() {
		TableStockage ts = new TableStockage(0, 3);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
		assertEquals(ts2.getValueAt(0, 2), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has four columns.
	*/
	@Test
	void testAjouterLigne_fourColumns() {
		TableStockage ts = new TableStockage(0, 4);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ts.setColumnName(3, ""colonne4"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getColumnName(3), ""colonne4"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
		assertEquals(ts2.getValueAt(0, 2), """");
		assertEquals(ts2.getValueAt(0, 3), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has five columns.
	*/
	@Test
	void testAjouterLigne_fiveColumns() {
		TableStockage ts = new TableStockage(0, 5);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ts.setColumnName(3, ""colonne4"");
		ts.setColumnName(4, ""colonne5"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getColumnName(3), ""colonne4"");
		assertEquals(ts2.getColumnName(4), ""colonne5"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
		assertEquals(ts2.getValueAt(0, 2), """");
		assertEquals(ts2.getValueAt(0, 3), """");
		assertEquals(ts2.getValueAt(0, 4), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has six columns.
	*/
	@Test
	void testAjouterLigne_sixColumns() {
		TableStockage ts = new TableStockage(0, 6);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ts.setColumnName(3, ""colonne4"");
		ts.setColumnName(4, ""colonne5"");
		ts.setColumnName(5, ""colonne6"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getColumnName(3), ""colonne4"");
		assertEquals(ts2.getColumnName(4), ""colonne5"");
		assertEquals(ts2.getColumnName(5), ""colonne6"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
		assertEquals(ts2.getValueAt(0, 2), """");
		assertEquals(ts2.getValueAt(0, 3), """");
		assertEquals(ts2.getValueAt(0, 4), """");
		assertEquals(ts2.getValueAt(0, 5), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has seven columns.
	*/
	@Test
	void testAjouterLigne_sevenColumns() {
		TableStockage ts = new TableStockage(0, 7);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ts.setColumnName(3, ""colonne4"");
		ts.setColumnName(4, ""colonne5"");
		ts.setColumnName(5, ""colonne6"");
		ts.setColumnName(6, ""colonne7"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getColumnName(3), ""colonne4"");
		assertEquals(ts2.getColumnName(4), ""colonne5"");
		assertEquals(ts2.getColumnName(5), ""colonne6"");
		assertEquals(ts2.getColumnName(6), ""colonne7"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
		assertEquals(ts2.getValueAt(0, 2), """");
		assertEquals(ts2.getValueAt(0, 3), """");
		assertEquals(ts2.getValueAt(0, 4), """");
		assertEquals(ts2.getValueAt(0, 5), """");
		assertEquals(ts2.getValueAt(0, 6), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has eight columns.
	*/
	@Test
	void testAjouterLigne_eightColumns() {
		TableStockage ts = new TableStockage(0, 8);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ts.setColumnName(3, ""colonne4"");
		ts.setColumnName(4, ""colonne5"");
		ts.setColumnName(5, ""colonne6"");
		ts.setColumnName(6, ""colonne7"");
		ts.setColumnName(7, ""colonne8"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getColumnName(3), ""colonne4"");
		assertEquals(ts2.getColumnName(4), ""colonne5"");
		assertEquals(ts2.getColumnName(5), ""colonne6"");
		assertEquals(ts2.getColumnName(6), ""colonne7"");
		assertEquals(ts2.getColumnName(7), ""colonne8"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
		assertEquals(ts2.getValueAt(0, 2), """");
		assertEquals(ts2.getValueAt(0, 3), """");
		assertEquals(ts2.getValueAt(0, 4), """");
		assertEquals(ts2.getValueAt(0, 5), """");
		assertEquals(ts2.getValueAt(0, 6), """");
		assertEquals(ts2.getValueAt(0, 7), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has nine columns.
	*/
	@Test
	void testAjouterLigne_nineColumns() {
		TableStockage ts = new TableStockage(0, 9);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ts.setColumnName(3, ""colonne4"");
		ts.setColumnName(4, ""colonne5"");
		ts.setColumnName(5, ""colonne6"");
		ts.setColumnName(6, ""colonne7"");
		ts.setColumnName(7, ""colonne8"");
		ts.setColumnName(8, ""colonne9"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getColumnName(3), ""colonne4"");
		assertEquals(ts2.getColumnName(4), ""colonne5"");
		assertEquals(ts2.getColumnName(5), ""colonne6"");
		assertEquals(ts2.getColumnName(6), ""colonne7"");
		assertEquals(ts2.getColumnName(7), ""colonne8"");
		assertEquals(ts2.getColumnName(8), ""colonne9"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
		assertEquals(ts2.getValueAt(0, 2), """");
		assertEquals(ts2.getValueAt(0, 3), """");
		assertEquals(ts2.getValueAt(0, 4), """");
		assertEquals(ts2.getValueAt(0, 5), """");
		assertEquals(ts2.getValueAt(0, 6), """");
		assertEquals(ts2.getValueAt(0, 7), """");
		assertEquals(ts2.getValueAt(0, 8), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has ten columns.
	*/
	@Test
	void testAjouterLigne_tenColumns() {
		TableStockage ts = new TableStockage(0, 10);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ts.setColumnName(3, ""colonne4"");
		ts.setColumnName(4, ""colonne5"");
		ts.setColumnName(5, ""colonne6"");
		ts.setColumnName(6, ""colonne7"");
		ts.setColumnName(7, ""col"
cmpl-6x8CfQy7REdWBKKfEYr6SZtSOKUIn,/EvoSuiteBenchmark/scenario1/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage1.java,177.82968640327454,length,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }
}
","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockageTest {","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockageTest {

	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object.
	*/
	@Test
	void testColonneMail() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertTrue(tableS instanceof TableStockage);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object with the right number of columns.
	*/
	@Test
	void testColonneMail2() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbColonnes + 1, tableS.getColumnCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object with the right number of rows.
	*/
	@Test
	void testColonneMail3() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object with the right number of columns and rows.
	*/
	@Test
	void testColonneMail4() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbColonnes + 1, tableS.getColumnCount());
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object with the right number of columns and rows.
	*/
	@Test
	void testColonneMail5() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbColonnes + 1, tableS.getColumnCount());
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object with the right number of columns and rows.
	*/
	@Test
	void testColonneMail6() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbColonnes + 1, tableS.getColumnCount());
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object with the right number of columns and rows.
	*/
	@Test
	void testColonneMail7() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbColonnes + 1, tableS.getColumnCount());
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object with the right number of columns and rows.
	*/
	@Test
	void testColonneMail8() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbColonnes + 1, tableS.getColumnCount());
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object with the right number of columns and rows.
	*/
	@Test
	void testColonneMail9() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbColonnes + 1, tableS.getColumnCount());
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object with the right number of columns and rows.
	*/
	@Test
	void testColonneMail10() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbColonnes + 1, tableS.getColumnCount());
		assertEquals(nbLignes, tableS.getRowCount());
	}
}

// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }
}

// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockageTest {
		
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object.
	*/
	@Test
	void testColonneMail() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertTrue(tableS instanceof TableStockage);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object with the right number of columns.
	*/
	@Test
	void testColonneMail2() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbColonnes + 1, tableS.getColumnCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object with the right number of rows.
	*/
	@Test
	void testColonneMail3() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object with the right number of columns and rows.
	*/
	@Test
	void testColonneMail4() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbColonnes + 1, tableS.getColumnCount());
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object with the right number of columns and rows.
	*/
	@Test
	void testColonneMail5() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbColonnes + 1, tableS.getColumnCount());
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object with the right number of columns and rows.
	*/
	@Test
	void testColonneMail6() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbColonnes + 1, tableS.getColumnCount());
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object with the right number of columns and rows.
	*/
	@Test
	void testColonneMail7() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbColonnes + 1, tableS.getColumnCount());
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object with the right number of columns and rows.
	*/
	@Test
	void testColonneMail8() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbColonnes + 1, tableS.getColumnCount());
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object with the right number of columns and rows.
	*/
	@Test
	void testColonneMail9() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbColonnes + 1, tableS.getColumnCount());
		assertEquals(nbLignes, tableS.getRowCount());
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* This test case checks if the method returns a {@link TableStockage} object with the right number of columns and rows.
	*/
	@Test
	void testColonneMail10() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(nbColonnes + 1, tableS.getColumnCount());
		assertEquals(nbLignes, tableS.getRowCount());
	}
}

// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }
}

// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockageTest {
		
	/**
	* Test case for the {@link ModifTableStockage#colonneMail"
89847848-ca91-4345-954d-9e9007fa4a44,/EvoSuiteBenchmark/scenario1/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage2.java,-1,"ERROR - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)","// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    public TableStockage selectMail() {
        int j = 0;
        Boolean bool;
        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(""Envoyer E-Mail a:""))) {
            // renverra la position de la colonne E-Mail si elle existe
            j++;
        }
        if (j != this.nbColonnes) {
            // la colonne E-Mail (de type Booleen) existe bien
            int newNbLignes = 0;
            for (int i = 0; i < nbLignes - 1; i++) {
                bool = (Boolean) ts.getValueAt(i, j);
                if (bool) {
                    newNbLignes++;
                }
            }
            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);
            int k = 0;
            for (int ind = 0; ind < nbColonnes; ind++) {
                tableS.setColumnName(ind, ts.getColumnName(ind));
            }
            for (int row = 0; row < nbLignes - 1; row++) {
                bool = (Boolean) ts.getValueAt(row, j);
                if (bool) {
                    for (int column = 0; column < nbColonnes; column++) {
                        tableS.setValueAt(ts.getValueAt(row, column), k, column);
                        bool = false;
                    }
                    k++;
                }
            }
            return tableS;
        } else {
            JOptionPane.showMessageDialog(null, ""Le mail sera envoye a toute la liste"", ""Information"", JOptionPane.INFORMATION_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockageTest {","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockageTest {
"
cmpl-6x8QByymwZTSnKOhlcnN1QjwLTFXw,/EvoSuiteBenchmark/scenario1/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler.java,137.36262345314026,length,"// Controler.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;

/**
 * Fait la liaison entre l'interface graphique et le moteur de l'application
 * Rend comprehensible les requetes de l'interface graphique pour les bases de
 * donnees
 *
 * @author scarankle
 */
public class Controler {

    public Formation[] findAllFormation() {
        return fdao.findFormation(null, null);
    }
}
","// ControlerTest.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findAllFormation()} method.
*/
class ControlerTest {","// ControlerTest.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findAllFormation()} method.
*/
class ControlerTest {

	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* This test case is used to test the {@link Controler#findAllFormation()} method.
	* It checks if the method returns an array of formations.
	*/
	@Test
	void testFindAllFormation() {
		Controler c = new Controler();
		Formation[] f = c.findAllFormation();
		assertNotNull(f);
	}
}

// DaoFactory.java
package fr.unice.gfarce.dao;

import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.dao.JdbcDaoFactory;
import fr.unice.gfarce.dao.XmlDaoFactory;

/**
 * Fabrique de DAO
 *
 * @author scarankle
 */
public abstract class DaoFactory {

    /**
     * Enumeration des types de fabriques de DAO
     */
    public enum TypeFabrique {

        JDBC, XML
    };

    /**
     * Fabrique de DAO
     *
     * @param typeFabrique
     * @return
     * @throws DaoFactoryException
     */
    public static DaoFactory getDaoFactory(TypeFabrique typeFabrique) throws DaoFactoryException {
        switch (typeFabrique) {
            case JDBC:
                return new JdbcDaoFactory();
            case XML:
                return new XmlDaoFactory();
            default:
                throw new DaoFactoryException(""Type de fabrique inconnu"");
        }
    }

    /**
     * Retourne un DAO de formation
     *
     * @return
     */
    public abstract FormationDao getFormationDao();

    /**
     * Retourne un DAO d'identite
     *
     * @return
     */
    public abstract IdentiteDao getIdentiteDao();
}

// DaoFactoryException.java
package fr.unice.gfarce.dao;

/**
 * Exception levee par les DAO
 *
 * @author scarankle
 */
public class DaoFactoryException extends Exception {

    /**
     * Constructeur
     *
     * @param message
     */
    public DaoFactoryException(String message) {
        super(message);
    }
}

// Formation.java
package fr.unice.gfarce.identity;

import java.util.Calendar;
import java.util.Collection;

/**
 * Formation
 *
 * @author scarankle
 */
public class Formation {

    private String nom;
    private Calendar dateDebut;
    private Calendar dateFin;
    private Collection<Candidat> candidats;
    private Collection<RespFormation> responsables;

    /**
     * Constructeur
     *
     * @param nom
     * @param dateDebut
     * @param dateFin
     */
    public Formation(String nom, Calendar dateDebut, Calendar dateFin) {
        this.nom = nom;
        this.dateDebut = dateDebut;
        this.dateFin = dateFin;
    }

    /**
     * Retourne le nom de la formation
     *
     * @return
     */
    public String getNom() {
        return nom;
    }

    /**
     * Retourne la date de debut de la formation
     *
     * @return
     */
    public Calendar getDateDebut() {
        return dateDebut;
    }

    /**
     * Retourne la date de fin de la formation
     *
     * @return
     */
    public Calendar getDateFin() {
        return dateFin;
    }

    /**
     * Retourne les candidats de la formation
     *
     * @return
     */
    public Collection<Candidat> getCandidats() {
        return candidats;
    }

    /**
     * Retourne les responsables de la formation
     *
     * @return
     */
    public Collection<RespFormation> getResponsables() {
        return responsables;
    }
}

// FormationDao.java
package fr.unice.gfarce.dao;

import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.RespFormation;
import java.util.Calendar;

/**
 * Interface DAO de formation
 *
 * @author scarankle
 */
public interface FormationDao {

    /**
     * Retourne une formation
     *
     * @param nom
     * @param dateDebut
     * @return
     */
    public Formation findFormation(String nom, Calendar dateDebut);

    /**
     * Retourne toutes les formations
     *
     * @param nom
     * @param dateDebut
     * @return
     */
    public Formation[] findFormation(String nom, Calendar dateDebut);

    /**
     * Retourne les candidats d'une formation
     *
     * @param nom
     * @param dateDebut
     * @return
     */
    public Candidat[] findCandidats(String nom, Calendar dateDebut);

    /**
     * Retourne les responsables d'une formation
     *
     * @param nom
     * @param dateDebut
     * @return
     */
    public RespFormation[] findResponsables(String nom, Calendar dateDebut);

    /**
     * Ajoute une formation
     *
     * @param nom
     * @param dateDebut
     * @param dateFin
     */
    public void addFormation(String nom, Calendar dateDebut, Calendar dateFin);

    /**
     * Ajoute un candidat a une formation
     *
     * @param nom
     * @param dateDebut
     * @param candidat
     */
    public void addCandidat(String nom, Calendar dateDebut, Candidat candidat);

    /**
     * Ajoute un responsable a une formation
     *
     * @param nom
     * @param dateDebut
     * @param responsable
     */
    public void addResponsable(String nom, Calendar dateDebut, RespFormation responsable);

    /**
     * Supprime une formation
     *
     * @param nom
     * @param dateDebut
     */
    public void removeFormation(String nom, Calendar dateDebut);

    /**
     * Supprime un candidat d'une formation
     *
     * @param nom
     * @param dateDebut
     * @param candidat
     */
    public void removeCandidat(String nom, Calendar dateDebut, Candidat candidat);

    /**
     * Supprime un responsable d'une formation
     *
     * @param nom
     * @param dateDebut
     * @param responsable
     */
    public void removeResponsable(String nom, Calendar dateDebut, RespFormation responsable);
}

// Identite.java
package fr.unice.gfarce.identity;

import java.util.Calendar;

/**
 * Identite
 *
 * @author scarankle
 */
public class Identite {

    /**
     * Enumeration des types d'identite
     */
    public enum TypeIdentite {

        CANDIDAT, RESPONSABLE
    };

    private String nom;
    private String prenom;
    private Calendar dateNaissance;
    private TypeIdentite type;

    /**
     * Constructeur
     *
     * @param nom
     * @param prenom
     * @param dateNaissance
     * @param type
     */
    public Identite(String nom, String prenom, Calendar dateNaissance, TypeIdentite type) {
        this.nom = nom;
        this.prenom = prenom;
        this.dateNaissance = dateNaissance;
        this.type = type;
    }

    /**
     * Retourne le nom de l'identite
     *
     * @return
     */
    public String getNom() {
        return nom;
    }

    /**
     * Retourne le prenom de l'identite
     *
     * @return
     */
    public String getPrenom() {
        return prenom;
    }

    /**
     * Retourne la date de naissance de l'identite
     *
     * @return
     */
    public Calendar getDateNaissance() {
        return dateNaissance;
    }

    /**
     * Retourne le type de l'identite
     *
     * @return
     */
    public TypeIdentite getType() {
        return type;
    }
}

// IdentiteDao.java
package fr.unice.gfarce.dao;

import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import java.util.Calendar;

/**
 * Interface DAO d'identite
 *
 * @author scarankle
 */
public interface IdentiteDao {

    /**
     * Retourne une identite
     *
     * @param nom
     * @param prenom
     * @param dateNaissance
     * @param type
     * @return
     */
    public Identite findIdentite(String nom, String prenom, Calendar dateNaissance, TypeIdentite type);

    /**
     * Retourne toutes les identites
     *
     * @param nom
     * @param prenom
     * @param dateNaissance
     * @param type
     * @return
     */
    public Identite[] findIdentite(String nom, String prenom, Calendar dateNaissance, TypeIdentite type);

    /**
     * Ajoute une identite
     *
     * @param nom
     * @param prenom
     * @param dateNaissance
     * @param type
     */
    public void addIdentite(String nom, String prenom, Calendar dateNaissance, TypeIdentite type);

    /**
     * Supprime une identite
     *
     * @param nom
     * @param prenom
     * @param dateNaissance
     * @param type
     */
    public void removeIdentite(String nom, String prenom, Calendar dateNaissance, TypeIdentite type);
}

// JdbcDaoFactory.java
package fr.unice.gfarce.dao;

import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.dao.JdbcDaoFactory;
import fr.unice.gfarce.dao.XmlDaoFactory;

/**
 * Fabrique de DAO JDBC
 *
 * @author scarankle
 */
public class JdbcDaoFactory extends DaoFactory {

    /**
     * Retourne un DAO de formation
     *
     * @return
     */
    public FormationDao getFormationDao() {
        return new JdbcFormationDao();
    }

    /**
     * Retourne un DAO d'identite
     *
     * @return
     */
    public IdentiteDao getIdentiteDao() {
        return new JdbcIdentiteDao();
    }
}

// JdbcFormationDao.java
package fr.unice.gfarce.dao;

import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.RespFormation;
import java.util.Calendar;

/**
 * DAO de formation JDBC
 *
 * @author scarankle
 */
public class JdbcFormationDao implements FormationDao {

    /**
     * Retourne une formation
     *
     * @param nom
     * @param dateDebut
     * @return
     */
    public Formation findFormation(String nom, Calendar dateDebut) {
        throw new UnsupportedOperationException(""Not supported yet."");
    }

    /**
     * Retourne toutes les formations
     *
     * @param nom
     * @param dateDebut
     * @return
     */
    public Formation[] findFormation(String nom, Calendar dateDebut) {
        throw new UnsupportedOperationException(""Not supported yet."");
    }

    /**
     * Retourne les candidats d'une formation
     *
     * @param nom
     * @param dateDebut
     * @return
     */
    public Candidat[] findCandidats(String nom, Calendar dateDebut) {
        throw new UnsupportedOperationException(""Not supported yet."");
    }

    /**
     * Retourne les responsables d'une formation
     *
     * @param nom
     * @param dateDebut
     * @return
     */
    public RespFormation[] findResponsables(String nom, Calendar dateDebut) {
        throw new UnsupportedOperationException(""Not supported yet."");
    }

    /**
     * Ajoute une formation
     *
     * @param nom
     * @param dateDebut
     * @param dateFin
     */
    public void addFormation(String nom, Calendar dateDebut, Calendar dateFin) {
        throw new UnsupportedOperationException(""Not supported yet."");
    }

    /**
     * Ajoute un candidat a une formation
     *
     * @param nom
     * @param dateDebut
     * @param candidat
     */
    public void addCandidat(String nom, Calendar dateDebut, Candidat candidat) {
        throw new UnsupportedOperationException(""Not supported yet."");
    }

    /**
     * Ajoute un responsable a une formation
     *
     * @param nom
     * @param dateDebut
     * @param responsable
     */
    public void addResponsable(String nom, Calendar dateDebut, RespFormation responsable) {
        throw new UnsupportedOperationException(""Not supported yet."");
    }

    /**
     * Supprime une formation
     *
     * @param nom
     * @param dateDebut
     */
    public void removeFormation(String nom, Calendar dateDebut) {
        throw new UnsupportedOperationException(""Not supported yet."");
    }

    /**
     * Supprime un candidat d'une formation
     *
     * @param nom
     * @param dateDebut
     * @param candidat
     */
    public void removeCandidat(String nom, Calendar dateDebut, Candidat candidat) {
        throw new UnsupportedOperationException(""Not supported yet."");
    }

    /**
     * Supprime un responsable d'une formation
     *
     * @param nom
     * @param dateDebut
     * @param responsable
     */
    public void removeResponsable(String nom, Calendar dateDebut, RespFormation responsable) {
        throw new UnsupportedOperationException(""Not supported yet."");
    }
}

// JdbcIdentiteDao.java
package fr.unice.gfarce.dao;

import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import java.util.Calendar;

/**
 * DAO d'identite JDBC
 *
 * @author scarankle
 */
public class JdbcIdentiteDao implements IdentiteDao {

    /**
     * Retourne une identite
     *
     * @param nom
     * @param prenom
     * @param dateNaissance
     * @param type
     * @return
     */
    public Identite findIdentite(String nom, String prenom, Calendar dateNaissance, TypeIdentite type) {
        throw new UnsupportedOperationException(""Not supported yet."");
    }

    /**
     * Retourne toutes les identites
     *
     * @param nom
     * @param prenom
     *"
