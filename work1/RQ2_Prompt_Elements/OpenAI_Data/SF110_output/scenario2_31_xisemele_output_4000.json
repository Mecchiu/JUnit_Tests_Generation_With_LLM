[
{
    "id": "cmpl-6x5q8amN3Thijx2HNfkq9ATUBfimM",
    "object": "text_completion",
    "created": 1679541820,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t/**\n\t* Test case for {@link XisemeleFactory#newXisemele()} method.\n\t* It tests if the method returns a new instance of {@link Xisemele} every time it is called.\n\t*/\n\t@Test\n\tvoid testNewXisemele() {\n\t\tXisemele xisemele1 = XisemeleFactory.newXisemele();\n\t\tXisemele xisemele2 = XisemeleFactory.newXisemele();\n\t\tassertNotSame(xisemele1, xisemele2);\n\t}\n}\n\n// XisemeleImpl.java\npackage net.sf.xisemele.impl;\n\nimport java.io.File;\nimport java.io.InputStream;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.util.List;\nimport net.sf.xisemele.api.Editor;\nimport net.sf.xisemele.api.Formatter;\nimport net.sf.xisemele.api.FormatterProvider;\nimport net.sf.xisemele.api.Result;\nimport net.sf.xisemele.api.Xisemele;\nimport net.sf.xisemele.exception.FormatterNotFoundException;\nimport net.sf.xisemele.exception.XisemeleException;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.xml.sax.InputSource;\n\n/**\n * Implementa\u00e7\u00e3o de {@link Xisemele}.\n *\n * @author Carlos Eduardo Coral.\n */\npublic class XisemeleImpl implements Xisemele {\n\n    /**\n     * Inst\u00e2ncia de {@link Factory} que ser\u00e1 utilizada para criar inst\u00e2ncias de objetos necess\u00e1rios para a execu\u00e7\u00e3o das opera\u00e7\u00f5es de edi\u00e7\u00e3o.\n     */\n    private final Factory factory;\n    /**\n     * Inst\u00e2ncia de {@link FormatterProvider} que ser\u00e1 utilizada para obter inst\u00e2ncias de {@link Formatter}.\n     */\n    private final FormatterProvider formatterProvider;\n\n    /**\n     * Cria uma nova inst\u00e2ncia de {@link XisemeleImpl}.\n     *\n     * @param factory\n     *          inst\u00e2ncia de {@link Factory} que ser\u00e1 utilizada para criar inst\u00e2ncias de objetos necess\u00e1rios para a execu\u00e7\u00e3o das opera\u00e7\u00f5es de edi\u00e7\u00e3o.\n     * @param formatterProvider\n     *          inst\u00e2ncia de {@link FormatterProvider} que ser\u00e1 utilizada para obter inst\u00e2ncias de {@link Formatter}.\n     */\n    public XisemeleImpl(final Factory factory, final FormatterProvider formatterProvider) {\n        this.factory = factory;\n        this.formatterProvider = formatterProvider;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public Editor create(final String xml) {\n        return create(new StringReader(xml));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public Editor create(final File file) {\n        return create(factory.newFileInputStream(file));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public Editor create(final InputStream inputStream) {\n        return create(factory.newInputSource(inputStream));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public Editor create(final Reader reader) {\n        return create(factory.newInputSource(reader));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public Editor create(final InputSource inputSource) {\n        return create(factory.newDocument(inputSource));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public Editor create(final Document document) {\n        return create(factory.newNode(document));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public Editor create(final Node node) {\n        return factory.newEditor(node);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public Result result(final String xml) {\n        return result(new StringReader(xml));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public Result result(final File file) {\n        return result(factory.newFileInputStream(file));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public Result result(final InputStream inputStream) {\n        return result(factory.newInputSource(inputStream));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public Result result(final Reader reader) {\n        return result(factory.newInputSource(reader));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public Result result(final InputSource inputSource) {\n        return result(factory.newDocument(inputSource));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public Result result(final Document document) {\n        return result(factory.newNode(document));\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public Result result(final Node node) {\n        return factory.newResult(node);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String format(final String xml) {\n        return format(xml, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String format(final String xml, final String formatterName) {\n        return format(new StringReader(xml), formatterName);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String format(final File file) {\n        return format(file, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String format(final File file, final String formatterName) {\n        return format(factory.newFileInputStream(file), formatterName);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String format(final InputStream inputStream) {\n        return format(inputStream, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String format(final InputStream inputStream, final String formatterName) {\n        return format(factory.newInputSource(inputStream), formatterName);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String format(final Reader reader) {\n        return format(reader, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String format(final Reader reader, final String formatterName) {\n        return format(factory.newInputSource(reader), formatterName);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String format(final InputSource inputSource) {\n        return format(inputSource, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String format(final InputSource inputSource, final String formatterName) {\n        return format(factory.newDocument(inputSource), formatterName);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String format(final Document document) {\n        return format(document, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String format(final Document document, final String formatterName) {\n        return format(factory.newNode(document), formatterName);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String format(final Node node) {\n        return format(node, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String format(final Node node, final String formatterName) {\n        Formatter formatter = formatterProvider.getFormatter(formatterName);\n        if (formatter == null) {\n            throw new FormatterNotFoundException(formatterName);\n        }\n        return formatter.format(node);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void format(final String xml, final Writer writer) {\n        format(xml, writer, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void format(final String xml, final Writer writer, final String formatterName) {\n        format(new StringReader(xml), writer, formatterName);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void format(final File file, final Writer writer) {\n        format(file, writer, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void format(final File file, final Writer writer, final String formatterName) {\n        format(factory.newFileInputStream(file), writer, formatterName);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void format(final InputStream inputStream, final Writer writer) {\n        format(inputStream, writer, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void format(final InputStream inputStream, final Writer writer, final String formatterName) {\n        format(factory.newInputSource(inputStream), writer, formatterName);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void format(final Reader reader, final Writer writer) {\n        format(reader, writer, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void format(final Reader reader, final Writer writer, final String formatterName) {\n        format(factory.newInputSource(reader), writer, formatterName);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void format(final InputSource inputSource, final Writer writer) {\n        format(inputSource, writer, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void format(final InputSource inputSource, final Writer writer, final String formatterName) {\n        format(factory.newDocument(inputSource), writer, formatterName);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void format(final Document document, final Writer writer) {\n        format(document, writer, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void format(final Document document, final Writer writer, final String formatterName) {\n        format(factory.newNode(document), writer, formatterName);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void format(final Node node, final Writer writer) {\n        format(node, writer, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void format(final Node node, final Writer writer, final String formatterName) {\n        Formatter formatter = formatterProvider.getFormatter(formatterName);\n        if (formatter == null) {\n            throw new FormatterNotFoundException(formatterName);\n        }\n        formatter.format(node, writer);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String validate(final String xml) {\n        return validate(xml, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String validate(final String xml, final String schema) {\n        return validate(new StringReader(xml), schema);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String validate(final File file) {\n        return validate(file, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String validate(final File file, final String schema) {\n        return validate(factory.newFileInputStream(file), schema);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String validate(final InputStream inputStream) {\n        return validate(inputStream, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String validate(final InputStream inputStream, final String schema) {\n        return validate(factory.newInputSource(inputStream), schema);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String validate(final Reader reader) {\n        return validate(reader, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String validate(final Reader reader, final String schema) {\n        return validate(factory.newInputSource(reader), schema);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String validate(final InputSource inputSource) {\n        return validate(inputSource, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String validate(final InputSource inputSource, final String schema) {\n        return validate(factory.newDocument(inputSource), schema);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String validate(final Document document) {\n        return validate(document, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String validate(final Document document, final String schema) {\n        return validate(factory.newNode(document), schema);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String validate(final Node node) {\n        return validate(node, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public String validate(final Node node, final String schema) {\n        return factory.newValidator(schema).validate(node);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void validate(final String xml, final Writer writer) {\n        validate(xml, writer, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void validate(final String xml, final Writer writer, final String schema) {\n        validate(new StringReader(xml), writer, schema);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void validate(final File file, final Writer writer) {\n        validate(file, writer, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void validate(final File file, final Writer writer, final String schema) {\n        validate(factory.newFileInputStream(file), writer, schema);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void validate(final InputStream inputStream, final Writer writer) {\n        validate(inputStream, writer, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void validate(final InputStream inputStream, final Writer writer, final String schema) {\n        validate(factory.newInputSource(inputStream), writer, schema);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void validate(final Reader reader, final Writer writer) {\n        validate(reader, writer, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void validate(final Reader reader, final Writer writer, final String schema) {\n        validate(factory.newInputSource(reader), writer, schema);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void validate(final InputSource inputSource, final Writer writer) {\n        validate(inputSource, writer, null);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void validate(final InputSource inputSource, final Writer writer, final String schema) {\n        validate(factory.newDocument(inputSource), writer, schema);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void validate(final Document document, final Writer writer) {\n        validate(document, writer, null);\n    }\n\n    /**\n     * {",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 324,
        "completion_tokens": 4000,
        "total_tokens": 4324
    },
    "time_taken": 159.03523707389832,
    "prompt_id": "/EvoSuiteBenchmark/scenario2/31_xisemele/src/main/java/net/sf/xisemele/impl/XisemeleFactory.java",
    "original_code": "// XisemeleFactory.java\npackage net.sf.xisemele.impl;\n\nimport net.sf.xisemele.api.Xisemele;\n\n/**\n * F\u00e1brica para {@link Xisemele}.\n *\n * @author Carlos Eduardo Coral.\n */\npublic class XisemeleFactory {\n\n    /**\n     * Retorna uma nova inst\u00e2ncia de {@link Xisemele}.\n     *\n     * @return nova inst\u00e2ncia de {@link Xisemele}.\n     */\n    public static Xisemele newXisemele() {\n        FormatterProviderImpl formatterProvider = new FormatterProviderImpl();\n        return new XisemeleImpl(new FactoryImpl(formatterProvider), formatterProvider);\n    }\n}\n",
    "test_prompt": "// XisemeleFactoryTest.java\npackage net.sf.xisemele.impl;\n\nimport net.sf.xisemele.api.Xisemele;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XisemeleFactory}.\n* It contains ten unit test cases for the {@link XisemeleFactory#newXisemele()} method.\n*/\nclass XisemeleFactoryTest {"
}
]