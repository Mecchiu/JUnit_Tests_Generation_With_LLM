ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wjFgjqhgp3JA4QIC4ai4qe3zpqVB,/EvoSuiteBenchmark/scenario2/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo0.java,101.98424124717712,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public fields for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return string array of public fields
     */
    public String[] printFields() {
        Field[] f = c.getFields();
        length = f.length;
        String[] StringData = null;
        if (length > 0) {
            StringData = new String[length];
            String tempStr;
            Object obj = new Object();
            if (debug)
                System.out.println(""****************************************"");
            for (count = 0; count < length; count++) {
                try {
                    tempStr = f[count] + ""="" + f[count].get(obj);
                    StringData[count] = tempStr;
                    if (debug)
                        System.out.println(tempStr);
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                    tempStr = f[count] + ""= ILLEGAL ACCESS EXCEPTION, unable to load"";
                    StringData[count] = tempStr;
                } catch (IllegalArgumentException j) {
                    j.printStackTrace();
                    tempStr = f[count] + ""= ILLEGAL ARGUMENT EXCEPTION, unable to load"";
                    StringData[count] = tempStr;
                }
            }
        } else if (debug)
            System.out.println(""No public fields."");
        return StringData;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.
*/
class ClassInfoTest {

		/**
		* Test case for {@link ClassInfo#printFields()} method.
		* It tests the {@link ClassInfo#printFields()} method with a {@link JFrame} object.
		*/
		@Test
		void testPrintFieldsWithJFrame() {
				JFrame frame = new JFrame();
				ClassInfo classInfo = new ClassInfo(frame.getClass());
				String[] fields = classInfo.printFields();
				assertEquals(fields[0], ""public static final int javax.swing.JFrame.EXIT_ON_CLOSE=3"");
				assertEquals(fields[1], ""public static final int javax.swing.JFrame.HIDE_ON_CLOSE=1"");
				assertEquals(fields[2], ""public static final int javax.swing.JFrame.DO_NOTHING_ON_CLOSE=0"");
				assertEquals(fields[3], ""public static final int javax.swing.JFrame.DISPOSE_ON_CLOSE=2"");
		}
		
		/**
		* Test case for {@link ClassInfo#printFields()} method.
		* It tests the {@link ClassInfo#printFields()} method with a {@link JButton} object.
		*/
		@Test
		void testPrintFieldsWithJButton() {
				JButton button = new JButton();
				ClassInfo classInfo = new ClassInfo(button.getClass());
				String[] fields = classInfo.printFields();
				assertEquals(fields[0], ""public static final int javax.swing.JButton.CENTER=0"");
				assertEquals(fields[1], ""public static final int javax.swing.JButton.LEADING=3"");
				assertEquals(fields[2], ""public static final int javax.swing.JButton.LEFT=2"");
				assertEquals(fields[3], ""public static final int javax.swing.JButton.RIGHT=1"");
				assertEquals(fields[4], ""public static final int javax.swing.JButton.TRAILING=4"");
		}
		
		/**
		* Test case for {@link ClassInfo#printFields()} method.
		* It tests the {@link ClassInfo#printFields()} method with a {@link JLabel} object.
		*/
		@Test
		void testPrintFieldsWithJLabel() {
				JLabel label = new JLabel();
				ClassInfo classInfo = new ClassInfo(label.getClass());
				String[] fields = classInfo.printFields();
				assertEquals(fields[0], ""public static final int javax.swing.JLabel.LEADING=10"");
				assertEquals(fields[1], ""public static final int javax.swing.JLabel.LEFT=11"");
				assertEquals(fields[2], ""public static final int javax.swing.JLabel.RIGHT=12"");
				assertEquals(fields[3], ""public static final int javax.swing.JLabel.TRAILING=13"");
				assertEquals(fields[4], ""public static final int javax.swing.JLabel.CENTER=0"");
		}
		
		/**
		* Test case for {@link ClassInfo#printFields()} method.
		* It tests the {@link ClassInfo#printFields()} method with a {@link JTextField} object.
		*/
		@Test
		void testPrintFieldsWithJTextField() {
				JTextField textField = new JTextField();
				ClassInfo classInfo = new ClassInfo(textField.getClass());
				String[] fields = classInfo.printFields();
				assertEquals(fields[0], ""public static final int javax.swing.JTextField.LEADING=10"");
				assertEquals(fields[1], ""public static final int javax.swing.JTextField.LEFT=11"");
				assertEquals(fields[2], ""public static final int javax.swing.JTextField.RIGHT=12"");
				assertEquals(fields[3], ""public static final int javax.swing.JTextField.TRAILING=13"");
				assertEquals(fields[4], ""public static final int javax.swing.JTextField.CENTER=0"");
		}
		
		/**
		* Test case for {@link ClassInfo#printFields()} method.
		* It tests the {@link ClassInfo#printFields()} method with a {@link JTextArea} object.
		*/
		@Test
		void testPrintFieldsWithJTextArea() {
				JTextArea textArea = new JTextArea();
				ClassInfo classInfo = new ClassInfo(textArea.getClass());
				String[] fields = classInfo.printFields();
				assertEquals(fields[0], ""public static final int javax.swing.JTextArea.SCROLLBARS_BOTH=0"");
				assertEquals(fields[1], ""public static final int javax.swing.JTextArea.SCROLLBARS_HORIZONTAL_ONLY=1"");
				assertEquals(fields[2], ""public static final int javax.swing.JTextArea.SCROLLBARS_NONE=3"");
				assertEquals(fields[3], ""public static final int javax.swing.JTextArea.SCROLLBARS_VERTICAL_ONLY=2"");
		}
		
		/**
		* Test case for {@link ClassInfo#printFields()} method.
		* It tests the {@link ClassInfo#printFields()} method with a {@link JScrollPane} object.
		*/
		@Test
		void testPrintFieldsWithJScrollPane() {
				JScrollPane scrollPane = new JScrollPane();
				ClassInfo classInfo = new ClassInfo(scrollPane.getClass());
				String[] fields = classInfo.printFields();
				assertEquals(fields[0], ""public static final int javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS=22"");
				assertEquals(fields[1], ""public static final int javax.swing.JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED=21"");
				assertEquals(fields[2], ""public static final int javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER=20"");
				assertEquals(fields[3], ""public static final int javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS=32"");
				assertEquals(fields[4], ""public static final int javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED=31"");
				assertEquals(fields[5], ""public static final int javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER=30"");
		}
		
		/**
		* Test case for {@link ClassInfo#printFields()} method.
		* It tests the {@link ClassInfo#printFields()} method with a {@link JList} object.
		*/
		@Test
		void testPrintFieldsWithJList() {
				JList list = new JList();
				ClassInfo classInfo = new ClassInfo(list.getClass());
				String[] fields = class"
cmpl-6wjHK0EFQQqEJUoLY4kVh1RBy1fRN,/EvoSuiteBenchmark/scenario2/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo1.java,82.12456941604614,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return string array of public methods
     */
    public String[] printMethods() {
        if (debug)
            System.out.println(""****************************************"");
        String[] tempArray = null;
        if (cMethods != null) {
            tempArray = new String[cMethods.length];
            System.arraycopy(cMethods, 0, tempArray, 0, cMethods.length);
        }
        if (debug && tempArray == null)
            System.out.println(""No public methods."");
        else {
            printArray(tempArray);
        }
        return tempArray;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfoTest {

		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has no public methods.
		*/
		@Test
		void testPrintMethods1() {
				ClassInfo ci = new ClassInfo(String.class);
				String[] methods = ci.printMethods();
				assertEquals(0, methods.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has one public method.
		*/
		@Test
		void testPrintMethods2() {
				ClassInfo ci = new ClassInfo(JFrame.class);
				String[] methods = ci.printMethods();
				assertEquals(1, methods.length);
				assertEquals(""public void javax.swing.JFrame.setDefaultCloseOperation(int)"", methods[0]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has two public methods.
		*/
		@Test
		void testPrintMethods3() {
				ClassInfo ci = new ClassInfo(JButton.class);
				String[] methods = ci.printMethods();
				assertEquals(2, methods.length);
				assertEquals(""public void javax.swing.JButton.setText(java.lang.String)"", methods[0]);
				assertEquals(""public void javax.swing.JButton.setActionCommand(java.lang.String)"", methods[1]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has three public methods.
		*/
		@Test
		void testPrintMethods4() {
				ClassInfo ci = new ClassInfo(JLabel.class);
				String[] methods = ci.printMethods();
				assertEquals(3, methods.length);
				assertEquals(""public void javax.swing.JLabel.setText(java.lang.String)"", methods[0]);
				assertEquals(""public void javax.swing.JLabel.setIcon(javax.swing.Icon)"", methods[1]);
				assertEquals(""public void javax.swing.JLabel.setHorizontalAlignment(int)"", methods[2]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has four public methods.
		*/
		@Test
		void testPrintMethods5() {
				ClassInfo ci = new ClassInfo(JTextField.class);
				String[] methods = ci.printMethods();
				assertEquals(4, methods.length);
				assertEquals(""public void javax.swing.JTextField.setText(java.lang.String)"", methods[0]);
				assertEquals(""public void javax.swing.JTextField.setColumns(int)"", methods[1]);
				assertEquals(""public void javax.swing.JTextField.setHorizontalAlignment(int)"", methods[2]);
				assertEquals(""public void javax.swing.JTextField.setEditable(boolean)"", methods[3]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has five public methods.
		*/
		@Test
		void testPrintMethods6() {
				ClassInfo ci = new ClassInfo(JTextArea.class);
				String[] methods = ci.printMethods();
				assertEquals(5, methods.length);
				assertEquals(""public void javax.swing.JTextArea.setText(java.lang.String)"", methods[0]);
				assertEquals(""public void javax.swing.JTextArea.setColumns(int)"", methods[1]);
				assertEquals(""public void javax.swing.JTextArea.setRows(int)"", methods[2]);
				assertEquals(""public void javax.swing.JTextArea.setEditable(boolean)"", methods[3]);
				assertEquals(""public void javax.swing.JTextArea.setLineWrap(boolean)"", methods[4]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has six public methods.
		*/
		@Test
		void testPrintMethods7() {
				ClassInfo ci = new ClassInfo(JComboBox.class);
				String[] methods = ci.printMethods();
				assertEquals(6, methods.length);
				assertEquals(""public void javax.swing.JComboBox.setEditable(boolean)"", methods[0]);
				assertEquals(""public void javax.swing.JComboBox.setMaximumRowCount(int)"", methods[1]);
				assertEquals(""public void javax.swing.JComboBox.setSelectedItem(java.lang.Object)"", methods[2]);
				assertEquals(""public void javax.swing.JComboBox.setSelectedIndex(int)"", methods[3]);
				assertEquals(""public void javax.swing.JComboBox.setEnabled(boolean)"", methods[4]);
				assertEquals(""public void javax.swing.JComboBox.setLightWeightPopupEnabled(boolean)"", methods[5]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has seven public methods.
		*/
		@Test
		void testPrintMethods8() {
				ClassInfo ci = new ClassInfo(JCheckBox.class);
				String[] methods = ci.printMethods();
				assertEquals(7, methods.length);
				assertEquals(""public void javax.swing.JCheckBox.setText(java.lang.String)"", methods[0]);
				assertEquals(""public void javax.swing.JCheckBox.setSelected(boolean)"", methods[1]);
				assertEquals(""public void javax.swing.JCheckBox.setHorizontalAlignment(int)"", methods[2]);
				assertEquals(""public void javax.swing.JCheckBox.setHorizontalTextPosition(int)"", methods[3]);
				assertEquals(""public void javax.swing.JCheckBox.setVerticalTextPosition(int)"", methods[4]);
				assertEquals(""public void javax.swing.JCheckBox.setIcon(javax.swing.Icon)"", methods[5]);
				assertEquals(""public void javax.swing.JCheckBox.setSelectedIcon(javax.swing.Icon)"", methods[6]);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods()} method.
		* It tests the method with a class that has eight public methods.
		*/
		@Test
		void testPrintMethods9() {
				ClassInfo ci = new ClassInfo(JRadioButton.class);
				String[] methods = ci.printMethods();
				assertEquals(8, methods.length);
				assertEquals(""public void javax.swing.JRadioButton.setText(java.lang.String)"", methods[0]);
"
cmpl-6wjIel8TAArM0KFyqI4j1VtPe4n76,/EvoSuiteBenchmark/scenario2/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo2.java,52.824342489242554,stop,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public methods for
     * the class excluding inherited methods. The data is pulled from
     * the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @param param (not currently implemented) selects whether inherited
     *               objects are returned
     * @return string array of public methods
     */
    public String[] printMethods(int param) {
        if (cMethods == null)
            return null;
        if (debug)
            System.out.println(""****************************************"");
        String[] data = cMethods;
        StringList tempList = new StringList();
        for (int i = 0; i < cMethods.length; i++) {
            if (cMethods[i].indexOf(getClassName() + '.') != -1)
                tempList.add(cMethods[i]);
        }
        if (!tempList.isEmpty())
            data = tempList.toArray();
        else
            data = null;
        if (debug && data == null)
            System.out.println(""No public methods."");
        else {
            printArray(data);
        }
        return data;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfoTest {

		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has no public methods.
		*/
		@Test
		void testPrintMethods1() {
				ClassInfo ci = new ClassInfo(String.class);
				String[] data = ci.printMethods(0);
				assertNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods2() {
				ClassInfo ci = new ClassInfo(ClassInfo.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods3() {
				ClassInfo ci = new ClassInfo(ClassInfo.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods4() {
				ClassInfo ci = new ClassInfo(ClassInfo.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods5() {
				ClassInfo ci = new ClassInfo(ClassInfo.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods6() {
				ClassInfo ci = new ClassInfo(ClassInfo.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods7() {
				ClassInfo ci = new ClassInfo(ClassInfo.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods8() {
				ClassInfo ci = new ClassInfo(ClassInfo.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods9() {
				ClassInfo ci = new ClassInfo(ClassInfo.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printMethods(int)} method.
		* It tests the method with a class that has public methods.
		*/
		@Test
		void testPrintMethods10() {
				ClassInfo ci = new ClassInfo(ClassInfo.class);
				String[] data = ci.printMethods(0);
				assertNotNull(data);
		}
}"
cmpl-6wjJhsaTHi0Kjxp6QdN9zZckRpbPy,/EvoSuiteBenchmark/scenario2/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo3.java,83.68741750717163,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public constructors for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return string array of public constructors
     */
    public String[] printConstructors() {
        Constructor[] constr = c.getConstructors();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(constr);
        if (debug && data == null)
            System.out.println(""No public constructors."");
        else
            printArray(data);
        return data;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfoTest {

		/**
		 * Test case for {@link ClassInfo#printConstructors()} method.
		 * It tests the method with a class that has no public constructors.
		 */
		@Test
		void testPrintConstructors1() {
				ClassInfo ci = new ClassInfo(String.class);
				String[] data = ci.printConstructors();
				assertNull(data);
		}
		
		/**
		 * Test case for {@link ClassInfo#printConstructors()} method.
		 * It tests the method with a class that has one public constructor.
		 */
		@Test
		void testPrintConstructors2() {
				ClassInfo ci = new ClassInfo(JFrame.class);
				String[] data = ci.printConstructors();
				assertEquals(1, data.length);
				assertEquals(""public javax.swing.JFrame()"", data[0]);
		}
		
		/**
		 * Test case for {@link ClassInfo#printConstructors()} method.
		 * It tests the method with a class that has two public constructors.
		 */
		@Test
		void testPrintConstructors3() {
				ClassInfo ci = new ClassInfo(JButton.class);
				String[] data = ci.printConstructors();
				assertEquals(2, data.length);
				assertEquals(""public javax.swing.JButton()"", data[0]);
				assertEquals(""public javax.swing.JButton(java.lang.String)"", data[1]);
		}
		
		/**
		 * Test case for {@link ClassInfo#printConstructors()} method.
		 * It tests the method with a class that has three public constructors.
		 */
		@Test
		void testPrintConstructors4() {
				ClassInfo ci = new ClassInfo(JTextField.class);
				String[] data = ci.printConstructors();
				assertEquals(3, data.length);
				assertEquals(""public javax.swing.JTextField()"", data[0]);
				assertEquals(""public javax.swing.JTextField(java.lang.String)"", data[1]);
				assertEquals(""public javax.swing.JTextField(int)"", data[2]);
		}
		
		/**
		 * Test case for {@link ClassInfo#printConstructors()} method.
		 * It tests the method with a class that has four public constructors.
		 */
		@Test
		void testPrintConstructors5() {
				ClassInfo ci = new ClassInfo(JTextArea.class);
				String[] data = ci.printConstructors();
				assertEquals(4, data.length);
				assertEquals(""public javax.swing.JTextArea()"", data[0]);
				assertEquals(""public javax.swing.JTextArea(java.lang.String)"", data[1]);
				assertEquals(""public javax.swing.JTextArea(int,int)"", data[2]);
				assertEquals(""public javax.swing.JTextArea(java.lang.String,int,int)"", data[3]);
		}
		
		/**
		 * Test case for {@link ClassInfo#printConstructors()} method.
		 * It tests the method with a class that has five public constructors.
		 */
		@Test
		void testPrintConstructors6() {
				ClassInfo ci = new ClassInfo(JList.class);
				String[] data = ci.printConstructors();
				assertEquals(5, data.length);
				assertEquals(""public javax.swing.JList()"", data[0]);
				assertEquals(""public javax.swing.JList(java.lang.Object[])"", data[1]);
				assertEquals(""public javax.swing.JList(javax.swing.ListModel)"", data[2]);
				assertEquals(""public javax.swing.JList(java.util.Vector)"", data[3]);
				assertEquals(""public javax.swing.JList(java.util.List)"", data[4]);
		}
		
		/**
		 * Test case for {@link ClassInfo#printConstructors()} method.
		 * It tests the method with a class that has six public constructors.
		 */
		@Test
		void testPrintConstructors7() {
				ClassInfo ci = new ClassInfo(JComboBox.class);
				String[] data = ci.printConstructors();
				assertEquals(6, data.length);
				assertEquals(""public javax.swing.JComboBox()"", data[0]);
				assertEquals(""public javax.swing.JComboBox(java.lang.Object[])"", data[1]);
				assertEquals(""public javax.swing.JComboBox(javax.swing.ComboBoxModel)"", data[2]);
				assertEquals(""public javax.swing.JComboBox(java.util.Vector)"", data[3]);
				assertEquals(""public javax.swing.JComboBox(java.util.List)"", data[4]);
				assertEquals(""public javax.swing.JComboBox(javax.swing.ComboBoxModel,javax.swing.ComboBoxEditor)"", data[5]);
		}
		
		/**
		 * Test case for {@link ClassInfo#printConstructors()} method.
		 * It tests the method with a class that has seven public constructors.
		 */
		@Test
		void testPrintConstructors8() {
				ClassInfo ci = new ClassInfo(JCheckBox.class);
				String[] data = ci.printConstructors();
				assertEquals(7, data.length);
				assertEquals(""public javax.swing.JCheckBox()"", data[0]);
				assertEquals(""public javax.swing.JCheckBox(java.lang.String)"", data[1]);
				assertEquals(""public javax.swing.JCheckBox(java.lang.String,boolean)"", data[2]);
				assertEquals(""public javax.swing.JCheckBox(java.lang.String,javax.swing.Icon)"", data[3]);
				assertEquals(""public javax.swing.JCheckBox(java.lang.String,javax.swing.Icon,boolean)"", data[4]);
				assertEquals(""public javax.swing.JCheckBox(javax.swing.Icon)"", data[5]);
				assertEquals(""public javax.swing.JCheckBox(javax.swing.Icon,boolean)"", data[6]);
		}
		
		/**
		 * Test case for {@link ClassInfo#printConstructors()} method.
		 * It tests the method with a class that has eight public constructors.
		 */
		@Test
		void testPrintConstructors9() {
				ClassInfo ci = new ClassInfo(JRadioButton.class);
				String[] data = ci.printConstructors();
				assertEquals(8, data.length);
				assertEquals(""public javax.swing.JRadioButton()"", data[0]);
				assertEquals(""public javax.swing.JRadioButton(java.lang.String)"", data[1]);
				assertEquals(""public javax.swing.JRadioButton(java.lang."
cmpl-6wjL3W1SgaS5qolqJ30FumWaL3RCt,/EvoSuiteBenchmark/scenario2/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo4.java,68.8862612247467,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the interfaces for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return string array of interfaces
     */
    public String[] printInterfaces() {
        Class[] inter = c.getInterfaces();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(inter);
        if (c != java.lang.Object.class && !c.isInterface()) {
            Class superC = c.getSuperclass();
            TreeSet<String> hInterfaces = new TreeSet<String>();
            int i = 0;
            if (data != null)
                for (i = 0; i < data.length; i++) {
                    hInterfaces.add(data[i]);
                }
            while (superC != null && superC != java.lang.Object.class) {
                inter = superC.getInterfaces();
                if (debug)
                    System.out.println(""****************************************"");
                data = getData(inter);
                if (data != null)
                    for (i = 0; i < data.length; i++) {
                        hInterfaces.add(data[i]);
                    }
                superC = superC.getSuperclass();
            }
            if (hInterfaces.size() != 0) {
                data = new String[hInterfaces.size()];
                Iterator it = hInterfaces.iterator();
                i = 0;
                while (it.hasNext()) {
                    data[i] = (String) it.next();
                    i++;
                }
            }
        }
        if (debug && data == null)
            System.out.println(""No interfaces."");
        else
            printArray(data);
        return data;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printInterfaces()} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printInterfaces()} method.
*/
class ClassInfoTest {

		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has no interfaces.
		*/
		@Test
		void testPrintInterfaces1() {
				ClassInfo ci = new ClassInfo(String.class);
				String[] data = ci.printInterfaces();
				assertNull(data);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has one interface.
		*/
		@Test
		void testPrintInterfaces2() {
				ClassInfo ci = new ClassInfo(JButton.class);
				String[] data = ci.printInterfaces();
				assertEquals(1, data.length);
				assertEquals(""java.awt.image.ImageObserver"", data[0]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has two interfaces.
		*/
		@Test
		void testPrintInterfaces3() {
				ClassInfo ci = new ClassInfo(JTextField.class);
				String[] data = ci.printInterfaces();
				assertEquals(2, data.length);
				assertEquals(""java.awt.image.ImageObserver"", data[0]);
				assertEquals(""javax.accessibility.Accessible"", data[1]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has three interfaces.
		*/
		@Test
		void testPrintInterfaces4() {
				ClassInfo ci = new ClassInfo(JList.class);
				String[] data = ci.printInterfaces();
				assertEquals(3, data.length);
				assertEquals(""java.awt.image.ImageObserver"", data[0]);
				assertEquals(""javax.accessibility.Accessible"", data[1]);
				assertEquals(""javax.swing.Scrollable"", data[2]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has four interfaces.
		*/
		@Test
		void testPrintInterfaces5() {
				ClassInfo ci = new ClassInfo(JTable.class);
				String[] data = ci.printInterfaces();
				assertEquals(4, data.length);
				assertEquals(""java.awt.image.ImageObserver"", data[0]);
				assertEquals(""javax.accessibility.Accessible"", data[1]);
				assertEquals(""javax.swing.Scrollable"", data[2]);
				assertEquals(""javax.swing.table.TableModel"", data[3]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has five interfaces.
		*/
		@Test
		void testPrintInterfaces6() {
				ClassInfo ci = new ClassInfo(JTree.class);
				String[] data = ci.printInterfaces();
				assertEquals(5, data.length);
				assertEquals(""java.awt.image.ImageObserver"", data[0]);
				assertEquals(""javax.accessibility.Accessible"", data[1]);
				assertEquals(""javax.swing.Scrollable"", data[2]);
				assertEquals(""javax.swing.tree.TreeModel"", data[3]);
				assertEquals(""javax.swing.tree.TreeSelectionModel"", data[4]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has six interfaces.
		*/
		@Test
		void testPrintInterfaces7() {
				ClassInfo ci = new ClassInfo(JTabbedPane.class);
				String[] data = ci.printInterfaces();
				assertEquals(6, data.length);
				assertEquals(""java.awt.image.ImageObserver"", data[0]);
				assertEquals(""javax.accessibility.Accessible"", data[1]);
				assertEquals(""javax.swing.Scrollable"", data[2]);
				assertEquals(""javax.swing.SingleSelectionModel"", data[3]);
				assertEquals(""javax.swing.plaf.UIResource"", data[4]);
				assertEquals(""javax.swing.plaf.basic.BasicTabbedPaneUI.AccessibleJTabbedPane"", data[5]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has seven interfaces.
		*/
		@Test
		void testPrintInterfaces8() {
				ClassInfo ci = new ClassInfo(JToolBar.class);
				String[] data = ci.printInterfaces();
				assertEquals(7, data.length);
				assertEquals(""java.awt.image.ImageObserver"", data[0]);
				assertEquals(""javax.accessibility.Accessible"", data[1]);
				assertEquals(""javax.swing.Scrollable"", data[2]);
				assertEquals(""javax.swing.SwingConstants"", data[3]);
				assertEquals(""javax.swing.plaf.UIResource"", data[4]);
				assertEquals(""javax.swing.plaf.basic.BasicToolBarUI.AccessibleJToolBar"", data[5]);
				assertEquals(""javax.swing.plaf.basic.BasicToolBarUI.DockingListener"", data[6]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has eight interfaces.
		*/
		@Test
		void testPrintInterfaces9() {
				ClassInfo ci = new ClassInfo(JMenuBar.class);
				String[] data = ci.printInterfaces();
				assertEquals(8, data.length);
				assertEquals(""java.awt.image.ImageObserver"", data[0]);
				assertEquals(""javax.accessibility.Accessible"", data[1]);
				assertEquals(""javax.swing.MenuElement"", data[2]);
				assertEquals(""javax.swing.MenuSelectionManager"", data[3]);
				assertEquals(""javax.swing.plaf.UIResource"", data[4]);
				assertEquals(""javax.swing.plaf.basic.BasicMenuBarUI.AccessibleJMenuBar"", data[5]);
				assertEquals(""javax.swing.plaf.basic.BasicMenuBarUI.ChangeHandler"", data[6]);
				assertEquals(""javax.swing.plaf.basic.BasicMenuBarUI.MenuKeyHandler"", data[7]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		*"
cmpl-6wjMA8T4tLq6dWIQLycOmqxvrnDUF,/EvoSuiteBenchmark/scenario2/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo5.java,104.9654016494751,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Takes an array of Member objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param m array of Member objects
     * @return string array of names
     */
    public static String[] getData(Member[] m) {
        length = m.length;
        if (length == 0)
            return null;
        String[] StringData = new String[length];
        String tempStr;
        for (count = 0; count < m.length; count++) {
            tempStr = m[count].toString();
            StringData[count] = tempStr;
        }
        return StringData;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {

	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case tests the method with a null array.
	 * <p>
	 * This test case expects the method to return null.
	 */
	@Test
	void testGetDataNull() {
		Member[] m = null;
		String[] result = ClassInfo.getData(m);
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case tests the method with an empty array.
	 * <p>
	 * This test case expects the method to return null.
	 */
	@Test
	void testGetDataEmpty() {
		Member[] m = new Member[0];
		String[] result = ClassInfo.getData(m);
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case tests the method with an array of one element.
	 * <p>
	 * This test case expects the method to return an array of one element.
	 */
	@Test
	void testGetDataOneElement() {
		Member[] m = new Member[1];
		m[0] = new Member() {
			public String toString() {
				return ""test"";
			}
		};
		String[] result = ClassInfo.getData(m);
		assertEquals(1, result.length);
		assertEquals(""test"", result[0]);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case tests the method with an array of two elements.
	 * <p>
	 * This test case expects the method to return an array of two elements.
	 */
	@Test
	void testGetDataTwoElements() {
		Member[] m = new Member[2];
		m[0] = new Member() {
			public String toString() {
				return ""test1"";
			}
		};
		m[1] = new Member() {
			public String toString() {
				return ""test2"";
			}
		};
		String[] result = ClassInfo.getData(m);
		assertEquals(2, result.length);
		assertEquals(""test1"", result[0]);
		assertEquals(""test2"", result[1]);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case tests the method with an array of three elements.
	 * <p>
	 * This test case expects the method to return an array of three elements.
	 */
	@Test
	void testGetDataThreeElements() {
		Member[] m = new Member[3];
		m[0] = new Member() {
			public String toString() {
				return ""test1"";
			}
		};
		m[1] = new Member() {
			public String toString() {
				return ""test2"";
			}
		};
		m[2] = new Member() {
			public String toString() {
				return ""test3"";
			}
		};
		String[] result = ClassInfo.getData(m);
		assertEquals(3, result.length);
		assertEquals(""test1"", result[0]);
		assertEquals(""test2"", result[1]);
		assertEquals(""test3"", result[2]);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case tests the method with an array of four elements.
	 * <p>
	 * This test case expects the method to return an array of four elements.
	 */
	@Test
	void testGetDataFourElements() {
		Member[] m = new Member[4];
		m[0] = new Member() {
			public String toString() {
				return ""test1"";
			}
		};
		m[1] = new Member() {
			public String toString() {
				return ""test2"";
			}
		};
		m[2] = new Member() {
			public String toString() {
				return ""test3"";
			}
		};
		m[3] = new Member() {
			public String toString() {
				return ""test4"";
			}
		};
		String[] result = ClassInfo.getData(m);
		assertEquals(4, result.length);
		assertEquals(""test1"", result[0]);
		assertEquals(""test2"", result[1]);
		assertEquals(""test3"", result[2]);
		assertEquals(""test4"", result[3]);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case tests the method with an array of five elements.
	 * <p>
	 * This test case expects the method to return an array of five elements.
	 */
	@Test
	void testGetDataFiveElements() {
		Member[] m = new Member[5];
		m[0] = new Member() {
			public String toString() {
				return ""test1"";
			}
		};
		m[1] = new Member() {
			public String toString() {
				return ""test2"";
			}
		};
		m[2] = new Member() {
			public String toString() {
				return ""test3"";
			}
		};
		m[3] = new Member() {
			public String toString() {
				return ""test4"";
			}
		};
		m[4] = new Member() {
			public String toString() {
				return ""test5"";
			}
		};
		String[] result = ClassInfo.getData(m);
		assertEquals(5, result.length);
		assertEquals(""test1"", result[0]);
		assertEquals(""test2"", result[1]);
		assertEquals(""test3"", result[2]);
		assertEquals(""test4"", result[3]);
		assertEquals(""test5"", result[4]);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case tests the method with an array of six elements.
	 * <p>
	 * This test case expects the method to return an array of six elements.
	 */
	@Test
	void testGetDataSixElements() {
		Member[] m = new Member[6];
		m[0] = new Member() {
			public String toString() {
				return ""test1"";
			}
		};
		m[1] = new Member() {
			public String toString() {
				return ""test2"";
			}
		};
		m[2] = new Member() {
			public String toString() {
				return ""test3"";
			}
		};
		m[3] = new Member() {
			public String toString() {
				return ""test4"";
			}
		};
		m[4] = new Member() {
			public String toString"
cmpl-6wjNrYBqF5bJ5caB0xL1AonLcOKiv,/EvoSuiteBenchmark/scenario2/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo6.java,78.61733627319336,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Takes an array of Class objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param m array of Class objects
     * @return string array of names
     */
    public static String[] getData(Class[] m) {
        length = m.length;
        if (length == 0)
            return null;
        String[] StringData = new String[length];
        String tempStr;
        for (count = 0; count < m.length; count++) {
            tempStr = m[count].getName();
            StringData[count] = tempStr;
        }
        return StringData;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.
*/
class ClassInfoTest {

	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the method with a null array.
	 * <p>
	 * This test case expects the method to return null.
	 */
	@Test
	void testGetDataNull() {
		Class[] m = null;
		String[] result = ClassInfo.getData(m);
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the method with an empty array.
	 * <p>
	 * This test case expects the method to return null.
	 */
	@Test
	void testGetDataEmpty() {
		Class[] m = new Class[0];
		String[] result = ClassInfo.getData(m);
		assertNull(result);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the method with an array of one element.
	 * <p>
	 * This test case expects the method to return an array of one element.
	 */
	@Test
	void testGetDataOneElement() {
		Class[] m = new Class[1];
		m[0] = ClassInfo.class;
		String[] result = ClassInfo.getData(m);
		assertEquals(1, result.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the method with an array of two elements.
	 * <p>
	 * This test case expects the method to return an array of two elements.
	 */
	@Test
	void testGetDataTwoElements() {
		Class[] m = new Class[2];
		m[0] = ClassInfo.class;
		m[1] = ClassInfoTest.class;
		String[] result = ClassInfo.getData(m);
		assertEquals(2, result.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the method with an array of three elements.
	 * <p>
	 * This test case expects the method to return an array of three elements.
	 */
	@Test
	void testGetDataThreeElements() {
		Class[] m = new Class[3];
		m[0] = ClassInfo.class;
		m[1] = ClassInfoTest.class;
		m[2] = ClassInfo.class;
		String[] result = ClassInfo.getData(m);
		assertEquals(3, result.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the method with an array of four elements.
	 * <p>
	 * This test case expects the method to return an array of four elements.
	 */
	@Test
	void testGetDataFourElements() {
		Class[] m = new Class[4];
		m[0] = ClassInfo.class;
		m[1] = ClassInfoTest.class;
		m[2] = ClassInfo.class;
		m[3] = ClassInfoTest.class;
		String[] result = ClassInfo.getData(m);
		assertEquals(4, result.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the method with an array of five elements.
	 * <p>
	 * This test case expects the method to return an array of five elements.
	 */
	@Test
	void testGetDataFiveElements() {
		Class[] m = new Class[5];
		m[0] = ClassInfo.class;
		m[1] = ClassInfoTest.class;
		m[2] = ClassInfo.class;
		m[3] = ClassInfoTest.class;
		m[4] = ClassInfo.class;
		String[] result = ClassInfo.getData(m);
		assertEquals(5, result.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the method with an array of six elements.
	 * <p>
	 * This test case expects the method to return an array of six elements.
	 */
	@Test
	void testGetDataSixElements() {
		Class[] m = new Class[6];
		m[0] = ClassInfo.class;
		m[1] = ClassInfoTest.class;
		m[2] = ClassInfo.class;
		m[3] = ClassInfoTest.class;
		m[4] = ClassInfo.class;
		m[5] = ClassInfoTest.class;
		String[] result = ClassInfo.getData(m);
		assertEquals(6, result.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the method with an array of seven elements.
	 * <p>
	 * This test case expects the method to return an array of seven elements.
	 */
	@Test
	void testGetDataSevenElements() {
		Class[] m = new Class[7];
		m[0] = ClassInfo.class;
		m[1] = ClassInfoTest.class;
		m[2] = ClassInfo.class;
		m[3] = ClassInfoTest.class;
		m[4] = ClassInfo.class;
		m[5] = ClassInfoTest.class;
		m[6] = ClassInfo.class;
		String[] result = ClassInfo.getData(m);
		assertEquals(7, result.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the method with an array of eight elements.
	 * <p>
	 * This test case expects the method to return an array of eight elements.
	 */
	@Test
	void testGetDataEightElements() {
		Class[] m = new Class[8];
		m[0] = ClassInfo.class;
		m[1] = ClassInfoTest.class;
		m[2] = ClassInfo.class;
		m[3] = ClassInfoTest.class;
		m[4] = ClassInfo.class;
		m[5] = ClassInfoTest.class;
		m[6] = ClassInfo.class;
		m[7] = ClassInfoTest.class;
		String[] result = ClassInfo.getData(m);
		assertEquals(8, result.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case tests the method with an array of nine elements.
	 * <p>
	 * This test case expects the method to return an array of nine elements.
	 */
	@Test
	void testGetDataNineElements() {
		Class[] m = new Class[9];
		m[0] = ClassInfo.class;
		m[1] = ClassInfoTest.class;
		m[2] = ClassInfo.class;
		m[3] = ClassInfoTest.class;
		m[4] = ClassInfo.class;
		m[5] = ClassInfoTest.class;
		m[6] = ClassInfo.class;
		m[7] = ClassInfoTest.class;
		m[8] = ClassInfo.class;
		String[] result"
cmpl-6wjP7FMazDnBJejHnWBizokyPRJrd,/EvoSuiteBenchmark/scenario2/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo7.java,60.73606014251709,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, and selects methods that have that
     * fragment in them.
     * <p>
     * This method calls searchStrings().
     *
     * @param tempStr string fragment with which to search
     * @return string array of found methods
     */
    public String[] srchMethods(String tempStr) {
        if (tempStr == null)
            return null;
        fndMethods = StringTools.searchStrings(cMethods, tempStr);
        if (fndMethods != null) {
            String[] tempArray = new String[fndMethods.length];
            System.arraycopy(fndMethods, 0, tempArray, 0, fndMethods.length);
            return tempArray;
        }
        return null;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfoTest {

	/**
	* Test case for {@link ClassInfo#srchMethods(String)} method.
	* It tests the case when the input string is null.
	*/
	@Test
	void testSrchMethods_Null() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(null);
		assertNull(result);
	}
	
	/**
	* Test case for {@link ClassInfo#srchMethods(String)} method.
	* It tests the case when the input string is empty.
	*/
	@Test
	void testSrchMethods_Empty() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods("""");
		assertNull(result);
	}
	
	/**
	* Test case for {@link ClassInfo#srchMethods(String)} method.
	* It tests the case when the input string is not found.
	*/
	@Test
	void testSrchMethods_NotFound() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""not found"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link ClassInfo#srchMethods(String)} method.
	* It tests the case when the input string is found.
	*/
	@Test
	void testSrchMethods_Found() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""get"");
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link ClassInfo#srchMethods(String)} method.
	* It tests the case when the input string is found.
	*/
	@Test
	void testSrchMethods_Found2() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""set"");
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link ClassInfo#srchMethods(String)} method.
	* It tests the case when the input string is found.
	*/
	@Test
	void testSrchMethods_Found3() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""add"");
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link ClassInfo#srchMethods(String)} method.
	* It tests the case when the input string is found.
	*/
	@Test
	void testSrchMethods_Found4() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""remove"");
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link ClassInfo#srchMethods(String)} method.
	* It tests the case when the input string is found.
	*/
	@Test
	void testSrchMethods_Found5() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""is"");
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link ClassInfo#srchMethods(String)} method.
	* It tests the case when the input string is found.
	*/
	@Test
	void testSrchMethods_Found6() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""has"");
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link ClassInfo#srchMethods(String)} method.
	* It tests the case when the input string is found.
	*/
	@Test
	void testSrchMethods_Found7() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""can"");
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link ClassInfo#srchMethods(String)} method.
	* It tests the case when the input string is found.
	*/
	@Test
	void testSrchMethods_Found8() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""do"");
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link ClassInfo#srchMethods(String)} method.
	* It tests the case when the input string is found.
	*/
	@Test
	void testSrchMethods_Found9() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""to"");
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link ClassInfo#srchMethods(String)} method.
	* It tests the case when the input string is found.
	*/
	@Test
	void testSrchMethods_Found10() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""from"");
		assertNotNull(result);
	}
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfoTest {
		
	/**
	* Test case for {@link ClassInfo#srchMethods(String)} method.
	* It tests the case when the input string is null.
	*/
	@Test
	void testSrchMethods_Null() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(null);
		assertNull(result);
	}
	
	/**
	* Test case for {@link ClassInfo#srchMethods(String)} method.
	* It tests the case when the input string is empty.
	*/
	@Test
	void testSrchMethods_Empty() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods("""");
		assertNull(result);
	}
	
	/**
	* Test case for {@link ClassInfo#srchMethods(String)} method.
	* It tests the case when the input string is not found.
	*/
	@Test
	void testSrchMethods_NotFound() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""not found"");
		assertNull(result);
	}
	
	/**
	* Test case for {@link ClassInfo#srchMethods(String)} method.
	* It tests the case when the input string is found.
	*/
	@Test
	void testSrchMethods_Found() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""get"");
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link ClassInfo#srchMethods(String)} method.
	* It tests the case when the input string is found.
	*/
	@Test
	void testSrchMethods_Found2() {
		ClassInfo ci = new ClassInfo();
		String[] result = ci.srchMethods(""set"");
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link ClassInfo#srchMethods(String)} method.
	* It tests the case when the input string is found.
	*/
	@Test
	void testSrchMethods_Found3() {
		ClassInfo ci = new ClassInfo();
"
cmpl-6wjQ6NzRlLs9ogn7KpG4ZcppjEEA7,/EvoSuiteBenchmark/scenario2/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo8.java,6.318880081176758,stop,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Searches through found methods and returns method at given
     * position, uses anonymous inner class.  If no methods
     * have been searched for it returns null.
     *
     * @param pos position of found methods in array 0 is first.
     * @return MethodData object with information about method
     */
    public MethodData getFoundMethod(final int pos) {
        if (fndMethods == null || pos > fndMethods.length)
            return null;
        return new MethodData() {

            //check to make sure position isn't out of range
            String tempStr = fndMethods[pos], tempStr2;

            String className, methodName;

            int begin, end;

            Class methClass;

            {
                end = tempStr.indexOf("")"");
                tempStr = tempStr.substring(0, end + 1);
                begin = tempStr.lastIndexOf("" "");
                tempStr = tempStr.substring(begin + 1, tempStr.length());
                begin = tempStr.indexOf(""("");
                end = tempStr.lastIndexOf(""."", begin);
                className = tempStr.substring(0, end);
                methodName = tempStr.substring(end + 1, tempStr.length());
                if (debug)
                    System.out.println(""className="" + className);
                methClass = ClassInfo.tryClass(className);
                if (debug)
                    System.out.println(""methClass="" + methClass);
            }

            public String getMethPackage() {
                if (methClass == null)
                    return null;
                return methClass.getPackage() != null ? methClass.getPackage().getName() : null;
            }

            public String getMethClass() {
                if (methClass == null)
                    return null;
                return methClass.getName();
            }

            public String getMethName() {
                return methodName;
            }
        };
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfoTest {

		@Test
		void testGetFoundMethod() {
				ClassInfo classInfo = new ClassInfo();
				MethodData methodData = classInfo.getFoundMethod(0);
				assertEquals(""java.lang.String"", methodData.getMethClass());
				assertEquals(""java.lang"", methodData.getMethPackage());
				assertEquals(""toString"", methodData.getMethName());
		}
}"
