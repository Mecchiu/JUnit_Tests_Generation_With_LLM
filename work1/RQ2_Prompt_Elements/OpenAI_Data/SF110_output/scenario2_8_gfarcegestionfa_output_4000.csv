ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6x0Nfoc03Xgf6hlOx8KvTOqy56jlL,/EvoSuiteBenchmark/scenario2/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale0.java,74.97249221801758,stop,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    /**
     * date de la formation
     *
     * @return la date de la formation sous forme de String
     */
    public String dateLimForm() {
        String date = comboBoxJourDLM.getSelectedItem().toString() + comboBoxMoisDLM.getSelectedItem().toString() + comboBoxAnneeDLM.getSelectedItem().toString();
        return date;
    }
}
","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipaleTest {","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipaleTest {

	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""01/01/2000""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""01/01/2000""</li>
	* </ul>
	*/
	@Test
	public void testDateLimForm1() {
		// Given
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDLM.setSelectedItem(""01"");
		fenetrePrincipale.comboBoxMoisDLM.setSelectedItem(""01"");
		fenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(""2000"");
		// When
		String date = fenetrePrincipale.dateLimForm();
		// Then
		assertEquals(""01/01/2000"", date);
	}
		
	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""02/02/2001""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""02/02/2001""</li>
	* </ul>
	*/
	@Test
	public void testDateLimForm2() {
		// Given
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDLM.setSelectedItem(""02"");
		fenetrePrincipale.comboBoxMoisDLM.setSelectedItem(""02"");
		fenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(""2001"");
		// When
		String date = fenetrePrincipale.dateLimForm();
		// Then
		assertEquals(""02/02/2001"", date);
	}
		
	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""03/03/2002""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""03/03/2002""</li>
	* </ul>
	*/
	@Test
	public void testDateLimForm3() {
		// Given
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDLM.setSelectedItem(""03"");
		fenetrePrincipale.comboBoxMoisDLM.setSelectedItem(""03"");
		fenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(""2002"");
		// When
		String date = fenetrePrincipale.dateLimForm();
		// Then
		assertEquals(""03/03/2002"", date);
	}
		
	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""04/04/2003""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""04/04/2003""</li>
	* </ul>
	*/
	@Test
	public void testDateLimForm4() {
		// Given
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDLM.setSelectedItem(""04"");
		fenetrePrincipale.comboBoxMoisDLM.setSelectedItem(""04"");
		fenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(""2003"");
		// When
		String date = fenetrePrincipale.dateLimForm();
		// Then
		assertEquals(""04/04/2003"", date);
	}
		
	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""05/05/2004""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""05/05/2004""</li>
	* </ul>
	*/
	@Test
	public void testDateLimForm5() {
		// Given
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDLM.setSelectedItem(""05"");
		fenetrePrincipale.comboBoxMoisDLM.setSelectedItem(""05"");
		fenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(""2004"");
		// When
		String date = fenetrePrincipale.dateLimForm();
		// Then
		assertEquals(""05/05/2004"", date);
	}
		
	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""06/06/2005""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""06/06/2005""</li>
	* </ul>
	*/
	@Test
	public void testDateLimForm6() {
		// Given
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDLM.setSelectedItem(""06"");
		fenetrePrincipale.comboBoxMoisDLM.setSelectedItem(""06"");
		fenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(""2005"");
		// When
		String date = fenetrePrincipale.dateLimForm();
		// Then
		assertEquals(""06/06/2005"", date);
	}
		
	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""07/07/2006""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""07/07/2006""</li>
	* </ul>
	*/
	@Test
	public void testDateLimForm7() {
		// Given
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDLM.setSelectedItem(""07"");
		fenetrePrincipale.comboBoxMoisDLM.setSelectedItem(""07"");
		fenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(""2006"");
		// When
		String date = fenetrePrincipale.dateLimForm();
		// Then
		assertEquals(""07/07/2006"", date);
	}
		
	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""08/08/2007""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""08/08/2007""</li>
	* </ul>
	*/
	@Test
	public void testDateLimForm8() {
		// Given
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDLM.setSelectedItem(""08"");
		fenetrePrincipale.comboBoxMoisDLM.setSelectedItem(""08"");
		fenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(""2007"");
		// When
		String date = fenetrePrincipale.dateLimForm();
		// Then
		assertEquals(""08/08/2007"", date);
	}
		
	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""09/09/2008""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""09/09/2008""</li>
	* </ul>
	*/
	@Test
	public void testDateLimForm9() {
		// Given
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDLM.setSelectedItem(""09"");
		fenetrePrincipale.comboBoxMoisDLM.setSelectedItem(""09"");
		fenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(""2008"");
		// When
		String date = fenetrePrincipale.dateLimForm();
		// Then
		assertEquals(""09/09/2008"", date);
	}
		
	/**
	* Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""10/10/2009""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""10/10/2009""</li>
	* </ul>
	*/
	@Test
	public void testDateLimForm10() {
		// Given
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		fenetrePrincipale.comboBoxJourDLM.setSelectedItem(""10"");
		fenetrePrincipale.comboBoxMoisDLM.setSelectedItem(""10"");
		fenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(""2009"");
		// When
		String date = fenetrePrincipale.dateLimForm();
		// Then
		assertEquals(""10/10/2009"", date);
	}
		
}"
cmpl-6x0Os0O6e93iCTEJnUA4BQJlgeTXS,/EvoSuiteBenchmark/scenario2/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale1.java,80.78363537788391,stop,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    /**
     * date de naissance
     *
     * @return la date de naissance sous form de String
     */
    public String dateDeNaiss() {
        String date = comboBoxJourDDNEtu.getSelectedItem().toString() + comboBoxMoisDDNEtu.getSelectedItem().toString() + comboBoxAnneeDDNEtu.getSelectedItem().toString();
        return date;
    }
}
","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipaleTest {","// FenetrePrincipaleTest.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipaleTest {

	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""01/01/2000""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""01/01/2000""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss1() {
		// initialize the input values for the method under test
		String date = ""01/01/2000"";
		// initialize the class to test
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		// invoke the method under test
		String result = fenetrePrincipale.dateDeNaiss();
		// assert the return value
		assertEquals(date, result);
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""02/02/2002""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""02/02/2002""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss2() {
		// initialize the input values for the method under test
		String date = ""02/02/2002"";
		// initialize the class to test
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		// invoke the method under test
		String result = fenetrePrincipale.dateDeNaiss();
		// assert the return value
		assertEquals(date, result);
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""03/03/2003""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""03/03/2003""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss3() {
		// initialize the input values for the method under test
		String date = ""03/03/2003"";
		// initialize the class to test
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		// invoke the method under test
		String result = fenetrePrincipale.dateDeNaiss();
		// assert the return value
		assertEquals(date, result);
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""04/04/2004""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""04/04/2004""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss4() {
		// initialize the input values for the method under test
		String date = ""04/04/2004"";
		// initialize the class to test
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		// invoke the method under test
		String result = fenetrePrincipale.dateDeNaiss();
		// assert the return value
		assertEquals(date, result);
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""05/05/2005""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""05/05/2005""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss5() {
		// initialize the input values for the method under test
		String date = ""05/05/2005"";
		// initialize the class to test
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		// invoke the method under test
		String result = fenetrePrincipale.dateDeNaiss();
		// assert the return value
		assertEquals(date, result);
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""06/06/2006""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""06/06/2006""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss6() {
		// initialize the input values for the method under test
		String date = ""06/06/2006"";
		// initialize the class to test
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		// invoke the method under test
		String result = fenetrePrincipale.dateDeNaiss();
		// assert the return value
		assertEquals(date, result);
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""07/07/2007""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""07/07/2007""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss7() {
		// initialize the input values for the method under test
		String date = ""07/07/2007"";
		// initialize the class to test
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		// invoke the method under test
		String result = fenetrePrincipale.dateDeNaiss();
		// assert the return value
		assertEquals(date, result);
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""08/08/2008""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""08/08/2008""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss8() {
		// initialize the input values for the method under test
		String date = ""08/08/2008"";
		// initialize the class to test
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		// invoke the method under test
		String result = fenetrePrincipale.dateDeNaiss();
		// assert the return value
		assertEquals(date, result);
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""09/09/2009""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""09/09/2009""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss9() {
		// initialize the input values for the method under test
		String date = ""09/09/2009"";
		// initialize the class to test
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		// invoke the method under test
		String result = fenetrePrincipale.dateDeNaiss();
		// assert the return value
		assertEquals(date, result);
	}
	
	/**
	* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.
	* It tests the method with the following input:
	* <ul>
	* <li>date = ""10/10/2010""</li>
	* </ul>
	* and the expected output:
	* <ul>
	* <li>date = ""10/10/2010""</li>
	* </ul>
	*/
	@Test
	public void testDateDeNaiss10() {
		// initialize the input values for the method under test
		String date = ""10/10/2010"";
		// initialize the class to test
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale();
		// invoke the method under test
		String result = fenetrePrincipale.dateDeNaiss();
		// assert the return value
		assertEquals(date, result);
	}
	
}"
cmpl-6x0QBfl255CYXuyUAzzE9Rhd9LCv3,/EvoSuiteBenchmark/scenario2/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage0.java,156.17329001426697,length,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     *
     * @return TableStockage
     */
    public TableStockage ajouterLigne() {
        if (nbColonnes > 0) {
            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)
            this.nbLignes++;
            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
            /* on recopie les noms des colonnes */
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j));
            }
            /* on recopie les valeurs dans les colonnes */
            for (int i = 0; i < nbLignes - 2; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i, j);
                }
            }
            for (int j = 0; j < nbColonnes; j++) {
                if (ts.getColumnClass(j).equals(String.class)) {
                    // la derniere ligne sera a null
                    tableS.setValueAt("""", nbLignes - 2, j);
                } else if (ts.getColumnClass(j).equals(Double.class)) {
                    tableS.setValueAt(new Double(""0""), nbLignes - 2, j);
                } else
                    // sauf si de la classe Boolean
                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);
            }
            return tableS;
        } else {
            // pas de colonne pour construire une ligne
            JOptionPane.showMessageDialog(null, ""PAS DE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockageTest {","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockageTest {

	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has no column.
	*/
	@Test
	void testAjouterLigne1() {
		TableStockage ts = new TableStockage(0, 0);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts, ts2);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has one column.
	*/
	@Test
	void testAjouterLigne2() {
		TableStockage ts = new TableStockage(0, 1);
		ts.setColumnName(0, ""colonne1"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getValueAt(0, 0), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has two columns.
	*/
	@Test
	void testAjouterLigne3() {
		TableStockage ts = new TableStockage(0, 2);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has three columns.
	*/
	@Test
	void testAjouterLigne4() {
		TableStockage ts = new TableStockage(0, 3);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
		assertEquals(ts2.getValueAt(0, 2), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has four columns.
	*/
	@Test
	void testAjouterLigne5() {
		TableStockage ts = new TableStockage(0, 4);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ts.setColumnName(3, ""colonne4"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getColumnName(3), ""colonne4"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
		assertEquals(ts2.getValueAt(0, 2), """");
		assertEquals(ts2.getValueAt(0, 3), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has five columns.
	*/
	@Test
	void testAjouterLigne6() {
		TableStockage ts = new TableStockage(0, 5);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ts.setColumnName(3, ""colonne4"");
		ts.setColumnName(4, ""colonne5"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getColumnName(3), ""colonne4"");
		assertEquals(ts2.getColumnName(4), ""colonne5"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
		assertEquals(ts2.getValueAt(0, 2), """");
		assertEquals(ts2.getValueAt(0, 3), """");
		assertEquals(ts2.getValueAt(0, 4), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has six columns.
	*/
	@Test
	void testAjouterLigne7() {
		TableStockage ts = new TableStockage(0, 6);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ts.setColumnName(3, ""colonne4"");
		ts.setColumnName(4, ""colonne5"");
		ts.setColumnName(5, ""colonne6"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getColumnName(3), ""colonne4"");
		assertEquals(ts2.getColumnName(4), ""colonne5"");
		assertEquals(ts2.getColumnName(5), ""colonne6"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
		assertEquals(ts2.getValueAt(0, 2), """");
		assertEquals(ts2.getValueAt(0, 3), """");
		assertEquals(ts2.getValueAt(0, 4), """");
		assertEquals(ts2.getValueAt(0, 5), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has seven columns.
	*/
	@Test
	void testAjouterLigne8() {
		TableStockage ts = new TableStockage(0, 7);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ts.setColumnName(3, ""colonne4"");
		ts.setColumnName(4, ""colonne5"");
		ts.setColumnName(5, ""colonne6"");
		ts.setColumnName(6, ""colonne7"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getColumnName(3), ""colonne4"");
		assertEquals(ts2.getColumnName(4), ""colonne5"");
		assertEquals(ts2.getColumnName(5), ""colonne6"");
		assertEquals(ts2.getColumnName(6), ""colonne7"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
		assertEquals(ts2.getValueAt(0, 2), """");
		assertEquals(ts2.getValueAt(0, 3), """");
		assertEquals(ts2.getValueAt(0, 4), """");
		assertEquals(ts2.getValueAt(0, 5), """");
		assertEquals(ts2.getValueAt(0, 6), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has eight columns.
	*/
	@Test
	void testAjouterLigne9() {
		TableStockage ts = new TableStockage(0, 8);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ts.setColumnName(3, ""colonne4"");
		ts.setColumnName(4, ""colonne5"");
		ts.setColumnName(5, ""colonne6"");
		ts.setColumnName(6, ""colonne7"");
		ts.setColumnName(7, ""colonne8"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getColumnName(3), ""colonne4"");
		assertEquals(ts2.getColumnName(4), ""colonne5"");
		assertEquals(ts2.getColumnName(5), ""colonne6"");
		assertEquals(ts2.getColumnName(6), ""colonne7"");
		assertEquals(ts2.getColumnName(7), ""colonne8"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
		assertEquals(ts2.getValueAt(0, 2), """");
		assertEquals(ts2.getValueAt(0, 3), """");
		assertEquals(ts2.getValueAt(0, 4), """");
		assertEquals(ts2.getValueAt(0, 5), """");
		assertEquals(ts2.getValueAt(0, 6), """");
		assertEquals(ts2.getValueAt(0, 7), """");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has nine columns.
	*/
	@Test
	void testAjouterLigne10() {
		TableStockage ts = new TableStockage(0, 9);
		ts.setColumnName(0, ""colonne1"");
		ts.setColumnName(1, ""colonne2"");
		ts.setColumnName(2, ""colonne3"");
		ts.setColumnName(3, ""colonne4"");
		ts.setColumnName(4, ""colonne5"");
		ts.setColumnName(5, ""colonne6"");
		ts.setColumnName(6, ""colonne7"");
		ts.setColumnName(7, ""colonne8"");
		ts.setColumnName(8, ""colonne9"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getColumnName(0), ""colonne1"");
		assertEquals(ts2.getColumnName(1), ""colonne2"");
		assertEquals(ts2.getColumnName(2), ""colonne3"");
		assertEquals(ts2.getColumnName(3), ""colonne4"");
		assertEquals(ts2.getColumnName(4), ""colonne5"");
		assertEquals(ts2.getColumnName(5), ""colonne6"");
		assertEquals(ts2.getColumnName(6), ""colonne7"");
		assertEquals(ts2.getColumnName(7), ""colonne8"");
		assertEquals(ts2.getColumnName(8), ""colonne9"");
		assertEquals(ts2.getValueAt(0, 0), """");
		assertEquals(ts2.getValueAt(0, 1), """");
		assertEquals(ts2.getValueAt(0, 2), """");
		assertEquals(ts2.getValueAt(0, 3), """");
		assertEquals(ts2.getValueAt(0, 4), """");
		assertEquals(ts2.getValueAt(0, 5), """");
		assertEquals(ts2.getValueAt(0, 6), """");
		assertEquals(ts2.getValueAt(0, 7), """");
		assertEquals(ts2.getValueAt(0, 8), """");
	}
}

// TableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;

public class TableStockage extends AbstractTableModel {

    private String[] columnNames;
    private Object[][] data;

    public TableStockage(int nbLignes, int nbColonnes) {
        data = new Object[nbLignes][nbColonnes];
        columnNames = new String[nbColonnes];
    }

    public int getColumnCount() {
        return columnNames.length;
    }

    public int getRowCount() {
        return data.length;
    }

    public String getColumnName(int col) {
        return columnNames[col];
    }

    public Object getValueAt(int row, int col) {
        return data[row][col];
    }

    public Class getColumnClass(int c) {
        return getValueAt(0, c)."
cmpl-6x0ShAlCcGUCuZSnEWqFKFrq9DEDG,/EvoSuiteBenchmark/scenario2/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage1.java,125.7812728881836,length,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     *
     * @return TableStockage
     */
    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }
}
","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockageTest {","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockageTest {

	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object.
	*/
	@Test
	void testColonneMail() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertTrue(tableS instanceof TableStockage);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of columns.
	*/
	@Test
	void testColonneMail2() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(tableS.getColumnCount(), nbColonnes + 1);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of rows.
	*/
	@Test
	void testColonneMail3() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(tableS.getRowCount(), nbLignes);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of columns.
	*/
	@Test
	void testColonneMail4() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(tableS.getColumnCount(), nbColonnes + 1);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of rows.
	*/
	@Test
	void testColonneMail5() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(tableS.getRowCount(), nbLignes);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of columns.
	*/
	@Test
	void testColonneMail6() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(tableS.getColumnCount(), nbColonnes + 1);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of rows.
	*/
	@Test
	void testColonneMail7() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(tableS.getRowCount(), nbLignes);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of columns.
	*/
	@Test
	void testColonneMail8() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(tableS.getColumnCount(), nbColonnes + 1);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of rows.
	*/
	@Test
	void testColonneMail9() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(tableS.getRowCount(), nbLignes);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of columns.
	*/
	@Test
	void testColonneMail10() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(tableS.getColumnCount(), nbColonnes + 1);
	}
}

// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     *
     * @return TableStockage
     */
    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }
}

// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockageTest {
		
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object.
	*/
	@Test
	void testColonneMail() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertTrue(tableS instanceof TableStockage);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of columns.
	*/
	@Test
	void testColonneMail2() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(tableS.getColumnCount(), nbColonnes + 1);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of rows.
	*/
	@Test
	void testColonneMail3() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(tableS.getRowCount(), nbLignes);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of columns.
	*/
	@Test
	void testColonneMail4() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(tableS.getColumnCount(), nbColonnes + 1);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of rows.
	*/
	@Test
	void testColonneMail5() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(tableS.getRowCount(), nbLignes);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of columns.
	*/
	@Test
	void testColonneMail6() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(tableS.getColumnCount(), nbColonnes + 1);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of rows.
	*/
	@Test
	void testColonneMail7() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(tableS.getRowCount(), nbLignes);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of columns.
	*/
	@Test
	void testColonneMail8() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(tableS.getColumnCount(), nbColonnes + 1);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of rows.
	*/
	@Test
	void testColonneMail9() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(tableS.getRowCount(), nbLignes);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object with the right number of columns.
	*/
	@Test
	void testColonneMail10() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertEquals(tableS.getColumnCount(), nbColonnes + 1);
	}
}

// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     *
     * @return TableStockage
     */
    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }
}

// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockageTest {
		
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link TableStockage} object.
	*/
	@Test
	void testColonneMail() {
		ModifTableStockage mt = new ModifTableStockage(ts);
		TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
		tableS = mt.colonneMail();
		assertTrue(tableS instanceof TableStockage);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests if the method returns a {@link Table"
cmpl-6x0Uj7siT8W5z2O3n5yZo46f6DO1f,/EvoSuiteBenchmark/scenario2/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage2.java,143.10644006729126,length,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     *
     * @return TableStockage
     */
    public TableStockage selectMail() {
        int j = 0;
        Boolean bool;
        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(""Envoyer E-Mail a:""))) {
            // renverra la position de la colonne E-Mail si elle existe
            j++;
        }
        if (j != this.nbColonnes) {
            // la colonne E-Mail (de type Booleen) existe bien
            int newNbLignes = 0;
            for (int i = 0; i < nbLignes - 1; i++) {
                bool = (Boolean) ts.getValueAt(i, j);
                if (bool) {
                    newNbLignes++;
                }
            }
            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);
            int k = 0;
            for (int ind = 0; ind < nbColonnes; ind++) {
                tableS.setColumnName(ind, ts.getColumnName(ind));
            }
            for (int row = 0; row < nbLignes - 1; row++) {
                bool = (Boolean) ts.getValueAt(row, j);
                if (bool) {
                    for (int column = 0; column < nbColonnes; column++) {
                        tableS.setValueAt(ts.getValueAt(row, column), k, column);
                        bool = false;
                    }
                    k++;
                }
            }
            return tableS;
        } else {
            JOptionPane.showMessageDialog(null, ""Le mail sera envoye a toute la liste"", ""Information"", JOptionPane.INFORMATION_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockageTest {","// ModifTableStockageTest.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockageTest {

	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* The test case is successful if the method returns a {@link TableStockage} object.
	*/
	@Test
	void testSelectMail() {
		TableStockage ts = new TableStockage(2, 2);
		ts.setColumnName(0, ""Envoyer E-Mail a:"");
		ts.setColumnName(1, ""Nom"");
		ts.setValueAt(true, 0, 0);
		ts.setValueAt(""Dupont"", 0, 1);
		ts.setValueAt(false, 1, 0);
		ts.setValueAt(""Durand"", 1, 1);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts2.getValueAt(0, 0), true);
		assertEquals(ts2.getValueAt(0, 1), ""Dupont"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* The test case is successful if the method returns a {@link TableStockage} object.
	*/
	@Test
	void testSelectMail2() {
		TableStockage ts = new TableStockage(2, 2);
		ts.setColumnName(0, ""Envoyer E-Mail a:"");
		ts.setColumnName(1, ""Nom"");
		ts.setValueAt(true, 0, 0);
		ts.setValueAt(""Dupont"", 0, 1);
		ts.setValueAt(false, 1, 0);
		ts.setValueAt(""Durand"", 1, 1);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts2.getValueAt(0, 0), true);
		assertEquals(ts2.getValueAt(0, 1), ""Dupont"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* The test case is successful if the method returns a {@link TableStockage} object.
	*/
	@Test
	void testSelectMail3() {
		TableStockage ts = new TableStockage(2, 2);
		ts.setColumnName(0, ""Envoyer E-Mail a:"");
		ts.setColumnName(1, ""Nom"");
		ts.setValueAt(true, 0, 0);
		ts.setValueAt(""Dupont"", 0, 1);
		ts.setValueAt(false, 1, 0);
		ts.setValueAt(""Durand"", 1, 1);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts2.getValueAt(0, 0), true);
		assertEquals(ts2.getValueAt(0, 1), ""Dupont"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* The test case is successful if the method returns a {@link TableStockage} object.
	*/
	@Test
	void testSelectMail4() {
		TableStockage ts = new TableStockage(2, 2);
		ts.setColumnName(0, ""Envoyer E-Mail a:"");
		ts.setColumnName(1, ""Nom"");
		ts.setValueAt(true, 0, 0);
		ts.setValueAt(""Dupont"", 0, 1);
		ts.setValueAt(false, 1, 0);
		ts.setValueAt(""Durand"", 1, 1);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts2.getValueAt(0, 0), true);
		assertEquals(ts2.getValueAt(0, 1), ""Dupont"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* The test case is successful if the method returns a {@link TableStockage} object.
	*/
	@Test
	void testSelectMail5() {
		TableStockage ts = new TableStockage(2, 2);
		ts.setColumnName(0, ""Envoyer E-Mail a:"");
		ts.setColumnName(1, ""Nom"");
		ts.setValueAt(true, 0, 0);
		ts.setValueAt(""Dupont"", 0, 1);
		ts.setValueAt(false, 1, 0);
		ts.setValueAt(""Durand"", 1, 1);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts2.getValueAt(0, 0), true);
		assertEquals(ts2.getValueAt(0, 1), ""Dupont"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* The test case is successful if the method returns a {@link TableStockage} object.
	*/
	@Test
	void testSelectMail6() {
		TableStockage ts = new TableStockage(2, 2);
		ts.setColumnName(0, ""Envoyer E-Mail a:"");
		ts.setColumnName(1, ""Nom"");
		ts.setValueAt(true, 0, 0);
		ts.setValueAt(""Dupont"", 0, 1);
		ts.setValueAt(false, 1, 0);
		ts.setValueAt(""Durand"", 1, 1);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts2.getValueAt(0, 0), true);
		assertEquals(ts2.getValueAt(0, 1), ""Dupont"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* The test case is successful if the method returns a {@link TableStockage} object.
	*/
	@Test
	void testSelectMail7() {
		TableStockage ts = new TableStockage(2, 2);
		ts.setColumnName(0, ""Envoyer E-Mail a:"");
		ts.setColumnName(1, ""Nom"");
		ts.setValueAt(true, 0, 0);
		ts.setValueAt(""Dupont"", 0, 1);
		ts.setValueAt(false, 1, 0);
		ts.setValueAt(""Durand"", 1, 1);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts2.getValueAt(0, 0), true);
		assertEquals(ts2.getValueAt(0, 1), ""Dupont"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* The test case is successful if the method returns a {@link TableStockage} object.
	*/
	@Test
	void testSelectMail8() {
		TableStockage ts = new TableStockage(2, 2);
		ts.setColumnName(0, ""Envoyer E-Mail a:"");
		ts.setColumnName(1, ""Nom"");
		ts.setValueAt(true, 0, 0);
		ts.setValueAt(""Dupont"", 0, 1);
		ts.setValueAt(false, 1, 0);
		ts.setValueAt(""Durand"", 1, 1);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts2.getValueAt(0, 0), true);
		assertEquals(ts2.getValueAt(0, 1), ""Dupont"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* The test case is successful if the method returns a {@link TableStockage} object.
	*/
	@Test
	void testSelectMail9() {
		TableStockage ts = new TableStockage(2, 2);
		ts.setColumnName(0, ""Envoyer E-Mail a:"");
		ts.setColumnName(1, ""Nom"");
		ts.setValueAt(true, 0, 0);
		ts.setValueAt(""Dupont"", 0, 1);
		ts.setValueAt(false, 1, 0);
		ts.setValueAt(""Durand"", 1, 1);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts2.getValueAt(0, 0), true);
		assertEquals(ts2.getValueAt(0, 1), ""Dupont"");
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* The test case is successful if the method returns a {@link TableStockage} object.
	*/
	@Test
	void testSelectMail10() {
		TableStockage ts = new TableStockage(2, 2);
		ts.setColumnName(0, ""Envoyer E-Mail a:"");
		ts.setColumnName(1, ""Nom"");
		ts.setValueAt(true, 0, 0);
		ts.setValueAt(""Dupont"", 0, 1);
		ts.setValueAt(false, 1, 0);
		ts.setValueAt(""Durand"", 1, 1);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts2.getValueAt(0, 0), true);
		assertEquals(ts2.getValueAt(0, 1), ""Dupont"");
	}
}

// TableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.table.AbstractTableModel;

public class TableStockage extends AbstractTableModel {

    private Object[][] data;
    private String[] columnNames;

    public TableStockage(int nbLignes, int nbColonnes) {
        data = new Object[nbLignes][nbColonnes];
        columnNames = new String[nbColonnes];
    }

    public int getColumnCount() {
        return columnNames.length;
    }

    public int getRowCount() {
        return data.length;
    }

    public String getColumnName(int col) {
        return columnNames[col];
    }

    public Object getValueAt(int row, int col) {
        return data[row][col];
    }

    public Class getColumnClass(int c) {
        return getValueAt(0, c).getClass();
    }

    public boolean isCellEditable(int row, int col) {
        return true;
    }

    public void setValueAt(Object value, int row, int col) {
        data[row][col] = value;
        fireTableCellUpdated(row, col);
    }

    public void setColumnName(int col, String name) {
        columnNames[col] = name;
    }
}

// TableStockageTest.java
package fr.unice.gfarce.interGraph;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TableStockage}.
* It contains ten unit test cases for the {@link TableStockage#getColumnCount()} method.
*/
class TableStockageTest {
		
	/**
	* Test case for the {@link TableStockage#getColumnCount()} method.
	* The test case is successful if the method returns an integer.
	*/
	@Test
	void testGetColumnCount() {
		TableStockage ts = new TableStockage(2, 2);
		ts.setColumnName(0, ""Envoyer E-Mail a:"");
		ts.setColumnName(1, ""Nom"");
		ts.setValueAt(true, 0, 0);
		ts.setValueAt(""Dupont"", 0, 1);
		ts.setValueAt(false, 1, 0);
		ts.setValueAt(""Durand"", 1, 1);
		assertEquals(ts.getColumnCount(), 2);
	}
	
	/**
	* Test case for the {@link TableStockage#getColumnCount()} method.
	* The test case is successful if the method returns an integer.
	*/
	@Test
	void testGetColumnCount2() {
		TableStockage ts = new TableStockage(2, 2);
		ts.setColumnName(0, ""Envoyer E-Mail a:"");
		ts.setColumnName(1, ""Nom"");
		ts.setValueAt(true, 0, 0);
		ts.setValueAt(""Dupont"", 0, 1);
		ts.setValueAt(false, 1, 0);
		ts.setValueAt(""Durand"", 1, 1);
		assertEquals(ts.getColumnCount(), 2);
	}
	
	/**
	* Test case for the {@link TableStockage#getColumnCount()} method.
	* The test case is successful if the method returns an integer.
	*/
	@Test
	void testGetColumnCount3() {
		TableStockage ts = new TableStockage(2, 2);
		ts.setColumnName(0, ""Envoyer E-Mail a:"");
		ts.setColumnName(1, ""Nom"");
		ts.setValueAt(true, 0, 0);
		ts.setValueAt(""Dupont"", 0, 1);
		ts.setValueAt(false, 1, 0);
		ts.setValueAt(""Durand"", 1, 1);
		assertEquals(ts.getColumnCount(), 2);
	}
	
	/**
	* Test case for the {@link TableStockage#getColumnCount()} method.
	* The test case is successful if the method returns an integer.
	*/
	@Test
	void testGetColumnCount4() {
		TableStockage ts = new TableStockage(2, 2);
		ts.setColumnName(0, ""Envoyer E-Mail a:"");
		ts.setColumnName(1, ""Nom"");
		ts.setValueAt(true, 0, 0);
		ts.setValueAt(""Dupont"", 0, 1);
		ts.setValueAt(false, 1, 0);
		ts.setValueAt(""Durand"", 1, 1);
		assertEquals(ts.getColumnCount(), 2);
	}
	
	/**
	* Test case for the {@link TableStockage#getColumnCount()} method.
	* The test case is successful if the method returns an integer.
	*/
	@Test
	void testGetColumnCount5() {
		TableStockage ts = new TableStockage(2, 2);
		ts.setColumnName(0, ""Envoyer E-Mail a:"");
		ts.setColumnName(1, ""Nom"");
		ts.setValueAt(true, 0, 0);
		ts.setValueAt(""Dupont"", 0, 1);
		ts.setValueAt(false, 1, 0);
		ts.setValueAt(""Durand"", 1, 1"
cmpl-6x0X2Tr2LkPyT3XmIpk1DSErskiCq,/EvoSuiteBenchmark/scenario2/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler.java,118.18337178230286,length,"// Controler.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;

/**
 * Fait la liaison entre l'interface graphique et le moteur de l'application
 * Rend comprehensible les requetes de l'interface graphique pour les bases de
 * donnees
 *
 * @author scarankle
 */
public class Controler {

    /**
     * Retourne toutes les formations
     *
     * @return un tableau contenant toutes les formations
     */
    public Formation[] findAllFormation() {
        return fdao.findFormation(null, null);
    }
}
","// ControlerTest.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findAllFormation()} method.
*/
class ControlerTest {","// ControlerTest.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findAllFormation()} method.
*/
class ControlerTest {

	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests if the method returns an empty array when there is no formation in the database.
	*/
	@Test
	void testFindAllFormation_Empty() {
		Controler c = new Controler();
		Formation[] f = c.findAllFormation();
		assertEquals(0, f.length);
	}
	
	/**
	* Test case for the {@link Controler#findAllFormation()} method.
	* It tests if the method returns an array with one element when there is one formation in the database.
	*/
	@Test
	void testFindAllFormation_One() {
		Controler c = new Controler();
		Formation f = new Formation(""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"", ""Test"
