[
{
    "id": "cmpl-6x6QsVj3nsZ4k37RTTektlidTbc51",
    "object": "text_completion",
    "created": 1679544098,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the case when the userid is null.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_UseridIsNull() {\n\t\ttry {\n\t\t\tLogonHelper.loginToGoogleAppEngine(null, \"password\", \"source\");\n\t\t\tfail(\"Expected IllegalArgumentException\");\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tassertEquals(\"userid is null\", e.getMessage());\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Expected IllegalArgumentException\");\n\t\t}\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the case when the userid is empty.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_UseridIsEmpty() {\n\t\ttry {\n\t\t\tLogonHelper.loginToGoogleAppEngine(\"\", \"password\", \"source\");\n\t\t\tfail(\"Expected IllegalArgumentException\");\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tassertEquals(\"userid is empty\", e.getMessage());\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Expected IllegalArgumentException\");\n\t\t}\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the case when the password is null.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_PasswordIsNull() {\n\t\ttry {\n\t\t\tLogonHelper.loginToGoogleAppEngine(\"userid\", null, \"source\");\n\t\t\tfail(\"Expected IllegalArgumentException\");\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tassertEquals(\"password is null\", e.getMessage());\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Expected IllegalArgumentException\");\n\t\t}\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the case when the password is empty.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_PasswordIsEmpty() {\n\t\ttry {\n\t\t\tLogonHelper.loginToGoogleAppEngine(\"userid\", \"\", \"source\");\n\t\t\tfail(\"Expected IllegalArgumentException\");\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tassertEquals(\"password is empty\", e.getMessage());\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Expected IllegalArgumentException\");\n\t\t}\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the case when the source is null.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_SourceIsNull() {\n\t\ttry {\n\t\t\tLogonHelper.loginToGoogleAppEngine(\"userid\", \"password\", null);\n\t\t\tfail(\"Expected IllegalArgumentException\");\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tassertEquals(\"source is null\", e.getMessage());\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Expected IllegalArgumentException\");\n\t\t}\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the case when the source is empty.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_SourceIsEmpty() {\n\t\ttry {\n\t\t\tLogonHelper.loginToGoogleAppEngine(\"userid\", \"password\", \"\");\n\t\t\tfail(\"Expected IllegalArgumentException\");\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tassertEquals(\"source is empty\", e.getMessage());\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Expected IllegalArgumentException\");\n\t\t}\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the case when the userid is invalid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_UseridIsInvalid() {\n\t\ttry {\n\t\t\tLogonHelper.loginToGoogleAppEngine(\"userid\", \"password\", \"source\");\n\t\t\tfail(\"Expected Exception\");\n\t\t} catch (Exception e) {\n\t\t\tassertEquals(\"Error logging in to Google App Engine\", e.getMessage());\n\t\t}\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the case when the password is invalid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_PasswordIsInvalid() {\n\t\ttry {\n\t\t\tLogonHelper.loginToGoogleAppEngine(\"userid@gmail.com\", \"password\", \"source\");\n\t\t\tfail(\"Expected Exception\");\n\t\t} catch (Exception e) {\n\t\t\tassertEquals(\"Error logging in to Google App Engine\", e.getMessage());\n\t\t}\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the case when the source is invalid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_SourceIsInvalid() {\n\t\ttry {\n\t\t\tLogonHelper.loginToGoogleAppEngine(\"userid@gmail.com\", \"password\", \"source\");\n\t\t\tfail(\"Expected Exception\");\n\t\t} catch (Exception e) {\n\t\t\tassertEquals(\"Error logging in to Google App Engine\", e.getMessage());\n\t\t}\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid() {\n\t\ttry {\n\t\t\tString acsid = LogonHelper.loginToGoogleAppEngine(\"userid@gmail.com\", \"password\", \"source\");\n\t\t\tassertNotNull(acsid);\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Expected no Exception\");\n\t\t}\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid2() {\n\t\ttry {\n\t\t\tString acsid = LogonHelper.loginToGoogleAppEngine(\"userid@gmail.com\", \"password\", \"source\");\n\t\t\tassertNotNull(acsid);\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Expected no Exception\");\n\t\t}\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid3() {\n\t\ttry {\n\t\t\tString acsid = LogonHelper.loginToGoogleAppEngine(\"userid@gmail.com\", \"password\", \"source\");\n\t\t\tassertNotNull(acsid);\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Expected no Exception\");\n\t\t}\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid4() {\n\t\ttry {\n\t\t\tString acsid = LogonHelper.loginToGoogleAppEngine(\"userid@gmail.com\", \"password\", \"source\");\n\t\t\tassertNotNull(acsid);\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Expected no Exception\");\n\t\t}\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid5() {\n\t\ttry {\n\t\t\tString acsid = LogonHelper.loginToGoogleAppEngine(\"userid@gmail.com\", \"password\", \"source\");\n\t\t\tassertNotNull(acsid);\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Expected no Exception\");\n\t\t}\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid6() {\n\t\ttry {\n\t\t\tString acsid = LogonHelper.loginToGoogleAppEngine(\"userid@gmail.com\", \"password\", \"source\");\n\t\t\tassertNotNull(acsid);\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Expected no Exception\");\n\t\t}\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid7() {\n\t\ttry {\n\t\t\tString acsid = LogonHelper.loginToGoogleAppEngine(\"userid@gmail.com\", \"password\", \"source\");\n\t\t\tassertNotNull(acsid);\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Expected no Exception\");\n\t\t}\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid8() {\n\t\ttry {\n\t\t\tString acsid = LogonHelper.loginToGoogleAppEngine(\"userid@gmail.com\", \"password\", \"source\");\n\t\t\tassertNotNull(acsid);\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Expected no Exception\");\n\t\t}\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid9() {\n\t\ttry {\n\t\t\tString acsid = LogonHelper.loginToGoogleAppEngine(\"userid@gmail.com\", \"password\", \"source\");\n\t\t\tassertNotNull(acsid);\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Expected no Exception\");\n\t\t}\n\t}\n\t\n\t/**\n\t* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n\t* It tests the case when the userid, password and source are valid.\n\t*/\n\t@Test\n\tvoid testLoginToGoogleAppEngine_Valid10() {\n\t\ttry {\n\t\t\tString acsid = LogonHelper.loginToGoogleAppEngine(\"userid@gmail.com\", \"password\", \"source\");\n\t\t\tassertNotNull(acsid);\n\t\t} catch (Exception e) {\n\t\t\tfail(\"Expected no Exception\");\n\t\t}\n\t}\n}",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 751,
        "completion_tokens": 2892,
        "total_tokens": 3643
    },
    "time_taken": 114.76090621948242,
    "prompt_id": "/EvoSuiteBenchmark/original/67_gae-app-manager/src/main/java/net/sf/gaeappmanager/google/LogonHelper.java",
    "original_code": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid\n     *            full gmail address for user\n     * @param password\n     *            password\n     * @param source\n     *            name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception\n     *             if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception;\n\n    private static String getAuthToken(InputStream inputStream) throws Exception;\n\n    private LogonHelper() {\n    }\n}\n",
    "test_prompt": "// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains ten unit test cases for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {"
},
{
    "id": "cmpl-6x6Se89ubmGI8k6wxnS5RUgaD1ZFs",
    "object": "text_completion",
    "created": 1679544208,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the userid is null.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_userid_null() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(null, \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the userid is empty.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_userid_empty() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"\", \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the password is null.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_password_null() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"userid\", null, \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the password is empty.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_password_empty() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"userid\", \"\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the source is null.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_source_null() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"userid\", \"password\", null, \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the source is empty.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_source_empty() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"userid\", \"password\", \"\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the application is null.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_application_null() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", null);\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the application is empty.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_application_empty() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the userid is invalid.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_userid_invalid() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the password is invalid.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_password_invalid() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the source is invalid.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_source_invalid() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the application is invalid.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_application_invalid() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tManager.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the userid, password, source and application are valid.\n\t * Expected result: {@link QuotaDetails} is returned.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_valid() {\n\t\tQuotaDetails quotaDetails = Manager.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"application\");\n\t\tassertNotNull(quotaDetails);\n\t}\n}\n\n// QuotaDetails.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport java.util.Date;\n\n/**\n * Quota details of application deployed in Google App Engine.\n *\n * @author Alois Belaska\n */\npublic class QuotaDetails {\n\n    /**\n     * Retrieve quota details of application deployed in Google App Engine.\n     *\n     * @param userid\n     *            full gmail address for user\n     * @param password\n     *            gmail account password\n     * @param source\n     *            name of application requesting quota details\n     * @param application\n     *            appspot application name\n     * @return quota details of application\n     * @throws Exception\n     *             in case of failure\n     */\n    public static QuotaDetails retrieveAppQuotaDetails(String userid, String password, String source, String application) throws Exception;\n}\n\n// QuotaDetailsTest.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport net.sf.gaeappmanager.google.LogonHelper;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuotaDetails}.\n* It contains ten unit test cases for the {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n*/\nclass QuotaDetailsTest {\n\t\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the userid is null.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_userid_null() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(null, \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the userid is empty.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_userid_empty() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"\", \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the password is null.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_password_null() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"userid\", null, \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the password is empty.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_password_empty() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"userid\", \"\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the source is null.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_source_null() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"userid\", \"password\", null, \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the source is empty.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_source_empty() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"userid\", \"password\", \"\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the application is null.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_application_null() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", null);\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the application is empty.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_application_empty() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the userid is invalid.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_userid_invalid() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the password is invalid.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_password_invalid() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the source is invalid.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_source_invalid() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the application is invalid.\n\t * Expected result: {@link IllegalArgumentException} is thrown.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_application_invalid() {\n\t\tassertThrows(IllegalArgumentException.class, () -> {\n\t\t\tQuotaDetails.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"application\");\n\t\t});\n\t}\n\t\n\t/**\n\t * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.\n\t * It tests the case when the userid, password, source and application are valid.\n\t * Expected result: {@link QuotaDetails} is returned.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails_valid() {\n\t\tQuotaDetails quotaDetails = QuotaDetails.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"application\");\n\t\tassertNotNull(quotaDetails);\n\t}\n}",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 416,
        "completion_tokens": 3996,
        "total_tokens": 4412
    },
    "time_taken": 149.64897990226746,
    "prompt_id": "/EvoSuiteBenchmark/original/67_gae-app-manager/src/main/java/net/sf/gaeappmanager/google/appengine/Manager.java",
    "original_code": "// Manager.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport net.sf.gaeappmanager.google.LogonHelper;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\n\n/**\n * Google App Engine application manager.\n *\n * @author Alois Belaska\n */\npublic class Manager {\n\n    /**\n     * Retrieve quota details of application deployed in Google App Engine.\n     *\n     * @param userid\n     *            full gmail address for user\n     * @param password\n     *            gmail account password\n     * @param source\n     *            name of application requesting quota details\n     * @param application\n     *            appspot application name\n     * @return quota details of application\n     * @throws Exception\n     *             in case of failure\n     */\n    public static QuotaDetails retrieveAppQuotaDetails(String userid, String password, String source, String application) throws Exception;\n}\n",
    "test_prompt": "// ManagerTest.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport net.sf.gaeappmanager.google.LogonHelper;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Manager}.\n* It contains ten unit test cases for the {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n*/\nclass ManagerTest {"
}
]