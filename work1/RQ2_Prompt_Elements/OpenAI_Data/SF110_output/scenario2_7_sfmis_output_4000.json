[
{
    "id": "cmpl-6wuq6JdcbqFbI6iEnhQZYhD1pcql2",
    "object": "text_completion",
    "created": 1679499534,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t/**\n\t* Test case 1:\n\t*\n\t* Condition:\n\t*   - The query sql is null.\n\t*\n\t* Expected:\n\t*   - The query sql is null.\n\t*/\n\t@Test\n\tpublic void testCase1() {\n\t\t// Given\n\t\tLoader loader = new Loader();\n\t\tloader.setQuerySql(null);\n\t\t\n\t\t// When\n\t\tList rows = loader.loadDataWithSql();\n\t\t\n\t\t// Then\n\t\tassertEquals(null, rows);\n\t}\n\t\n\t/**\n\t* Test case 2:\n\t*\n\t* Condition:\n\t*   - The query sql is empty.\n\t*\n\t* Expected:\n\t*   - The query sql is empty.\n\t*/\n\t@Test\n\tpublic void testCase2() {\n\t\t// Given\n\t\tLoader loader = new Loader();\n\t\tloader.setQuerySql(\"\");\n\t\t\n\t\t// When\n\t\tList rows = loader.loadDataWithSql();\n\t\t\n\t\t// Then\n\t\tassertEquals(null, rows);\n\t}\n\t\n\t/**\n\t* Test case 3:\n\t*\n\t* Condition:\n\t*   - The query sql is not empty.\n\t*\n\t* Expected:\n\t*   - The query sql is not empty.\n\t*/\n\t@Test\n\tpublic void testCase3() {\n\t\t// Given\n\t\tLoader loader = new Loader();\n\t\tloader.setQuerySql(\"select * from user\");\n\t\t\n\t\t// When\n\t\tList rows = loader.loadDataWithSql();\n\t\t\n\t\t// Then\n\t\tassertEquals(null, rows);\n\t}\n\t\n\t/**\n\t* Test case 4:\n\t*\n\t* Condition:\n\t*   - The query sql is not empty.\n\t*\n\t* Expected:\n\t*   - The query sql is not empty.\n\t*/\n\t@Test\n\tpublic void testCase4() {\n\t\t// Given\n\t\tLoader loader = new Loader();\n\t\tloader.setQuerySql(\"select * from user\");\n\t\t\n\t\t// When\n\t\tList rows = loader.loadDataWithSql();\n\t\t\n\t\t// Then\n\t\tassertEquals(null, rows);\n\t}\n\t\n\t/**\n\t* Test case 5:\n\t*\n\t* Condition:\n\t*   - The query sql is not empty.\n\t*\n\t* Expected:\n\t*   - The query sql is not empty.\n\t*/\n\t@Test\n\tpublic void testCase5() {\n\t\t// Given\n\t\tLoader loader = new Loader();\n\t\tloader.setQuerySql(\"select * from user\");\n\t\t\n\t\t// When\n\t\tList rows = loader.loadDataWithSql();\n\t\t\n\t\t// Then\n\t\tassertEquals(null, rows);\n\t}\n\t\n\t/**\n\t* Test case 6:\n\t*\n\t* Condition:\n\t*   - The query sql is not empty.\n\t*\n\t* Expected:\n\t*   - The query sql is not empty.\n\t*/\n\t@Test\n\tpublic void testCase6() {\n\t\t// Given\n\t\tLoader loader = new Loader();\n\t\tloader.setQuerySql(\"select * from user\");\n\t\t\n\t\t// When\n\t\tList rows = loader.loadDataWithSql();\n\t\t\n\t\t// Then\n\t\tassertEquals(null, rows);\n\t}\n\t\n\t/**\n\t* Test case 7:\n\t*\n\t* Condition:\n\t*   - The query sql is not empty.\n\t*\n\t* Expected:\n\t*   - The query sql is not empty.\n\t*/\n\t@Test\n\tpublic void testCase7() {\n\t\t// Given\n\t\tLoader loader = new Loader();\n\t\tloader.setQuerySql(\"select * from user\");\n\t\t\n\t\t// When\n\t\tList rows = loader.loadDataWithSql();\n\t\t\n\t\t// Then\n\t\tassertEquals(null, rows);\n\t}\n\t\n\t/**\n\t* Test case 8:\n\t*\n\t* Condition:\n\t*   - The query sql is not empty.\n\t*\n\t* Expected:\n\t*   - The query sql is not empty.\n\t*/\n\t@Test\n\tpublic void testCase8() {\n\t\t// Given\n\t\tLoader loader = new Loader();\n\t\tloader.setQuerySql(\"select * from user\");\n\t\t\n\t\t// When\n\t\tList rows = loader.loadDataWithSql();\n\t\t\n\t\t// Then\n\t\tassertEquals(null, rows);\n\t}\n\t\n\t/**\n\t* Test case 9:\n\t*\n\t* Condition:\n\t*   - The query sql is not empty.\n\t*\n\t* Expected:\n\t*   - The query sql is not empty.\n\t*/\n\t@Test\n\tpublic void testCase9() {\n\t\t// Given\n\t\tLoader loader = new Loader();\n\t\tloader.setQuerySql(\"select * from user\");\n\t\t\n\t\t// When\n\t\tList rows = loader.loadDataWithSql();\n\t\t\n\t\t// Then\n\t\tassertEquals(null, rows);\n\t}\n\t\n\t/**\n\t* Test case 10:\n\t*\n\t* Condition:\n\t*   - The query sql is not empty.\n\t*\n\t* Expected:\n\t*   - The query sql is not empty.\n\t*/\n\t@Test\n\tpublic void testCase10() {\n\t\t// Given\n\t\tLoader loader = new Loader();\n\t\tloader.setQuerySql(\"select * from user\");\n\t\t\n\t\t// When\n\t\tList rows = loader.loadDataWithSql();\n\t\t\n\t\t// Then\n\t\tassertEquals(null, rows);\n\t}\n}",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 682,
        "completion_tokens": 1419,
        "total_tokens": 2101
    },
    "time_taken": 47.8971209526062,
    "prompt_id": "/EvoSuiteBenchmark/scenario2/7_sfmis/src/main/java/com/hf/sfm/util/Loader.java",
    "original_code": "// Loader.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\npublic class Loader {\n\n    /**\n     * \u67e5\u8be2\u6570\u636e\n     */\n    public List loadDataWithSql() {\n        session = HibernateSessionFactory.currentSession();\n        this.getQuerySql();\n        if (sort != null && sort != \"\") {\n            if (this.sql.indexOf(\"order by\") > 0) {\n                this.sql = this.sql.substring(0, this.sql.indexOf(\"order by\")) + \" order by \" + sort + \" \" + dir;\n            } else {\n                this.sql = this.sql + \" order by \" + sort + \" \" + dir;\n            }\n        }\n        query = session.createSQLQuery(this.sql);\n        if (pas != null) {\n            query = this.getParams(query, pas);\n        }\n        if (paging) {\n            query.setFirstResult(start);\n            query.setMaxResults(limit);\n        }\n        List rows = query.list();\n        HibernateSessionFactory.closeSession();\n        this.setRs(rows);\n        return rows;\n    }\n}\n",
    "test_prompt": "// LoaderTest.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Loader}.\n* It contains ten unit test cases for the {@link Loader#loadDataWithSql()} method.\n*/\nclass LoaderTest {"
}
]