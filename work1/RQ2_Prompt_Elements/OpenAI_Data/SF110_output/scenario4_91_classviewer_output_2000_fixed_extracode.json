[
    {
        "id": "cmpl-6x2XRtYjU9uZ8ojQY2UG5KFhOhamk",
        "object": "text_completion",
        "created": 1679529129,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// ClassInfo_0Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.\n*/\nclass ClassInfo_0Test {\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.WindowConstants}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_0() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(3, result.length);\n\t\t\t\tassertEquals(\"public static final int java.awt.WindowConstants.DO_NOTHING_ON_CLOSE\", result[0]);\n\t\t\t\tassertEquals(\"public static final int java.awt.WindowConstants.HIDE_ON_CLOSE\", result[1]);\n\t\t\t\tassertEquals(\"public static final int java.awt.WindowConstants.DISPOSE_ON_CLOSE\", result[2]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowAdapter}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_1() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowAdapter\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowEvent}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_2() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowEvent\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowFocusListener}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_3() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowFocusListener\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowListener}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_4() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowListener\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowStateListener}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_5() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowStateListener\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowEvent}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_6() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowEvent\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowEvent}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_7() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowEvent\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowEvent}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_8() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowEvent\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowEvent}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_9() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowEvent\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 1803,
            "completion_tokens": 2000,
            "total_tokens": 3803
        },
        "time_taken": 70.24769377708435,
        "prompt_id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_0Test.java",
        "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * <p>\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    public static boolean debug;\n\n    private boolean statusAbstract;\n\n    private Class c = javax.swing.WindowConstants.class;\n\n    private DirManager dirMan;\n\n    private static int count, length;\n\n    public final static int NO_OBJECT_METHODS = 1, NO_INHERITED_METHODS = 2;\n\n    private String[] cMethods, fndMethods = null;\n\n    protected String[] knownPackages;\n\n    public boolean isAbstract();\n\n    public boolean isInterface();\n\n    public String getClassName();\n\n    public String getClassPackage();\n\n    public String getSuperClassName();\n\n    private ClassInfo() {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param  name the name of the class on which to get info\n     */\n    public ClassInfo(String name) throws ClassNotFoundException {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param    name  name of class\n     *           locManager    class that manages package information\n     */\n    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {\n    }\n\n    /**\n     * Returns an array of strings that contain the public fields for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @return      string array of public fields\n     */\n    public String[] printFields();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @return      string array of public methods\n     */\n    public String[] printMethods();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class excluding inherited methods. The data is pulled from\n     * the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  param (not currently implemented) selects whether inherited\n     *               objects are returned\n     * @return      string array of public methods\n     */\n    public String[] printMethods(int param);\n\n    /**\n     * Returns an array of strings that contain the public constructors for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of public constructors\n     */\n    public String[] printConstructors();\n\n    /**\n     * Returns an array of strings that contain the interfaces for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of interfaces\n     */\n    public String[] printInterfaces();\n\n    /**\n     * Takes an array of Member objects and gets names from toString().\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  m  array of Member objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Member[] m);\n\n    /**\n     * Takes an array of Class objects and gets names from toString().\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  m  array of Class objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Class[] m);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, and selects methods that have that\n     * fragment in them.\n     * <p>\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, with a given string index, and searches\n     * on the index for the fragment in them but gets method from cMethods.\n     * <p>\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *           index    string array that is searched through\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr, String[] index);\n\n    /**\n     * Searches through found methods and returns method at given\n     * position, uses anonymous inner class.  If no methods\n     * have been searched for it returns null.\n     *\n     * @param    pos  position of found methods in array 0 is first.\n     *\n     * @return   MethodData object with information about method\n     */\n    public MethodData getFoundMethod(final int pos);\n\n    /**\n     * Takes any given array and prints out with System.out.println\n     *\n     * @param    array   an array of objects\n     */\n    private void printArray(Object[] array);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it tries all known packages\n     * to see if any of them will work with the class name.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private Class getClass(String name);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it returns null.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private static Class tryClass(String name);\n\n    /**\n     * Prints out class info with System.out.println\n     */\n    private void printClassInfo();\n\n    /**\n     * Main method for getting class information.\n     * Prints out data with System.out.println.\n     *\n     * @param    args    string array for main\n     */\n    public static void main(String[] args) throws Exception;\n}\n",
        "test_prompt": "// ClassInfo_0Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.\n*/\nclass ClassInfo_0Test {",
        "original_generated_code": "\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.WindowConstants}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_0() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(3, result.length);\n\t\t\t\tassertEquals(\"public static final int java.awt.WindowConstants.DO_NOTHING_ON_CLOSE\", result[0]);\n\t\t\t\tassertEquals(\"public static final int java.awt.WindowConstants.HIDE_ON_CLOSE\", result[1]);\n\t\t\t\tassertEquals(\"public static final int java.awt.WindowConstants.DISPOSE_ON_CLOSE\", result[2]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowAdapter}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_1() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowAdapter\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowEvent}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_2() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowEvent\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowFocusListener}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_3() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowFocusListener\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowListener}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_4() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowListener\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowStateListener}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_5() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowStateListener\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowEvent}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_6() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowEvent\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowEvent}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_7() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowEvent\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowEvent}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_8() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowEvent\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printFields()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowEvent}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintFields_9() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowEvent\");\n\t\t\t\tString[] result = classInfo.printFields();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n}\n\n// ClassInfo_1Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.\n*/\nclass ClassInfo_1Test {\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with the class {@link java.awt.WindowConstants}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintMethods_0() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] result = classInfo.printMethods();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowAdapter}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintMethods_1() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowAdapter\");\n\t\t\t\tString[] result = classInfo.printMethods();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with the class {@link java.awt.event.WindowEvent}.\n\t\t*/\n\t\t@Test\n\t\tpublic void testPrintMethods_2() throws Exception {\n\t\t\t\tClassInfo classInfo = new ClassInfo(\"java.awt.event.WindowEvent\");\n\t\t\t\tString[] result = classInfo.printMethods();\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t",
        "applied_heuristics": "H1"
    },
    {
        "id": "cmpl-6x2YZQd0NkLvhuK3D9KTyzojt3Nvu",
        "object": "text_completion",
        "created": 1679529199,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// ClassInfo_1Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.\n*/\nclass ClassInfo_1Test {\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with a class that has no methods.\n\t\t*/\n\t\t@Test\n\t\tvoid testPrintMethods_1() {\n\t\t\t\tClassInfo ci = new ClassInfo(\"java.lang.Object\");\n\t\t\t\tString[] methods = ci.printMethods();\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with a class that has one method.\n\t\t*/\n\t\t@Test\n\t\tvoid testPrintMethods_2() {\n\t\t\t\tClassInfo ci = new ClassInfo(\"java.lang.String\");\n\t\t\t\tString[] methods = ci.printMethods();\n\t\t\t\tassertEquals(1, methods.length);\n\t\t\t\tassertEquals(\"public java.lang.String java.lang.String.toString()\", methods[0]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with a class that has two methods.\n\t\t*/\n\t\t@Test\n\t\tvoid testPrintMethods_3() {\n\t\t\t\tClassInfo ci = new ClassInfo(\"java.lang.StringBuffer\");\n\t\t\t\tString[] methods = ci.printMethods();\n\t\t\t\tassertEquals(2, methods.length);\n\t\t\t\tassertEquals(\"public java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String)\", methods[0]);\n\t\t\t\tassertEquals(\"public java.lang.String java.lang.StringBuffer.toString()\", methods[1]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with a class that has three methods.\n\t\t*/\n\t\t@Test\n\t\tvoid testPrintMethods_4() {\n\t\t\t\tClassInfo ci = new ClassInfo(\"java.lang.StringBuilder\");\n\t\t\t\tString[] methods = ci.printMethods();\n\t\t\t\tassertEquals(3, methods.length);\n\t\t\t\tassertEquals(\"public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String)\", methods[0]);\n\t\t\t\tassertEquals(\"public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.Object)\", methods[1]);\n\t\t\t\tassertEquals(\"public java.lang.String java.lang.StringBuilder.toString()\", methods[2]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with a class that has four methods.\n\t\t*/\n\t\t@Test\n\t\tvoid testPrintMethods_5() {\n\t\t\t\tClassInfo ci = new ClassInfo(\"java.lang.StringTokenizer\");\n\t\t\t\tString[] methods = ci.printMethods();\n\t\t\t\tassertEquals(4, methods.length);\n\t\t\t\tassertEquals(\"public java.lang.String java.lang.StringTokenizer.nextToken()\", methods[0]);\n\t\t\t\tassertEquals(\"public boolean java.lang.StringTokenizer.hasMoreTokens()\", methods[1]);\n\t\t\t\tassertEquals(\"public int java.lang.StringTokenizer.countTokens()\", methods[2]);\n\t\t\t\tassertEquals(\"public java.lang.String java.lang.StringTokenizer.nextToken(java.lang.String)\", methods[3]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with a class that has five methods.\n\t\t*/\n\t\t@Test\n\t\tvoid testPrintMethods_6() {\n\t\t\t\tClassInfo ci = new ClassInfo(\"java.lang.System\");\n\t\t\t\tString[] methods = ci.printMethods();\n\t\t\t\tassertEquals(5, methods.length);\n\t\t\t\tassertEquals(\"public static void java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)\", methods[0]);\n\t\t\t\tassertEquals(\"public static long java.lang.System.currentTimeMillis()\", methods[1]);\n\t\t\t\tassertEquals(\"public static void java.lang.System.exit(int)\", methods[2]);\n\t\t\t\tassertEquals(\"public static java.io.PrintStream java.lang.System.out\", methods[3]);\n\t\t\t\tassertEquals(\"public static java.io.PrintStream java.lang.System.err\", methods[4]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with a class that has six methods.\n\t\t*/\n\t\t@Test\n\t\tvoid testPrintMethods_7() {\n\t\t\t\tClassInfo ci = new ClassInfo(\"java.lang.Thread\");\n\t\t\t\tString[] methods = ci.printMethods();\n\t\t\t\tassertEquals(6, methods.length);\n\t\t\t\tassertEquals(\"public void java.lang.Thread.start()\", methods[0]);\n\t\t\t\tassertEquals(\"public void java.lang.Thread.run()\", methods[1]);\n\t\t\t\tassertEquals(\"public void java.lang.Thread.stop()\", methods[2]);\n\t\t\t\tassertEquals(\"public void java.lang.Thread.suspend()\", methods[3]);\n\t\t\t\tassertEquals(\"public void java.lang.Thread.resume()\", methods[4]);\n\t\t\t\tassertEquals(\"public void java.lang.Thread.setPriority(int)\", methods[5]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with a class that has seven methods.\n\t\t*/\n\t\t@Test\n\t\tvoid testPrintMethods_8() {\n\t\t\t\tClassInfo ci = new ClassInfo(\"java.lang.Throwable\");\n\t\t\t\tString[] methods = ci.printMethods();\n\t\t\t\tassertEquals(7, methods.length);\n\t\t\t\tassertEquals(\"public java.lang.String java.lang.Throwable.getMessage()\", methods[0]);\n\t\t\t\tassertEquals(\"public java.lang.String java.lang.Throwable.toString()\", methods[1]);\n\t\t\t\tassertEquals(\"public void java.lang.Throwable.printStackTrace()\", methods[2]);\n\t\t\t\tassertEquals(\"public void java.lang.Throwable.printStackTrace(java.io.PrintStream)\", methods[3]);\n\t\t\t\tassertEquals(\"public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)\", methods[4]);\n\t\t\t\tassertEquals(\"public java.lang.Throwable java.lang.Throwable.fillInStackTrace()\", methods[5]);\n\t\t\t\tassertEquals(\"public java.lang.Throwable java.lang.Throwable.getCause()\", methods[6]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with a class that has eight methods.\n\t\t*/\n\t\t@Test\n\t\tvoid testPrintMethods_9() {\n\t\t\t\tClassInfo ci = new ClassInfo(\"java.lang.Void\");\n\t\t\t\tString[] methods = ci.printMethods();\n\t\t\t\tassertEquals(8, methods.length);\n\t\t\t\tassertEquals(\"public static java.lang.Class java.lang.Void.TYPE\", methods[0]);\n\t\t\t\tassertEquals(\"public static java.lang.Class java.lang.Void.getType()\", methods[1]);\n\t\t\t\tassertEquals(\"public static java.lang.Class java.lang.Void.getClass()\", methods[2]);\n}\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 1802,
            "completion_tokens": 2000,
            "total_tokens": 3802
        },
        "time_taken": 70.43922162055969,
        "prompt_id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_1Test.java",
        "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * <p>\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    public static boolean debug;\n\n    private boolean statusAbstract;\n\n    private Class c = javax.swing.WindowConstants.class;\n\n    private DirManager dirMan;\n\n    private static int count, length;\n\n    public final static int NO_OBJECT_METHODS = 1, NO_INHERITED_METHODS = 2;\n\n    private String[] cMethods, fndMethods = null;\n\n    protected String[] knownPackages;\n\n    public boolean isAbstract();\n\n    public boolean isInterface();\n\n    public String getClassName();\n\n    public String getClassPackage();\n\n    public String getSuperClassName();\n\n    private ClassInfo() {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param  name the name of the class on which to get info\n     */\n    public ClassInfo(String name) throws ClassNotFoundException {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param    name  name of class\n     *           locManager    class that manages package information\n     */\n    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {\n    }\n\n    /**\n     * Returns an array of strings that contain the public fields for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @return      string array of public fields\n     */\n    public String[] printFields();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @return      string array of public methods\n     */\n    public String[] printMethods();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class excluding inherited methods. The data is pulled from\n     * the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  param (not currently implemented) selects whether inherited\n     *               objects are returned\n     * @return      string array of public methods\n     */\n    public String[] printMethods(int param);\n\n    /**\n     * Returns an array of strings that contain the public constructors for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of public constructors\n     */\n    public String[] printConstructors();\n\n    /**\n     * Returns an array of strings that contain the interfaces for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of interfaces\n     */\n    public String[] printInterfaces();\n\n    /**\n     * Takes an array of Member objects and gets names from toString().\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  m  array of Member objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Member[] m);\n\n    /**\n     * Takes an array of Class objects and gets names from toString().\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  m  array of Class objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Class[] m);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, and selects methods that have that\n     * fragment in them.\n     * <p>\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, with a given string index, and searches\n     * on the index for the fragment in them but gets method from cMethods.\n     * <p>\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *           index    string array that is searched through\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr, String[] index);\n\n    /**\n     * Searches through found methods and returns method at given\n     * position, uses anonymous inner class.  If no methods\n     * have been searched for it returns null.\n     *\n     * @param    pos  position of found methods in array 0 is first.\n     *\n     * @return   MethodData object with information about method\n     */\n    public MethodData getFoundMethod(final int pos);\n\n    /**\n     * Takes any given array and prints out with System.out.println\n     *\n     * @param    array   an array of objects\n     */\n    private void printArray(Object[] array);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it tries all known packages\n     * to see if any of them will work with the class name.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private Class getClass(String name);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it returns null.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private static Class tryClass(String name);\n\n    /**\n     * Prints out class info with System.out.println\n     */\n    private void printClassInfo();\n\n    /**\n     * Main method for getting class information.\n     * Prints out data with System.out.println.\n     *\n     * @param    args    string array for main\n     */\n    public static void main(String[] args) throws Exception;\n}\n",
        "test_prompt": "// ClassInfo_1Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.\n*/\nclass ClassInfo_1Test {",
        "original_generated_code": "\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with a class that has no methods.\n\t\t*/\n\t\t@Test\n\t\tvoid testPrintMethods_1() {\n\t\t\t\tClassInfo ci = new ClassInfo(\"java.lang.Object\");\n\t\t\t\tString[] methods = ci.printMethods();\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with a class that has one method.\n\t\t*/\n\t\t@Test\n\t\tvoid testPrintMethods_2() {\n\t\t\t\tClassInfo ci = new ClassInfo(\"java.lang.String\");\n\t\t\t\tString[] methods = ci.printMethods();\n\t\t\t\tassertEquals(1, methods.length);\n\t\t\t\tassertEquals(\"public java.lang.String java.lang.String.toString()\", methods[0]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with a class that has two methods.\n\t\t*/\n\t\t@Test\n\t\tvoid testPrintMethods_3() {\n\t\t\t\tClassInfo ci = new ClassInfo(\"java.lang.StringBuffer\");\n\t\t\t\tString[] methods = ci.printMethods();\n\t\t\t\tassertEquals(2, methods.length);\n\t\t\t\tassertEquals(\"public java.lang.StringBuffer java.lang.StringBuffer.append(java.lang.String)\", methods[0]);\n\t\t\t\tassertEquals(\"public java.lang.String java.lang.StringBuffer.toString()\", methods[1]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with a class that has three methods.\n\t\t*/\n\t\t@Test\n\t\tvoid testPrintMethods_4() {\n\t\t\t\tClassInfo ci = new ClassInfo(\"java.lang.StringBuilder\");\n\t\t\t\tString[] methods = ci.printMethods();\n\t\t\t\tassertEquals(3, methods.length);\n\t\t\t\tassertEquals(\"public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.String)\", methods[0]);\n\t\t\t\tassertEquals(\"public java.lang.StringBuilder java.lang.StringBuilder.append(java.lang.Object)\", methods[1]);\n\t\t\t\tassertEquals(\"public java.lang.String java.lang.StringBuilder.toString()\", methods[2]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with a class that has four methods.\n\t\t*/\n\t\t@Test\n\t\tvoid testPrintMethods_5() {\n\t\t\t\tClassInfo ci = new ClassInfo(\"java.lang.StringTokenizer\");\n\t\t\t\tString[] methods = ci.printMethods();\n\t\t\t\tassertEquals(4, methods.length);\n\t\t\t\tassertEquals(\"public java.lang.String java.lang.StringTokenizer.nextToken()\", methods[0]);\n\t\t\t\tassertEquals(\"public boolean java.lang.StringTokenizer.hasMoreTokens()\", methods[1]);\n\t\t\t\tassertEquals(\"public int java.lang.StringTokenizer.countTokens()\", methods[2]);\n\t\t\t\tassertEquals(\"public java.lang.String java.lang.StringTokenizer.nextToken(java.lang.String)\", methods[3]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with a class that has five methods.\n\t\t*/\n\t\t@Test\n\t\tvoid testPrintMethods_6() {\n\t\t\t\tClassInfo ci = new ClassInfo(\"java.lang.System\");\n\t\t\t\tString[] methods = ci.printMethods();\n\t\t\t\tassertEquals(5, methods.length);\n\t\t\t\tassertEquals(\"public static void java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)\", methods[0]);\n\t\t\t\tassertEquals(\"public static long java.lang.System.currentTimeMillis()\", methods[1]);\n\t\t\t\tassertEquals(\"public static void java.lang.System.exit(int)\", methods[2]);\n\t\t\t\tassertEquals(\"public static java.io.PrintStream java.lang.System.out\", methods[3]);\n\t\t\t\tassertEquals(\"public static java.io.PrintStream java.lang.System.err\", methods[4]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with a class that has six methods.\n\t\t*/\n\t\t@Test\n\t\tvoid testPrintMethods_7() {\n\t\t\t\tClassInfo ci = new ClassInfo(\"java.lang.Thread\");\n\t\t\t\tString[] methods = ci.printMethods();\n\t\t\t\tassertEquals(6, methods.length);\n\t\t\t\tassertEquals(\"public void java.lang.Thread.start()\", methods[0]);\n\t\t\t\tassertEquals(\"public void java.lang.Thread.run()\", methods[1]);\n\t\t\t\tassertEquals(\"public void java.lang.Thread.stop()\", methods[2]);\n\t\t\t\tassertEquals(\"public void java.lang.Thread.suspend()\", methods[3]);\n\t\t\t\tassertEquals(\"public void java.lang.Thread.resume()\", methods[4]);\n\t\t\t\tassertEquals(\"public void java.lang.Thread.setPriority(int)\", methods[5]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with a class that has seven methods.\n\t\t*/\n\t\t@Test\n\t\tvoid testPrintMethods_8() {\n\t\t\t\tClassInfo ci = new ClassInfo(\"java.lang.Throwable\");\n\t\t\t\tString[] methods = ci.printMethods();\n\t\t\t\tassertEquals(7, methods.length);\n\t\t\t\tassertEquals(\"public java.lang.String java.lang.Throwable.getMessage()\", methods[0]);\n\t\t\t\tassertEquals(\"public java.lang.String java.lang.Throwable.toString()\", methods[1]);\n\t\t\t\tassertEquals(\"public void java.lang.Throwable.printStackTrace()\", methods[2]);\n\t\t\t\tassertEquals(\"public void java.lang.Throwable.printStackTrace(java.io.PrintStream)\", methods[3]);\n\t\t\t\tassertEquals(\"public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)\", methods[4]);\n\t\t\t\tassertEquals(\"public java.lang.Throwable java.lang.Throwable.fillInStackTrace()\", methods[5]);\n\t\t\t\tassertEquals(\"public java.lang.Throwable java.lang.Throwable.getCause()\", methods[6]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#printMethods()} method.\n\t\t* It tests the method with a class that has eight methods.\n\t\t*/\n\t\t@Test\n\t\tvoid testPrintMethods_9() {\n\t\t\t\tClassInfo ci = new ClassInfo(\"java.lang.Void\");\n\t\t\t\tString[] methods = ci.printMethods();\n\t\t\t\tassertEquals(8, methods.length);\n\t\t\t\tassertEquals(\"public static java.lang.Class java.lang.Void.TYPE\", methods[0]);\n\t\t\t\tassertEquals(\"public static java.lang.Class java.lang.Void.getType()\", methods[1]);\n\t\t\t\tassertEquals(\"public static java.lang.Class java.lang.Void.getClass()\", methods[2]);\n\t\t\t\tassertEquals(\"public static java.lang.Class java.lang.Void.getClass",
        "applied_heuristics": "H7"
    },
    {
        "id": "cmpl-6x2ZiXL5pHFdsGjiSntfexm8xbEsr",
        "object": "text_completion",
        "created": 1679529270,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// ClassInfo_2Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.\n*/\nclass ClassInfo_2Test {\n\t\t\n\t\tprivate ClassInfo ci;\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_1() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_INHERITED_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_2() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_3() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_4() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_5() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_6() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_7() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_8() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_9() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_10() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 1803,
            "completion_tokens": 2000,
            "total_tokens": 3803
        },
        "time_taken": 76.53943371772766,
        "prompt_id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_2Test.java",
        "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * <p>\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    public static boolean debug;\n\n    private boolean statusAbstract;\n\n    private Class c = javax.swing.WindowConstants.class;\n\n    private DirManager dirMan;\n\n    private static int count, length;\n\n    public final static int NO_OBJECT_METHODS = 1, NO_INHERITED_METHODS = 2;\n\n    private String[] cMethods, fndMethods = null;\n\n    protected String[] knownPackages;\n\n    public boolean isAbstract();\n\n    public boolean isInterface();\n\n    public String getClassName();\n\n    public String getClassPackage();\n\n    public String getSuperClassName();\n\n    private ClassInfo() {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param  name the name of the class on which to get info\n     */\n    public ClassInfo(String name) throws ClassNotFoundException {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param    name  name of class\n     *           locManager    class that manages package information\n     */\n    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {\n    }\n\n    /**\n     * Returns an array of strings that contain the public fields for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @return      string array of public fields\n     */\n    public String[] printFields();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @return      string array of public methods\n     */\n    public String[] printMethods();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class excluding inherited methods. The data is pulled from\n     * the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  param (not currently implemented) selects whether inherited\n     *               objects are returned\n     * @return      string array of public methods\n     */\n    public String[] printMethods(int param);\n\n    /**\n     * Returns an array of strings that contain the public constructors for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of public constructors\n     */\n    public String[] printConstructors();\n\n    /**\n     * Returns an array of strings that contain the interfaces for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of interfaces\n     */\n    public String[] printInterfaces();\n\n    /**\n     * Takes an array of Member objects and gets names from toString().\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  m  array of Member objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Member[] m);\n\n    /**\n     * Takes an array of Class objects and gets names from toString().\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  m  array of Class objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Class[] m);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, and selects methods that have that\n     * fragment in them.\n     * <p>\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, with a given string index, and searches\n     * on the index for the fragment in them but gets method from cMethods.\n     * <p>\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *           index    string array that is searched through\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr, String[] index);\n\n    /**\n     * Searches through found methods and returns method at given\n     * position, uses anonymous inner class.  If no methods\n     * have been searched for it returns null.\n     *\n     * @param    pos  position of found methods in array 0 is first.\n     *\n     * @return   MethodData object with information about method\n     */\n    public MethodData getFoundMethod(final int pos);\n\n    /**\n     * Takes any given array and prints out with System.out.println\n     *\n     * @param    array   an array of objects\n     */\n    private void printArray(Object[] array);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it tries all known packages\n     * to see if any of them will work with the class name.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private Class getClass(String name);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it returns null.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private static Class tryClass(String name);\n\n    /**\n     * Prints out class info with System.out.println\n     */\n    private void printClassInfo();\n\n    /**\n     * Main method for getting class information.\n     * Prints out data with System.out.println.\n     *\n     * @param    args    string array for main\n     */\n    public static void main(String[] args) throws Exception;\n}\n",
        "test_prompt": "// ClassInfo_2Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.\n*/\nclass ClassInfo_2Test {",
        "original_generated_code": "\n\t\tprivate ClassInfo ci;\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_1() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_INHERITED_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_2() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_3() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_4() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_5() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_6() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_7() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_8() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_9() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintMethods_10() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.printMethods(ClassInfo.NO_OBJECT_METHODS | ClassInfo.NO_INHERITED_METHODS);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n}\n\n// ClassInfo_3Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String, String[])} method.\n*/\nclass ClassInfo_3Test {\n\t\t\n\t\tprivate ClassInfo ci;\n\t\t\n\t\t@Test\n\t\tvoid testSrchMethods_1() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.srchMethods(\"\", new String[0]);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testSrchMethods_2() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.srchMethods(\"\", new String[0]);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testSrchMethods_3() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.srchMethods(\"\", new String[0]);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testSrchMethods_4() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.srchMethods(\"\", new String[0]);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testSrchMethods_5() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.srchMethods(\"\", new String[0]);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testSrchMethods_6() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.srchMethods(\"\", new String[0]);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testSrchMethods_7() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.srchMethods(\"\", new String[0]);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testSrchMethods_8() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.srchMethods(\"\", new String[0]);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testSrchMethods_9() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.srchMethods(\"\", new String[0]);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testSrchMethods_10() {\n\t\t\t\tci = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = ci.srchMethods(\"\", new String[0]);\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n}\n\n// ClassInfo_4Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*",
        "applied_heuristics": "H1"
    },
    {
        "id": "cmpl-6x2awkFv9B1gPwRfIdauACKZvpXmD",
        "object": "text_completion",
        "created": 1679529346,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// ClassInfo_3Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.\n*/\nclass ClassInfo_3Test {\n\t\t\n\t\tprivate ClassInfo classInfo;\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_1() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(0, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_2() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Window\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(2, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_3() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Frame\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(3, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_4() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Dialog\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(3, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_5() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.FileDialog\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(3, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_6() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Color\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(11, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_7() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Font\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(6, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_8() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Graphics\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(0, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_9() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Graphics2D\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(0, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_10() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.GraphicsEnvironment\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(1, constructors.length);\n\t\t}\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 1803,
            "completion_tokens": 2000,
            "total_tokens": 3803
        },
        "time_taken": 54.73093366622925,
        "prompt_id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_3Test.java",
        "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * <p>\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    public static boolean debug;\n\n    private boolean statusAbstract;\n\n    private Class c = javax.swing.WindowConstants.class;\n\n    private DirManager dirMan;\n\n    private static int count, length;\n\n    public final static int NO_OBJECT_METHODS = 1, NO_INHERITED_METHODS = 2;\n\n    private String[] cMethods, fndMethods = null;\n\n    protected String[] knownPackages;\n\n    public boolean isAbstract();\n\n    public boolean isInterface();\n\n    public String getClassName();\n\n    public String getClassPackage();\n\n    public String getSuperClassName();\n\n    private ClassInfo() {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param  name the name of the class on which to get info\n     */\n    public ClassInfo(String name) throws ClassNotFoundException {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param    name  name of class\n     *           locManager    class that manages package information\n     */\n    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {\n    }\n\n    /**\n     * Returns an array of strings that contain the public fields for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @return      string array of public fields\n     */\n    public String[] printFields();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @return      string array of public methods\n     */\n    public String[] printMethods();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class excluding inherited methods. The data is pulled from\n     * the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  param (not currently implemented) selects whether inherited\n     *               objects are returned\n     * @return      string array of public methods\n     */\n    public String[] printMethods(int param);\n\n    /**\n     * Returns an array of strings that contain the public constructors for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of public constructors\n     */\n    public String[] printConstructors();\n\n    /**\n     * Returns an array of strings that contain the interfaces for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of interfaces\n     */\n    public String[] printInterfaces();\n\n    /**\n     * Takes an array of Member objects and gets names from toString().\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  m  array of Member objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Member[] m);\n\n    /**\n     * Takes an array of Class objects and gets names from toString().\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  m  array of Class objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Class[] m);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, and selects methods that have that\n     * fragment in them.\n     * <p>\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, with a given string index, and searches\n     * on the index for the fragment in them but gets method from cMethods.\n     * <p>\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *           index    string array that is searched through\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr, String[] index);\n\n    /**\n     * Searches through found methods and returns method at given\n     * position, uses anonymous inner class.  If no methods\n     * have been searched for it returns null.\n     *\n     * @param    pos  position of found methods in array 0 is first.\n     *\n     * @return   MethodData object with information about method\n     */\n    public MethodData getFoundMethod(final int pos);\n\n    /**\n     * Takes any given array and prints out with System.out.println\n     *\n     * @param    array   an array of objects\n     */\n    private void printArray(Object[] array);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it tries all known packages\n     * to see if any of them will work with the class name.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private Class getClass(String name);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it returns null.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private static Class tryClass(String name);\n\n    /**\n     * Prints out class info with System.out.println\n     */\n    private void printClassInfo();\n\n    /**\n     * Main method for getting class information.\n     * Prints out data with System.out.println.\n     *\n     * @param    args    string array for main\n     */\n    public static void main(String[] args) throws Exception;\n}\n",
        "test_prompt": "// ClassInfo_3Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.\n*/\nclass ClassInfo_3Test {",
        "original_generated_code": "\n\t\tprivate ClassInfo classInfo;\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_1() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(0, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_2() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Window\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(2, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_3() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Frame\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(3, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_4() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Dialog\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(3, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_5() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.FileDialog\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(3, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_6() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Color\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(11, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_7() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Font\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(6, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_8() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Graphics\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(0, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_9() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Graphics2D\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(0, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_10() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.GraphicsEnvironment\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(1, constructors.length);\n\t\t}\n}\n\n// ClassInfo_4Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printInterfaces()} method.\n*/\nclass ClassInfo_4Test {\n\t\t\n\t\tprivate ClassInfo classInfo;\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_1() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(0, interfaces.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_2() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Window\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(1, interfaces.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_3() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Frame\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(1, interfaces.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_4() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Dialog\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(1, interfaces.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_5() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.FileDialog\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(1, interfaces.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_6() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Color\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(0, interfaces.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_7() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Font\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(0, interfaces.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_8() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Graphics\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(0, interfaces.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_9() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Graphics2D\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(0, interfaces.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_10() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.GraphicsEnvironment\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(0, interfaces.length);\n\t\t}\n}\n\n// ClassInfo_5Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#srchMethods(java.lang.String)} method.\n*/\nclass ClassInfo_5Test {\n\t\t\n\t\tprivate ClassInfo classInfo;\n\t\t\n\t\t@Test\n\t\tvoid testSrchMethods_1() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] methods = classInfo.srchMethods(\"\");\n\t\t\t\tassertEquals(0, methods.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testSrchMethods_2() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.Window\");\n\t\t\t\tString[] methods = classInfo.",
        "applied_heuristics": "H1"
    },
    {
        "id": "cmpl-6x2bzMD7DYvYGGvYZyfDJJSz6bjSA",
        "object": "text_completion",
        "created": 1679529411,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// ClassInfo_4Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printInterfaces()} method.\n*/\nclass ClassInfo_4Test {\n\t\t\n\t\tprivate ClassInfo classInfo;\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_1() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(0, interfaces.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_2() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.ActionListener\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(1, interfaces.length);\n\t\t\t\tassertEquals(\"java.util.EventListener\", interfaces[0]);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_3() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.ActionEvent\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(0, interfaces.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_4() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.AdjustmentListener\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(1, interfaces.length);\n\t\t\t\tassertEquals(\"java.util.EventListener\", interfaces[0]);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_5() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.AdjustmentEvent\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(0, interfaces.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_6() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.ComponentListener\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(1, interfaces.length);\n\t\t\t\tassertEquals(\"java.util.EventListener\", interfaces[0]);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_7() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.ComponentEvent\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(0, interfaces.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_8() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.ContainerListener\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(1, interfaces.length);\n\t\t\t\tassertEquals(\"java.util.EventListener\", interfaces[0]);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_9() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.ContainerEvent\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(0, interfaces.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_10() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.FocusListener\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(1, interfaces.length);\n\t\t\t\tassertEquals(\"java.util.EventListener\", interfaces[0]);\n\t\t}\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 1803,
            "completion_tokens": 2000,
            "total_tokens": 3803
        },
        "time_taken": 71.48589968681335,
        "prompt_id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_4Test.java",
        "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * <p>\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    public static boolean debug;\n\n    private boolean statusAbstract;\n\n    private Class c = javax.swing.WindowConstants.class;\n\n    private DirManager dirMan;\n\n    private static int count, length;\n\n    public final static int NO_OBJECT_METHODS = 1, NO_INHERITED_METHODS = 2;\n\n    private String[] cMethods, fndMethods = null;\n\n    protected String[] knownPackages;\n\n    public boolean isAbstract();\n\n    public boolean isInterface();\n\n    public String getClassName();\n\n    public String getClassPackage();\n\n    public String getSuperClassName();\n\n    private ClassInfo() {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param  name the name of the class on which to get info\n     */\n    public ClassInfo(String name) throws ClassNotFoundException {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param    name  name of class\n     *           locManager    class that manages package information\n     */\n    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {\n    }\n\n    /**\n     * Returns an array of strings that contain the public fields for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @return      string array of public fields\n     */\n    public String[] printFields();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @return      string array of public methods\n     */\n    public String[] printMethods();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class excluding inherited methods. The data is pulled from\n     * the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  param (not currently implemented) selects whether inherited\n     *               objects are returned\n     * @return      string array of public methods\n     */\n    public String[] printMethods(int param);\n\n    /**\n     * Returns an array of strings that contain the public constructors for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of public constructors\n     */\n    public String[] printConstructors();\n\n    /**\n     * Returns an array of strings that contain the interfaces for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of interfaces\n     */\n    public String[] printInterfaces();\n\n    /**\n     * Takes an array of Member objects and gets names from toString().\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  m  array of Member objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Member[] m);\n\n    /**\n     * Takes an array of Class objects and gets names from toString().\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  m  array of Class objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Class[] m);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, and selects methods that have that\n     * fragment in them.\n     * <p>\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, with a given string index, and searches\n     * on the index for the fragment in them but gets method from cMethods.\n     * <p>\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *           index    string array that is searched through\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr, String[] index);\n\n    /**\n     * Searches through found methods and returns method at given\n     * position, uses anonymous inner class.  If no methods\n     * have been searched for it returns null.\n     *\n     * @param    pos  position of found methods in array 0 is first.\n     *\n     * @return   MethodData object with information about method\n     */\n    public MethodData getFoundMethod(final int pos);\n\n    /**\n     * Takes any given array and prints out with System.out.println\n     *\n     * @param    array   an array of objects\n     */\n    private void printArray(Object[] array);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it tries all known packages\n     * to see if any of them will work with the class name.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private Class getClass(String name);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it returns null.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private static Class tryClass(String name);\n\n    /**\n     * Prints out class info with System.out.println\n     */\n    private void printClassInfo();\n\n    /**\n     * Main method for getting class information.\n     * Prints out data with System.out.println.\n     *\n     * @param    args    string array for main\n     */\n    public static void main(String[] args) throws Exception;\n}\n",
        "test_prompt": "// ClassInfo_4Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printInterfaces()} method.\n*/\nclass ClassInfo_4Test {",
        "original_generated_code": "\n\t\tprivate ClassInfo classInfo;\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_1() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(0, interfaces.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_2() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.ActionListener\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(1, interfaces.length);\n\t\t\t\tassertEquals(\"java.util.EventListener\", interfaces[0]);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_3() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.ActionEvent\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(0, interfaces.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_4() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.AdjustmentListener\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(1, interfaces.length);\n\t\t\t\tassertEquals(\"java.util.EventListener\", interfaces[0]);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_5() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.AdjustmentEvent\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(0, interfaces.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_6() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.ComponentListener\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(1, interfaces.length);\n\t\t\t\tassertEquals(\"java.util.EventListener\", interfaces[0]);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_7() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.ComponentEvent\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(0, interfaces.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_8() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.ContainerListener\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(1, interfaces.length);\n\t\t\t\tassertEquals(\"java.util.EventListener\", interfaces[0]);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_9() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.ContainerEvent\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(0, interfaces.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintInterfaces_10() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.FocusListener\");\n\t\t\t\tString[] interfaces = classInfo.printInterfaces();\n\t\t\t\tassertEquals(1, interfaces.length);\n\t\t\t\tassertEquals(\"java.util.EventListener\", interfaces[0]);\n\t\t}\n}\n\n// ClassInfo_5Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.\n*/\nclass ClassInfo_5Test {\n\t\t\n\t\tprivate ClassInfo classInfo;\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_1() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(0, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_2() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.ActionListener\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(0, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_3() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.ActionEvent\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(1, constructors.length);\n\t\t\t\tassertEquals(\"public java.awt.event.ActionEvent(java.awt.Event)\", constructors[0]);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_4() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.AdjustmentListener\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(0, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_5() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.AdjustmentEvent\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(1, constructors.length);\n\t\t\t\tassertEquals(\"public java.awt.event.AdjustmentEvent(java.awt.Adjustable,int,int,int)\", constructors[0]);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_6() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.ComponentListener\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(0, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_7() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.ComponentEvent\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(1, constructors.length);\n\t\t\t\tassertEquals(\"public java.awt.event.ComponentEvent(java.awt.Component,int)\", constructors[0]);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_8() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.ContainerListener\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(0, constructors.length);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_9() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.ContainerEvent\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(1, constructors.length);\n\t\t\t\tassertEquals(\"public java.awt.event.ContainerEvent(java.awt.Component,java.awt.Container,java.awt.Component)\", constructors[0]);\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid testPrintConstructors_10() {\n\t\t\t\tclassInfo = new ClassInfo(\"java.awt.event.FocusListener\");\n\t\t\t\tString[] constructors = classInfo.printConstructors();\n\t\t\t\tassertEquals(0, constructors.length);\n\t\t}\n}\n\n//",
        "applied_heuristics": "H1"
    },
    {
        "id": "cmpl-6x2d9V2AN2PY8zNgGtXKPbJa5JrbF",
        "object": "text_completion",
        "created": 1679529483,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// ClassInfo_5Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.\n*/\nclass ClassInfo_5Test {\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#getData(Member[])} method.\n\t\t* It tests the method with a null array.\n\t\t*/\n\t\t@Test\n\t\tpublic void testGetData_1() {\n\t\t\t\tMember[] m = null;\n\t\t\t\tString[] result = ClassInfo.getData(m);\n\t\t\t\tassertNull(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#getData(Member[])} method.\n\t\t* It tests the method with an empty array.\n\t\t*/\n\t\t@Test\n\t\tpublic void testGetData_2() {\n\t\t\t\tMember[] m = new Member[0];\n\t\t\t\tString[] result = ClassInfo.getData(m);\n\t\t\t\tassertNotNull(result);\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#getData(Member[])} method.\n\t\t* It tests the method with an array of one element.\n\t\t*/\n\t\t@Test\n\t\tpublic void testGetData_3() {\n\t\t\t\tMember[] m = new Member[1];\n\t\t\t\tm[0] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tString[] result = ClassInfo.getData(m);\n\t\t\t\tassertNotNull(result);\n\t\t\t\tassertEquals(1, result.length);\n\t\t\t\tassertEquals(\"test\", result[0]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#getData(Member[])} method.\n\t\t* It tests the method with an array of two elements.\n\t\t*/\n\t\t@Test\n\t\tpublic void testGetData_4() {\n\t\t\t\tMember[] m = new Member[2];\n\t\t\t\tm[0] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[1] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test2\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tString[] result = ClassInfo.getData(m);\n\t\t\t\tassertNotNull(result);\n\t\t\t\tassertEquals(2, result.length);\n\t\t\t\tassertEquals(\"test\", result[0]);\n\t\t\t\tassertEquals(\"test2\", result[1]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#getData(Member[])} method.\n\t\t* It tests the method with an array of three elements.\n\t\t*/\n\t\t@Test\n\t\tpublic void testGetData_5() {\n\t\t\t\tMember[] m = new Member[3];\n\t\t\t\tm[0] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[1] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test2\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[2] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test3\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tString[] result = ClassInfo.getData(m);\n\t\t\t\tassertNotNull(result);\n\t\t\t\tassertEquals(3, result.length);\n\t\t\t\tassertEquals(\"test\", result[0]);\n\t\t\t\tassertEquals(\"test2\", result[1]);\n\t\t\t\tassertEquals(\"test3\", result[2]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#getData(Member[])} method.\n\t\t* It tests the method with an array of four elements.\n\t\t*/\n\t\t@Test\n\t\tpublic void testGetData_6() {\n\t\t\t\tMember[] m = new Member[4];\n\t\t\t\tm[0] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[1] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test2\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[2] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test3\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[3] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test4\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tString[] result = ClassInfo.getData(m);\n\t\t\t\tassertNotNull(result);\n\t\t\t\tassertEquals(4, result.length);\n\t\t\t\tassertEquals(\"test\", result[0]);\n\t\t\t\tassertEquals(\"test2\", result[1]);\n\t\t\t\tassertEquals(\"test3\", result[2]);\n\t\t\t\tassertEquals(\"test4\", result[3]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#getData(Member[])} method.\n\t\t* It tests the method with an array of five elements.\n\t\t*/\n\t\t@Test\n\t\tpublic void testGetData_7() {\n\t\t\t\tMember[] m = new Member[5];\n\t\t\t\tm[0] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[1] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test2\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[2] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test3\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[3] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test4\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[4] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test5\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tString[] result = ClassInfo.getData(m);\n\t\t\t\tassertNotNull(result);\n\t\t\t\tassertEquals(5, result.length);\n\t\t\t\tassertEquals(\"test\", result[0]);\n\t\t\t\tassertEquals(\"test2\", result[1]);\n\t\t\t\tassertEquals(\"test3\", result[2]);\n\t\t\t\tassertEquals(\"test4\", result[3]);\n\t\t\t\tassertEquals(\"test5\", result[4]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#getData(Member[])} method.\n\t\t* It tests the method with an array of six elements.\n\t\t*/\n\t\t@Test\n\t\tpublic void testGetData_8() {\n\t\t\t\tMember[] m = new Member[6];\n}\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 1805,
            "completion_tokens": 2000,
            "total_tokens": 3805
        },
        "time_taken": 57.073068618774414,
        "prompt_id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_5Test.java",
        "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * <p>\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    public static boolean debug;\n\n    private boolean statusAbstract;\n\n    private Class c = javax.swing.WindowConstants.class;\n\n    private DirManager dirMan;\n\n    private static int count, length;\n\n    public final static int NO_OBJECT_METHODS = 1, NO_INHERITED_METHODS = 2;\n\n    private String[] cMethods, fndMethods = null;\n\n    protected String[] knownPackages;\n\n    public boolean isAbstract();\n\n    public boolean isInterface();\n\n    public String getClassName();\n\n    public String getClassPackage();\n\n    public String getSuperClassName();\n\n    private ClassInfo() {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param  name the name of the class on which to get info\n     */\n    public ClassInfo(String name) throws ClassNotFoundException {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param    name  name of class\n     *           locManager    class that manages package information\n     */\n    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {\n    }\n\n    /**\n     * Returns an array of strings that contain the public fields for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @return      string array of public fields\n     */\n    public String[] printFields();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @return      string array of public methods\n     */\n    public String[] printMethods();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class excluding inherited methods. The data is pulled from\n     * the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  param (not currently implemented) selects whether inherited\n     *               objects are returned\n     * @return      string array of public methods\n     */\n    public String[] printMethods(int param);\n\n    /**\n     * Returns an array of strings that contain the public constructors for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of public constructors\n     */\n    public String[] printConstructors();\n\n    /**\n     * Returns an array of strings that contain the interfaces for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of interfaces\n     */\n    public String[] printInterfaces();\n\n    /**\n     * Takes an array of Member objects and gets names from toString().\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  m  array of Member objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Member[] m);\n\n    /**\n     * Takes an array of Class objects and gets names from toString().\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  m  array of Class objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Class[] m);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, and selects methods that have that\n     * fragment in them.\n     * <p>\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, with a given string index, and searches\n     * on the index for the fragment in them but gets method from cMethods.\n     * <p>\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *           index    string array that is searched through\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr, String[] index);\n\n    /**\n     * Searches through found methods and returns method at given\n     * position, uses anonymous inner class.  If no methods\n     * have been searched for it returns null.\n     *\n     * @param    pos  position of found methods in array 0 is first.\n     *\n     * @return   MethodData object with information about method\n     */\n    public MethodData getFoundMethod(final int pos);\n\n    /**\n     * Takes any given array and prints out with System.out.println\n     *\n     * @param    array   an array of objects\n     */\n    private void printArray(Object[] array);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it tries all known packages\n     * to see if any of them will work with the class name.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private Class getClass(String name);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it returns null.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private static Class tryClass(String name);\n\n    /**\n     * Prints out class info with System.out.println\n     */\n    private void printClassInfo();\n\n    /**\n     * Main method for getting class information.\n     * Prints out data with System.out.println.\n     *\n     * @param    args    string array for main\n     */\n    public static void main(String[] args) throws Exception;\n}\n",
        "test_prompt": "// ClassInfo_5Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.\n*/\nclass ClassInfo_5Test {",
        "original_generated_code": "\n\t\t/**\n\t\t* Test case for {@link ClassInfo#getData(Member[])} method.\n\t\t* It tests the method with a null array.\n\t\t*/\n\t\t@Test\n\t\tpublic void testGetData_1() {\n\t\t\t\tMember[] m = null;\n\t\t\t\tString[] result = ClassInfo.getData(m);\n\t\t\t\tassertNull(result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#getData(Member[])} method.\n\t\t* It tests the method with an empty array.\n\t\t*/\n\t\t@Test\n\t\tpublic void testGetData_2() {\n\t\t\t\tMember[] m = new Member[0];\n\t\t\t\tString[] result = ClassInfo.getData(m);\n\t\t\t\tassertNotNull(result);\n\t\t\t\tassertEquals(0, result.length);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#getData(Member[])} method.\n\t\t* It tests the method with an array of one element.\n\t\t*/\n\t\t@Test\n\t\tpublic void testGetData_3() {\n\t\t\t\tMember[] m = new Member[1];\n\t\t\t\tm[0] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tString[] result = ClassInfo.getData(m);\n\t\t\t\tassertNotNull(result);\n\t\t\t\tassertEquals(1, result.length);\n\t\t\t\tassertEquals(\"test\", result[0]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#getData(Member[])} method.\n\t\t* It tests the method with an array of two elements.\n\t\t*/\n\t\t@Test\n\t\tpublic void testGetData_4() {\n\t\t\t\tMember[] m = new Member[2];\n\t\t\t\tm[0] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[1] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test2\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tString[] result = ClassInfo.getData(m);\n\t\t\t\tassertNotNull(result);\n\t\t\t\tassertEquals(2, result.length);\n\t\t\t\tassertEquals(\"test\", result[0]);\n\t\t\t\tassertEquals(\"test2\", result[1]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#getData(Member[])} method.\n\t\t* It tests the method with an array of three elements.\n\t\t*/\n\t\t@Test\n\t\tpublic void testGetData_5() {\n\t\t\t\tMember[] m = new Member[3];\n\t\t\t\tm[0] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[1] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test2\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[2] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test3\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tString[] result = ClassInfo.getData(m);\n\t\t\t\tassertNotNull(result);\n\t\t\t\tassertEquals(3, result.length);\n\t\t\t\tassertEquals(\"test\", result[0]);\n\t\t\t\tassertEquals(\"test2\", result[1]);\n\t\t\t\tassertEquals(\"test3\", result[2]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#getData(Member[])} method.\n\t\t* It tests the method with an array of four elements.\n\t\t*/\n\t\t@Test\n\t\tpublic void testGetData_6() {\n\t\t\t\tMember[] m = new Member[4];\n\t\t\t\tm[0] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[1] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test2\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[2] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test3\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[3] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test4\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tString[] result = ClassInfo.getData(m);\n\t\t\t\tassertNotNull(result);\n\t\t\t\tassertEquals(4, result.length);\n\t\t\t\tassertEquals(\"test\", result[0]);\n\t\t\t\tassertEquals(\"test2\", result[1]);\n\t\t\t\tassertEquals(\"test3\", result[2]);\n\t\t\t\tassertEquals(\"test4\", result[3]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#getData(Member[])} method.\n\t\t* It tests the method with an array of five elements.\n\t\t*/\n\t\t@Test\n\t\tpublic void testGetData_7() {\n\t\t\t\tMember[] m = new Member[5];\n\t\t\t\tm[0] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[1] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test2\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[2] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test3\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[3] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test4\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tm[4] = new Member() {\n\t\t\t\t\t\tpublic String toString() {\n\t\t\t\t\t\t\t\treturn \"test5\";\n\t\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tString[] result = ClassInfo.getData(m);\n\t\t\t\tassertNotNull(result);\n\t\t\t\tassertEquals(5, result.length);\n\t\t\t\tassertEquals(\"test\", result[0]);\n\t\t\t\tassertEquals(\"test2\", result[1]);\n\t\t\t\tassertEquals(\"test3\", result[2]);\n\t\t\t\tassertEquals(\"test4\", result[3]);\n\t\t\t\tassertEquals(\"test5\", result[4]);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link ClassInfo#getData(Member[])} method.\n\t\t* It tests the method with an array of six elements.\n\t\t*/\n\t\t@Test\n\t\tpublic void testGetData_8() {\n\t\t\t\tMember[] m = new Member[6];\n\t\t\t\tm[0] =",
        "applied_heuristics": "H7"
    },
    {
        "id": "cmpl-6x2eCyUxplj0bbqIIxlh1lCTh2974",
        "object": "text_completion",
        "created": 1679529548,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// ClassInfo_6Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.\n*/\nclass ClassInfo_6Test {\n\t\t\n\t@Test\n\tvoid testGetData_1() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.String.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.String\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_2() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.Integer.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.Integer\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_3() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.Double.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.Double\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_4() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.Float.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.Float\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_5() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.Boolean.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.Boolean\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_6() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.Character.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.Character\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_7() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.Byte.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.Byte\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_8() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.Short.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.Short\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_9() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.Long.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.Long\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_10() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.Void.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.Void\", s[0]);\n\t}\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 1805,
            "completion_tokens": 2000,
            "total_tokens": 3805
        },
        "time_taken": 48.49670958518982,
        "prompt_id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_6Test.java",
        "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * <p>\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    public static boolean debug;\n\n    private boolean statusAbstract;\n\n    private Class c = javax.swing.WindowConstants.class;\n\n    private DirManager dirMan;\n\n    private static int count, length;\n\n    public final static int NO_OBJECT_METHODS = 1, NO_INHERITED_METHODS = 2;\n\n    private String[] cMethods, fndMethods = null;\n\n    protected String[] knownPackages;\n\n    public boolean isAbstract();\n\n    public boolean isInterface();\n\n    public String getClassName();\n\n    public String getClassPackage();\n\n    public String getSuperClassName();\n\n    private ClassInfo() {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param  name the name of the class on which to get info\n     */\n    public ClassInfo(String name) throws ClassNotFoundException {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param    name  name of class\n     *           locManager    class that manages package information\n     */\n    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {\n    }\n\n    /**\n     * Returns an array of strings that contain the public fields for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @return      string array of public fields\n     */\n    public String[] printFields();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @return      string array of public methods\n     */\n    public String[] printMethods();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class excluding inherited methods. The data is pulled from\n     * the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  param (not currently implemented) selects whether inherited\n     *               objects are returned\n     * @return      string array of public methods\n     */\n    public String[] printMethods(int param);\n\n    /**\n     * Returns an array of strings that contain the public constructors for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of public constructors\n     */\n    public String[] printConstructors();\n\n    /**\n     * Returns an array of strings that contain the interfaces for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of interfaces\n     */\n    public String[] printInterfaces();\n\n    /**\n     * Takes an array of Member objects and gets names from toString().\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  m  array of Member objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Member[] m);\n\n    /**\n     * Takes an array of Class objects and gets names from toString().\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  m  array of Class objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Class[] m);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, and selects methods that have that\n     * fragment in them.\n     * <p>\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, with a given string index, and searches\n     * on the index for the fragment in them but gets method from cMethods.\n     * <p>\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *           index    string array that is searched through\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr, String[] index);\n\n    /**\n     * Searches through found methods and returns method at given\n     * position, uses anonymous inner class.  If no methods\n     * have been searched for it returns null.\n     *\n     * @param    pos  position of found methods in array 0 is first.\n     *\n     * @return   MethodData object with information about method\n     */\n    public MethodData getFoundMethod(final int pos);\n\n    /**\n     * Takes any given array and prints out with System.out.println\n     *\n     * @param    array   an array of objects\n     */\n    private void printArray(Object[] array);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it tries all known packages\n     * to see if any of them will work with the class name.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private Class getClass(String name);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it returns null.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private static Class tryClass(String name);\n\n    /**\n     * Prints out class info with System.out.println\n     */\n    private void printClassInfo();\n\n    /**\n     * Main method for getting class information.\n     * Prints out data with System.out.println.\n     *\n     * @param    args    string array for main\n     */\n    public static void main(String[] args) throws Exception;\n}\n",
        "test_prompt": "// ClassInfo_6Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.\n*/\nclass ClassInfo_6Test {",
        "original_generated_code": "\n\t@Test\n\tvoid testGetData_1() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.String.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.String\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_2() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.Integer.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.Integer\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_3() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.Double.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.Double\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_4() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.Float.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.Float\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_5() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.Boolean.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.Boolean\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_6() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.Character.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.Character\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_7() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.Byte.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.Byte\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_8() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.Short.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.Short\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_9() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.Long.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.Long\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_10() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tClass[] c = new Class[1];\n\t\tc[0] = java.lang.Void.class;\n\t\tString[] s = ClassInfo.getData(c);\n\t\tassertEquals(\"class java.lang.Void\", s[0]);\n\t}\n}\n\n// ClassInfo_7Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.\n*/\nclass ClassInfo_7Test {\n\t\t\n\t@Test\n\tvoid testGetData_1() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tMember[] m = new Member[1];\n\t\tm[0] = java.lang.String.class;\n\t\tString[] s = ClassInfo.getData(m);\n\t\tassertEquals(\"class java.lang.String\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_2() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tMember[] m = new Member[1];\n\t\tm[0] = java.lang.Integer.class;\n\t\tString[] s = ClassInfo.getData(m);\n\t\tassertEquals(\"class java.lang.Integer\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_3() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tMember[] m = new Member[1];\n\t\tm[0] = java.lang.Double.class;\n\t\tString[] s = ClassInfo.getData(m);\n\t\tassertEquals(\"class java.lang.Double\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_4() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tMember[] m = new Member[1];\n\t\tm[0] = java.lang.Float.class;\n\t\tString[] s = ClassInfo.getData(m);\n\t\tassertEquals(\"class java.lang.Float\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_5() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tMember[] m = new Member[1];\n\t\tm[0] = java.lang.Boolean.class;\n\t\tString[] s = ClassInfo.getData(m);\n\t\tassertEquals(\"class java.lang.Boolean\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_6() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tMember[] m = new Member[1];\n\t\tm[0] = java.lang.Character.class;\n\t\tString[] s = ClassInfo.getData(m);\n\t\tassertEquals(\"class java.lang.Character\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_7() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tMember[] m = new Member[1];\n\t\tm[0] = java.lang.Byte.class;\n\t\tString[] s = ClassInfo.getData(m);\n\t\tassertEquals(\"class java.lang.Byte\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_8() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tMember[] m = new Member[1];\n\t\tm[0] = java.lang.Short.class;\n\t\tString[] s = ClassInfo.getData(m);\n\t\tassertEquals(\"class java.lang.Short\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_9() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tMember[] m = new Member[1];\n\t\tm[0] = java.lang.Long.class;\n\t\tString[] s = ClassInfo.getData(m);\n\t\tassertEquals(\"class java.lang.Long\", s[0]);\n\t}\n\t\n\t@Test\n\tvoid testGetData_10() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tMember[] m = new Member[1];\n\t\tm[0] = java.lang.Void.class;\n\t\tString[] s = ClassInfo.getData(m);\n\t\tassertEquals(\"class java.lang.V",
        "applied_heuristics": "H1"
    },
    {
        "id": "cmpl-6x2fFnmkGBT6dxrQEJqnwYpe43t6L",
        "object": "text_completion",
        "created": 1679529613,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// ClassInfo_7Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.\n*/\nclass ClassInfo_7Test {\n\t\t\n\t@Test\n\tvoid test_srchMethods_1() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"\");\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_2() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"a\");\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_3() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"ab\");\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_4() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abc\");\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_5() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abcd\");\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_6() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abcde\");\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_7() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abcdef\");\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_8() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abcdefg\");\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_9() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abcdefgh\");\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_10() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abcdefghi\");\n\t\tassertEquals(0, result.length);\n\t}\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 1804,
            "completion_tokens": 2000,
            "total_tokens": 3804
        },
        "time_taken": 74.44539427757263,
        "prompt_id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_7Test.java",
        "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * <p>\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    public static boolean debug;\n\n    private boolean statusAbstract;\n\n    private Class c = javax.swing.WindowConstants.class;\n\n    private DirManager dirMan;\n\n    private static int count, length;\n\n    public final static int NO_OBJECT_METHODS = 1, NO_INHERITED_METHODS = 2;\n\n    private String[] cMethods, fndMethods = null;\n\n    protected String[] knownPackages;\n\n    public boolean isAbstract();\n\n    public boolean isInterface();\n\n    public String getClassName();\n\n    public String getClassPackage();\n\n    public String getSuperClassName();\n\n    private ClassInfo() {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param  name the name of the class on which to get info\n     */\n    public ClassInfo(String name) throws ClassNotFoundException {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param    name  name of class\n     *           locManager    class that manages package information\n     */\n    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {\n    }\n\n    /**\n     * Returns an array of strings that contain the public fields for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @return      string array of public fields\n     */\n    public String[] printFields();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @return      string array of public methods\n     */\n    public String[] printMethods();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class excluding inherited methods. The data is pulled from\n     * the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  param (not currently implemented) selects whether inherited\n     *               objects are returned\n     * @return      string array of public methods\n     */\n    public String[] printMethods(int param);\n\n    /**\n     * Returns an array of strings that contain the public constructors for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of public constructors\n     */\n    public String[] printConstructors();\n\n    /**\n     * Returns an array of strings that contain the interfaces for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of interfaces\n     */\n    public String[] printInterfaces();\n\n    /**\n     * Takes an array of Member objects and gets names from toString().\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  m  array of Member objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Member[] m);\n\n    /**\n     * Takes an array of Class objects and gets names from toString().\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  m  array of Class objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Class[] m);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, and selects methods that have that\n     * fragment in them.\n     * <p>\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, with a given string index, and searches\n     * on the index for the fragment in them but gets method from cMethods.\n     * <p>\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *           index    string array that is searched through\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr, String[] index);\n\n    /**\n     * Searches through found methods and returns method at given\n     * position, uses anonymous inner class.  If no methods\n     * have been searched for it returns null.\n     *\n     * @param    pos  position of found methods in array 0 is first.\n     *\n     * @return   MethodData object with information about method\n     */\n    public MethodData getFoundMethod(final int pos);\n\n    /**\n     * Takes any given array and prints out with System.out.println\n     *\n     * @param    array   an array of objects\n     */\n    private void printArray(Object[] array);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it tries all known packages\n     * to see if any of them will work with the class name.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private Class getClass(String name);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it returns null.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private static Class tryClass(String name);\n\n    /**\n     * Prints out class info with System.out.println\n     */\n    private void printClassInfo();\n\n    /**\n     * Main method for getting class information.\n     * Prints out data with System.out.println.\n     *\n     * @param    args    string array for main\n     */\n    public static void main(String[] args) throws Exception;\n}\n",
        "test_prompt": "// ClassInfo_7Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.\n*/\nclass ClassInfo_7Test {",
        "original_generated_code": "\n\t@Test\n\tvoid test_srchMethods_1() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"\");\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_2() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"a\");\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_3() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"ab\");\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_4() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abc\");\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_5() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abcd\");\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_6() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abcde\");\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_7() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abcdef\");\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_8() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abcdefg\");\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_9() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abcdefgh\");\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_10() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abcdefghi\");\n\t\tassertEquals(0, result.length);\n\t}\n}\n\n// ClassInfo_8Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String, String[])} method.\n*/\nclass ClassInfo_8Test {\n\t\t\n\t@Test\n\tvoid test_srchMethods_1() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"\", new String[0]);\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_2() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"a\", new String[0]);\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_3() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"ab\", new String[0]);\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_4() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abc\", new String[0]);\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_5() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abcd\", new String[0]);\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_6() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abcde\", new String[0]);\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_7() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abcdef\", new String[0]);\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_8() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abcdefg\", new String[0]);\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_9() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abcdefgh\", new String[0]);\n\t\tassertEquals(0, result.length);\n\t}\n\t\n\t@Test\n\tvoid test_srchMethods_10() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tString[] result = ci.srchMethods(\"abcdefghi\", new String[0]);\n\t\tassertEquals(0, result.length);\n\t}\n}\n\n// ClassInfo_9Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.\n*/\nclass ClassInfo_9Test {\n\t\t\n\t@Test\n\tvoid test_getFoundMethod_1() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tMethodData result = ci.getFoundMethod(0);\n\t\tassertNull(result);\n\t}\n\t\n\t@Test\n\tvoid test_getFoundMethod_2() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tMethodData result = ci.getFoundMethod(1);\n\t\tassertNull(result);\n\t}\n\t\n\t@Test\n\tvoid test_getFoundMethod_3() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tMethodData result = ci.getFoundMethod(2);\n\t\tassertNull(result);\n\t}\n\t\n\t@Test\n\tvoid test_getFoundMethod_4() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tMethodData result = ci.getFoundMethod(3);\n\t\tassertNull(result);\n\t}\n\t\n\t@Test\n\tvoid test_getFoundMethod_5() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tMethodData result = ci.getFoundMethod(4);\n\t\tassertNull(result);\n\t}\n\t\n\t@Test\n\tvoid test_getFoundMethod_6() {\n\t\tClassInfo ci = new ClassInfo();\n\t\tMethodData result = ci.getFoundMethod(5);\n\t\tassertNull(result);\n\t}\n\t\n\t@Test\n\tvoid test_getFoundMethod_7() {\n\t\tClassInfo c",
        "applied_heuristics": "H1"
    },
    {
        "id": "cmpl-6x2gRRP3lwH71r2QQWXeggvQLXrxl",
        "object": "text_completion",
        "created": 1679529687,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// ClassInfo_8Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.\n*/\nclass ClassInfo_8Test {\n\t\t\n\t@Test\n\tvoid testGetFoundMethod_1() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(0);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_2() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(1);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_3() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(2);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_4() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(3);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_5() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(4);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_6() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(5);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_7() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(6);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_8() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(7);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_9() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(8);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_10() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(9);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 1804,
            "completion_tokens": 2000,
            "total_tokens": 3804
        },
        "time_taken": 77.71407842636108,
        "prompt_id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_8Test.java",
        "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * <p>\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    public static boolean debug;\n\n    private boolean statusAbstract;\n\n    private Class c = javax.swing.WindowConstants.class;\n\n    private DirManager dirMan;\n\n    private static int count, length;\n\n    public final static int NO_OBJECT_METHODS = 1, NO_INHERITED_METHODS = 2;\n\n    private String[] cMethods, fndMethods = null;\n\n    protected String[] knownPackages;\n\n    public boolean isAbstract();\n\n    public boolean isInterface();\n\n    public String getClassName();\n\n    public String getClassPackage();\n\n    public String getSuperClassName();\n\n    private ClassInfo() {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param  name the name of the class on which to get info\n     */\n    public ClassInfo(String name) throws ClassNotFoundException {\n    }\n\n    /**\n     * Constructor for when the class name is known at creation.\n     *\n     * @param    name  name of class\n     *           locManager    class that manages package information\n     */\n    public ClassInfo(String name, DirManager locManager) throws ClassNotFoundException {\n    }\n\n    /**\n     * Returns an array of strings that contain the public fields for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @return      string array of public fields\n     */\n    public String[] printFields();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @return      string array of public methods\n     */\n    public String[] printMethods();\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class excluding inherited methods. The data is pulled from\n     * the c private Class object.\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  param (not currently implemented) selects whether inherited\n     *               objects are returned\n     * @return      string array of public methods\n     */\n    public String[] printMethods(int param);\n\n    /**\n     * Returns an array of strings that contain the public constructors for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of public constructors\n     */\n    public String[] printConstructors();\n\n    /**\n     * Returns an array of strings that contain the interfaces for\n     * the class. The data is pulled from the c private Class object.\n     * <p>\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return      string array of interfaces\n     */\n    public String[] printInterfaces();\n\n    /**\n     * Takes an array of Member objects and gets names from toString().\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  m  array of Member objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Member[] m);\n\n    /**\n     * Takes an array of Class objects and gets names from toString().\n     * <p>\n     * This method always returns immediately.\n     *\n     * @param  m  array of Class objects\n     *\n     * @return    string array of names\n     */\n    public static String[] getData(Class[] m);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, and selects methods that have that\n     * fragment in them.\n     * <p>\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr);\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, with a given string index, and searches\n     * on the index for the fragment in them but gets method from cMethods.\n     * <p>\n     * This method calls searchStrings().\n     *\n     * @param    tempStr  string fragment with which to search\n     *           index    string array that is searched through\n     *\n     * @return   string array of found methods\n     */\n    public String[] srchMethods(String tempStr, String[] index);\n\n    /**\n     * Searches through found methods and returns method at given\n     * position, uses anonymous inner class.  If no methods\n     * have been searched for it returns null.\n     *\n     * @param    pos  position of found methods in array 0 is first.\n     *\n     * @return   MethodData object with information about method\n     */\n    public MethodData getFoundMethod(final int pos);\n\n    /**\n     * Takes any given array and prints out with System.out.println\n     *\n     * @param    array   an array of objects\n     */\n    private void printArray(Object[] array);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it tries all known packages\n     * to see if any of them will work with the class name.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private Class getClass(String name);\n\n    /**\n     * Takes a given class name and tries to to find the class.\n     * If the initial try does not work it returns null.\n     *\n     * @param    name    name of class\n     *\n     * @return   found Class\n     */\n    private static Class tryClass(String name);\n\n    /**\n     * Prints out class info with System.out.println\n     */\n    private void printClassInfo();\n\n    /**\n     * Main method for getting class information.\n     * Prints out data with System.out.println.\n     *\n     * @param    args    string array for main\n     */\n    public static void main(String[] args) throws Exception;\n}\n",
        "test_prompt": "// ClassInfo_8Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.\n*/\nclass ClassInfo_8Test {",
        "original_generated_code": "\n\t@Test\n\tvoid testGetFoundMethod_1() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(0);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_2() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(1);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_3() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(2);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_4() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(3);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_5() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(4);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_6() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(5);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_7() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(6);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_8() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(7);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_9() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(8);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_10() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(9);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n}\n\n// ClassInfo_9Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.\n*/\nclass ClassInfo_9Test {\n\t\t\n\t@Test\n\tvoid testGetFoundMethod_1() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(0);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_2() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(1);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_3() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(2);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_4() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(3);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_5() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(4);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_6() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(5);\n\t\tassertEquals(\"public static final int java.awt.WindowConstants.EXIT_ON_CLOSE\", methodData.toString());\n\t}\n\t\n\t@Test\n\tvoid testGetFoundMethod_7() throws Exception {\n\t\tClassInfo classInfo = new ClassInfo(\"java.awt.WindowConstants\");\n\t\tclassInfo.srchMethods(\"EXIT_ON_CLOSE\");\n\t\tMethodData methodData = classInfo.getFoundMethod(6);\n\t\tassertEquals",
        "applied_heuristics": "H1"
    }
]