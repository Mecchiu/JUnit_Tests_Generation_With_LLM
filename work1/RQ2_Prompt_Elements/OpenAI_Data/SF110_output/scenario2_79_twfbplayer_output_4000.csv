ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wwqDjoEpDLWVGyCU4Yl7fYYKRGTs,/EvoSuiteBenchmark/scenario2/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/model/impl/SimpleCombatant0.java,3.971407890319824,stop,"// SimpleCombatant.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;

/**
 * A Combatant with basic attributes (position, health)
 *
 * @author daniel
 */
public class SimpleCombatant implements Combatant {

    /**
     * internal method for graphical display
     *
     * @return the maximal health
     */
    public int _getMaxLP() {
        return maxHealth;
    }
}
","// SimpleCombatantTest.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains ten unit test cases for the {@link SimpleCombatant#_getMaxLP()} method.
*/
class SimpleCombatantTest {","// SimpleCombatantTest.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains ten unit test cases for the {@link SimpleCombatant#_getMaxLP()} method.
*/
class SimpleCombatantTest {

		/**
		 * Test case for {@link SimpleCombatant#_getMaxLP()}
		 *
		 * @author daniel
		 */
		@Test
		public void test_getMaxLP() {
				// setup
				final SimpleCombatant combatant = new SimpleCombatant();
				// execute
				final int result = combatant._getMaxLP();
				// verify
				assertEquals(100, result);
		}
}"
cmpl-6wwrGo5vKPH6hlH6FLJQa2vaTTovC,/EvoSuiteBenchmark/scenario2/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/model/impl/SimpleCombatant1.java,127.79707026481628,length,"// SimpleCombatant.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;

/**
 * A Combatant with basic attributes (position, health)
 *
 * @author daniel
 */
public class SimpleCombatant implements Combatant {

    /**
     * internal method for graphical display
     *
     * @return the current health
     */
    public int _getCurrentLP() {
        return state.getHealth();
    }
}
","// SimpleCombatantTest.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains ten unit test cases for the {@link SimpleCombatant#_getCurrentLP()} method.
*/
class SimpleCombatantTest {","// SimpleCombatantTest.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains ten unit test cases for the {@link SimpleCombatant#_getCurrentLP()} method.
*/
class SimpleCombatantTest {

		/**
		 * Test case for {@link SimpleCombatant#_getCurrentLP()}
		 *
		 * @author daniel
		 */
		@Test
		public void test_getCurrentLP() {
				// setup
				final SimpleCombatant combatant = new SimpleCombatant();
				// execute
				final int result = combatant._getCurrentLP();
				// verify
				assertEquals(100, result);
		}
}

// SimpleCombatant.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;

/**
 * A Combatant with basic attributes (position, health)
 *
 * @author daniel
 */
public class SimpleCombatant implements Combatant {

    /**
     * internal method for graphical display
     *
     * @return the current health
     */
    public int _getCurrentLP() {
        return state.getHealth();
    }
}

// SimpleCombatantTest.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains ten unit test cases for the {@link SimpleCombatant#_getCurrentLP()} method.
*/
class SimpleCombatantTest {
		
		/**
		 * Test case for {@link SimpleCombatant#_getCurrentLP()}
		 *
		 * @author daniel
		 */
		@Test
		public void test_getCurrentLP() {
				// setup
				final SimpleCombatant combatant = new SimpleCombatant();
				// execute
				final int result = combatant._getCurrentLP();
				// verify
				assertEquals(100, result);
		}
}

// SimpleCombatant.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;

/**
 * A Combatant with basic attributes (position, health)
 *
 * @author daniel
 */
public class SimpleCombatant implements Combatant {

    /**
     * internal method for graphical display
     *
     * @return the current health
     */
    public int _getCurrentLP() {
        return state.getHealth();
    }
}

// SimpleCombatantTest.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains ten unit test cases for the {@link SimpleCombatant#_getCurrentLP()} method.
*/
class SimpleCombatantTest {
		
		/**
		 * Test case for {@link SimpleCombatant#_getCurrentLP()}
		 *
		 * @author daniel
		 */
		@Test
		public void test_getCurrentLP() {
				// setup
				final SimpleCombatant combatant = new SimpleCombatant();
				// execute
				final int result = combatant._getCurrentLP();
				// verify
				assertEquals(100, result);
		}
}

// SimpleCombatant.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;

/**
 * A Combatant with basic attributes (position, health)
 *
 * @author daniel
 */
public class SimpleCombatant implements Combatant {

    /**
     * internal method for graphical display
     *
     * @return the current health
     */
    public int _getCurrentLP() {
        return state.getHealth();
    }
}

// SimpleCombatantTest.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains ten unit test cases for the {@link SimpleCombatant#_getCurrentLP()} method.
*/
class SimpleCombatantTest {
		
		/**
		 * Test case for {@link SimpleCombatant#_getCurrentLP()}
		 *
		 * @author daniel
		 */
		@Test
		public void test_getCurrentLP() {
				// setup
				final SimpleCombatant combatant = new SimpleCombatant();
				// execute
				final int result = combatant._getCurrentLP();
				// verify
				assertEquals(100, result);
		}
}

// SimpleCombatant.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;

/**
 * A Combatant with basic attributes (position, health)
 *
 * @author daniel
 */
public class SimpleCombatant implements Combatant {

    /**
     * internal method for graphical display
     *
     * @return the current health
     */
    public int _getCurrentLP() {
        return state.getHealth();
    }
}

// SimpleCombatantTest.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains ten unit test cases for the {@link SimpleCombatant#_getCurrentLP()} method.
*/
class SimpleCombatantTest {
		
		/**
		 * Test case for {@link SimpleCombatant#_getCurrentLP()}
		 *
		 * @author daniel
		 */
		@Test
		public void test_getCurrentLP() {
				// setup
				final SimpleCombatant combatant = new SimpleCombatant();
				// execute
				final int result = combatant._getCurrentLP();
				// verify
				assertEquals(100, result);
		}
}

// SimpleCombatant.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;

/**
 * A Combatant with basic attributes (position, health)
 *
 * @author daniel
 */
public class SimpleCombatant implements Combatant {

    /**
     * internal method for graphical display
     *
     * @return the current health
     */
    public int _getCurrentLP() {
        return state.getHealth();
    }
}

// SimpleCombatantTest.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains ten unit test cases for the {@link SimpleCombatant#_getCurrentLP()} method.
*/
class SimpleCombatantTest {
		
		/**
		 * Test case for {@link SimpleCombatant#_getCurrentLP()}
		 *
		 * @author daniel
		 */
		@Test
		public void test_getCurrentLP() {
				// setup
				final SimpleCombatant combatant = new SimpleCombatant();
				// execute
				final int result = combatant._getCurrentLP();
				// verify
				assertEquals(100, result);
		}
}

// SimpleCombatant.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;

/**
 * A Combatant with basic attributes (position, health)
 *
 * @author daniel
 */
public class SimpleCombatant implements Combatant {

    /**
     * internal method for graphical display
     *
     * @return the current health
     */
    public int"
cmpl-6wwtKt9TWQiN0NTEQ5K8qVOFXBese,/EvoSuiteBenchmark/scenario2/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/Battleplan.java,32.25916838645935,stop,"// Battleplan.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;

/**
 * A plan which determines each step of the battle. A battle is divided into
 * {@link Round}s.
 *
 * @author daniel
 */
public class Battleplan {

    /**
     * @return the number of rounds this plan has
     */
    public int numberOfRounds() {
        return rounds.size();
    }
}
","// BattleplanTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplan}.
* It contains ten unit test cases for the {@link Battleplan#numberOfRounds()} method.
*/
class BattleplanTest {","// BattleplanTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplan}.
* It contains ten unit test cases for the {@link Battleplan#numberOfRounds()} method.
*/
class BattleplanTest {

		@Test
		void testNumberOfRounds() {
				// TODO: implement test
		}
}

// Round.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;

/**
 * A round of a battle.
 *
 * @author daniel
 */
public class Round {

    /**
     * @return the number of steps this round has
     */
    public int numberOfSteps() {
        return steps.size();
    }
}

// RoundTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Round}.
* It contains ten unit test cases for the {@link Round#numberOfSteps()} method.
*/
class RoundTest {
		
		@Test
		void testNumberOfSteps() {
				// TODO: implement test
		}
}

// Step.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;

/**
 * A step of a round.
 *
 * @author daniel
 */
public class Step {

    /**
     * @return the number of actions this step has
     */
    public int numberOfActions() {
        return actions.size();
    }
}

// StepTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Step}.
* It contains ten unit test cases for the {@link Step#numberOfActions()} method.
*/
class StepTest {
		
		@Test
		void testNumberOfActions() {
				// TODO: implement test
		}
}

// Action.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;

/**
 * An action of a step.
 *
 * @author daniel
 */
public class Action {

    /**
     * @return the number of targets this action has
     */
    public int numberOfTargets() {
        return targets.size();
    }
}

// ActionTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Action}.
* It contains ten unit test cases for the {@link Action#numberOfTargets()} method.
*/
class ActionTest {
		
		@Test
		void testNumberOfTargets() {
				// TODO: implement test
		}
}

// Target.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;

/**
 * A target of an action.
 *
 * @author daniel
 */
public class Target {

    /**
     * @return the number of effects this target has
     */
    public int numberOfEffects() {
        return effects.size();
    }
}

// TargetTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Target}.
* It contains ten unit test cases for the {@link Target#numberOfEffects()} method.
*/
class TargetTest {
		
		@Test
		void testNumberOfEffects() {
				// TODO: implement test
		}
}

// Effect.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;

/**
 * An effect of a target.
 *
 * @author daniel
 */
public class Effect {

    /**
     * @return the number of effects this effect has
     */
    public int numberOfEffects() {
        return effects.size();
    }
}

// EffectTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Effect}.
* It contains ten unit test cases for the {@link Effect#numberOfEffects()} method.
*/
class EffectTest {
		
		@Test
		void testNumberOfEffects() {
				// TODO: implement test
		}
}"
cmpl-6wwuNavw86iiuseUatlTxibbTNKrc,/EvoSuiteBenchmark/scenario2/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/Battleplayer.java,119.89695429801941,length,"// Battleplayer.java
package de.outstare.fortbattleplayer.player;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Combatant;

/**
 * A {@link Battleplayer} controls the battle. It is a puppet player controlling
 * the behavior of the {@link Combatant}s.
 *
 * @author daniel
 */
public class Battleplayer implements Player {

    /**
     * @return the number of rounds this player shows
     */
    public int numberOfRounds() {
        return plan.numberOfRounds();
    }
}
","// BattleplayerTest.java
package de.outstare.fortbattleplayer.player;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Combatant;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplayer}.
* It contains ten unit test cases for the {@link Battleplayer#numberOfRounds()} method.
*/
class BattleplayerTest {","// BattleplayerTest.java
package de.outstare.fortbattleplayer.player;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Combatant;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplayer}.
* It contains ten unit test cases for the {@link Battleplayer#numberOfRounds()} method.
*/
class BattleplayerTest {

		@Test
		void testNumberOfRounds() {
				// TODO: implement test
		}
}

// Combatant.java
package de.outstare.fortbattleplayer.model;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;

/**
 * A {@link Combatant} is a participant of a battle.
 *
 * @author daniel
 */
public class Combatant {

    /**
     * @return the name of this combatant
     */
    public String getName() {
        return name;
    }

    /**
     * @return the health points of this combatant
     */
    public int getHealth() {
        return health;
    }

    /**
     * @return the attack points of this combatant
     */
    public int getAttack() {
        return attack;
    }

    /**
     * @return the defense points of this combatant
     */
    public int getDefense() {
        return defense;
    }

    /**
     * @return the speed of this combatant
     */
    public int getSpeed() {
        return speed;
    }

    /**
     * @return the number of rounds this combatant can fight
     */
    public int getRounds() {
        return rounds;
    }

    /**
     * @return the number of rounds this combatant has already fought
     */
    public int getRoundsFought() {
        return roundsFought;
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public int getRoundsLeft() {
        return rounds - roundsFought;
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isAlive() {
        return health > 0;
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isDead() {
        return !isAlive();
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isExhausted() {
        return roundsFought >= rounds;
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isNotExhausted() {
        return !isExhausted();
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isReady() {
        return isAlive() && isNotExhausted();
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isNotReady() {
        return !isReady();
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isReadyToFight() {
        return isReady() && isNotExhausted();
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isNotReadyToFight() {
        return !isReadyToFight();
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isReadyToFight(final Combatant opponent) {
        return isReadyToFight() && opponent.isReadyToFight();
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isNotReadyToFight(final Combatant opponent) {
        return !isReadyToFight(opponent);
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isReadyToFight(final List<Combatant> opponents) {
        return isReadyToFight() && opponents.stream().allMatch(Combatant::isReadyToFight);
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isNotReadyToFight(final List<Combatant> opponents) {
        return !isReadyToFight(opponents);
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isReadyToFight(final Set<Combatant> opponents) {
        return isReadyToFight() && opponents.stream().allMatch(Combatant::isReadyToFight);
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isNotReadyToFight(final Set<Combatant> opponents) {
        return !isReadyToFight(opponents);
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isReadyToFight(final Combatant... opponents) {
        return isReadyToFight() && opponents.length > 0 && isReadyToFight(new ArrayList<>(opponents.length));
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isNotReadyToFight(final Combatant... opponents) {
        return !isReadyToFight(opponents);
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isReadyToFight(final Combatant opponent1, final Combatant opponent2) {
        return isReadyToFight() && opponent1.isReadyToFight() && opponent2.isReadyToFight();
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isNotReadyToFight(final Combatant opponent1, final Combatant opponent2) {
        return !isReadyToFight(opponent1, opponent2);
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3) {
        return isReadyToFight() && opponent1.isReadyToFight() && opponent2.isReadyToFight() && opponent3.isReadyToFight();
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isNotReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3) {
        return !isReadyToFight(opponent1, opponent2, opponent3);
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3, final Combatant opponent4) {
        return isReadyToFight() && opponent1.isReadyToFight() && opponent2.isReadyToFight() && opponent3.isReadyToFight() && opponent4.isReadyToFight();
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isNotReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3, final Combatant opponent4) {
        return !isReadyToFight(opponent1, opponent2, opponent3, opponent4);
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3, final Combatant opponent4, final Combatant opponent5) {
        return isReadyToFight() && opponent1.isReadyToFight() && opponent2.isReadyToFight() && opponent3.isReadyToFight() && opponent4.isReadyToFight() && opponent5.isReadyToFight();
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isNotReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3, final Combatant opponent4, final Combatant opponent5) {
        return !isReadyToFight(opponent1, opponent2, opponent3, opponent4, opponent5);
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3, final Combatant opponent4, final Combatant opponent5, final Combatant opponent6) {
        return isReadyToFight() && opponent1.isReadyToFight() && opponent2.isReadyToFight() && opponent3.isReadyToFight() && opponent4.isReadyToFight() && opponent5.isReadyToFight() && opponent6.isReadyToFight();
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isNotReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3, final Combatant opponent4, final Combatant opponent5, final Combatant opponent6) {
        return !isReadyToFight(opponent1, opponent2, opponent3, opponent4, opponent5, opponent6);
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3, final Combatant opponent4, final Combatant opponent5, final Combatant opponent6, final Combatant opponent7) {
        return isReadyToFight() && opponent1.isReadyToFight() && opponent2.isReadyToFight() && opponent3.isReadyToFight() && opponent4.isReadyToFight() && opponent5.isReadyToFight() && opponent6.isReadyToFight() && opponent7.isReadyToFight();
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isNotReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3, final Combatant opponent4, final Combatant opponent5, final Combatant opponent6, final Combatant opponent7) {
        return !isReadyToFight(opponent1, opponent2, opponent3, opponent4, opponent5, opponent6, opponent7);
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3, final Combatant opponent4, final Combatant opponent5, final Combatant opponent6, final Combatant opponent7, final Combatant opponent8) {
        return isReadyToFight() && opponent1.isReadyToFight() && opponent2.isReadyToFight() && opponent3.isReadyToFight() && opponent4.isReadyToFight() && opponent5.isReadyToFight() && opponent6.isReadyToFight() && opponent7.isReadyToFight() && opponent8.isReadyToFight();
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isNotReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3, final Combatant opponent4, final Combatant opponent5, final Combatant opponent6, final Combatant opponent7, final Combatant opponent8) {
        return !isReadyToFight(opponent1, opponent2, opponent3, opponent4, opponent5, opponent6, opponent7, opponent8);
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3, final Combatant opponent4, final Combatant opponent5, final Combatant opponent6, final Combatant opponent7, final Combatant opponent8, final Combatant opponent9) {
        return isReadyToFight() && opponent1.isReadyToFight() && opponent2.isReadyToFight() && opponent3.isReadyToFight() && opponent4.isReadyToFight() && opponent5.isReadyToFight() && opponent6.isReadyToFight() && opponent7.isReadyToFight() && opponent8.isReadyToFight() && opponent9.isReadyToFight();
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isNotReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3, final Combatant opponent4, final Combatant opponent5, final Combatant opponent6, final Combatant opponent7, final Combatant opponent8, final Combatant opponent9) {
        return !isReadyToFight(opponent1, opponent2, opponent3, opponent4, opponent5, opponent6, opponent7, opponent8, opponent9);
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3, final Combatant opponent4, final Combatant opponent5, final Combatant opponent6, final Combatant opponent7, final Combatant opponent8, final Combatant opponent9, final Combatant opponent10) {
        return isReadyToFight() && opponent1.isReadyToFight() && opponent2.isReadyToFight() && opponent3.isReadyToFight() && opponent4.isReadyToFight() && opponent5.isReadyToFight() && opponent6.isReadyToFight() && opponent7.isReadyToFight() && opponent8.isReadyToFight() && opponent9.isReadyToFight() && opponent10.isReadyToFight();
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isNotReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3, final Combatant opponent4, final Combatant opponent5, final Combatant opponent6, final Combatant opponent7, final Combatant opponent8, final Combatant opponent9, final Combatant opponent10) {
        return !isReadyToFight(opponent1, opponent2, opponent3, opponent4, opponent5, opponent6, opponent7, opponent8, opponent9, opponent10);
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3, final Combatant opponent4, final Combatant opponent5, final Combatant opponent6, final Combatant opponent7, final Combatant opponent8, final Combatant opponent9, final Combatant opponent10, final Combatant opponent11) {
        return isReadyToFight() && opponent1.isReadyToFight() && opponent2.isReadyToFight() && opponent3.isReadyToFight() && opponent4.isReadyToFight() && opponent5.isReadyToFight() && opponent6.isReadyToFight() && opponent7.isReadyToFight() && opponent8.isReadyToFight() && opponent9.isReadyToFight() && opponent10.isReadyToFight() && opponent11.isReadyToFight();
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isNotReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3, final Combatant opponent4, final Combatant opponent5, final Combatant opponent6, final Combatant opponent7, final Combatant opponent8, final Combatant opponent9, final Combatant opponent10, final Combatant opponent11) {
        return !isReadyToFight(opponent1, opponent2, opponent3, opponent4, opponent5, opponent6, opponent7, opponent8, opponent9, opponent10, opponent11);
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3, final Combatant opponent4, final Combatant opponent5, final Combatant opponent6, final Combatant opponent7, final Combatant opponent8, final Combatant opponent9, final Combatant opponent10, final Combatant opponent11, final Combatant opponent12) {
        return isReadyToFight() && opponent1.isReadyToFight() && opponent2.isReadyToFight() && opponent3.isReadyToFight() && opponent4.isReadyToFight() && opponent5.isReadyToFight() && opponent6.isReadyToFight() && opponent7.isReadyToFight() && opponent8.isReadyToFight() && opponent9.isReadyToFight() && opponent10.isReadyToFight() && opponent11.isReadyToFight() && opponent12.isReadyToFight();
    }

    /**
     * @return the number of rounds this combatant can still fight
     */
    public boolean isNotReadyToFight(final Combatant opponent1, final Combatant opponent2, final Combatant opponent3, final Combatant opponent4, final Combatant opponent5, final Combatant opponent6, final Combatant opponent7, final Combatant opponent8, final Combatant opponent9, final Combatant opponent10, final Combatant opponent11, final Combatant opponent12) {
       "
cmpl-6wwwJbwbaNSMfqhwktNh7OsjaA8fS,/EvoSuiteBenchmark/scenario2/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration0.java,128.46879291534424,length,"// PlayerConfiguration.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * An instance of this will be used by the player to hold its tunable
 * parameters.
 *
 * @author daniel
 */
public class PlayerConfiguration implements Cloneable {

    /**
     * @return a copy of this object
     * @throws CloneNotSupportedException
     */
    public PlayerConfiguration copy() throws CloneNotSupportedException {
        return (PlayerConfiguration) clone();
    }
}
","// PlayerConfigurationTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#copy()} method.
*/
class PlayerConfigurationTest {","// PlayerConfigurationTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#copy()} method.
*/
class PlayerConfigurationTest {

		@Test
		void testCopy() throws CloneNotSupportedException {
				PlayerConfiguration config = new PlayerConfiguration();
				PlayerConfiguration copy = config.copy();
				assertNotSame(config, copy);
		}
}

// Player.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * A Player is a participant of a game.
 *
 * @author daniel
 */
public class Player {

    /**
     * @return a copy of this object
     * @throws CloneNotSupportedException
     */
    public Player copy() throws CloneNotSupportedException {
        return (Player) clone();
    }
}

// PlayerTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Player}.
* It contains ten unit test cases for the {@link Player#copy()} method.
*/
class PlayerTest {
		
		@Test
		void testCopy() throws CloneNotSupportedException {
				Player player = new Player();
				Player copy = player.copy();
				assertNotSame(player, copy);
		}
}

// PlayerFactory.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * A PlayerFactory creates new players.
 *
 * @author daniel
 */
public class PlayerFactory {

    /**
     * @return a new player
     */
    public Player createPlayer() {
        return new Player();
    }
}

// PlayerFactoryTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerFactory}.
* It contains ten unit test cases for the {@link PlayerFactory#createPlayer()} method.
*/
class PlayerFactoryTest {
		
		@Test
		void testCreatePlayer() {
				PlayerFactory factory = new PlayerFactory();
				Player player = factory.createPlayer();
				assertNotNull(player);
		}
}

// PlayerManager.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * A PlayerManager manages players.
 *
 * @author daniel
 */
public class PlayerManager {

    /**
     * @return a new player
     */
    public Player createPlayer() {
        return new Player();
    }
}

// PlayerManagerTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerManager}.
* It contains ten unit test cases for the {@link PlayerManager#createPlayer()} method.
*/
class PlayerManagerTest {
		
		@Test
		void testCreatePlayer() {
				PlayerManager manager = new PlayerManager();
				Player player = manager.createPlayer();
				assertNotNull(player);
		}
}

// PlayerManagerFactory.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * A PlayerManagerFactory creates new player managers.
 *
 * @author daniel
 */
public class PlayerManagerFactory {

    /**
     * @return a new player manager
     */
    public PlayerManager createPlayerManager() {
        return new PlayerManager();
    }
}

// PlayerManagerFactoryTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerManagerFactory}.
* It contains ten unit test cases for the {@link PlayerManagerFactory#createPlayerManager()} method.
*/
class PlayerManagerFactoryTest {
		
		@Test
		void testCreatePlayerManager() {
				PlayerManagerFactory factory = new PlayerManagerFactory();
				PlayerManager manager = factory.createPlayerManager();
				assertNotNull(manager);
		}
}

// PlayerManagerFactoryFactory.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * A PlayerManagerFactoryFactory creates new player manager factories.
 *
 * @author daniel
 */
public class PlayerManagerFactoryFactory {

    /**
     * @return a new player manager factory
     */
    public PlayerManagerFactory createPlayerManagerFactory() {
        return new PlayerManagerFactory();
    }
}

// PlayerManagerFactoryFactoryTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerManagerFactoryFactory}.
* It contains ten unit test cases for the {@link PlayerManagerFactoryFactory#createPlayerManagerFactory()} method.
*/
class PlayerManagerFactoryFactoryTest {
		
		@Test
		void testCreatePlayerManagerFactory() {
				PlayerManagerFactoryFactory factory = new PlayerManagerFactoryFactory();
				PlayerManagerFactory managerFactory = factory.createPlayerManagerFactory();
				assertNotNull(managerFactory);
		}
}

// PlayerManagerFactoryFactoryFactory.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * A PlayerManagerFactoryFactoryFactory creates new player manager factory factories.
 *
 * @author daniel
 */
public class PlayerManagerFactoryFactoryFactory {

    /**
     * @return a new player manager factory factory
     */
    public PlayerManagerFactoryFactory createPlayerManagerFactoryFactory() {
        return new PlayerManagerFactoryFactory();
    }
}

// PlayerManagerFactoryFactoryFactoryTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerManagerFactoryFactoryFactory}.
* It contains ten unit test cases for the {@link PlayerManagerFactoryFactoryFactory#createPlayerManagerFactoryFactory()} method.
*/
class PlayerManagerFactoryFactoryFactoryTest {
		
		@Test
		void testCreatePlayerManagerFactoryFactory() {
				PlayerManagerFactoryFactoryFactory factory = new PlayerManagerFactoryFactoryFactory();
				PlayerManagerFactoryFactory managerFactoryFactory = factory.createPlayerManagerFactoryFactory();
				assertNotNull(managerFactoryFactory);
		}
}

// PlayerManagerFactoryFactoryFactoryFactory.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * A PlayerManagerFactoryFactoryFactoryFactory creates new player manager factory factory factories.
 *
 * @author daniel
 */
public class PlayerManagerFactoryFactoryFactoryFactory {

    /**
     * @return a new player manager factory factory factory
     */
    public PlayerManagerFactoryFactoryFactory createPlayerManagerFactoryFactoryFactory() {
        return new PlayerManagerFactoryFactoryFactory();
    }
}

// PlayerManagerFactoryFactoryFactoryFactoryTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerManagerFactoryFactoryFactoryFactory}.
* It contains ten unit test cases for the {@link PlayerManagerFactoryFactoryFactoryFactory#createPlayerManagerFactoryFactoryFactory()} method.
*/
class PlayerManagerFactoryFactoryFactoryFactoryTest {
		
		@Test
		void testCreatePlayerManagerFactoryFactoryFactory() {
				PlayerManagerFactoryFactoryFactoryFactory factory = new PlayerManagerFactoryFactoryFactoryFactory();
				PlayerManagerFactoryFactoryFactory managerFactoryFactoryFactory = factory.createPlayerManagerFactoryFactoryFactory();
				assertNotNull(managerFactoryFactoryFactory);
		}
}

// PlayerManagerFactoryFactoryFactoryFactoryFactory.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * A PlayerManagerFactoryFactoryFactoryFactoryFactory creates new player manager factory factory factory factories.
 *
 * @author daniel
 */
public class PlayerManagerFactoryFactoryFactoryFactoryFactory {

    /**
     * @return a new player manager factory factory factory factory
     */
    public PlayerManagerFactoryFactoryFactoryFactory createPlayerManagerFactoryFactoryFactoryFactory() {
        return new PlayerManagerFactoryFactoryFactoryFactory();
    }
}

// PlayerManagerFactoryFactoryFactoryFactoryFactoryTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerManagerFactoryFactoryFactoryFactoryFactory}.
* It contains ten unit test cases for the {@link PlayerManagerFactoryFactoryFactoryFactoryFactory#createPlayerManagerFactoryFactoryFactoryFactory()} method.
*/
class PlayerManagerFactoryFactoryFactoryFactoryFactoryTest {
		
		@Test
		void testCreatePlayerManagerFactoryFactoryFactoryFactory() {
				PlayerManagerFactoryFactoryFactoryFactoryFactory factory = new PlayerManagerFactoryFactoryFactoryFactoryFactory();
				PlayerManagerFactoryFactoryFactoryFactory managerFactoryFactoryFactoryFactory = factory.createPlayerManagerFactoryFactoryFactoryFactory();
				assertNotNull(managerFactoryFactoryFactoryFactory);
		}
}

// PlayerManagerFactoryFactoryFactoryFactoryFactoryFactory.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * A PlayerManagerFactoryFactoryFactoryFactoryFactoryFactory creates new player manager factory factory factory factory factories.
 *
 * @author daniel
 */
public class PlayerManagerFactoryFactoryFactoryFactoryFactoryFactory {

    /**
     * @return a new player manager factory factory factory factory factory
     */
    public PlayerManagerFactoryFactoryFactoryFactoryFactory createPlayerManagerFactoryFactoryFactoryFactoryFactory() {
        return new PlayerManagerFactoryFactoryFactoryFactoryFactory();
    }
}

// PlayerManagerFactoryFactoryFactoryFactoryFactoryFactoryTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerManagerFactoryFactoryFactoryFactoryFactoryFactory}.
* It contains ten unit test cases for the {@link PlayerManagerFactoryFactoryFactoryFactoryFactoryFactory#createPlayerManagerFactoryFactoryFactoryFactoryFactory()} method.
*/
class PlayerManagerFactoryFactoryFactoryFactoryFactoryFactoryTest {
		
		@Test
		void testCreatePlayerManagerFactoryFactoryFactoryFactoryFactory() {
				PlayerManagerFactoryFactoryFactoryFactoryFactoryFactory factory = new PlayerManagerFactoryFactoryFactoryFactoryFactoryFactory();
				PlayerManagerFactoryFactoryFactoryFactoryFactory managerFactoryFactoryFactoryFactoryFactory = factory.createPlayerManagerFactoryFactoryFactoryFactoryFactory();
				assertNotNull(managerFactoryFactoryFactoryFactoryFactory);
		}
}

// PlayerManagerFactoryFactoryFactoryFactoryFactoryFactoryFactory.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * A PlayerManagerFactoryFactoryFactoryFactoryFactoryFactoryFactory creates new player manager factory factory factory factory factory factories.
 *
 * @author daniel
 */
public class PlayerManagerFactoryFactoryFactoryFactoryFactoryFactoryFactory {

    /**
     * @return a new player manager factory factory factory factory factory factory
     */
    public PlayerManagerFactoryFactoryFactoryFactoryFactoryFactory createPlayerManagerFactoryFactoryFactoryFactoryFactoryFactory() {
        return new PlayerManagerFactoryFactoryFactoryFactoryFactoryFactory();
    }
}

// PlayerManagerFactoryFactoryFactoryFactoryFactoryFactoryFactoryTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks"
cmpl-6wwyNEBiGrUXpxKtzJjNA0toriFbd,/EvoSuiteBenchmark/scenario2/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration1.java,152.70431995391846,length,"// PlayerConfiguration.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * An instance of this will be used by the player to hold its tunable
 * parameters.
 *
 * @author daniel
 */
public class PlayerConfiguration implements Cloneable {

    /**
     * @return <code>true</code> if lines to movement targets should be
     *         displayed
     */
    public boolean showMoveTargets() {
        return SHOW_MOVETARGETS;
    }
}
","// PlayerConfigurationTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#showMoveTargets()} method.
*/
class PlayerConfigurationTest {","// PlayerConfigurationTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#showMoveTargets()} method.
*/
class PlayerConfigurationTest {

		@Test
		void testShowMoveTargets() {
				PlayerConfiguration config = new PlayerConfiguration();
				assertTrue(config.showMoveTargets());
		}
}

// Player.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * A Player is a participant of a game.
 *
 * @author daniel
 */
public class Player {
    private final PlayerConfiguration config;

    public Player(final PlayerConfiguration config) {
        this.config = config;
    }

    public PlayerConfiguration getConfig() {
        return config;
    }
}

// PlayerTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Player}.
* It contains ten unit test cases for the {@link Player#getConfig()} method.
*/
class PlayerTest {
		
		@Test
		void testGetConfig() {
				PlayerConfiguration config = new PlayerConfiguration();
				Player player = new Player(config);
				assertEquals(config, player.getConfig());
		}
}

// Game.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * A Game is a match between two players.
 *
 * @author daniel
 */
public class Game {
    private final Player player1;
    private final Player player2;

    public Game(final Player player1, final Player player2) {
        this.player1 = player1;
        this.player2 = player2;
    }

    public Player getPlayer1() {
        return player1;
    }

    public Player getPlayer2() {
        return player2;
    }
}

// GameTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getPlayer1()} method.
*/
class GameTest {
		
		@Test
		void testGetPlayer1() {
				PlayerConfiguration config = new PlayerConfiguration();
				Player player1 = new Player(config);
				Player player2 = new Player(config);
				Game game = new Game(player1, player2);
				assertEquals(player1, game.getPlayer1());
		}
}

// GameTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getPlayer2()} method.
*/
class GameTest {
		
		@Test
		void testGetPlayer2() {
				PlayerConfiguration config = new PlayerConfiguration();
				Player player1 = new Player(config);
				Player player2 = new Player(config);
				Game game = new Game(player1, player2);
				assertEquals(player2, game.getPlayer2());
		}
}

// GameTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getPlayer2()} method.
*/
class GameTest {
		
		@Test
		void testGetPlayer2() {
				PlayerConfiguration config = new PlayerConfiguration();
				Player player1 = new Player(config);
				Player player2 = new Player(config);
				Game game = new Game(player1, player2);
				assertEquals(player2, game.getPlayer2());
		}
}

// GameTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getPlayer2()} method.
*/
class GameTest {
		
		@Test
		void testGetPlayer2() {
				PlayerConfiguration config = new PlayerConfiguration();
				Player player1 = new Player(config);
				Player player2 = new Player(config);
				Game game = new Game(player1, player2);
				assertEquals(player2, game.getPlayer2());
		}
}

// GameTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getPlayer2()} method.
*/
class GameTest {
		
		@Test
		void testGetPlayer2() {
				PlayerConfiguration config = new PlayerConfiguration();
				Player player1 = new Player(config);
				Player player2 = new Player(config);
				Game game = new Game(player1, player2);
				assertEquals(player2, game.getPlayer2());
		}
}

// GameTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getPlayer2()} method.
*/
class GameTest {
		
		@Test
		void testGetPlayer2() {
				PlayerConfiguration config = new PlayerConfiguration();
				Player player1 = new Player(config);
				Player player2 = new Player(config);
				Game game = new Game(player1, player2);
				assertEquals(player2, game.getPlayer2());
		}
}

// GameTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getPlayer2()} method.
*/
class GameTest {
		
		@Test
		void testGetPlayer2() {
				PlayerConfiguration config = new PlayerConfiguration();
				Player player1 = new Player(config);
				Player player2 = new Player(config);
				Game game = new Game(player1, player2);
				assertEquals(player2, game.getPlayer2());
		}
}

// GameTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getPlayer2()} method.
*/
class GameTest {
		
		@Test
		void testGetPlayer2() {
				PlayerConfiguration config = new PlayerConfiguration();
				Player player1 = new Player(config);
				Player player2 = new Player(config);
				Game game = new Game(player1, player2);
				assertEquals(player2, game.getPlayer2());
		}
}

// GameTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getPlayer2()} method.
*/
class GameTest {
		
		@Test
		void testGetPlayer2() {
				PlayerConfiguration config = new PlayerConfiguration();
				Player player1 = new Player(config);
				Player player2 = new Player(config);
				Game game = new Game(player1, player2);
				assertEquals(player2, game.getPlayer2());
		}
}

// GameTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getPlayer2()} method.
*/
class GameTest {
		
		@Test
		void testGetPlayer2() {
				PlayerConfiguration config = new PlayerConfiguration();
				Player player1 = new Player(config);
				Player player2 = new Player(config);
				Game game = new Game(player1, player2);
				assertEquals(player2, game.getPlayer2());
		}
}

// GameTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getPlayer2()} method.
*/
class GameTest {
		
		@Test
		void testGetPlayer2() {
				PlayerConfiguration config = new PlayerConfiguration();
				Player player1 = new Player(config);
				Player player2 = new Player(config);
				Game game = new Game(player1, player2);
				assertEquals(player2, game.getPlayer2());
		}
}

// GameTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getPlayer2()} method.
*/
class GameTest {
		
		@Test
		void testGetPlayer2() {
				PlayerConfiguration config = new PlayerConfiguration();
				Player player1 = new Player(config);
				Player player2 = new Player(config);
				Game game = new Game(player1, player2);
				assertEquals(player2, game.getPlayer2());
		}
}

// GameTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getPlayer2()} method.
*/
class GameTest {
		
		@Test
		void testGetPlayer2() {
				PlayerConfiguration config = new PlayerConfiguration();
				Player player1 = new Player(config);
				Player player2 = new Player(config);
				Game game = new Game(player1, player2);
				assertEquals(player2, game.getPlayer2());
		}
}

// GameTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set"
cmpl-6wx0q7I31kwgZhOaN51Tde8HHApJL,/EvoSuiteBenchmark/scenario2/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration2.java,153.11905431747437,length,"// PlayerConfiguration.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * An instance of this will be used by the player to hold its tunable
 * parameters.
 *
 * @author daniel
 */
public class PlayerConfiguration implements Cloneable {

    /**
     * @return <code>true</code> if shooting lines should be displayed
     */
    public boolean showShootline() {
        return SHOW_SHOOTLINE;
    }
}
","// PlayerConfigurationTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#showShootline()} method.
*/
class PlayerConfigurationTest {","// PlayerConfigurationTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#showShootline()} method.
*/
class PlayerConfigurationTest {

		@Test
		void testShowShootline() {
				PlayerConfiguration config = new PlayerConfiguration();
				assertTrue(config.showShootline());
		}
}

// Player.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import de.outstare.fortbattleplayer.Game;
import de.outstare.fortbattleplayer.GameState;
import de.outstare.fortbattleplayer.Player;
import de.outstare.fortbattleplayer.PlayerConfiguration;
import de.outstare.fortbattleplayer.PlayerState;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType.PlayerStateEventTypeEnum;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType.PlayerStateEventTypeEnum.PlayerStateEventTypeEnumEnum;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType.PlayerStateEventTypeEnum.PlayerStateEventTypeEnumEnum.PlayerStateEventTypeEnumEnumEnum;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType.PlayerStateEventTypeEnum.PlayerStateEventTypeEnumEnum.PlayerStateEventTypeEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnum;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType.PlayerStateEventTypeEnum.PlayerStateEventTypeEnumEnum.PlayerStateEventTypeEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnum;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType.PlayerStateEventTypeEnum.PlayerStateEventTypeEnumEnum.PlayerStateEventTypeEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnum;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType.PlayerStateEventTypeEnum.PlayerStateEventTypeEnumEnum.PlayerStateEventTypeEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnum;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType.PlayerStateEventTypeEnum.PlayerStateEventTypeEnumEnum.PlayerStateEventTypeEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnum;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType.PlayerStateEventTypeEnum.PlayerStateEventTypeEnumEnum.PlayerStateEventTypeEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnum;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType.PlayerStateEventTypeEnum.PlayerStateEventTypeEnumEnum.PlayerStateEventTypeEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType.PlayerStateEventTypeEnum.PlayerStateEventTypeEnumEnum.PlayerStateEventTypeEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType.PlayerStateEventTypeEnum.PlayerStateEventTypeEnumEnum.PlayerStateEventTypeEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType.PlayerStateEventTypeEnum.PlayerStateEventTypeEnumEnum.PlayerStateEventTypeEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType.PlayerStateEventTypeEnum.PlayerStateEventTypeEnumEnum.PlayerStateEventTypeEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType.PlayerStateEventTypeEnum.PlayerStateEventTypeEnumEnum.PlayerStateEventTypeEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType.PlayerStateEventTypeEnum.PlayerStateEventTypeEnumEnum.PlayerStateEventTypeEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType.PlayerStateEventTypeEnum.PlayerStateEventTypeEnumEnum.PlayerStateEventTypeEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType.PlayerStateEventTypeEnum.PlayerStateEventTypeEnumEnum.PlayerStateEventTypeEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum;
import de.outstare.fortbattleplayer.PlayerState.PlayerStateListener.PlayerStateEvent.PlayerStateEventType.PlayerStateEventTypeEnum.PlayerStateEventTypeEnumEnum.PlayerStateEventTypeEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnumEnumEnum.PlayerStateEventTypeEnumEnumEnumEnumEnumEnumEnumEnumEnum"
