[
    {
        "id": "cmpl-6wrPIFoGpGSOhLuYd8cLFLrKxFqmk",
        "object": "text_completion",
        "created": 1679486340,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// SBMLFilterTest.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains ten unit test cases for the {@link SBMLFilter#accept(File)} method.\n*/\nclass SBMLFilterTest {\n\t\t\n\t/**\n\t* Test of accept method, of class SBMLFilter.\n\t*/\n\t@Test\n\tvoid testAccept() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = null;\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t\t// TODO review the generated test code and remove the default call to fail.\n\t\tfail(\"The test case is a prototype.\");\n\t}\n\t\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "stop"
            }
        ],
        "usage": {
            "prompt_tokens": 454,
            "completion_tokens": 137,
            "total_tokens": 591
        },
        "time_taken": 7.169511318206787,
        "prompt_id": "/EvoSuiteBenchmark/scenario1/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter0.java",
        "original_code": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    public boolean accept(File file) {\n        String fileName = file.getName();\n        boolean firstPass = false;\n        //  First test:  file must end with one of the registered file extensions.\n        for (int i = 0; i < fileExtensions.length; i++) {\n            if (fileName.endsWith(fileExtensions[i])) {\n                firstPass = true;\n            }\n        }\n        if (firstPass) {\n            //  Second test:  file header must contain the biopax declaration\n            try {\n                String header = getHeader(file);\n                if (header.indexOf(\"www.sbml.org\") > 0) {\n                    return true;\n                }\n            } catch (IOException e) {\n            }\n        }\n        return false;\n    }\n}\n",
        "test_prompt": "// SBMLFilterTest.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains ten unit test cases for the {@link SBMLFilter#accept(File)} method.\n*/\nclass SBMLFilterTest {",
        "original_generated_code": "\n\t/**\n\t* Test of accept method, of class SBMLFilter.\n\t*/\n\t@Test\n\tvoid testAccept() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = null;\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t\t// TODO review the generated test code and remove the default call to fail.\n\t\tfail(\"The test case is a prototype.\");\n\t}\n\t\n}",
        "applied_heuristics": ""
    },
    {
        "id": "cmpl-6wrQLRfAfn1A9jvh8OFdbpl9LL3nj",
        "object": "text_completion",
        "created": 1679486405,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// SBMLFilterTest.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains ten unit test cases for the {@link SBMLFilter#getReader(String)} method.\n*/\nclass SBMLFilterTest {\n\t\t\n\t/**\n\t* Test of getReader method, of class SBMLFilter.\n\t*/\n\t@Test\n\tvoid testGetReader() {\n\t\tSystem.out.println(\"getReader\");\n\t\tString fileName = \"\";\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader expResult = null;\n\t\tGraphReader result = instance.getReader(fileName);\n\t\tassertEquals(expResult, result);\n\t\t// TODO review the generated test code and remove the default call to fail.\n\t\tfail(\"The test case is a prototype.\");\n\t}\n\t\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": null
            }
        ],
        "usage": {
            "prompt_tokens": 435,
            "completion_tokens": 143,
            "total_tokens": 578
        },
        "time_taken": 3.7555503845214844,
        "prompt_id": "/EvoSuiteBenchmark/scenario1/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter1.java",
        "original_code": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    public GraphReader getReader(String fileName) {\n        System.out.println(\"Getting SBML reader ...\");\n        try {\n            // Test if libsbml library is available\n            System.loadLibrary(\"sbmlj\");\n            /* Extra check to be sure we have access to libSBML: */\n            Class.forName(\"org.sbml.libsbml.libsbml\");\n            // Use the libSBML based parser\n            System.out.println(\"... using 'libsbml parser'\");\n            return new SBMLGraphReader2(fileName);\n        } catch (Exception e) {\n            // If any error occurs use the classic SBML Reader\n            return new SBMLGraphReader(fileName);\n        }\n    }\n}\n",
        "test_prompt": "// SBMLFilterTest.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains ten unit test cases for the {@link SBMLFilter#getReader(String)} method.\n*/\nclass SBMLFilterTest {",
        "original_generated_code": "\n\t/**\n\t* Test of getReader method, of class SBMLFilter.\n\t*/\n\t@Test\n\tvoid testGetReader() {\n\t\tSystem.out.println(\"getReader\");\n\t\tString fileName = \"\";\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader expResult = null;\n\t\tGraphReader result = instance.getReader(fileName);\n\t\tassertEquals(expResult, result);\n\t\t// TODO review the generated test code and remove the default call to fail.\n\t\tfail(\"The test case is a prototype.\");\n\t}\n\t\n}",
        "applied_heuristics": ""
    },
    {
        "id": "cmpl-6wrRO6ccMivhIo1oTfl0A7Y3ffbj3",
        "object": "text_completion",
        "created": 1679486470,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// SBMLVisualStyleFactoryTest.java\npackage sbmlreader2;\n\nimport cytoscape.*;\nimport cytoscape.visual.*;\nimport cytoscape.visual.calculators.*;\nimport cytoscape.visual.mappings.*;\nimport java.awt.Color;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLVisualStyleFactory}.\n* It contains ten unit test cases for the {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n*/\nclass SBMLVisualStyleFactoryTest {\n\t\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the visual style is created correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyle() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tassertEquals(visualStyle.getName(), \"SBMLReader\");\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node shape is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeShape() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tCalculator shapeCalculator = nodeAppCalc.getCalculator(VisualPropertyType.NODE_SHAPE);\n\t\tDiscreteMapping disMapping = (DiscreteMapping) shapeCalculator.getMapping(0);\n\t\tassertEquals(disMapping.getMapValue(\"species\"), NodeShape.DIAMOND);\n\t\tassertEquals(disMapping.getMapValue(\"reaction\"), NodeShape.ELLIPSE);\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node label is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeLabel() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tCalculator nlc = nodeAppCalc.getCalculator(VisualPropertyType.NODE_LABEL);\n\t\tPassThroughMapping m = (PassThroughMapping) nlc.getMapping(0);\n\t\tassertEquals(m.getControllingAttributeName(), \"sbml name\");\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node size is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeSize() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tCalculator sizeCalculator = nodeAppCalc.getCalculator(VisualPropertyType.NODE_SIZE);\n\t\tDiscreteMapping sizeMapping = (DiscreteMapping) sizeCalculator.getMapping(0);\n\t\tassertEquals(sizeMapping.getMapValue(\"species\"), 30.0);\n\t\tassertEquals(sizeMapping.getMapValue(\"reaction\"), 30.0);\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the edge arrow shape is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleEdgeArrowShape() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tEdgeAppearanceCalculator edgeAppCalc = visualStyle.getEdgeAppearanceCalculator();\n\t\tCalculator edgeArrowCalculator = edgeAppCalc.getCalculator(VisualPropertyType.EDGE_SRCARROW_SHAPE);\n\t\tDiscreteMapping arrowMapping = (DiscreteMapping) edgeArrowCalculator.getMapping(0);\n\t\tassertEquals(arrowMapping.getMapValue(\"reaction-product\"), ArrowShape.ARROW);\n\t\tassertEquals(arrowMapping.getMapValue(\"reaction-reactant\"), ArrowShape.NONE);\n\t\tassertEquals(arrowMapping.getMapValue(\"reaction-modifier\"), ArrowShape.CIRCLE);\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the edge colour is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleEdgeColor() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tEdgeAppearanceCalculator edgeAppCalc = visualStyle.getEdgeAppearanceCalculator();\n\t\tCalculator edgeColorCalculator = edgeAppCalc.getCalculator(VisualPropertyType.EDGE_COLOR);\n\t\tDiscreteMapping edgeColorMapping = (DiscreteMapping) edgeColorCalculator.getMapping(0);\n\t\tassertEquals(edgeColorMapping.getMapValue(\"reaction-product\"), Color.GREEN);\n\t\tassertEquals(edgeColorMapping.getMapValue(\"reaction-reactant\"), Color.RED);\n\t\tassertEquals(edgeColorMapping.getMapValue(\"reaction-modifier\"), Color.BLACK);\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node size is locked.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeSizeLocked() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tassertTrue(nodeAppCalc.getNodeSizeLocked());\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node shape is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeShape2() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tCalculator shapeCalculator = nodeAppCalc.getCalculator(VisualPropertyType.NODE_SHAPE);\n\t\tDiscreteMapping disMapping = (DiscreteMapping) shapeCalculator.getMapping(0);\n\t\tassertEquals(disMapping.getMapValue(\"species\"), NodeShape.DIAMOND);\n\t\tassertEquals(disMapping.getMapValue(\"reaction\"), NodeShape.ELLIPSE);\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node label is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeLabel2() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tCalculator nlc = nodeAppCalc.getCalculator(VisualPropertyType.NODE_LABEL);\n\t\tPassThroughMapping m = (PassThroughMapping) nlc.getMapping(0);\n\t\tassertEquals(m.getControllingAttributeName(), \"sbml name\");\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node size is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeSize2() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tCalculator sizeCalculator = nodeAppCalc.getCalculator(VisualPropertyType.NODE_SIZE);\n}\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 1336,
            "completion_tokens": 2000,
            "total_tokens": 3336
        },
        "time_taken": 50.730175256729126,
        "prompt_id": "/EvoSuiteBenchmark/scenario1/34_sbmlreader2/src/main/java/sbmlreader2/SBMLVisualStyleFactory.java",
        "original_code": "// SBMLVisualStyleFactory.java\npackage sbmlreader2;\n\nimport cytoscape.*;\nimport cytoscape.visual.*;\nimport cytoscape.visual.calculators.*;\nimport cytoscape.visual.mappings.*;\nimport java.awt.Color;\n\n/**\n * VisualStyleFactory.java\n * This class defines the visualstyle in Cytoscape for the SBMLReader plugin.\n *\n * @author W.P.A. Ligtenberg, Eindhoven University of Technology\n */\npublic class SBMLVisualStyleFactory {\n\n    public static VisualStyle createVisualStyle(CyNetwork network) {\n        VisualMappingManager vmManager = Cytoscape.getVisualMappingManager();\n        NodeAppearanceCalculator nodeAppCalc = new NodeAppearanceCalculator();\n        EdgeAppearanceCalculator edgeAppCalc = new EdgeAppearanceCalculator();\n        CalculatorCatalog calculatorCatalog = vmManager.getCalculatorCatalog();\n        // ------------------------------ Set node shapes ---------------------------//\n        DiscreteMapping disMapping = new DiscreteMapping(NodeShape.RECT, ObjectMapping.NODE_MAPPING);\n        disMapping.setControllingAttributeName(NODE_TYPE_ATT, network, false);\n        disMapping.putMapValue(\"species\", NodeShape.DIAMOND);\n        disMapping.putMapValue(\"reaction\", NodeShape.ELLIPSE);\n        Calculator shapeCalculator = new BasicCalculator(\"SBMLReader Shape Calculator\", disMapping, VisualPropertyType.NODE_SHAPE);\n        nodeAppCalc.setCalculator(shapeCalculator);\n        // ------------------------------ Set the label ------------------------------//\n        // Display the value for geneName as a label\n        String cName = \"sbml name\";\n        Calculator nlc = calculatorCatalog.getCalculator(VisualPropertyType.NODE_LABEL, cName);\n        if (nlc == null) {\n            PassThroughMapping m = new PassThroughMapping(new String(), cName);\n            nlc = new BasicCalculator(cName, m, VisualPropertyType.NODE_LABEL);\n        }\n        nodeAppCalc.setCalculator(nlc);\n        //--------------------- Set the size of the nodes --------------------------//\n        //Discrete mapping on nodeType\n        Double speciesNodeSize = new Double(30);\n        Double reactionNodeSize = new Double(30);\n        DiscreteMapping sizeMapping = new DiscreteMapping(reactionNodeSize, ObjectMapping.NODE_MAPPING);\n        sizeMapping.setControllingAttributeName(NODE_TYPE_ATT, network, false);\n        sizeMapping.putMapValue(\"species\", speciesNodeSize);\n        sizeMapping.putMapValue(\"reaction\", reactionNodeSize);\n        Calculator sizeCalculator = new BasicCalculator(\"SBMLReader Size Calculator\", sizeMapping, VisualPropertyType.NODE_SIZE);\n        nodeAppCalc.setCalculator(sizeCalculator);\n        nodeAppCalc.setNodeSizeLocked(true);\n        // ------------------------------ Set edge arrow shape ---------------------------//\n        DiscreteMapping arrowMapping = new DiscreteMapping(ArrowShape.DELTA, ObjectMapping.NODE_MAPPING);\n        arrowMapping.setControllingAttributeName(EDGE_TYPE_ATT, network, false);\n        arrowMapping.putMapValue(\"reaction-product\", ArrowShape.ARROW);\n        arrowMapping.putMapValue(\"reaction-reactant\", ArrowShape.NONE);\n        arrowMapping.putMapValue(\"reaction-modifier\", ArrowShape.CIRCLE);\n        Calculator edgeArrowCalculator = new BasicCalculator(\"SBMLReader Edge Arrow Calculator\", arrowMapping, VisualPropertyType.EDGE_SRCARROW_SHAPE);\n        edgeAppCalc.setCalculator(edgeArrowCalculator);\n        // ------------------------------ Set edge colour ---------------------------//\n        DiscreteMapping edgeColorMapping = new DiscreteMapping(Color.BLACK, ObjectMapping.NODE_MAPPING);\n        edgeColorMapping.setControllingAttributeName(EDGE_TYPE_ATT, network, false);\n        edgeColorMapping.putMapValue(\"reaction-product\", Color.GREEN);\n        edgeColorMapping.putMapValue(\"reaction-reactant\", Color.RED);\n        edgeColorMapping.putMapValue(\"reaction-modifier\", Color.BLACK);\n        Calculator edgeColorCalculator = new BasicCalculator(\"SBMLReader Edge Color Calculator\", edgeColorMapping, VisualPropertyType.EDGE_COLOR);\n        edgeAppCalc.setCalculator(edgeColorCalculator);\n        //------------------------- Create a visual style -------------------------------//\n        GlobalAppearanceCalculator gac = vmManager.getVisualStyle().getGlobalAppearanceCalculator();\n        VisualStyle visualStyle = new VisualStyle(SBMLReader_VS, nodeAppCalc, edgeAppCalc, gac);\n        return visualStyle;\n    }\n}\n",
        "test_prompt": "// SBMLVisualStyleFactoryTest.java\npackage sbmlreader2;\n\nimport cytoscape.*;\nimport cytoscape.visual.*;\nimport cytoscape.visual.calculators.*;\nimport cytoscape.visual.mappings.*;\nimport java.awt.Color;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLVisualStyleFactory}.\n* It contains ten unit test cases for the {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n*/\nclass SBMLVisualStyleFactoryTest {",
        "original_generated_code": "\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the visual style is created correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyle() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tassertEquals(visualStyle.getName(), \"SBMLReader\");\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node shape is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeShape() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tCalculator shapeCalculator = nodeAppCalc.getCalculator(VisualPropertyType.NODE_SHAPE);\n\t\tDiscreteMapping disMapping = (DiscreteMapping) shapeCalculator.getMapping(0);\n\t\tassertEquals(disMapping.getMapValue(\"species\"), NodeShape.DIAMOND);\n\t\tassertEquals(disMapping.getMapValue(\"reaction\"), NodeShape.ELLIPSE);\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node label is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeLabel() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tCalculator nlc = nodeAppCalc.getCalculator(VisualPropertyType.NODE_LABEL);\n\t\tPassThroughMapping m = (PassThroughMapping) nlc.getMapping(0);\n\t\tassertEquals(m.getControllingAttributeName(), \"sbml name\");\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node size is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeSize() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tCalculator sizeCalculator = nodeAppCalc.getCalculator(VisualPropertyType.NODE_SIZE);\n\t\tDiscreteMapping sizeMapping = (DiscreteMapping) sizeCalculator.getMapping(0);\n\t\tassertEquals(sizeMapping.getMapValue(\"species\"), 30.0);\n\t\tassertEquals(sizeMapping.getMapValue(\"reaction\"), 30.0);\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the edge arrow shape is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleEdgeArrowShape() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tEdgeAppearanceCalculator edgeAppCalc = visualStyle.getEdgeAppearanceCalculator();\n\t\tCalculator edgeArrowCalculator = edgeAppCalc.getCalculator(VisualPropertyType.EDGE_SRCARROW_SHAPE);\n\t\tDiscreteMapping arrowMapping = (DiscreteMapping) edgeArrowCalculator.getMapping(0);\n\t\tassertEquals(arrowMapping.getMapValue(\"reaction-product\"), ArrowShape.ARROW);\n\t\tassertEquals(arrowMapping.getMapValue(\"reaction-reactant\"), ArrowShape.NONE);\n\t\tassertEquals(arrowMapping.getMapValue(\"reaction-modifier\"), ArrowShape.CIRCLE);\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the edge colour is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleEdgeColor() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tEdgeAppearanceCalculator edgeAppCalc = visualStyle.getEdgeAppearanceCalculator();\n\t\tCalculator edgeColorCalculator = edgeAppCalc.getCalculator(VisualPropertyType.EDGE_COLOR);\n\t\tDiscreteMapping edgeColorMapping = (DiscreteMapping) edgeColorCalculator.getMapping(0);\n\t\tassertEquals(edgeColorMapping.getMapValue(\"reaction-product\"), Color.GREEN);\n\t\tassertEquals(edgeColorMapping.getMapValue(\"reaction-reactant\"), Color.RED);\n\t\tassertEquals(edgeColorMapping.getMapValue(\"reaction-modifier\"), Color.BLACK);\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node size is locked.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeSizeLocked() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tassertTrue(nodeAppCalc.getNodeSizeLocked());\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node shape is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeShape2() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tCalculator shapeCalculator = nodeAppCalc.getCalculator(VisualPropertyType.NODE_SHAPE);\n\t\tDiscreteMapping disMapping = (DiscreteMapping) shapeCalculator.getMapping(0);\n\t\tassertEquals(disMapping.getMapValue(\"species\"), NodeShape.DIAMOND);\n\t\tassertEquals(disMapping.getMapValue(\"reaction\"), NodeShape.ELLIPSE);\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node label is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeLabel2() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tCalculator nlc = nodeAppCalc.getCalculator(VisualPropertyType.NODE_LABEL);\n\t\tPassThroughMapping m = (PassThroughMapping) nlc.getMapping(0);\n\t\tassertEquals(m.getControllingAttributeName(), \"sbml name\");\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node size is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeSize2() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tCalculator sizeCalculator = nodeAppCalc.getCalculator(VisualPropertyType.NODE_SIZE);\n\t\tDiscreteMapping sizeMapping = (DiscreteMapping)",
        "applied_heuristics": "H7"
    }
]