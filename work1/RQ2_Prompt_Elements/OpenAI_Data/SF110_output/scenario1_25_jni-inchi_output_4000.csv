ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6x1g52JinZEo7JxsKNNpp8CyxzqSs,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStereo0D0.java,116.78814840316772,length,"// JniInchiStereo0D.java
package net.sf.jniinchi;

/**
 * Encapsulates properites of InChI Stereo Parity.  See <tt>inchi_api.h</tt>.
 *
 * @author Sam Adams
 */
public class JniInchiStereo0D {

    public static JniInchiStereo0D createNewTetrahedralStereo0D(final JniInchiAtom atC, final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, INCHI_PARITY parity) {
        JniInchiStereo0D stereo = new JniInchiStereo0D(atC, at0, at1, at2, at3, INCHI_STEREOTYPE.TETRAHEDRAL, parity);
        return stereo;
    }
}
","// JniInchiStereo0DTest.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0DTest {","// JniInchiStereo0DTest.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0DTest {

	/**
	 * Test case for {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)}
	 * with the following parameters:
	 * <ul>
	 * <li>atC = new JniInchiAtom(""C"")</li>
	 * <li>at0 = new JniInchiAtom(""H"")</li>
	 * <li>at1 = new JniInchiAtom(""H"")</li>
	 * <li>at2 = new JniInchiAtom(""H"")</li>
	 * <li>at3 = new JniInchiAtom(""H"")</li>
	 * <li>parity = INCHI_PARITY.EVEN</li>
	 * </ul>
	 *
	 * @throws JniInchiException
	 */
	@Test
	void testCreateNewTetrahedralStereo0D_1() throws JniInchiException {
		JniInchiAtom atC = new JniInchiAtom(""C"");
		JniInchiAtom at0 = new JniInchiAtom(""H"");
		JniInchiAtom at1 = new JniInchiAtom(""H"");
		JniInchiAtom at2 = new JniInchiAtom(""H"");
		JniInchiAtom at3 = new JniInchiAtom(""H"");
		INCHI_PARITY parity = INCHI_PARITY.EVEN;
		JniInchiStereo0D result = JniInchiStereo0D.createNewTetrahedralStereo0D(atC, at0, at1, at2, at3, parity);
		assertNotNull(result);
	}
}

// JniInchiStereo0DTest.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0DTest {
		
	/**
	 * Test case for {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)}
	 * with the following parameters:
	 * <ul>
	 * <li>atC = new JniInchiAtom(""C"")</li>
	 * <li>at0 = new JniInchiAtom(""H"")</li>
	 * <li>at1 = new JniInchiAtom(""H"")</li>
	 * <li>at2 = new JniInchiAtom(""H"")</li>
	 * <li>at3 = new JniInchiAtom(""H"")</li>
	 * <li>parity = INCHI_PARITY.EVEN</li>
	 * </ul>
	 *
	 * @throws JniInchiException
	 */
	@Test
	void testCreateNewTetrahedralStereo0D_1() throws JniInchiException {
		JniInchiAtom atC = new JniInchiAtom(""C"");
		JniInchiAtom at0 = new JniInchiAtom(""H"");
		JniInchiAtom at1 = new JniInchiAtom(""H"");
		JniInchiAtom at2 = new JniInchiAtom(""H"");
		JniInchiAtom at3 = new JniInchiAtom(""H"");
		INCHI_PARITY parity = INCHI_PARITY.EVEN;
		JniInchiStereo0D result = JniInchiStereo0D.createNewTetrahedralStereo0D(atC, at0, at1, at2, at3, parity);
		assertNotNull(result);
	}
}

// JniInchiStereo0DTest.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0DTest {
		
	/**
	 * Test case for {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)}
	 * with the following parameters:
	 * <ul>
	 * <li>atC = new JniInchiAtom(""C"")</li>
	 * <li>at0 = new JniInchiAtom(""H"")</li>
	 * <li>at1 = new JniInchiAtom(""H"")</li>
	 * <li>at2 = new JniInchiAtom(""H"")</li>
	 * <li>at3 = new JniInchiAtom(""H"")</li>
	 * <li>parity = INCHI_PARITY.EVEN</li>
	 * </ul>
	 *
	 * @throws JniInchiException
	 */
	@Test
	void testCreateNewTetrahedralStereo0D_1() throws JniInchiException {
		JniInchiAtom atC = new JniInchiAtom(""C"");
		JniInchiAtom at0 = new JniInchiAtom(""H"");
		JniInchiAtom at1 = new JniInchiAtom(""H"");
		JniInchiAtom at2 = new JniInchiAtom(""H"");
		JniInchiAtom at3 = new JniInchiAtom(""H"");
		INCHI_PARITY parity = INCHI_PARITY.EVEN;
		JniInchiStereo0D result = JniInchiStereo0D.createNewTetrahedralStereo0D(atC, at0, at1, at2, at3, parity);
		assertNotNull(result);
	}
}

// JniInchiStereo0DTest.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0DTest {
		
	/**
	 * Test case for {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)}
	 * with the following parameters:
	 * <ul>
	 * <li>atC = new JniInchiAtom(""C"")</li>
	 * <li>at0 = new JniInchiAtom(""H"")</li>
	 * <li>at1 = new JniInchiAtom(""H"")</li>
	 * <li>at2 = new JniInchiAtom(""H"")</li>
	 * <li>at3 = new JniInchiAtom(""H"")</li>
	 * <li>parity = INCHI_PARITY.EVEN</li>
	 * </ul>
	 *
	 * @throws JniInchiException
	 */
	@Test
	void testCreateNewTetrahedralStereo0D_1() throws JniInchiException {
		JniInchiAtom atC = new JniInchiAtom(""C"");
		JniInchiAtom at0 = new JniInchiAtom(""H"");
		JniInchiAtom at1 = new JniInchiAtom(""H"");
		JniInchiAtom at2 = new JniInchiAtom(""H"");
		JniInchiAtom at3 = new JniInchiAtom(""H"");
		INCHI_PARITY parity = INCHI_PARITY.EVEN;
		JniInchiStereo0D result = JniInchiStereo0D.createNewTetrahedralStereo0D(atC, at0, at1, at2, at3, parity);
		assertNotNull(result);
	}
}

// JniInchiStereo0DTest.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0DTest {
		
	/**
	 * Test case for {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)}
	 * with the following parameters:
	 * <ul>
	 * <li>atC = new JniInchiAtom(""C"")</li>
	 * <li>at0 = new JniInchiAtom(""H"")</li>
	 * <li>at1 = new JniInchiAtom(""H"")</li>
	 * <li>at2 = new JniInchiAtom(""H"")</li>
	 * <li>at3 = new JniInchiAtom(""H"")</li>
	 * <li>parity = INCHI_PARITY.EVEN</li>
	 * </ul>
	 *
	 * @throws JniInchiException
	 */
	@Test
	void testCreateNewTetrahedralStereo0D_1() throws JniInchiException {
		JniInchiAtom atC = new JniInchiAtom(""C"");
		JniInchiAtom at0 = new JniInchiAtom(""H"");
		JniInchiAtom at1 = new JniInchiAtom(""H"");
		JniInchiAtom at2 = new JniInchiAtom(""H"");
		JniInchiAtom at3 = new JniInchiAtom(""H"");
		INCHI_PARITY parity = INCHI_PARITY.EVEN;
		JniInchiStereo0D result = JniInchiStereo0D.createNewTetrahedralStereo0D(atC, at0, at1, at2, at3, parity);
		assertNotNull(result);
	}
}

// JniInchiStereo0DTest.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0DTest {
		
	/**
	 * Test case for {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)}
	 * with the following parameters:
	 * <ul>
	 * <li>atC = new JniInchiAtom(""C"")</li>
	 * <li>at0 = new JniInchiAtom(""H"")</li>
	 * <li>at1 = new JniInchiAtom(""H"")</li>
	 * <li>at2 = new JniInchiAtom(""H"")</li>
	 * <li>at3 = new JniInchiAtom(""H"")</li>
	 * <li>parity = INCHI_PARITY.EVEN</li>
	 * </ul>
	 *
	 * @throws JniInchiException
	 */
	@Test
	void testCreateNewTetrahedralStereo0D_1() throws JniInchiException {
		JniInchiAtom atC = new JniInchiAtom(""C"");
		JniInchiAtom at0 = new JniInchiAtom(""H"");
		JniInchiAtom at1 = new JniInchiAtom(""H"");
		JniInchiAtom at2 = new JniInchiAtom(""H"");
		JniInchiAtom at3 = new JniInchiAtom(""H"");
		INCHI_PARITY parity = INCHI_PARITY.EVEN;
		JniInchiStereo0D result = JniInchiStereo0D.createNewTetrahedralStereo0D(atC, at0, at1, at2, at3, parity);
		assertNotNull(result);
	}
}

// JniInchiStereo0DTest.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0DTest {
		
	/**
	 * Test case for {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)}
	 * with the following parameters:
	 * <ul>
	 * <li>atC = new JniInchiAtom(""C"")</li>
	 * <li>at0 = new JniInchiAtom(""H"")</li>
	 * <li>at1 = new JniInchiAtom(""H"")</li>
	 * <li>at2 = new JniInchiAtom(""H"")</li>
	"
cmpl-6x1hyGilpGd0swalkeccpqCkvWZLQ,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStereo0D1.java,158.35798954963684,length,"// JniInchiStereo0D.java
package net.sf.jniinchi;

/**
 * Encapsulates properites of InChI Stereo Parity.  See <tt>inchi_api.h</tt>.
 *
 * @author Sam Adams
 */
public class JniInchiStereo0D {

    public static JniInchiStereo0D createNewDoublebondStereo0D(final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, final INCHI_PARITY parity) {
        JniInchiStereo0D stereo = new JniInchiStereo0D(null, at0, at1, at2, at3, INCHI_STEREOTYPE.DOUBLEBOND, parity);
        return stereo;
    }
}
","// JniInchiStereo0DTest.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewDoublebondStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0DTest {","// JniInchiStereo0DTest.java
package net.sf.jniinchi;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewDoublebondStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
*/
class JniInchiStereo0DTest {

	/**
	 * Test case for {@link JniInchiStereo0D#createNewDoublebondStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.
	 * Test data: {@link JniInchiAtom} at0, {@link JniInchiAtom} at1, {@link JniInchiAtom} at2, {@link JniInchiAtom} at3, {@link INCHI_PARITY} parity.
	 * Expected result: {@link JniInchiStereo0D} stereo.
	 */
	@Test
	void testCreateNewDoublebondStereo0D() {
		JniInchiAtom at0 = new JniInchiAtom(""C"", 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0"
cmpl-6x1kWvvLx9yaOrjC9cRwiwc4UT1QP,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure0.java,133.99375772476196,length,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    @SuppressWarnings(""unchecked"")
    public JniInchiAtom addAtom(JniInchiAtom atom) {
        atomList.add(atom);
        return atom;
    }
}
","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#addAtom(JniInchiAtom)} method.
*/
class JniInchiStructureTest {","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#addAtom(JniInchiAtom)} method.
*/
class JniInchiStructureTest {

	@Test
	void testAddAtom_1() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiAtom result = structure.addAtom(atom);
		assertEquals(atom, result);
	}
	
	@Test
	void testAddAtom_2() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiAtom result = structure.addAtom(atom);
		assertEquals(atom, result);
	}
	
	@Test
	void testAddAtom_3() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiAtom result = structure.addAtom(atom);
		assertEquals(atom, result);
	}
	
	@Test
	void testAddAtom_4() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiAtom result = structure.addAtom(atom);
		assertEquals(atom, result);
	}
	
	@Test
	void testAddAtom_5() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiAtom result = structure.addAtom(atom);
		assertEquals(atom, result);
	}
	
	@Test
	void testAddAtom_6() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiAtom result = structure.addAtom(atom);
		assertEquals(atom, result);
	}
	
	@Test
	void testAddAtom_7() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiAtom result = structure.addAtom(atom);
		assertEquals(atom, result);
	}
	
	@Test
	void testAddAtom_8() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiAtom result = structure.addAtom(atom);
		assertEquals(atom, result);
	}
	
	@Test
	void testAddAtom_9() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiAtom result = structure.addAtom(atom);
		assertEquals(atom, result);
	}
	
	@Test
	void testAddAtom_10() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiAtom result = structure.addAtom(atom);
		assertEquals(atom, result);
	}
}

// JniInchiAtom.java
package net.sf.jniinchi;

/**
 * @author Sam Adams
 */
public class JniInchiAtom {

    public JniInchiAtom(String elementType) {
        this.elementType = elementType;
    }

    public String getElementType() {
        return elementType;
    }
}

// JniInchiAtomTest.java
package net.sf.jniinchi;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiAtom}.
* It contains ten unit test cases for the {@link JniInchiAtom#getElementType()} method.
*/
class JniInchiAtomTest {
		
	@Test
	void testGetElementType_1() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		String result = atom.getElementType();
		assertEquals(""C"", result);
	}
	
	@Test
	void testGetElementType_2() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		String result = atom.getElementType();
		assertEquals(""C"", result);
	}
	
	@Test
	void testGetElementType_3() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		String result = atom.getElementType();
		assertEquals(""C"", result);
	}
	
	@Test
	void testGetElementType_4() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		String result = atom.getElementType();
		assertEquals(""C"", result);
	}
	
	@Test
	void testGetElementType_5() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		String result = atom.getElementType();
		assertEquals(""C"", result);
	}
	
	@Test
	void testGetElementType_6() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		String result = atom.getElementType();
		assertEquals(""C"", result);
	}
	
	@Test
	void testGetElementType_7() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		String result = atom.getElementType();
		assertEquals(""C"", result);
	}
	
	@Test
	void testGetElementType_8() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		String result = atom.getElementType();
		assertEquals(""C"", result);
	}
	
	@Test
	void testGetElementType_9() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		String result = atom.getElementType();
		assertEquals(""C"", result);
	}
	
	@Test
	void testGetElementType_10() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		String result = atom.getElementType();
		assertEquals(""C"", result);
	}
}

// JniInchiInput.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiInput {

    @SuppressWarnings(""unchecked"")
    public JniInchiStructure addStructure(JniInchiStructure structure) {
        structureList.add(structure);
        return structure;
    }
}

// JniInchiInputTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiInput}.
* It contains ten unit test cases for the {@link JniInchiInput#addStructure(JniInchiStructure)} method.
*/
class JniInchiInputTest {
		
	@Test
	void testAddStructure_1() {
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiInput input = new JniInchiInput();
		JniInchiStructure result = input.addStructure(structure);
		assertEquals(structure, result);
	}
	
	@Test
	void testAddStructure_2() {
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiInput input = new JniInchiInput();
		JniInchiStructure result = input.addStructure(structure);
		assertEquals(structure, result);
	}
	
	@Test
	void testAddStructure_3() {
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiInput input = new JniInchiInput();
		JniInchiStructure result = input.addStructure(structure);
		assertEquals(structure, result);
	}
	
	@Test
	void testAddStructure_4() {
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiInput input = new JniInchiInput();
		JniInchiStructure result = input.addStructure(structure);
		assertEquals(structure, result);
	}
	
	@Test
	void testAddStructure_5() {
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiInput input = new JniInchiInput();
		JniInchiStructure result = input.addStructure(structure);
		assertEquals(structure, result);
	}
	
	@Test
	void testAddStructure_6() {
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiInput input = new JniInchiInput();
		JniInchiStructure result = input.addStructure(structure);
		assertEquals(structure, result);
	}
	
	@Test
	void testAddStructure_7() {
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiInput input = new JniInchiInput();
		JniInchiStructure result = input.addStructure(structure);
		assertEquals(structure, result);
	}
	
	@Test
	void testAddStructure_8() {
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiInput input = new JniInchiInput();
		JniInchiStructure result = input.addStructure(structure);
		assertEquals(structure, result);
	}
	
	@Test
	void testAddStructure_9() {
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiInput input = new JniInchiInput();
		JniInchiStructure result = input.addStructure(structure);
		assertEquals(structure, result);
	}
	
	@Test
	void testAddStructure_10() {
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiInput input = new JniInchiInput();
		JniInchiStructure result = input.addStructure(structure);
		assertEquals(structure, result);
	}
}

// JniInchiOutput.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiOutput {

    @SuppressWarnings(""unchecked"")
    public JniInchiOutputStructure addStructure(JniInchiOutputStructure structure) {
        structureList.add(structure);
        return structure;
    }
}

// JniInchiOutputTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiOutput}.
* It contains ten unit test cases for the {@link JniInchiOutput#addStructure(JniInchiOutputStructure)} method.
*/
class JniInchiOutputTest {
		
	@Test
	void testAddStructure_1() {
		JniInchiOutputStructure structure = new JniInchiOutputStructure();
		JniInchiOutput output = new JniInchiOutput();
		JniInchiOutputStructure result = output.addStructure(structure);
		assertEquals(structure, result);
	}
	
	@Test
	void testAddStructure_2() {
		JniInchiOutputStructure structure = new JniInchiOutputStructure();
		JniInchiOutput output = new JniInchiOutput();
		JniInchiOutputStructure result = output.addStructure(structure);
		assertEquals(structure, result);
	}
	
	@Test
	void testAddStructure_3() {
		JniInchiOutputStructure structure = new JniInchiOutputStructure();
		JniInchiOutput output = new JniInchiOutput();
		JniInchiOutputStructure result = output.addStructure(structure);
		assertEquals(structure, result);
	}
	
	@Test
	void testAddStructure_4() {
		JniInchiOutputStructure structure = new JniInchiOutputStructure();
		JniInchiOutput output = new JniInchiOutput();
		JniInchiOutputStructure result = output.addStructure(structure);
		assertEquals(structure, result);
	}
	
	@Test
	void testAddStructure_5() {
		JniInchiOutputStructure structure = new JniInchiOutputStructure();
		JniInchiOutput output = new JniInchiOutput();
		JniInchiOutputStructure result = output.addStructure(structure);
		assertEquals(structure, result);
	}
	
	@Test
	void testAddStructure_6() {
		JniInchiOutputStructure structure = new JniInchiOutputStructure();
		JniInchiOutput output = new JniInchiOutput();
		JniInchiOutputStructure result = output.addStructure(structure);
		assertEquals(structure, result);
	}
	
	@Test
	void testAddStructure_7() {
		JniInchiOutputStructure structure = new JniInchiOutputStructure();
		JniInchiOutput output = new JniInchiOutput();
		JniInchiOutputStructure result = output.addStructure(structure);
		assertEquals(structure, result);
	}
	
	@Test
	void testAddStructure_8() {
		JniInchiOutputStructure structure = new JniInchiOutputStructure();
		JniInchiOutput output = new JniInchiOutput();
		JniInchiOutputStructure result = output.addStructure(structure);
		assertEquals(structure, result);
	}
	
	@Test
	void testAddStructure_9() {
		JniInchiOutputStructure structure = new JniInchiOutputStructure();
		JniInchiOutput output = new JniInchiOutput();
		JniInchiOutputStructure result = output.addStructure(structure);
		assertEquals(structure, result);
	}
	
	@Test
	void testAddStructure_10() {
		JniInchiOutputStructure structure = new JniInchiOutputStructure();
		JniInchiOutput output = new JniInchiOutput();
	"
f578d2ee-d801-4c3e-9126-6fa9bb3097f7,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure1.java,-1,"ERROR - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)","// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    @SuppressWarnings(""unchecked"")
    public JniInchiBond addBond(JniInchiBond bond) {
        bondList.add(bond);
        return bond;
    }
}
","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#addBond(JniInchiBond)} method.
*/
class JniInchiStructureTest {","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#addBond(JniInchiBond)} method.
*/
class JniInchiStructureTest {
"
cmpl-6x1xKgg2r6ENj5zdr97hlK9oF9iCJ,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure2.java,26.04833436012268,stop,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    @SuppressWarnings(""unchecked"")
    public JniInchiStereo0D addStereo0D(JniInchiStereo0D parity) {
        stereoList.add(parity);
        return parity;
    }
}
","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#addStereo0D(JniInchiStereo0D)} method.
*/
class JniInchiStructureTest {","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#addStereo0D(JniInchiStereo0D)} method.
*/
class JniInchiStructureTest {

	@Test
	void testAddStereo0D() {
		JniInchiStructure structure = new JniInchiStructure();
		JniInchiStereo0D parity = new JniInchiStereo0D();
		structure.addStereo0D(parity);
		assertEquals(1, structure.getStereo0D().size());
	}
}

// JniInchiStereo0D.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStereo0D {

    @SuppressWarnings(""unchecked"")
    public JniInchiAtom addNeighbor(JniInchiAtom atom) {
        neighbors.add(atom);
        return atom;
    }
}

// JniInchiStereo0DTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStereo0D}.
* It contains ten unit test cases for the {@link JniInchiStereo0D#addNeighbor(JniInchiAtom)} method.
*/
class JniInchiStereo0DTest {
		
	@Test
	void testAddNeighbor() {
		JniInchiStereo0D stereo = new JniInchiStereo0D();
		JniInchiAtom atom = new JniInchiAtom();
		stereo.addNeighbor(atom);
		assertEquals(1, stereo.getNeighbors().size());
	}
}

// JniInchiAtom.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiAtom {

    @SuppressWarnings(""unchecked"")
    public JniInchiBond addBond(JniInchiBond bond) {
        bonds.add(bond);
        return bond;
    }
}

// JniInchiAtomTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiAtom}.
* It contains ten unit test cases for the {@link JniInchiAtom#addBond(JniInchiBond)} method.
*/
class JniInchiAtomTest {
		
	@Test
	void testAddBond() {
		JniInchiAtom atom = new JniInchiAtom();
		JniInchiBond bond = new JniInchiBond();
		atom.addBond(bond);
		assertEquals(1, atom.getBonds().size());
	}
}

// JniInchiBond.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiBond {

    @SuppressWarnings(""unchecked"")
    public JniInchiAtom getNeighbor() {
        return neighbor;
    }
}

// JniInchiBondTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiBond}.
* It contains ten unit test cases for the {@link JniInchiBond#getNeighbor()} method.
*/
class JniInchiBondTest {
		
	@Test
	void testGetNeighbor() {
		JniInchiBond bond = new JniInchiBond();
		JniInchiAtom atom = new JniInchiAtom();
		bond.setNeighbor(atom);
		assertEquals(atom, bond.getNeighbor());
	}
}"
cmpl-6x1yNohMmXXStEauyXWA9GhOFHWM2,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure3.java,104.41813492774963,stop,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    public JniInchiAtom getAtom(final int i) {
        return (JniInchiAtom) atomList.get(i);
    }
}
","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getAtom(int)} method.
*/
class JniInchiStructureTest {","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getAtom(int)} method.
*/
class JniInchiStructureTest {

	@Test
	void testGetAtom_0() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiAtom> atomList = new ArrayList<JniInchiAtom>();
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		structure.atomList = atomList;
		assertEquals(new JniInchiAtom(""C""), structure.getAtom(0));
	}
	
	@Test
	void testGetAtom_1() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiAtom> atomList = new ArrayList<JniInchiAtom>();
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		structure.atomList = atomList;
		assertEquals(new JniInchiAtom(""C""), structure.getAtom(1));
	}
	
	@Test
	void testGetAtom_2() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiAtom> atomList = new ArrayList<JniInchiAtom>();
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		structure.atomList = atomList;
		assertEquals(new JniInchiAtom(""C""), structure.getAtom(2));
	}
	
	@Test
	void testGetAtom_3() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiAtom> atomList = new ArrayList<JniInchiAtom>();
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		structure.atomList = atomList;
		assertEquals(new JniInchiAtom(""C""), structure.getAtom(3));
	}
	
	@Test
	void testGetAtom_4() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiAtom> atomList = new ArrayList<JniInchiAtom>();
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		structure.atomList = atomList;
		assertEquals(new JniInchiAtom(""C""), structure.getAtom(4));
	}
	
	@Test
	void testGetAtom_5() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiAtom> atomList = new ArrayList<JniInchiAtom>();
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		structure.atomList = atomList;
		assertEquals(new JniInchiAtom(""C""), structure.getAtom(5));
	}
	
	@Test
	void testGetAtom_6() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiAtom> atomList = new ArrayList<JniInchiAtom>();
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		structure.atomList = atomList;
		assertEquals(new JniInchiAtom(""C""), structure.getAtom(6));
	}
	
	@Test
	void testGetAtom_7() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiAtom> atomList = new ArrayList<JniInchiAtom>();
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		structure.atomList = atomList;
		assertEquals(new JniInchiAtom(""C""), structure.getAtom(7));
	}
	
	@Test
	void testGetAtom_8() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiAtom> atomList = new ArrayList<JniInchiAtom>();
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		structure.atomList = atomList;
		assertEquals(new JniInchiAtom(""C""), structure.getAtom(8));
	}
	
	@Test
	void testGetAtom_9() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiAtom> atomList = new ArrayList<JniInchiAtom>();
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		atomList.add(new JniInchiAtom(""C""));
		structure.atomList = atomList;
		assertEquals(new JniInchiAtom(""C""), structure.getAtom(9));
	}
}

// JniInchiAtom.java
package net.sf.jniinchi;

/**
 * @author Sam Adams
 */
public class JniInchiAtom {

    public JniInchiAtom(final String elementType) {
        this.elementType = elementType;
    }

    public String getElementType() {
        return elementType;
    }
}

// JniInchiAtomTest.java
package net.sf.jniinchi;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiAtom}.
* It contains one unit test case for the {@link JniInchiAtom#getElementType()} method.
*/
class JniInchiAtomTest {
		
	@Test
	void testGetElementType() {
		JniInchiAtom atom = new JniInchiAtom(""C"");
		assertEquals(""C"", atom.getElementType());
	}
}"
cmpl-6x20hdrY6VWq4eIZyeLeJWqhObUSx,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure4.java,153.61472916603088,length,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    public JniInchiBond getBond(final int i) {
        return (JniInchiBond) bondList.get(i);
    }
}
","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getBond(int)} method.
*/
class JniInchiStructureTest {","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getBond(int)} method.
*/
class JniInchiStructureTest {

	@Test
	void testGetBond_0() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiBond> bondList = new ArrayList<JniInchiBond>();
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		structure.bondList = bondList;
		assertEquals(new JniInchiBond(), structure.getBond(0));
	}
	
	@Test
	void testGetBond_1() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiBond> bondList = new ArrayList<JniInchiBond>();
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		structure.bondList = bondList;
		assertEquals(new JniInchiBond(), structure.getBond(1));
	}
	
	@Test
	void testGetBond_2() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiBond> bondList = new ArrayList<JniInchiBond>();
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		structure.bondList = bondList;
		assertEquals(new JniInchiBond(), structure.getBond(2));
	}
	
	@Test
	void testGetBond_3() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiBond> bondList = new ArrayList<JniInchiBond>();
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		structure.bondList = bondList;
		assertEquals(new JniInchiBond(), structure.getBond(3));
	}
	
	@Test
	void testGetBond_4() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiBond> bondList = new ArrayList<JniInchiBond>();
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		structure.bondList = bondList;
		assertEquals(new JniInchiBond(), structure.getBond(4));
	}
	
	@Test
	void testGetBond_5() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiBond> bondList = new ArrayList<JniInchiBond>();
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		structure.bondList = bondList;
		assertEquals(new JniInchiBond(), structure.getBond(5));
	}
	
	@Test
	void testGetBond_6() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiBond> bondList = new ArrayList<JniInchiBond>();
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		structure.bondList = bondList;
		assertEquals(new JniInchiBond(), structure.getBond(6));
	}
	
	@Test
	void testGetBond_7() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiBond> bondList = new ArrayList<JniInchiBond>();
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		structure.bondList = bondList;
		assertEquals(new JniInchiBond(), structure.getBond(7));
	}
	
	@Test
	void testGetBond_8() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiBond> bondList = new ArrayList<JniInchiBond>();
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		structure.bondList = bondList;
		assertEquals(new JniInchiBond(), structure.getBond(8));
	}
	
	@Test
	void testGetBond_9() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiBond> bondList = new ArrayList<JniInchiBond>();
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		bondList.add(new JniInchiBond());
		structure.bondList = bondList;
		assertEquals(new JniInchiBond(), structure.getBond(9));
	}
}

// JniInchiAtom.java
package net.sf.jniinchi;

/**
 * @author Sam Adams
 */
public class JniInchiAtom {

    public JniInchiAtom(final String p0, final double p1, final double p2, final double p3, final String p4, final int p5, final int p6) {
    }
}

// JniInchiAtomTest.java
package net.sf.jniinchi;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiAtom}.
* It contains one unit test case for the {@link JniInchiAtom#JniInchiAtom(String, double, double, double, String, int, int)} constructor.
*/
class JniInchiAtomTest {
		
	@Test
	void testJniInchiAtom_0() {
		JniInchiAtom atom = new JniInchiAtom(""C"", 0.0, 0.0, 0.0, """", 0, 0);
		assertEquals(""C"", atom.elementType);
		assertEquals(0.0, atom.x);
		assertEquals(0.0, atom.y);
		assertEquals(0.0, atom.z);
		assertEquals("""", atom.p_parity);
		assertEquals(0, atom.p_atom_parity);
		assertEquals(0, atom.p_implicit_H);
	}
}

// JniInchiBond.java
package net.sf.jniinchi;

/**
 * @author Sam Adams
 */
public class JniInchiBond {

    public JniInchiBond(final int p0, final int p1, final int p2, final int p3, final int p4, final int p5, final int p6) {
    }
}

// JniInchiBondTest.java
package net.sf.jniinchi;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiBond}.
* It contains one unit test case for the {@link JniInchiBond#JniInchiBond(int, int, int, int, int, int, int)} constructor.
*/
class JniInchiBondTest {
		
	@Test
	void testJniInchiBond_0() {
		JniInchiBond bond = new JniInchiBond(0, 0, 0, 0, 0, 0, 0);
		assertEquals(0, bond.atom1);
		assertEquals(0, bond.atom2);
		assertEquals(0, bond.bondType);
		assertEquals(0, bond.bondStereo);
		assertEquals(0, bond.bondTopology);
		assertEquals(0, bond.bondRingState);
		assertEquals(0, bond.bondIsAromatic);
	}
}

// JniInchiInput.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiInput {

    public JniInchiInput(final String p0, final JniInchiStructure p1) {
    }
}

// JniInchiInputTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiInput}.
* It contains one unit test case for the {@link JniInchiInput#JniInchiInput(String, JniInchiStructure)} constructor.
*/
class JniInchiInputTest {
		
	@Test
	void testJniInchiInput_0() {
		JniInchiInput input = new JniInchiInput("""", new JniInchiStructure());
		assertEquals("""", input.getKey());
		assertEquals(new JniInchiStructure(), input.getStructure());
	}
}

// JniInchiOutput.java
package net.sf.jniinchi;

/**
 * @author Sam Adams
 */
public class JniInchiOutput {

    public JniInchiOutput(final String p0, final String p1, final String p2, final String p3, final String p4, final String p5, final String p6, final String p7, final String p8, final String p9, final String p10, final String p11, final String p12, final String p13, final String p14, final String p15, final String p16, final String p17, final String p18, final String p19, final String p20, final String p21, final String p22, final String p23, final String p24, final String p25, final"
cmpl-6x22XqoW6ePfiEctluHbma9b2OaQk,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure5.java,132.6349492073059,length,"// JniInchiStructure.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Sam Adams
 */
public class JniInchiStructure {

    public JniInchiStereo0D getStereo0D(final int i) {
        return (JniInchiStereo0D) stereoList.get(i);
    }
}
","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getStereo0D(int)} method.
*/
class JniInchiStructureTest {","// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getStereo0D(int)} method.
*/
class JniInchiStructureTest {

	/**
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 */
	@Test
	void testGetStereo0D() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiStereo0D> stereoList = new ArrayList<JniInchiStereo0D>();
		structure.stereoList = stereoList;
		
		JniInchiStereo0D stereo0D = new JniInchiStereo0D();
		stereoList.add(stereo0D);
		
		assertEquals(stereo0D, structure.getStereo0D(0));
	}
}

// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getStereo0D(int)} method.
*/
class JniInchiStructureTest {
		
	/**
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 */
	@Test
	void testGetStereo0D() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiStereo0D> stereoList = new ArrayList<JniInchiStereo0D>();
		structure.stereoList = stereoList;
		
		JniInchiStereo0D stereo0D = new JniInchiStereo0D();
		stereoList.add(stereo0D);
		
		assertEquals(stereo0D, structure.getStereo0D(0));
	}
}

// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getStereo0D(int)} method.
*/
class JniInchiStructureTest {
		
	/**
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 */
	@Test
	void testGetStereo0D() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiStereo0D> stereoList = new ArrayList<JniInchiStereo0D>();
		structure.stereoList = stereoList;
		
		JniInchiStereo0D stereo0D = new JniInchiStereo0D();
		stereoList.add(stereo0D);
		
		assertEquals(stereo0D, structure.getStereo0D(0));
	}
}

// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getStereo0D(int)} method.
*/
class JniInchiStructureTest {
		
	/**
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 */
	@Test
	void testGetStereo0D() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiStereo0D> stereoList = new ArrayList<JniInchiStereo0D>();
		structure.stereoList = stereoList;
		
		JniInchiStereo0D stereo0D = new JniInchiStereo0D();
		stereoList.add(stereo0D);
		
		assertEquals(stereo0D, structure.getStereo0D(0));
	}
}

// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getStereo0D(int)} method.
*/
class JniInchiStructureTest {
		
	/**
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 */
	@Test
	void testGetStereo0D() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiStereo0D> stereoList = new ArrayList<JniInchiStereo0D>();
		structure.stereoList = stereoList;
		
		JniInchiStereo0D stereo0D = new JniInchiStereo0D();
		stereoList.add(stereo0D);
		
		assertEquals(stereo0D, structure.getStereo0D(0));
	}
}

// JniInchiStructureTest.java
package net.sf.jniinchi;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiStructure}.
* It contains ten unit test cases for the {@link JniInchiStructure#getStereo0D(int)} method.
*/
class JniInchiStructureTest {
		
	/**
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 * 
	 * <p>
	 * Test case for {@link JniInchiStructure#getStereo0D(int)} method.
	 * </p>
	 */
	@Test
	void testGetStereo0D() {
		JniInchiStructure structure = new JniInchiStructure();
		List<JniInchiStereo0D> stereoList = new ArrayList<JniInchiStereo0D>();
		structure.stereoList = stereoList;
		
		JniInchiStereo0D stereo0D = new JniInchiStereo0D();
		st"
cmpl-6x24gyWR4hZbG5c424JYUi0cxJsCk,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper0.java,42.16144776344299,stop,"// JniInchiWrapper.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * <p>JNI Wrapper for International Chemical Identifier (InChI) C++ library.
 *
 * <p>This class is not intended to be used directly, but should be accessed
 * through subclasses that read data formats and load them into the InChI
 * data structures.
 *
 * <p>Subclasses should load data through the addAtom, addBond and addParity
 * methods. Once the molecule is fully loaded then the generateInchi method
 * should be called. Ideally this should all take place within the subclass's
 * constructor. The public get methods will all return null until this has
 * happened.
 *
 * <p>See <tt>inchi_api.h</tt>.
 *
 * @author Sam Adams
 */
public class JniInchiWrapper {

    public static JniInchiOutputKey getInchiKey(final String inchi) throws JniInchiException {
        if (inchi == null) {
            throw new IllegalArgumentException(""Null InChI"");
        }
        JniInchiWrapper wrapper = getWrapper();
        wrapper.getLock();
        try {
            return wrapper.GetINCHIKeyFromINCHI(inchi);
        } finally {
            lock.unlock();
        }
    }
}
","// JniInchiWrapperTest.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiWrapper}.
* It contains ten unit test cases for the {@link JniInchiWrapper#getInchiKey(String)} method.
*/
class JniInchiWrapperTest {","// JniInchiWrapperTest.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiWrapper}.
* It contains ten unit test cases for the {@link JniInchiWrapper#getInchiKey(String)} method.
*/
class JniInchiWrapperTest {

	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is null.
	*/
	@Test
	void testGetInchiKey_1() {
		assertThrows(IllegalArgumentException.class, () -> {
			JniInchiWrapper.getInchiKey(null);
		});
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is empty.
	*/
	@Test
	void testGetInchiKey_2() {
		assertThrows(JniInchiException.class, () -> {
			JniInchiWrapper.getInchiKey("""");
		});
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is a valid InChI.
	*/
	@Test
	void testGetInchiKey_3() {
		assertEquals(""XLYOFNOQVPJJNP-UHFFFAOYSA-N"", JniInchiWrapper.getInchiKey(""InChI=1S/C6H12O6/c7-1-2-3(8)4(9)5(10)6(11)12-2/h2-11H,1H2/t2-,3-,4+,5-,6-/m1/s1""));
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is a valid InChI.
	*/
	@Test
	void testGetInchiKey_4() {
		assertEquals(""XLYOFNOQVPJJNP-UHFFFAOYSA-N"", JniInchiWrapper.getInchiKey(""InChI=1S/C6H12O6/c7-1-2-3(8)4(9)5(10)6(11)12-2/h2-11H,1H2/t2-,3-,4+,5-,6-/m1/s1""));
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is a valid InChI.
	*/
	@Test
	void testGetInchiKey_5() {
		assertEquals(""XLYOFNOQVPJJNP-UHFFFAOYSA-N"", JniInchiWrapper.getInchiKey(""InChI=1S/C6H12O6/c7-1-2-3(8)4(9)5(10)6(11)12-2/h2-11H,1H2/t2-,3-,4+,5-,6-/m1/s1""));
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is a valid InChI.
	*/
	@Test
	void testGetInchiKey_6() {
		assertEquals(""XLYOFNOQVPJJNP-UHFFFAOYSA-N"", JniInchiWrapper.getInchiKey(""InChI=1S/C6H12O6/c7-1-2-3(8)4(9)5(10)6(11)12-2/h2-11H,1H2/t2-,3-,4+,5-,6-/m1/s1""));
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is a valid InChI.
	*/
	@Test
	void testGetInchiKey_7() {
		assertEquals(""XLYOFNOQVPJJNP-UHFFFAOYSA-N"", JniInchiWrapper.getInchiKey(""InChI=1S/C6H12O6/c7-1-2-3(8)4(9)5(10)6(11)12-2/h2-11H,1H2/t2-,3-,4+,5-,6-/m1/s1""));
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is a valid InChI.
	*/
	@Test
	void testGetInchiKey_8() {
		assertEquals(""XLYOFNOQVPJJNP-UHFFFAOYSA-N"", JniInchiWrapper.getInchiKey(""InChI=1S/C6H12O6/c7-1-2-3(8)4(9)5(10)6(11)12-2/h2-11H,1H2/t2-,3-,4+,5-,6-/m1/s1""));
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is a valid InChI.
	*/
	@Test
	void testGetInchiKey_9() {
		assertEquals(""XLYOFNOQVPJJNP-UHFFFAOYSA-N"", JniInchiWrapper.getInchiKey(""InChI=1S/C6H12O6/c7-1-2-3(8)4(9)5(10)6(11)12-2/h2-11H,1H2/t2-,3-,4+,5-,6-/m1/s1""));
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#getInchiKey(String)} method.
	* It tests the case when the input is a valid InChI.
	*/
	@Test
	void testGetInchiKey_10() {
		assertEquals(""XLYOFNOQVPJJNP-UHFFFAOYSA-N"", JniInchiWrapper.getInchiKey(""InChI=1S/C6H12O6/c7-1-2-3(8)4(9)5(10)6(11)12-2/h2-11H,1H2/t2-,3-,4+,5-,6-/m1/s1""));
	}
}"
cmpl-6x25jfxNwkKazlffA5H0aXX4Yjgn7,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper1.java,36.53466773033142,stop,"// JniInchiWrapper.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * <p>JNI Wrapper for International Chemical Identifier (InChI) C++ library.
 *
 * <p>This class is not intended to be used directly, but should be accessed
 * through subclasses that read data formats and load them into the InChI
 * data structures.
 *
 * <p>Subclasses should load data through the addAtom, addBond and addParity
 * methods. Once the molecule is fully loaded then the generateInchi method
 * should be called. Ideally this should all take place within the subclass's
 * constructor. The public get methods will all return null until this has
 * happened.
 *
 * <p>See <tt>inchi_api.h</tt>.
 *
 * @author Sam Adams
 */
public class JniInchiWrapper {

    public static INCHI_STATUS checkInchi(final String inchi, final boolean strict) throws JniInchiException {
        if (inchi == null) {
            throw new IllegalArgumentException(""Null InChI"");
        }
        JniInchiWrapper wrapper = getWrapper();
        wrapper.getLock();
        try {
            int ret = wrapper.CheckINCHI(inchi, strict);
            INCHI_STATUS retStatus = INCHI_STATUS.getValue(ret);
            if (retStatus == null) {
                throw new JniInchiException(""Unknown return status: "" + ret);
            }
            return retStatus;
        } finally {
            lock.unlock();
        }
    }
}
","// JniInchiWrapperTest.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiWrapper}.
* It contains ten unit test cases for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
*/
class JniInchiWrapperTest {","// JniInchiWrapperTest.java
package net.sf.jniinchi;

import net.sf.jnati.NativeCodeException;
import net.sf.jnati.deploy.NativeLibraryLoader;
import java.util.List;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JniInchiWrapper}.
* It contains ten unit test cases for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
*/
class JniInchiWrapperTest {

	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is null.
	* Expected: {@link IllegalArgumentException}.
	*/
	@Test
	void testCheckInchi_1() {
		assertThrows(IllegalArgumentException.class, () -> {
			JniInchiWrapper.checkInchi(null, true);
		});
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is empty.
	* Expected: {@link JniInchiException}.
	*/
	@Test
	void testCheckInchi_2() {
		assertThrows(JniInchiException.class, () -> {
			JniInchiWrapper.checkInchi("""", true);
		});
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is not valid.
	* Expected: {@link JniInchiException}.
	*/
	@Test
	void testCheckInchi_3() {
		assertThrows(JniInchiException.class, () -> {
			JniInchiWrapper.checkInchi(""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H"", true);
		});
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is valid.
	* Expected: {@link INCHI_STATUS#OKAY}.
	*/
	@Test
	void testCheckInchi_4() {
		assertEquals(INCHI_STATUS.OKAY, JniInchiWrapper.checkInchi(""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H/q+1"", true));
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is valid.
	* Expected: {@link INCHI_STATUS#OKAY}.
	*/
	@Test
	void testCheckInchi_5() {
		assertEquals(INCHI_STATUS.OKAY, JniInchiWrapper.checkInchi(""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H/q+1"", false));
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is valid.
	* Expected: {@link INCHI_STATUS#OKAY}.
	*/
	@Test
	void testCheckInchi_6() {
		assertEquals(INCHI_STATUS.OKAY, JniInchiWrapper.checkInchi(""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H/q+1"", true));
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is valid.
	* Expected: {@link INCHI_STATUS#OKAY}.
	*/
	@Test
	void testCheckInchi_7() {
		assertEquals(INCHI_STATUS.OKAY, JniInchiWrapper.checkInchi(""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H/q+1"", false));
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is valid.
	* Expected: {@link INCHI_STATUS#OKAY}.
	*/
	@Test
	void testCheckInchi_8() {
		assertEquals(INCHI_STATUS.OKAY, JniInchiWrapper.checkInchi(""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H/q+1"", true));
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is valid.
	* Expected: {@link INCHI_STATUS#OKAY}.
	*/
	@Test
	void testCheckInchi_9() {
		assertEquals(INCHI_STATUS.OKAY, JniInchiWrapper.checkInchi(""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H/q+1"", false));
	}
	
	/**
	* Test case for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.
	* It tests the case when the input InChI is valid.
	* Expected: {@link INCHI_STATUS#OKAY}.
	*/
	@Test
	void testCheckInchi_10() {
		assertEquals(INCHI_STATUS.OKAY, JniInchiWrapper.checkInchi(""InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H/q+1"", true));
	}
}"
cmpl-6x26m3fAx5wFJUq38Il8sCxn9INdr,/EvoSuiteBenchmark/scenario1/25_jni-inchi/src/main/java/net/sf/jniinchi/Main.java,139.0967743396759,length,"// Main.java
package net.sf.jniinchi;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;

/**
 * Simple test class, for debugging purposes.
 *
 * @author sea36
 */
public class Main {

    public static JniInchiStructure getTestMolecule() {
        JniInchiStructure struct = new JniInchiStructure();
        JniInchiAtom a1 = struct.addAtom(new JniInchiAtom(264.0, 968.0, 0.0, ""C""));
        JniInchiAtom a2 = struct.addAtom(new JniInchiAtom(295.0, 985.0, 0.0, ""C""));
        JniInchiAtom a3 = struct.addAtom(new JniInchiAtom(233.0, 986.0, 0.0, ""N""));
        JniInchiAtom a4 = struct.addAtom(new JniInchiAtom(264.0, 932.0, 0.0, ""C""));
        JniInchiAtom a5 = struct.addAtom(new JniInchiAtom(326.0, 967.0, 0.0, ""O""));
        JniInchiAtom a6 = struct.addAtom(new JniInchiAtom(295.0, 1021.0, 0.0, ""O""));
        a1.setImplicitH(1);
        a3.setImplicitH(2);
        a4.setImplicitH(3);
        a5.setImplicitH(1);
        struct.addBond(new JniInchiBond(a1, a2, INCHI_BOND_TYPE.SINGLE));
        struct.addBond(new JniInchiBond(a1, a3, INCHI_BOND_TYPE.SINGLE)).setStereoDefinition(INCHI_BOND_STEREO.SINGLE_1DOWN);
        struct.addBond(new JniInchiBond(a1, a4, INCHI_BOND_TYPE.SINGLE));
        struct.addBond(new JniInchiBond(a2, a5, INCHI_BOND_TYPE.SINGLE));
        struct.addBond(new JniInchiBond(a2, a6, INCHI_BOND_TYPE.DOUBLE));
        return struct;
    }
}
","// MainTest.java
package net.sf.jniinchi;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#getTestMolecule()} method.
*/
class MainTest {","// MainTest.java
package net.sf.jniinchi;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#getTestMolecule()} method.
*/
class MainTest {

		/**
		* Test case for the {@link Main#getTestMolecule()} method.
		*/
		@Test
		void testGetTestMolecule() {
				JniInchiStructure struct = Main.getTestMolecule();
				assertEquals(6, struct.getNumAtoms());
				assertEquals(5, struct.getNumBonds());
				assertEquals(1, struct.getAtom(0).getImplicitH());
				assertEquals(2, struct.getAtom(2).getImplicitH());
				assertEquals(3, struct.getAtom(3).getImplicitH());
				assertEquals(1, struct.getAtom(4).getImplicitH());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(0).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(1).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(2).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(3).getBondType());
				assertEquals(INCHI_BOND_TYPE.DOUBLE, struct.getBond(4).getBondType());
				assertEquals(INCHI_BOND_STEREO.SINGLE_1DOWN, struct.getBond(1).getStereoDefinition());
		}
}

// MainTest2.java
package net.sf.jniinchi;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#getTestMolecule()} method.
*/
class MainTest2 {
		
		/**
		* Test case for the {@link Main#getTestMolecule()} method.
		*/
		@Test
		void testGetTestMolecule() {
				JniInchiStructure struct = Main.getTestMolecule();
				assertEquals(6, struct.getNumAtoms());
				assertEquals(5, struct.getNumBonds());
				assertEquals(1, struct.getAtom(0).getImplicitH());
				assertEquals(2, struct.getAtom(2).getImplicitH());
				assertEquals(3, struct.getAtom(3).getImplicitH());
				assertEquals(1, struct.getAtom(4).getImplicitH());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(0).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(1).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(2).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(3).getBondType());
				assertEquals(INCHI_BOND_TYPE.DOUBLE, struct.getBond(4).getBondType());
				assertEquals(INCHI_BOND_STEREO.SINGLE_1DOWN, struct.getBond(1).getStereoDefinition());
		}
}

// MainTest3.java
package net.sf.jniinchi;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#getTestMolecule()} method.
*/
class MainTest3 {
		
		/**
		* Test case for the {@link Main#getTestMolecule()} method.
		*/
		@Test
		void testGetTestMolecule() {
				JniInchiStructure struct = Main.getTestMolecule();
				assertEquals(6, struct.getNumAtoms());
				assertEquals(5, struct.getNumBonds());
				assertEquals(1, struct.getAtom(0).getImplicitH());
				assertEquals(2, struct.getAtom(2).getImplicitH());
				assertEquals(3, struct.getAtom(3).getImplicitH());
				assertEquals(1, struct.getAtom(4).getImplicitH());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(0).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(1).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(2).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(3).getBondType());
				assertEquals(INCHI_BOND_TYPE.DOUBLE, struct.getBond(4).getBondType());
				assertEquals(INCHI_BOND_STEREO.SINGLE_1DOWN, struct.getBond(1).getStereoDefinition());
		}
}

// MainTest4.java
package net.sf.jniinchi;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#getTestMolecule()} method.
*/
class MainTest4 {
		
		/**
		* Test case for the {@link Main#getTestMolecule()} method.
		*/
		@Test
		void testGetTestMolecule() {
				JniInchiStructure struct = Main.getTestMolecule();
				assertEquals(6, struct.getNumAtoms());
				assertEquals(5, struct.getNumBonds());
				assertEquals(1, struct.getAtom(0).getImplicitH());
				assertEquals(2, struct.getAtom(2).getImplicitH());
				assertEquals(3, struct.getAtom(3).getImplicitH());
				assertEquals(1, struct.getAtom(4).getImplicitH());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(0).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(1).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(2).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(3).getBondType());
				assertEquals(INCHI_BOND_TYPE.DOUBLE, struct.getBond(4).getBondType());
				assertEquals(INCHI_BOND_STEREO.SINGLE_1DOWN, struct.getBond(1).getStereoDefinition());
		}
}

// MainTest5.java
package net.sf.jniinchi;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#getTestMolecule()} method.
*/
class MainTest5 {
		
		/**
		* Test case for the {@link Main#getTestMolecule()} method.
		*/
		@Test
		void testGetTestMolecule() {
				JniInchiStructure struct = Main.getTestMolecule();
				assertEquals(6, struct.getNumAtoms());
				assertEquals(5, struct.getNumBonds());
				assertEquals(1, struct.getAtom(0).getImplicitH());
				assertEquals(2, struct.getAtom(2).getImplicitH());
				assertEquals(3, struct.getAtom(3).getImplicitH());
				assertEquals(1, struct.getAtom(4).getImplicitH());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(0).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(1).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(2).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(3).getBondType());
				assertEquals(INCHI_BOND_TYPE.DOUBLE, struct.getBond(4).getBondType());
				assertEquals(INCHI_BOND_STEREO.SINGLE_1DOWN, struct.getBond(1).getStereoDefinition());
		}
}

// MainTest6.java
package net.sf.jniinchi;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#getTestMolecule()} method.
*/
class MainTest6 {
		
		/**
		* Test case for the {@link Main#getTestMolecule()} method.
		*/
		@Test
		void testGetTestMolecule() {
				JniInchiStructure struct = Main.getTestMolecule();
				assertEquals(6, struct.getNumAtoms());
				assertEquals(5, struct.getNumBonds());
				assertEquals(1, struct.getAtom(0).getImplicitH());
				assertEquals(2, struct.getAtom(2).getImplicitH());
				assertEquals(3, struct.getAtom(3).getImplicitH());
				assertEquals(1, struct.getAtom(4).getImplicitH());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(0).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(1).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(2).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(3).getBondType());
				assertEquals(INCHI_BOND_TYPE.DOUBLE, struct.getBond(4).getBondType());
				assertEquals(INCHI_BOND_STEREO.SINGLE_1DOWN, struct.getBond(1).getStereoDefinition());
		}
}

// MainTest7.java
package net.sf.jniinchi;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#getTestMolecule()} method.
*/
class MainTest7 {
		
		/**
		* Test case for the {@link Main#getTestMolecule()} method.
		*/
		@Test
		void testGetTestMolecule() {
				JniInchiStructure struct = Main.getTestMolecule();
				assertEquals(6, struct.getNumAtoms());
				assertEquals(5, struct.getNumBonds());
				assertEquals(1, struct.getAtom(0).getImplicitH());
				assertEquals(2, struct.getAtom(2).getImplicitH());
				assertEquals(3, struct.getAtom(3).getImplicitH());
				assertEquals(1, struct.getAtom(4).getImplicitH());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(0).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(1).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(2).getBondType());
				assertEquals(INCHI_BOND_TYPE.SINGLE, struct.getBond(3).getBondType());
				assertEquals(INCHI_BOND_TYPE.DOUBLE, struct.getBond(4).getBondType());
				assertEquals(INCHI_BOND_STEREO.SINGLE_1DOWN, struct.getBond(1).getStereoDefinition());
		}
}

// MainTest8.java
package net.sf.jniinchi;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#getTestMolecule()} method.
*/
class MainTest8"
