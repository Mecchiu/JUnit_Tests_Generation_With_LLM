[
{
    "id": "cmpl-6wht5A9tyxuC7rQ2GBqxivxvvfYz4",
    "object": "text_completion",
    "created": 1679449747,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t/**\n\t * Test case for {@link HSSFDataFormat#getFormat(String)}\n\t * \n\t * @throws Exception\n\t */\n\t@Test\n\tpublic void testGetFormat() throws Exception {\n\t\tHSSFDataFormat dataFormat = new HSSFDataFormat(new Workbook());\n\t\tassertEquals(0, dataFormat.getFormat(\"General\"));\n\t\tassertEquals(1, dataFormat.getFormat(\"0\"));\n\t\tassertEquals(2, dataFormat.getFormat(\"0.00\"));\n\t\tassertEquals(3, dataFormat.getFormat(\"#,##0\"));\n\t\tassertEquals(4, dataFormat.getFormat(\"#,##0.00\"));\n\t\tassertEquals(5, dataFormat.getFormat(\"($#,##0_);($#,##0)\"));\n\t\tassertEquals(6, dataFormat.getFormat(\"($#,##0_);[Red]($#,##0)\"));\n\t\tassertEquals(7, dataFormat.getFormat(\"($#,##0.00_);($#,##0.00)\"));\n\t\tassertEquals(8, dataFormat.getFormat(\"($#,##0.00_);[Red]($#,##0.00)\"));\n\t\tassertEquals(9, dataFormat.getFormat(\"0%\"));\n\t\tassertEquals(10, dataFormat.getFormat(\"0.00%\"));\n\t\tassertEquals(11, dataFormat.getFormat(\"0.00E+00\"));\n\t\tassertEquals(12, dataFormat.getFormat(\"# ?/?\"));\n\t\tassertEquals(13, dataFormat.getFormat(\"# ??/??\"));\n\t\tassertEquals(14, dataFormat.getFormat(\"mm-dd-yy\"));\n\t\tassertEquals(15, dataFormat.getFormat(\"d-mmm-yy\"));\n\t\tassertEquals(16, dataFormat.getFormat(\"d-mmm\"));\n\t\tassertEquals(17, dataFormat.getFormat(\"mmm-yy\"));\n\t\tassertEquals(18, dataFormat.getFormat(\"h:mm AM/PM\"));\n\t\tassertEquals(19, dataFormat.getFormat(\"h:mm:ss AM/PM\"));\n\t\tassertEquals(20, dataFormat.getFormat(\"h:mm\"));\n\t\tassertEquals(21, dataFormat.getFormat(\"h:mm:ss\"));\n\t\tassertEquals(22, dataFormat.getFormat(\"m/d/yy h:mm\"));\n\t\tassertEquals(37, dataFormat.getFormat(\"#,##0 ;(#,##0)\"));\n\t\tassertEquals(38, dataFormat.getFormat(\"#,##0 ;[Red](#,##0)\"));\n\t\tassertEquals(39, dataFormat.getFormat(\"#,##0.00;(#,##0.00)\"));\n\t\tassertEquals(40, dataFormat.getFormat(\"#,##0.00;[Red](#,##0.00)\"));\n\t\tassertEquals(45, dataFormat.getFormat(\"mm:ss\"));\n\t\tassertEquals(46, dataFormat.getFormat(\"[h]:mm:ss\"));\n\t\tassertEquals(47, dataFormat.getFormat(\"mmss.0\"));\n\t\tassertEquals(48, dataFormat.getFormat(\"##0.0E+0\"));\n\t\tassertEquals(49, dataFormat.getFormat(\"@\"));\n\t\tassertEquals(27, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(30, dataFormat.getFormat(\"m/d/yy\"));\n\t\tassertEquals(36, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(50, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(57, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(59, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(32, dataFormat.getFormat(\"h:mm:ss\"));\n\t\tassertEquals(33, dataFormat.getFormat(\"h:mm:ss\"));\n\t\tassertEquals(34, dataFormat.getFormat(\"h:mm:ss\"));\n\t\tassertEquals(35, dataFormat.getFormat(\"h:mm:ss\"));\n\t\tassertEquals(58, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(31, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(55, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(56, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(44, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(28, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(29, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(51, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(52, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(53, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(54, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(23, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(24, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(25, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(26, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(41, dataFormat.getFormat(\"_(* #,##0_);_(* (#,##0);_(* \\\"-\\\"_);_(@_)\"));\n\t\tassertEquals(42, dataFormat.getFormat(\"_($* #,##0_);_($* (#,##0);_($* \\\"-\\\"_);_(@_)\"));\n\t\tassertEquals(43, dataFormat.getFormat(\"_(* #,##0.00_);_(* (#,##0.00);_(* \\\"-\\\"??_);_(@_)\"));\n\t\tassertEquals(61, dataFormat.getFormat(\"_(\\\"$\\\"* #,##0_);_(\\\"$\\\"* (#,##0);_(\\\"$\\\"* \\\"-\\\"_);_(@_)\"));\n\t\tassertEquals(62, dataFormat.getFormat(\"_(* #,##0.00_);_(* (#,##0.00);_(* \\\"-\\\"??_);_(@_)\"));\n\t\tassertEquals(63, dataFormat.getFormat(\"_(\\\"$\\\"* #,##0.00_);_(\\\"$\\\"* (#,##0.00);_(\\\"$\\\"* \\\"-\\\"??_);_(@_)\"));\n\t\tassertEquals(64, dataFormat.getFormat(\"mm:ss.0\"));\n\t\tassertEquals(65, dataFormat.getFormat(\"##0.0E+0\"));\n\t\tassertEquals(66, dataFormat.getFormat(\"@\"));\n\t\tassertEquals(67, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(68, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(69, dataFormat.getFormat(\"m/d/yy\"));\n\t\tassertEquals(70, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(71, dataFormat.getFormat(\"[$-404]e/m/d\"));\n\t\tassertEquals(72, dataFormat.getFormat(\"[$-404]e/",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 640,
        "completion_tokens": 2000,
        "total_tokens": 2640
    },
    "time_taken": 78.24657273292542,
    "prompt_id": "/EvoSuiteBenchmark/scenario2/5_templateit/src/main/java/org/apache/poi/hssf/usermodel/HSSFDataFormat.java",
    "original_code": "// HSSFDataFormat.java\n/*\n * HSSFDataFormat.java\n *\n * Created on December 18, 2001, 12:42 PM\n */\npackage org.apache.poi.hssf.usermodel;\n\nimport org.apache.poi.hssf.model.Workbook;\nimport org.apache.poi.hssf.record.FormatRecord;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Vector;\n\npublic class HSSFDataFormat {\n\n    /**\n     * Get the format index that matches the given format\n     *  string, creating a new format entry if required.\n     * Aliases text to the proper format as required.\n     *\n     * @param format string matching a built in format\n     * @return index of format.\n     */\n    public short getFormat(String format) {\n        ListIterator i;\n        int ind;\n        if (format.toUpperCase().equals(\"TEXT\"))\n            format = \"@\";\n        if (!movedBuiltins) {\n            i = builtinFormats.listIterator();\n            while (i.hasNext()) {\n                ind = i.nextIndex();\n                if (formats.size() < ind + 1) {\n                    formats.setSize(ind + 1);\n                }\n                formats.set(ind, i.next());\n            }\n            movedBuiltins = true;\n        }\n        i = formats.listIterator();\n        while (i.hasNext()) {\n            ind = i.nextIndex();\n            if (format.equals(i.next()))\n                return (short) ind;\n        }\n        ind = workbook.getFormat(format, true);\n        if (formats.size() <= ind)\n            formats.setSize(ind + 1);\n        formats.set(ind, format);\n        return (short) ind;\n    }\n}\n",
    "test_prompt": "// HSSFDataFormatTest.java\npackage org.apache.poi.hssf.usermodel;\n\nimport org.apache.poi.hssf.model.Workbook;\nimport org.apache.poi.hssf.record.FormatRecord;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSSFDataFormat}.\n* It contains ten unit test cases for the {@link HSSFDataFormat#getFormat(String)} method.\n*/\nclass HSSFDataFormatTest {"
}
]