ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6xHFPgup2hE4enkryOYpbuQMpYSTW,/EvoSuiteBenchmark/original/2_a4j/src/main/java/net/kencochrane/a4j/A4j_0Test.java,105.7407557964325,length,"// A4j.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page);

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type);

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page);

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page);

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page);

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page);

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page);

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page);

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page);

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId);

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId);

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status);

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity);

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity);

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId);

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity);

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId);

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId);
}
","// A4j_0Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#BlendedSearch(String, String)} method.
*/
class A4j_0Test {","// A4j_0Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#BlendedSearch(String, String)} method.
*/
class A4j_0Test {

	/**
	* Test case for the {@link A4j#BlendedSearch(String, String)} method.
	*/
	@Test
	void testBlendedSearch() {
		A4j a4j = new A4j();
		BlendedSearch blendedSearch = a4j.BlendedSearch(""java"", ""lite"");
		assertNotNull(blendedSearch);
		assertNotNull(blendedSearch.getRequest());
		assertNotNull(blendedSearch.getRequest().getIsValid());
		assertTrue(blendedSearch.getRequest().getIsValid());
		assertNotNull(blendedSearch.getRequest().getKeywords());
		assertEquals(""java"", blendedSearch.getRequest().getKeywords());
		assertNotNull(blendedSearch.getRequest().getPage());
		assertEquals(""1"", blendedSearch.getRequest().getPage());
		assertNotNull(blendedSearch.getRequest().getMode());
		assertEquals(""BlendedSearch"", blendedSearch.getRequest().getMode());
		assertNotNull(blendedSearch.getRequest().getTag());
		assertEquals(""kencochra-20"", blendedSearch.getRequest().getTag());
		assertNotNull(blendedSearch.getRequest().getType());
		assertEquals(""lite"", blendedSearch.getRequest().getType());
		assertNotNull(blendedSearch.getRequest().getDevtag());
		assertEquals(""kencochra-20"", blendedSearch.getRequest().getDevtag());
		assertNotNull(blendedSearch.getRequest().getSort());
		assertEquals(""+salesrank"", blendedSearch.getRequest().getSort());
		assertNotNull(blendedSearch.getRequest().getVariationPage());
		assertEquals(""All"", blendedSearch.getRequest().getVariationPage());
		assertNotNull(blendedSearch.getRequest().getLocale());
		assertEquals(""us"", blendedSearch.getRequest().getLocale());
		assertNotNull(blendedSearch.getTotalResults());
		assertEquals(""1"", blendedSearch.getTotalResults());
		assertNotNull(blendedSearch.getTotalPages());
		assertEquals(""1"", blendedSearch.getTotalPages());
		assertNotNull(blendedSearch.getDetails());
		assertNotNull(blendedSearch.getDetails().getProductLine());
		assertEquals(""Books"", blendedSearch.getDetails().getProductLine());
		assertNotNull(blendedSearch.getDetails().getDetails());
		assertNotNull(blendedSearch.getDetails().getDetails().getAsin());
		assertEquals(""0596002815"", blendedSearch.getDetails().getDetails().getAsin());
		assertNotNull(blendedSearch.getDetails().getDetails().getProductName());
		assertEquals(""Java Cookbook"", blendedSearch.getDetails().getDetails().getProductName());
		assertNotNull(blendedSearch.getDetails().getDetails().getCatalog());
		assertEquals(""Book"", blendedSearch.getDetails().getDetails().getCatalog());
		assertNotNull(blendedSearch.getDetails().getDetails().getAuthors());
		assertNotNull(blendedSearch.getDetails().getDetails().getAuthors().getAuthor());
		assertEquals(""Ian F. Darwin"", blendedSearch.getDetails().getDetails().getAuthors().getAuthor());
		assertNotNull(blendedSearch.getDetails().getDetails().getManufacturer());
		assertEquals(""O'Reilly Media"", blendedSearch.getDetails().getDetails().getManufacturer());
		assertNotNull(blendedSearch.getDetails().getDetails().getReleaseDate());
		assertEquals(""2003-10-01"", blendedSearch.getDetails().getDetails().getReleaseDate());
		assertNotNull(blendedSearch.getDetails().getDetails().getOurPrice());
		assertEquals(""$31.47"", blendedSearch.getDetails().getDetails().getOurPrice());
		assertNotNull(blendedSearch.getDetails().getDetails().getUsedPrice());
		assertEquals(""$31.47"", blendedSearch.getDetails().getDetails().getUsedPrice());
		assertNotNull(blendedSearch.getDetails().getDetails().getCollectiblePrice());
		assertEquals(""$31.47"", blendedSearch.getDetails().getDetails().getCollectiblePrice());
		assertNotNull(blendedSearch.getDetails().getDetails().getRefurbishedPrice());
		assertEquals(""$31.47"", blendedSearch.getDetails().getDetails().getRefurbishedPrice());
		assertNotNull(blendedSearch.getDetails().getDetails().getThirdPartyNewPrice());
		assertEquals(""$31.47"", blendedSearch.getDetails().getDetails().getThirdPartyNewPrice());
		assertNotNull(blendedSearch.getDetails().getDetails().getListPrice());
		assertEquals(""$39.95"", blendedSearch.getDetails().getDetails().getListPrice());
		assertNotNull(blendedSearch.getDetails().getDetails().getUsedAvailability());
		assertEquals(""Usually ships in 24 hours"", blendedSearch.getDetails().getDetails().getUsedAvailability());
		assertNotNull(blendedSearch.getDetails().getDetails().getCollectibleAvailability());
		assertEquals(""Usually ships in 24 hours"", blendedSearch.getDetails().getDetails().getCollectibleAvailability());
		assertNotNull(blendedSearch.getDetails().getDetails().getRefurbishedAvailability());
		assertEquals(""Usually ships in 24 hours"", blendedSearch.getDetails().getDetails().getRefurbishedAvailability());
		assertNotNull(blendedSearch.getDetails().getDetails().getThirdPartyNewAvailability());
		assertEquals(""Usually ships in 24 hours"", blendedSearch.getDetails().getDetails().getThirdPartyNewAvailability());
		assertNotNull(blendedSearch.getDetails().getDetails().getImageUrlSmall());
		assertEquals(""http://images.amazon.com/images/P/0596002815.01.THUMBZZZ.jpg"", blendedSearch.getDetails().getDetails().getImageUrlSmall());
		assertNotNull(blendedSearch.getDetails().getDetails().getImageUrlMedium());
		assertEquals(""http://images.amazon.com/images/P/0596002815.01.MZZZZZZZ.jpg"", blendedSearch.getDetails().getDetails().getImageUrlMedium());
		assertNotNull(blendedSearch.getDetails().getDetails().getImageUrlLarge());
		assertEquals(""http://images.amazon.com/images/P/0596002815.01.LZZZZZZZ.jpg"", blendedSearch.getDetails().getDetails().getImageUrlLarge());
		assertNotNull(blendedSearch.getDetails().getDetails().getCustomerReviewsUrl());
		assertEquals(""http://www.amazon.com/reviews/iframe?akid=kencochra-20&alinkCode=xm2&asin=0596002815&atag=kencochra-20&exp=2010-08-01T02%3A00%3A00Z&v=2&sig
cmpl-6xHH70w0xQgpJD4JoLYGFDmGFh5L7,/EvoSuiteBenchmark/original/2_a4j/src/main/java/net/kencochrane/a4j/A4j_1Test.java,130.0952649116516,length,"// A4j.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page);

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type);

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page);

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page);

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page);

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page);

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page);

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page);

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page);

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId);

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId);

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status);

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity);

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity);

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId);

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity);

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId);

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId);
}
","// A4j_1Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#KeywordSearch(String, String, String, String)} method.
*/
class A4j_1Test {","// A4j_1Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#KeywordSearch(String, String, String, String)} method.
*/
class A4j_1Test {

		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is null.
		*/
		@Test
		void testKeywordSearch_1() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(null, ""books"", ""heavy"", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is empty.
		*/
		@Test
		void testKeywordSearch_2() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch("""", ""books"", ""heavy"", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_3() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_4() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_5() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_6() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_7() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_8() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_9() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_10() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
}

// A4j_2Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#KeywordSearch(String, String, String, String)} method.
*/
class A4j_2Test {
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is null.
		*/
		@Test
		void testKeywordSearch_1() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(null, ""books"", ""heavy"", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is empty.
		*/
		@Test
		void testKeywordSearch_2() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch("""", ""books"", ""heavy"", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_3() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_4() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_5() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_6() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_7() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_8() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_9() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_10() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
}

// A4j_3Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#KeywordSearch(String, String, String, String)} method.
*/
class A4j_3Test {
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is null.
		*/
		@Test
		void testKeywordSearch_1() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(null, ""books"", ""heavy"", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is empty.
		*/
		@Test
		void testKeywordSearch_2() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch("""", ""books"", ""heavy"", ""1"");
				assertNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_3() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_4() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_5() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_6() {
				A4j a4j = new A4j();
				ProductInfo productInfo = a4j.KeywordSearch(""java"", ""books"", ""heavy"", ""1"");
				assertNotNull(productInfo);
		}
		
		/**
		* Test case for the {@link A4j#KeywordSearch(String, String, String, String)} method.
		* It tests the case when the search term is not empty and not null.
		*/
		@Test
		void testKeywordSearch_7() {"
cmpl-6xHJDarUdCGqX8pPhhOKr0zX63CKb,/EvoSuiteBenchmark/original/2_a4j/src/main/java/net/kencochrane/a4j/A4j_2Test.java,109.82466888427734,length,"// A4j.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page);

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type);

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page);

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page);

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page);

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page);

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page);

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page);

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page);

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId);

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId);

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status);

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity);

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity);

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId);

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity);

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId);

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId);
}
","// A4j_2Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ActorSearch(String, String, String)} method.
*/
class A4j_2Test {","// A4j_2Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ActorSearch(String, String, String)} method.
*/
class A4j_2Test {

	@Test
	void testActorSearch() {
		A4j a4j = new A4j();
		ProductInfo productInfo = a4j.ActorSearch(""Tom Hanks"", ""dvd"", ""1"");
		assertNotNull(productInfo);
		assertNotNull(productInfo.getDetails());
		assertNotNull(productInfo.getDetails().getActor());
		assertNotNull(productInfo.getDetails().getActor().getName());
		assertEquals(""Tom Hanks"", productInfo.getDetails().getActor().getName());
		assertNotNull(productInfo.getDetails().getActor().getProducts());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0));
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getAsin());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getProductName());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getCatalog());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getReleaseDate());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getTheatricalReleaseDate());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getRating());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getListPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getOurPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getUsedPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getAvailability());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getImageUrlSmall());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getImageUrlMedium());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getImageUrlLarge());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0));
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getName());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getRole());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorId());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorImageUrlSmall());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorImageUrlMedium());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorImageUrlLarge());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorUrl());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorLink());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorAsin());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorCatalog());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorReleaseDate());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorTheatricalReleaseDate());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorRating());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorListPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorOurPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorUsedPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorAvailability());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorImageUrlSmall());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorImageUrlMedium());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorImageUrlLarge());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorUrl());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorLink());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorAsin());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorCatalog());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorReleaseDate());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorTheatricalReleaseDate());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorRating());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorListPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorOurPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorUsedPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorAvailability());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorImageUrlSmall());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorImageUrlMedium());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorImageUrlLarge());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorUrl());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorLink());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorAsin());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorCatalog());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorReleaseDate());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorTheatricalReleaseDate());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorRating());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorListPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorOurPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorUsedPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorAvailability());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorImageUrlSmall());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorImageUrlMedium());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorImageUrlLarge());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorUrl());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorLink());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorAsin());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorCatalog());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorReleaseDate());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorTheatricalReleaseDate());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorRating());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorListPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorOurPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorUsedPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorAvailability());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorImageUrlSmall());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorImageUrlMedium());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorImageUrlLarge());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorUrl());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorLink());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorAsin());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorCatalog());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorReleaseDate());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorTheatricalReleaseDate());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorRating());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorListPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorOurPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorUsedPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorAvailability());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorImageUrlSmall());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorImageUrlMedium());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorImageUrlLarge());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorUrl());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorLink());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorAsin());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorCatalog());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorReleaseDate());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorTheatricalReleaseDate());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorRating());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorListPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorOurPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorUsedPrice());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorAvailability());
		assertNotNull(productInfo.getDetails().getActor().getProducts().getProduct().get(0).getActor().get(0).getActorImageUrl"
cmpl-6xHKztmHsEj2Fatde3TY9kaXKui7K,/EvoSuiteBenchmark/original/2_a4j/src/main/java/net/kencochrane/a4j/A4j_3Test.java,119.17729592323303,length,"// A4j.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page);

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type);

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page);

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page);

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page);

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page);

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page);

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page);

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page);

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId);

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId);

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status);

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity);

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity);

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId);

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity);

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId);

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId);
}
","// A4j_3Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ArtistSearch(String, String, String)} method.
*/
class A4j_3Test {","// A4j_3Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#ArtistSearch(String, String, String)} method.
*/
class A4j_3Test {

		private A4j a4j = new A4j();
		
		@Test
		void testArtistSearch_1() {
				ProductInfo productInfo = a4j.ArtistSearch("""", """", """");
				assertNotNull(productInfo);
				assertNotNull(productInfo.getDetails());
				assertNotNull(productInfo.getDetails().getArtist());
				assertNotNull(productInfo.getDetails().getArtist().getArtistName());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistName());
				assertNotNull(productInfo.getDetails().getArtist().getArtistId());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistId());
				assertNotNull(productInfo.getDetails().getArtist().getArtistSortName());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistSortName());
				assertNotNull(productInfo.getDetails().getArtist().getArtistUrl());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistUrl());
				assertNotNull(productInfo.getDetails().getArtist().getArtistImageUrl());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistImageUrl());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiography());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiography());
				assertNotNull(productInfo.getDetails().getArtist().getArtistSimilarityUrl());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistSimilarityUrl());
				assertNotNull(productInfo.getDetails().getArtist().getArtistTracksUrl());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistTracksUrl());
				assertNotNull(productInfo.getDetails().getArtist().getArtistAlbumsUrl());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistAlbumsUrl());
				assertNotNull(productInfo.getDetails().getArtist().getArtistEditorialReview());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistEditorialReview());
				assertNotNull(productInfo.getDetails().getArtist().getArtistEditorialReviewSource());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistEditorialReviewSource());
				assertNotNull(productInfo.getDetails().getArtist().getArtistEditorialReviewContent());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistEditorialReviewContent());
				assertNotNull(productInfo.getDetails().getArtist().getArtistEditorialReviewUrl());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistEditorialReviewUrl());
				assertNotNull(productInfo.getDetails().getArtist().getArtistEditorialReviews());
				assertEquals(0, productInfo.getDetails().getArtist().getArtistEditorialReviews().size());
				assertNotNull(productInfo.getDetails().getArtist().getArtistSimilarArtists());
				assertEquals(0, productInfo.getDetails().getArtist().getArtistSimilarArtists().size());
				assertNotNull(productInfo.getDetails().getArtist().getArtistTopTracks());
				assertEquals(0, productInfo.getDetails().getArtist().getArtistTopTracks().size());
				assertNotNull(productInfo.getDetails().getArtist().getArtistTopAlbums());
				assertEquals(0, productInfo.getDetails().getArtist().getArtistTopAlbums().size());
				assertNotNull(productInfo.getDetails().getArtist().getArtistTopSongs());
				assertEquals(0, productInfo.getDetails().getArtist().getArtistTopSongs().size());
				assertNotNull(productInfo.getDetails().getArtist().getArtistTopSongsUrl());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistTopSongsUrl());
				assertNotNull(productInfo.getDetails().getArtist().getArtistTopAlbumsUrl());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistTopAlbumsUrl());
				assertNotNull(productInfo.getDetails().getArtist().getArtistTopTracksUrl());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistTopTracksUrl());
				assertNotNull(productInfo.getDetails().getArtist().getArtistSimilarArtistsUrl());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistSimilarArtistsUrl());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyUrl());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyUrl());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographySource());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographySource());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyContent());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyContent());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdated());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdated());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedDate());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedDate());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTime());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTime());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedYear());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedYear());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedMonth());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedMonth());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedDay());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedDay());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedHour());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedHour());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedMinute());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedMinute());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedSecond());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedSecond());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezone());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezone());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneAbbreviation());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneAbbreviation());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneOffset());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneOffset());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneDST());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneDST());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneRawOffset());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneRawOffset());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneDSTSavings());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneDSTSavings());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneId());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneId());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDisplayName());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDisplayName());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTOffset());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTOffset());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTStart());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTStart());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTEnd());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTEnd());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTStartMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTStartMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTEndMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTEndMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTOffsetMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTOffsetMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTSavingsMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTSavingsMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneRawOffsetMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneRawOffsetMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneIdMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneIdMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDisplayNameMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDisplayNameMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTOffsetMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTOffsetMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTStartMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTStartMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTEndMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTEndMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTSavingsMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTSavingsMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneRawOffsetMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneRawOffsetMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneIdMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneIdMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDisplayNameMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDisplayNameMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTOffsetMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTOffsetMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTStartMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTStartMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTEndMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTEndMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTSavingsMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTSavingsMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneRawOffsetMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneRawOffsetMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneIdMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneIdMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDisplayNameMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDisplayNameMillis());
				assertNotNull(productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTOffsetMillis());
				assertEquals("""", productInfo.getDetails().getArtist().getArtistBiographyLastUpdatedTimezoneTimezoneDSTOffsetMillis());
			"
cmpl-6xHMuXPGgPWCN7G2V0sa15e4GQmBy,/EvoSuiteBenchmark/original/2_a4j/src/main/java/net/kencochrane/a4j/A4j_4Test.java,118.16484880447388,length,"// A4j.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page);

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type);

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page);

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page);

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page);

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page);

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page);

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page);

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page);

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId);

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId);

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status);

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity);

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity);

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId);

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity);

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId);

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId);
}
","// A4j_4Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#AuthorSearch(String, String)} method.
*/
class A4j_4Test {","// A4j_4Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#AuthorSearch(String, String)} method.
*/
class A4j_4Test {

	@Test
	void testAuthorSearch() {
		A4j a4j = new A4j();
		ProductInfo productInfo = a4j.AuthorSearch(""Ken Cochrane"", ""1"");
		assertNotNull(productInfo);
		assertNotNull(productInfo.getDetails());
		assertNotNull(productInfo.getDetails().getProduct());
		assertNotNull(productInfo.getDetails().getProduct().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem());
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getASIN());
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes());
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor());
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName());
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue());
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue());
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue());
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue());
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue());
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue());
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue());
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue());
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue());
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue());
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue());
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue());
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue());
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue());
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0));
		assertNotNull(productInfo.getDetails().getProduct().get(0).getItem().get(0).getItemAttributes().getAuthor().get(0).getName().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0).getValue().get(0"
cmpl-6xHOoKWCkk10tXimGi4VQToJlevKJ,/EvoSuiteBenchmark/original/2_a4j/src/main/java/net/kencochrane/a4j/A4j_5Test.java,129.2463846206665,length,"// A4j.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;

/**
 * http://www.KenCochrane.net
 * User: Ken Cochrane
 * Date: Aug 1, 2003
 * Time: 7:39:44 PM
 */
public class A4j {

    /**
     * Given an ASIN it will return a populated fullProduct bean
     *
     * @since 1.0
     * @param asin
     * @param offer (all, ThirdPartyNew, Used, Collectible and Refurbished)
     * @param page 1 2 3 4 etc.
     * @return FullProduct
     */
    public FullProduct getFullProductFromASIN(String asin, String offer, String page);

    /**
     * With a single query, developers can retrieve results across all the different product categories,
     * sorted by relevance.  For a blended search, you pass in search keywords but no mode or page parameter.
     * This will return up to 3 results for each of the product categories currently available.
     * This can currently mean up to 45 results for a single query.
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param type heavy or lite
     * @return BlendedSearch
     */
    public BlendedSearch BlendedSearch(String searchTerm, String type);

    /**
     * A keyword is a general search term that is used to find products in the Amazon.com
     * catalog. Often, more than one keyword is used at the same time to form a short phrase
     * (such as finance software).
     *
     * @since 1.0
     * @param searchTerm the term you want to search for
     * @param productLine  books, dvd, etc
     * @param type heavy or lite
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo KeywordSearch(String searchTerm, String productLine, String type, String page);

    /**
     * Search for an actor
     * @since 1.0
     * @param actorName - actor or actresses name to search for
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc
     * @return ProductInfo
     */
    public ProductInfo ActorSearch(String actorName, String mode, String page);

    /**
     * Search for an artist
     * @since 1.0
     * @param artistName - artist name to search for.
     * @param mode (music, classical)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo ArtistSearch(String artistName, String mode, String page);

    /**
     * Search books for an author
     * @since 1.0
     * @param authorName author to search for
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo AuthorSearch(String authorName, String page);

    /**
     * Search for movie directors
     * @since 1.0
     * @param directorName
     * @param mode (dvd, vhs, video)
     * @param page 1 2 3 etc.
     * @return ProductInfo
     */
    public ProductInfo DirectorSearch(String directorName, String mode, String page);

    /**
     *  Search by Manufacture
     * @since 1.0
     * @param manufactureName
     * @param mode (electronics, kitchen, videogames, software, photo, pc-hardware)
     * @param page
     * @return  ProductInfo
     */
    public ProductInfo ManufactureSearch(String manufactureName, String mode, String page);

    /**
     * Search by UPC
     * @since 1.0
     * @param upc
     * @param mode (music, classical) might be more now, need to confirm.
     * @param page
     * @return ProductInfo
     */
    public ProductInfo UpcSearch(String upc, String mode, String page);

    /**
     * Search for a Listmania
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param listId
     * @return ProductInfo
     */
    public ProductInfo ListmaniaSearch(String listId);

    /**
     * search for wishlist
     *
     * ~todo - Not sure if this works, never confirmed it, if it works let me know.~
     *
     * @since 1.0
     * @param wishListId
     * @return ProductInfo
     */
    public ProductInfo WishListSearch(String wishListId);

    /**
     * There are thousands of third-party sellers who offer their own products on the Amazon.com Web site.
     * If you are interested in receiving an XML list of products offered by a specific seller, you simply
     * need to plug that seller's unique ID into the request format below. To find the seller ID, visit the
     * seller's member profile page. The ID appears in that page's URL after the '/ts/customer-glance' string.
     * For example, in the following URL, the seller ID would be A2OFEB6YLE4L1K.
     *
     * http://s1.amazon.com/exec/varzea/ts/customer-glance/A2OFEB6YLE4L1K
     *
     * @param sellerId
     * @param type  heavy or lite
     * @param page
     * @param status open or closed
     * @return
     */
    public SellerSearch ThirdParty(String sellerId, String type, String page, String status);

    /**
     * Add to product to your Shopping cart
     * @since 1.0
     * @param asin amazon id for the product
     * @param quantity number of items to add
     * @return ShoppingCart
     */
    public ShoppingCart AddtoCart(String asin, String quantity);

    /**
     *  If you already have a shopping cart created add to it with this
     * @since 1.0
     * @param cartId
     * @param hmac
     * @param asin
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart addToExistingCart(String cartId, String hmac, String asin, String quantity);

    /**
     * Clear the shopping cart so that there is no items in it.
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart clearCart(String hmac, String cartId);

    /**
     * Modify the cart by changing the quantity for an item in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @param quantity
     * @return ShoppingCart
     */
    public ShoppingCart modifyCart(String hmac, String cartId, String itemId, String quantity);

    /**
     * Get all of the items that are in the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @return ShoppingCart
     */
    public ShoppingCart GetItemsFromCart(String hmac, String cartId);

    /**
     * Remove an Item from the cart
     * @since 1.0
     * @param hmac
     * @param cartId
     * @param itemId
     * @return ShoppingCart
     */
    public ShoppingCart RemoveFromCart(String hmac, String cartId, String itemId);
}
","// A4j_5Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#AddtoCart(String, String)} method.
*/
class A4j_5Test {","// A4j_5Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#AddtoCart(String, String)} method.
*/
class A4j_5Test {

		private A4j a4j = new A4j();
		
		@Test
		void testAddtoCart_1() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""1"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""1"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_2() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""2"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""2"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_3() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""3"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""3"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_4() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""4"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""4"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_5() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""5"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""5"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_6() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""6"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""6"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_7() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""7"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""7"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_8() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""8"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""8"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_9() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""9"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""9"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_10() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""10"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""10"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
}

// A4j_6Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#AddtoCart(String, String)} method.
*/
class A4j_6Test {
		
		private A4j a4j = new A4j();
		
		@Test
		void testAddtoCart_1() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""1"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""1"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_2() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""2"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""2"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_3() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""3"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""3"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_4() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""4"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""4"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_5() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""5"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""5"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_6() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""6"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""6"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_7() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""7"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""7"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_8() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""8"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""8"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_9() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""9"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""9"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_10() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""10"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""10"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
}

// A4j_7Test.java
package net.kencochrane.a4j;

import net.kencochrane.a4j.DAO.Cart;
import net.kencochrane.a4j.DAO.Product;
import net.kencochrane.a4j.DAO.Search;
import net.kencochrane.a4j.beans.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link A4j}.
* It contains ten unit test cases for the {@link A4j#AddtoCart(String, String)} method.
*/
class A4j_7Test {
		
		private A4j a4j = new A4j();
		
		@Test
		void testAddtoCart_1() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""1"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""1"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_2() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""2"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""2"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_3() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""3"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""3"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_4() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""4"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""4"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_5() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""5"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals(""B00005JKJI"", shoppingCart.getCart().getCartItems().get(0).getAsin());
				assertEquals(""5"", shoppingCart.getCart().getCartItems().get(0).getQuantity());
		}
		
		@Test
		void testAddtoCart_6() {
				ShoppingCart shoppingCart = a4j.AddtoCart(""B00005JKJI"", ""6"");
				assertEquals(1, shoppingCart.getCart().getCartItems().size());
				assertEquals("""
