ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wrccQvyBTu3Zj2QiAYazrGpHZm3t,/EvoSuiteBenchmark/scenario1/49_diebierse/src/main/java/bierse/model/Drink0.java,62.14194893836975,length,"// Drink.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;

/**
 * @author Rainer Friesen
 */
public class Drink {

    public int recalculate() {
        //Calculate new average values
        totalSold += lastSold;
        averageAmount = (float) totalSold / model.getIteration();
        averagePrice = ((averagePrice * (model.getIteration() - 1)) + currentPrice) / model.getIteration();
        if (totalSold > 0) {
            averageSoldPrice = ((averageSoldPrice * (totalSold - lastSold)) + (currentPrice * lastSold)) / totalSold;
        }
        int newPrice;
        if (directPrice != 0) {
            // If a direct price was set, use it
            newPrice = directPrice;
            directPrice = 0;
        } else if (keepPrice) {
            // Keep the price
            newPrice = currentPrice;
        } else {
            // Calculate the new price
            double diffSold = lastSold - targetAmount;
            double factor = diffSold / deltaAmount;
            double change = factor * maxStep;
            int priceSteps = model.getSettings().getPriceSteps();
            double rest = Math.floor(Math.abs(change % priceSteps));
            double full = Math.floor(Math.abs(change / priceSteps));
            int priceChange = 0;
            if (rest >= priceSteps / 2) {
                priceChange = priceSteps;
            }
            priceChange += full * priceSteps;
            // Check that the change of the price is not more than the max step
            if (priceChange > maxStep) {
                priceChange = maxStep;
            }
            if (model.getSettings().isStandardLogic()) {
                if (factor >= 0) {
                    newPrice = currentPrice + priceChange;
                } else {
                    newPrice = currentPrice - priceChange;
                }
            } else {
                // Inverse logic
                if (factor >= 0) {
                    newPrice = currentPrice - priceChange;
                } else {
                    newPrice = currentPrice + priceChange;
                }
            }
        }
        // Check that the new price is not above the max price or below the min price
        if (newPrice > maxPrice) {
            newPrice = maxPrice;
        } else if (newPrice < minPrice) {
            newPrice = minPrice;
        }
        // Calculate the trend
        if (newPrice > currentPrice) {
            trend = 1;
        } else if (newPrice < currentPrice) {
            trend = -1;
        } else {
            trend = 0;
        }
        currentPrice = newPrice;
        //Debug output
        model.getLog().debug(""Recalculating drink: "" + name + "" for iteration: "" + model.getIteration());
        model.getLog().debug(""Last sold: "" + lastSold);
        model.getLog().debug(""Total sold:"" + totalSold);
        model.getLog().debug(""Average sold: "" + averageAmount);
        model.getLog().debug(""Average price: "" + averagePrice);
        model.getLog().debug(""Average sold price: "" + averageSoldPrice);
        model.getLog().debug(""New price: "" + currentPrice);
        // Reset values for the next iteration
        lastSold = 0;
        return currentPrice;
    }
}
","// DrinkTest.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Drink}.
* It contains ten unit test cases for the {@link Drink#recalculate()} method.
*/
class DrinkTest {","// DrinkTest.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Drink}.
* It contains ten unit test cases for the {@link Drink#recalculate()} method.
*/
class DrinkTest {

	/**
	* Test case for the {@link Drink#recalculate()} method.
	* The test case checks if the price is set to the direct price if a direct price is set.
	*/
	@Test
	void testRecalculateDirectPrice() {
		Drink drink = new Drink();
		drink.directPrice = 10;
		drink.currentPrice = 5;
		drink.recalculate();
		assertEquals(10, drink.currentPrice);
	}
	
	/**
	* Test case for the {@link Drink#recalculate()} method.
	* The test case checks if the price is set to the direct price if a direct price is set.
	*/
	@Test
	void testRecalculateKeepPrice() {
		Drink drink = new Drink();
		drink.keepPrice = true;
		drink.currentPrice = 5;
		drink.recalculate();
		assertEquals(5, drink.currentPrice);
	}
	
	/**
	* Test case for the {@link Drink#recalculate()} method.
	* The test case checks if the price is set to the direct price if a direct price is set.
	*/
	@Test
	void testRecalculateStandardLogic() {
		Drink drink = new Drink();
		drink.model = new Model();
		drink.model.settings = new Settings();
		drink.model.settings.setStandardLogic(true);
		drink.currentPrice = 5;
		drink.lastSold = 10;
		drink.targetAmount = 5;
		drink.deltaAmount = 5;
		drink.maxStep = 10;
		drink.recalculate();
		assertEquals(15, drink.currentPrice);
	}
	
	/**
	* Test case for the {@link Drink#recalculate()} method.
	* The test case checks if the price is set to the direct price if a direct price is set.
	*/
	@Test
	void testRecalculateInverseLogic() {
		Drink drink = new Drink();
		drink.model = new Model();
		drink.model.settings = new Settings();
		drink.model.settings.setStandardLogic(false);
		drink.currentPrice = 5;
		drink.lastSold = 10;
		drink.targetAmount = 5;
		drink.deltaAmount = 5;
		drink.maxStep = 10;
		drink.recalculate();
		assertEquals(-5, drink.currentPrice);
	}
	
	/**
	* Test case for the {@link Drink#recalculate()} method.
	* The test case checks if the price is set to the direct price if a direct price is set.
	*/
	@Test
	void testRecalculateMaxPrice() {
		Drink drink = new Drink();
		drink.model = new Model();
		drink.model.settings = new Settings();
		drink.model.settings.setStandardLogic(true);
		drink.currentPrice = 5;
		drink.lastSold = 10;
		drink.targetAmount = 5;
		drink.deltaAmount = 5;
		drink.maxStep = 10;
		drink.maxPrice = 15;
		drink.recalculate();
		assertEquals(15, drink.currentPrice);
	}
	
	/**
	* Test case for the {@link Drink#recalculate()} method.
	* The test case checks if the price is set to the direct price if a direct price is set.
	*/
	@Test
	void testRecalculateMinPrice() {
		Drink drink = new Drink();
		drink.model = new Model();
		drink.model.settings = new Settings();
		drink.model.settings.setStandardLogic(false);
		drink.currentPrice = 5;
		drink.lastSold = 10;
		drink.targetAmount = 5;
		drink.deltaAmount = 5;
		drink.maxStep = 10;
		drink.minPrice = -15;
		drink.recalculate();
		assertEquals(-15, drink.currentPrice);
	}
	
	/**
	* Test case for the {@link Drink#recalculate()} method.
	* The test case checks if the price is set to the direct price if a direct price is set.
	*/
	@Test
	void testRecalculateTrend() {
		Drink drink = new Drink();
		drink.model = new Model();
		drink.model.settings = new Settings();
		drink.model.settings.setStandardLogic(true);
		drink.currentPrice = 5;
		drink.lastSold = 10;
		drink.targetAmount = 5;
		drink.deltaAmount = 5;
		drink.maxStep = 10;
		drink.recalculate();
		assertEquals(1, drink.trend);
	}
	
	/**
	* Test case for the {@link Drink#recalculate()} method.
	* The test case checks if the price is set to the direct price if a direct price is set.
	*/
	@Test
	void testRecalculateAverageAmount() {
		Drink drink = new Drink();
		drink.model = new Model();
		drink.model.settings = new Settings();
		drink.model.settings.setStandardLogic(true);
		drink.model.iteration = 2;
		drink.currentPrice = 5;
		drink.lastSold = 10;
		drink.targetAmount = 5;
		drink.deltaAmount = 5;
		drink.maxStep = 10;
		drink.totalSold = 10;
		drink.recalculate();
		assertEquals(7.5, drink.averageAmount);
	}
	
	/**
	* Test case for the {@link Drink#recalculate()} method.
	* The test case checks if the price is set to the direct price if a direct price is set.
	*/
	@Test
	void testRecalculateAveragePrice() {
		Drink drink = new Drink();
		drink.model = new Model();
		drink.model.settings = new Settings();
		drink.model.settings.setStandardLogic(true);
		drink.model.iteration = 2;
		drink.currentPrice = 5;
		drink.lastSold = 10;
		drink.targetAmount = 5;
		drink.deltaAmount = 5;
		drink.maxStep = 10;
		drink.totalSold = 10;
		drink.averagePrice = 5;
		drink.recalculate();
		assertEquals(10, drink.averagePrice);
	}
	
	/**
	* Test case for the {@link Drink#recalculate()} method.
	* The test case checks if the price is set to the direct price if a direct price is set.
	*/
	@Test
	void testRecalculateAverageSoldPrice() {
		Drink drink = new Drink();
		drink.model = new Model();
		drink.model.settings = new Settings();
		drink.model.settings.setStandardLogic(true);
		drink.model.iteration = 2;
		drink.currentPrice = 5;
		drink.lastSold = 10;
		drink.targetAmount = 5;
		drink.deltaAmount = 5;
		drink.maxStep = 10;
		drink.totalSold = 10;
		drink.averagePrice = 5;
		drink.averageSoldPrice = 5;
		drink.recalculate();
		assertEquals(7.5, drink.averageSold"
cmpl-6wrdcEZBIZSOQ37hh6eIdxPUuZuEq,/EvoSuiteBenchmark/scenario1/49_diebierse/src/main/java/bierse/model/Drink1.java,63.34952259063721,length,"// Drink.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;

/**
 * @author Rainer Friesen
 */
public class Drink {

    public File save() {
        if (!NEW_DRINK_NAME.equals(name)) {
            model.getLog().debug(""Save drink: "" + name);
            // Build JDOM document representing the settings
            Element root = new Element(""drink"");
            Element minPriceElem = new Element(""minPrice"");
            minPriceElem.setText(String.valueOf(minPrice));
            root.addContent(minPriceElem);
            Element maxPriceElem = new Element(""maxPrice"");
            maxPriceElem.setText(String.valueOf(maxPrice));
            root.addContent(maxPriceElem);
            Element startPriceElem = new Element(""startPrice"");
            startPriceElem.setText(String.valueOf(startPrice));
            root.addContent(startPriceElem);
            Element targetAmountElem = new Element(""targetAmount"");
            targetAmountElem.setText(String.valueOf(targetAmount));
            root.addContent(targetAmountElem);
            Element deltaAmountElem = new Element(""deltaAmount"");
            deltaAmountElem.setText(String.valueOf(deltaAmount));
            root.addContent(deltaAmountElem);
            Element maxStepElem = new Element(""maxStep"");
            maxStepElem.setText(String.valueOf(maxStep));
            root.addContent(maxStepElem);
            Element usedElem = new Element(""used"");
            usedElem.setText(String.valueOf(used));
            root.addContent(usedElem);
            Element keyElem = new Element(""key"");
            keyElem.setText(String.valueOf(key));
            root.addContent(keyElem);
            Document settingsDoc = new Document(root);
            // Save JDOM document to file system
            File folder = new File(DRINKS_FOLDER);
            File file = new File(DRINKS_FOLDER + name + "".xml"");
            try {
                if (!folder.exists()) {
                    folder.mkdirs();
                }
                model.getLog().debug(""File for Drink: "" + file.getAbsolutePath());
                if (file.exists()) {
                    file.delete();
                }
                file.createNewFile();
                FileOutputStream fos = new FileOutputStream(file);
                XMLOutputter serializer = new XMLOutputter();
                serializer.output(settingsDoc, fos);
                fos.flush();
                fos.close();
            } catch (Exception e) {
                model.getLog().error(this, e);
            }
            return file;
        }
        return null;
    }
}
","// DrinkTest.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Drink}.
* It contains ten unit test cases for the {@link Drink#save()} method.
*/
class DrinkTest {","// DrinkTest.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Drink}.
* It contains ten unit test cases for the {@link Drink#save()} method.
*/
class DrinkTest {

		/**
		* Test case for {@link Drink#save()} method.
		* It tests if the method returns null if the name of the drink is NEW_DRINK_NAME.
		*/
		@Test
		void testSave_returnsNullIfNameIsNewDrinkName() {
				Drink drink = new Drink(null);
				drink.name = Drink.NEW_DRINK_NAME;
				assertNull(drink.save());
		}
		
		/**
		* Test case for {@link Drink#save()} method.
		* It tests if the method returns null if the name of the drink is null.
		*/
		@Test
		void testSave_returnsNullIfNameIsNull() {
				Drink drink = new Drink(null);
				drink.name = null;
				assertNull(drink.save());
		}
		
		/**
		* Test case for {@link Drink#save()} method.
		* It tests if the method returns null if the name of the drink is empty.
		*/
		@Test
		void testSave_returnsNullIfNameIsEmpty() {
				Drink drink = new Drink(null);
				drink.name = """";
				assertNull(drink.save());
		}
		
		/**
		* Test case for {@link Drink#save()} method.
		* It tests if the method returns null if the name of the drink is a whitespace.
		*/
		@Test
		void testSave_returnsNullIfNameIsWhitespace() {
				Drink drink = new Drink(null);
				drink.name = "" "";
				assertNull(drink.save());
		}
		
		/**
		* Test case for {@link Drink#save()} method.
		* It tests if the method returns null if the name of the drink is a tab.
		*/
		@Test
		void testSave_returnsNullIfNameIsTab() {
				Drink drink = new Drink(null);
				drink.name = ""\t"";
				assertNull(drink.save());
		}
		
		/**
		* Test case for {@link Drink#save()} method.
		* It tests if the method returns null if the name of the drink is a new line.
		*/
		@Test
		void testSave_returnsNullIfNameIsNewLine() {
				Drink drink = new Drink(null);
				drink.name = ""\n"";
				assertNull(drink.save());
		}
		
		/**
		* Test case for {@link Drink#save()} method.
		* It tests if the method returns null if the name of the drink is a carriage return.
		*/
		@Test
		void testSave_returnsNullIfNameIsCarriageReturn() {
				Drink drink = new Drink(null);
				drink.name = ""\r"";
				assertNull(drink.save());
		}
		
		/**
		* Test case for {@link Drink#save()} method.
		* It tests if the method returns null if the name of the drink is a form feed.
		*/
		@Test
		void testSave_returnsNullIfNameIsFormFeed() {
				Drink drink = new Drink(null);
				drink.name = ""\f"";
				assertNull(drink.save());
		}
		
		/**
		* Test case for {@link Drink#save()} method.
		* It tests if the method returns null if the name of the drink is a backspace.
		*/
		@Test
		void testSave_returnsNullIfNameIsBackspace() {
				Drink drink = new Drink(null);
				drink.name = ""\b"";
				assertNull(drink.save());
		}
		
		/**
		* Test case for {@link Drink#save()} method.
		* It tests if the method returns null if the name of the drink is a vertical tab.
		*/
		@Test
		void testSave_returnsNullIfNameIsVerticalTab() {
				Drink drink = new Drink(null);
				drink.name = ""\u000B"";
				assertNull(drink.save());
		}
}

// Drink.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import bierse.view.MyKeyMap;

/**
 * @author Rainer Friesen
 */
public class Drink {

    public File save() {
        if (!NEW_DRINK_NAME.equals(name)) {
            model.getLog().debug(""Save drink: "" + name);
            // Build JDOM document representing the settings
            Element root = new Element(""drink"");
            Element minPriceElem = new Element(""minPrice"");
            minPriceElem.setText(String.valueOf(minPrice));
            root.addContent(minPriceElem);
            Element maxPriceElem = new Element(""maxPrice"");
            maxPriceElem.setText(String.valueOf(maxPrice));
            root.addContent(maxPriceElem);
            Element startPriceElem = new Element(""startPrice"");
            startPriceElem.setText(String.valueOf(startPrice));
            root.addContent(startPriceElem);
            Element targetAmountElem = new Element(""targetAmount"");
            targetAmountElem.setText(String.valueOf(targetAmount));
            root.addContent(targetAmountElem);
            Element deltaAmountElem = new Element(""deltaAmount"");
            deltaAmountElem.setText(String.valueOf(deltaAmount));
            root.addContent(deltaAmountElem);
            Element maxStepElem = new Element(""maxStep"");
            maxStepElem.setText(String.valueOf(maxStep));
            root.addContent(maxStepElem);
            Element usedElem = new Element(""used"");
            usedElem.setText(String.valueOf(used));
            root.addContent(usedElem);
            Element keyElem = new Element(""key"");
            keyElem.setText(String.valueOf(key));
            root.addContent(keyElem);
            Document settingsDoc = new Document(root);
            // Save JDOM document to file system
            File folder = new File(DRINKS_FOLDER);
            File file = new File(DRINKS_FOLDER + name + "".xml"");
            try {
                if (!folder.exists()) {
                    folder.mkdirs();
                }
                model.getLog().debug(""File for Drink: "" + file.getAbsolutePath());
                if (file.exists()) {
                    file.delete();
                }
                file.createNewFile();
                FileOutputStream fos = new FileOutputStream(file);
                XMLOutputter serializer = new XMLOutputter();
                serializer.output(settingsDoc, fos);
                fos.flush();
                fos.close();
            } catch (Exception e) {
                model.getLog().error(this, e);
            }
            return file;
        }
        return null;
    }
}

// DrinkTest.java
package bierse.model;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import org.jdom.Document;
import org.j"
cmpl-6wredRbDrpKNuzkEFbZLi7CprkCsX,/EvoSuiteBenchmark/scenario1/49_diebierse/src/main/java/bierse/model/Settings.java,79.75114464759827,length,"// Settings.java
package bierse.model;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;

public class Settings {

    public File save() {
        // Build JDOM document representing the settings
        Element settingsRoot = new Element(DOM_SETTINGS_ROOT);
        Element timeIntervalElem = new Element(DOM_TIME_INTERVAL);
        timeIntervalElem.setText(String.valueOf(timeInterval));
        settingsRoot.addContent(timeIntervalElem);
        Element priceStepsElem = new Element(DOM_PRICE_STEPS);
        priceStepsElem.setText(String.valueOf(priceSteps));
        settingsRoot.addContent(priceStepsElem);
        Element currencyElem = new Element(DOM_CURRENCY);
        currencyElem.setText(currency);
        settingsRoot.addContent(currencyElem);
        Element backgroundElem = new Element(DOM_BACKGROUND_IMG);
        backgroundElem.addContent(backgroundImagePath);
        settingsRoot.addContent(backgroundElem);
        Element standardLogicElem = new Element(DOM_STANDARD_LOGIC);
        if (standardLogic) {
            standardLogicElem.addContent(DOM_YES);
        } else {
            standardLogicElem.addContent(DOM_NO);
        }
        settingsRoot.addContent(standardLogicElem);
        Element messageElem = new Element(DOM_MESSAGE);
        messageElem.addContent(message);
        settingsRoot.addContent(messageElem);
        Element messageSpeedElem = new Element(DOM_MESSAGE_SPEED);
        messageSpeedElem.addContent(new Integer(messageSpeed).toString());
        settingsRoot.addContent(messageSpeedElem);
        Document settingsDoc = new Document(settingsRoot);
        // Save JDOM document to file system
        File file = new File(SETTINGS_FOLDER + ""settings.xml"");
        try {
            File folder = new File(SETTINGS_FOLDER);
            if (!folder.exists()) {
                folder.mkdirs();
            }
            if (file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileOutputStream fos = new FileOutputStream(file);
            XMLOutputter serializer = new XMLOutputter();
            serializer.output(settingsDoc, fos);
            fos.flush();
            fos.close();
        } catch (Exception e) {
            model.getLog().error(this, e);
        }
        return file;
    }
}
","// SettingsTest.java
package bierse.model;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Settings}.
* It contains ten unit test cases for the {@link Settings#save()} method.
*/
class SettingsTest {","// SettingsTest.java
package bierse.model;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Settings}.
* It contains ten unit test cases for the {@link Settings#save()} method.
*/
class SettingsTest {

	/**
	* Test case for the {@link Settings#save()} method.
	* It tests if the method saves the settings to the file system.
	*/
	@Test
	void testSave() {
		// Build JDOM document representing the settings
		Element settingsRoot = new Element(DOM_SETTINGS_ROOT);
		Element timeIntervalElem = new Element(DOM_TIME_INTERVAL);
		timeIntervalElem.setText(String.valueOf(timeInterval));
		settingsRoot.addContent(timeIntervalElem);
		Element priceStepsElem = new Element(DOM_PRICE_STEPS);
		priceStepsElem.setText(String.valueOf(priceSteps));
		settingsRoot.addContent(priceStepsElem);
		Element currencyElem = new Element(DOM_CURRENCY);
		currencyElem.setText(currency);
		settingsRoot.addContent(currencyElem);
		Element backgroundElem = new Element(DOM_BACKGROUND_IMG);
		backgroundElem.addContent(backgroundImagePath);
		settingsRoot.addContent(backgroundElem);
		Element standardLogicElem = new Element(DOM_STANDARD_LOGIC);
		if (standardLogic) {
			standardLogicElem.addContent(DOM_YES);
		} else {
			standardLogicElem.addContent(DOM_NO);
		}
		settingsRoot.addContent(standardLogicElem);
		Element messageElem = new Element(DOM_MESSAGE);
		messageElem.addContent(message);
		settingsRoot.addContent(messageElem);
		Element messageSpeedElem = new Element(DOM_MESSAGE_SPEED);
		messageSpeedElem.addContent(new Integer(messageSpeed).toString());
		settingsRoot.addContent(messageSpeedElem);
		Document settingsDoc = new Document(settingsRoot);
		// Save JDOM document to file system
		File file = new File(SETTINGS_FOLDER + ""settings.xml"");
		try {
			File folder = new File(SETTINGS_FOLDER);
			if (!folder.exists()) {
				folder.mkdirs();
			}
			if (file.exists()) {
				file.delete();
			}
			file.createNewFile();
			FileOutputStream fos = new FileOutputStream(file);
			XMLOutputter serializer = new XMLOutputter();
			serializer.output(settingsDoc, fos);
			fos.flush();
			fos.close();
		} catch (Exception e) {
			model.getLog().error(this, e);
		}
		return file;
	}
}

// Settings.java
package bierse.model;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;

public class Settings {

    public File save() {
        // Build JDOM document representing the settings
        Element settingsRoot = new Element(DOM_SETTINGS_ROOT);
        Element timeIntervalElem = new Element(DOM_TIME_INTERVAL);
        timeIntervalElem.setText(String.valueOf(timeInterval));
        settingsRoot.addContent(timeIntervalElem);
        Element priceStepsElem = new Element(DOM_PRICE_STEPS);
        priceStepsElem.setText(String.valueOf(priceSteps));
        settingsRoot.addContent(priceStepsElem);
        Element currencyElem = new Element(DOM_CURRENCY);
        currencyElem.setText(currency);
        settingsRoot.addContent(currencyElem);
        Element backgroundElem = new Element(DOM_BACKGROUND_IMG);
        backgroundElem.addContent(backgroundImagePath);
        settingsRoot.addContent(backgroundElem);
        Element standardLogicElem = new Element(DOM_STANDARD_LOGIC);
        if (standardLogic) {
            standardLogicElem.addContent(DOM_YES);
        } else {
            standardLogicElem.addContent(DOM_NO);
        }
        settingsRoot.addContent(standardLogicElem);
        Element messageElem = new Element(DOM_MESSAGE);
        messageElem.addContent(message);
        settingsRoot.addContent(messageElem);
        Element messageSpeedElem = new Element(DOM_MESSAGE_SPEED);
        messageSpeedElem.addContent(new Integer(messageSpeed).toString());
        settingsRoot.addContent(messageSpeedElem);
        Document settingsDoc = new Document(settingsRoot);
        // Save JDOM document to file system
        File file = new File(SETTINGS_FOLDER + ""settings.xml"");
        try {
            File folder = new File(SETTINGS_FOLDER);
            if (!folder.exists()) {
                folder.mkdirs();
            }
            if (file.exists()) {
                file.delete();
            }
            file.createNewFile();
            FileOutputStream fos = new FileOutputStream(file);
            XMLOutputter serializer = new XMLOutputter();
            serializer.output(settingsDoc, fos);
            fos.flush();
            fos.close();
        } catch (Exception e) {
            model.getLog().error(this, e);
        }
        return file;
    }
}

// SettingsTest.java
package bierse.model;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Settings}.
* It contains ten unit test cases for the {@link Settings#save()} method.
*/
class SettingsTest {
		
	/**
	* Test case for the {@link Settings#save()} method.
	* It tests if the method saves the settings to the file system.
	*/
	@Test
	void testSave() {
		// Build JDOM document representing the settings
		Element settingsRoot = new Element(DOM_SETTINGS_ROOT);
		Element timeIntervalElem = new Element(DOM_TIME_INTERVAL);
		timeIntervalElem.setText(String.valueOf(timeInterval));
		settingsRoot.addContent(timeIntervalElem);
		Element priceStepsElem = new Element(DOM_PRICE_STEPS);
		priceStepsElem.setText(String.valueOf(priceSteps));
		settingsRoot.addContent(priceStepsElem);
		Element currencyElem = new Element(DOM_CURRENCY);
		currencyElem.setText(currency);
		settingsRoot.addContent(currencyElem);
		Element backgroundElem = new Element(DOM_BACKGROUND_IMG);
		backgroundElem.addContent(backgroundImagePath);
		settingsRoot.addContent(backgroundElem);
		Element standardLogicElem = new Element(DOM_STANDARD_LOGIC);
		if (standardLogic) {
			standardLogicElem.addContent(DOM_YES);
		} else {
			standardLogicElem.addContent(DOM_NO);
		}
		settingsRoot.addContent(standardLogicElem);
		Element messageElem = new Element(DOM_MESSAGE);
		messageElem.addContent(message);
		settingsRoot.addContent(messageElem);
		Element messageSpeedElem = new Element(DOM_MESSAGE_"
