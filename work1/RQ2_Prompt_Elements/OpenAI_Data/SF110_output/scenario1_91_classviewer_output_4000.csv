ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
1abcd023-d896-4c75-bc06-3cf2f9bb29ef,/EvoSuiteBenchmark/scenario1/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo0.java,-1,"ERROR - Error communicating with OpenAI: (""Connection broken: ConnectionResetError(104, 'Connection reset by peer')"", ConnectionResetError(104, 'Connection reset by peer'))","// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printFields() {
        Field[] f = c.getFields();
        length = f.length;
        String[] StringData = null;
        if (length > 0) {
            StringData = new String[length];
            String tempStr;
            Object obj = new Object();
            if (debug)
                System.out.println(""****************************************"");
            for (count = 0; count < length; count++) {
                try {
                    tempStr = f[count] + ""="" + f[count].get(obj);
                    StringData[count] = tempStr;
                    if (debug)
                        System.out.println(tempStr);
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                    tempStr = f[count] + ""= ILLEGAL ACCESS EXCEPTION, unable to load"";
                    StringData[count] = tempStr;
                } catch (IllegalArgumentException j) {
                    j.printStackTrace();
                    tempStr = f[count] + ""= ILLEGAL ARGUMENT EXCEPTION, unable to load"";
                    StringData[count] = tempStr;
                }
            }
        } else if (debug)
            System.out.println(""No public fields."");
        return StringData;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.
*/
class ClassInfoTest {
"
cmpl-6wvb168EdzHQJDQM9h9AJtU5tUBOz,/EvoSuiteBenchmark/scenario1/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo1.java,157.3730971813202,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printMethods() {
        if (debug)
            System.out.println(""****************************************"");
        String[] tempArray = null;
        if (cMethods != null) {
            tempArray = new String[cMethods.length];
            System.arraycopy(cMethods, 0, tempArray, 0, cMethods.length);
        }
        if (debug && tempArray == null)
            System.out.println(""No public methods."");
        else {
            printArray(tempArray);
        }
        return tempArray;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfoTest {

		@Test
		void testPrintMethods() {
				ClassInfo ci = new ClassInfo();
				String[] tempArray = ci.printMethods();
				assertEquals(tempArray[0], ""public void com.jstevh.viewer.ClassInfo.printMethods()"");
				assertEquals(tempArray[1], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.String[])"");
				assertEquals(tempArray[2], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.Object[])"");
				assertEquals(tempArray[3], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Constructor[])"");
				assertEquals(tempArray[4], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Field[])"");
				assertEquals(tempArray[5], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Method[])"");
				assertEquals(tempArray[6], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.Class[])"");
				assertEquals(tempArray[7], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Type[])"");
				assertEquals(tempArray[8], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.TypeVariable[])"");
				assertEquals(tempArray[9], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Parameter[])"");
				assertEquals(tempArray[10], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AnnotatedType[])"");
				assertEquals(tempArray[11], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Annotation[])"");
				assertEquals(tempArray[12], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AnnotatedElement[])"");
				assertEquals(tempArray[13], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.GenericDeclaration[])"");
				assertEquals(tempArray[14], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Member[])"");
				assertEquals(tempArray[15], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AccessibleObject[])"");
				assertEquals(tempArray[16], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Modifier[])"");
				assertEquals(tempArray[17], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Type[][])"");
				assertEquals(tempArray[18], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.TypeVariable[][])"");
				assertEquals(tempArray[19], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Parameter[][])"");
				assertEquals(tempArray[20], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AnnotatedType[][])"");
				assertEquals(tempArray[21], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Annotation[][])"");
				assertEquals(tempArray[22], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AnnotatedElement[][])"");
				assertEquals(tempArray[23], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.GenericDeclaration[][])"");
				assertEquals(tempArray[24], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Member[][])"");
				assertEquals(tempArray[25], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AccessibleObject[][])"");
				assertEquals(tempArray[26], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Modifier[][])"");
				assertEquals(tempArray[27], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Type[][][])"");
				assertEquals(tempArray[28], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.TypeVariable[][][])"");
				assertEquals(tempArray[29], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Parameter[][][])"");
				assertEquals(tempArray[30], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AnnotatedType[][][])"");
				assertEquals(tempArray[31], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Annotation[][][])"");
				assertEquals(tempArray[32], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AnnotatedElement[][][])"");
				assertEquals(tempArray[33], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.GenericDeclaration[][][])"");
				assertEquals(tempArray[34], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Member[][][])"");
				assertEquals(tempArray[35], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AccessibleObject[][][])"");
				assertEquals(tempArray[36], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Modifier[][][])"");
				assertEquals(tempArray[37], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Type[][][][])"");
				assertEquals(tempArray[38], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.TypeVariable[][][][])"");
				assertEquals(tempArray[39], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Parameter[][][][])"");
				assertEquals(tempArray[40], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AnnotatedType[][][][])"");
				assertEquals(tempArray[41], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Annotation[][][][])"");
				assertEquals(tempArray[42], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AnnotatedElement[][][][])"");
				assertEquals(tempArray[43], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.GenericDeclaration[][][][])"");
				assertEquals(tempArray[44], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Member[][][][])"");
				assertEquals(tempArray[45], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AccessibleObject[][][][])"");
				assertEquals(tempArray[46], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Modifier[][][][])"");
				assertEquals(tempArray[47], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Type[][][][][])"");
				assertEquals(tempArray[48], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.TypeVariable[][][][][])"");
				assertEquals(tempArray[49], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Parameter[][][][][])"");
				assertEquals(tempArray[50], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AnnotatedType[][][][][])"");
				assertEquals(tempArray[51], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Annotation[][][][][])"");
				assertEquals(tempArray[52], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AnnotatedElement[][][][][])"");
				assertEquals(tempArray[53], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.GenericDeclaration[][][][][])"");
				assertEquals(tempArray[54], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Member[][][][][])"");
				assertEquals(tempArray[55], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AccessibleObject[][][][][])"");
				assertEquals(tempArray[56], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Modifier[][][][][])"");
				assertEquals(tempArray[57], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Type[][][][][][])"");
				assertEquals(tempArray[58], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.TypeVariable[][][][][][])"");
				assertEquals(tempArray[59], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Parameter[][][][][][])"");
				assertEquals(tempArray[60], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AnnotatedType[][][][][][])"");
				assertEquals(tempArray[61], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Annotation[][][][][][])"");
				assertEquals(tempArray[62], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AnnotatedElement[][][][][][])"");
				assertEquals(tempArray[63], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.GenericDeclaration[][][][][][])"");
				assertEquals(tempArray[64], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Member[][][][][][])"");
				assertEquals(tempArray[65], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AccessibleObject[][][][][][])"");
				assertEquals(tempArray[66], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Modifier[][][][][][])"");
				assertEquals(tempArray[67], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Type[][][][][][][])"");
				assertEquals(tempArray[68], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.TypeVariable[][][][][][][])"");
				assertEquals(tempArray[69], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Parameter[][][][][][][])"");
				assertEquals(tempArray[70], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AnnotatedType[][][][][][][])"");
				assertEquals(tempArray[71], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Annotation[][][][][][][])"");
				assertEquals(tempArray[72], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AnnotatedElement[][][][][][][])"");
				assertEquals(tempArray[73], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.GenericDeclaration[][][][][][][])"");
				assertEquals(tempArray[74], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Member[][][][][][][])"");
				assertEquals(tempArray[75], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AccessibleObject[][][][][][][])"");
				assertEquals(tempArray[76], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Modifier[][][][][][][])"");
				assertEquals(tempArray[77], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Type[][][][][][][][])"");
				assertEquals(tempArray[78], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.TypeVariable[][][][][][][][])"");
				assertEquals(tempArray[79], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Parameter[][][][][][][][])"");
				assertEquals(tempArray[80], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AnnotatedType[][][][][][][][])"");
				assertEquals(tempArray[81], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.Annotation[][][][][][][][])"");
				assertEquals(tempArray[82], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.AnnotatedElement[][][][][][][][])"");
				assertEquals(tempArray[83], ""public void com.jstevh.viewer.ClassInfo.printArray(java.lang.reflect.GenericDeclaration[][][][][][][]["
cmpl-6wvdYdLkJfVHA3VZGwg5qxRjLMRnJ,/EvoSuiteBenchmark/scenario1/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo2.java,136.41714930534363,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printMethods(int param) {
        if (cMethods == null)
            return null;
        if (debug)
            System.out.println(""****************************************"");
        String[] data = cMethods;
        StringList tempList = new StringList();
        for (int i = 0; i < cMethods.length; i++) {
            if (cMethods[i].indexOf(getClassName() + '.') != -1)
                tempList.add(cMethods[i]);
        }
        if (!tempList.isEmpty())
            data = tempList.toArray();
        else
            data = null;
        if (debug && data == null)
            System.out.println(""No public methods."");
        else {
            printArray(data);
        }
        return data;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfoTest {

		@Test
		void testPrintMethods() {
				ClassInfo ci = new ClassInfo();
				String[] data = ci.printMethods(0);
				assertNotNull(data);
				assertEquals(data.length, 1);
				assertEquals(data[0], ""public void com.jstevh.viewer.ClassInfo.printMethods(int)"");
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printMethods(int param) {
        if (cMethods == null)
            return null;
        if (debug)
            System.out.println(""****************************************"");
        String[] data = cMethods;
        StringList tempList = new StringList();
        for (int i = 0; i < cMethods.length; i++) {
            if (cMethods[i].indexOf(getClassName() + '.') != -1)
                tempList.add(cMethods[i]);
        }
        if (!tempList.isEmpty())
            data = tempList.toArray();
        else
            data = null;
        if (debug && data == null)
            System.out.println(""No public methods."");
        else {
            printArray(data);
        }
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfoTest {
		
		@Test
		void testPrintMethods() {
				ClassInfo ci = new ClassInfo();
				String[] data = ci.printMethods(0);
				assertNotNull(data);
				assertEquals(data.length, 1);
				assertEquals(data[0], ""public void com.jstevh.viewer.ClassInfo.printMethods(int)"");
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printMethods(int param) {
        if (cMethods == null)
            return null;
        if (debug)
            System.out.println(""****************************************"");
        String[] data = cMethods;
        StringList tempList = new StringList();
        for (int i = 0; i < cMethods.length; i++) {
            if (cMethods[i].indexOf(getClassName() + '.') != -1)
                tempList.add(cMethods[i]);
        }
        if (!tempList.isEmpty())
            data = tempList.toArray();
        else
            data = null;
        if (debug && data == null)
            System.out.println(""No public methods."");
        else {
            printArray(data);
        }
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfoTest {
		
		@Test
		void testPrintMethods() {
				ClassInfo ci = new ClassInfo();
				String[] data = ci.printMethods(0);
				assertNotNull(data);
				assertEquals(data.length, 1);
				assertEquals(data[0], ""public void com.jstevh.viewer.ClassInfo.printMethods(int)"");
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printMethods(int param) {
        if (cMethods == null)
            return null;
        if (debug)
            System.out.println(""****************************************"");
        String[] data = cMethods;
        StringList tempList = new StringList();
        for (int i = 0; i < cMethods.length; i++) {
            if (cMethods[i].indexOf(getClassName() + '.') != -1)
                tempList.add(cMethods[i]);
        }
        if (!tempList.isEmpty())
            data = tempList.toArray();
        else
            data = null;
        if (debug && data == null)
            System.out.println(""No public methods."");
        else {
            printArray(data);
        }
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfoTest {
		
		@Test
		void testPrintMethods() {
				ClassInfo ci = new ClassInfo();
				String[] data = ci.printMethods(0);
				assertNotNull(data);
				assertEquals(data.length, 1);
				assertEquals(data[0], ""public void com.jstevh.viewer.ClassInfo.printMethods(int)"");
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printMethods(int param) {
        if (cMethods == null)
            return null;
        if (debug)
            System.out.println(""****************************************"");
        String[] data = cMethods;
        StringList tempList = new StringList();
        for (int i = 0; i < cMethods.length; i++) {
            if (cMethods[i].indexOf(getClassName() + '.') != -1)
                tempList.add(cMethods[i]);
        }
        if (!tempList.isEmpty())
            data = tempList.toArray();
        else
            data = null;
        if (debug && data == null)
            System.out.println(""No public methods."");
        else {
            printArray(data);
        }
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfoTest {
		
		@Test
		void testPrintMethods() {
				ClassInfo ci = new ClassInfo();
				String[] data = ci.printMethods(0);
				assertNotNull(data);
				assertEquals(data.length, 1);
				assertEquals(data[0], ""public void com.jstevh.viewer.ClassInfo.printMethods(int)"");
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printMethods(int param) {
        if (cMethods == null)
            return null;
        if (debug)
            System.out.println(""****************************************"");
        String[] data = cMethods;
        StringList tempList = new StringList();
        for (int i = 0; i < cMethods.length; i++) {
            if (cMethods[i].indexOf(getClassName() + '.') != -1)
                tempList.add(cMethods[i]);
        }
        if (!tempList.isEmpty())
            data = tempList.toArray();
        else
            data = null;
        if (debug && data == null)
            System.out.println(""No public methods."");
        else {
            printArray(data);
        }
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfoTest {
		
		@Test
		void testPrintMethods() {
				ClassInfo ci = new ClassInfo();
				String[] data = ci.printMethods(0);
				assertNotNull(data);
				assertEquals(data.length, 1);
				assertEquals(data[0], ""public void com.jstevh.viewer.ClassInfo.printMethods(int)"");
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printMethods(int param) {
        if (cMethods == null)
            return null;
        if (debug)
            System.out.println(""****************************************"");
        String[] data = cMethods;
        StringList tempList = new StringList();
        for (int i = 0; i < cMethods.length; i++) {
            if (cMethods[i].indexOf(getClassName() + '.') != -1)
                tempList.add(cMethods[i]);
        }
        if (!tempList.isEmpty())
            data = tempList.toArray();
        else
            data = null;
        if (debug && data == null)
            System.out.println(""No public methods."");
        else {
            printArray(data);
        }
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfoTest {
		
		@Test
		void testPrintMethods() {
				ClassInfo ci = new ClassInfo();
				String[] data = ci.printMethods(0);
				assertNotNull(data);
				assertEquals(data.length, 1);
				assertEquals(data[0], ""public void com.jstevh.viewer.ClassInfo.printMethods(int)"");
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printMethods(int param) {
        if (cMethods == null)
            return null;
        if (debug)
            System.out.println(""****************************************"");
        String[] data = cMethods;
        StringList tempList = new StringList();
        for (int i = 0; i < cMethods.length; i++) {
            if (cMethods[i]."
cmpl-6wvfkzNqi0LnLif03vwVI6WqYD2P8,/EvoSuiteBenchmark/scenario1/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo3.java,155.0119607448578,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printConstructors() {
        Constructor[] constr = c.getConstructors();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(constr);
        if (debug && data == null)
            System.out.println(""No public constructors."");
        else
            printArray(data);
        return data;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfoTest {

		@Test
		void testPrintConstructors() {
				ClassInfo ci = new ClassInfo();
				String[] data = ci.printConstructors();
				assertEquals(data[0], ""public com.jstevh.viewer.ClassInfo()"");
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printConstructors() {
        Constructor[] constr = c.getConstructors();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(constr);
        if (debug && data == null)
            System.out.println(""No public constructors."");
        else
            printArray(data);
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfoTest {
		
		@Test
		void testPrintConstructors() {
				ClassInfo ci = new ClassInfo();
				String[] data = ci.printConstructors();
				assertEquals(data[0], ""public com.jstevh.viewer.ClassInfo()"");
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printConstructors() {
        Constructor[] constr = c.getConstructors();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(constr);
        if (debug && data == null)
            System.out.println(""No public constructors."");
        else
            printArray(data);
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfoTest {
		
		@Test
		void testPrintConstructors() {
				ClassInfo ci = new ClassInfo();
				String[] data = ci.printConstructors();
				assertEquals(data[0], ""public com.jstevh.viewer.ClassInfo()"");
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printConstructors() {
        Constructor[] constr = c.getConstructors();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(constr);
        if (debug && data == null)
            System.out.println(""No public constructors."");
        else
            printArray(data);
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfoTest {
		
		@Test
		void testPrintConstructors() {
				ClassInfo ci = new ClassInfo();
				String[] data = ci.printConstructors();
				assertEquals(data[0], ""public com.jstevh.viewer.ClassInfo()"");
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printConstructors() {
        Constructor[] constr = c.getConstructors();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(constr);
        if (debug && data == null)
            System.out.println(""No public constructors."");
        else
            printArray(data);
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfoTest {
		
		@Test
		void testPrintConstructors() {
				ClassInfo ci = new ClassInfo();
				String[] data = ci.printConstructors();
				assertEquals(data[0], ""public com.jstevh.viewer.ClassInfo()"");
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printConstructors() {
        Constructor[] constr = c.getConstructors();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(constr);
        if (debug && data == null)
            System.out.println(""No public constructors."");
        else
            printArray(data);
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfoTest {
		
		@Test
		void testPrintConstructors() {
				ClassInfo ci = new ClassInfo();
				String[] data = ci.printConstructors();
				assertEquals(data[0], ""public com.jstevh.viewer.ClassInfo()"");
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printConstructors() {
        Constructor[] constr = c.getConstructors();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(constr);
        if (debug && data == null)
            System.out.println(""No public constructors."");
        else
            printArray(data);
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfoTest {
		
		@Test
		void testPrintConstructors() {
				ClassInfo ci = new ClassInfo();
				String[] data = ci.printConstructors();
				assertEquals(data[0], ""public com.jstevh.viewer.ClassInfo()"");
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printConstructors() {
        Constructor[] constr = c.getConstructors();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(constr);
        if (debug && data == null)
            System.out.println(""No public constructors."");
        else
            printArray(data);
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfoTest {
		
		@Test
		void testPrintConstructors() {
				ClassInfo ci = new ClassInfo();
				String[] data = ci.printConstructors();
				assertEquals(data[0], ""public com.jstevh.viewer.ClassInfo()"");
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printConstructors() {
        Constructor[] constr = c.getConstructors();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(constr);
        if (debug && data == null)
            System.out.println(""No public constructors."");
        else
            printArray(data);
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfoTest {
		
		@Test
		void testPrintConstructors() {
				ClassInfo ci = new ClassInfo();
				String[] data = ci.printConstructors();
				assertEquals(data[0], ""public com.jstevh.viewer.ClassInfo()"");
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
"
cmpl-6wviFTlRuEcb9LQpQx3NhinkgjEOE,/EvoSuiteBenchmark/scenario1/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo4.java,123.96905136108398,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] printInterfaces() {
        Class[] inter = c.getInterfaces();
        if (debug)
            System.out.println(""****************************************"");
        String[] data = getData(inter);
        if (c != java.lang.Object.class && !c.isInterface()) {
            Class superC = c.getSuperclass();
            TreeSet<String> hInterfaces = new TreeSet<String>();
            int i = 0;
            if (data != null)
                for (i = 0; i < data.length; i++) {
                    hInterfaces.add(data[i]);
                }
            while (superC != null && superC != java.lang.Object.class) {
                inter = superC.getInterfaces();
                if (debug)
                    System.out.println(""****************************************"");
                data = getData(inter);
                if (data != null)
                    for (i = 0; i < data.length; i++) {
                        hInterfaces.add(data[i]);
                    }
                superC = superC.getSuperclass();
            }
            if (hInterfaces.size() != 0) {
                data = new String[hInterfaces.size()];
                Iterator it = hInterfaces.iterator();
                i = 0;
                while (it.hasNext()) {
                    data[i] = (String) it.next();
                    i++;
                }
            }
        }
        if (debug && data == null)
            System.out.println(""No interfaces."");
        else
            printArray(data);
        return data;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printInterfaces()} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printInterfaces()} method.
*/
class ClassInfoTest {

		@Test
		void testPrintInterfaces() {
				ClassInfo ci = new ClassInfo(String.class);
				String[] data = ci.printInterfaces();
				assertEquals(data[0], ""java.io.Serializable"");
				assertEquals(data[1], ""java.lang.Comparable<java.lang.String>"");
				assertEquals(data[2], ""java.lang.CharSequence"");
				assertEquals(data[3], ""java.lang.Appendable"");
				assertEquals(data[4], ""java.lang.Readable"");
				assertEquals(data[5], ""java.lang.Runnable"");
				assertEquals(data[6], ""java.lang.Thread.UncaughtExceptionHandler"");
				assertEquals(data[7], ""java.lang.Iterable<java.lang.String>"");
				assertEquals(data[8], ""java.util.Comparator<java.lang.String>"");
				assertEquals(data[9], ""java.util.Formattable"");
				assertEquals(data[10], ""java.util.RandomAccess"");
				assertEquals(data[11], ""java.util.concurrent.Callable<java.lang.String>"");
				assertEquals(data[12], ""java.util.function.Supplier<java.lang.String>"");
				assertEquals(data[13], ""java.util.function.Consumer<java.lang.String>"");
				assertEquals(data[14], ""java.util.function.Predicate<java.lang.String>"");
				assertEquals(data[15], ""java.util.function.Function<java.lang.String,java.lang.String>"");
				assertEquals(data[16], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.String>"");
				assertEquals(data[17], ""java.util.function.UnaryOperator<java.lang.String>"");
				assertEquals(data[18], ""java.util.function.BinaryOperator<java.lang.String>"");
				assertEquals(data[19], ""java.util.function.BiConsumer<java.lang.String,java.lang.String>"");
				assertEquals(data[20], ""java.util.function.BiPredicate<java.lang.String,java.lang.String>"");
				assertEquals(data[21], ""java.util.function.ToIntFunction<java.lang.String>"");
				assertEquals(data[22], ""java.util.function.ToLongFunction<java.lang.String>"");
				assertEquals(data[23], ""java.util.function.ToDoubleFunction<java.lang.String>"");
				assertEquals(data[24], ""java.util.function.IntFunction<java.lang.String>"");
				assertEquals(data[25], ""java.util.function.LongFunction<java.lang.String>"");
				assertEquals(data[26], ""java.util.function.DoubleFunction<java.lang.String>"");
				assertEquals(data[27], ""java.util.function.IntToLongFunction"");
				assertEquals(data[28], ""java.util.function.IntToDoubleFunction"");
				assertEquals(data[29], ""java.util.function.LongToIntFunction"");
				assertEquals(data[30], ""java.util.function.LongToDoubleFunction"");
				assertEquals(data[31], ""java.util.function.DoubleToIntFunction"");
				assertEquals(data[32], ""java.util.function.DoubleToLongFunction"");
				assertEquals(data[33], ""java.util.function.IntUnaryOperator"");
				assertEquals(data[34], ""java.util.function.LongUnaryOperator"");
				assertEquals(data[35], ""java.util.function.DoubleUnaryOperator"");
				assertEquals(data[36], ""java.util.function.IntBinaryOperator"");
				assertEquals(data[37], ""java.util.function.LongBinaryOperator"");
				assertEquals(data[38], ""java.util.function.DoubleBinaryOperator"");
				assertEquals(data[39], ""java.util.function.ObjIntConsumer<java.lang.String>"");
				assertEquals(data[40], ""java.util.function.ObjLongConsumer<java.lang.String>"");
				assertEquals(data[41], ""java.util.function.ObjDoubleConsumer<java.lang.String>"");
				assertEquals(data[42], ""java.util.function.ToIntBiFunction<java.lang.String,java.lang.String>"");
				assertEquals(data[43], ""java.util.function.ToLongBiFunction<java.lang.String,java.lang.String>"");
				assertEquals(data[44], ""java.util.function.ToDoubleBiFunction<java.lang.String,java.lang.String>"");
				assertEquals(data[45], ""java.util.function.IntBiFunction<java.lang.String,java.lang.String>"");
				assertEquals(data[46], ""java.util.function.LongBiFunction<java.lang.String,java.lang.String>"");
				assertEquals(data[47], ""java.util.function.DoubleBiFunction<java.lang.String,java.lang.String>"");
				assertEquals(data[48], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Integer>"");
				assertEquals(data[49], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Long>"");
				assertEquals(data[50], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Double>"");
				assertEquals(data[51], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Boolean>"");
				assertEquals(data[52], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Character>"");
				assertEquals(data[53], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Byte>"");
				assertEquals(data[54], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Short>"");
				assertEquals(data[55], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Float>"");
				assertEquals(data[56], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Object>"");
				assertEquals(data[57], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Void>"");
				assertEquals(data[58], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Number>"");
				assertEquals(data[59], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Integer>"");
				assertEquals(data[60], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Long>"");
				assertEquals(data[61], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Double>"");
				assertEquals(data[62], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Boolean>"");
				assertEquals(data[63], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Character>"");
				assertEquals(data[64], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Byte>"");
				assertEquals(data[65], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Short>"");
				assertEquals(data[66], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Float>"");
				assertEquals(data[67], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Object>"");
				assertEquals(data[68], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Void>"");
				assertEquals(data[69], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Number>"");
				assertEquals(data[70], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Integer>"");
				assertEquals(data[71], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Long>"");
				assertEquals(data[72], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Double>"");
				assertEquals(data[73], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Boolean>"");
				assertEquals(data[74], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Character>"");
				assertEquals(data[75], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Byte>"");
				assertEquals(data[76], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Short>"");
				assertEquals(data[77], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Float>"");
				assertEquals(data[78], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Object>"");
				assertEquals(data[79], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Void>"");
				assertEquals(data[80], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Number>"");
				assertEquals(data[81], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Integer>"");
				assertEquals(data[82], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Long>"");
				assertEquals(data[83], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Double>"");
				assertEquals(data[84], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Boolean>"");
				assertEquals(data[85], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Character>"");
				assertEquals(data[86], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Byte>"");
				assertEquals(data[87], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Short>"");
				assertEquals(data[88], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Float>"");
				assertEquals(data[89], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Object>"");
				assertEquals(data[90], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Void>"");
				assertEquals(data[91], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Number>"");
				assertEquals(data[92], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Integer>"");
				assertEquals(data[93], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Long>"");
				assertEquals(data[94], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Double>"");
				assertEquals(data[95], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Boolean>"");
				assertEquals(data[96], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Character>"");
				assertEquals(data[97], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Byte>"");
				assertEquals(data[98], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Short>"");
				assertEquals(data[99], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Float>"");
				assertEquals(data[100], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Object>"");
				assertEquals(data[101], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Void>"");
				assertEquals(data[102], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Number>"");
				assertEquals(data[103], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Integer>"");
				assertEquals(data[104], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Long>"");
				assertEquals(data[105], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Double>"");
				assertEquals(data[106], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Boolean>"");
				assertEquals(data[107], ""java.util.function.BiFunction<java.lang.String,java.lang.String,java.lang.Character>"");
				assertEquals(data[108], ""java.util."
cmpl-6wvkFYyJtRZVRBtKsbu7FW1F1m9Kq,/EvoSuiteBenchmark/scenario1/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo5.java,147.25309371948242,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public static String[] getData(Member[] m) {
        length = m.length;
        if (length == 0)
            return null;
        String[] StringData = new String[length];
        String tempStr;
        for (count = 0; count < m.length; count++) {
            tempStr = m[count].toString();
            StringData[count] = tempStr;
        }
        return StringData;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {

	@Test
	void testGetData() {
		Member[] m = new Member[0];
		String[] result = ClassInfo.getData(m);
		assertNull(result);
		
		m = new Member[1];
		m[0] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		result = ClassInfo.getData(m);
		assertEquals(1, result.length);
		assertEquals(""test"", result[0]);
		
		m = new Member[2];
		m[0] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		m[1] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test2"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		result = ClassInfo.getData(m);
		assertEquals(2, result.length);
		assertEquals(""test"", result[0]);
		assertEquals(""test2"", result[1]);
		
		m = new Member[3];
		m[0] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		m[1] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test2"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		m[2] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test3"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		result = ClassInfo.getData(m);
		assertEquals(3, result.length);
		assertEquals(""test"", result[0]);
		assertEquals(""test2"", result[1]);
		assertEquals(""test3"", result[2]);
		
		m = new Member[4];
		m[0] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		m[1] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test2"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		m[2] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test3"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		m[3] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test4"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		result = ClassInfo.getData(m);
		assertEquals(4, result.length);
		assertEquals(""test"", result[0]);
		assertEquals(""test2"", result[1]);
		assertEquals(""test3"", result[2]);
		assertEquals(""test4"", result[3]);
		
		m = new Member[5];
		m[0] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		m[1] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test2"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		m[2] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test3"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		m[3] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test4"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		m[4] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test5"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		result = ClassInfo.getData(m);
		assertEquals(5, result.length);
		assertEquals(""test"", result[0]);
		assertEquals(""test2"", result[1]);
		assertEquals(""test3"", result[2]);
		assertEquals(""test4"", result[3]);
		assertEquals(""test5"", result[4]);
		
		m = new Member[6];
		m[0] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		m[1] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test2"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		m[2] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test3"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		m[3] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test4"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		m[4] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test5"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		m[5] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test6"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		result = ClassInfo.getData(m);
		assertEquals(6, result.length);
		assertEquals(""test"", result[0]);
		assertEquals(""test2"", result[1]);
		assertEquals(""test3"", result[2]);
		assertEquals(""test4"", result[3]);
		assertEquals(""test5"", result[4]);
		assertEquals(""test6"", result[5]);
		
		m = new Member[7];
		m[0] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		m[1] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test2"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		m[2] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
			}
			@Override
			public String getName() {
				return ""test3"";
			}
			@Override
			public int getModifiers() {
				return 0;
			}
			@Override
			public boolean isSynthetic() {
				return false;
			}
		};
		m[3] = new Member() {
			@Override
			public Class<?> getDeclaringClass() {
				return null;
"
cmpl-6wvmdwpgTyT4OmEkC0gwslWg38mYk,/EvoSuiteBenchmark/scenario1/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo6.java,126.44277453422546,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public static String[] getData(Class[] m) {
        length = m.length;
        if (length == 0)
            return null;
        String[] StringData = new String[length];
        String tempStr;
        for (count = 0; count < m.length; count++) {
            tempStr = m[count].getName();
            StringData[count] = tempStr;
        }
        return StringData;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.
*/
class ClassInfoTest {

	@Test
	void testGetData() {
		Class[] m = new Class[0];
		String[] result = ClassInfo.getData(m);
		assertNull(result);
		
		m = new Class[1];
		m[0] = String.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		
		m = new Class[2];
		m[0] = String.class;
		m[1] = Integer.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		assertEquals(""java.lang.Integer"", result[1]);
		
		m = new Class[3];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		assertEquals(""java.lang.Integer"", result[1]);
		assertEquals(""java.lang.Double"", result[2]);
		
		m = new Class[4];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		assertEquals(""java.lang.Integer"", result[1]);
		assertEquals(""java.lang.Double"", result[2]);
		assertEquals(""java.lang.Boolean"", result[3]);
		
		m = new Class[5];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		m[4] = Character.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		assertEquals(""java.lang.Integer"", result[1]);
		assertEquals(""java.lang.Double"", result[2]);
		assertEquals(""java.lang.Boolean"", result[3]);
		assertEquals(""java.lang.Character"", result[4]);
		
		m = new Class[6];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		m[4] = Character.class;
		m[5] = Float.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		assertEquals(""java.lang.Integer"", result[1]);
		assertEquals(""java.lang.Double"", result[2]);
		assertEquals(""java.lang.Boolean"", result[3]);
		assertEquals(""java.lang.Character"", result[4]);
		assertEquals(""java.lang.Float"", result[5]);
		
		m = new Class[7];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		m[4] = Character.class;
		m[5] = Float.class;
		m[6] = Long.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		assertEquals(""java.lang.Integer"", result[1]);
		assertEquals(""java.lang.Double"", result[2]);
		assertEquals(""java.lang.Boolean"", result[3]);
		assertEquals(""java.lang.Character"", result[4]);
		assertEquals(""java.lang.Float"", result[5]);
		assertEquals(""java.lang.Long"", result[6]);
		
		m = new Class[8];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		m[4] = Character.class;
		m[5] = Float.class;
		m[6] = Long.class;
		m[7] = Short.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		assertEquals(""java.lang.Integer"", result[1]);
		assertEquals(""java.lang.Double"", result[2]);
		assertEquals(""java.lang.Boolean"", result[3]);
		assertEquals(""java.lang.Character"", result[4]);
		assertEquals(""java.lang.Float"", result[5]);
		assertEquals(""java.lang.Long"", result[6]);
		assertEquals(""java.lang.Short"", result[7]);
		
		m = new Class[9];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		m[4] = Character.class;
		m[5] = Float.class;
		m[6] = Long.class;
		m[7] = Short.class;
		m[8] = Byte.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		assertEquals(""java.lang.Integer"", result[1]);
		assertEquals(""java.lang.Double"", result[2]);
		assertEquals(""java.lang.Boolean"", result[3]);
		assertEquals(""java.lang.Character"", result[4]);
		assertEquals(""java.lang.Float"", result[5]);
		assertEquals(""java.lang.Long"", result[6]);
		assertEquals(""java.lang.Short"", result[7]);
		assertEquals(""java.lang.Byte"", result[8]);
		
		m = new Class[10];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		m[4] = Character.class;
		m[5] = Float.class;
		m[6] = Long.class;
		m[7] = Short.class;
		m[8] = Byte.class;
		m[9] = Void.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		assertEquals(""java.lang.Integer"", result[1]);
		assertEquals(""java.lang.Double"", result[2]);
		assertEquals(""java.lang.Boolean"", result[3]);
		assertEquals(""java.lang.Character"", result[4]);
		assertEquals(""java.lang.Float"", result[5]);
		assertEquals(""java.lang.Long"", result[6]);
		assertEquals(""java.lang.Short"", result[7]);
		assertEquals(""java.lang.Byte"", result[8]);
		assertEquals(""java.lang.Void"", result[9]);
	}
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.
*/
class ClassInfoTest {
		
	@Test
	void testGetData() {
		Class[] m = new Class[0];
		String[] result = ClassInfo.getData(m);
		assertNull(result);
		
		m = new Class[1];
		m[0] = String.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		
		m = new Class[2];
		m[0] = String.class;
		m[1] = Integer.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		assertEquals(""java.lang.Integer"", result[1]);
		
		m = new Class[3];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		assertEquals(""java.lang.Integer"", result[1]);
		assertEquals(""java.lang.Double"", result[2]);
		
		m = new Class[4];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		assertEquals(""java.lang.Integer"", result[1]);
		assertEquals(""java.lang.Double"", result[2]);
		assertEquals(""java.lang.Boolean"", result[3]);
		
		m = new Class[5];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		m[4] = Character.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		assertEquals(""java.lang.Integer"", result[1]);
		assertEquals(""java.lang.Double"", result[2]);
		assertEquals(""java.lang.Boolean"", result[3]);
		assertEquals(""java.lang.Character"", result[4]);
		
		m = new Class[6];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		m[4] = Character.class;
		m[5] = Float.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		assertEquals(""java.lang.Integer"", result[1]);
		assertEquals(""java.lang.Double"", result[2]);
		assertEquals(""java.lang.Boolean"", result[3]);
		assertEquals(""java.lang.Character"", result[4]);
		assertEquals(""java.lang.Float"", result[5]);
		
		m = new Class[7];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		m[4] = Character.class;
		m[5] = Float.class;
		m[6] = Long.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		assertEquals(""java.lang.Integer"", result[1]);
		assertEquals(""java.lang.Double"", result[2]);
		assertEquals(""java.lang.Boolean"", result[3]);
		assertEquals(""java.lang.Character"", result[4]);
		assertEquals(""java.lang.Float"", result[5]);
		assertEquals(""java.lang.Long"", result[6]);
		
		m = new Class[8];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		m[4] = Character.class;
		m[5] = Float.class;
		m[6] = Long.class;
		m[7] = Short.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		assertEquals(""java.lang.Integer"", result[1]);
		assertEquals(""java.lang.Double"", result[2]);
		assertEquals(""java.lang.Boolean"", result[3]);
		assertEquals(""java.lang.Character"", result[4]);
		assertEquals(""java.lang.Float"", result[5]);
		assertEquals(""java.lang.Long"", result[6]);
		assertEquals(""java.lang.Short"", result[7]);
		
		m = new Class[9];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		m[4] = Character.class;
		m[5] = Float.class;
		m[6] = Long.class;
		m[7] = Short.class;
		m[8] = Byte.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		assertEquals(""java.lang.Integer"", result[1]);
		assertEquals(""java.lang.Double"", result[2]);
		assertEquals(""java.lang.Boolean"", result[3]);
		assertEquals(""java.lang.Character"", result[4]);
		assertEquals(""java.lang.Float"", result[5]);
		assertEquals(""java.lang.Long"", result[6]);
		assertEquals(""java.lang.Short"", result[7]);
		assertEquals(""java.lang.Byte"", result[8]);
		
		m = new Class[10];
		m[0] = String.class;
		m[1] = Integer.class;
		m[2] = Double.class;
		m[3] = Boolean.class;
		m[4] = Character.class;
		m[5] = Float.class;
		m[6] = Long.class;
		m[7] = Short.class;
		m[8] = Byte.class;
		m[9] = Void.class;
		result = ClassInfo.getData(m);
		assertEquals(""java.lang.String"", result[0]);
		assertEquals(""java.lang.Integer"", result[1]);
		assertEquals(""java.lang.Double"", result[2]);
		assertEquals(""java.lang.Boolean"", result[3]);
		assertEquals(""java.lang.Character"", result[4]);
		assertEquals(""java.lang.Float"", result[5]);
		assertEquals(""java.lang.Long"", result[6]);
		assertEquals(""java.lang.Short"", result[7]);
		assertEquals(""java.lang.Byte"", result[8]);
		assertEquals(""java.lang.Void"", result[9]);
	}
}

// ClassInfoTest.java
package com"
cmpl-6wvofNcYHlqJyIjmQrULQbTdAR7FL,/EvoSuiteBenchmark/scenario1/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo7.java,143.81834816932678,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] srchMethods(String tempStr) {
        if (tempStr == null)
            return null;
        fndMethods = StringTools.searchStrings(cMethods, tempStr);
        if (fndMethods != null) {
            String[] tempArray = new String[fndMethods.length];
            System.arraycopy(fndMethods, 0, tempArray, 0, fndMethods.length);
            return tempArray;
        }
        return null;
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfoTest {

	@Test
	void testSrchMethods() {
		ClassInfo ci = new ClassInfo();
		String[] tempArray = ci.srchMethods("""");
		assertNull(tempArray);
		tempArray = ci.srchMethods(null);
		assertNull(tempArray);
		tempArray = ci.srchMethods(""a"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""ab"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abc"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcd"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcde"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcdef"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcdefg"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcdefgh"");
		assertNull(tempArray);
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] srchMethods(String tempStr) {
        if (tempStr == null)
            return null;
        fndMethods = StringTools.searchStrings(cMethods, tempStr);
        if (fndMethods != null) {
            String[] tempArray = new String[fndMethods.length];
            System.arraycopy(fndMethods, 0, tempArray, 0, fndMethods.length);
            return tempArray;
        }
        return null;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfoTest {
		
	@Test
	void testSrchMethods() {
		ClassInfo ci = new ClassInfo();
		String[] tempArray = ci.srchMethods("""");
		assertNull(tempArray);
		tempArray = ci.srchMethods(null);
		assertNull(tempArray);
		tempArray = ci.srchMethods(""a"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""ab"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abc"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcd"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcde"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcdef"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcdefg"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcdefgh"");
		assertNull(tempArray);
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] srchMethods(String tempStr) {
        if (tempStr == null)
            return null;
        fndMethods = StringTools.searchStrings(cMethods, tempStr);
        if (fndMethods != null) {
            String[] tempArray = new String[fndMethods.length];
            System.arraycopy(fndMethods, 0, tempArray, 0, fndMethods.length);
            return tempArray;
        }
        return null;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfoTest {
		
	@Test
	void testSrchMethods() {
		ClassInfo ci = new ClassInfo();
		String[] tempArray = ci.srchMethods("""");
		assertNull(tempArray);
		tempArray = ci.srchMethods(null);
		assertNull(tempArray);
		tempArray = ci.srchMethods(""a"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""ab"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abc"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcd"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcde"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcdef"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcdefg"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcdefgh"");
		assertNull(tempArray);
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] srchMethods(String tempStr) {
        if (tempStr == null)
            return null;
        fndMethods = StringTools.searchStrings(cMethods, tempStr);
        if (fndMethods != null) {
            String[] tempArray = new String[fndMethods.length];
            System.arraycopy(fndMethods, 0, tempArray, 0, fndMethods.length);
            return tempArray;
        }
        return null;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfoTest {
		
	@Test
	void testSrchMethods() {
		ClassInfo ci = new ClassInfo();
		String[] tempArray = ci.srchMethods("""");
		assertNull(tempArray);
		tempArray = ci.srchMethods(null);
		assertNull(tempArray);
		tempArray = ci.srchMethods(""a"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""ab"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abc"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcd"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcde"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcdef"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcdefg"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcdefgh"");
		assertNull(tempArray);
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] srchMethods(String tempStr) {
        if (tempStr == null)
            return null;
        fndMethods = StringTools.searchStrings(cMethods, tempStr);
        if (fndMethods != null) {
            String[] tempArray = new String[fndMethods.length];
            System.arraycopy(fndMethods, 0, tempArray, 0, fndMethods.length);
            return tempArray;
        }
        return null;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfoTest {
		
	@Test
	void testSrchMethods() {
		ClassInfo ci = new ClassInfo();
		String[] tempArray = ci.srchMethods("""");
		assertNull(tempArray);
		tempArray = ci.srchMethods(null);
		assertNull(tempArray);
		tempArray = ci.srchMethods(""a"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""ab"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abc"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcd"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcde"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcdef"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcdefg"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcdefgh"");
		assertNull(tempArray);
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] srchMethods(String tempStr) {
        if (tempStr == null)
            return null;
        fndMethods = StringTools.searchStrings(cMethods, tempStr);
        if (fndMethods != null) {
            String[] tempArray = new String[fndMethods.length];
            System.arraycopy(fndMethods, 0, tempArray, 0, fndMethods.length);
            return tempArray;
        }
        return null;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfoTest {
		
	@Test
	void testSrchMethods() {
		ClassInfo ci = new ClassInfo();
		String[] tempArray = ci.srchMethods("""");
		assertNull(tempArray);
		tempArray = ci.srchMethods(null);
		assertNull(tempArray);
		tempArray = ci.srchMethods(""a"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""ab"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abc"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcd"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcde"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcdef"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcdefg"");
		assertNull(tempArray);
		tempArray = ci.srchMethods(""abcdefgh"");
		assertNull(tempArray);
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public String[] srchMethods(String tempStr) {
        if (tempStr == null)
            return null;
        fndMethods = StringTools.searchStrings(cMethods, tempStr);
        if (fndMethods != null) {
            String[] tempArray = new String[fndMethods.length];
            System.arraycopy(fndMethods, 0, tempArray, 0, f"
cmpl-6wvqzHWR4zvNs9Fyrr9jSn1VMqOhD,/EvoSuiteBenchmark/scenario1/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo8.java,6.896481037139893,stop,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    public MethodData getFoundMethod(final int pos) {
        if (fndMethods == null || pos > fndMethods.length)
            return null;
        return new MethodData() {

            //check to make sure position isn't out of range
            String tempStr = fndMethods[pos], tempStr2;

            String className, methodName;

            int begin, end;

            Class methClass;

            {
                end = tempStr.indexOf("")"");
                tempStr = tempStr.substring(0, end + 1);
                begin = tempStr.lastIndexOf("" "");
                tempStr = tempStr.substring(begin + 1, tempStr.length());
                begin = tempStr.indexOf(""("");
                end = tempStr.lastIndexOf(""."", begin);
                className = tempStr.substring(0, end);
                methodName = tempStr.substring(end + 1, tempStr.length());
                if (debug)
                    System.out.println(""className="" + className);
                methClass = ClassInfo.tryClass(className);
                if (debug)
                    System.out.println(""methClass="" + methClass);
            }

            public String getMethPackage() {
                if (methClass == null)
                    return null;
                return methClass.getPackage() != null ? methClass.getPackage().getName() : null;
            }

            public String getMethClass() {
                if (methClass == null)
                    return null;
                return methClass.getName();
            }

            public String getMethName() {
                return methodName;
            }
        };
    }
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfoTest {

		@Test
		void testGetFoundMethod() {
				ClassInfo classInfo = new ClassInfo();
				MethodData methodData = classInfo.getFoundMethod(0);
				assertEquals(""java.lang.String"", methodData.getMethClass());
				assertEquals(""java.lang"", methodData.getMethPackage());
				assertEquals(""String"", methodData.getMethName());
		}
}

// MethodData.java
package com.jstevh.viewer;

/**
 * Interface for {@link ClassInfo#getFoundMethod(int)}.
 *
 * @author James Harris
 * @version 2.0a
 */
public interface MethodData {

    /**
     * Returns the package name of the method.
     *
     * @return the package name of the method.
     */
    public String getMethPackage();

    /**
     * Returns the class name of the method.
     *
     * @return the class name of the method.
     */
    public String getMethClass();

    /**
     * Returns the method name.
     *
     * @return the method name.
     */
    public String getMethName();
}"
