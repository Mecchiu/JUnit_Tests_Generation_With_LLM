ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wsStmwFSxwMniDuDo5l5ELMXOUgt,/EvoSuiteBenchmark/scenario3/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory0.java,82.68606281280518,length,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create an instance of {@link Page }
     */
    public Page createPage();
}
","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactoryTest {","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactoryTest {

	/**
	* Test case for {@link ObjectFactory#createPage()} method.
	* It tests if the method returns a {@link Page} object.
	*/
	@Test
	void testCreatePage() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page page = objectFactory.createPage();
		assertNotNull(page);
	}
}

// Page.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for anonymous complex type.
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""pageNumber"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""pageSize"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""totalPages"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""totalResults"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = """", propOrder = {
    ""pageNumber"",
    ""pageSize"",
    ""totalPages"",
    ""totalResults""
})
@XmlRootElement(name = ""page"")
public class Page {

    protected int pageNumber;
    protected int pageSize;
    protected int totalPages;
    protected int totalResults;

    /**
     * Gets the value of the pageNumber property.
     */
    public int getPageNumber() {
        return pageNumber;
    }

    /**
     * Sets the value of the pageNumber property.
     */
    public void setPageNumber(int value) {
        this.pageNumber = value;
    }

    /**
     * Gets the value of the pageSize property.
     */
    public int getPageSize() {
        return pageSize;
    }

    /**
     * Sets the value of the pageSize property.
     */
    public void setPageSize(int value) {
        this.pageSize = value;
    }

    /**
     * Gets the value of the totalPages property.
     */
    public int getTotalPages() {
        return totalPages;
    }

    /**
     * Sets the value of the totalPages property.
     */
    public void setTotalPages(int value) {
        this.totalPages = value;
    }

    /**
     * Gets the value of the totalResults property.
     */
    public int getTotalResults() {
        return totalResults;
    }

    /**
     * Sets the value of the totalResults property.
     */
    public void setTotalResults(int value) {
        this.totalResults = value;
    }
}

// PageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Page}.
* It contains ten unit test cases for the {@link Page#getPageNumber()} method.
*/
class PageTest {
		
	/**
	* Test case for {@link Page#getPageNumber()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetPageNumber() {
		Page page = new Page();
		page.setPageNumber(1);
		assertEquals(1, page.getPageNumber());
	}
}

// Pagination.java
package com.tripfilms.os.exttaglib.pagination;

import com.tripfilms.os.exttaglib.pagination.datatype.Page;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.TagSupport;

/**
 * <p>Tag handler class for the pagination tag.</p>
 * <p>It creates a pagination bar with links to the previous and next pages.</p>
 */
public class Pagination extends TagSupport {

    private static final long serialVersionUID = 1L;
    private Page page;
    private String url;
    private String cssClass;
    private String cssClassCurrent;
    private String cssClassPrevious;
    private String cssClassNext;
    private String cssClassFirst;
    private String cssClassLast;
    private String cssClassPreviousDisabled;
    private String cssClassNextDisabled;
    private String cssClassFirstDisabled;
    private String cssClassLastDisabled;
    private String cssClassPreviousHidden;
    private String cssClassNextHidden;
    private String cssClassFirstHidden;
    private String cssClassLastHidden;
    private String cssClassPreviousLink;
    private String cssClassNextLink;
    private String cssClassFirstLink;
    private String cssClassLastLink;
    private String cssClassPreviousLinkDisabled;
    private String cssClassNextLinkDisabled;
    private String cssClassFirstLinkDisabled;
    private String cssClassLastLinkDisabled;
    private String cssClassPreviousLinkHidden;
    private String cssClassNextLinkHidden;
    private String cssClassFirstLinkHidden;
    private String cssClassLastLinkHidden;
    private String cssClassPreviousText;
    private String cssClassNextText;
    private String cssClassFirstText;
    private String cssClassLastText;
    private String cssClassPreviousTextDisabled;
    private String cssClassNextTextDisabled;
    private String cssClassFirstTextDisabled;
    private String cssClassLastTextDisabled;
    private String cssClassPreviousTextHidden;
    private String cssClassNextTextHidden;
    private String cssClassFirstTextHidden;
    private String cssClassLastTextHidden;
    private String previousText;
    private String nextText;
    private String firstText;
    private String lastText;
    private String previousTextDisabled;
    private String nextTextDisabled;
    private String firstTextDisabled;
    private String lastTextDisabled;
    private String previousTextHidden;
    private String nextTextHidden;
    private String firstTextHidden;
    private String lastTextHidden;
    private String previousLink;
    private String nextLink;
    private String firstLink;
    private String lastLink;
    private String previousLinkDisabled;
    private String nextLinkDisabled;
    private String firstLinkDisabled;
    private String lastLinkDisabled;
    private String previousLinkHidden;
    private String nextLinkHidden;
    private String firstLinkHidden;
    private String lastLinkHidden;
    private String previousDisabled;
    private String nextDisabled;
    private String firstDisabled;
    private String lastDisabled;
    private String previousHidden;
    private String nextHidden;
    private String firstHidden;
    private String lastHidden;
    private String previous;
    private String next;
    private String first;
    private String last;
    private String current;
    private String separator;
    private String separatorDisabled;
    private String separatorHidden"
cmpl-6wsUE2YRicUHpKZQOuE9CzW1TwB93,/EvoSuiteBenchmark/scenario3/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory1.java,78.87690329551697,length,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create an instance of {@link StaticPage }
     */
    public StaticPage createStaticPage();
}
","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactoryTest {","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactoryTest {

	/**
	* Test case for {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage staticPage = objectFactory.createStaticPage();
		assertNotNull(staticPage);
	}
}

// StaticPage.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for StaticPage complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name=""StaticPage"">
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;attribute name=""page"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}int"" />
 *       &lt;attribute name=""url"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}string"" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""StaticPage"")
public class StaticPage {

    @XmlAttribute(name = ""page"", required = true)
    protected int page;
    @XmlAttribute(name = ""url"", required = true)
    protected String url;

    /**
     * Gets the value of the page property.
     *
     */
    public int getPage() {
        return page;
    }

    /**
     * Sets the value of the page property.
     *
     */
    public void setPage(int value) {
        this.page = value;
    }

    /**
     * Gets the value of the url property.
     *
     * @return
     *     possible object is
     *     {@link String }
     *
     */
    public String getUrl() {
        return url;
    }

    /**
     * Sets the value of the url property.
     *
     * @param value
     *     allowed object is
     *     {@link String }
     *
     */
    public void setUrl(String value) {
        this.url = value;
    }
}

// StaticPageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StaticPage}.
* It contains ten unit test cases for the {@link StaticPage#getPage()} method.
*/
class StaticPageTest {
		
	/**
	* Test case for {@link StaticPage#getPage()} method.
	* It tests the {@link StaticPage#getPage()} method.
	*/
	@Test
	void testGetPage() {
		StaticPage staticPage = new StaticPage();
		staticPage.setPage(1);
		assertEquals(1, staticPage.getPage());
	}
}

// StaticPageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StaticPage}.
* It contains ten unit test cases for the {@link StaticPage#getUrl()} method.
*/
class StaticPageTest {
		
	/**
	* Test case for {@link StaticPage#getUrl()} method.
	* It tests the {@link StaticPage#getUrl()} method.
	*/
	@Test
	void testGetUrl() {
		StaticPage staticPage = new StaticPage();
		staticPage.setUrl(""http://www.tripfilms.com"");
		assertEquals(""http://www.tripfilms.com"", staticPage.getUrl());
	}
}

// StaticPageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StaticPage}.
* It contains ten unit test cases for the {@link StaticPage#setPage(int)} method.
*/
class StaticPageTest {
		
	/**
	* Test case for {@link StaticPage#setPage(int)} method.
	* It tests the {@link StaticPage#setPage(int)} method.
	*/
	@Test
	void testSetPage() {
		StaticPage staticPage = new StaticPage();
		staticPage.setPage(1);
		assertEquals(1, staticPage.getPage());
	}
}

// StaticPageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StaticPage}.
* It contains ten unit test cases for the {@link StaticPage#setUrl(String)} method.
*/
class StaticPageTest {
		
	/**
	* Test case for {@link StaticPage#setUrl(String)} method.
	* It tests the {@link StaticPage#setUrl(String)} method.
	*/
	@Test
	void testSetUrl() {
		StaticPage staticPage = new StaticPage();
		staticPage.setUrl(""http://www.tripfilms.com"");
		assertEquals(""http://www.tripfilms.com"", staticPage.getUrl());
	}
}

// StaticPageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StaticPage}.
* It contains ten unit test cases for the {@link StaticPage#toString()} method.
*/
class StaticPageTest {
		
	/**
	* Test case for {@link StaticPage#toString()} method.
	* It tests the {@link StaticPage#toString()} method.
	*/
	@Test
	void testToString() {
		StaticPage staticPage = new StaticPage();
		staticPage.setPage(1);
		staticPage.setUrl(""http://www.tripfilms.com"");
		assertEquals(""StaticPage{page=1, url=http://www.tripfilms.com}"", staticPage.toString());
	}
}

// StaticPageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StaticPage}.
* It contains ten unit test cases for the {@link StaticPage#equals(Object)} method.
*/
class StaticPageTest {
		
	/**
	* Test case for {@link StaticPage#equals(Object)} method.
	* It tests the {@link StaticPage#equals(Object)} method.
	*/
	@Test
	void testEquals() {
		StaticPage staticPage = new StaticPage();
		staticPage.setPage(1);
		staticPage.setUrl"
cmpl-6wsVUsVbrdfVR93KM4r8IAfJwha4M,/EvoSuiteBenchmark/scenario3/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory2.java,67.96574854850769,stop,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create an instance of {@link Pagination }
     */
    public Pagination createPagination();
}
","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactoryTest {","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactoryTest {

	/**
	* Test case for {@link ObjectFactory#createPagination()} method.
	* It tests if the method returns a {@link Pagination} object.
	*/
	@Test
	void testCreatePagination() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pagination pagination = objectFactory.createPagination();
		assertTrue(pagination instanceof Pagination);
	}
}

// Pagination.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for anonymous complex type.
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""currentPage"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""totalPages"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""totalResults"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""resultsPerPage"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = """", propOrder = {
    ""currentPage"",
    ""totalPages"",
    ""totalResults"",
    ""resultsPerPage""
})
@XmlRootElement(name = ""pagination"")
public class Pagination {

    protected int currentPage;
    protected int totalPages;
    protected int totalResults;
    protected int resultsPerPage;

    /**
     * Gets the value of the currentPage property.
     */
    public int getCurrentPage() {
        return currentPage;
    }

    /**
     * Sets the value of the currentPage property.
     */
    public void setCurrentPage(int value) {
        this.currentPage = value;
    }

    /**
     * Gets the value of the totalPages property.
     */
    public int getTotalPages() {
        return totalPages;
    }

    /**
     * Sets the value of the totalPages property.
     */
    public void setTotalPages(int value) {
        this.totalPages = value;
    }

    /**
     * Gets the value of the totalResults property.
     */
    public int getTotalResults() {
        return totalResults;
    }

    /**
     * Sets the value of the totalResults property.
     */
    public void setTotalResults(int value) {
        this.totalResults = value;
    }

    /**
     * Gets the value of the resultsPerPage property.
     */
    public int getResultsPerPage() {
        return resultsPerPage;
    }

    /**
     * Sets the value of the resultsPerPage property.
     */
    public void setResultsPerPage(int value) {
        this.resultsPerPage = value;
    }
}

// PaginationTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Pagination}.
* It contains ten unit test cases for the {@link Pagination#getCurrentPage()}, {@link Pagination#setCurrentPage(int)},
* {@link Pagination#getTotalPages()}, {@link Pagination#setTotalPages(int)}, {@link Pagination#getTotalResults()},
* {@link Pagination#setTotalResults(int)}, {@link Pagination#getResultsPerPage()} and {@link Pagination#setResultsPerPage(int)} methods.
*/
class PaginationTest {
		
	/**
	* Test case for {@link Pagination#getCurrentPage()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetCurrentPage() {
		Pagination pagination = new Pagination();
		pagination.setCurrentPage(1);
		assertEquals(1, pagination.getCurrentPage());
	}
	
	/**
	* Test case for {@link Pagination#setCurrentPage(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetCurrentPage() {
		Pagination pagination = new Pagination();
		pagination.setCurrentPage(1);
		assertEquals(1, pagination.getCurrentPage());
	}
	
	/**
	* Test case for {@link Pagination#getTotalPages()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetTotalPages() {
		Pagination pagination = new Pagination();
		pagination.setTotalPages(1);
		assertEquals(1, pagination.getTotalPages());
	}
	
	/**
	* Test case for {@link Pagination#setTotalPages(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetTotalPages() {
		Pagination pagination = new Pagination();
		pagination.setTotalPages(1);
		assertEquals(1, pagination.getTotalPages());
	}
	
	/**
	* Test case for {@link Pagination#getTotalResults()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetTotalResults() {
		Pagination pagination = new Pagination();
		pagination.setTotalResults(1);
		assertEquals(1, pagination.getTotalResults());
	}
	
	/**
	* Test case for {@link Pagination#setTotalResults(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetTotalResults() {
		Pagination pagination = new Pagination();
		pagination.setTotalResults(1);
		assertEquals(1, pagination.getTotalResults());
	}
	
	/**
	* Test case for {@link Pagination#getResultsPerPage()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetResultsPerPage() {
		Pagination pagination = new Pagination();
		pagination.setResultsPerPage(1);
		assertEquals(1, pagination.getResultsPerPage());
	}
	
	/**
	* Test case for {@link Pagination#setResultsPerPage(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetResultsPerPage() {
		Pagination pagination = new Pagination();
		pagination.setResultsPerPage(1);
		assertEquals(1, pagination.getResultsPerPage());
	}
}

// package-info.java
/**
 * This package contains the JAXB classes for the pagination data type.
 */
package com.tripfilms.os.exttaglib.pagination.datatype;"
cmpl-6wsWahgTaEFxwy9M5Fvt0KP6tc6Yf,/EvoSuiteBenchmark/scenario3/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory3.java,68.5770788192749,length,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create an instance of {@link Pages }
     */
    public Pages createPages();
}
","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactoryTest {","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactoryTest {

	/**
	* Test case for {@link ObjectFactory#createPages()}.
	*/
	@Test
	void testCreatePages() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pages pages = objectFactory.createPages();
		assertNotNull(pages);
	}
}

// Pages.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for anonymous complex type.
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""page"" type=""{http://www.tripfilms.com/os/exttaglib/pagination/datatype}page"" maxOccurs=""unbounded""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = """", propOrder = {
    ""page""
})
@XmlRootElement(name = ""pages"")
public class Pages {

    @XmlElement(required = true)
    protected List<Page> page;

    /**
     * Gets the value of the page property.
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the page property.
     * <p>For example, to add a new item, do as follows:
     * <pre>
     *    getPage().add(newItem);
     * </pre>
     * <p>Objects of the following type(s) are allowed in the list
     * {@link Page }
     */
    public List<Page> getPage() {
        if (page == null) {
            page = new ArrayList<Page>();
        }
        return this.page;
    }
}

// PagesTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Pages}.
* It contains ten unit test cases for the {@link Pages#getPage()} method.
*/
class PagesTest {
		
	/**
	* Test case for {@link Pages#getPage()}.
	*/
	@Test
	void testGetPage() {
		Pages pages = new Pages();
		List<Page> page = new ArrayList<Page>();
		pages.setPage(page);
		assertEquals(page, pages.getPage());
	}
}

// Page.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for page complex type.
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;complexType name=""page"">
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;attribute name=""number"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}int"" />
 *       &lt;attribute name=""url"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}string"" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""page"")
public class Page {

    @XmlAttribute(name = ""number"", required = true)
    protected int number;
    @XmlAttribute(name = ""url"", required = true)
    protected String url;

    /**
     * Gets the value of the number property.
     */
    public int getNumber() {
        return number;
    }

    /**
     * Sets the value of the number property.
     */
    public void setNumber(int value) {
        this.number = value;
    }

    /**
     * Gets the value of the url property.
     * @return possible object is
     * {@link String }
     */
    public String getUrl() {
        return url;
    }

    /**
     * Sets the value of the url property.
     * @param value allowed object is
     * {@link String }
     */
    public void setUrl(String value) {
        this.url = value;
    }
}

// PageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Page}.
* It contains ten unit test cases for the {@link Page#getNumber()} method.
*/
class PageTest {
		
	/**
	* Test case for {@link Page#getNumber()}.
	*/
	@Test
	void testGetNumber() {
		Page page = new Page();
		page.setNumber(1);
		assertEquals(1, page.getNumber());
	}
}

// Pagination.java
package com.tripfilms.os.exttaglib.pagination;

import com.tripfilms.os.exttaglib.pagination.datatype.Pages;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.SimpleTagSupport;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

/**
 * <p>Tag handler class for the pagination tag.
 * <p>It contains ten methods.
 */
public class Pagination extends SimpleTagSupport {

    private String url;
    private int currentPage;
    private int totalPages;
    private int maxPages;
    private int maxPageLinks;
    private String cssClass;
    private String cssStyle;
    private String cssClassCurrent;
    private String cssStyleCurrent;
    private String cssClassPrevious;
    private String cssStylePrevious;
    private String cssClassNext;
    private String cssStyleNext;
    private String cssClassFirst;
    private String cssStyleFirst;
    private String cssClassLast;
    private String cssStyleLast;
    private String cssClassEllipsis;
    private String cssStyleEllipsis;
    private String previous"
cmpl-6wsXhdv58DargIAZXw3cVLPZ0VzgS,/EvoSuiteBenchmark/scenario3/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions0.java,39.333125829696655,stop,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     *
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern);
}
","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateFormat(Date, String)} method.
*/
class FunctionsTest {","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateFormat(Date, String)} method.
*/
class FunctionsTest {

	/**
	 * Test case 1.
	 * Test the dateFormat method with a null date.
	 * Expected result: a null date is returned.
	 */
	@Test
	public void testDateFormatNullDate() {
		Date date = null;
		String pattern = ""dd/MM/yyyy"";
		String result = Functions.dateFormat(date, pattern);
		assertNull(result);
	}
	
	/**
	 * Test case 2.
	 * Test the dateFormat method with a null pattern.
	 * Expected result: a null date is returned.
	 */
	@Test
	public void testDateFormatNullPattern() {
		Date date = new Date();
		String pattern = null;
		String result = Functions.dateFormat(date, pattern);
		assertNull(result);
	}
	
	/**
	 * Test case 3.
	 * Test the dateFormat method with a null date and a null pattern.
	 * Expected result: a null date is returned.
	 */
	@Test
	public void testDateFormatNullDateAndPattern() {
		Date date = null;
		String pattern = null;
		String result = Functions.dateFormat(date, pattern);
		assertNull(result);
	}
	
	/**
	 * Test case 4.
	 * Test the dateFormat method with a date and a null pattern.
	 * Expected result: a null date is returned.
	 */
	@Test
	public void testDateFormatDateAndNullPattern() {
		Date date = new Date();
		String pattern = null;
		String result = Functions.dateFormat(date, pattern);
		assertNull(result);
	}
	
	/**
	 * Test case 5.
	 * Test the dateFormat method with a null date and a pattern.
	 * Expected result: a null date is returned.
	 */
	@Test
	public void testDateFormatNullDateAndPattern() {
		Date date = null;
		String pattern = ""dd/MM/yyyy"";
		String result = Functions.dateFormat(date, pattern);
		assertNull(result);
	}
	
	/**
	 * Test case 6.
	 * Test the dateFormat method with a date and a pattern.
	 * Expected result: the date is formatted with the pattern.
	 */
	@Test
	public void testDateFormatDateAndPattern() {
		Date date = new Date();
		String pattern = ""dd/MM/yyyy"";
		String result = Functions.dateFormat(date, pattern);
		assertNotNull(result);
	}
	
	/**
	 * Test case 7.
	 * Test the dateFormat method with a date and a pattern.
	 * Expected result: the date is formatted with the pattern.
	 */
	@Test
	public void testDateFormatDateAndPattern2() {
		Date date = new Date();
		String pattern = ""dd/MM/yyyy"";
		String result = Functions.dateFormat(date, pattern);
		assertNotNull(result);
	}
	
	/**
	 * Test case 8.
	 * Test the dateFormat method with a date and a pattern.
	 * Expected result: the date is formatted with the pattern.
	 */
	@Test
	public void testDateFormatDateAndPattern3() {
		Date date = new Date();
		String pattern = ""dd/MM/yyyy"";
		String result = Functions.dateFormat(date, pattern);
		assertNotNull(result);
	}
	
	/**
	 * Test case 9.
	 * Test the dateFormat method with a date and a pattern.
	 * Expected result: the date is formatted with the pattern.
	 */
	@Test
	public void testDateFormatDateAndPattern4() {
		Date date = new Date();
		String pattern = ""dd/MM/yyyy"";
		String result = Functions.dateFormat(date, pattern);
		assertNotNull(result);
	}
	
	/**
	 * Test case 10.
	 * Test the dateFormat method with a date and a pattern.
	 * Expected result: the date is formatted with the pattern.
	 */
	@Test
	public void testDateFormatDateAndPattern5() {
		Date date = new Date();
		String pattern = ""dd/MM/yyyy"";
		String result = Functions.dateFormat(date, pattern);
		assertNotNull(result);
	}
}
```

## License

This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details"
cmpl-6wsYkLy7haGWtvB2QbVZ2twRknCH9,/EvoSuiteBenchmark/scenario3/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions1.java,86.33017301559448,length,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    /**
     * Add 's or ' at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     *
     * @param pText the text
     * @return the text with 's or '
     */
    public static String addS(String pText);
}
","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#addS(String)} method.
*/
class FunctionsTest {","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#addS(String)} method.
*/
class FunctionsTest {

	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text is null.
	 */
	@Test
	public void testAddS_null() {
		String text = null;
		String result = Functions.addS(text);
		assertNull(result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text is empty.
	 */
	@Test
	public void testAddS_empty() {
		String text = """";
		String result = Functions.addS(text);
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS() {
		String text = ""James"";
		String result = Functions.addS(text);
		assertEquals(""James'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS2() {
		String text = ""James'"";
		String result = Functions.addS(text);
		assertEquals(""James'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS3() {
		String text = ""James's"";
		String result = Functions.addS(text);
		assertEquals(""James's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS4() {
		String text = ""James's'"";
		String result = Functions.addS(text);
		assertEquals(""James's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS5() {
		String text = ""James's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS6() {
		String text = ""James's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS7() {
		String text = ""James's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS8() {
		String text = ""James's's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS9() {
		String text = ""James's's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS10() {
		String text = ""James's's's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS11() {
		String text = ""James's's's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS12() {
		String text = ""James's's's's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS13() {
		String text = ""James's's's's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS14() {
		String text = ""James's's's's's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS15() {
		String text = ""James's's's's's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS16() {
		String text = ""James's's's's's's's'"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's'"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS17() {
		String text = ""James's's's's's's's's"";
		String result = Functions.addS(text);
		assertEquals(""James's's's's's's's's"", result);
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the text ends with 's.
	 */
	@Test
	public void testAddS_endsWithS18() {
		String text = ""James's's"
cmpl-6wsa86mZGFiuwL8RQvYfoXg2fVGwD,/EvoSuiteBenchmark/scenario3/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions2.java,26.443280935287476,stop,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    /**
     * Convert a date in milliseconds
     *
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime);
}
","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class FunctionsTest {","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class FunctionsTest {

	/**
	 * Test case 1.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds1() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 2.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds2() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 3.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds3() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 4.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds4() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 5.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds5() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 6.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds6() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 7.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds7() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 8.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds8() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 9.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds9() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
	
	/**
	 * Test case 10.
	 *
	 * @throws Exception
	 */
	@Test
	public void testDateToMilliseconds10() throws Exception {
		Date date = new Date();
		long result = Functions.dateToMilliseconds(date);
		assertEquals(date.getTime(), result);
	}
}
```

## License

This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details"
