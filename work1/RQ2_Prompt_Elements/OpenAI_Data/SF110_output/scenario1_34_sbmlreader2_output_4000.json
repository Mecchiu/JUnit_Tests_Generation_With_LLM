[
{
    "id": "cmpl-6x6fLTQddTPlXnWAHhPhdvfDnrEFE",
    "object": "text_completion",
    "created": 1679544995,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t/**\n\t* Test of accept method, of class SBMLFilter.\n\t*/\n\t@Test\n\tvoid testAccept() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = null;\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t\t// TODO review the generated test code and remove the default call to fail.\n\t\tfail(\"The test case is a prototype.\");\n\t}\n\t\n}",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 454,
        "completion_tokens": 137,
        "total_tokens": 591
    },
    "time_taken": 2.433894634246826,
    "prompt_id": "/EvoSuiteBenchmark/scenario1/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter0.java",
    "original_code": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    public boolean accept(File file) {\n        String fileName = file.getName();\n        boolean firstPass = false;\n        //  First test:  file must end with one of the registered file extensions.\n        for (int i = 0; i < fileExtensions.length; i++) {\n            if (fileName.endsWith(fileExtensions[i])) {\n                firstPass = true;\n            }\n        }\n        if (firstPass) {\n            //  Second test:  file header must contain the biopax declaration\n            try {\n                String header = getHeader(file);\n                if (header.indexOf(\"www.sbml.org\") > 0) {\n                    return true;\n                }\n            } catch (IOException e) {\n            }\n        }\n        return false;\n    }\n}\n",
    "test_prompt": "// SBMLFilterTest.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains ten unit test cases for the {@link SBMLFilter#accept(File)} method.\n*/\nclass SBMLFilterTest {"
},
{
    "id": "cmpl-6x6gOA3CWLPKT974RDsSkc8KjVMzq",
    "object": "text_completion",
    "created": 1679545060,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t/**\n\t* Test of getReader method, of class SBMLFilter.\n\t*/\n\t@Test\n\tvoid testGetReader() {\n\t\tSystem.out.println(\"getReader\");\n\t\tString fileName = \"\";\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader expResult = null;\n\t\tGraphReader result = instance.getReader(fileName);\n\t\tassertEquals(expResult, result);\n\t\t// TODO review the generated test code and remove the default call to fail.\n\t\tfail(\"The test case is a prototype.\");\n\t}\n\t\n}",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 435,
        "completion_tokens": 143,
        "total_tokens": 578
    },
    "time_taken": 3.1831774711608887,
    "prompt_id": "/EvoSuiteBenchmark/scenario1/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter1.java",
    "original_code": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    public GraphReader getReader(String fileName) {\n        System.out.println(\"Getting SBML reader ...\");\n        try {\n            // Test if libsbml library is available\n            System.loadLibrary(\"sbmlj\");\n            /* Extra check to be sure we have access to libSBML: */\n            Class.forName(\"org.sbml.libsbml.libsbml\");\n            // Use the libSBML based parser\n            System.out.println(\"... using 'libsbml parser'\");\n            return new SBMLGraphReader2(fileName);\n        } catch (Exception e) {\n            // If any error occurs use the classic SBML Reader\n            return new SBMLGraphReader(fileName);\n        }\n    }\n}\n",
    "test_prompt": "// SBMLFilterTest.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains ten unit test cases for the {@link SBMLFilter#getReader(String)} method.\n*/\nclass SBMLFilterTest {"
},
{
    "id": "cmpl-6x6hRgSHCDKo7ZCT0Vg7FdldsCaWa",
    "object": "text_completion",
    "created": 1679545125,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the visual style is created correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyle() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tassertEquals(visualStyle.getName(), \"SBMLReader\");\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node shape is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeShape() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tCalculator shapeCalculator = nodeAppCalc.getCalculator(VisualPropertyType.NODE_SHAPE);\n\t\tDiscreteMapping disMapping = (DiscreteMapping) shapeCalculator.getMapping(0);\n\t\tassertEquals(disMapping.getMapValue(\"species\"), NodeShape.DIAMOND);\n\t\tassertEquals(disMapping.getMapValue(\"reaction\"), NodeShape.ELLIPSE);\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node label is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeLabel() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tCalculator nlc = nodeAppCalc.getCalculator(VisualPropertyType.NODE_LABEL);\n\t\tPassThroughMapping m = (PassThroughMapping) nlc.getMapping(0);\n\t\tassertEquals(m.getControllingAttributeName(), \"sbml name\");\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node size is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeSize() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tCalculator sizeCalculator = nodeAppCalc.getCalculator(VisualPropertyType.NODE_SIZE);\n\t\tDiscreteMapping sizeMapping = (DiscreteMapping) sizeCalculator.getMapping(0);\n\t\tassertEquals(sizeMapping.getMapValue(\"species\"), 30.0);\n\t\tassertEquals(sizeMapping.getMapValue(\"reaction\"), 30.0);\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the edge arrow shape is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleEdgeArrowShape() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tEdgeAppearanceCalculator edgeAppCalc = visualStyle.getEdgeAppearanceCalculator();\n\t\tCalculator edgeArrowCalculator = edgeAppCalc.getCalculator(VisualPropertyType.EDGE_SRCARROW_SHAPE);\n\t\tDiscreteMapping arrowMapping = (DiscreteMapping) edgeArrowCalculator.getMapping(0);\n\t\tassertEquals(arrowMapping.getMapValue(\"reaction-product\"), ArrowShape.ARROW);\n\t\tassertEquals(arrowMapping.getMapValue(\"reaction-reactant\"), ArrowShape.NONE);\n\t\tassertEquals(arrowMapping.getMapValue(\"reaction-modifier\"), ArrowShape.CIRCLE);\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the edge colour is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleEdgeColor() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tEdgeAppearanceCalculator edgeAppCalc = visualStyle.getEdgeAppearanceCalculator();\n\t\tCalculator edgeColorCalculator = edgeAppCalc.getCalculator(VisualPropertyType.EDGE_COLOR);\n\t\tDiscreteMapping edgeColorMapping = (DiscreteMapping) edgeColorCalculator.getMapping(0);\n\t\tassertEquals(edgeColorMapping.getMapValue(\"reaction-product\"), Color.GREEN);\n\t\tassertEquals(edgeColorMapping.getMapValue(\"reaction-reactant\"), Color.RED);\n\t\tassertEquals(edgeColorMapping.getMapValue(\"reaction-modifier\"), Color.BLACK);\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node size is locked.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeSizeLocked() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tassertTrue(nodeAppCalc.getNodeSizeLocked());\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node shape is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeShape2() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tCalculator shapeCalculator = nodeAppCalc.getCalculator(VisualPropertyType.NODE_SHAPE);\n\t\tDiscreteMapping disMapping = (DiscreteMapping) shapeCalculator.getMapping(0);\n\t\tassertEquals(disMapping.getMapValue(\"species\"), NodeShape.DIAMOND);\n\t\tassertEquals(disMapping.getMapValue(\"reaction\"), NodeShape.ELLIPSE);\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node label is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeLabel2() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tCalculator nlc = nodeAppCalc.getCalculator(VisualPropertyType.NODE_LABEL);\n\t\tPassThroughMapping m = (PassThroughMapping) nlc.getMapping(0);\n\t\tassertEquals(m.getControllingAttributeName(), \"sbml name\");\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node size is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeSize2() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tCalculator sizeCalculator = nodeAppCalc.getCalculator(VisualPropertyType.NODE_SIZE);\n\t\tDiscreteMapping sizeMapping = (DiscreteMapping) sizeCalculator.getMapping(0);\n\t\tassertEquals(sizeMapping.getMapValue(\"species\"), 30.0);\n\t\tassertEquals(sizeMapping.getMapValue(\"reaction\"), 30.0);\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the edge arrow shape is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleEdgeArrowShape2() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tEdgeAppearanceCalculator edgeAppCalc = visualStyle.getEdgeAppearanceCalculator();\n\t\tCalculator edgeArrowCalculator = edgeAppCalc.getCalculator(VisualPropertyType.EDGE_SRCARROW_SHAPE);\n\t\tDiscreteMapping arrowMapping = (DiscreteMapping) edgeArrowCalculator.getMapping(0);\n\t\tassertEquals(arrowMapping.getMapValue(\"reaction-product\"), ArrowShape.ARROW);\n\t\tassertEquals(arrowMapping.getMapValue(\"reaction-reactant\"), ArrowShape.NONE);\n\t\tassertEquals(arrowMapping.getMapValue(\"reaction-modifier\"), ArrowShape.CIRCLE);\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the edge colour is set correctly.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleEdgeColor2() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tEdgeAppearanceCalculator edgeAppCalc = visualStyle.getEdgeAppearanceCalculator();\n\t\tCalculator edgeColorCalculator = edgeAppCalc.getCalculator(VisualPropertyType.EDGE_COLOR);\n\t\tDiscreteMapping edgeColorMapping = (DiscreteMapping) edgeColorCalculator.getMapping(0);\n\t\tassertEquals(edgeColorMapping.getMapValue(\"reaction-product\"), Color.GREEN);\n\t\tassertEquals(edgeColorMapping.getMapValue(\"reaction-reactant\"), Color.RED);\n\t\tassertEquals(edgeColorMapping.getMapValue(\"reaction-modifier\"), Color.BLACK);\n\t}\n\t\n\t/**\n\t* Test case for {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n\t* This test case checks if the node size is locked.\n\t*/\n\t@Test\n\tvoid testCreateVisualStyleNodeSizeLocked2() {\n\t\tCyNetwork network = new CyNetwork();\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tNodeAppearanceCalculator nodeAppCalc = visualStyle.getNodeAppearanceCalculator();\n\t\tassertTrue(nodeAppCalc.getNodeSizeLocked());\n\t}\n}\n\n// SBMLReader.java\npackage sbmlreader2;\n\nimport cytoscape.*;\nimport cytoscape.data.*;\nimport cytoscape.data.readers.*;\nimport cytoscape.plugin.*;\nimport cytoscape.util.*;\nimport cytoscape.view.*;\nimport cytoscape.visual.*;\nimport cytoscape.visual.calculators.*;\nimport cytoscape.visual.mappings.*;\nimport java.awt.Color;\nimport java.io.*;\nimport java.util.*;\nimport javax.swing.JOptionPane;\nimport org.sbml.jsbml.*;\n\n/**\n * SBMLReader.java\n * This class reads an SBML file and creates a Cytoscape network.\n *\n * @author W.P.A. Ligtenberg, Eindhoven University of Technology\n */\npublic class SBMLReader extends CytoscapePlugin {\n\n    public static final String SBML_FILE_EXTENSION = \"xml\";\n    public static final String SBML_FILE_DESCRIPTION = \"SBML files\";\n    public static final String SBML_FILE_TYPE = \"SBML\";\n    public static final String SBML_READER_ID = \"SBMLReader\";\n    public static final String SBML_READER_NAME = \"SBMLReader\";\n    public static final String SBML_READER_DESCRIPTION = \"SBMLReader\";\n    public static final String SBML_READER_VERSION = \"1.0\";\n    public static final String SBML_READER_VS = \"SBMLReader\";\n    public static final String NODE_TYPE_ATT = \"nodeType\";\n    public static final String EDGE_TYPE_ATT = \"edgeType\";\n    public static final String REACTION_ID_ATT = \"reactionId\";\n    public static final String REACTION_NAME_ATT = \"reactionName\";\n    public static final String REACTION_TYPE_ATT = \"reactionType\";\n    public static final String REACTION_TYPE_REVERSIBLE = \"reversible\";\n    public static final String REACTION_TYPE_IRREVERSIBLE = \"irreversible\";\n    public static final String REACTION_TYPE_UNKNOWN = \"unknown\";\n    public static final String REACTION_TYPE_UNDEFINED = \"undefined\";\n    public static final String REACTION_TYPE_NONE = \"none\";\n    public static final String REACTION_TYPE_ASSOCIATION = \"association\";\n    public static final String REACTION_TYPE_DISSOCIATION = \"dissociation\";\n    public static final String REACTION_TYPE_DEGRADATION = \"degradation\";\n    public static final String REACTION_TYPE_BIMODAL = \"bimodal\";\n    public static final String REACTION_TYPE_TRANSCRIPTION = \"transcription\";\n    public static final String REACTION_TYPE_TRANSLATION = \"translation\";\n    public static final String REACTION_TYPE_TRANSPORT = \"transport\";\n    public static final String REACTION_TYPE_STATE_TRANSITION = \"state transition\";\n    public static final String REACTION_TYPE_TRIGGER = \"trigger\";\n    public static final String REACTION_TYPE_INHIBITION = \"inhibition\";\n    public static final String REACTION_TYPE_CATALYSIS = \"catalysis\";\n    public static final String REACTION_TYPE_MODULATION = \"modulation\";\n    public static final String REACTION_TYPE_NECESSARY_STIMULATION = \"necessary stimulation\";\n    public static final String REACTION_TYPE_UNKNOWN_PROCESS = \"unknown process\";\n    public static final String REACTION_TYPE_OMITTED_PROCESS = \"omitted process\";\n    public static final String REACTION_TYPE_UNCERTAIN_PROCESS = \"uncertain process\";\n    public static final String REACTION_TYPE_NEGATIVE_INFLUENCE = \"negative influence\";\n    public static final String REACTION_TYPE_POSITIVE_INFLUENCE = \"positive influence\";\n    public static final String REACTION_TYPE_UNKNOWN_INFLUENCE = \"unknown influence\";\n    public static final String REACTION_TYPE_ASSIGNMENT = \"assignment\";\n    public static final String REACTION_TYPE_INTERACTION = \"interaction\";\n    public static final String REACTION_TYPE_LOGIC_ARC = \"logic arc\";\n    public static final String REACTION_TYPE_EQUIVALENCE_ARC = \"equivalence arc\";\n    public static final String REACTION_TYPE_INHIBITOR_ARC = \"inhibitor arc\";\n    public static final String REACTION_TYPE_UNKNOWN_ARC = \"unknown arc\";\n    public static final String REACTION_TYPE_CONSUMPTION = \"consumption\";\n    public static final String REACTION_TYPE_PRODUCTION = \"production\";\n    public static final String REACTION_TYPE_MODIFICATION = \"modification\";\n    public static final String REACTION_TYPE_STIMULATION = \"stimulation\";\n    public static final String REACTION_TYPE_CATALYSIS_REVERSIBLE = \"catalysis reversible\";\n    public static final String REACTION_TYPE_CATALYSIS_IRREVERSIBLE = \"catalysis irreversible\";\n    public static final String REACTION_TYPE_INHIBITION_REVERSIBLE = \"inhibition reversible\";\n    public static final String REACTION_TYPE_INHIBITION_IRREVERSIBLE = \"inhibition",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 1336,
        "completion_tokens": 4000,
        "total_tokens": 5336
    },
    "time_taken": 130.87441444396973,
    "prompt_id": "/EvoSuiteBenchmark/scenario1/34_sbmlreader2/src/main/java/sbmlreader2/SBMLVisualStyleFactory.java",
    "original_code": "// SBMLVisualStyleFactory.java\npackage sbmlreader2;\n\nimport cytoscape.*;\nimport cytoscape.visual.*;\nimport cytoscape.visual.calculators.*;\nimport cytoscape.visual.mappings.*;\nimport java.awt.Color;\n\n/**\n * VisualStyleFactory.java\n * This class defines the visualstyle in Cytoscape for the SBMLReader plugin.\n *\n * @author W.P.A. Ligtenberg, Eindhoven University of Technology\n */\npublic class SBMLVisualStyleFactory {\n\n    public static VisualStyle createVisualStyle(CyNetwork network) {\n        VisualMappingManager vmManager = Cytoscape.getVisualMappingManager();\n        NodeAppearanceCalculator nodeAppCalc = new NodeAppearanceCalculator();\n        EdgeAppearanceCalculator edgeAppCalc = new EdgeAppearanceCalculator();\n        CalculatorCatalog calculatorCatalog = vmManager.getCalculatorCatalog();\n        // ------------------------------ Set node shapes ---------------------------//\n        DiscreteMapping disMapping = new DiscreteMapping(NodeShape.RECT, ObjectMapping.NODE_MAPPING);\n        disMapping.setControllingAttributeName(NODE_TYPE_ATT, network, false);\n        disMapping.putMapValue(\"species\", NodeShape.DIAMOND);\n        disMapping.putMapValue(\"reaction\", NodeShape.ELLIPSE);\n        Calculator shapeCalculator = new BasicCalculator(\"SBMLReader Shape Calculator\", disMapping, VisualPropertyType.NODE_SHAPE);\n        nodeAppCalc.setCalculator(shapeCalculator);\n        // ------------------------------ Set the label ------------------------------//\n        // Display the value for geneName as a label\n        String cName = \"sbml name\";\n        Calculator nlc = calculatorCatalog.getCalculator(VisualPropertyType.NODE_LABEL, cName);\n        if (nlc == null) {\n            PassThroughMapping m = new PassThroughMapping(new String(), cName);\n            nlc = new BasicCalculator(cName, m, VisualPropertyType.NODE_LABEL);\n        }\n        nodeAppCalc.setCalculator(nlc);\n        //--------------------- Set the size of the nodes --------------------------//\n        //Discrete mapping on nodeType\n        Double speciesNodeSize = new Double(30);\n        Double reactionNodeSize = new Double(30);\n        DiscreteMapping sizeMapping = new DiscreteMapping(reactionNodeSize, ObjectMapping.NODE_MAPPING);\n        sizeMapping.setControllingAttributeName(NODE_TYPE_ATT, network, false);\n        sizeMapping.putMapValue(\"species\", speciesNodeSize);\n        sizeMapping.putMapValue(\"reaction\", reactionNodeSize);\n        Calculator sizeCalculator = new BasicCalculator(\"SBMLReader Size Calculator\", sizeMapping, VisualPropertyType.NODE_SIZE);\n        nodeAppCalc.setCalculator(sizeCalculator);\n        nodeAppCalc.setNodeSizeLocked(true);\n        // ------------------------------ Set edge arrow shape ---------------------------//\n        DiscreteMapping arrowMapping = new DiscreteMapping(ArrowShape.DELTA, ObjectMapping.NODE_MAPPING);\n        arrowMapping.setControllingAttributeName(EDGE_TYPE_ATT, network, false);\n        arrowMapping.putMapValue(\"reaction-product\", ArrowShape.ARROW);\n        arrowMapping.putMapValue(\"reaction-reactant\", ArrowShape.NONE);\n        arrowMapping.putMapValue(\"reaction-modifier\", ArrowShape.CIRCLE);\n        Calculator edgeArrowCalculator = new BasicCalculator(\"SBMLReader Edge Arrow Calculator\", arrowMapping, VisualPropertyType.EDGE_SRCARROW_SHAPE);\n        edgeAppCalc.setCalculator(edgeArrowCalculator);\n        // ------------------------------ Set edge colour ---------------------------//\n        DiscreteMapping edgeColorMapping = new DiscreteMapping(Color.BLACK, ObjectMapping.NODE_MAPPING);\n        edgeColorMapping.setControllingAttributeName(EDGE_TYPE_ATT, network, false);\n        edgeColorMapping.putMapValue(\"reaction-product\", Color.GREEN);\n        edgeColorMapping.putMapValue(\"reaction-reactant\", Color.RED);\n        edgeColorMapping.putMapValue(\"reaction-modifier\", Color.BLACK);\n        Calculator edgeColorCalculator = new BasicCalculator(\"SBMLReader Edge Color Calculator\", edgeColorMapping, VisualPropertyType.EDGE_COLOR);\n        edgeAppCalc.setCalculator(edgeColorCalculator);\n        //------------------------- Create a visual style -------------------------------//\n        GlobalAppearanceCalculator gac = vmManager.getVisualStyle().getGlobalAppearanceCalculator();\n        VisualStyle visualStyle = new VisualStyle(SBMLReader_VS, nodeAppCalc, edgeAppCalc, gac);\n        return visualStyle;\n    }\n}\n",
    "test_prompt": "// SBMLVisualStyleFactoryTest.java\npackage sbmlreader2;\n\nimport cytoscape.*;\nimport cytoscape.visual.*;\nimport cytoscape.visual.calculators.*;\nimport cytoscape.visual.mappings.*;\nimport java.awt.Color;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLVisualStyleFactory}.\n* It contains ten unit test cases for the {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n*/\nclass SBMLVisualStyleFactoryTest {"
}
]