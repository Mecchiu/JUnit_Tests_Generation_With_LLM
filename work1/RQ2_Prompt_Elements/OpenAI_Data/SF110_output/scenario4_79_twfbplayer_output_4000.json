[
{
    "id": "cmpl-6xEOGcT3nSWGWm3SFclPMP7ay7qtV",
    "object": "text_completion",
    "created": 1679574688,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t\tprivate static final transient Logger LOG = Logger.getLogger(SimpleCombatant_0Test.class.getName());\n\t\t\n\t\tprivate final int maxHealth;\n\t\t\n\t\tprivate final CombatantSide side;\n\t\t\n\t\tprivate final String name;\n\t\t\n\t\tprivate final String city;\n\t\t\n\t\tprivate final Set<CombatantObserver> observers = new HashSet<CombatantObserver>();\n\t\t\n\t\tprivate final Object stateChangeLock = new Object();\n\t\t\n\t\tprivate final CharacterClass charClass;\n\t\t\n\t\tprivate final Weapon weapon;\n\t\t\n\t\tprivate CombatantState state;\n\t\t\n\t\tprivate Combatant aimingAt = null;\n\t\t\n\t\t/**\n\t\t * Create a new {@link Combatant} at the given position and the given amount\n\t\t * of health.\n\t\t *\n\t\t * @param side\n\t\t *            not null\n\t\t * @param initialState\n\t\t *            not null\n\t\t * @param maxHealth\n\t\t *            > 0\n\t\t * @param name\n\t\t *            the name of the player of this Combatant\n\t\t * @param characterClass\n\t\t *            maybe null for old logs\n\t\t * @param weapon\n\t\t *            not null\n\t\t * @param city\n\t\t *            not null\n\t\t */\n\t\tpublic SimpleCombatant(final CombatantSide side, final CombatantState initialState, final int maxHealth, final String name, final CharacterClass characterClass, final Weapon weapon, final String city) {\n\t\t}\n\t\t\n\t\t/**\n\t\t * @see java.lang.Object#toString()\n\t\t */\n\t\t@Override\n\t\tpublic String toString();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#getName()\n\t\t */\n\t\tpublic String getName();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#getWeapon()\n\t\t */\n\t\tpublic Weapon getWeapon();\n\t\t\n\t\t/**\n\t\t * internal method for graphical display\n\t\t *\n\t\t * @return the maximal health\n\t\t */\n\t\tpublic int _getMaxLP();\n\t\t\n\t\t/**\n\t\t * internal method for graphical display\n\t\t *\n\t\t * @return the current health\n\t\t */\n\t\tpublic int _getCurrentLP();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#move(de.outstare.fortbattleplayer.model.Area)\n\t\t */\n\t\tpublic void move(final Area target);\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#shoot(de.outstare.fortbattleplayer.model.Area)\n\t\t */\n\t\tpublic void shoot(final int power);\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#hit(int)\n\t\t */\n\t\tpublic boolean hit(final int damageAmount);\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#aimAt(de.outstare.fortbattleplayer.model.Combatant)\n\t\t */\n\t\tpublic void aimAt(final Combatant target);\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#setDestination(de.outstare.fortbattleplayer.model.Area)\n\t\t */\n\t\tpublic void setDestination(final Area destination);\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#addObserver(de.outstare.fortbattleplayer.model.CombatantObserver)\n\t\t */\n\t\tpublic void addObserver(final CombatantObserver observer);\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#removeObserver(de.outstare.fortbattleplayer.model.CombatantObserver)\n\t\t */\n\t\tpublic void removeObserver(final CombatantObserver observer);\n\t\t\n\t\t/**\n\t\t * notify all observers about the current position\n\t\t */\n\t\tprotected void fireHasMoved();\n\t\t\n\t\t/**\n\t\t * notify all observers about the current position\n\t\t *\n\t\t * @param swappedWith\n\t\t */\n\t\tprotected void fireHasSwapped(final Combatant swappedWith);\n\t\t\n\t\t/**\n\t\t * notify all observers about the current position\n\t\t */\n\t\tprotected void fireNewTarget();\n\t\t\n\t\t/**\n\t\t * notify all observers that I shot at somebody.\n\t\t */\n\t\tprotected void fireAimingAt();\n\t\t\n\t\t/**\n\t\t * notify all observers about a loss of health\n\t\t *\n\t\t * @param damage\n\t\t *            amount of healthpoints lost\n\t\t * @param healthBefore\n\t\t *            original health amount before it was decreased by\n\t\t *            <code>damage</code>\n\t\t */\n\t\tprotected void fireWasHit(final int damage, final int healthBefore);\n\t\t\n\t\t/**\n\t\t * notify all observers about our dead\n\t\t */\n\t\tprotected void fireIsDead();\n\t\t\n\t\t/**\n\t\t * notify all observers about our resurrection\n\t\t */\n\t\tprotected void fireIsAlive();\n\t\t\n\t\t/**\n\t\t * notify all observers about changed online state\n\t\t *\n\t\t * @param changed\n\t\t *            if the value was changed or only set\n\t\t */\n\t\tprotected void fireOnlineChange(final boolean changed);\n\t\t\n\t\t/**\n\t\t * notify all observers that i have done a critical shot\n\t\t *\n\t\t * @param damage\n\t\t *            the actual caused damage\n\t\t */\n\t\tprotected void fireCriticalShot(final int damage);\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#_getLocation()\n\t\t */\n\t\tpublic Area _getLocation();\n\t\t\n\t\t/**\n\t\t * @return the side\n\t\t */\n\t\tpublic CombatantSide getSide();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#_health()\n\t\t */\n\t\tpublic int _health();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#_maxHealth()\n\t\t */\n\t\tpublic int _maxHealth();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#_setState(de.outstare.fortbattleplayer.model.CombatantState)\n\t\t */\n\t\tpublic void _setState(final CombatantState newState);\n\t\t\n\t\t/**\n\t\t * @param position\n\t\t */\n\t\tprivate void moveAway(final Area position);\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#_state()\n\t\t */\n\t\tpublic CombatantState _state();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#isOnline()\n\t\t */\n\t\tpublic boolean isOnline();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#setOnline()\n\t\t */\n\t\tpublic void setOnline(final boolean isOnline);\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#getCharacterClass()\n\t\t */\n\t\tpublic CharacterClass getCharacterClass();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#getSectorBonus()\n\t\t */\n\t\tpublic SectorBonus getSectorBonus();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#getCity()\n\t\t */\n\t\tpublic String getCity();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#usesBayonet()\n\t\t */\n\t\tpublic boolean usesBayonet();\n\t\t\n\t\t/**\n\t\t * @see java.lang.Object#hashCode()\n\t\t */\n\t\t@Override\n\t\tpublic int hashCode();\n\t\t\n\t\t/**\n\t\t * @see java.lang.Object#equals(java.lang.Object)\n\t\t */\n\t\t@Override\n\t\tpublic boolean equals(final Object obj);\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getMaxLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getMaxLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_0() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getMaxLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getMaxLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_1() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getMaxLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getMaxLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_2() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getMaxLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getMaxLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_3() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getMaxLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getMaxLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_4() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getMaxLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getMaxLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_5() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getMaxLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getMaxLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_6() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getMaxLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getMaxLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_7() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getMaxLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getMaxLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_8() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getMaxLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getMaxLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getMaxLP_9() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getMaxLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n\t\t\n}\n\n// SimpleCombatant_1Test.java\npackage de.outstare.fortbattleplayer.model.impl;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Area;\nimport de.outstare.fortbattleplayer.",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 2304,
        "completion_tokens": 4000,
        "total_tokens": 6304
    },
    "time_taken": 96.6332380771637,
    "prompt_id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/model/impl/SimpleCombatant_0Test.java",
    "original_code": "// SimpleCombatant.java\npackage de.outstare.fortbattleplayer.model.impl;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Area;\nimport de.outstare.fortbattleplayer.model.CharacterClass;\nimport de.outstare.fortbattleplayer.model.Combatant;\nimport de.outstare.fortbattleplayer.model.CombatantObserver;\nimport de.outstare.fortbattleplayer.model.CombatantSide;\nimport de.outstare.fortbattleplayer.model.CombatantState;\nimport de.outstare.fortbattleplayer.model.SectorBonus;\nimport de.outstare.fortbattleplayer.model.Weapon;\nimport de.outstare.fortbattleplayer.model.WeaponData;\n\n/**\n * A Combatant with basic attributes (position, health)\n *\n * @author daniel\n */\npublic class SimpleCombatant implements Combatant {\n\n    private static final transient Logger LOG = Logger.getLogger(SimpleCombatant.class.getName());\n\n    private final int maxHealth;\n\n    private final CombatantSide side;\n\n    private final String name;\n\n    private final String city;\n\n    private final Set<CombatantObserver> observers = new HashSet<CombatantObserver>();\n\n    private final Object stateChangeLock = new Object();\n\n    private final CharacterClass charClass;\n\n    private final Weapon weapon;\n\n    private CombatantState state;\n\n    private Combatant aimingAt = null;\n\n    /**\n     * Create a new {@link Combatant} at the given position and the given amount\n     * of health.\n     *\n     * @param side\n     *            not null\n     * @param initialState\n     *            not null\n     * @param maxHealth\n     *            > 0\n     * @param name\n     *            the name of the player of this Combatant\n     * @param characterClass\n     *            maybe null for old logs\n     * @param weapon\n     *            not null\n     * @param city\n     *            not null\n     */\n    public SimpleCombatant(final CombatantSide side, final CombatantState initialState, final int maxHealth, final String name, final CharacterClass characterClass, final Weapon weapon, final String city) {\n    }\n\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getName()\n     */\n    public String getName();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getWeapon()\n     */\n    public Weapon getWeapon();\n\n    /**\n     * internal method for graphical display\n     *\n     * @return the maximal health\n     */\n    public int _getMaxLP();\n\n    /**\n     * internal method for graphical display\n     *\n     * @return the current health\n     */\n    public int _getCurrentLP();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#move(de.outstare.fortbattleplayer.model.Area)\n     */\n    public void move(final Area target);\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#shoot(de.outstare.fortbattleplayer.model.Area)\n     */\n    public void shoot(final int power);\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#hit(int)\n     */\n    public boolean hit(final int damageAmount);\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#aimAt(de.outstare.fortbattleplayer.model.Combatant)\n     */\n    public void aimAt(final Combatant target);\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#setDestination(de.outstare.fortbattleplayer.model.Area)\n     */\n    public void setDestination(final Area destination);\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#addObserver(de.outstare.fortbattleplayer.model.CombatantObserver)\n     */\n    public void addObserver(final CombatantObserver observer);\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#removeObserver(de.outstare.fortbattleplayer.model.CombatantObserver)\n     */\n    public void removeObserver(final CombatantObserver observer);\n\n    /**\n     * notify all observers about the current position\n     */\n    protected void fireHasMoved();\n\n    /**\n     * notify all observers about the current position\n     *\n     * @param swappedWith\n     */\n    protected void fireHasSwapped(final Combatant swappedWith);\n\n    /**\n     * notify all observers about the current position\n     */\n    protected void fireNewTarget();\n\n    /**\n     * notify all observers that I shot at somebody.\n     */\n    protected void fireAimingAt();\n\n    /**\n     * notify all observers about a loss of health\n     *\n     * @param damage\n     *            amount of healthpoints lost\n     * @param healthBefore\n     *            original health amount before it was decreased by\n     *            <code>damage</code>\n     */\n    protected void fireWasHit(final int damage, final int healthBefore);\n\n    /**\n     * notify all observers about our dead\n     */\n    protected void fireIsDead();\n\n    /**\n     * notify all observers about our resurrection\n     */\n    protected void fireIsAlive();\n\n    /**\n     * notify all observers about changed online state\n     *\n     * @param changed\n     *            if the value was changed or only set\n     */\n    protected void fireOnlineChange(final boolean changed);\n\n    /**\n     * notify all observers that i have done a critical shot\n     *\n     * @param damage\n     *            the actual caused damage\n     */\n    protected void fireCriticalShot(final int damage);\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_getLocation()\n     */\n    public Area _getLocation();\n\n    /**\n     * @return the side\n     */\n    public CombatantSide getSide();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_health()\n     */\n    public int _health();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_maxHealth()\n     */\n    public int _maxHealth();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_setState(de.outstare.fortbattleplayer.model.CombatantState)\n     */\n    public void _setState(final CombatantState newState);\n\n    /**\n     * @param position\n     */\n    private void moveAway(final Area position);\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_state()\n     */\n    public CombatantState _state();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#isOnline()\n     */\n    public boolean isOnline();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#setOnline()\n     */\n    public void setOnline(final boolean isOnline);\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getCharacterClass()\n     */\n    public CharacterClass getCharacterClass();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getSectorBonus()\n     */\n    public SectorBonus getSectorBonus();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getCity()\n     */\n    public String getCity();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#usesBayonet()\n     */\n    public boolean usesBayonet();\n\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode();\n\n    /**\n     * @see java.lang.Object#equals(java.lang.Object)\n     */\n    @Override\n    public boolean equals(final Object obj);\n}\n",
    "test_prompt": "// SimpleCombatant_0Test.java\npackage de.outstare.fortbattleplayer.model.impl;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Area;\nimport de.outstare.fortbattleplayer.model.CharacterClass;\nimport de.outstare.fortbattleplayer.model.Combatant;\nimport de.outstare.fortbattleplayer.model.CombatantObserver;\nimport de.outstare.fortbattleplayer.model.CombatantSide;\nimport de.outstare.fortbattleplayer.model.CombatantState;\nimport de.outstare.fortbattleplayer.model.SectorBonus;\nimport de.outstare.fortbattleplayer.model.Weapon;\nimport de.outstare.fortbattleplayer.model.WeaponData;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleCombatant}.\n* It contains ten unit test cases for the {@link SimpleCombatant#_getMaxLP()} method.\n*/\nclass SimpleCombatant_0Test {"
},
{
    "id": "cmpl-6xEQV4sdgxWC1PjB1RuprSc8zr3k3",
    "object": "text_completion",
    "created": 1679574827,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t\tprivate static final transient Logger LOG = Logger.getLogger(SimpleCombatant_1Test.class.getName());\n\t\t\n\t\tprivate final int maxHealth;\n\t\t\n\t\tprivate final CombatantSide side;\n\t\t\n\t\tprivate final String name;\n\t\t\n\t\tprivate final String city;\n\t\t\n\t\tprivate final Set<CombatantObserver> observers = new HashSet<CombatantObserver>();\n\t\t\n\t\tprivate final Object stateChangeLock = new Object();\n\t\t\n\t\tprivate final CharacterClass charClass;\n\t\t\n\t\tprivate final Weapon weapon;\n\t\t\n\t\tprivate CombatantState state;\n\t\t\n\t\tprivate Combatant aimingAt = null;\n\t\t\n\t\t/**\n\t\t * Create a new {@link Combatant} at the given position and the given amount\n\t\t * of health.\n\t\t *\n\t\t * @param side\n\t\t *            not null\n\t\t * @param initialState\n\t\t *            not null\n\t\t * @param maxHealth\n\t\t *            > 0\n\t\t * @param name\n\t\t *            the name of the player of this Combatant\n\t\t * @param characterClass\n\t\t *            maybe null for old logs\n\t\t * @param weapon\n\t\t *            not null\n\t\t * @param city\n\t\t *            not null\n\t\t */\n\t\tpublic SimpleCombatant(final CombatantSide side, final CombatantState initialState, final int maxHealth, final String name, final CharacterClass characterClass, final Weapon weapon, final String city) {\n\t\t}\n\t\t\n\t\t/**\n\t\t * @see java.lang.Object#toString()\n\t\t */\n\t\t@Override\n\t\tpublic String toString();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#getName()\n\t\t */\n\t\tpublic String getName();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#getWeapon()\n\t\t */\n\t\tpublic Weapon getWeapon();\n\t\t\n\t\t/**\n\t\t * internal method for graphical display\n\t\t *\n\t\t * @return the maximal health\n\t\t */\n\t\tpublic int _getMaxLP();\n\t\t\n\t\t/**\n\t\t * internal method for graphical display\n\t\t *\n\t\t * @return the current health\n\t\t */\n\t\tpublic int _getCurrentLP();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#move(de.outstare.fortbattleplayer.model.Area)\n\t\t */\n\t\tpublic void move(final Area target);\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#shoot(de.outstare.fortbattleplayer.model.Area)\n\t\t */\n\t\tpublic void shoot(final int power);\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#hit(int)\n\t\t */\n\t\tpublic boolean hit(final int damageAmount);\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#aimAt(de.outstare.fortbattleplayer.model.Combatant)\n\t\t */\n\t\tpublic void aimAt(final Combatant target);\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#setDestination(de.outstare.fortbattleplayer.model.Area)\n\t\t */\n\t\tpublic void setDestination(final Area destination);\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#addObserver(de.outstare.fortbattleplayer.model.CombatantObserver)\n\t\t */\n\t\tpublic void addObserver(final CombatantObserver observer);\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#removeObserver(de.outstare.fortbattleplayer.model.CombatantObserver)\n\t\t */\n\t\tpublic void removeObserver(final CombatantObserver observer);\n\t\t\n\t\t/**\n\t\t * notify all observers about the current position\n\t\t */\n\t\tprotected void fireHasMoved();\n\t\t\n\t\t/**\n\t\t * notify all observers about the current position\n\t\t *\n\t\t * @param swappedWith\n\t\t */\n\t\tprotected void fireHasSwapped(final Combatant swappedWith);\n\t\t\n\t\t/**\n\t\t * notify all observers about the current position\n\t\t */\n\t\tprotected void fireNewTarget();\n\t\t\n\t\t/**\n\t\t * notify all observers that I shot at somebody.\n\t\t */\n\t\tprotected void fireAimingAt();\n\t\t\n\t\t/**\n\t\t * notify all observers about a loss of health\n\t\t *\n\t\t * @param damage\n\t\t *            amount of healthpoints lost\n\t\t * @param healthBefore\n\t\t *            original health amount before it was decreased by\n\t\t *            <code>damage</code>\n\t\t */\n\t\tprotected void fireWasHit(final int damage, final int healthBefore);\n\t\t\n\t\t/**\n\t\t * notify all observers about our dead\n\t\t */\n\t\tprotected void fireIsDead();\n\t\t\n\t\t/**\n\t\t * notify all observers about our resurrection\n\t\t */\n\t\tprotected void fireIsAlive();\n\t\t\n\t\t/**\n\t\t * notify all observers about changed online state\n\t\t *\n\t\t * @param changed\n\t\t *            if the value was changed or only set\n\t\t */\n\t\tprotected void fireOnlineChange(final boolean changed);\n\t\t\n\t\t/**\n\t\t * notify all observers that i have done a critical shot\n\t\t *\n\t\t * @param damage\n\t\t *            the actual caused damage\n\t\t */\n\t\tprotected void fireCriticalShot(final int damage);\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#_getLocation()\n\t\t */\n\t\tpublic Area _getLocation();\n\t\t\n\t\t/**\n\t\t * @return the side\n\t\t */\n\t\tpublic CombatantSide getSide();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#_health()\n\t\t */\n\t\tpublic int _health();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#_maxHealth()\n\t\t */\n\t\tpublic int _maxHealth();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#_setState(de.outstare.fortbattleplayer.model.CombatantState)\n\t\t */\n\t\tpublic void _setState(final CombatantState newState);\n\t\t\n\t\t/**\n\t\t * @param position\n\t\t */\n\t\tprivate void moveAway(final Area position);\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#_state()\n\t\t */\n\t\tpublic CombatantState _state();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#isOnline()\n\t\t */\n\t\tpublic boolean isOnline();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#setOnline()\n\t\t */\n\t\tpublic void setOnline(final boolean isOnline);\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#getCharacterClass()\n\t\t */\n\t\tpublic CharacterClass getCharacterClass();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#getSectorBonus()\n\t\t */\n\t\tpublic SectorBonus getSectorBonus();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#getCity()\n\t\t */\n\t\tpublic String getCity();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.model.Combatant#usesBayonet()\n\t\t */\n\t\tpublic boolean usesBayonet();\n\t\t\n\t\t/**\n\t\t * @see java.lang.Object#hashCode()\n\t\t */\n\t\t@Override\n\t\tpublic int hashCode();\n\t\t\n\t\t/**\n\t\t * @see java.lang.Object#equals(java.lang.Object)\n\t\t */\n\t\t@Override\n\t\tpublic boolean equals(final Object obj);\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getCurrentLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getCurrentLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getCurrentLP_1() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getCurrentLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getCurrentLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getCurrentLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getCurrentLP_2() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getCurrentLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getCurrentLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getCurrentLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getCurrentLP_3() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getCurrentLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getCurrentLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getCurrentLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getCurrentLP_4() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getCurrentLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getCurrentLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getCurrentLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getCurrentLP_5() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getCurrentLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getCurrentLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getCurrentLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getCurrentLP_6() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getCurrentLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getCurrentLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getCurrentLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getCurrentLP_7() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getCurrentLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getCurrentLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getCurrentLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getCurrentLP_8() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getCurrentLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getCurrentLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getCurrentLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getCurrentLP_9() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getCurrentLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test case for the method {@link SimpleCombatant#_getCurrentLP()}.\n\t\t *\n\t\t * @see SimpleCombatant#_getCurrentLP()\n\t\t */\n\t\t@Test\n\t\tvoid test_getCurrentLP_10() {\n\t\t\t\t// given\n\t\t\t\tfinal SimpleCombatant combatant = new SimpleCombatant(CombatantSide.BLUE, CombatantState.ALIVE, 100, \"name\", CharacterClass.BOMBER, new Weapon(WeaponData.BAYONET), \"city\");\n\t\t\t\t// when\n\t\t\t\tfinal int result = combatant._getCurrentLP();\n\t\t\t\t// then\n\t\t\t\tassertEquals(100, result);\n\t\t}\n}\n\n// SimpleCombatant_2Test.java\npackage de.outstare.fortbattleplayer.model.impl;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Area;\nimport de.outstare.fortbattleplayer.model.Character",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 2304,
        "completion_tokens": 4000,
        "total_tokens": 6304
    },
    "time_taken": 154.25507640838623,
    "prompt_id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/model/impl/SimpleCombatant_1Test.java",
    "original_code": "// SimpleCombatant.java\npackage de.outstare.fortbattleplayer.model.impl;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Area;\nimport de.outstare.fortbattleplayer.model.CharacterClass;\nimport de.outstare.fortbattleplayer.model.Combatant;\nimport de.outstare.fortbattleplayer.model.CombatantObserver;\nimport de.outstare.fortbattleplayer.model.CombatantSide;\nimport de.outstare.fortbattleplayer.model.CombatantState;\nimport de.outstare.fortbattleplayer.model.SectorBonus;\nimport de.outstare.fortbattleplayer.model.Weapon;\nimport de.outstare.fortbattleplayer.model.WeaponData;\n\n/**\n * A Combatant with basic attributes (position, health)\n *\n * @author daniel\n */\npublic class SimpleCombatant implements Combatant {\n\n    private static final transient Logger LOG = Logger.getLogger(SimpleCombatant.class.getName());\n\n    private final int maxHealth;\n\n    private final CombatantSide side;\n\n    private final String name;\n\n    private final String city;\n\n    private final Set<CombatantObserver> observers = new HashSet<CombatantObserver>();\n\n    private final Object stateChangeLock = new Object();\n\n    private final CharacterClass charClass;\n\n    private final Weapon weapon;\n\n    private CombatantState state;\n\n    private Combatant aimingAt = null;\n\n    /**\n     * Create a new {@link Combatant} at the given position and the given amount\n     * of health.\n     *\n     * @param side\n     *            not null\n     * @param initialState\n     *            not null\n     * @param maxHealth\n     *            > 0\n     * @param name\n     *            the name of the player of this Combatant\n     * @param characterClass\n     *            maybe null for old logs\n     * @param weapon\n     *            not null\n     * @param city\n     *            not null\n     */\n    public SimpleCombatant(final CombatantSide side, final CombatantState initialState, final int maxHealth, final String name, final CharacterClass characterClass, final Weapon weapon, final String city) {\n    }\n\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getName()\n     */\n    public String getName();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getWeapon()\n     */\n    public Weapon getWeapon();\n\n    /**\n     * internal method for graphical display\n     *\n     * @return the maximal health\n     */\n    public int _getMaxLP();\n\n    /**\n     * internal method for graphical display\n     *\n     * @return the current health\n     */\n    public int _getCurrentLP();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#move(de.outstare.fortbattleplayer.model.Area)\n     */\n    public void move(final Area target);\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#shoot(de.outstare.fortbattleplayer.model.Area)\n     */\n    public void shoot(final int power);\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#hit(int)\n     */\n    public boolean hit(final int damageAmount);\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#aimAt(de.outstare.fortbattleplayer.model.Combatant)\n     */\n    public void aimAt(final Combatant target);\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#setDestination(de.outstare.fortbattleplayer.model.Area)\n     */\n    public void setDestination(final Area destination);\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#addObserver(de.outstare.fortbattleplayer.model.CombatantObserver)\n     */\n    public void addObserver(final CombatantObserver observer);\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#removeObserver(de.outstare.fortbattleplayer.model.CombatantObserver)\n     */\n    public void removeObserver(final CombatantObserver observer);\n\n    /**\n     * notify all observers about the current position\n     */\n    protected void fireHasMoved();\n\n    /**\n     * notify all observers about the current position\n     *\n     * @param swappedWith\n     */\n    protected void fireHasSwapped(final Combatant swappedWith);\n\n    /**\n     * notify all observers about the current position\n     */\n    protected void fireNewTarget();\n\n    /**\n     * notify all observers that I shot at somebody.\n     */\n    protected void fireAimingAt();\n\n    /**\n     * notify all observers about a loss of health\n     *\n     * @param damage\n     *            amount of healthpoints lost\n     * @param healthBefore\n     *            original health amount before it was decreased by\n     *            <code>damage</code>\n     */\n    protected void fireWasHit(final int damage, final int healthBefore);\n\n    /**\n     * notify all observers about our dead\n     */\n    protected void fireIsDead();\n\n    /**\n     * notify all observers about our resurrection\n     */\n    protected void fireIsAlive();\n\n    /**\n     * notify all observers about changed online state\n     *\n     * @param changed\n     *            if the value was changed or only set\n     */\n    protected void fireOnlineChange(final boolean changed);\n\n    /**\n     * notify all observers that i have done a critical shot\n     *\n     * @param damage\n     *            the actual caused damage\n     */\n    protected void fireCriticalShot(final int damage);\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_getLocation()\n     */\n    public Area _getLocation();\n\n    /**\n     * @return the side\n     */\n    public CombatantSide getSide();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_health()\n     */\n    public int _health();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_maxHealth()\n     */\n    public int _maxHealth();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_setState(de.outstare.fortbattleplayer.model.CombatantState)\n     */\n    public void _setState(final CombatantState newState);\n\n    /**\n     * @param position\n     */\n    private void moveAway(final Area position);\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_state()\n     */\n    public CombatantState _state();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#isOnline()\n     */\n    public boolean isOnline();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#setOnline()\n     */\n    public void setOnline(final boolean isOnline);\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getCharacterClass()\n     */\n    public CharacterClass getCharacterClass();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getSectorBonus()\n     */\n    public SectorBonus getSectorBonus();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getCity()\n     */\n    public String getCity();\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#usesBayonet()\n     */\n    public boolean usesBayonet();\n\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode();\n\n    /**\n     * @see java.lang.Object#equals(java.lang.Object)\n     */\n    @Override\n    public boolean equals(final Object obj);\n}\n",
    "test_prompt": "// SimpleCombatant_1Test.java\npackage de.outstare.fortbattleplayer.model.impl;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Area;\nimport de.outstare.fortbattleplayer.model.CharacterClass;\nimport de.outstare.fortbattleplayer.model.Combatant;\nimport de.outstare.fortbattleplayer.model.CombatantObserver;\nimport de.outstare.fortbattleplayer.model.CombatantSide;\nimport de.outstare.fortbattleplayer.model.CombatantState;\nimport de.outstare.fortbattleplayer.model.SectorBonus;\nimport de.outstare.fortbattleplayer.model.Weapon;\nimport de.outstare.fortbattleplayer.model.WeaponData;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleCombatant}.\n* It contains ten unit test cases for the {@link SimpleCombatant#_getCurrentLP()} method.\n*/\nclass SimpleCombatant_1Test {"
},
{
    "id": "cmpl-6xESJvFId7tLY15Wkm6sxfsmPhy9g",
    "object": "text_completion",
    "created": 1679574939,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "private static final transient Logger LOG = Logger.getLogger(BattleplanTest.class.getName());\n\n\t\t/**\n\t\t* Test method for {@link Battleplan#numberOfRounds()}.\n\t\t*/\n\t\t@Test\n\t\tvoid testNumberOfRounds() {\n\t\t\t\tfinal SortedMap<Integer, Round> rounds = new TreeMap<Integer, Round>();\n\t\t\t\trounds.put(1, new Round(1));\n\t\t\t\trounds.put(2, new Round(2));\n\t\t\t\trounds.put(3, new Round(3));\n\t\t\t\trounds.put(4, new Round(4));\n\t\t\t\trounds.put(5, new Round(5));\n\t\t\t\trounds.put(6, new Round(6));\n\t\t\t\trounds.put(7, new Round(7));\n\t\t\t\trounds.put(8, new Round(8));\n\t\t\t\trounds.put(9, new Round(9));\n\t\t\t\trounds.put(10, new Round(10));\n\t\t\t\tfinal Battleplan plan = new Battleplan(rounds.values());\n\t\t\t\tassertEquals(10, plan.numberOfRounds());\n\t\t}\n}\n\n// Round.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.logging.Logger;\n\n/**\n * A round of a {@link Battleplan}.\n *\n * @author daniel\n */\npublic class Round {\n    private static final transient Logger LOG = Logger.getLogger(Round.class.getName());\n\n    private final int number;\n\n    /**\n     * Create a new round with the given number.\n     *\n     * @param number\n     */\n    public Round(final int number) {\n    }\n\n    /**\n     * @return the number of this round\n     */\n    public int getNumber();\n\n    /**\n     * @return the number of the next round\n     */\n    public int getNextRound();\n\n    /**\n     * @return <code>true</code> if this round is the last one\n     */\n    public boolean isLastRound();\n\n    /**\n     * @return <code>true</code> if this round is the first one\n     */\n    public boolean isFirstRound();\n\n    /**\n     * @return <code>true</code> if this round is the second one\n     */\n    public boolean isSecondRound();\n\n    /**\n     * @return <code>true</code> if this round is the third one\n     */\n    public boolean isThirdRound();\n\n    /**\n     * @return <code>true</code> if this round is the fourth one\n     */\n    public boolean isFourthRound();\n\n    /**\n     * @return <code>true</code> if this round is the fifth one\n     */\n    public boolean isFifthRound();\n\n    /**\n     * @return <code>true</code> if this round is the sixth one\n     */\n    public boolean isSixthRound();\n\n    /**\n     * @return <code>true</code> if this round is the seventh one\n     */\n    public boolean isSeventhRound();\n\n    /**\n     * @return <code>true</code> if this round is the eighth one\n     */\n    public boolean isEighthRound();\n\n    /**\n     * @return <code>true</code> if this round is the ninth one\n     */\n    public boolean isNinthRound();\n\n    /**\n     * @return <code>true</code> if this round is the tenth one\n     */\n    public boolean isTenthRound();\n}\n\n// RoundTest.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.logging.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Round}.\n* It contains ten unit test cases for the {@link Round#isFirstRound()} method.\n*/\nclass RoundTest {\n\t\tprivate static final transient Logger LOG = Logger.getLogger(RoundTest.class.getName());\n\n\t\t/**\n\t\t* Test method for {@link Round#isFirstRound()}.\n\t\t*/\n\t\t@Test\n\t\tvoid testIsFirstRound() {\n\t\t\t\tfinal Round round = new Round(1);\n\t\t\t\tassertTrue(round.isFirstRound());\n\t\t}\n}\n\n// PlayerConfiguration.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.logging.Logger;\n\n/**\n * A PlayerConfiguration is a set of parameters which determine the behaviour of\n * the player.\n *\n * @author daniel\n */\npublic class PlayerConfiguration {\n    private static final transient Logger LOG = Logger.getLogger(PlayerConfiguration.class.getName());\n\n    private final int maxRounds;\n    private final int maxTime;\n    private final int maxMoves;\n    private final int maxShots;\n    private final int maxHits;\n    private final int maxDamage;\n    private final int maxHealth;\n    private final int maxScore;\n\n    /**\n     * Create a new PlayerConfiguration with the given parameters.\n     *\n     * @param maxRounds\n     * @param maxTime\n     * @param maxMoves\n     * @param maxShots\n     * @param maxHits\n     * @param maxDamage\n     * @param maxHealth\n     * @param maxScore\n     */\n    public PlayerConfiguration(final int maxRounds, final int maxTime, final int maxMoves, final int maxShots, final int maxHits, final int maxDamage, final int maxHealth, final int maxScore) {\n    }\n\n    /**\n     * @return the maxRounds\n     */\n    public int getMaxRounds();\n\n    /**\n     * @return the maxTime\n     */\n    public int getMaxTime();\n\n    /**\n     * @return the maxMoves\n     */\n    public int getMaxMoves();\n\n    /**\n     * @return the maxShots\n     */\n    public int getMaxShots();\n\n    /**\n     * @return the maxHits\n     */\n    public int getMaxHits();\n\n    /**\n     * @return the maxDamage\n     */\n    public int getMaxDamage();\n\n    /**\n     * @return the maxHealth\n     */\n    public int getMaxHealth();\n\n    /**\n     * @return the maxScore\n     */\n    public int getMaxScore();\n}\n\n// PlayerConfigurationTest.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.logging.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlayerConfiguration}.\n* It contains ten unit test cases for the {@link PlayerConfiguration#getMaxRounds()} method.\n*/\nclass PlayerConfigurationTest {\n\t\tprivate static final transient Logger LOG = Logger.getLogger(PlayerConfigurationTest.class.getName());\n\n\t\t/**\n\t\t* Test method for {@link PlayerConfiguration#getMaxRounds()}.\n\t\t*/\n\t\t@Test\n\t\tvoid testGetMaxRounds() {\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration(10, 10, 10, 10, 10, 10, 10, 10);\n\t\t\t\tassertEquals(10, config.getMaxRounds());\n\t\t}\n}\n\n// Player.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.logging.Logger;\n\n/**\n * A Player is a participant of a battle.\n *\n * @author daniel\n */\npublic class Player {\n    private static final transient Logger LOG = Logger.getLogger(Player.class.getName());\n\n    private final String name;\n    private final int health;\n    private final int score;\n\n    /**\n     * Create a new Player with the given name and health.\n     *\n     * @param name\n     * @param health\n     */\n    public Player(final String name, final int health) {\n    }\n\n    /**\n     * @return the name\n     */\n    public String getName();\n\n    /**\n     * @return the health\n     */\n    public int getHealth();\n\n    /**\n     * @return the score\n     */\n    public int getScore();\n}\n\n// PlayerTest.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.logging.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Player}.\n* It contains ten unit test cases for the {@link Player#getName()} method.\n*/\nclass PlayerTest {\n\t\tprivate static final transient Logger LOG = Logger.getLogger(PlayerTest.class.getName());\n\n\t\t/**\n\t\t* Test method for {@link Player#getName()}.\n\t\t*/\n\t\t@Test\n\t\tvoid testGetName() {\n\t\t\t\tfinal Player player = new Player(\"test\", 10);\n\t\t\t\tassertEquals(\"test\", player.getName());\n\t\t}\n}\n\n// Battle.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.logging.Logger;\n\n/**\n * A Battle is a fight between two {@link Player}s.\n *\n * @author daniel\n */\npublic class Battle {\n    private static final transient Logger LOG = Logger.getLogger(Battle.class.getName());\n\n    private final Player player1;\n    private final Player player2;\n    private final PlayerConfiguration config;\n\n    /**\n     * Create a new Battle with the given players and configuration.\n     *\n     * @param player1\n     * @param player2\n     * @param config\n     */\n    public Battle(final Player player1, final Player player2, final PlayerConfiguration config) {\n    }\n\n    /**\n     * @return the player1\n     */\n    public Player getPlayer1();\n\n    /**\n     * @return the player2\n     */\n    public Player getPlayer2();\n\n    /**\n     * @return the config\n     */\n    public PlayerConfiguration getConfig();\n}\n\n// BattleTest.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.logging.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Battle}.\n* It contains ten unit test cases for the {@link Battle#getPlayer1()} method.\n*/\nclass BattleTest {\n\t\tprivate static final transient Logger LOG = Logger.getLogger(BattleTest.class.getName());\n\n\t\t/**\n\t\t* Test method for {@link Battle#getPlayer1()}.\n\t\t*/\n\t\t@Test\n\t\tvoid testGetPlayer1() {\n\t\t\t\tfinal Player player1 = new Player(\"test1\", 10);\n\t\t\t\tfinal Player player2 = new Player(\"test2\", 10);\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration(10, 10, 10, 10, 10, 10, 10, 10);\n\t\t\t\tfinal Battle battle = new Battle(player1, player2, config);\n\t\t\t\tassertEquals(player1, battle.getPlayer1());\n\t\t}\n}\n\n// BattleResult.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.logging.Logger;\n\n/**\n * A BattleResult is the result of a {@link Battle}.\n *\n * @author daniel\n */\npublic class BattleResult {\n    private static final transient Logger LOG = Logger.getLogger(BattleResult.class.getName());\n\n    private final Player winner;\n    private final Player loser;\n    private final int rounds;\n    private final int time;\n    private final int moves;\n    private final int shots;\n    private final int hits;\n    private final int damage;\n    private final int health;\n    private final int score;\n\n    /**\n     * Create a new BattleResult with the given parameters.\n     *\n     * @param winner\n     * @param loser\n     * @param rounds\n     * @param time\n     * @param moves\n     * @param shots\n     * @param hits\n     * @param damage\n     * @param health\n     * @param score\n     */\n    public BattleResult(final Player winner, final Player loser, final int rounds, final int time, final int moves, final int shots, final int hits, final int damage, final int health, final int score) {\n    }\n\n    /**\n     * @return the winner\n     */\n    public Player getWinner();\n\n    /**\n     * @return the loser\n     */\n    public Player getLoser();\n\n    /**\n     * @return the rounds\n     */\n    public int getRounds();\n\n    /**\n     * @return the time\n     */\n    public int getTime();\n\n    /**\n     * @return the moves\n     */\n    public int getMoves();\n\n    /**\n     * @return the shots\n     */\n    public int getShots();\n\n    /**\n     * @return the hits\n     */\n    public int getHits();\n\n    /**\n     * @return the damage\n     */\n    public int getDamage();\n\n    /**\n     * @return the health\n     */\n    public int getHealth();\n\n    /**\n     * @return the score\n     */\n    public int getScore();\n}\n\n// BattleResultTest.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.logging.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BattleResult}.\n* It contains ten unit test cases for the {@link BattleResult#getWinner()} method.\n*/\nclass BattleResultTest {\n\t\tprivate static final transient Logger LOG = Logger.getLogger(BattleResultTest.class.getName());\n\n\t\t/**\n\t\t* Test method for {@link BattleResult#getWinner()}.\n\t\t*/\n\t\t@Test\n\t\tvoid testGetWinner() {\n\t\t\t\tfinal Player winner = new Player(\"test1\", 10);\n\t\t\t\tfinal Player loser = new Player(\"test2\", 10);\n\t\t\t\tfinal BattleResult result = new BattleResult(winner, loser, 10, 10, 10, 10, 10, 10, 10, 10);\n\t\t\t\tassertEquals(winner, result.getWinner());\n\t\t}\n}\n\n// BattleResultWriter.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.logging.Logger;\n\n/**\n * A BattleResultWriter writes a {@link BattleResult} to a file.\n *\n * @author daniel\n */\npublic class BattleResultWriter {\n    private static final transient Logger LOG = Logger.getLogger(BattleResultWriter.class.getName());\n\n    private final File file;\n\n    /**\n     * Create a new BattleResultWriter which writes to the given file.\n     *\n     * @param file\n     */\n    public BattleResultWriter(final File file) {\n    }\n\n    /**\n     * Write the given result to the file.\n     *\n     * @param result\n     * @throws IOException\n     */\n    public void write(final BattleResult result) throws IOException;\n\n    /**\n     * @param result\n     * @return a string representation of the given result\n     */\n    private String toString(final BattleResult result);\n\n    /**\n     * @param result\n     * @return a string representation of the given result\n     */\n    private String toString(final BattleResult result);\n\n    /**\n     * @param result\n     * @return a string representation of the given result\n     */\n    private String toString(final BattleResult result);\n\n    /**\n     * @param result\n     * @return a string representation of the given result\n     */\n    private String toString(final BattleResult result);\n\n    /**\n     * @param result\n     * @return a string representation of the given result\n     */\n    private String toString(final BattleResult result);\n\n    /**\n     * @param result\n     * @return a string representation of the given result\n     */\n    private String toString(final BattleResult result);\n\n    /**\n     * @param result\n     * @return a string representation of the given result\n     */\n   ",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 750,
        "completion_tokens": 4000,
        "total_tokens": 4750
    },
    "time_taken": 95.34162068367004,
    "prompt_id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/Battleplan.java",
    "original_code": "// Battleplan.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.Collection;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.logging.Logger;\n\n/**\n * A plan which determines each step of the battle. A battle is divided into\n * {@link Round}s.\n *\n * @author daniel\n */\npublic class Battleplan {\n\n    private static final transient Logger LOG = Logger.getLogger(Battleplan.class.getName());\n\n    private final SortedMap<Integer, Round> rounds = new TreeMap<Integer, Round>();\n\n    /**\n     * Create a new plan with the given rounds\n     *\n     * @param roundsOfPlan\n     */\n    public Battleplan(final Collection<Round> roundsOfPlan) {\n    }\n\n    /**\n     * @param roundsOfPlan\n     */\n    private void mapRoundsToNumbers(final Collection<Round> roundsOfPlan);\n\n    /**\n     * @return the number of rounds this plan has\n     */\n    public int numberOfRounds();\n\n    /**\n     * executes the given {@link Round} of this plan\n     *\n     * @param roundNo\n     *            0 <= roundNo <= numberOfRounds()\n     * @param config\n     */\n    public void executeRound(final int roundNo, final PlayerConfiguration config);\n\n    /**\n     * @param roundNo\n     * @return\n     * @throws IllegalArgumentException\n     */\n    private Round getRound(final int roundNo) throws IllegalArgumentException;\n\n    /**\n     * @param no\n     * @return <code>true</code> if this plan contains a round with the given\n     *         number\n     */\n    public boolean hasRoundNo(final int no);\n\n    /**\n     * @param roundNo\n     */\n    public void resetToRound(final int roundNo);\n\n    /**\n     * @param roundNo\n     * @return <code>true</code> if more rounds follow after the given round\n     *         number.\n     */\n    public boolean hasMoreRounds(final int roundNo);\n\n    /**\n     * @require hasMoreRounds(currentRoundNo)\n     * @param currentRoundNo\n     * @return the number of the following round\n     */\n    public int getNextRound(final int currentRoundNo);\n\n    /**\n     * @param currentRoundNo\n     * @return all rounds that follow after the given round number\n     */\n    private SortedMap<Integer, Round> getRemainingRounds(final int currentRoundNo);\n}\n",
    "test_prompt": "// BattleplanTest.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.Collection;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.logging.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Battleplan}.\n* It contains ten unit test cases for the {@link Battleplan#numberOfRounds()} method.\n*/\nclass BattleplanTest {"
},
{
    "id": "cmpl-6xETqI4viKN5heW8W5VvH6j6RROIK",
    "object": "text_completion",
    "created": 1679575034,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t\tprivate static final transient Logger LOG = Logger.getLogger(BattleplayerTest.class.getName());\n\t\t\n\t\tprivate final Battleplan plan;\n\t\t\n\t\tprivate final Set<RoundListener> listeners = new HashSet<RoundListener>();\n\t\t\n\t\tprivate boolean isPaused = false;\n\t\t\n\t\t/**\n\t\t * round numbers may not be sequential (this variable is also used for\n\t\t * locking during a round)\n\t\t */\n\t\tprivate int currentRoundNo;\n\t\t\n\t\tprivate volatile boolean isPlaying = false;\n\t\t\n\t\tprivate volatile boolean shouldStop = false;\n\t\t\n\t\t/**\n\t\t * controls some aspects of the behavior of the player\n\t\t */\n\t\tpublic final PlayerConfiguration config;\n\t\t\n\t\t/**\n\t\t * @param plan\n\t\t * @param config\n\t\t */\n\t\tpublic Battleplayer(final Battleplan plan, final PlayerConfiguration config) {\n\t\t}\n\t\t\n\t\t/**\n\t\t * @param plan\n\t\t */\n\t\tpublic Battleplayer(final Battleplan plan) {\n\t\t}\n\t\t\n\t\t/**\n\t\t * let the battle begin! The whole battle is done by executing the\n\t\t * {@link Battleplan}.\n\t\t */\n\t\tpublic void play();\n\t\t\n\t\t/**\n\t\t * blocks until current round has ended\n\t\t *\n\t\t * @see de.outstare.fortbattleplayer.player.Player#gotoRound(de.outstare.fortbattleplayer.player.Round)\n\t\t */\n\t\tpublic void gotoRound(final int i);\n\t\t\n\t\t/**\n\t\t * executes the round of the internal state\n\t\t */\n\t\tprivate void playCurrentRound(final int roundNo);\n\t\t\n\t\t/**\n\t\t * wait the time given in {@link PlayerConfiguration#ROUND_DELAY}\n\t\t */\n\t\tprivate void delayNextRound();\n\t\t\n\t\t/**\n\t\t * tell all listeners that a new round will start now\n\t\t *\n\t\t * @param roundNo\n\t\t */\n\t\tprivate void fireNewRoundEvent(final int roundNo);\n\t\t\n\t\t/**\n\t\t * @param listener\n\t\t */\n\t\tpublic void addRoundListener(final RoundListener listener);\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.player.Player#stop()\n\t\t */\n\t\tpublic void stop();\n\t\t\n\t\t/**\n\t\t * A RoundListener waits for Round events.\n\t\t *\n\t\t * @author daniel\n\t\t */\n\t\tpublic static interface RoundListener {\n\t\t\n\t\t\t\t/**\n\t\t\t\t * a new round will begin immediatly\n\t\t\t\t *\n\t\t\t\t * @param roundNo\n\t\t\t\t */\n\t\t\t\tvoid nextRound(int roundNo);\n\t\t}\n\t\t\n\t\t/**\n\t\t * @return the number of rounds this player shows\n\t\t */\n\t\tpublic int numberOfRounds();\n\t\t\n\t\t/**\n\t\t * toggles pause which holds playing rounds. if this player is currently\n\t\t * paused can be checked with isPaused()\n\t\t */\n\t\tpublic void pause();\n\t\t\n\t\t/**\n\t\t * @return <code>true</code> if this player is playing and is currently hold\n\t\t */\n\t\tpublic boolean isPaused();\n\t\t\n\t\t/**\n\t\t * @see de.outstare.fortbattleplayer.player.Player#getRoundNumbers()\n\t\t */\n\t\tpublic List<Integer> getRoundNumbers();\n\t\t\n\t\t/**\n\t\t * Test method for {@link de.outstare.fortbattleplayer.player.Battleplayer#numberOfRounds()}.\n\t\t */\n\t\t@Test\n\t\tvoid testNumberOfRounds() {\n\t\t\t\t// setup\n\t\t\t\tfinal Battleplayer player = new Battleplayer(null);\n\t\t\t\t\n\t\t\t\t// execute\n\t\t\t\tfinal int result = player.numberOfRounds();\n\t\t\t\t\n\t\t\t\t// verify\n\t\t\t\tassertEquals(0, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test method for {@link de.outstare.fortbattleplayer.player.Battleplayer#numberOfRounds()}.\n\t\t */\n\t\t@Test\n\t\tvoid testNumberOfRounds2() {\n\t\t\t\t// setup\n\t\t\t\tfinal Battleplayer player = new Battleplayer(null);\n\t\t\t\t\n\t\t\t\t// execute\n\t\t\t\tfinal int result = player.numberOfRounds();\n\t\t\t\t\n\t\t\t\t// verify\n\t\t\t\tassertEquals(0, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test method for {@link de.outstare.fortbattleplayer.player.Battleplayer#numberOfRounds()}.\n\t\t */\n\t\t@Test\n\t\tvoid testNumberOfRounds3() {\n\t\t\t\t// setup\n\t\t\t\tfinal Battleplayer player = new Battleplayer(null);\n\t\t\t\t\n\t\t\t\t// execute\n\t\t\t\tfinal int result = player.numberOfRounds();\n\t\t\t\t\n\t\t\t\t// verify\n\t\t\t\tassertEquals(0, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test method for {@link de.outstare.fortbattleplayer.player.Battleplayer#numberOfRounds()}.\n\t\t */\n\t\t@Test\n\t\tvoid testNumberOfRounds4() {\n\t\t\t\t// setup\n\t\t\t\tfinal Battleplayer player = new Battleplayer(null);\n\t\t\t\t\n\t\t\t\t// execute\n\t\t\t\tfinal int result = player.numberOfRounds();\n\t\t\t\t\n\t\t\t\t// verify\n\t\t\t\tassertEquals(0, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test method for {@link de.outstare.fortbattleplayer.player.Battleplayer#numberOfRounds()}.\n\t\t */\n\t\t@Test\n\t\tvoid testNumberOfRounds5() {\n\t\t\t\t// setup\n\t\t\t\tfinal Battleplayer player = new Battleplayer(null);\n\t\t\t\t\n\t\t\t\t// execute\n\t\t\t\tfinal int result = player.numberOfRounds();\n\t\t\t\t\n\t\t\t\t// verify\n\t\t\t\tassertEquals(0, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test method for {@link de.outstare.fortbattleplayer.player.Battleplayer#numberOfRounds()}.\n\t\t */\n\t\t@Test\n\t\tvoid testNumberOfRounds6() {\n\t\t\t\t// setup\n\t\t\t\tfinal Battleplayer player = new Battleplayer(null);\n\t\t\t\t\n\t\t\t\t// execute\n\t\t\t\tfinal int result = player.numberOfRounds();\n\t\t\t\t\n\t\t\t\t// verify\n\t\t\t\tassertEquals(0, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test method for {@link de.outstare.fortbattleplayer.player.Battleplayer#numberOfRounds()}.\n\t\t */\n\t\t@Test\n\t\tvoid testNumberOfRounds7() {\n\t\t\t\t// setup\n\t\t\t\tfinal Battleplayer player = new Battleplayer(null);\n\t\t\t\t\n\t\t\t\t// execute\n\t\t\t\tfinal int result = player.numberOfRounds();\n\t\t\t\t\n\t\t\t\t// verify\n\t\t\t\tassertEquals(0, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test method for {@link de.outstare.fortbattleplayer.player.Battleplayer#numberOfRounds()}.\n\t\t */\n\t\t@Test\n\t\tvoid testNumberOfRounds8() {\n\t\t\t\t// setup\n\t\t\t\tfinal Battleplayer player = new Battleplayer(null);\n\t\t\t\t\n\t\t\t\t// execute\n\t\t\t\tfinal int result = player.numberOfRounds();\n\t\t\t\t\n\t\t\t\t// verify\n\t\t\t\tassertEquals(0, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test method for {@link de.outstare.fortbattleplayer.player.Battleplayer#numberOfRounds()}.\n\t\t */\n\t\t@Test\n\t\tvoid testNumberOfRounds9() {\n\t\t\t\t// setup\n\t\t\t\tfinal Battleplayer player = new Battleplayer(null);\n\t\t\t\t\n\t\t\t\t// execute\n\t\t\t\tfinal int result = player.numberOfRounds();\n\t\t\t\t\n\t\t\t\t// verify\n\t\t\t\tassertEquals(0, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t * Test method for {@link de.outstare.fortbattleplayer.player.Battleplayer#numberOfRounds()}.\n\t\t */\n\t\t@Test\n\t\tvoid testNumberOfRounds10() {\n\t\t\t\t// setup\n\t\t\t\tfinal Battleplayer player = new Battleplayer(null);\n\t\t\t\t\n\t\t\t\t// execute\n\t\t\t\tfinal int result = player.numberOfRounds();\n\t\t\t\t\n\t\t\t\t// verify\n\t\t\t\tassertEquals(0, result);\n\t\t}\n}\n\n// Battleplan.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Combatant;\n\n/**\n * A Battleplan is a list of {@link Round}s.\n *\n * @author daniel\n */\npublic class Battleplan {\n\n    private static final transient Logger LOG = Logger.getLogger(Battleplan.class.getName());\n\n    private final List<Round> rounds = new ArrayList<Round>();\n\n    /**\n     * @param round\n     */\n    public void addRound(final Round round);\n\n    /**\n     * @param roundNo\n     * @return\n     */\n    public Round getRound(final int roundNo);\n\n    /**\n     * @return\n     */\n    public int numberOfRounds();\n\n    /**\n     * A Round is a list of {@link Action}s.\n     *\n     * @author daniel\n     */\n    public static class Round {\n\n        private final List<Action> actions = new ArrayList<Action>();\n\n        /**\n         * @param action\n         */\n        public void addAction(final Action action);\n\n        /**\n         * @return\n         */\n        public List<Action> getActions();\n\n        /**\n         * An Action is a command for a {@link Combatant}.\n         *\n         * @author daniel\n         */\n        public static class Action {\n\n            private final Combatant combatant;\n\n            private final Command command;\n\n            /**\n             * @param combatant\n             * @param command\n             */\n            public Action(final Combatant combatant, final Command command);\n\n            /**\n             * @return\n             */\n            public Combatant getCombatant();\n\n            /**\n             * @return\n             */\n            public Command getCommand();\n\n            /**\n             * A Command is a command for a {@link Combatant}.\n             *\n             * @author daniel\n             */\n            public static enum Command {\n\n                /**\n                 *\n                 */\n                MOVE_FORWARD,\n\n                /**\n                 *\n                 */\n                MOVE_BACKWARD,\n\n                /**\n                 *\n                 */\n                TURN_LEFT,\n\n                /**\n                 *\n                 */\n                TURN_RIGHT,\n\n                /**\n                 *\n                 */\n                SHOOT,\n\n                /**\n                 *\n                 */\n                RELOAD,\n\n                /**\n                 *\n                 */\n                WAIT\n            }\n        }\n    }\n}\n\n// Player.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Combatant;\n\n/**\n * A Player controls the battle. It is a puppet player controlling the behavior\n * of the {@link Combatant}s.\n *\n * @author daniel\n */\npublic interface Player {\n\n    /**\n     * let the battle begin! The whole battle is done by executing the\n     * {@link Battleplan}.\n     */\n    public void play();\n\n    /**\n     * blocks until current round has ended\n     *\n     * @param roundNo\n     */\n    public void gotoRound(int roundNo);\n\n    /**\n     * @return the number of rounds this player shows\n     */\n    public int numberOfRounds();\n\n    /**\n     * toggles pause which holds playing rounds. if this player is currently\n     * paused can be checked with isPaused()\n     */\n    public void pause();\n\n    /**\n     * @return <code>true</code> if this player is playing and is currently hold\n     */\n    public boolean isPaused();\n\n    /**\n     * @return a list of all round numbers\n     */\n    public List<Integer> getRoundNumbers();\n\n    /**\n     * stops playing\n     */\n    public void stop();\n}\n\n// PlayerConfiguration.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Combatant;\n\n/**\n * A PlayerConfiguration controls some aspects of the behavior of the player.\n *\n * @author daniel\n */\npublic class PlayerConfiguration {\n\n    private static final transient Logger LOG = Logger.getLogger(PlayerConfiguration.class.getName());\n\n    /**\n     * the delay between two rounds in milliseconds\n     */\n    public static final String ROUND_DELAY = \"roundDelay\";\n\n    /**\n     * the delay between two actions in milliseconds\n     */\n    public static final String ACTION_DELAY = \"actionDelay\";\n\n    /**\n     * the delay between two shots in milliseconds\n     */\n    public static final String SHOT_DELAY = \"shotDelay\";\n\n    /**\n     * the delay between two reloads in milliseconds\n     */\n    public static final String RELOAD_DELAY = \"reloadDelay\";\n\n    /**\n     * the delay between two turns in milliseconds\n     */\n    public static final String TURN_DELAY = \"turnDelay\";\n\n    /**\n     * the delay between two moves in milliseconds\n     */\n    public static final String MOVE_DELAY = \"moveDelay\";\n\n    /**\n     * the delay between two waits in milliseconds\n     */\n    public static final String WAIT_DELAY = \"waitDelay\";\n\n    /**\n     * the delay between two rounds in milliseconds\n     */\n    public static final int DEFAULT_ROUND_DELAY = 1000;\n\n    /**\n     * the delay between two actions in milliseconds\n     */\n    public static final int DEFAULT_ACTION_DELAY = 100;\n\n    /**\n     * the delay between two shots in milliseconds\n     */\n    public static final int DEFAULT_SHOT_DELAY = 100;\n\n    /**\n     * the delay between two reloads in milliseconds\n     */\n    public static final int DEFAULT_RELOAD_DELAY = 100;\n\n    /**\n     * the delay between two turns in milliseconds\n     */\n    public static final int DEFAULT_TURN_DELAY = 100;\n\n    /**\n     * the delay between two moves in milliseconds\n     */\n    public static final int DEFAULT_MOVE_DELAY = 100;\n\n    /**\n     * the delay between two waits in milliseconds\n     */\n    public static final int DEFAULT_WAIT_DELAY = 100;\n\n    /**\n     * @param key\n     * @return\n     */\n    public int getInt(final String key);\n\n    /**\n     * @param key\n     * @param value\n     */\n    public void setInt(final String key, final int value);\n}\n\n// RoundListener.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Combatant;\n",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 1002,
        "completion_tokens": 4000,
        "total_tokens": 5002
    },
    "time_taken": 89.3986508846283,
    "prompt_id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/Battleplayer.java",
    "original_code": "// Battleplayer.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Combatant;\n\n/**\n * A {@link Battleplayer} controls the battle. It is a puppet player controlling\n * the behavior of the {@link Combatant}s.\n *\n * @author daniel\n */\npublic class Battleplayer implements Player {\n\n    private static final transient Logger LOG = Logger.getLogger(Battleplayer.class.getName());\n\n    private final Battleplan plan;\n\n    private final Set<RoundListener> listeners = new HashSet<RoundListener>();\n\n    private boolean isPaused = false;\n\n    /**\n     * round numbers may not be sequential (this variable is also used for\n     * locking during a round)\n     */\n    private int currentRoundNo;\n\n    private volatile boolean isPlaying = false;\n\n    private volatile boolean shouldStop = false;\n\n    /**\n     * controls some aspects of the behavior of the player\n     */\n    public final PlayerConfiguration config;\n\n    /**\n     * @param plan\n     * @param config\n     */\n    public Battleplayer(final Battleplan plan, final PlayerConfiguration config) {\n    }\n\n    /**\n     * @param plan\n     */\n    public Battleplayer(final Battleplan plan) {\n    }\n\n    /**\n     * let the battle begin! The whole battle is done by executing the\n     * {@link Battleplan}.\n     */\n    public void play();\n\n    /**\n     * blocks until current round has ended\n     *\n     * @see de.outstare.fortbattleplayer.player.Player#gotoRound(de.outstare.fortbattleplayer.player.Round)\n     */\n    public void gotoRound(final int i);\n\n    /**\n     * executes the round of the internal state\n     */\n    private void playCurrentRound(final int roundNo);\n\n    /**\n     * wait the time given in {@link PlayerConfiguration#ROUND_DELAY}\n     */\n    private void delayNextRound();\n\n    /**\n     * tell all listeners that a new round will start now\n     *\n     * @param roundNo\n     */\n    private void fireNewRoundEvent(final int roundNo);\n\n    /**\n     * @param listener\n     */\n    public void addRoundListener(final RoundListener listener);\n\n    /**\n     * @see de.outstare.fortbattleplayer.player.Player#stop()\n     */\n    public void stop();\n\n    /**\n     * A RoundListener waits for Round events.\n     *\n     * @author daniel\n     */\n    public static interface RoundListener {\n\n        /**\n         * a new round will begin immediatly\n         *\n         * @param roundNo\n         */\n        void nextRound(int roundNo);\n    }\n\n    /**\n     * @return the number of rounds this player shows\n     */\n    public int numberOfRounds();\n\n    /**\n     * toggles pause which holds playing rounds. if this player is currently\n     * paused can be checked with isPaused()\n     */\n    public void pause();\n\n    /**\n     * @return <code>true</code> if this player is playing and is currently hold\n     */\n    public boolean isPaused();\n\n    /**\n     * @see de.outstare.fortbattleplayer.player.Player#getRoundNumbers()\n     */\n    public List<Integer> getRoundNumbers();\n}\n",
    "test_prompt": "// BattleplayerTest.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Combatant;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Battleplayer}.\n* It contains ten unit test cases for the {@link Battleplayer#numberOfRounds()} method.\n*/\nclass BattleplayerTest {"
},
{
    "id": "cmpl-6xEVHKOIRYjQSLvamZaHXSwlcwQw6",
    "object": "text_completion",
    "created": 1679575123,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#copy()}\n\t\t*\n\t\t* @throws CloneNotSupportedException\n\t\t*/\n\t\t@Test\n\t\tvoid testCopy() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal PlayerConfiguration copy = config.copy();\n\t\t\t\t// then\n\t\t\t\tassertNotSame(config, copy);\n\t\t\t\tassertEquals(config.ROUND_DELAY, copy.ROUND_DELAY);\n\t\t\t\tassertEquals(config.PLAYER_DELAY, copy.PLAYER_DELAY);\n\t\t\t\tassertEquals(config.ACTION_DELAY, copy.ACTION_DELAY);\n\t\t\t\tassertEquals(config.SHOW_MOVETARGETS, copy.SHOW_MOVETARGETS);\n\t\t\t\tassertEquals(config.SHOW_SHOOTLINE, copy.SHOW_SHOOTLINE);\n\t\t\t\tassertEquals(config.state, copy.state);\n\t\t\t\tassertNotSame(config.playLock, copy.playLock);\n\t\t\t\tassertNotSame(config.listeners, copy.listeners);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#copy()}\n\t\t*\n\t\t* @throws CloneNotSupportedException\n\t\t*/\n\t\t@Test\n\t\tvoid testCopy2() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\tconfig.ROUND_DELAY = 1;\n\t\t\t\tconfig.PLAYER_DELAY = 2;\n\t\t\t\tconfig.ACTION_DELAY = 3;\n\t\t\t\tconfig.SHOW_MOVETARGETS = true;\n\t\t\t\tconfig.SHOW_SHOOTLINE = true;\n\t\t\t\tconfig.state = PlayerState.PLAY;\n\t\t\t\tconfig.playLock = new ReentrantLock();\n\t\t\t\tconfig.listeners.add(new PlayerConfigurationListener() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onConfigurationChanged(final PlayerConfiguration config) {\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// when\n\t\t\t\tfinal PlayerConfiguration copy = config.copy();\n\t\t\t\t// then\n\t\t\t\tassertNotSame(config, copy);\n\t\t\t\tassertEquals(config.ROUND_DELAY, copy.ROUND_DELAY);\n\t\t\t\tassertEquals(config.PLAYER_DELAY, copy.PLAYER_DELAY);\n\t\t\t\tassertEquals(config.ACTION_DELAY, copy.ACTION_DELAY);\n\t\t\t\tassertEquals(config.SHOW_MOVETARGETS, copy.SHOW_MOVETARGETS);\n\t\t\t\tassertEquals(config.SHOW_SHOOTLINE, copy.SHOW_SHOOTLINE);\n\t\t\t\tassertEquals(config.state, copy.state);\n\t\t\t\tassertNotSame(config.playLock, copy.playLock);\n\t\t\t\tassertNotSame(config.listeners, copy.listeners);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#copy()}\n\t\t*\n\t\t* @throws CloneNotSupportedException\n\t\t*/\n\t\t@Test\n\t\tvoid testCopy3() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\tconfig.ROUND_DELAY = 1;\n\t\t\t\tconfig.PLAYER_DELAY = 2;\n\t\t\t\tconfig.ACTION_DELAY = 3;\n\t\t\t\tconfig.SHOW_MOVETARGETS = true;\n\t\t\t\tconfig.SHOW_SHOOTLINE = true;\n\t\t\t\tconfig.state = PlayerState.PLAY;\n\t\t\t\tconfig.playLock = new ReentrantLock();\n\t\t\t\tconfig.listeners.add(new PlayerConfigurationListener() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onConfigurationChanged(final PlayerConfiguration config) {\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// when\n\t\t\t\tfinal PlayerConfiguration copy = config.copy();\n\t\t\t\t// then\n\t\t\t\tassertNotSame(config, copy);\n\t\t\t\tassertEquals(config.ROUND_DELAY, copy.ROUND_DELAY);\n\t\t\t\tassertEquals(config.PLAYER_DELAY, copy.PLAYER_DELAY);\n\t\t\t\tassertEquals(config.ACTION_DELAY, copy.ACTION_DELAY);\n\t\t\t\tassertEquals(config.SHOW_MOVETARGETS, copy.SHOW_MOVETARGETS);\n\t\t\t\tassertEquals(config.SHOW_SHOOTLINE, copy.SHOW_SHOOTLINE);\n\t\t\t\tassertEquals(config.state, copy.state);\n\t\t\t\tassertNotSame(config.playLock, copy.playLock);\n\t\t\t\tassertNotSame(config.listeners, copy.listeners);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#copy()}\n\t\t*\n\t\t* @throws CloneNotSupportedException\n\t\t*/\n\t\t@Test\n\t\tvoid testCopy4() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\tconfig.ROUND_DELAY = 1;\n\t\t\t\tconfig.PLAYER_DELAY = 2;\n\t\t\t\tconfig.ACTION_DELAY = 3;\n\t\t\t\tconfig.SHOW_MOVETARGETS = true;\n\t\t\t\tconfig.SHOW_SHOOTLINE = true;\n\t\t\t\tconfig.state = PlayerState.PLAY;\n\t\t\t\tconfig.playLock = new ReentrantLock();\n\t\t\t\tconfig.listeners.add(new PlayerConfigurationListener() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onConfigurationChanged(final PlayerConfiguration config) {\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// when\n\t\t\t\tfinal PlayerConfiguration copy = config.copy();\n\t\t\t\t// then\n\t\t\t\tassertNotSame(config, copy);\n\t\t\t\tassertEquals(config.ROUND_DELAY, copy.ROUND_DELAY);\n\t\t\t\tassertEquals(config.PLAYER_DELAY, copy.PLAYER_DELAY);\n\t\t\t\tassertEquals(config.ACTION_DELAY, copy.ACTION_DELAY);\n\t\t\t\tassertEquals(config.SHOW_MOVETARGETS, copy.SHOW_MOVETARGETS);\n\t\t\t\tassertEquals(config.SHOW_SHOOTLINE, copy.SHOW_SHOOTLINE);\n\t\t\t\tassertEquals(config.state, copy.state);\n\t\t\t\tassertNotSame(config.playLock, copy.playLock);\n\t\t\t\tassertNotSame(config.listeners, copy.listeners);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#copy()}\n\t\t*\n\t\t* @throws CloneNotSupportedException\n\t\t*/\n\t\t@Test\n\t\tvoid testCopy5() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\tconfig.ROUND_DELAY = 1;\n\t\t\t\tconfig.PLAYER_DELAY = 2;\n\t\t\t\tconfig.ACTION_DELAY = 3;\n\t\t\t\tconfig.SHOW_MOVETARGETS = true;\n\t\t\t\tconfig.SHOW_SHOOTLINE = true;\n\t\t\t\tconfig.state = PlayerState.PLAY;\n\t\t\t\tconfig.playLock = new ReentrantLock();\n\t\t\t\tconfig.listeners.add(new PlayerConfigurationListener() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onConfigurationChanged(final PlayerConfiguration config) {\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// when\n\t\t\t\tfinal PlayerConfiguration copy = config.copy();\n\t\t\t\t// then\n\t\t\t\tassertNotSame(config, copy);\n\t\t\t\tassertEquals(config.ROUND_DELAY, copy.ROUND_DELAY);\n\t\t\t\tassertEquals(config.PLAYER_DELAY, copy.PLAYER_DELAY);\n\t\t\t\tassertEquals(config.ACTION_DELAY, copy.ACTION_DELAY);\n\t\t\t\tassertEquals(config.SHOW_MOVETARGETS, copy.SHOW_MOVETARGETS);\n\t\t\t\tassertEquals(config.SHOW_SHOOTLINE, copy.SHOW_SHOOTLINE);\n\t\t\t\tassertEquals(config.state, copy.state);\n\t\t\t\tassertNotSame(config.playLock, copy.playLock);\n\t\t\t\tassertNotSame(config.listeners, copy.listeners);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#copy()}\n\t\t*\n\t\t* @throws CloneNotSupportedException\n\t\t*/\n\t\t@Test\n\t\tvoid testCopy6() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\tconfig.ROUND_DELAY = 1;\n\t\t\t\tconfig.PLAYER_DELAY = 2;\n\t\t\t\tconfig.ACTION_DELAY = 3;\n\t\t\t\tconfig.SHOW_MOVETARGETS = true;\n\t\t\t\tconfig.SHOW_SHOOTLINE = true;\n\t\t\t\tconfig.state = PlayerState.PLAY;\n\t\t\t\tconfig.playLock = new ReentrantLock();\n\t\t\t\tconfig.listeners.add(new PlayerConfigurationListener() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onConfigurationChanged(final PlayerConfiguration config) {\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// when\n\t\t\t\tfinal PlayerConfiguration copy = config.copy();\n\t\t\t\t// then\n\t\t\t\tassertNotSame(config, copy);\n\t\t\t\tassertEquals(config.ROUND_DELAY, copy.ROUND_DELAY);\n\t\t\t\tassertEquals(config.PLAYER_DELAY, copy.PLAYER_DELAY);\n\t\t\t\tassertEquals(config.ACTION_DELAY, copy.ACTION_DELAY);\n\t\t\t\tassertEquals(config.SHOW_MOVETARGETS, copy.SHOW_MOVETARGETS);\n\t\t\t\tassertEquals(config.SHOW_SHOOTLINE, copy.SHOW_SHOOTLINE);\n\t\t\t\tassertEquals(config.state, copy.state);\n\t\t\t\tassertNotSame(config.playLock, copy.playLock);\n\t\t\t\tassertNotSame(config.listeners, copy.listeners);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#copy()}\n\t\t*\n\t\t* @throws CloneNotSupportedException\n\t\t*/\n\t\t@Test\n\t\tvoid testCopy7() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\tconfig.ROUND_DELAY = 1;\n\t\t\t\tconfig.PLAYER_DELAY = 2;\n\t\t\t\tconfig.ACTION_DELAY = 3;\n\t\t\t\tconfig.SHOW_MOVETARGETS = true;\n\t\t\t\tconfig.SHOW_SHOOTLINE = true;\n\t\t\t\tconfig.state = PlayerState.PLAY;\n\t\t\t\tconfig.playLock = new ReentrantLock();\n\t\t\t\tconfig.listeners.add(new PlayerConfigurationListener() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onConfigurationChanged(final PlayerConfiguration config) {\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// when\n\t\t\t\tfinal PlayerConfiguration copy = config.copy();\n\t\t\t\t// then\n\t\t\t\tassertNotSame(config, copy);\n\t\t\t\tassertEquals(config.ROUND_DELAY, copy.ROUND_DELAY);\n\t\t\t\tassertEquals(config.PLAYER_DELAY, copy.PLAYER_DELAY);\n\t\t\t\tassertEquals(config.ACTION_DELAY, copy.ACTION_DELAY);\n\t\t\t\tassertEquals(config.SHOW_MOVETARGETS, copy.SHOW_MOVETARGETS);\n\t\t\t\tassertEquals(config.SHOW_SHOOTLINE, copy.SHOW_SHOOTLINE);\n\t\t\t\tassertEquals(config.state, copy.state);\n\t\t\t\tassertNotSame(config.playLock, copy.playLock);\n\t\t\t\tassertNotSame(config.listeners, copy.listeners);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#copy()}\n\t\t*\n\t\t* @throws CloneNotSupportedException\n\t\t*/\n\t\t@Test\n\t\tvoid testCopy8() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\tconfig.ROUND_DELAY = 1;\n\t\t\t\tconfig.PLAYER_DELAY = 2;\n\t\t\t\tconfig.ACTION_DELAY = 3;\n\t\t\t\tconfig.SHOW_MOVETARGETS = true;\n\t\t\t\tconfig.SHOW_SHOOTLINE = true;\n\t\t\t\tconfig.state = PlayerState.PLAY;\n\t\t\t\tconfig.playLock = new ReentrantLock();\n\t\t\t\tconfig.listeners.add(new PlayerConfigurationListener() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onConfigurationChanged(final PlayerConfiguration config) {\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// when\n\t\t\t\tfinal PlayerConfiguration copy = config.copy();\n\t\t\t\t// then\n\t\t\t\tassertNotSame(config, copy);\n\t\t\t\tassertEquals(config.ROUND_DELAY, copy.ROUND_DELAY);\n\t\t\t\tassertEquals(config.PLAYER_DELAY, copy.PLAYER_DELAY);\n\t\t\t\tassertEquals(config.ACTION_DELAY, copy.ACTION_DELAY);\n\t\t\t\tassertEquals(config.SHOW_MOVETARGETS, copy.SHOW_MOVETARGETS);\n\t\t\t\tassertEquals(config.SHOW_SHOOTLINE, copy.SHOW_SHOOTLINE);\n\t\t\t\tassertEquals(config.state, copy.state);\n\t\t\t\tassertNotSame(config.playLock, copy.playLock);\n\t\t\t\tassertNotSame(config.listeners, copy.listeners);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#copy()}\n\t\t*\n\t\t* @throws CloneNotSupportedException\n\t\t*/\n\t\t@Test\n\t\tvoid testCopy9() throws CloneNotSupportedException {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\tconfig.ROUND_DELAY = 1;\n\t\t\t\tconfig.PLAYER_DELAY = 2;\n\t\t\t\tconfig.ACTION_DELAY = 3;\n\t\t\t\tconfig.SHOW_MOVETARGETS = true;\n\t\t\t\tconfig.SHOW_SHOOTLINE = true;\n\t\t\t\tconfig.state = PlayerState.PLAY;\n\t\t\t\tconfig.playLock = new ReentrantLock();\n\t\t\t\tconfig.listeners.add(new PlayerConfigurationListener() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onConfiguration",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 1069,
        "completion_tokens": 4000,
        "total_tokens": 5069
    },
    "time_taken": 101.85521864891052,
    "prompt_id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration_0Test.java",
    "original_code": "// PlayerConfiguration.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\n\n/**\n * An instance of this will be used by the player to hold its tunable\n * parameters.\n *\n * @author daniel\n */\npublic class PlayerConfiguration implements Cloneable {\n\n    /**\n     * a configuration which skips animation (used for purposes where the user\n     * should not see whats going on)\n     */\n    public static final PlayerConfiguration NO_DELAY = new PlayerConfiguration();\n\n    static {\n    }\n\n    /**\n     * this is used to control who currently does something with the player\n     */\n    private final Lock playLock = new ReentrantLock();\n\n    private final Set<PlayerConfigurationListener> listeners = new HashSet<PlayerConfigurationListener>();\n\n    /**\n     * current state of the player\n     */\n    private PlayerState state = PlayerState.STOP;\n\n    /**\n     * pause between two rounds in milliseconds\n     */\n    public volatile int ROUND_DELAY = Configuration.ROUND_DELAY;\n\n    /**\n     * pause between two players in a round in milliseconds\n     */\n    public volatile int PLAYER_DELAY = Configuration.PLAYER_DELAY;\n\n    /**\n     * pause between two actions in milliseconds\n     */\n    public volatile int ACTION_DELAY = Configuration.ACTION_DELAY;\n\n    /**\n     * draw a line to the point, where the player wants to go\n     */\n    private volatile boolean SHOW_MOVETARGETS = Configuration.SHOW_MOVETARGETS;\n\n    /**\n     * draw a line to the enemy ath wich the player shoots\n     */\n    private volatile boolean SHOW_SHOOTLINE = Configuration.SHOW_SHOOTLINE;\n\n    /**\n     * @param other\n     */\n    public void setTo(final PlayerConfiguration other);\n\n    /**\n     * @return a copy of this object\n     * @throws CloneNotSupportedException\n     */\n    public PlayerConfiguration copy() throws CloneNotSupportedException;\n\n    /**\n     * should only be called by {@link Battleplayer}!\n     *\n     * @param newState\n     */\n    synchronized void setState(final PlayerState newState);\n\n    /**\n     * @return true if the player should be playing\n     */\n    public synchronized boolean isPlaying();\n\n    /**\n     * @return true if the player is hold\n     */\n    public synchronized boolean isPaused();\n\n    /**\n     * @return true if the player is stopped\n     */\n    public synchronized boolean isStopped();\n\n    /**\n     * exclusive use of the player\n     */\n    void lock();\n\n    /**\n     * release the player\n     */\n    void unlock();\n\n    /**\n     * @return <code>true</code> if lines to movement targets should be\n     *         displayed\n     */\n    public boolean showMoveTargets();\n\n    /**\n     * @param showMovetargets\n     */\n    public void setShowMoveTargets(final boolean showMovetargets);\n\n    /**\n     * @return <code>true</code> if shooting lines should be displayed\n     */\n    public boolean showShootline();\n\n    /**\n     * @param showShootline\n     */\n    public void setShowShootline(final boolean showShootline);\n\n    /**\n     * Adds a listener which will be notified about changes.\n     *\n     * @param listener\n     */\n    public void addListener(final PlayerConfigurationListener listener);\n\n    /**\n     * Removes the listener from the registered ones.\n     *\n     * @param listener\n     */\n    public void removeListener(final PlayerConfigurationListener listener);\n}\n",
    "test_prompt": "// PlayerConfiguration_0Test.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlayerConfiguration}.\n* It contains ten unit test cases for the {@link PlayerConfiguration#copy()} method.\n*/\nclass PlayerConfiguration_0Test {"
},
{
    "id": "cmpl-6xEWvxa9qx6b6ZPUziPOp5kCNh3HO",
    "object": "text_completion",
    "created": 1679575225,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets_1() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets_2() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets_3() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets_4() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets_5() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets_6() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets_7() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets_8() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets_9() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets_10() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showMoveTargets();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_MOVETARGETS, result);\n\t\t}\n}\n\n// PlayerConfiguration_2Test.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlayerConfiguration}.\n* It contains ten unit test cases for the {@link PlayerConfiguration#showShootline()} method.\n*/\nclass PlayerConfiguration_2Test {\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_SHOOTLINE, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline_1() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_SHOOTLINE, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline_2() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_SHOOTLINE, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline_3() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_SHOOTLINE, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline_4() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_SHOOTLINE, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline_5() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_SHOOTLINE, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline_6() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_SHOOTLINE, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline_7() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_SHOOTLINE, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline_8() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_SHOOTLINE, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline_9() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_SHOOTLINE, result);\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline_10() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tfinal boolean result = config.showShootline();\n\t\t\t\t// then\n\t\t\t\tassertEquals(Configuration.SHOW_SHOOTLINE, result);\n\t\t}\n}\n\n// PlayerConfiguration_3Test.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlayerConfiguration}.\n* It contains ten unit test cases for the {@link PlayerConfiguration#setShowMoveTargets(boolean)} method.\n*/\nclass PlayerConfiguration_3Test {\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#setShowMoveTargets(boolean)}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testSetShowMoveTargets() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowMoveTargets(true);\n\t\t\t\t// then\n\t\t\t\tassertEquals(true, config.showMoveTargets());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#setShowMoveTargets(boolean)}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testSetShowMoveTargets_1() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowMoveTargets(true);\n\t\t\t\t// then\n\t\t\t\tassertEquals(true, config.showMoveTargets());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#setShowMoveTargets(boolean)}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testSetShowMoveTargets_2() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowMoveTargets(true);\n\t\t\t\t// then\n\t\t\t\tassertEquals(true, config.showMoveTargets());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#setShowMoveTargets(boolean)}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testSetShowMoveTargets_3() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowMoveTargets(true);\n\t\t\t\t// then\n\t\t\t\tassertEquals(true, config.showMoveTargets());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#setShowMove",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 1073,
        "completion_tokens": 4000,
        "total_tokens": 5073
    },
    "time_taken": 114.27318859100342,
    "prompt_id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration_1Test.java",
    "original_code": "// PlayerConfiguration.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\n\n/**\n * An instance of this will be used by the player to hold its tunable\n * parameters.\n *\n * @author daniel\n */\npublic class PlayerConfiguration implements Cloneable {\n\n    /**\n     * a configuration which skips animation (used for purposes where the user\n     * should not see whats going on)\n     */\n    public static final PlayerConfiguration NO_DELAY = new PlayerConfiguration();\n\n    static {\n    }\n\n    /**\n     * this is used to control who currently does something with the player\n     */\n    private final Lock playLock = new ReentrantLock();\n\n    private final Set<PlayerConfigurationListener> listeners = new HashSet<PlayerConfigurationListener>();\n\n    /**\n     * current state of the player\n     */\n    private PlayerState state = PlayerState.STOP;\n\n    /**\n     * pause between two rounds in milliseconds\n     */\n    public volatile int ROUND_DELAY = Configuration.ROUND_DELAY;\n\n    /**\n     * pause between two players in a round in milliseconds\n     */\n    public volatile int PLAYER_DELAY = Configuration.PLAYER_DELAY;\n\n    /**\n     * pause between two actions in milliseconds\n     */\n    public volatile int ACTION_DELAY = Configuration.ACTION_DELAY;\n\n    /**\n     * draw a line to the point, where the player wants to go\n     */\n    private volatile boolean SHOW_MOVETARGETS = Configuration.SHOW_MOVETARGETS;\n\n    /**\n     * draw a line to the enemy ath wich the player shoots\n     */\n    private volatile boolean SHOW_SHOOTLINE = Configuration.SHOW_SHOOTLINE;\n\n    /**\n     * @param other\n     */\n    public void setTo(final PlayerConfiguration other);\n\n    /**\n     * @return a copy of this object\n     * @throws CloneNotSupportedException\n     */\n    public PlayerConfiguration copy() throws CloneNotSupportedException;\n\n    /**\n     * should only be called by {@link Battleplayer}!\n     *\n     * @param newState\n     */\n    synchronized void setState(final PlayerState newState);\n\n    /**\n     * @return true if the player should be playing\n     */\n    public synchronized boolean isPlaying();\n\n    /**\n     * @return true if the player is hold\n     */\n    public synchronized boolean isPaused();\n\n    /**\n     * @return true if the player is stopped\n     */\n    public synchronized boolean isStopped();\n\n    /**\n     * exclusive use of the player\n     */\n    void lock();\n\n    /**\n     * release the player\n     */\n    void unlock();\n\n    /**\n     * @return <code>true</code> if lines to movement targets should be\n     *         displayed\n     */\n    public boolean showMoveTargets();\n\n    /**\n     * @param showMovetargets\n     */\n    public void setShowMoveTargets(final boolean showMovetargets);\n\n    /**\n     * @return <code>true</code> if shooting lines should be displayed\n     */\n    public boolean showShootline();\n\n    /**\n     * @param showShootline\n     */\n    public void setShowShootline(final boolean showShootline);\n\n    /**\n     * Adds a listener which will be notified about changes.\n     *\n     * @param listener\n     */\n    public void addListener(final PlayerConfigurationListener listener);\n\n    /**\n     * Removes the listener from the registered ones.\n     *\n     * @param listener\n     */\n    public void removeListener(final PlayerConfigurationListener listener);\n}\n",
    "test_prompt": "// PlayerConfiguration_1Test.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlayerConfiguration}.\n* It contains ten unit test cases for the {@link PlayerConfiguration#showMoveTargets()} method.\n*/\nclass PlayerConfiguration_1Test {"
},
{
    "id": "cmpl-6xEYmSICi8QKv4EqtG3vooLqEbuAN",
    "object": "text_completion",
    "created": 1679575340,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowShootline(true);\n\t\t\t\t// then\n\t\t\t\tassertTrue(config.showShootline());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline2() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowShootline(false);\n\t\t\t\t// then\n\t\t\t\tassertFalse(config.showShootline());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline3() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowShootline(true);\n\t\t\t\t// then\n\t\t\t\tassertTrue(config.showShootline());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline4() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowShootline(false);\n\t\t\t\t// then\n\t\t\t\tassertFalse(config.showShootline());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline5() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowShootline(true);\n\t\t\t\t// then\n\t\t\t\tassertTrue(config.showShootline());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline6() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowShootline(false);\n\t\t\t\t// then\n\t\t\t\tassertFalse(config.showShootline());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline7() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowShootline(true);\n\t\t\t\t// then\n\t\t\t\tassertTrue(config.showShootline());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline8() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowShootline(false);\n\t\t\t\t// then\n\t\t\t\tassertFalse(config.showShootline());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline9() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowShootline(true);\n\t\t\t\t// then\n\t\t\t\tassertTrue(config.showShootline());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showShootline()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowShootline10() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowShootline(false);\n\t\t\t\t// then\n\t\t\t\tassertFalse(config.showShootline());\n\t\t}\n\t\t\n}\n\n// PlayerConfiguration_3Test.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlayerConfiguration}.\n* It contains ten unit test cases for the {@link PlayerConfiguration#showMoveTargets()} method.\n*/\nclass PlayerConfiguration_3Test {\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowMoveTargets(true);\n\t\t\t\t// then\n\t\t\t\tassertTrue(config.showMoveTargets());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets2() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowMoveTargets(false);\n\t\t\t\t// then\n\t\t\t\tassertFalse(config.showMoveTargets());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets3() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowMoveTargets(true);\n\t\t\t\t// then\n\t\t\t\tassertTrue(config.showMoveTargets());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets4() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowMoveTargets(false);\n\t\t\t\t// then\n\t\t\t\tassertFalse(config.showMoveTargets());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets5() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowMoveTargets(true);\n\t\t\t\t// then\n\t\t\t\tassertTrue(config.showMoveTargets());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets6() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowMoveTargets(false);\n\t\t\t\t// then\n\t\t\t\tassertFalse(config.showMoveTargets());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets7() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowMoveTargets(true);\n\t\t\t\t// then\n\t\t\t\tassertTrue(config.showMoveTargets());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets8() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowMoveTargets(false);\n\t\t\t\t// then\n\t\t\t\tassertFalse(config.showMoveTargets());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets9() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowMoveTargets(true);\n\t\t\t\t// then\n\t\t\t\tassertTrue(config.showMoveTargets());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#showMoveTargets()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testShowMoveTargets10() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setShowMoveTargets(false);\n\t\t\t\t// then\n\t\t\t\tassertFalse(config.showMoveTargets());\n\t\t}\n\t\t\n}\n\n// PlayerConfiguration_4Test.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlayerConfiguration}.\n* It contains ten unit test cases for the {@link PlayerConfiguration#isStopped()} method.\n*/\nclass PlayerConfiguration_4Test {\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#isStopped()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testIsStopped() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setState(PlayerState.STOP);\n\t\t\t\t// then\n\t\t\t\tassertTrue(config.isStopped());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#isStopped()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testIsStopped2() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setState(PlayerState.STOP);\n\t\t\t\t// then\n\t\t\t\tassertTrue(config.isStopped());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#isStopped()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testIsStopped3() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setState(PlayerState.STOP);\n\t\t\t\t// then\n\t\t\t\tassertTrue(config.isStopped());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#isStopped()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testIsStopped4() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setState(PlayerState.STOP);\n\t\t\t\t// then\n\t\t\t\tassertTrue(config.isStopped());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#isStopped()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testIsStopped5() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setState(PlayerState.STOP);\n\t\t\t\t// then\n\t\t\t\tassertTrue(config.isStopped());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#isStopped()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testIsStopped6() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setState(PlayerState.STOP);\n\t\t\t\t// then\n\t\t\t\tassertTrue(config.isStopped());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#isStopped()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testIsStopped7() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setState(PlayerState.STOP);\n\t\t\t\t// then\n\t\t\t\tassertTrue(config.isStopped());\n\t\t}\n\t\t\n\t\t/**\n\t\t* Test case for {@link PlayerConfiguration#isStopped()}\n\t\t*\n\t\t* @throws Exception\n\t\t*/\n\t\t@Test\n\t\tvoid testIsStopped8() throws Exception {\n\t\t\t\t// given\n\t\t\t\tfinal PlayerConfiguration config = new PlayerConfiguration();\n\t\t\t\t// when\n\t\t\t\tconfig.setState(PlayerState.STOP);\n\t\t\t\t// then\n\t\t\t\tassertTrue(config.isStopped());\n\t\t}\n\t",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 1072,
        "completion_tokens": 4000,
        "total_tokens": 5072
    },
    "time_taken": 94.0381600856781,
    "prompt_id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration_2Test.java",
    "original_code": "// PlayerConfiguration.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\n\n/**\n * An instance of this will be used by the player to hold its tunable\n * parameters.\n *\n * @author daniel\n */\npublic class PlayerConfiguration implements Cloneable {\n\n    /**\n     * a configuration which skips animation (used for purposes where the user\n     * should not see whats going on)\n     */\n    public static final PlayerConfiguration NO_DELAY = new PlayerConfiguration();\n\n    static {\n    }\n\n    /**\n     * this is used to control who currently does something with the player\n     */\n    private final Lock playLock = new ReentrantLock();\n\n    private final Set<PlayerConfigurationListener> listeners = new HashSet<PlayerConfigurationListener>();\n\n    /**\n     * current state of the player\n     */\n    private PlayerState state = PlayerState.STOP;\n\n    /**\n     * pause between two rounds in milliseconds\n     */\n    public volatile int ROUND_DELAY = Configuration.ROUND_DELAY;\n\n    /**\n     * pause between two players in a round in milliseconds\n     */\n    public volatile int PLAYER_DELAY = Configuration.PLAYER_DELAY;\n\n    /**\n     * pause between two actions in milliseconds\n     */\n    public volatile int ACTION_DELAY = Configuration.ACTION_DELAY;\n\n    /**\n     * draw a line to the point, where the player wants to go\n     */\n    private volatile boolean SHOW_MOVETARGETS = Configuration.SHOW_MOVETARGETS;\n\n    /**\n     * draw a line to the enemy ath wich the player shoots\n     */\n    private volatile boolean SHOW_SHOOTLINE = Configuration.SHOW_SHOOTLINE;\n\n    /**\n     * @param other\n     */\n    public void setTo(final PlayerConfiguration other);\n\n    /**\n     * @return a copy of this object\n     * @throws CloneNotSupportedException\n     */\n    public PlayerConfiguration copy() throws CloneNotSupportedException;\n\n    /**\n     * should only be called by {@link Battleplayer}!\n     *\n     * @param newState\n     */\n    synchronized void setState(final PlayerState newState);\n\n    /**\n     * @return true if the player should be playing\n     */\n    public synchronized boolean isPlaying();\n\n    /**\n     * @return true if the player is hold\n     */\n    public synchronized boolean isPaused();\n\n    /**\n     * @return true if the player is stopped\n     */\n    public synchronized boolean isStopped();\n\n    /**\n     * exclusive use of the player\n     */\n    void lock();\n\n    /**\n     * release the player\n     */\n    void unlock();\n\n    /**\n     * @return <code>true</code> if lines to movement targets should be\n     *         displayed\n     */\n    public boolean showMoveTargets();\n\n    /**\n     * @param showMovetargets\n     */\n    public void setShowMoveTargets(final boolean showMovetargets);\n\n    /**\n     * @return <code>true</code> if shooting lines should be displayed\n     */\n    public boolean showShootline();\n\n    /**\n     * @param showShootline\n     */\n    public void setShowShootline(final boolean showShootline);\n\n    /**\n     * Adds a listener which will be notified about changes.\n     *\n     * @param listener\n     */\n    public void addListener(final PlayerConfigurationListener listener);\n\n    /**\n     * Removes the listener from the registered ones.\n     *\n     * @param listener\n     */\n    public void removeListener(final PlayerConfigurationListener listener);\n}\n",
    "test_prompt": "// PlayerConfiguration_2Test.java\npackage de.outstare.fortbattleplayer.player;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlayerConfiguration}.\n* It contains ten unit test cases for the {@link PlayerConfiguration#showShootline()} method.\n*/\nclass PlayerConfiguration_2Test {"
}
]