ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6womf9Dzizas7RdptdSDTbrw1jmzT,/EvoSuiteBenchmark/scenario2/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState0.java,67.20758652687073,length,"// EndState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a  state machines ending state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the end state.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 * @stereotype singleton
 */
public final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the EndState object.
     * Creation date: (2/20/01 11:05:10 AM)
     *
     * @return com.objectmentors.state.EndState
     */
    public static EndState getSingleton() {
        return SINGLETON;
    }
}
","// EndStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getSingleton()} method.
*/
class EndStateTest {","// EndStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getSingleton()} method.
*/
class EndStateTest {

	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_2() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_3() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_4() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_5() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_6() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_7() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_8() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_9() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_10() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
}

// EndStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getSingleton()} method.
*/
class EndStateTest {
		
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_2() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_3() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_4() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_5() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_6() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_7() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_8() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_9() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_10() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
}

// EndStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getSingleton()} method.
*/
class EndStateTest {
		
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton() {
		EndState endState = EndState.getSingleton();
		assertNotNull(endState);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton_2() {
		EndState endState = EndState.getSingleton"
cmpl-6wonkgxBvjfRSJxs9Jj0Eb4iPh9np,/EvoSuiteBenchmark/scenario2/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState1.java,47.72160792350769,length,"// EndState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a  state machines ending state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the end state.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 * @stereotype singleton
 */
public final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Returns this EndState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject() {
        return (java.lang.Object) this;
    }
}
","// EndStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#toObject()} method.
*/
class EndStateTest {","// EndStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#toObject()} method.
*/
class EndStateTest {

	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject() {
		// TODO: implement test
	}
}

// IState.java
package uk.me.jockmacmad.jstate.state;

/**
 * Interface for all state classes.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public interface IState {

    /**
     * Returns this state object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}

// State.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state in a state machine.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public class State implements IState {

    /**
     * The name of this state.
     */
    private String name;

    /**
     * Constructor for the State object
     *
     * @param name The name of this state.
     */
    public State(String name) {
        this.name = name;
    }

    /**
     * Returns the name of this state.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @return The name value
     */
    public String getName() {
        return name;
    }

    /**
     * Returns this state object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject() {
        return (java.lang.Object) this;
    }

    /**
     * Returns a string representation of the state.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @return The string representation of this state.
     */
    public String toString() {
        return name;
    }

    /**
     * Returns a hash code for this state.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @return The hash code for this state.
     */
    public int hashCode() {
        return new HashCodeBuilder(17, 37).append(name).toHashCode();
    }

    /**
     * Returns true if the given object is equal to this state.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @param obj The object to compare to this state.
     * @return True if the given object is equal to this state.
     */
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (obj == this) {
            return true;
        }
        if (obj.getClass() != getClass()) {
            return false;
        }
        State rhs = (State) obj;
        return new EqualsBuilder().append(name, rhs.name).isEquals();
    }
}

// StateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link State}.
* It contains ten unit test cases for the {@link State#toObject()} method.
*/
class StateTest {
		
	/**
	* Test case for {@link State#toObject()}.
	*/
	@Test
	void testToObject() {
		// TODO: implement test
	}
}

// Transition.java
package uk.me.jockmacmad.jstate.transition;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a transition in a state machine.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public class Transition {

    /**
     * The name of this transition.
     */
    private String name;

    /**
     * Constructor for the Transition object
     *
     * @param name The name of this transition.
     */
    public Transition(String name) {
        this.name = name;
    }

    /**
     * Returns the name of this transition.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @return The name value
     */
    public String getName() {
        return name;
    }

    /**
     * Returns a string representation of the transition.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @return The string representation of this transition.
     */
    public String toString() {
        return name;
    }

    /**
     * Returns a hash code for this transition.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @return The hash code for this transition.
     */
    public int hashCode() {
        return new HashCodeBuilder(17, 37).append(name).toHashCode();
    }

    /**
     * Returns true if the given object is equal to this transition.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @param obj The object to compare to this transition.
     * @return True if the given object is equal to this transition.
     */
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (obj == this) {
            return true;
        }
        if (obj.getClass() != getClass()) {
            return false;
        }
        Transition rhs = (Transition) obj;
        return new EqualsBuilder().append(name, rhs.name).isEquals();
    }
}

// TransitionTest.java
package uk.me.jockmacmad.jstate.transition;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
*/
class TransitionTest {
		
	/**
	* Test case for {@link Transition#Transition(String)}.
	*/
	@Test
	void testTransition() {
		// TODO: implement test
	}
}

// TransitionTable.java
package uk.me.jockmacmad.jstate.transition;

import java.util.HashMap;
import java.util.Map;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import uk.me.jockmacmad.jstate.state.EndState;
import uk.me.jockmacmad.jstate.state.IState;
import uk.me.jockmacmad.jstate.state.State;

/**
 * Class representing a transition table for a state machine.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public class TransitionTable {

"
cmpl-6woon2IbHTNO7qBs7sQxkEgBOblIn,/EvoSuiteBenchmark/scenario2/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState0.java,85.84545755386353,length,"// StartState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines staring state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the start state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * The actual method a client should call to get a
     * reference to the single instance of the StartState object.
     * Creation date: (2/20/01 11:05:10 AM)
     *
     * @return com.objectmentors.state.StartState
     */
    public static StartState getSingleton() {
        return SINGLETON;
    }
}
","// StartStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#getSingleton()} method.
*/
class StartStateTest {","// StartStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#getSingleton()} method.
*/
class StartStateTest {

	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton2() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton3() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton4() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton5() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton6() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton7() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton8() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton9() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton10() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
}

// State.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public class State implements IState {

    /**
     * The name of the state.
     */
    private String name;

    /**
     * Constructor for the State object
     *
     * @param name The name of the state.
     */
    public State(String name) {
        this.name = name;
    }

    /**
     * Returns the name of the state.
     *
     * @return The name of the state.
     */
    public String getName() {
        return name;
    }

    /**
     * Returns a string representation of the state.
     *
     * @return A string representation of the state.
     */
    public String toString() {
        return name;
    }

    /**
     * Returns a hash code value for the object.
     *
     * @return A hash code value for this object.
     */
    public int hashCode() {
        return new HashCodeBuilder(17, 37).append(name).toHashCode();
    }

    /**
     * Indicates whether some other object is ""equal to"" this one.
     *
     * @param obj The reference object with which to compare.
     * @return True if this object is the same as the obj argument; false otherwise.
     */
    public boolean equals(Object obj) {
        if (obj instanceof State == false) {
            return false;
        }
        if (this == obj) {
            return true;
        }
        State rhs = (State) obj;
        return new EqualsBuilder().append(name, rhs.name).isEquals();
    }
}

// StateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link State}.
* It contains ten unit test cases for the {@link State#State(String)} method.
*/
class StateTest {
		
	/**
	* Test case for {@link State#State(String)}.
	*
	* @since 0.1
	*/
	@Test
	void testState() {
		String name = """";
		State result = new State(name);
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State(String)}.
	*
	* @since 0.1
	*/
	@Test
	void testState2() {
		String name = """";
		State result = new State(name);
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State(String)}.
	*
	* @since 0.1
	*/
	@Test
	void testState3() {
		String name = """";
		State result = new State(name);
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State(String)}.
	*
	* @since 0.1
	*/
	@Test
	void testState4() {
		String name = """";
		State result = new State(name);
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State(String)}.
	*
	* @since 0.1
	*/
	@Test
	void testState5() {
		String name = """";
		State result = new State(name);
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State(String)}.
	*
	* @since 0.1
	*/
	@Test
	void testState6() {
		String name = """";
		State result = new State(name);
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State(String)}.
	*
	* @since 0.1
	*/
	@Test
	void testState7() {
		String name = """";
		State result = new State(name);
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State(String)}.
	*
	* @since 0.1
	*/
	@Test
	void testState8() {
		String name = """";
		State result = new State(name);"
cmpl-6woqBBFr3OlK9Ucl9E3nVlbXlhWT1,/EvoSuiteBenchmark/scenario2/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState1.java,96.27648973464966,length,"// StartState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines staring state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the start state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    /**
     * Returns this StartState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject() {
        return (java.lang.Object) this;
    }
}
","// StartStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#toObject()} method.
*/
class StartStateTest {","// StartStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#toObject()} method.
*/
class StartStateTest {

	/**
	* Test case for {@link StartState#toObject()}.
	*/
	@Test
	void testToObject() {
		StartState startState = new StartState();
		assertEquals(startState, startState.toObject());
	}
}

// State.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class State extends java.lang.Object implements IState {

    /**
     * Returns this State object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject() {
        return (java.lang.Object) this;
    }
}

// StateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link State}.
* It contains ten unit test cases for the {@link State#toObject()} method.
*/
class StateTest {
		
	/**
	* Test case for {@link State#toObject()}.
	*/
	@Test
	void testToObject() {
		State state = new State();
		assertEquals(state, state.toObject());
	}
}

// StateMachine.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StateMachine extends java.lang.Object implements IState {

    /**
     * Returns this StateMachine object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject() {
        return (java.lang.Object) this;
    }
}

// StateMachineTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StateMachine}.
* It contains ten unit test cases for the {@link StateMachine#toObject()} method.
*/
class StateMachineTest {
		
	/**
	* Test case for {@link StateMachine#toObject()}.
	*/
	@Test
	void testToObject() {
		StateMachine stateMachine = new StateMachine();
		assertEquals(stateMachine, stateMachine.toObject());
	}
}

// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class Transition extends java.lang.Object implements IState {

    /**
     * Returns this Transition object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject() {
        return (java.lang.Object) this;
    }
}

// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#toObject()} method.
*/
class TransitionTest {
		
	/**
	* Test case for {@link Transition#toObject()}.
	*/
	@Test
	void testToObject() {
		Transition transition = new Transition();
		assertEquals(transition, transition.toObject());
	}
}

// IState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Interface representing a state machines state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public interface IState {

    /**
     * Returns this IState object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}

// IStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IState}.
* It contains ten unit test cases for the {@link IState#toObject()} method.
*/
class IStateTest {
		
	/**
	* Test case for {@link IState#toObject()}.
	*/
	@Test
	void testToObject() {
		IState iState = new IState() {
			public java.lang.Object toObject() {
				return null;
			}
		};
		assertEquals(iState, iState.toObject());
	}
}

// StateMachine.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StateMachine extends java.lang.Object implements IState {

    /**
     * Returns this StateMachine object as a java.lang.Object.
     * Used during reflection.
     * Creation date: (2/26/01 10:49:49 AM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject() {
        return ("
cmpl-6workEZYnMy64wdTnOa6nB7yZsN4D,/EvoSuiteBenchmark/scenario2/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StringMatchesGuardCondition.java,68.14456844329834,,"// StringMatchesGuardCondition.java
package uk.me.jockmacmad.jstate.state;

/**
 * Insert the type's description here.
 * Creation date: (2/26/01 5:09:09 PM)
 *
 * @author: Administrator
 */
public class StringMatchesGuardCondition implements uk.me.jockmacmad.jstate.state.IGuardCondition {

    /**
     * Insert the method's description here.
     * Creation date: (2/26/01 5:09:09 PM)
     *
     * @return boolean
     * @param o java.lang.Object
     */
    public boolean evaluate(Object o) {
        boolean rc = false;
        try {
            java.util.Vector params = ((uk.me.jockmacmad.jstate.state.Event) o).getParameters();
            String str = (String) params.elementAt(0);
            if (Value.equals(str)) {
                rc = true;
            }
        } catch (ClassCastException ex) {
            ex.printStackTrace();
        }
        return rc;
    }
}
","// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains ten unit test cases for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {","// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains ten unit test cases for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {

	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: true.
	*/
	@Test
	void testEvaluate_1() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition();
		stringMatchesGuardCondition.Value = ""test"";
		Event event = new Event();
		event.addParameter(""test"");
		assertTrue(stringMatchesGuardCondition.evaluate(event));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_2() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition();
		stringMatchesGuardCondition.Value = ""test"";
		Event event = new Event();
		event.addParameter(""test1"");
		assertFalse(stringMatchesGuardCondition.evaluate(event));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_3() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition();
		stringMatchesGuardCondition.Value = ""test"";
		Event event = new Event();
		event.addParameter(""test1"");
		event.addParameter(""test2"");
		assertFalse(stringMatchesGuardCondition.evaluate(event));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_4() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition();
		stringMatchesGuardCondition.Value = ""test"";
		Event event = new Event();
		event.addParameter(""test1"");
		event.addParameter(""test2"");
		event.addParameter(""test3"");
		assertFalse(stringMatchesGuardCondition.evaluate(event));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_5() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition();
		stringMatchesGuardCondition.Value = ""test"";
		Event event = new Event();
		event.addParameter(""test1"");
		event.addParameter(""test2"");
		event.addParameter(""test3"");
		event.addParameter(""test4"");
		assertFalse(stringMatchesGuardCondition.evaluate(event));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_6() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition();
		stringMatchesGuardCondition.Value = ""test"";
		Event event = new Event();
		event.addParameter(""test1"");
		event.addParameter(""test2"");
		event.addParameter(""test3"");
		event.addParameter(""test4"");
		event.addParameter(""test5"");
		assertFalse(stringMatchesGuardCondition.evaluate(event));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_7() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition();
		stringMatchesGuardCondition.Value = ""test"";
		Event event = new Event();
		event.addParameter(""test1"");
		event.addParameter(""test2"");
		event.addParameter(""test3"");
		event.addParameter(""test4"");
		event.addParameter(""test5"");
		event.addParameter(""test6"");
		assertFalse(stringMatchesGuardCondition.evaluate(event));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_8() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition();
		stringMatchesGuardCondition.Value = ""test"";
		Event event = new Event();
		event.addParameter(""test1"");
		event.addParameter(""test2"");
		event.addParameter(""test3"");
		event.addParameter(""test4"");
		event.addParameter(""test5"");
		event.addParameter(""test6"");
		event.addParameter(""test7"");
		assertFalse(stringMatchesGuardCondition.evaluate(event));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_9() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition();
		stringMatchesGuardCondition.Value = ""test"";
		Event event = new Event();
		event.addParameter(""test1"");
		event.addParameter(""test2"");
		event.addParameter(""test3"");
		event.addParameter(""test4"");
		event.addParameter(""test5"");
		event.addParameter(""test6"");
		event.addParameter(""test7"");
		event.addParameter(""test8"");
		assertFalse(stringMatchesGuardCondition.evaluate(event));
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_10() {
		StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition();
		stringMatchesGuardCondition.Value = ""test"";
		Event event = new Event();
		event.addParameter(""test1"");
		event.addParameter(""test2"");
		event.addParameter(""test3"");
		event.addParameter(""test4"");
		event.addParameter(""test5"");
		event.addParameter(""test6"");
		event.addParameter(""test7"");
		event.addParameter(""test8"");
		event.addParameter(""test9"");
		assertFalse(stringMatchesGuardCondition.evaluate(event));
	}
	
}"
cmpl-6wosqp1CfwfL1jjZwhZe6ZcwmUlmA,/EvoSuiteBenchmark/scenario2/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition0.java,72.3024697303772,length,"// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    /**
     * Causes this Transition to fire.
     * Creation date: (14/02/01 6:21:09 PM)
     *
     * @author Don Stewart
     * @since 0.1
     * @param pCurrentState the current State
     * @param pEvent the Event to trigger
     * @return com.objectmentors.state.State
     */
    public final IState trigger(final IState pCurrentState, final Event pEvent) {
        IState retVal = pCurrentState;
        boolean passesGuards = false;
        if ((initialState.equals(pCurrentState)) && (triggerEvent.equals(pEvent))) {
            // Check if there are any guard conditions
            if (guardConditions.isEmpty()) {
                // No guards so just trigger
                passesGuards = true;
            } else {
                for (IGuardCondition ig : guardConditions) {
                    passesGuards = ig.evaluate(pEvent);
                }
            }
            if (passesGuards) {
                retVal = outcomeState;
            }
        }
        return retVal;
    }
}
","// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#trigger(IState, Event)} method.
*/
class TransitionTest {","// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#trigger(IState, Event)} method.
*/
class TransitionTest {

		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* The test case is successful if the method returns the expected state.
		*/
		@Test
		void testTrigger_1() {
				// Arrange
				IState initialState = new State(""initialState"");
				IState outcomeState = new State(""outcomeState"");
				Event triggerEvent = new Event(""triggerEvent"");
				Transition transition = new Transition(initialState, outcomeState, triggerEvent);
				
				// Act
				IState result = transition.trigger(initialState, triggerEvent);
				
				// Assert
				assertEquals(outcomeState, result);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* The test case is successful if the method returns the expected state.
		*/
		@Test
		void testTrigger_2() {
				// Arrange
				IState initialState = new State(""initialState"");
				IState outcomeState = new State(""outcomeState"");
				Event triggerEvent = new Event(""triggerEvent"");
				Transition transition = new Transition(initialState, outcomeState, triggerEvent);
				
				// Act
				IState result = transition.trigger(initialState, triggerEvent);
				
				// Assert
				assertEquals(outcomeState, result);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* The test case is successful if the method returns the expected state.
		*/
		@Test
		void testTrigger_3() {
				// Arrange
				IState initialState = new State(""initialState"");
				IState outcomeState = new State(""outcomeState"");
				Event triggerEvent = new Event(""triggerEvent"");
				Transition transition = new Transition(initialState, outcomeState, triggerEvent);
				
				// Act
				IState result = transition.trigger(initialState, triggerEvent);
				
				// Assert
				assertEquals(outcomeState, result);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* The test case is successful if the method returns the expected state.
		*/
		@Test
		void testTrigger_4() {
				// Arrange
				IState initialState = new State(""initialState"");
				IState outcomeState = new State(""outcomeState"");
				Event triggerEvent = new Event(""triggerEvent"");
				Transition transition = new Transition(initialState, outcomeState, triggerEvent);
				
				// Act
				IState result = transition.trigger(initialState, triggerEvent);
				
				// Assert
				assertEquals(outcomeState, result);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* The test case is successful if the method returns the expected state.
		*/
		@Test
		void testTrigger_5() {
				// Arrange
				IState initialState = new State(""initialState"");
				IState outcomeState = new State(""outcomeState"");
				Event triggerEvent = new Event(""triggerEvent"");
				Transition transition = new Transition(initialState, outcomeState, triggerEvent);
				
				// Act
				IState result = transition.trigger(initialState, triggerEvent);
				
				// Assert
				assertEquals(outcomeState, result);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* The test case is successful if the method returns the expected state.
		*/
		@Test
		void testTrigger_6() {
				// Arrange
				IState initialState = new State(""initialState"");
				IState outcomeState = new State(""outcomeState"");
				Event triggerEvent = new Event(""triggerEvent"");
				Transition transition = new Transition(initialState, outcomeState, triggerEvent);
				
				// Act
				IState result = transition.trigger(initialState, triggerEvent);
				
				// Assert
				assertEquals(outcomeState, result);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* The test case is successful if the method returns the expected state.
		*/
		@Test
		void testTrigger_7() {
				// Arrange
				IState initialState = new State(""initialState"");
				IState outcomeState = new State(""outcomeState"");
				Event triggerEvent = new Event(""triggerEvent"");
				Transition transition = new Transition(initialState, outcomeState, triggerEvent);
				
				// Act
				IState result = transition.trigger(initialState, triggerEvent);
				
				// Assert
				assertEquals(outcomeState, result);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* The test case is successful if the method returns the expected state.
		*/
		@Test
		void testTrigger_8() {
				// Arrange
				IState initialState = new State(""initialState"");
				IState outcomeState = new State(""outcomeState"");
				Event triggerEvent = new Event(""triggerEvent"");
				Transition transition = new Transition(initialState, outcomeState, triggerEvent);
				
				// Act
				IState result = transition.trigger(initialState, triggerEvent);
				
				// Assert
				assertEquals(outcomeState, result);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* The test case is successful if the method returns the expected state.
		*/
		@Test
		void testTrigger_9() {
				// Arrange
				IState initialState = new State(""initialState"");
				IState outcomeState = new State(""outcomeState"");
				Event triggerEvent = new Event(""triggerEvent"");
				Transition transition = new Transition(initialState, outcomeState, triggerEvent);
				
				// Act
				IState result = transition.trigger(initialState, triggerEvent);
				
				// Assert
				assertEquals(outcomeState, result);
		}
		
		/**
		* Test case for the {@link Transition#trigger(IState, Event)} method.
		* The test case is successful if the method returns the expected state.
		*/
		@Test
		void testTrigger_10() {
				// Arrange
				IState initialState = new State(""initialState"");
				IState outcomeState = new State(""outcomeState"");
				Event triggerEvent = new Event(""triggerEvent"");
				Transition transition = new Transition(initialState, outcomeState, triggerEvent);
				
				// Act
			"
cmpl-6wou0uKdCJcnG4UcmQqceMH1VTXn8,/EvoSuiteBenchmark/scenario2/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition1.java,58.06654715538025,length,"// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    /**
     * Check to evaluate if this Transition will trigger
     * given the supplied current State of the State Machine
     * and the supplied Event.
     * Creation date: (14/02/01 6:21:09 PM)
     *
     * @param pCurrentState current State of the State Machine
     * @param pEvent the supplied Event
     * @return com.objectmentors.state.State
     */
    public final boolean willTrigger(final IState pCurrentState, final Event pEvent) {
        boolean retVal = false;
        boolean passesGuards = false;
        if ((initialState.equals(pCurrentState)) && (triggerEvent.equals(pEvent))) {
            for (IGuardCondition ig : guardConditions) {
                passesGuards = ig.evaluate(pEvent);
            }
            if (passesGuards) {
                retVal = true;
            }
        }
        return retVal;
    }
}
","// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#willTrigger(IState, Event)} method.
*/
class TransitionTest {","// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#willTrigger(IState, Event)} method.
*/
class TransitionTest {

		@Test
		void testWillTrigger_1() {
				Transition transition = new Transition();
				IState currentState = new State();
				Event event = new Event();
				boolean result = transition.willTrigger(currentState, event);
				assertFalse(result);
		}
		
		@Test
		void testWillTrigger_2() {
				Transition transition = new Transition();
				IState currentState = new State();
				Event event = new Event();
				transition.initialState = currentState;
				boolean result = transition.willTrigger(currentState, event);
				assertFalse(result);
		}
		
		@Test
		void testWillTrigger_3() {
				Transition transition = new Transition();
				IState currentState = new State();
				Event event = new Event();
				transition.triggerEvent = event;
				boolean result = transition.willTrigger(currentState, event);
				assertFalse(result);
		}
		
		@Test
		void testWillTrigger_4() {
				Transition transition = new Transition();
				IState currentState = new State();
				Event event = new Event();
				transition.initialState = currentState;
				transition.triggerEvent = event;
				boolean result = transition.willTrigger(currentState, event);
				assertFalse(result);
		}
		
		@Test
		void testWillTrigger_5() {
				Transition transition = new Transition();
				IState currentState = new State();
				Event event = new Event();
				transition.initialState = currentState;
				transition.triggerEvent = event;
				transition.guardConditions.add(new GuardCondition());
				boolean result = transition.willTrigger(currentState, event);
				assertFalse(result);
		}
		
		@Test
		void testWillTrigger_6() {
				Transition transition = new Transition();
				IState currentState = new State();
				Event event = new Event();
				transition.initialState = currentState;
				transition.triggerEvent = event;
				transition.guardConditions.add(new GuardCondition());
				transition.guardConditions.add(new GuardCondition());
				boolean result = transition.willTrigger(currentState, event);
				assertFalse(result);
		}
		
		@Test
		void testWillTrigger_7() {
				Transition transition = new Transition();
				IState currentState = new State();
				Event event = new Event();
				transition.initialState = currentState;
				transition.triggerEvent = event;
				transition.guardConditions.add(new GuardCondition());
				transition.guardConditions.add(new GuardCondition());
				transition.guardConditions.add(new GuardCondition());
				boolean result = transition.willTrigger(currentState, event);
				assertFalse(result);
		}
		
		@Test
		void testWillTrigger_8() {
				Transition transition = new Transition();
				IState currentState = new State();
				Event event = new Event();
				transition.initialState = currentState;
				transition.triggerEvent = event;
				transition.guardConditions.add(new GuardCondition());
				transition.guardConditions.add(new GuardCondition());
				transition.guardConditions.add(new GuardCondition());
				transition.guardConditions.add(new GuardCondition());
				boolean result = transition.willTrigger(currentState, event);
				assertFalse(result);
		}
		
		@Test
		void testWillTrigger_9() {
				Transition transition = new Transition();
				IState currentState = new State();
				Event event = new Event();
				transition.initialState = currentState;
				transition.triggerEvent = event;
				transition.guardConditions.add(new GuardCondition());
				transition.guardConditions.add(new GuardCondition());
				transition.guardConditions.add(new GuardCondition());
				transition.guardConditions.add(new GuardCondition());
				transition.guardConditions.add(new GuardCondition());
				boolean result = transition.willTrigger(currentState, event);
				assertFalse(result);
		}
		
		@Test
		void testWillTrigger_10() {
				Transition transition = new Transition();
				IState currentState = new State();
				Event event = new Event();
				transition.initialState = currentState;
				transition.triggerEvent = event;
				transition.guardConditions.add(new GuardCondition());
				transition.guardConditions.add(new GuardCondition());
				transition.guardConditions.add(new GuardCondition());
				transition.guardConditions.add(new GuardCondition());
				transition.guardConditions.add(new GuardCondition());
				transition.guardConditions.add(new GuardCondition());
				boolean result = transition.willTrigger(currentState, event);
				assertFalse(result);
		}
}

// State.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A state that the state machine can be in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class State implements IState {

    /**
     * Check to evaluate if this State is the same as the supplied State.
     * Creation date: (14/02/01 6:21:09 PM)
     *
     * @param pState the supplied State
     * @return com.objectmentors.state.State
     */
    public final boolean equals(final IState pState) {
        return false;
    }
}

// StateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link State}.
* It contains one unit test case for the {@link State#equals(IState)} method.
*/
class StateTest {
		
		@Test
		void testEquals_1() {
				State state = new State();
				IState otherState = new State();
				boolean result = state.equals(otherState);
				assertFalse(result);
		}
}

// Event.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * An event"
