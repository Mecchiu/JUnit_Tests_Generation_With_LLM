ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6xAHn4Asdn8IrSFog134YaB46xBBf,/EvoSuiteBenchmark/scenario3/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo0.java,134.9530107975006,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public fields for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return string array of public fields
     */
    public String[] printFields();
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.
*/
class ClassInfoTest {

	/**
	 * Test case for {@link ClassInfo#printFields()} method.
	 * <p>
	 * This test case checks if the method returns the correct array of strings.
	 */
	@Test
	void testPrintFields() {
		ClassInfo ci = new ClassInfo();
		String[] fields = ci.printFields();
		assertEquals(fields[0], ""public static final int java.lang.Integer.MIN_VALUE"");
		assertEquals(fields[1], ""public static final int java.lang.Integer.MAX_VALUE"");
		assertEquals(fields[2], ""public static final Class java.lang.Integer.TYPE"");
		assertEquals(fields[3], ""public static final int java.lang.Integer.SIZE"");
		assertEquals(fields[4], ""public static final int java.lang.Integer.BYTES"");
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public fields for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return string array of public fields
     */
    public String[] printFields() {
        Field[] fields = c.getFields();
        String[] fieldStrings = new String[fields.length];
        for (int i = 0; i < fields.length; i++) {
            fieldStrings[i] = Modifier.toString(fields[i].getModifiers()) + "" "" + fields[i].getType().getName() + "" "" + fields[i].getName();
        }
        return fieldStrings;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#printFields()} method.
	 * <p>
	 * This test case checks if the method returns the correct array of strings.
	 */
	@Test
	void testPrintFields() {
		ClassInfo ci = new ClassInfo();
		String[] fields = ci.printFields();
		assertEquals(fields[0], ""public static final int java.lang.Integer.MIN_VALUE"");
		assertEquals(fields[1], ""public static final int java.lang.Integer.MAX_VALUE"");
		assertEquals(fields[2], ""public static final Class java.lang.Integer.TYPE"");
		assertEquals(fields[3], ""public static final int java.lang.Integer.SIZE"");
		assertEquals(fields[4], ""public static final int java.lang.Integer.BYTES"");
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public fields for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return string array of public fields
     */
    public String[] printFields() {
        Field[] fields = c.getFields();
        String[] fieldStrings = new String[fields.length];
        for (int i = 0; i < fields.length; i++) {
            fieldStrings[i] = Modifier.toString(fields[i].getModifiers()) + "" "" + fields[i].getType().getName() + "" "" + fields[i].getName();
        }
        return fieldStrings;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#printFields()} method.
	 * <p>
	 * This test case checks if the method returns the correct array of strings.
	 */
	@Test
	void testPrintFields() {
		ClassInfo ci = new ClassInfo();
		String[] fields = ci.printFields();
		assertEquals(fields[0], ""public static final int java.lang.Integer.MIN_VALUE"");
		assertEquals(fields[1], ""public static final int java.lang.Integer.MAX_VALUE"");
		assertEquals(fields[2], ""public static final Class java.lang.Integer.TYPE"");
		assertEquals(fields[3], ""public static final int java.lang.Integer.SIZE"");
		assertEquals(fields[4], ""public static final int java.lang.Integer.BYTES"");
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public fields for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return string array of public fields
     */
    public String[] printFields() {
        Field[] fields = c.getFields();
        String[] fieldStrings = new String[fields.length];
        for (int i = 0; i < fields.length; i++) {
            fieldStrings[i] = Modifier.toString(fields[i].getModifiers()) + "" "" + fields[i].getType().getName() + "" "" + fields[i].getName();
        }
        return fieldStrings;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#printFields()} method.
	 * <p>
	 * This test case checks if the method returns the correct array of strings.
	 */
	@Test
	void testPrintFields() {
		ClassInfo ci = new ClassInfo();
		String[] fields = ci.printFields();
		assertEquals(fields[0], ""public static final int java.lang.Integer.MIN_VALUE"");
		assertEquals(fields[1], ""public static final int java.lang.Integer.MAX_VALUE"");
		assertEquals(fields[2], ""public static final Class java.lang.Integer.TYPE"");
		assertEquals(fields[3], ""public static final int java.lang.Integer.SIZE"");
		assertEquals(fields[4], ""public static final int java.lang.Integer.BYTES"");
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public fields for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return string array of public fields
     */
    public String[] printFields() {
        Field[] fields = c.getFields();
        String[] fieldStrings = new String[fields.length];
        for (int i = 0; i < fields.length; i++) {
            fieldStrings[i] = Modifier.toString(fields[i].getModifiers()) + "" "" + fields[i].getType().getName() + "" "" + fields[i].getName();
        }
        return fieldStrings;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#printFields()} method.
	 * <p>
	 * This test case checks if the method returns the correct array of strings.
	 */
	@Test
	void testPrintFields() {
		ClassInfo ci = new ClassInfo();
		String[] fields = ci.printFields();
		assertEquals(fields[0], ""public static final int java.lang.Integer.MIN_VALUE"");
		assertEquals(fields[1], ""public static final int java.lang.Integer.MAX_VALUE"");
		assertEquals(fields[2], ""public static final Class java.lang.Integer.TYPE"");
		assertEquals(fields[3], ""public static final int java.lang.Integer.SIZE"");
		assertEquals(fields[4], ""public static final int java.lang.Integer.BYTES"");
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public fields for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return string array of public fields
     */
    public String[] printFields() {
        Field[] fields = c.getFields();
        String[] fieldStrings = new String[fields.length];
        for (int i = 0; i < fields.length; i++) {
            fieldStrings[i] = Modifier.toString(fields[i].getModifiers()) + "" "" + fields[i].getType().getName() + "" "" + fields[i].getName();
        }
        return fieldStrings;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#printFields()} method.
	 * <p>
	 * This test case checks if the method returns the correct array of strings.
	 */
	@Test
	void testPrintFields() {
		ClassInfo ci = new ClassInfo();
		String[] fields = ci.printFields();
		assertEquals(fields[0], ""public static final int java.lang.Integer.MIN_VALUE"");
		assertEquals(fields[1], ""public static final int java.lang.Integer.MAX_VALUE"");
		assertEquals(fields[2], ""public static final Class java.lang.Integer.TYPE"");
		assertEquals(fields[3], ""public static final int java.lang.Integer.SIZE"");
		assertEquals(fields[4], ""public static final int java.lang.Integer.BYTES"");
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public fields for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return string array of public fields
     */
    public String[] printFields() {
        Field[] fields = c.getFields();
        String[] fieldStrings = new String[fields.length];
        for (int i = 0; i < fields.length; i++) {
            fieldStrings[i] = Modifier.toString"
cmpl-6xAJxUppPd1rMnLcQGPsx2v7H6jaE,/EvoSuiteBenchmark/scenario3/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo1.java,117.4057183265686,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return string array of public methods
     */
    public String[] printMethods();
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfoTest {

	@Test
	void testPrintMethods() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.printMethods();
		assertEquals(methods[0], ""public void com.jstevh.viewer.ClassInfo.printMethods()"");
		assertEquals(methods[1], ""public void com.jstevh.viewer.ClassInfo.printFields()"");
		assertEquals(methods[2], ""public void com.jstevh.viewer.ClassInfo.printConstructors()"");
		assertEquals(methods[3], ""public void com.jstevh.viewer.ClassInfo.printInterfaces()"");
		assertEquals(methods[4], ""public void com.jstevh.viewer.ClassInfo.printSuperclass()"");
		assertEquals(methods[5], ""public void com.jstevh.viewer.ClassInfo.printClassName()"");
		assertEquals(methods[6], ""public void com.jstevh.viewer.ClassInfo.printClassModifiers()"");
		assertEquals(methods[7], ""public void com.jstevh.viewer.ClassInfo.printClassPackage()"");
		assertEquals(methods[8], ""public void com.jstevh.viewer.ClassInfo.printClass()"");
		assertEquals(methods[9], ""public void com.jstevh.viewer.ClassInfo.printClassInfo()"");
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return string array of public methods
     */
    public String[] printMethods();
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfoTest {
		
	@Test
	void testPrintMethods() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.printMethods();
		assertEquals(methods[0], ""public void com.jstevh.viewer.ClassInfo.printMethods()"");
		assertEquals(methods[1], ""public void com.jstevh.viewer.ClassInfo.printFields()"");
		assertEquals(methods[2], ""public void com.jstevh.viewer.ClassInfo.printConstructors()"");
		assertEquals(methods[3], ""public void com.jstevh.viewer.ClassInfo.printInterfaces()"");
		assertEquals(methods[4], ""public void com.jstevh.viewer.ClassInfo.printSuperclass()"");
		assertEquals(methods[5], ""public void com.jstevh.viewer.ClassInfo.printClassName()"");
		assertEquals(methods[6], ""public void com.jstevh.viewer.ClassInfo.printClassModifiers()"");
		assertEquals(methods[7], ""public void com.jstevh.viewer.ClassInfo.printClassPackage()"");
		assertEquals(methods[8], ""public void com.jstevh.viewer.ClassInfo.printClass()"");
		assertEquals(methods[9], ""public void com.jstevh.viewer.ClassInfo.printClassInfo()"");
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return string array of public methods
     */
    public String[] printMethods();
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfoTest {
		
	@Test
	void testPrintMethods() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.printMethods();
		assertEquals(methods[0], ""public void com.jstevh.viewer.ClassInfo.printMethods()"");
		assertEquals(methods[1], ""public void com.jstevh.viewer.ClassInfo.printFields()"");
		assertEquals(methods[2], ""public void com.jstevh.viewer.ClassInfo.printConstructors()"");
		assertEquals(methods[3], ""public void com.jstevh.viewer.ClassInfo.printInterfaces()"");
		assertEquals(methods[4], ""public void com.jstevh.viewer.ClassInfo.printSuperclass()"");
		assertEquals(methods[5], ""public void com.jstevh.viewer.ClassInfo.printClassName()"");
		assertEquals(methods[6], ""public void com.jstevh.viewer.ClassInfo.printClassModifiers()"");
		assertEquals(methods[7], ""public void com.jstevh.viewer.ClassInfo.printClassPackage()"");
		assertEquals(methods[8], ""public void com.jstevh.viewer.ClassInfo.printClass()"");
		assertEquals(methods[9], ""public void com.jstevh.viewer.ClassInfo.printClassInfo()"");
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return string array of public methods
     */
    public String[] printMethods();
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfoTest {
		
	@Test
	void testPrintMethods() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.printMethods();
		assertEquals(methods[0], ""public void com.jstevh.viewer.ClassInfo.printMethods()"");
		assertEquals(methods[1], ""public void com.jstevh.viewer.ClassInfo.printFields()"");
		assertEquals(methods[2], ""public void com.jstevh.viewer.ClassInfo.printConstructors()"");
		assertEquals(methods[3], ""public void com.jstevh.viewer.ClassInfo.printInterfaces()"");
		assertEquals(methods[4], ""public void com.jstevh.viewer.ClassInfo.printSuperclass()"");
		assertEquals(methods[5], ""public void com.jstevh.viewer.ClassInfo.printClassName()"");
		assertEquals(methods[6], ""public void com.jstevh.viewer.ClassInfo.printClassModifiers()"");
		assertEquals(methods[7], ""public void com.jstevh.viewer.ClassInfo.printClassPackage()"");
		assertEquals(methods[8], ""public void com.jstevh.viewer.ClassInfo.printClass()"");
		assertEquals(methods[9], ""public void com.jstevh.viewer.ClassInfo.printClassInfo()"");
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return string array of public methods
     */
    public String[] printMethods();
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfoTest {
		
	@Test
	void testPrintMethods() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.printMethods();
		assertEquals(methods[0], ""public void com.jstevh.viewer.ClassInfo.printMethods()"");
		assertEquals(methods[1], ""public void com.jstevh.viewer.ClassInfo.printFields()"");
		assertEquals(methods[2], ""public void com.jstevh.viewer.ClassInfo.printConstructors()"");
		assertEquals(methods[3], ""public void com.jstevh.viewer.ClassInfo.printInterfaces()"");
		assertEquals(methods[4], ""public void com.jstevh.viewer.ClassInfo.printSuperclass()"");
		assertEquals(methods[5], ""public void com.jstevh.viewer.ClassInfo.printClassName()"");
		assertEquals(methods[6], ""public void com.jstevh.viewer.ClassInfo.printClassModifiers()"");
		assertEquals(methods[7], ""public void com.jstevh.viewer.ClassInfo.printClassPackage()"");
		assertEquals(methods[8], ""public void com.jstevh.viewer.ClassInfo.printClass()"");
		assertEquals(methods[9], ""public void com.jstevh.viewer.ClassInfo.printClassInfo()"");
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public methods for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @return string array of public methods
     */
    public String[] printMethods();
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.
*/
class ClassInfoTest {
		
	@Test
	void testPrintMethods() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.printMethods();
		assertEquals(methods[0], ""public void com.jstevh.viewer.ClassInfo.printMethods()"");
		assertEquals(methods[1], ""public void com.jstevh.viewer.ClassInfo.printFields()"");
		assertEquals(methods[2], ""public void com.jstevh.viewer.ClassInfo.printConstructors()"");
		assertEquals(methods[3], ""public void com.jstevh.viewer.ClassInfo.printInterfaces()"");
		assertEquals(methods[4], ""public void com.jstevh.viewer.ClassInfo.printSuperclass()"");
		assertEquals(methods[5], ""public void com.jstevh.viewer.ClassInfo.printClassName()"");
		assertEquals(methods[6], ""public void com.jstevh.viewer.ClassInfo.printClassModifiers()"");
		assertEquals("
cmpl-6xALr5mjzOlVP0nWzRQ9Pq0iRS1s6,/EvoSuiteBenchmark/scenario3/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo2.java,122.4738998413086,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public methods for
     * the class excluding inherited methods. The data is pulled from
     * the c private Class object.
     * <p>
     * This method always returns immediately.
     *
     * @param param (not currently implemented) selects whether inherited
     *               objects are returned
     * @return string array of public methods
     */
    public String[] printMethods(int param);
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.
*/
class ClassInfoTest {

	/**
	* Test case for {@link ClassInfo#printMethods(int)} method.
	* It tests the method with the following parameters:
	* <ul>
	* <li>param = 0</li>
	* </ul>
	* <p>
	* The expected result is an array of strings containing the public methods of the class.
	*/
	@Test
	void testPrintMethods_0() {
		// Arrange
		ClassInfo classInfo = new ClassInfo();
		int param = 0;
		String[] expected = new String[] {
			""public void com.jstevh.viewer.ClassInfo.printMethods(int)"",
			""public void com.jstevh.viewer.ClassInfo.printFields(int)"",
			""public void com.jstevh.viewer.ClassInfo.printConstructors(int)"",
			""public void com.jstevh.viewer.ClassInfo.printInterfaces(int)"",
			""public void com.jstevh.viewer.ClassInfo.printSuperclass(int)"",
			""public void com.jstevh.viewer.ClassInfo.printClass(int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo()"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Object,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.String,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo.printClassInfo(java.lang.Class,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int)"",
			""public void com.jstevh.viewer.ClassInfo."
cmpl-6xANpu1i39tFbT1hzHhKuZWaPjgbE,/EvoSuiteBenchmark/scenario3/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo3.java,129.15466475486755,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public constructors for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return string array of public constructors
     */
    public String[] printConstructors();
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfoTest {

		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with a class that has no constructors.
		*/
		@Test
		public void testPrintConstructors1() {
				ClassInfo ci = new ClassInfo(String.class);
				String[] expected = new String[0];
				String[] actual = ci.printConstructors();
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with a class that has one constructor.
		*/
		@Test
		public void testPrintConstructors2() {
				ClassInfo ci = new ClassInfo(JFrame.class);
				String[] expected = new String[1];
				expected[0] = ""public JFrame()"";
				String[] actual = ci.printConstructors();
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with a class that has two constructors.
		*/
		@Test
		public void testPrintConstructors3() {
				ClassInfo ci = new ClassInfo(JButton.class);
				String[] expected = new String[2];
				expected[0] = ""public JButton()"";
				expected[1] = ""public JButton(java.lang.String)"";
				String[] actual = ci.printConstructors();
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with a class that has three constructors.
		*/
		@Test
		public void testPrintConstructors4() {
				ClassInfo ci = new ClassInfo(JTextField.class);
				String[] expected = new String[3];
				expected[0] = ""public JTextField()"";
				expected[1] = ""public JTextField(java.lang.String)"";
				expected[2] = ""public JTextField(int)"";
				String[] actual = ci.printConstructors();
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with a class that has four constructors.
		*/
		@Test
		public void testPrintConstructors5() {
				ClassInfo ci = new ClassInfo(JLabel.class);
				String[] expected = new String[4];
				expected[0] = ""public JLabel()"";
				expected[1] = ""public JLabel(java.lang.String)"";
				expected[2] = ""public JLabel(java.lang.String,int)"";
				expected[3] = ""public JLabel(javax.swing.Icon)"";
				String[] actual = ci.printConstructors();
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with a class that has five constructors.
		*/
		@Test
		public void testPrintConstructors6() {
				ClassInfo ci = new ClassInfo(JTextArea.class);
				String[] expected = new String[5];
				expected[0] = ""public JTextArea()"";
				expected[1] = ""public JTextArea(java.lang.String)"";
				expected[2] = ""public JTextArea(int,int)"";
				expected[3] = ""public JTextArea(java.lang.String,int,int)"";
				expected[4] = ""public JTextArea(javax.swing.text.Document)"";
				String[] actual = ci.printConstructors();
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with a class that has six constructors.
		*/
		@Test
		public void testPrintConstructors7() {
				ClassInfo ci = new ClassInfo(JList.class);
				String[] expected = new String[6];
				expected[0] = ""public JList()"";
				expected[1] = ""public JList(java.lang.Object[])"";
				expected[2] = ""public JList(java.util.Vector)"";
				expected[3] = ""public JList(javax.swing.ListModel)"";
				expected[4] = ""public JList(javax.swing.ListSelectionModel)"";
				expected[5] = ""public JList(javax.swing.ListDataModel)"";
				String[] actual = ci.printConstructors();
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with a class that has seven constructors.
		*/
		@Test
		public void testPrintConstructors8() {
				ClassInfo ci = new ClassInfo(JComboBox.class);
				String[] expected = new String[7];
				expected[0] = ""public JComboBox()"";
				expected[1] = ""public JComboBox(java.lang.Object[])"";
				expected[2] = ""public JComboBox(java.util.Vector)"";
				expected[3] = ""public JComboBox(javax.swing.ComboBoxModel)"";
				expected[4] = ""public JComboBox(javax.swing.ComboBoxModel,javax.swing.ComboBoxEditor)"";
				expected[5] = ""public JComboBox(javax.swing.ComboBoxModel,javax.swing.ComboBoxEditor,javax.swing.ListCellRenderer)"";
				expected[6] = ""public JComboBox(javax.swing.ComboBoxModel,javax.swing.ComboBoxEditor,javax.swing.ListCellRenderer,javax.swing.ListCellRenderer)"";
				String[] actual = ci.printConstructors();
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with a class that has eight constructors.
		*/
		@Test
		public void testPrintConstructors9() {
				ClassInfo ci = new ClassInfo(JCheckBox.class);
				String[] expected = new String[8];
				expected[0] = ""public JCheckBox()"";
				expected[1] = ""public JCheckBox(java.lang.String)"";
				expected[2] = ""public JCheckBox(java.lang.String,boolean)"";
				expected[3] = ""public JCheckBox(java.lang.String,javax.swing.Icon)"";
				expected[4] = ""public JCheckBox(java.lang.String,javax.swing.Icon,boolean)"";
				expected[5] = ""public JCheckBox(javax.swing.Action)"";
				expected[6] = ""public JCheckBox(javax.swing.Icon)"";
				expected[7] = ""public JCheckBox(javax.swing.Icon,boolean)"";
				String[] actual = ci.printConstructors();
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with a class that has nine constructors.
		*/
		@Test
		public void testPrintConstructors10() {
				ClassInfo ci = new ClassInfo(JRadioButton.class);
				String[] expected = new String[9];
				expected[0] = ""public JRadioButton()"";
				expected[1] = ""public JRadioButton(java.lang.String)"";
				expected[2] = ""public JRadioButton(java.lang.String,boolean)"";
				expected[3] = ""public JRadioButton(java.lang.String,javax.swing.Icon)"";
				expected[4] = ""public JRadioButton(java.lang.String,javax.swing.Icon,boolean)"";
				expected[5] = ""public JRadioButton(javax.swing.Action)"";
				expected[6] = ""public JRadioButton(javax.swing.Icon)"";
				expected[7] = ""public JRadioButton(javax.swing.Icon,boolean)"";
				expected[8] = ""public JRadioButton(javax.swing.Icon,boolean,boolean)"";
				String[] actual = ci.printConstructors();
				assertArrayEquals(expected, actual);
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the public constructors for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return string array of public constructors
     */
    public String[] printConstructors() {
        Constructor[] constructors = c.getConstructors();
        return getData(constructors);
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.
*/
class ClassInfoTest {
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with a class that has no constructors.
		*/
		@Test
		public void testPrintConstructors1() {
				ClassInfo ci = new ClassInfo(String.class);
				String[] expected = new String[0];
				String[] actual = ci.printConstructors();
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with a class that has one constructor.
		*/
		@Test
		public void testPrintConstructors2() {
				ClassInfo ci = new ClassInfo(JFrame.class);
				String[] expected = new String[1];
				expected[0] = ""public JFrame()"";
				String[] actual = ci.printConstructors();
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with a class that has two constructors.
		*/
		@Test
		public void testPrintConstructors3() {
				ClassInfo ci = new ClassInfo(JButton.class);
				String[] expected = new String[2];
				expected[0] = ""public JButton()"";
				expected[1] = ""public JButton(java.lang.String)"";
				String[] actual = ci.printConstructors();
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with a class that has three constructors.
		*/
		@Test
		public void testPrintConstructors4() {
				ClassInfo ci = new ClassInfo(JTextField.class);
				String[] expected = new String[3];
				expected[0] = ""public JTextField()"";
				expected[1] = ""public JTextField(java.lang.String)"";
				expected[2] = ""public JTextField(int)"";
				String[] actual = ci.printConstructors();
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with a class that has four constructors.
		*/
		@Test
		public void testPrintConstructors5() {
				ClassInfo ci = new ClassInfo(JLabel.class);
				String[] expected = new String[4];
				expected[0] = ""public JLabel()"";
				expected[1] = ""public JLabel(java.lang.String)"";
				expected[2] = ""public JLabel(java.lang.String,int)"";
				expected[3] = ""public JLabel(javax.swing.Icon)"";
				String[] actual = ci.printConstructors();
				assertArrayEquals(expected, actual);
		}
		
		/**
		* Test case for {@link ClassInfo#printConstructors()} method.
		* It tests the method with a class that has five constructors.
		*/
		@Test
		public void testPrintConstructors6() {
				ClassInfo ci = new ClassInfo(JTextArea.class);
				String[] expected = new String[5];
				expected[0] = ""public JTextArea()"";
				expected[1] = ""public JTextArea(java.lang.String)"";
				expected[2] = ""public JTextArea(int,int)"";
				expected[3] = ""public JTextArea(java.lang.String,int,int)"";
				expected[4] = ""public JTextArea(javax.swing.text.Document)"";
				String[] actual = ci.printConstructors();
				assertArrayEquals(expected, actual);
"
cmpl-6xAPvytI9gWdaO4Su5gEFl6ZLPhuh,/EvoSuiteBenchmark/scenario3/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo4.java,124.60412955284119,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the interfaces for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return string array of interfaces
     */
    public String[] printInterfaces();
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printInterfaces()} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printInterfaces()} method.
*/
class ClassInfoTest {

		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has no interfaces.
		*/
		@Test
		public void testPrintInterfaces1() {
				ClassInfo ci = new ClassInfo(String.class);
				String[] interfaces = ci.printInterfaces();
				assertEquals(0, interfaces.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has one interface.
		*/
		@Test
		public void testPrintInterfaces2() {
				ClassInfo ci = new ClassInfo(JFrame.class);
				String[] interfaces = ci.printInterfaces();
				assertEquals(1, interfaces.length);
				assertEquals(""java.awt.Window"", interfaces[0]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has two interfaces.
		*/
		@Test
		public void testPrintInterfaces3() {
				ClassInfo ci = new ClassInfo(JButton.class);
				String[] interfaces = ci.printInterfaces();
				assertEquals(2, interfaces.length);
				assertEquals(""java.awt.image.ImageObserver"", interfaces[0]);
				assertEquals(""java.awt.MenuContainer"", interfaces[1]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has three interfaces.
		*/
		@Test
		public void testPrintInterfaces4() {
				ClassInfo ci = new ClassInfo(JTextField.class);
				String[] interfaces = ci.printInterfaces();
				assertEquals(3, interfaces.length);
				assertEquals(""java.awt.image.ImageObserver"", interfaces[0]);
				assertEquals(""java.awt.MenuContainer"", interfaces[1]);
				assertEquals(""javax.accessibility.Accessible"", interfaces[2]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has four interfaces.
		*/
		@Test
		public void testPrintInterfaces5() {
				ClassInfo ci = new ClassInfo(JTextArea.class);
				String[] interfaces = ci.printInterfaces();
				assertEquals(4, interfaces.length);
				assertEquals(""java.awt.image.ImageObserver"", interfaces[0]);
				assertEquals(""java.awt.MenuContainer"", interfaces[1]);
				assertEquals(""javax.accessibility.Accessible"", interfaces[2]);
				assertEquals(""javax.swing.Scrollable"", interfaces[3]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has five interfaces.
		*/
		@Test
		public void testPrintInterfaces6() {
				ClassInfo ci = new ClassInfo(JList.class);
				String[] interfaces = ci.printInterfaces();
				assertEquals(5, interfaces.length);
				assertEquals(""java.awt.image.ImageObserver"", interfaces[0]);
				assertEquals(""java.awt.MenuContainer"", interfaces[1]);
				assertEquals(""javax.accessibility.Accessible"", interfaces[2]);
				assertEquals(""javax.swing.Scrollable"", interfaces[3]);
				assertEquals(""javax.swing.ItemSelectable"", interfaces[4]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has six interfaces.
		*/
		@Test
		public void testPrintInterfaces7() {
				ClassInfo ci = new ClassInfo(JComboBox.class);
				String[] interfaces = ci.printInterfaces();
				assertEquals(6, interfaces.length);
				assertEquals(""java.awt.image.ImageObserver"", interfaces[0]);
				assertEquals(""java.awt.MenuContainer"", interfaces[1]);
				assertEquals(""javax.accessibility.Accessible"", interfaces[2]);
				assertEquals(""javax.swing.Scrollable"", interfaces[3]);
				assertEquals(""javax.swing.ItemSelectable"", interfaces[4]);
				assertEquals(""javax.swing.ComboBoxEditor"", interfaces[5]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has seven interfaces.
		*/
		@Test
		public void testPrintInterfaces8() {
				ClassInfo ci = new ClassInfo(JCheckBox.class);
				String[] interfaces = ci.printInterfaces();
				assertEquals(7, interfaces.length);
				assertEquals(""java.awt.image.ImageObserver"", interfaces[0]);
				assertEquals(""java.awt.MenuContainer"", interfaces[1]);
				assertEquals(""javax.accessibility.Accessible"", interfaces[2]);
				assertEquals(""javax.swing.Scrollable"", interfaces[3]);
				assertEquals(""javax.swing.ItemSelectable"", interfaces[4]);
				assertEquals(""javax.swing.ComboBoxEditor"", interfaces[5]);
				assertEquals(""javax.swing.SwingConstants"", interfaces[6]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has eight interfaces.
		*/
		@Test
		public void testPrintInterfaces9() {
				ClassInfo ci = new ClassInfo(JRadioButton.class);
				String[] interfaces = ci.printInterfaces();
				assertEquals(8, interfaces.length);
				assertEquals(""java.awt.image.ImageObserver"", interfaces[0]);
				assertEquals(""java.awt.MenuContainer"", interfaces[1]);
				assertEquals(""javax.accessibility.Accessible"", interfaces[2]);
				assertEquals(""javax.swing.Scrollable"", interfaces[3]);
				assertEquals(""javax.swing.ItemSelectable"", interfaces[4]);
				assertEquals(""javax.swing.ComboBoxEditor"", interfaces[5]);
				assertEquals(""javax.swing.SwingConstants"", interfaces[6]);
				assertEquals(""javax.swing.Action"", interfaces[7]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has nine interfaces.
		*/
		@Test
		public void testPrintInterfaces10() {
				ClassInfo ci = new ClassInfo(JTabbedPane.class);
				String[] interfaces = ci.printInterfaces();
				assertEquals(9, interfaces.length);
				assertEquals(""java.awt.image.ImageObserver"", interfaces[0]);
				assertEquals(""java.awt.MenuContainer"", interfaces[1]);
				assertEquals(""javax.accessibility.Accessible"", interfaces[2]);
				assertEquals(""javax.swing.Scrollable"", interfaces[3]);
				assertEquals(""javax.swing.ItemSelectable"", interfaces[4]);
				assertEquals(""javax.swing.ComboBoxEditor"", interfaces[5]);
				assertEquals(""javax.swing.SwingConstants"", interfaces[6]);
				assertEquals(""javax.swing.Action"", interfaces[7]);
				assertEquals(""javax.swing.TransferHandler.HasGetTransferHandler"", interfaces[8]);
		}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Returns an array of strings that contain the interfaces for
     * the class. The data is pulled from the c private Class object.
     * <p>
     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.
     *
     * @return string array of interfaces
     */
    public String[] printInterfaces() {
        Class[] interfaces = c.getInterfaces();
        String[] data = getData(interfaces);
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#printInterfaces()} method.
*/
class ClassInfoTest {
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has no interfaces.
		*/
		@Test
		public void testPrintInterfaces1() {
				ClassInfo ci = new ClassInfo(String.class);
				String[] interfaces = ci.printInterfaces();
				assertEquals(0, interfaces.length);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has one interface.
		*/
		@Test
		public void testPrintInterfaces2() {
				ClassInfo ci = new ClassInfo(JFrame.class);
				String[] interfaces = ci.printInterfaces();
				assertEquals(1, interfaces.length);
				assertEquals(""java.awt.Window"", interfaces[0]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has two interfaces.
		*/
		@Test
		public void testPrintInterfaces3() {
				ClassInfo ci = new ClassInfo(JButton.class);
				String[] interfaces = ci.printInterfaces();
				assertEquals(2, interfaces.length);
				assertEquals(""java.awt.image.ImageObserver"", interfaces[0]);
				assertEquals(""java.awt.MenuContainer"", interfaces[1]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has three interfaces.
		*/
		@Test
		public void testPrintInterfaces4() {
				ClassInfo ci = new ClassInfo(JTextField.class);
				String[] interfaces = ci.printInterfaces();
				assertEquals(3, interfaces.length);
				assertEquals(""java.awt.image.ImageObserver"", interfaces[0]);
				assertEquals(""java.awt.MenuContainer"", interfaces[1]);
				assertEquals(""javax.accessibility.Accessible"", interfaces[2]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has four interfaces.
		*/
		@Test
		public void testPrintInterfaces5() {
				ClassInfo ci = new ClassInfo(JTextArea.class);
				String[] interfaces = ci.printInterfaces();
				assertEquals(4, interfaces.length);
				assertEquals(""java.awt.image.ImageObserver"", interfaces[0]);
				assertEquals(""java.awt.MenuContainer"", interfaces[1]);
				assertEquals(""javax.accessibility.Accessible"", interfaces[2]);
				assertEquals(""javax.swing.Scrollable"", interfaces[3]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has five interfaces.
		*/
		@Test
		public void testPrintInterfaces6() {
				ClassInfo ci = new ClassInfo(JList.class);
				String[] interfaces = ci.printInterfaces();
				assertEquals(5, interfaces.length);
				assertEquals(""java.awt.image.ImageObserver"", interfaces[0]);
				assertEquals(""java.awt.MenuContainer"", interfaces[1]);
				assertEquals(""javax.accessibility.Accessible"", interfaces[2]);
				assertEquals(""javax.swing.Scrollable"", interfaces[3]);
				assertEquals(""javax.swing.ItemSelectable"", interfaces[4]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has six interfaces.
		*/
		@Test
		public void testPrintInterfaces7() {
				ClassInfo ci = new ClassInfo(JComboBox.class);
				String[] interfaces = ci.printInterfaces();
				assertEquals(6, interfaces.length);
				assertEquals(""java.awt.image.ImageObserver"", interfaces[0]);
				assertEquals(""java.awt.MenuContainer"", interfaces[1]);
				assertEquals(""javax.accessibility.Accessible"", interfaces[2]);
				assertEquals(""javax.swing.Scrollable"", interfaces[3]);
				assertEquals(""javax.swing.ItemSelectable"", interfaces[4]);
				assertEquals(""javax.swing.ComboBoxEditor"", interfaces[5]);
		}
		
		/**
		* Test case for {@link ClassInfo#printInterfaces()} method.
		* It tests the method with a class that has seven interfaces.
		*/
		@Test
		public void testPrintInterfaces8() {"
cmpl-6xARvHwzUEh5a4wf40JfgBEOZW8Dl,/EvoSuiteBenchmark/scenario3/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo5.java,122.48076057434082,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Takes an array of Member objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param m array of Member objects
     * @return string array of names
     */
    public static String[] getData(Member[] m);
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {

	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns the correct array of names.
	 */
	@Test
	void testGetData() {
		Member[] m = new Member[3];
		m[0] = new Constructor<String>(""String"");
		m[1] = new Method(""method"");
		m[2] = new Field(""field"");
		String[] expected = {""String"", ""method"", ""field""};
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns the correct array of names.
	 */
	@Test
	void testGetData() {
		Member[] m = new Member[3];
		m[0] = new Constructor<String>(""String"");
		m[1] = new Method(""method"");
		m[2] = new Field(""field"");
		String[] expected = {""String"", ""method"", ""field""};
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns the correct array of names.
	 */
	@Test
	void testGetData() {
		Member[] m = new Member[3];
		m[0] = new Constructor<String>(""String"");
		m[1] = new Method(""method"");
		m[2] = new Field(""field"");
		String[] expected = {""String"", ""method"", ""field""};
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns the correct array of names.
	 */
	@Test
	void testGetData() {
		Member[] m = new Member[3];
		m[0] = new Constructor<String>(""String"");
		m[1] = new Method(""method"");
		m[2] = new Field(""field"");
		String[] expected = {""String"", ""method"", ""field""};
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns the correct array of names.
	 */
	@Test
	void testGetData() {
		Member[] m = new Member[3];
		m[0] = new Constructor<String>(""String"");
		m[1] = new Method(""method"");
		m[2] = new Field(""field"");
		String[] expected = {""String"", ""method"", ""field""};
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns the correct array of names.
	 */
	@Test
	void testGetData() {
		Member[] m = new Member[3];
		m[0] = new Constructor<String>(""String"");
		m[1] = new Method(""method"");
		m[2] = new Field(""field"");
		String[] expected = {""String"", ""method"", ""field""};
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns the correct array of names.
	 */
	@Test
	void testGetData() {
		Member[] m = new Member[3];
		m[0] = new Constructor<String>(""String"");
		m[1] = new Method(""method"");
		m[2] = new Field(""field"");
		String[] expected = {""String"", ""method"", ""field""};
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns the correct array of names.
	 */
	@Test
	void testGetData() {
		Member[] m = new Member[3];
		m[0] = new Constructor<String>(""String"");
		m[1] = new Method(""method"");
		m[2] = new Field(""field"");
		String[] expected = {""String"", ""method"", ""field""};
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns the correct array of names.
	 */
	@Test
	void testGetData() {
		Member[] m = new Member[3];
		m[0] = new Constructor<String>(""String"");
		m[1] = new Method(""method"");
		m[2] = new Field(""field"");
		String[] expected = {""String"", ""method"", ""field""};
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns the correct array of names.
	 */
	@Test
	void testGetData() {
		Member[] m = new Member[3];
		m[0] = new Constructor<String>(""String"");
		m[1] = new Method(""method"");
		m[2] = new Field(""field"");
		String[] expected = {""String"", ""method"", ""field""};
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns the correct array of names.
	 */
	@Test
	void testGetData() {
		Member[] m = new Member[3];
		m[0] = new Constructor<String>(""String"");
		m[1] = new Method(""method"");
		m[2] = new Field(""field"");
		String[] expected = {""String"", ""method"", ""field""};
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns the correct array of names.
	 */
	@Test
	void testGetData() {
		Member[] m = new Member[3];
		m[0] = new Constructor<String>(""String"");
		m[1] = new Method(""method"");
		m[2] = new Field(""field"");
		String[] expected = {""String"", ""method"", ""field""};
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Member[])} method.
	 * <p>
	 * This test case checks if the method returns the correct array of names.
	 */
	@Test
	void testGetData() {
		Member[] m = new Member[3];
		m[0] = new Constructor<String>(""String"");
		m[1] = new"
cmpl-6xATuVRHXRRqElcyZ36H9UcXxX2X0,/EvoSuiteBenchmark/scenario3/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo6.java,79.52994680404663,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Takes an array of Class objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param m array of Class objects
     * @return string array of names
     */
    public static String[] getData(Class[] m);
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.
*/
class ClassInfoTest {

	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case checks if the method returns the correct data.
	 */
	@Test
	void testGetData() {
		Class[] m = new Class[] {
			String.class,
			Integer.class,
			Double.class,
			Boolean.class,
			Character.class,
			Byte.class,
			Short.class,
			Long.class,
			Float.class,
			Void.class
		};
		String[] expected = new String[] {
			""class java.lang.String"",
			""class java.lang.Integer"",
			""class java.lang.Double"",
			""class java.lang.Boolean"",
			""class java.lang.Character"",
			""class java.lang.Byte"",
			""class java.lang.Short"",
			""class java.lang.Long"",
			""class java.lang.Float"",
			""class java.lang.Void""
		};
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Takes an array of Class objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param m array of Class objects
     * @return string array of names
     */
    public static String[] getData(Class[] m) {
        String[] data = new String[m.length];
        for (int i = 0; i < m.length; i++) {
            data[i] = m[i].toString();
        }
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case checks if the method returns the correct data.
	 */
	@Test
	void testGetData() {
		Class[] m = new Class[] {
			String.class,
			Integer.class,
			Double.class,
			Boolean.class,
			Character.class,
			Byte.class,
			Short.class,
			Long.class,
			Float.class,
			Void.class
		};
		String[] expected = new String[] {
			""class java.lang.String"",
			""class java.lang.Integer"",
			""class java.lang.Double"",
			""class java.lang.Boolean"",
			""class java.lang.Character"",
			""class java.lang.Byte"",
			""class java.lang.Short"",
			""class java.lang.Long"",
			""class java.lang.Float"",
			""class java.lang.Void""
		};
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Takes an array of Class objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param m array of Class objects
     * @return string array of names
     */
    public static String[] getData(Class[] m) {
        String[] data = new String[m.length];
        for (int i = 0; i < m.length; i++) {
            data[i] = m[i].toString();
        }
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case checks if the method returns the correct data.
	 */
	@Test
	void testGetData() {
		Class[] m = new Class[] {
			String.class,
			Integer.class,
			Double.class,
			Boolean.class,
			Character.class,
			Byte.class,
			Short.class,
			Long.class,
			Float.class,
			Void.class
		};
		String[] expected = new String[] {
			""class java.lang.String"",
			""class java.lang.Integer"",
			""class java.lang.Double"",
			""class java.lang.Boolean"",
			""class java.lang.Character"",
			""class java.lang.Byte"",
			""class java.lang.Short"",
			""class java.lang.Long"",
			""class java.lang.Float"",
			""class java.lang.Void""
		};
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Takes an array of Class objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param m array of Class objects
     * @return string array of names
     */
    public static String[] getData(Class[] m) {
        String[] data = new String[m.length];
        for (int i = 0; i < m.length; i++) {
            data[i] = m[i].toString();
        }
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case checks if the method returns the correct data.
	 */
	@Test
	void testGetData() {
		Class[] m = new Class[] {
			String.class,
			Integer.class,
			Double.class,
			Boolean.class,
			Character.class,
			Byte.class,
			Short.class,
			Long.class,
			Float.class,
			Void.class
		};
		String[] expected = new String[] {
			""class java.lang.String"",
			""class java.lang.Integer"",
			""class java.lang.Double"",
			""class java.lang.Boolean"",
			""class java.lang.Character"",
			""class java.lang.Byte"",
			""class java.lang.Short"",
			""class java.lang.Long"",
			""class java.lang.Float"",
			""class java.lang.Void""
		};
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Takes an array of Class objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param m array of Class objects
     * @return string array of names
     */
    public static String[] getData(Class[] m) {
        String[] data = new String[m.length];
        for (int i = 0; i < m.length; i++) {
            data[i] = m[i].toString();
        }
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case checks if the method returns the correct data.
	 */
	@Test
	void testGetData() {
		Class[] m = new Class[] {
			String.class,
			Integer.class,
			Double.class,
			Boolean.class,
			Character.class,
			Byte.class,
			Short.class,
			Long.class,
			Float.class,
			Void.class
		};
		String[] expected = new String[] {
			""class java.lang.String"",
			""class java.lang.Integer"",
			""class java.lang.Double"",
			""class java.lang.Boolean"",
			""class java.lang.Character"",
			""class java.lang.Byte"",
			""class java.lang.Short"",
			""class java.lang.Long"",
			""class java.lang.Float"",
			""class java.lang.Void""
		};
		String[] actual = ClassInfo.getData(m);
		assertArrayEquals(expected, actual);
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Takes an array of Class objects and gets names from toString().
     * <p>
     * This method always returns immediately.
     *
     * @param m array of Class objects
     * @return string array of names
     */
    public static String[] getData(Class[] m) {
        String[] data = new String[m.length];
        for (int i = 0; i < m.length; i++) {
            data[i] = m[i].toString();
        }
        return data;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getData(Class[])} method.
	 * <p>
	 * This test case checks if the method returns the correct data.
	 */
	@Test
	void testGetData() {
		Class[] m = new Class[] {
			String.class,
			Integer.class,
			Double.class,
			Boolean.class,
			Character.class,
			Byte.class,
			Short.class,
			Long.class,
			Float.class,
			Void.class
		};
		String[] expected = new String[] {
			""class java.lang.String"",
			""class java.lang.Integer"",
			""class java.lang.Double"",
			""class java"
cmpl-6xAVBjqBxthI93s1tarionqIe14Ul,/EvoSuiteBenchmark/scenario3/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo7.java,108.34680891036987,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, and selects methods that have that
     * fragment in them.
     * <p>
     * This method calls searchStrings().
     *
     * @param tempStr string fragment with which to search
     * @return string array of found methods
     */
    public String[] srchMethods(String tempStr);
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfoTest {

	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods1() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods("""");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods2() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""get"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods3() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""set"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods4() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""is"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods5() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""to"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods6() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""hash"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods7() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""equals"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods8() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""clone"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods9() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""finalize"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods10() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""wait"");
		assertEquals(methods.length, ci.cMethods.length);
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, and selects methods that have that
     * fragment in them.
     * <p>
     * This method calls searchStrings().
     *
     * @param tempStr string fragment with which to search
     * @return string array of found methods
     */
    public String[] srchMethods(String tempStr) {
        String[] temp = new String[cMethods.length];
        int count = 0;
        for (int i = 0; i < cMethods.length; i++) {
            if (searchStrings(cMethods[i], tempStr)) {
                temp[count] = cMethods[i];
                count++;
            }
        }
        String[] temp2 = new String[count];
        for (int i = 0; i < count; i++) {
            temp2[i] = temp[i];
        }
        return temp2;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods1() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods("""");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods2() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""get"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods3() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""set"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods4() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""is"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods5() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""to"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods6() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""hash"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods7() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""equals"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods8() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""clone"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods9() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""finalize"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods10() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""wait"");
		assertEquals(methods.length, ci.cMethods.length);
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Searches through cMethods, the private array of public methods
     * for a given string fragment, and selects methods that have that
     * fragment in them.
     * <p>
     * This method calls searchStrings().
     *
     * @param tempStr string fragment with which to search
     * @return string array of found methods
     */
    public String[] srchMethods(String tempStr) {
        String[] temp = new String[cMethods.length];
        int count = 0;
        for (int i = 0; i < cMethods.length; i++) {
            if (searchStrings(cMethods[i], tempStr)) {
                temp[count] = cMethods[i];
                count++;
            }
        }
        String[] temp2 = new String[count];
        for (int i = 0; i < count; i++) {
            temp2[i] = temp[i];
        }
        return temp2;
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods1() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods("""");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods2() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""get"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods3() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""set"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods4() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""is"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case for {@link ClassInfo#srchMethods(String)} method.
	 * <p>
	 * This test case checks if the method returns the correct number of methods.
	 */
	@Test
	void testSrchMethods5() {
		ClassInfo ci = new ClassInfo();
		String[] methods = ci.srchMethods(""to"");
		assertEquals(methods.length, ci.cMethods.length);
	}
	
	/**
	 * Test case"
cmpl-6xAWvC44MNhfYblofgQPSi0uiLGc0,/EvoSuiteBenchmark/scenario3/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo8.java,73.06322264671326,length,"// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Searches through found methods and returns method at given
     * position, uses anonymous inner class.  If no methods
     * have been searched for it returns null.
     *
     * @param pos position of found methods in array 0 is first.
     * @return MethodData object with information about method
     */
    public MethodData getFoundMethod(final int pos);
}
","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfoTest {","// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfoTest {

	/**
	 * Test case for {@link ClassInfo#getFoundMethod(int)} method.
	 * <p>
	 * This test case checks if the method returns null when no methods have been searched for.
	 */
	@Test
	public void testGetFoundMethod_NoMethodsSearchedFor_ReturnsNull() {
		ClassInfo classInfo = new ClassInfo();
		assertNull(classInfo.getFoundMethod(0));
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Searches through found methods and returns method at given
     * position, uses anonymous inner class.  If no methods
     * have been searched for it returns null.
     *
     * @param pos position of found methods in array 0 is first.
     * @return MethodData object with information about method
     */
    public MethodData getFoundMethod(final int pos) {
        if (foundMethods == null) {
            return null;
        }
        return new MethodData() {
            public String getName() {
                return foundMethods[pos].getName();
            }
            public String getReturnType() {
                return foundMethods[pos].getReturnType().getName();
            }
            public String getModifiers() {
                return Modifier.toString(foundMethods[pos].getModifiers());
            }
            public String[] getParameterTypes() {
                Class[] params = foundMethods[pos].getParameterTypes();
                String[] paramTypes = new String[params.length];
                for (int i = 0; i < params.length; i++) {
                    paramTypes[i] = params[i].getName();
                }
                return paramTypes;
            }
            public String[] getExceptionTypes() {
                Class[] exceptions = foundMethods[pos].getExceptionTypes();
                String[] exceptionTypes = new String[exceptions.length];
                for (int i = 0; i < exceptions.length; i++) {
                    exceptionTypes[i] = exceptions[i].getName();
                }
                return exceptionTypes;
            }
        };
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getFoundMethod(int)} method.
	 * <p>
	 * This test case checks if the method returns null when no methods have been searched for.
	 */
	@Test
	public void testGetFoundMethod_NoMethodsSearchedFor_ReturnsNull() {
		ClassInfo classInfo = new ClassInfo();
		assertNull(classInfo.getFoundMethod(0));
	}
	
	/**
	 * Test case for {@link ClassInfo#getFoundMethod(int)} method.
	 * <p>
	 * This test case checks if the method returns null when the position is negative.
	 */
	@Test
	public void testGetFoundMethod_NegativePosition_ReturnsNull() {
		ClassInfo classInfo = new ClassInfo();
		assertNull(classInfo.getFoundMethod(-1));
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Searches through found methods and returns method at given
     * position, uses anonymous inner class.  If no methods
     * have been searched for it returns null.
     *
     * @param pos position of found methods in array 0 is first.
     * @return MethodData object with information about method
     */
    public MethodData getFoundMethod(final int pos) {
        if (foundMethods == null) {
            return null;
        }
        if (pos < 0) {
            return null;
        }
        return new MethodData() {
            public String getName() {
                return foundMethods[pos].getName();
            }
            public String getReturnType() {
                return foundMethods[pos].getReturnType().getName();
            }
            public String getModifiers() {
                return Modifier.toString(foundMethods[pos].getModifiers());
            }
            public String[] getParameterTypes() {
                Class[] params = foundMethods[pos].getParameterTypes();
                String[] paramTypes = new String[params.length];
                for (int i = 0; i < params.length; i++) {
                    paramTypes[i] = params[i].getName();
                }
                return paramTypes;
            }
            public String[] getExceptionTypes() {
                Class[] exceptions = foundMethods[pos].getExceptionTypes();
                String[] exceptionTypes = new String[exceptions.length];
                for (int i = 0; i < exceptions.length; i++) {
                    exceptionTypes[i] = exceptions[i].getName();
                }
                return exceptionTypes;
            }
        };
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getFoundMethod(int)} method.
	 * <p>
	 * This test case checks if the method returns null when no methods have been searched for.
	 */
	@Test
	public void testGetFoundMethod_NoMethodsSearchedFor_ReturnsNull() {
		ClassInfo classInfo = new ClassInfo();
		assertNull(classInfo.getFoundMethod(0));
	}
	
	/**
	 * Test case for {@link ClassInfo#getFoundMethod(int)} method.
	 * <p>
	 * This test case checks if the method returns null when the position is negative.
	 */
	@Test
	public void testGetFoundMethod_NegativePosition_ReturnsNull() {
		ClassInfo classInfo = new ClassInfo();
		assertNull(classInfo.getFoundMethod(-1));
	}
	
	/**
	 * Test case for {@link ClassInfo#getFoundMethod(int)} method.
	 * <p>
	 * This test case checks if the method returns null when the position is greater than the number of found methods.
	 */
	@Test
	public void testGetFoundMethod_PositionGreaterThanNumberOfFoundMethods_ReturnsNull() {
		ClassInfo classInfo = new ClassInfo();
		assertNull(classInfo.getFoundMethod(1));
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Searches through found methods and returns method at given
     * position, uses anonymous inner class.  If no methods
     * have been searched for it returns null.
     *
     * @param pos position of found methods in array 0 is first.
     * @return MethodData object with information about method
     */
    public MethodData getFoundMethod(final int pos) {
        if (foundMethods == null) {
            return null;
        }
        if (pos < 0) {
            return null;
        }
        if (pos >= foundMethods.length) {
            return null;
        }
        return new MethodData() {
            public String getName() {
                return foundMethods[pos].getName();
            }
            public String getReturnType() {
                return foundMethods[pos].getReturnType().getName();
            }
            public String getModifiers() {
                return Modifier.toString(foundMethods[pos].getModifiers());
            }
            public String[] getParameterTypes() {
                Class[] params = foundMethods[pos].getParameterTypes();
                String[] paramTypes = new String[params.length];
                for (int i = 0; i < params.length; i++) {
                    paramTypes[i] = params[i].getName();
                }
                return paramTypes;
            }
            public String[] getExceptionTypes() {
                Class[] exceptions = foundMethods[pos].getExceptionTypes();
                String[] exceptionTypes = new String[exceptions.length];
                for (int i = 0; i < exceptions.length; i++) {
                    exceptionTypes[i] = exceptions[i].getName();
                }
                return exceptionTypes;
            }
        };
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getFoundMethod(int)} method.
	 * <p>
	 * This test case checks if the method returns null when no methods have been searched for.
	 */
	@Test
	public void testGetFoundMethod_NoMethodsSearchedFor_ReturnsNull() {
		ClassInfo classInfo = new ClassInfo();
		assertNull(classInfo.getFoundMethod(0));
	}
	
	/**
	 * Test case for {@link ClassInfo#getFoundMethod(int)} method.
	 * <p>
	 * This test case checks if the method returns null when the position is negative.
	 */
	@Test
	public void testGetFoundMethod_NegativePosition_ReturnsNull() {
		ClassInfo classInfo = new ClassInfo();
		assertNull(classInfo.getFoundMethod(-1));
	}
	
	/**
	 * Test case for {@link ClassInfo#getFoundMethod(int)} method.
	 * <p>
	 * This test case checks if the method returns null when the position is greater than the number of found methods.
	 */
	@Test
	public void testGetFoundMethod_PositionGreaterThanNumberOfFoundMethods_ReturnsNull() {
		ClassInfo classInfo = new ClassInfo();
		assertNull(classInfo.getFoundMethod(1));
	}
	
	/**
	 * Test case for {@link ClassInfo#getFoundMethod(int)} method.
	 * <p>
	 * This test case checks if the method returns the correct method when the position is 0.
	 */
	@Test
	public void testGetFoundMethod_PositionIsZero_ReturnsCorrectMethod() {
		ClassInfo classInfo = new ClassInfo();
		classInfo.setClass(String.class);
		classInfo.searchMethods("""");
		MethodData methodData = classInfo.getFoundMethod(0);
		assertEquals(""charAt"", methodData.getName());
		assertEquals(""char"", methodData.getReturnType());
		assertEquals(""public"", methodData.getModifiers());
		assertArrayEquals(new String[] {""int""}, methodData.getParameterTypes());
		assertArrayEquals(new String[] {}, methodData.getExceptionTypes());
	}
}

// ClassInfo.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;

/**
 * Obtains the interfaces as well as the public constructors, methods
 * and fields from a Class object.
 * <p>
 * This class is for obtaining data and handling.
 *
 * @author James Harris
 * @version 2.0a
 */
public class ClassInfo {

    /**
     * Searches through found methods and returns method at given
     * position, uses anonymous inner class.  If no methods
     * have been searched for it returns null.
     *
     * @param pos position of found methods in array 0 is first.
     * @return MethodData object with information about method
     */
    public MethodData getFoundMethod(final int pos) {
        if (foundMethods == null) {
            return null;
        }
        if (pos < 0) {
            return null;
        }
        if (pos >= foundMethods.length) {
            return null;
        }
        return new MethodData() {
            public String getName() {
                return foundMethods[pos].getName();
            }
            public String getReturnType() {
                return foundMethods[pos].getReturnType().getName();
            }
            public String getModifiers() {
                return Modifier.toString(foundMethods[pos].getModifiers());
            }
            public String[] getParameterTypes() {
                Class[] params = foundMethods[pos].getParameterTypes();
                String[] paramTypes = new String[params.length];
                for (int i = 0; i < params.length; i++) {
                    paramTypes[i] = params[i].getName();
                }
                return paramTypes;
            }
            public String[] getExceptionTypes() {
                Class[] exceptions = foundMethods[pos].getExceptionTypes();
                String[] exceptionTypes = new String[exceptions.length];
                for (int i = 0; i < exceptions.length; i++) {
                    exceptionTypes[i] = exceptions[i].getName();
                }
                return exceptionTypes;
            }
        };
    }
}

// ClassInfoTest.java
package com.jstevh.viewer;

import java.awt.*;
import java.lang.reflect.*;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import com.jstevh.tools.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClassInfo}.
* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.
*/
class ClassInfoTest {
		
	/**
	 * Test case for {@link ClassInfo#getFoundMethod(int)} method.
	 * <p>
"
