[
    {
        "id": "cmpl-6wo7onM1YSo4jlbnJympp4axDQnz2",
        "object": "text_completion",
        "created": 1679473724,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// FenetrePrincipaleTest.java\npackage fr.unice.gfarce.interGraph;\n\n/**\n * classe qui dessine toute l interphace graphique\n */\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.awt.event.KeyEvent;\nimport java.util.Calendar;\nimport javax.swing.Box;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.main.Controler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FenetrePrincipale}.\n* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.\n*/\nclass FenetrePrincipaleTest {\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateLimForm()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2000\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2000\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateLimForm1() {\n\t\t// Given\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\tfenetrePrincipale.comboBoxJourDLM.setSelectedItem(\"01\");\n\t\tfenetrePrincipale.comboBoxMoisDLM.setSelectedItem(\"01\");\n\t\tfenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(\"2000\");\n\t\t// When\n\t\tString date = fenetrePrincipale.dateLimForm();\n\t\t// Then\n\t\tassertEquals(\"01/01/2000\", date);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateLimForm()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"02/02/2001\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"02/02/2001\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateLimForm2() {\n\t\t// Given\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\tfenetrePrincipale.comboBoxJourDLM.setSelectedItem(\"02\");\n\t\tfenetrePrincipale.comboBoxMoisDLM.setSelectedItem(\"02\");\n\t\tfenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(\"2001\");\n\t\t// When\n\t\tString date = fenetrePrincipale.dateLimForm();\n\t\t// Then\n\t\tassertEquals(\"02/02/2001\", date);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateLimForm()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"03/03/2002\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"03/03/2002\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateLimForm3() {\n\t\t// Given\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\tfenetrePrincipale.comboBoxJourDLM.setSelectedItem(\"03\");\n\t\tfenetrePrincipale.comboBoxMoisDLM.setSelectedItem(\"03\");\n\t\tfenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(\"2002\");\n\t\t// When\n\t\tString date = fenetrePrincipale.dateLimForm();\n\t\t// Then\n\t\tassertEquals(\"03/03/2002\", date);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateLimForm()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"04/04/2003\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"04/04/2003\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateLimForm4() {\n\t\t// Given\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\tfenetrePrincipale.comboBoxJourDLM.setSelectedItem(\"04\");\n\t\tfenetrePrincipale.comboBoxMoisDLM.setSelectedItem(\"04\");\n\t\tfenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(\"2003\");\n\t\t// When\n\t\tString date = fenetrePrincipale.dateLimForm();\n\t\t// Then\n\t\tassertEquals(\"04/04/2003\", date);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateLimForm()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"05/05/2004\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"05/05/2004\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateLimForm5() {\n\t\t// Given\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\tfenetrePrincipale.comboBoxJourDLM.setSelectedItem(\"05\");\n\t\tfenetrePrincipale.comboBoxMoisDLM.setSelectedItem(\"05\");\n\t\tfenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(\"2004\");\n\t\t// When\n\t\tString date = fenetrePrincipale.dateLimForm();\n\t\t// Then\n\t\tassertEquals(\"05/05/2004\", date);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateLimForm()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"06/06/2005\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"06/06/2005\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateLimForm6() {\n\t\t// Given\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\tfenetrePrincipale.comboBoxJourDLM.setSelectedItem(\"06\");\n\t\tfenetrePrincipale.comboBoxMoisDLM.setSelectedItem(\"06\");\n\t\tfenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(\"2005\");\n\t\t// When\n\t\tString date = fenetrePrincipale.dateLimForm();\n\t\t// Then\n\t\tassertEquals(\"06/06/2005\", date);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateLimForm()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"07/07/2006\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"07/07/2006\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateLimForm7() {\n\t\t// Given\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\tfenetrePrincipale.comboBoxJourDLM.setSelectedItem(\"07\");\n\t\tfenetrePrincipale.comboBoxMoisDLM.setSelectedItem(\"07\");\n\t\tfenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(\"2006\");\n\t\t// When\n\t\tString date = fenetrePrincipale.dateLimForm();\n\t\t// Then\n\t\tassertEquals(\"07/07/2006\", date);\n\t}\n\t\t\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 1082,
            "completion_tokens": 2000,
            "total_tokens": 3082
        },
        "time_taken": 73.60254216194153,
        "prompt_id": "/EvoSuiteBenchmark/scenario2/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale0.java",
        "original_code": "// FenetrePrincipale.java\npackage fr.unice.gfarce.interGraph;\n\n/**\n * classe qui dessine toute l interphace graphique\n */\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.awt.event.KeyEvent;\nimport java.util.Calendar;\nimport javax.swing.Box;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.main.Controler;\n\npublic class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {\n\n    /**\n     * date de la formation\n     *\n     * @return la date de la formation sous forme de String\n     */\n    public String dateLimForm() {\n        String date = comboBoxJourDLM.getSelectedItem().toString() + comboBoxMoisDLM.getSelectedItem().toString() + comboBoxAnneeDLM.getSelectedItem().toString();\n        return date;\n    }\n}\n",
        "test_prompt": "// FenetrePrincipaleTest.java\npackage fr.unice.gfarce.interGraph;\n\n/**\n * classe qui dessine toute l interphace graphique\n */\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.awt.event.KeyEvent;\nimport java.util.Calendar;\nimport javax.swing.Box;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.main.Controler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FenetrePrincipale}.\n* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.\n*/\nclass FenetrePrincipaleTest {",
        "original_generated_code": "\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateLimForm()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2000\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2000\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateLimForm1() {\n\t\t// Given\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\tfenetrePrincipale.comboBoxJourDLM.setSelectedItem(\"01\");\n\t\tfenetrePrincipale.comboBoxMoisDLM.setSelectedItem(\"01\");\n\t\tfenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(\"2000\");\n\t\t// When\n\t\tString date = fenetrePrincipale.dateLimForm();\n\t\t// Then\n\t\tassertEquals(\"01/01/2000\", date);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateLimForm()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"02/02/2001\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"02/02/2001\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateLimForm2() {\n\t\t// Given\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\tfenetrePrincipale.comboBoxJourDLM.setSelectedItem(\"02\");\n\t\tfenetrePrincipale.comboBoxMoisDLM.setSelectedItem(\"02\");\n\t\tfenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(\"2001\");\n\t\t// When\n\t\tString date = fenetrePrincipale.dateLimForm();\n\t\t// Then\n\t\tassertEquals(\"02/02/2001\", date);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateLimForm()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"03/03/2002\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"03/03/2002\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateLimForm3() {\n\t\t// Given\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\tfenetrePrincipale.comboBoxJourDLM.setSelectedItem(\"03\");\n\t\tfenetrePrincipale.comboBoxMoisDLM.setSelectedItem(\"03\");\n\t\tfenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(\"2002\");\n\t\t// When\n\t\tString date = fenetrePrincipale.dateLimForm();\n\t\t// Then\n\t\tassertEquals(\"03/03/2002\", date);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateLimForm()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"04/04/2003\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"04/04/2003\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateLimForm4() {\n\t\t// Given\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\tfenetrePrincipale.comboBoxJourDLM.setSelectedItem(\"04\");\n\t\tfenetrePrincipale.comboBoxMoisDLM.setSelectedItem(\"04\");\n\t\tfenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(\"2003\");\n\t\t// When\n\t\tString date = fenetrePrincipale.dateLimForm();\n\t\t// Then\n\t\tassertEquals(\"04/04/2003\", date);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateLimForm()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"05/05/2004\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"05/05/2004\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateLimForm5() {\n\t\t// Given\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\tfenetrePrincipale.comboBoxJourDLM.setSelectedItem(\"05\");\n\t\tfenetrePrincipale.comboBoxMoisDLM.setSelectedItem(\"05\");\n\t\tfenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(\"2004\");\n\t\t// When\n\t\tString date = fenetrePrincipale.dateLimForm();\n\t\t// Then\n\t\tassertEquals(\"05/05/2004\", date);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateLimForm()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"06/06/2005\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"06/06/2005\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateLimForm6() {\n\t\t// Given\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\tfenetrePrincipale.comboBoxJourDLM.setSelectedItem(\"06\");\n\t\tfenetrePrincipale.comboBoxMoisDLM.setSelectedItem(\"06\");\n\t\tfenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(\"2005\");\n\t\t// When\n\t\tString date = fenetrePrincipale.dateLimForm();\n\t\t// Then\n\t\tassertEquals(\"06/06/2005\", date);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateLimForm()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"07/07/2006\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"07/07/2006\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateLimForm7() {\n\t\t// Given\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\tfenetrePrincipale.comboBoxJourDLM.setSelectedItem(\"07\");\n\t\tfenetrePrincipale.comboBoxMoisDLM.setSelectedItem(\"07\");\n\t\tfenetrePrincipale.comboBoxAnneeDLM.setSelectedItem(\"2006\");\n\t\t// When\n\t\tString date = fenetrePrincipale.dateLimForm();\n\t\t// Then\n\t\tassertEquals(\"07/07/2006\", date);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateLimForm()} method.\n\t* It tests the method with the following input:\n",
        "applied_heuristics": "H7"
    },
    {
        "id": "cmpl-6wo90IGugzswBVeOBSMPsKp2iIRCn",
        "object": "text_completion",
        "created": 1679473798,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// FenetrePrincipaleTest.java\npackage fr.unice.gfarce.interGraph;\n\n/**\n * classe qui dessine toute l interphace graphique\n */\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.awt.event.KeyEvent;\nimport java.util.Calendar;\nimport javax.swing.Box;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.main.Controler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FenetrePrincipale}.\n* It contains ten unit test cases for the {@link FenetrePrincipale#dateDeNaiss()} method.\n*/\nclass FenetrePrincipaleTest {\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2000\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2000\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateDeNaiss1() {\n\t\t// initialize the input values\n\t\tString date = \"01/01/2000\";\n\t\t// initialize the class to test\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\t// invoke the method to test\n\t\tString result = fenetrePrincipale.dateDeNaiss();\n\t\t// assert result\n\t\tassertEquals(date, result);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2001\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2001\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateDeNaiss2() {\n\t\t// initialize the input values\n\t\tString date = \"01/01/2001\";\n\t\t// initialize the class to test\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\t// invoke the method to test\n\t\tString result = fenetrePrincipale.dateDeNaiss();\n\t\t// assert result\n\t\tassertEquals(date, result);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2002\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2002\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateDeNaiss3() {\n\t\t// initialize the input values\n\t\tString date = \"01/01/2002\";\n\t\t// initialize the class to test\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\t// invoke the method to test\n\t\tString result = fenetrePrincipale.dateDeNaiss();\n\t\t// assert result\n\t\tassertEquals(date, result);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2003\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2003\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateDeNaiss4() {\n\t\t// initialize the input values\n\t\tString date = \"01/01/2003\";\n\t\t// initialize the class to test\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\t// invoke the method to test\n\t\tString result = fenetrePrincipale.dateDeNaiss();\n\t\t// assert result\n\t\tassertEquals(date, result);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2004\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2004\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateDeNaiss5() {\n\t\t// initialize the input values\n\t\tString date = \"01/01/2004\";\n\t\t// initialize the class to test\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\t// invoke the method to test\n\t\tString result = fenetrePrincipale.dateDeNaiss();\n\t\t// assert result\n\t\tassertEquals(date, result);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2005\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2005\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateDeNaiss6() {\n\t\t// initialize the input values\n\t\tString date = \"01/01/2005\";\n\t\t// initialize the class to test\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\t// invoke the method to test\n\t\tString result = fenetrePrincipale.dateDeNaiss();\n\t\t// assert result\n\t\tassertEquals(date, result);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2006\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2006\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateDeNaiss7() {\n\t\t// initialize the input values\n\t\tString date = \"01/01/2006\";\n\t\t// initialize the class to test\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\t// invoke the method to test\n\t\tString result = fenetrePrincipale.dateDeNaiss();\n\t\t// assert result\n\t\tassertEquals(date, result);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2007\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2007\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateDeNaiss8() {\n\t\t// initialize the input values\n\t\tString date = \"01/01/2007\";\n\t\t// initialize the class to test\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\t// invoke the method to test\n\t\tString result = fenetrePrincipale.dateDeNaiss();\n\t\t// assert result\n\t\tassertEquals(date, result);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2008\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2008\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateDeNaiss9() {\n}\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 1086,
            "completion_tokens": 2000,
            "total_tokens": 3086
        },
        "time_taken": 68.30331802368164,
        "prompt_id": "/EvoSuiteBenchmark/scenario2/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale1.java",
        "original_code": "// FenetrePrincipale.java\npackage fr.unice.gfarce.interGraph;\n\n/**\n * classe qui dessine toute l interphace graphique\n */\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.awt.event.KeyEvent;\nimport java.util.Calendar;\nimport javax.swing.Box;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.main.Controler;\n\npublic class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {\n\n    /**\n     * date de naissance\n     *\n     * @return la date de naissance sous form de String\n     */\n    public String dateDeNaiss() {\n        String date = comboBoxJourDDNEtu.getSelectedItem().toString() + comboBoxMoisDDNEtu.getSelectedItem().toString() + comboBoxAnneeDDNEtu.getSelectedItem().toString();\n        return date;\n    }\n}\n",
        "test_prompt": "// FenetrePrincipaleTest.java\npackage fr.unice.gfarce.interGraph;\n\n/**\n * classe qui dessine toute l interphace graphique\n */\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.awt.event.KeyEvent;\nimport java.util.Calendar;\nimport javax.swing.Box;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.main.Controler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FenetrePrincipale}.\n* It contains ten unit test cases for the {@link FenetrePrincipale#dateDeNaiss()} method.\n*/\nclass FenetrePrincipaleTest {",
        "original_generated_code": "\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2000\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2000\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateDeNaiss1() {\n\t\t// initialize the input values\n\t\tString date = \"01/01/2000\";\n\t\t// initialize the class to test\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\t// invoke the method to test\n\t\tString result = fenetrePrincipale.dateDeNaiss();\n\t\t// assert result\n\t\tassertEquals(date, result);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2001\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2001\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateDeNaiss2() {\n\t\t// initialize the input values\n\t\tString date = \"01/01/2001\";\n\t\t// initialize the class to test\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\t// invoke the method to test\n\t\tString result = fenetrePrincipale.dateDeNaiss();\n\t\t// assert result\n\t\tassertEquals(date, result);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2002\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2002\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateDeNaiss3() {\n\t\t// initialize the input values\n\t\tString date = \"01/01/2002\";\n\t\t// initialize the class to test\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\t// invoke the method to test\n\t\tString result = fenetrePrincipale.dateDeNaiss();\n\t\t// assert result\n\t\tassertEquals(date, result);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2003\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2003\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateDeNaiss4() {\n\t\t// initialize the input values\n\t\tString date = \"01/01/2003\";\n\t\t// initialize the class to test\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\t// invoke the method to test\n\t\tString result = fenetrePrincipale.dateDeNaiss();\n\t\t// assert result\n\t\tassertEquals(date, result);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2004\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2004\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateDeNaiss5() {\n\t\t// initialize the input values\n\t\tString date = \"01/01/2004\";\n\t\t// initialize the class to test\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\t// invoke the method to test\n\t\tString result = fenetrePrincipale.dateDeNaiss();\n\t\t// assert result\n\t\tassertEquals(date, result);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2005\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2005\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateDeNaiss6() {\n\t\t// initialize the input values\n\t\tString date = \"01/01/2005\";\n\t\t// initialize the class to test\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\t// invoke the method to test\n\t\tString result = fenetrePrincipale.dateDeNaiss();\n\t\t// assert result\n\t\tassertEquals(date, result);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2006\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2006\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateDeNaiss7() {\n\t\t// initialize the input values\n\t\tString date = \"01/01/2006\";\n\t\t// initialize the class to test\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\t// invoke the method to test\n\t\tString result = fenetrePrincipale.dateDeNaiss();\n\t\t// assert result\n\t\tassertEquals(date, result);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2007\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2007\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateDeNaiss8() {\n\t\t// initialize the input values\n\t\tString date = \"01/01/2007\";\n\t\t// initialize the class to test\n\t\tFenetrePrincipale fenetrePrincipale = new FenetrePrincipale();\n\t\t// invoke the method to test\n\t\tString result = fenetrePrincipale.dateDeNaiss();\n\t\t// assert result\n\t\tassertEquals(date, result);\n\t}\n\t\t\n\t/**\n\t* Test case for the {@link FenetrePrincipale#dateDeNaiss()} method.\n\t* It tests the method with the following input:\n\t* <ul>\n\t* <li>date = \"01/01/2008\"</li>\n\t* </ul>\n\t* and the expected output:\n\t* <ul>\n\t* <li>date = \"01/01/2008\"</li>\n\t* </ul>\n\t*/\n\t@Test\n\tpublic void testDateDeNaiss9() {\n",
        "applied_heuristics": "H7"
    },
    {
        "id": "cmpl-6woA6ZNaCwo4W6pfwg48GalfLTJ0W",
        "object": "text_completion",
        "created": 1679473866,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// ModifTableStockageTest.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModifTableStockage}.\n* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.\n*/\nclass ModifTableStockageTest {\n\t\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#ajouterLigne()} method.\n\t* It tests the case where the table has no column.\n\t*/\n\t@Test\n\tvoid testAjouterLigne1() {\n\t\tTableStockage ts = new TableStockage(0, 0);\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.ajouterLigne();\n\t\tassertEquals(ts, ts2);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#ajouterLigne()} method.\n\t* It tests the case where the table has one column.\n\t*/\n\t@Test\n\tvoid testAjouterLigne2() {\n\t\tTableStockage ts = new TableStockage(0, 1);\n\t\tts.setColumnName(0, \"colonne1\");\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.ajouterLigne();\n\t\tassertEquals(ts2.getColumnName(0), \"colonne1\");\n\t\tassertEquals(ts2.getValueAt(0, 0), \"\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#ajouterLigne()} method.\n\t* It tests the case where the table has two columns.\n\t*/\n\t@Test\n\tvoid testAjouterLigne3() {\n\t\tTableStockage ts = new TableStockage(0, 2);\n\t\tts.setColumnName(0, \"colonne1\");\n\t\tts.setColumnName(1, \"colonne2\");\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.ajouterLigne();\n\t\tassertEquals(ts2.getColumnName(0), \"colonne1\");\n\t\tassertEquals(ts2.getColumnName(1), \"colonne2\");\n\t\tassertEquals(ts2.getValueAt(0, 0), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 1), \"\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#ajouterLigne()} method.\n\t* It tests the case where the table has three columns.\n\t*/\n\t@Test\n\tvoid testAjouterLigne4() {\n\t\tTableStockage ts = new TableStockage(0, 3);\n\t\tts.setColumnName(0, \"colonne1\");\n\t\tts.setColumnName(1, \"colonne2\");\n\t\tts.setColumnName(2, \"colonne3\");\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.ajouterLigne();\n\t\tassertEquals(ts2.getColumnName(0), \"colonne1\");\n\t\tassertEquals(ts2.getColumnName(1), \"colonne2\");\n\t\tassertEquals(ts2.getColumnName(2), \"colonne3\");\n\t\tassertEquals(ts2.getValueAt(0, 0), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 1), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 2), \"\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#ajouterLigne()} method.\n\t* It tests the case where the table has four columns.\n\t*/\n\t@Test\n\tvoid testAjouterLigne5() {\n\t\tTableStockage ts = new TableStockage(0, 4);\n\t\tts.setColumnName(0, \"colonne1\");\n\t\tts.setColumnName(1, \"colonne2\");\n\t\tts.setColumnName(2, \"colonne3\");\n\t\tts.setColumnName(3, \"colonne4\");\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.ajouterLigne();\n\t\tassertEquals(ts2.getColumnName(0), \"colonne1\");\n\t\tassertEquals(ts2.getColumnName(1), \"colonne2\");\n\t\tassertEquals(ts2.getColumnName(2), \"colonne3\");\n\t\tassertEquals(ts2.getColumnName(3), \"colonne4\");\n\t\tassertEquals(ts2.getValueAt(0, 0), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 1), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 2), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 3), \"\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#ajouterLigne()} method.\n\t* It tests the case where the table has five columns.\n\t*/\n\t@Test\n\tvoid testAjouterLigne6() {\n\t\tTableStockage ts = new TableStockage(0, 5);\n\t\tts.setColumnName(0, \"colonne1\");\n\t\tts.setColumnName(1, \"colonne2\");\n\t\tts.setColumnName(2, \"colonne3\");\n\t\tts.setColumnName(3, \"colonne4\");\n\t\tts.setColumnName(4, \"colonne5\");\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.ajouterLigne();\n\t\tassertEquals(ts2.getColumnName(0), \"colonne1\");\n\t\tassertEquals(ts2.getColumnName(1), \"colonne2\");\n\t\tassertEquals(ts2.getColumnName(2), \"colonne3\");\n\t\tassertEquals(ts2.getColumnName(3), \"colonne4\");\n\t\tassertEquals(ts2.getColumnName(4), \"colonne5\");\n\t\tassertEquals(ts2.getValueAt(0, 0), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 1), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 2), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 3), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 4), \"\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#ajouterLigne()} method.\n\t* It tests the case where the table has six columns.\n\t*/\n\t@Test\n\tvoid testAjouterLigne7() {\n\t\tTableStockage ts = new TableStockage(0, 6);\n\t\tts.setColumnName(0, \"colonne1\");\n\t\tts.setColumnName(1, \"colonne2\");\n\t\tts.setColumnName(2, \"colonne3\");\n\t\tts.setColumnName(3, \"colonne4\");\n\t\tts.setColumnName(4, \"colonne5\");\n\t\tts.setColumnName(5, \"colonne6\");\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.ajouterLigne();\n\t\tassertEquals(ts2.getColumnName(0), \"colonne1\");\n\t\tassertEquals(ts2.getColumnName(1), \"colonne2\");\n\t\tassertEquals(ts2.getColumnName(2), \"colonne3\");\n\t\tassertEquals(ts2.getColumnName(3), \"colonne4\");\n\t\tassertEquals(ts2.getColumnName(4), \"colonne5\");\n\t\tassertEquals(ts2.getColumnName(5), \"colonne6\");\n\t\tassertEquals(ts2.getValueAt(0, 0), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 1), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 2), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 3), \"\");\n}\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 708,
            "completion_tokens": 2000,
            "total_tokens": 2708
        },
        "time_taken": 56.170358180999756,
        "prompt_id": "/EvoSuiteBenchmark/scenario2/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage0.java",
        "original_code": "// ModifTableStockage.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\n\npublic class ModifTableStockage {\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.\n     * Ligne ajoutee a la fin de la JTable\n     *\n     * @return TableStockage\n     */\n    public TableStockage ajouterLigne() {\n        if (nbColonnes > 0) {\n            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)\n            this.nbLignes++;\n            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n            /* on recopie les noms des colonnes */\n            for (int j = 0; j < nbColonnes; j++) {\n                tableS.setColumnName(j, ts.getColumnName(j));\n            }\n            /* on recopie les valeurs dans les colonnes */\n            for (int i = 0; i < nbLignes - 2; i++) {\n                for (int j = 0; j < nbColonnes; j++) {\n                    tableS.setValueAt(ts.getValueAt(i, j), i, j);\n                }\n            }\n            for (int j = 0; j < nbColonnes; j++) {\n                if (ts.getColumnClass(j).equals(String.class)) {\n                    // la derniere ligne sera a null\n                    tableS.setValueAt(\"\", nbLignes - 2, j);\n                } else if (ts.getColumnClass(j).equals(Double.class)) {\n                    tableS.setValueAt(new Double(\"0\"), nbLignes - 2, j);\n                } else\n                    // sauf si de la classe Boolean\n                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);\n            }\n            return tableS;\n        } else {\n            // pas de colonne pour construire une ligne\n            JOptionPane.showMessageDialog(null, \"PAS DE COLONNE\", \"ERREUR\", JOptionPane.ERROR_MESSAGE);\n            return ts;\n        }\n    }\n}\n",
        "test_prompt": "// ModifTableStockageTest.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModifTableStockage}.\n* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.\n*/\nclass ModifTableStockageTest {",
        "original_generated_code": "\n\t/**\n\t* Test case for the {@link ModifTableStockage#ajouterLigne()} method.\n\t* It tests the case where the table has no column.\n\t*/\n\t@Test\n\tvoid testAjouterLigne1() {\n\t\tTableStockage ts = new TableStockage(0, 0);\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.ajouterLigne();\n\t\tassertEquals(ts, ts2);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#ajouterLigne()} method.\n\t* It tests the case where the table has one column.\n\t*/\n\t@Test\n\tvoid testAjouterLigne2() {\n\t\tTableStockage ts = new TableStockage(0, 1);\n\t\tts.setColumnName(0, \"colonne1\");\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.ajouterLigne();\n\t\tassertEquals(ts2.getColumnName(0), \"colonne1\");\n\t\tassertEquals(ts2.getValueAt(0, 0), \"\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#ajouterLigne()} method.\n\t* It tests the case where the table has two columns.\n\t*/\n\t@Test\n\tvoid testAjouterLigne3() {\n\t\tTableStockage ts = new TableStockage(0, 2);\n\t\tts.setColumnName(0, \"colonne1\");\n\t\tts.setColumnName(1, \"colonne2\");\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.ajouterLigne();\n\t\tassertEquals(ts2.getColumnName(0), \"colonne1\");\n\t\tassertEquals(ts2.getColumnName(1), \"colonne2\");\n\t\tassertEquals(ts2.getValueAt(0, 0), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 1), \"\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#ajouterLigne()} method.\n\t* It tests the case where the table has three columns.\n\t*/\n\t@Test\n\tvoid testAjouterLigne4() {\n\t\tTableStockage ts = new TableStockage(0, 3);\n\t\tts.setColumnName(0, \"colonne1\");\n\t\tts.setColumnName(1, \"colonne2\");\n\t\tts.setColumnName(2, \"colonne3\");\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.ajouterLigne();\n\t\tassertEquals(ts2.getColumnName(0), \"colonne1\");\n\t\tassertEquals(ts2.getColumnName(1), \"colonne2\");\n\t\tassertEquals(ts2.getColumnName(2), \"colonne3\");\n\t\tassertEquals(ts2.getValueAt(0, 0), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 1), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 2), \"\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#ajouterLigne()} method.\n\t* It tests the case where the table has four columns.\n\t*/\n\t@Test\n\tvoid testAjouterLigne5() {\n\t\tTableStockage ts = new TableStockage(0, 4);\n\t\tts.setColumnName(0, \"colonne1\");\n\t\tts.setColumnName(1, \"colonne2\");\n\t\tts.setColumnName(2, \"colonne3\");\n\t\tts.setColumnName(3, \"colonne4\");\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.ajouterLigne();\n\t\tassertEquals(ts2.getColumnName(0), \"colonne1\");\n\t\tassertEquals(ts2.getColumnName(1), \"colonne2\");\n\t\tassertEquals(ts2.getColumnName(2), \"colonne3\");\n\t\tassertEquals(ts2.getColumnName(3), \"colonne4\");\n\t\tassertEquals(ts2.getValueAt(0, 0), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 1), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 2), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 3), \"\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#ajouterLigne()} method.\n\t* It tests the case where the table has five columns.\n\t*/\n\t@Test\n\tvoid testAjouterLigne6() {\n\t\tTableStockage ts = new TableStockage(0, 5);\n\t\tts.setColumnName(0, \"colonne1\");\n\t\tts.setColumnName(1, \"colonne2\");\n\t\tts.setColumnName(2, \"colonne3\");\n\t\tts.setColumnName(3, \"colonne4\");\n\t\tts.setColumnName(4, \"colonne5\");\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.ajouterLigne();\n\t\tassertEquals(ts2.getColumnName(0), \"colonne1\");\n\t\tassertEquals(ts2.getColumnName(1), \"colonne2\");\n\t\tassertEquals(ts2.getColumnName(2), \"colonne3\");\n\t\tassertEquals(ts2.getColumnName(3), \"colonne4\");\n\t\tassertEquals(ts2.getColumnName(4), \"colonne5\");\n\t\tassertEquals(ts2.getValueAt(0, 0), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 1), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 2), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 3), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 4), \"\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#ajouterLigne()} method.\n\t* It tests the case where the table has six columns.\n\t*/\n\t@Test\n\tvoid testAjouterLigne7() {\n\t\tTableStockage ts = new TableStockage(0, 6);\n\t\tts.setColumnName(0, \"colonne1\");\n\t\tts.setColumnName(1, \"colonne2\");\n\t\tts.setColumnName(2, \"colonne3\");\n\t\tts.setColumnName(3, \"colonne4\");\n\t\tts.setColumnName(4, \"colonne5\");\n\t\tts.setColumnName(5, \"colonne6\");\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.ajouterLigne();\n\t\tassertEquals(ts2.getColumnName(0), \"colonne1\");\n\t\tassertEquals(ts2.getColumnName(1), \"colonne2\");\n\t\tassertEquals(ts2.getColumnName(2), \"colonne3\");\n\t\tassertEquals(ts2.getColumnName(3), \"colonne4\");\n\t\tassertEquals(ts2.getColumnName(4), \"colonne5\");\n\t\tassertEquals(ts2.getColumnName(5), \"colonne6\");\n\t\tassertEquals(ts2.getValueAt(0, 0), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 1), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 2), \"\");\n\t\tassertEquals(ts2.getValueAt(0, 3), \"\");\n\t\t",
        "applied_heuristics": "H7"
    },
    {
        "id": "cmpl-6woB9SgGyrIO4YenBh2nMp3V7RJxx",
        "object": "text_completion",
        "created": 1679473931,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// ModifTableStockageTest.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModifTableStockage}.\n* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.\n*/\nclass ModifTableStockageTest {\n\t\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object.\n\t*/\n\t@Test\n\tvoid testColonneMail() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertTrue(tableS instanceof TableStockage);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object with the right number of columns.\n\t*/\n\t@Test\n\tvoid testColonneMail2() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertEquals(tableS.getColumnCount(), nbColonnes + 1);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object with the right number of rows.\n\t*/\n\t@Test\n\tvoid testColonneMail3() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertEquals(tableS.getRowCount(), nbLignes);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object with the right number of columns.\n\t*/\n\t@Test\n\tvoid testColonneMail4() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertEquals(tableS.getColumnCount(), nbColonnes + 1);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object with the right number of rows.\n\t*/\n\t@Test\n\tvoid testColonneMail5() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertEquals(tableS.getRowCount(), nbLignes);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object with the right number of columns.\n\t*/\n\t@Test\n\tvoid testColonneMail6() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertEquals(tableS.getColumnCount(), nbColonnes + 1);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object with the right number of rows.\n\t*/\n\t@Test\n\tvoid testColonneMail7() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertEquals(tableS.getRowCount(), nbLignes);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object with the right number of columns.\n\t*/\n\t@Test\n\tvoid testColonneMail8() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertEquals(tableS.getColumnCount(), nbColonnes + 1);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object with the right number of rows.\n\t*/\n\t@Test\n\tvoid testColonneMail9() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertEquals(tableS.getRowCount(), nbLignes);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object with the right number of columns.\n\t*/\n\t@Test\n\tvoid testColonneMail10() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertEquals(tableS.getColumnCount(), nbColonnes + 1);\n\t}\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 423,
            "completion_tokens": 2000,
            "total_tokens": 2423
        },
        "time_taken": 83.81387734413147,
        "prompt_id": "/EvoSuiteBenchmark/scenario2/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage1.java",
        "original_code": "// ModifTableStockage.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\n\npublic class ModifTableStockage {\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine,\n     * avec une nouvelle colonne de nom \"E-Mail\"\n     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.\n     *\n     * @return TableStockage\n     */\n    public TableStockage colonneMail() {\n        this.nbColonnes++;\n        ModifTableStockage mt = new ModifTableStockage(ts);\n        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n        tableS = mt.ajouterColonne(\"Envoyer E-Mail a:\", Boolean.class);\n        for (int i = 0; i < nbLignes - 1; i++) {\n            // on ajoute un checkbox (par defaut)\n            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);\n        }\n        return tableS;\n    }\n}\n",
        "test_prompt": "// ModifTableStockageTest.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModifTableStockage}.\n* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.\n*/\nclass ModifTableStockageTest {",
        "original_generated_code": "\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object.\n\t*/\n\t@Test\n\tvoid testColonneMail() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertTrue(tableS instanceof TableStockage);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object with the right number of columns.\n\t*/\n\t@Test\n\tvoid testColonneMail2() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertEquals(tableS.getColumnCount(), nbColonnes + 1);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object with the right number of rows.\n\t*/\n\t@Test\n\tvoid testColonneMail3() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertEquals(tableS.getRowCount(), nbLignes);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object with the right number of columns.\n\t*/\n\t@Test\n\tvoid testColonneMail4() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertEquals(tableS.getColumnCount(), nbColonnes + 1);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object with the right number of rows.\n\t*/\n\t@Test\n\tvoid testColonneMail5() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertEquals(tableS.getRowCount(), nbLignes);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object with the right number of columns.\n\t*/\n\t@Test\n\tvoid testColonneMail6() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertEquals(tableS.getColumnCount(), nbColonnes + 1);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object with the right number of rows.\n\t*/\n\t@Test\n\tvoid testColonneMail7() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertEquals(tableS.getRowCount(), nbLignes);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object with the right number of columns.\n\t*/\n\t@Test\n\tvoid testColonneMail8() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertEquals(tableS.getColumnCount(), nbColonnes + 1);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object with the right number of rows.\n\t*/\n\t@Test\n\tvoid testColonneMail9() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertEquals(tableS.getRowCount(), nbLignes);\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object with the right number of columns.\n\t*/\n\t@Test\n\tvoid testColonneMail10() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n\t\ttableS = mt.colonneMail();\n\t\tassertEquals(tableS.getColumnCount(), nbColonnes + 1);\n\t}\n}\n\n// ModifTableStockage.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\n\npublic class ModifTableStockage {\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine,\n     * avec une nouvelle colonne de nom \"E-Mail\"\n     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.\n     *\n     * @return TableStockage\n     */\n    public TableStockage colonneMail() {\n        this.nbColonnes++;\n        ModifTableStockage mt = new ModifTableStockage(ts);\n        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n        tableS = mt.ajouterColonne(\"Envoyer E-Mail a:\", Boolean.class);\n        for (int i = 0; i < nbLignes - 1; i++) {\n            // on ajoute un checkbox (par defaut)\n            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);\n        }\n        return tableS;\n    }\n}\n\n// ModifTableStockageTest.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModifTableStockage}.\n* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.\n*/\nclass ModifTableStockageTest {\n\t\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#colonneMail()} method.\n\t* It tests if the method returns a {@link TableStockage} object.\n\t*/\n\t@Test\n\tvoid testColonneMail() {\n\t\tModifTableStockage mt = new ModifTableStockage(ts);\n\t\tTableStockage tableS",
        "applied_heuristics": "H1"
    },
    {
        "id": "cmpl-6woCVhA4sQBwTrq5zeYt6EzmmuMzf",
        "object": "text_completion",
        "created": 1679474015,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// ModifTableStockageTest.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModifTableStockage}.\n* It contains ten unit test cases for the {@link ModifTableStockage#selectMail()} method.\n*/\nclass ModifTableStockageTest {\n\t\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#selectMail()} method.\n\t* The test case is successful if the method returns a {@link TableStockage} object.\n\t*/\n\t@Test\n\tvoid testSelectMail() {\n\t\tTableStockage ts = new TableStockage(2, 2);\n\t\tts.setColumnName(0, \"Envoyer E-Mail a:\");\n\t\tts.setColumnName(1, \"Nom\");\n\t\tts.setValueAt(true, 0, 0);\n\t\tts.setValueAt(\"Dupont\", 0, 1);\n\t\tts.setValueAt(false, 1, 0);\n\t\tts.setValueAt(\"Durand\", 1, 1);\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.selectMail();\n\t\tassertEquals(ts2.getValueAt(0, 0), true);\n\t\tassertEquals(ts2.getValueAt(0, 1), \"Dupont\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#selectMail()} method.\n\t* The test case is successful if the method returns a {@link TableStockage} object.\n\t*/\n\t@Test\n\tvoid testSelectMail2() {\n\t\tTableStockage ts = new TableStockage(2, 2);\n\t\tts.setColumnName(0, \"Envoyer E-Mail a:\");\n\t\tts.setColumnName(1, \"Nom\");\n\t\tts.setValueAt(true, 0, 0);\n\t\tts.setValueAt(\"Dupont\", 0, 1);\n\t\tts.setValueAt(false, 1, 0);\n\t\tts.setValueAt(\"Durand\", 1, 1);\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.selectMail();\n\t\tassertEquals(ts2.getValueAt(0, 0), true);\n\t\tassertEquals(ts2.getValueAt(0, 1), \"Dupont\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#selectMail()} method.\n\t* The test case is successful if the method returns a {@link TableStockage} object.\n\t*/\n\t@Test\n\tvoid testSelectMail3() {\n\t\tTableStockage ts = new TableStockage(2, 2);\n\t\tts.setColumnName(0, \"Envoyer E-Mail a:\");\n\t\tts.setColumnName(1, \"Nom\");\n\t\tts.setValueAt(true, 0, 0);\n\t\tts.setValueAt(\"Dupont\", 0, 1);\n\t\tts.setValueAt(false, 1, 0);\n\t\tts.setValueAt(\"Durand\", 1, 1);\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.selectMail();\n\t\tassertEquals(ts2.getValueAt(0, 0), true);\n\t\tassertEquals(ts2.getValueAt(0, 1), \"Dupont\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#selectMail()} method.\n\t* The test case is successful if the method returns a {@link TableStockage} object.\n\t*/\n\t@Test\n\tvoid testSelectMail4() {\n\t\tTableStockage ts = new TableStockage(2, 2);\n\t\tts.setColumnName(0, \"Envoyer E-Mail a:\");\n\t\tts.setColumnName(1, \"Nom\");\n\t\tts.setValueAt(true, 0, 0);\n\t\tts.setValueAt(\"Dupont\", 0, 1);\n\t\tts.setValueAt(false, 1, 0);\n\t\tts.setValueAt(\"Durand\", 1, 1);\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.selectMail();\n\t\tassertEquals(ts2.getValueAt(0, 0), true);\n\t\tassertEquals(ts2.getValueAt(0, 1), \"Dupont\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#selectMail()} method.\n\t* The test case is successful if the method returns a {@link TableStockage} object.\n\t*/\n\t@Test\n\tvoid testSelectMail5() {\n\t\tTableStockage ts = new TableStockage(2, 2);\n\t\tts.setColumnName(0, \"Envoyer E-Mail a:\");\n\t\tts.setColumnName(1, \"Nom\");\n\t\tts.setValueAt(true, 0, 0);\n\t\tts.setValueAt(\"Dupont\", 0, 1);\n\t\tts.setValueAt(false, 1, 0);\n\t\tts.setValueAt(\"Durand\", 1, 1);\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.selectMail();\n\t\tassertEquals(ts2.getValueAt(0, 0), true);\n\t\tassertEquals(ts2.getValueAt(0, 1), \"Dupont\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#selectMail()} method.\n\t* The test case is successful if the method returns a {@link TableStockage} object.\n\t*/\n\t@Test\n\tvoid testSelectMail6() {\n\t\tTableStockage ts = new TableStockage(2, 2);\n\t\tts.setColumnName(0, \"Envoyer E-Mail a:\");\n\t\tts.setColumnName(1, \"Nom\");\n\t\tts.setValueAt(true, 0, 0);\n\t\tts.setValueAt(\"Dupont\", 0, 1);\n\t\tts.setValueAt(false, 1, 0);\n\t\tts.setValueAt(\"Durand\", 1, 1);\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.selectMail();\n\t\tassertEquals(ts2.getValueAt(0, 0), true);\n\t\tassertEquals(ts2.getValueAt(0, 1), \"Dupont\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#selectMail()} method.\n\t* The test case is successful if the method returns a {@link TableStockage} object.\n\t*/\n\t@Test\n\tvoid testSelectMail7() {\n\t\tTableStockage ts = new TableStockage(2, 2);\n\t\tts.setColumnName(0, \"Envoyer E-Mail a:\");\n\t\tts.setColumnName(1, \"Nom\");\n\t\tts.setValueAt(true, 0, 0);\n\t\tts.setValueAt(\"Dupont\", 0, 1);\n\t\tts.setValueAt(false, 1, 0);\n\t\tts.setValueAt(\"Durand\", 1, 1);\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.selectMail();\n\t\tassertEquals(ts2.getValueAt(0, 0), true);\n\t\tassertEquals(ts2.getValueAt(0, 1), \"Dupont\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#selectMail()} method.\n\t* The test case is successful if the method returns a {@link TableStockage} object.\n\t*/\n\t@Test\n\tvoid testSelectMail8() {\n\t\tTableStockage ts = new TableStockage(2, 2);\n\t\tts.setColumnName(0, \"Envoyer E-Mail a:\");\n\t\tts.setColumnName(1, \"Nom\");\n\t\tts.setValueAt(true, 0, 0);\n\t\tts.setValueAt(\"Dupont\", 0, 1);\n\t\tts.setValueAt(false, 1, 0);\n}\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 719,
            "completion_tokens": 2000,
            "total_tokens": 2719
        },
        "time_taken": 80.17368125915527,
        "prompt_id": "/EvoSuiteBenchmark/scenario2/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage2.java",
        "original_code": "// ModifTableStockage.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\n\npublic class ModifTableStockage {\n\n    /**\n     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,\n     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;\n     *\n     * @return TableStockage\n     */\n    public TableStockage selectMail() {\n        int j = 0;\n        Boolean bool;\n        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(\"Envoyer E-Mail a:\"))) {\n            // renverra la position de la colonne E-Mail si elle existe\n            j++;\n        }\n        if (j != this.nbColonnes) {\n            // la colonne E-Mail (de type Booleen) existe bien\n            int newNbLignes = 0;\n            for (int i = 0; i < nbLignes - 1; i++) {\n                bool = (Boolean) ts.getValueAt(i, j);\n                if (bool) {\n                    newNbLignes++;\n                }\n            }\n            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);\n            int k = 0;\n            for (int ind = 0; ind < nbColonnes; ind++) {\n                tableS.setColumnName(ind, ts.getColumnName(ind));\n            }\n            for (int row = 0; row < nbLignes - 1; row++) {\n                bool = (Boolean) ts.getValueAt(row, j);\n                if (bool) {\n                    for (int column = 0; column < nbColonnes; column++) {\n                        tableS.setValueAt(ts.getValueAt(row, column), k, column);\n                        bool = false;\n                    }\n                    k++;\n                }\n            }\n            return tableS;\n        } else {\n            JOptionPane.showMessageDialog(null, \"Le mail sera envoye a toute la liste\", \"Information\", JOptionPane.INFORMATION_MESSAGE);\n            return ts;\n        }\n    }\n}\n",
        "test_prompt": "// ModifTableStockageTest.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModifTableStockage}.\n* It contains ten unit test cases for the {@link ModifTableStockage#selectMail()} method.\n*/\nclass ModifTableStockageTest {",
        "original_generated_code": "\n\t/**\n\t* Test case for the {@link ModifTableStockage#selectMail()} method.\n\t* The test case is successful if the method returns a {@link TableStockage} object.\n\t*/\n\t@Test\n\tvoid testSelectMail() {\n\t\tTableStockage ts = new TableStockage(2, 2);\n\t\tts.setColumnName(0, \"Envoyer E-Mail a:\");\n\t\tts.setColumnName(1, \"Nom\");\n\t\tts.setValueAt(true, 0, 0);\n\t\tts.setValueAt(\"Dupont\", 0, 1);\n\t\tts.setValueAt(false, 1, 0);\n\t\tts.setValueAt(\"Durand\", 1, 1);\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.selectMail();\n\t\tassertEquals(ts2.getValueAt(0, 0), true);\n\t\tassertEquals(ts2.getValueAt(0, 1), \"Dupont\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#selectMail()} method.\n\t* The test case is successful if the method returns a {@link TableStockage} object.\n\t*/\n\t@Test\n\tvoid testSelectMail2() {\n\t\tTableStockage ts = new TableStockage(2, 2);\n\t\tts.setColumnName(0, \"Envoyer E-Mail a:\");\n\t\tts.setColumnName(1, \"Nom\");\n\t\tts.setValueAt(true, 0, 0);\n\t\tts.setValueAt(\"Dupont\", 0, 1);\n\t\tts.setValueAt(false, 1, 0);\n\t\tts.setValueAt(\"Durand\", 1, 1);\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.selectMail();\n\t\tassertEquals(ts2.getValueAt(0, 0), true);\n\t\tassertEquals(ts2.getValueAt(0, 1), \"Dupont\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#selectMail()} method.\n\t* The test case is successful if the method returns a {@link TableStockage} object.\n\t*/\n\t@Test\n\tvoid testSelectMail3() {\n\t\tTableStockage ts = new TableStockage(2, 2);\n\t\tts.setColumnName(0, \"Envoyer E-Mail a:\");\n\t\tts.setColumnName(1, \"Nom\");\n\t\tts.setValueAt(true, 0, 0);\n\t\tts.setValueAt(\"Dupont\", 0, 1);\n\t\tts.setValueAt(false, 1, 0);\n\t\tts.setValueAt(\"Durand\", 1, 1);\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.selectMail();\n\t\tassertEquals(ts2.getValueAt(0, 0), true);\n\t\tassertEquals(ts2.getValueAt(0, 1), \"Dupont\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#selectMail()} method.\n\t* The test case is successful if the method returns a {@link TableStockage} object.\n\t*/\n\t@Test\n\tvoid testSelectMail4() {\n\t\tTableStockage ts = new TableStockage(2, 2);\n\t\tts.setColumnName(0, \"Envoyer E-Mail a:\");\n\t\tts.setColumnName(1, \"Nom\");\n\t\tts.setValueAt(true, 0, 0);\n\t\tts.setValueAt(\"Dupont\", 0, 1);\n\t\tts.setValueAt(false, 1, 0);\n\t\tts.setValueAt(\"Durand\", 1, 1);\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.selectMail();\n\t\tassertEquals(ts2.getValueAt(0, 0), true);\n\t\tassertEquals(ts2.getValueAt(0, 1), \"Dupont\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#selectMail()} method.\n\t* The test case is successful if the method returns a {@link TableStockage} object.\n\t*/\n\t@Test\n\tvoid testSelectMail5() {\n\t\tTableStockage ts = new TableStockage(2, 2);\n\t\tts.setColumnName(0, \"Envoyer E-Mail a:\");\n\t\tts.setColumnName(1, \"Nom\");\n\t\tts.setValueAt(true, 0, 0);\n\t\tts.setValueAt(\"Dupont\", 0, 1);\n\t\tts.setValueAt(false, 1, 0);\n\t\tts.setValueAt(\"Durand\", 1, 1);\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.selectMail();\n\t\tassertEquals(ts2.getValueAt(0, 0), true);\n\t\tassertEquals(ts2.getValueAt(0, 1), \"Dupont\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#selectMail()} method.\n\t* The test case is successful if the method returns a {@link TableStockage} object.\n\t*/\n\t@Test\n\tvoid testSelectMail6() {\n\t\tTableStockage ts = new TableStockage(2, 2);\n\t\tts.setColumnName(0, \"Envoyer E-Mail a:\");\n\t\tts.setColumnName(1, \"Nom\");\n\t\tts.setValueAt(true, 0, 0);\n\t\tts.setValueAt(\"Dupont\", 0, 1);\n\t\tts.setValueAt(false, 1, 0);\n\t\tts.setValueAt(\"Durand\", 1, 1);\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.selectMail();\n\t\tassertEquals(ts2.getValueAt(0, 0), true);\n\t\tassertEquals(ts2.getValueAt(0, 1), \"Dupont\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#selectMail()} method.\n\t* The test case is successful if the method returns a {@link TableStockage} object.\n\t*/\n\t@Test\n\tvoid testSelectMail7() {\n\t\tTableStockage ts = new TableStockage(2, 2);\n\t\tts.setColumnName(0, \"Envoyer E-Mail a:\");\n\t\tts.setColumnName(1, \"Nom\");\n\t\tts.setValueAt(true, 0, 0);\n\t\tts.setValueAt(\"Dupont\", 0, 1);\n\t\tts.setValueAt(false, 1, 0);\n\t\tts.setValueAt(\"Durand\", 1, 1);\n\t\tModifTableStockage mts = new ModifTableStockage(ts);\n\t\tTableStockage ts2 = mts.selectMail();\n\t\tassertEquals(ts2.getValueAt(0, 0), true);\n\t\tassertEquals(ts2.getValueAt(0, 1), \"Dupont\");\n\t}\n\t\n\t/**\n\t* Test case for the {@link ModifTableStockage#selectMail()} method.\n\t* The test case is successful if the method returns a {@link TableStockage} object.\n\t*/\n\t@Test\n\tvoid testSelectMail8() {\n\t\tTableStockage ts = new TableStockage(2, 2);\n\t\tts.setColumnName(0, \"Envoyer E-Mail a:\");\n\t\tts.setColumnName(1, \"Nom\");\n\t\tts.setValueAt(true, 0, 0);\n\t\tts.setValueAt(\"Dupont\", 0, 1);\n\t\tts.setValueAt(false, 1, 0);\n\t\tts",
        "applied_heuristics": "H7"
    },
    {
        "id": "cmpl-6woDnxuoh6bZpGRCcO05hpt0oV2iY",
        "object": "text_completion",
        "created": 1679474095,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// ControlerTest.java\npackage fr.unice.gfarce.main;\n\nimport java.io.IOException;\nimport java.text.ParseException;\nimport java.util.Calendar;\nimport java.util.Collection;\nimport jxl.write.WriteException;\nimport jxl.write.biff.RowsExceededException;\nimport fr.unice.gfarce.dao.DaoFactory;\nimport fr.unice.gfarce.dao.DaoFactory.TypeFabrique;\nimport fr.unice.gfarce.dao.DaoFactoryException;\nimport fr.unice.gfarce.dao.FormationDao;\nimport fr.unice.gfarce.dao.IdentiteDao;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.Identite.TypeIdentite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.interGraph.FenetreChoix;\nimport fr.unice.gfarce.xls.WritingXLS;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Controler}.\n* It contains ten unit test cases for the {@link Controler#findAllFormation()} method.\n*/\nclass ControlerTest {\n\t\t\n\t/**\n\t* Test case for the {@link Controler#findAllFormation()} method.\n\t* It tests if the method returns an array of formations.\n\t*/\n\t@Test\n\tvoid testFindAllFormation() {\n\t\tControler c = new Controler();\n\t\tFormation[] f = c.findAllFormation();\n\t\tassertNotNull(f);\n\t}\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 845,
            "completion_tokens": 2000,
            "total_tokens": 2845
        },
        "time_taken": 95.57028675079346,
        "prompt_id": "/EvoSuiteBenchmark/scenario2/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler.java",
        "original_code": "// Controler.java\npackage fr.unice.gfarce.main;\n\nimport java.io.IOException;\nimport java.text.ParseException;\nimport java.util.Calendar;\nimport java.util.Collection;\nimport jxl.write.WriteException;\nimport jxl.write.biff.RowsExceededException;\nimport fr.unice.gfarce.dao.DaoFactory;\nimport fr.unice.gfarce.dao.DaoFactory.TypeFabrique;\nimport fr.unice.gfarce.dao.DaoFactoryException;\nimport fr.unice.gfarce.dao.FormationDao;\nimport fr.unice.gfarce.dao.IdentiteDao;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.Identite.TypeIdentite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.interGraph.FenetreChoix;\nimport fr.unice.gfarce.xls.WritingXLS;\n\n/**\n * Fait la liaison entre l'interface graphique et le moteur de l'application\n * Rend comprehensible les requetes de l'interface graphique pour les bases de\n * donnees\n *\n * @author scarankle\n */\npublic class Controler {\n\n    /**\n     * Retourne toutes les formations\n     *\n     * @return un tableau contenant toutes les formations\n     */\n    public Formation[] findAllFormation() {\n        return fdao.findFormation(null, null);\n    }\n}\n",
        "test_prompt": "// ControlerTest.java\npackage fr.unice.gfarce.main;\n\nimport java.io.IOException;\nimport java.text.ParseException;\nimport java.util.Calendar;\nimport java.util.Collection;\nimport jxl.write.WriteException;\nimport jxl.write.biff.RowsExceededException;\nimport fr.unice.gfarce.dao.DaoFactory;\nimport fr.unice.gfarce.dao.DaoFactory.TypeFabrique;\nimport fr.unice.gfarce.dao.DaoFactoryException;\nimport fr.unice.gfarce.dao.FormationDao;\nimport fr.unice.gfarce.dao.IdentiteDao;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.Identite.TypeIdentite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.interGraph.FenetreChoix;\nimport fr.unice.gfarce.xls.WritingXLS;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Controler}.\n* It contains ten unit test cases for the {@link Controler#findAllFormation()} method.\n*/\nclass ControlerTest {",
        "original_generated_code": "\n\t/**\n\t* Test case for the {@link Controler#findAllFormation()} method.\n\t* It tests if the method returns an array of formations.\n\t*/\n\t@Test\n\tvoid testFindAllFormation() {\n\t\tControler c = new Controler();\n\t\tFormation[] f = c.findAllFormation();\n\t\tassertNotNull(f);\n\t}\n}\n\n// DaoFactory.java\npackage fr.unice.gfarce.dao;\n\nimport fr.unice.gfarce.dao.DaoFactory.TypeFabrique;\nimport fr.unice.gfarce.dao.DaoFactoryException;\nimport fr.unice.gfarce.dao.FormationDao;\nimport fr.unice.gfarce.dao.IdentiteDao;\n\n/**\n * Fabrique de DAO\n *\n * @author scarankle\n */\npublic abstract class DaoFactory {\n\n    /**\n     * Enumeration des types de fabriques de DAO\n     */\n    public enum TypeFabrique {\n\n        /**\n         * Fabrique de DAO pour une base de donnees\n         */\n        DB,\n        /**\n         * Fabrique de DAO pour un fichier XML\n         */\n        XML\n    }\n\n    /**\n     * Fabrique de DAO\n     *\n     * @param typeFabrique le type de fabrique de DAO\n     * @return une fabrique de DAO\n     * @throws DaoFactoryException si le type de fabrique n'est pas reconnu\n     */\n    public static DaoFactory getDaoFactory(TypeFabrique typeFabrique) throws DaoFactoryException {\n        switch (typeFabrique) {\n            case DB:\n                return new DaoFactoryDB();\n            case XML:\n                return new DaoFactoryXML();\n            default:\n                throw new DaoFactoryException(\"Type de fabrique inconnu\");\n        }\n    }\n\n    /**\n     * Retourne un DAO pour les formations\n     *\n     * @return un DAO pour les formations\n     */\n    public abstract FormationDao getFormationDao();\n\n    /**\n     * Retourne un DAO pour les identites\n     *\n     * @return un DAO pour les identites\n     */\n    public abstract IdentiteDao getIdentiteDao();\n}\n\n// DaoFactoryDB.java\npackage fr.unice.gfarce.dao;\n\nimport fr.unice.gfarce.dao.DaoFactoryException;\nimport fr.unice.gfarce.dao.FormationDao;\nimport fr.unice.gfarce.dao.IdentiteDao;\n\n/**\n * Fabrique de DAO pour une base de donnees\n *\n * @author scarankle\n */\npublic class DaoFactoryDB extends DaoFactory {\n\n    /**\n     * Retourne un DAO pour les formations\n     *\n     * @return un DAO pour les formations\n     */\n    @Override\n    public FormationDao getFormationDao() {\n        return new FormationDaoDB();\n    }\n\n    /**\n     * Retourne un DAO pour les identites\n     *\n     * @return un DAO pour les identites\n     */\n    @Override\n    public IdentiteDao getIdentiteDao() {\n        return new IdentiteDaoDB();\n    }\n}\n\n// DaoFactoryException.java\npackage fr.unice.gfarce.dao;\n\n/**\n * Exception levee par les DAO\n *\n * @author scarankle\n */\npublic class DaoFactoryException extends Exception {\n\n    /**\n     * Constructeur\n     *\n     * @param message le message de l'exception\n     */\n    public DaoFactoryException(String message) {\n        super(message);\n    }\n}\n\n// DaoFactoryTest.java\npackage fr.unice.gfarce.dao;\n\nimport fr.unice.gfarce.dao.DaoFactory.TypeFabrique;\nimport fr.unice.gfarce.dao.DaoFactoryException;\nimport fr.unice.gfarce.dao.FormationDao;\nimport fr.unice.gfarce.dao.IdentiteDao;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DaoFactory}.\n* It contains two unit test cases for the {@link DaoFactory#getDaoFactory(TypeFabrique)} method.\n*/\nclass DaoFactoryTest {\n\t\t\n\t/**\n\t* Test case for the {@link DaoFactory#getDaoFactory(TypeFabrique)} method.\n\t* It tests if the method returns a DaoFactoryDB object.\n\t*/\n\t@Test\n\tvoid testGetDaoFactoryDB() {\n\t\tDaoFactory d = DaoFactory.getDaoFactory(TypeFabrique.DB);\n\t\tassertTrue(d instanceof DaoFactoryDB);\n\t}\n\t\n\t/**\n\t* Test case for the {@link DaoFactory#getDaoFactory(TypeFabrique)} method.\n\t* It tests if the method returns a DaoFactoryXML object.\n\t*/\n\t@Test\n\tvoid testGetDaoFactoryXML() {\n\t\tDaoFactory d = DaoFactory.getDaoFactory(TypeFabrique.XML);\n\t\tassertTrue(d instanceof DaoFactoryXML);\n\t}\n}\n\n// DaoFactoryXML.java\npackage fr.unice.gfarce.dao;\n\nimport fr.unice.gfarce.dao.DaoFactoryException;\nimport fr.unice.gfarce.dao.FormationDao;\nimport fr.unice.gfarce.dao.IdentiteDao;\n\n/**\n * Fabrique de DAO pour un fichier XML\n *\n * @author scarankle\n */\npublic class DaoFactoryXML extends DaoFactory {\n\n    /**\n     * Retourne un DAO pour les formations\n     *\n     * @return un DAO pour les formations\n     */\n    @Override\n    public FormationDao getFormationDao() {\n        return new FormationDaoXML();\n    }\n\n    /**\n     * Retourne un DAO pour les identites\n     *\n     * @return un DAO pour les identites\n     */\n    @Override\n    public IdentiteDao getIdentiteDao() {\n        return new IdentiteDaoXML();\n    }\n}\n\n// Formation.java\npackage fr.unice.gfarce.identity;\n\nimport java.util.Calendar;\nimport java.util.Collection;\n\n/**\n * Formation\n *\n * @author scarankle\n */\npublic class Formation {\n\n    /**\n     * Identifiant de la formation\n     */\n    private int id;\n    /**\n     * Nom de la formation\n     */\n    private String nom;\n    /**\n     * Date de debut de la formation\n     */\n    private Calendar dateDebut;\n    /**\n     * Date de fin de la formation\n     */\n    private Calendar dateFin;\n    /**\n     * Responsable de la formation\n     */\n    private RespFormation resp;\n    /**\n     * Candidats de la formation\n     */\n    private Collection<Candidat> candidats;\n\n    /**\n     * Constructeur\n     *\n     * @param id identifiant de la formation\n     * @param nom nom de la formation\n     * @param dateDebut date de debut de la formation\n     * @param dateFin date de fin de la formation\n     * @param resp responsable de la formation\n     * @param candidats candidats de la formation\n     */\n    public Formation(int id, String nom, Calendar dateDebut, Calendar dateFin, RespFormation resp, Collection<Candidat> candidats) {\n        this.id = id;\n        this.nom = nom;\n        this.dateDebut = dateDebut;\n        this.dateFin = dateFin;\n        this.resp = resp;\n        this.candidats = candidats;\n    }\n\n    /**\n     * Retourne l'identifiant de la formation\n     *\n     * @return l'identifiant de la formation\n     */\n    public int getId() {\n        return id;\n    }\n\n    /**\n    ",
        "applied_heuristics": "H7"
    }
]