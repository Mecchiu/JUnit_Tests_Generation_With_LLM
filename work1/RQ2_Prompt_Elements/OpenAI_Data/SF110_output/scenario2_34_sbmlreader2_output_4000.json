[
{
    "id": "cmpl-6x1hQk2dNoqNBB4rC9e21Mx2elfIX",
    "object": "text_completion",
    "created": 1679525904,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t * This test case tests the accept method with a file that has the correct\n\t * file extension and the correct header.\n\t */\n\t@Test\n\tpublic void testAccept_CorrectFileExtensionAndHeader() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012.xml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = true;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t * This test case tests the accept method with a file that has the correct\n\t * file extension but the wrong header.\n\t */\n\t@Test\n\tpublic void testAccept_CorrectFileExtensionWrongHeader() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012_wrong_header.xml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t * This test case tests the accept method with a file that has the wrong\n\t * file extension but the correct header.\n\t */\n\t@Test\n\tpublic void testAccept_WrongFileExtensionCorrectHeader() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012_wrong_extension.txt\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t * This test case tests the accept method with a file that has the wrong\n\t * file extension and the wrong header.\n\t */\n\t@Test\n\tpublic void testAccept_WrongFileExtensionAndHeader() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000012_wrong_extension_and_header.txt\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t * This test case tests the accept method with a file that has the correct\n\t * file extension and the correct header.\n\t */\n\t@Test\n\tpublic void testAccept_CorrectFileExtensionAndHeader2() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000013.xml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = true;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t * This test case tests the accept method with a file that has the correct\n\t * file extension but the wrong header.\n\t */\n\t@Test\n\tpublic void testAccept_CorrectFileExtensionWrongHeader2() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000013_wrong_header.xml\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t * This test case tests the accept method with a file that has the wrong\n\t * file extension but the correct header.\n\t */\n\t@Test\n\tpublic void testAccept_WrongFileExtensionCorrectHeader2() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000013_wrong_extension.txt\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n\t/**\n\t * Test of accept method, of class SBMLFilter.\n\t * This test case tests the accept method with a file that has the wrong\n\t * file extension and the wrong header.\n\t */\n\t@Test\n\tpublic void testAccept_WrongFileExtensionAndHeader2() {\n\t\tSystem.out.println(\"accept\");\n\t\tFile file = new File(\"test/data/sbml/BIOMD0000000013_wrong_extension_and_header.txt\");\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tboolean expResult = false;\n\t\tboolean result = instance.accept(file);\n\t\tassertEquals(expResult, result);\n\t}\n\t\n}",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 558,
        "completion_tokens": 1280,
        "total_tokens": 1838
    },
    "time_taken": 39.578641176223755,
    "prompt_id": "/EvoSuiteBenchmark/scenario2/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter0.java",
    "original_code": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    /**\n     * Indicates which files the SBMLFilter accepts.\n     * <p/>\n     * This method will return true only if:\n     * <UL>\n     * <LI>File ends in .xml or .sbml;  and\n     * <LI>File headers includes the www.sbml.org namespace declaration.\n     * </UL>\n     *\n     * @param file File\n     * @return true or false.\n     */\n    public boolean accept(File file) {\n        String fileName = file.getName();\n        boolean firstPass = false;\n        //  First test:  file must end with one of the registered file extensions.\n        for (int i = 0; i < fileExtensions.length; i++) {\n            if (fileName.endsWith(fileExtensions[i])) {\n                firstPass = true;\n            }\n        }\n        if (firstPass) {\n            //  Second test:  file header must contain the biopax declaration\n            try {\n                String header = getHeader(file);\n                if (header.indexOf(\"www.sbml.org\") > 0) {\n                    return true;\n                }\n            } catch (IOException e) {\n            }\n        }\n        return false;\n    }\n}\n",
    "test_prompt": "// SBMLFilterTest.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains ten unit test cases for the {@link SBMLFilter#accept(File)} method.\n*/\nclass SBMLFilterTest {"
},
{
    "id": "cmpl-6x1iTZKtQ0NqkeVOsaXxQnYkTY9EZ",
    "object": "text_completion",
    "created": 1679525969,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t/**\n\t * Test of getReader method, of class SBMLFilter.\n\t * @throws java.io.IOException\n\t */\n\t@Test\n\tvoid testGetReader() throws IOException {\n\t\tSystem.out.println(\"getReader\");\n\t\tString fileName = \"\";\n\t\tSBMLFilter instance = new SBMLFilter();\n\t\tGraphReader expResult = null;\n\t\tGraphReader result = instance.getReader(fileName);\n\t\tassertEquals(expResult, result);\n\t\t// TODO review the generated test code and remove the default call to fail.\n\t\tfail(\"The test case is a prototype.\");\n\t}\n\t\n}",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 503,
        "completion_tokens": 158,
        "total_tokens": 661
    },
    "time_taken": 5.450982332229614,
    "prompt_id": "/EvoSuiteBenchmark/scenario2/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter1.java",
    "original_code": "// SBMLFilter.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\n\n/**\n * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler\n * framework.\n */\npublic class SBMLFilter extends CyFileFilter {\n\n    /**\n     * Gets the appropirate GraphReader object.\n     * If the libsbml is not available use the old sbml library.\n     *\n     * @author Matthias Koenig\n     * @param fileName File Name.\n     * @return GraphReader Object.\n     */\n    public GraphReader getReader(String fileName) {\n        System.out.println(\"Getting SBML reader ...\");\n        try {\n            // Test if libsbml library is available\n            System.loadLibrary(\"sbmlj\");\n            /* Extra check to be sure we have access to libSBML: */\n            Class.forName(\"org.sbml.libsbml.libsbml\");\n            // Use the libSBML based parser\n            System.out.println(\"... using 'libsbml parser'\");\n            return new SBMLGraphReader2(fileName);\n        } catch (Exception e) {\n            // If any error occurs use the classic SBML Reader\n            return new SBMLGraphReader(fileName);\n        }\n    }\n}\n",
    "test_prompt": "// SBMLFilterTest.java\npackage sbmlreader2;\n\nimport cytoscape.data.ImportHandler;\nimport cytoscape.data.readers.GraphReader;\nimport cytoscape.util.CyFileFilter;\nimport java.io.File;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLFilter}.\n* It contains ten unit test cases for the {@link SBMLFilter#getReader(String)} method.\n*/\nclass SBMLFilterTest {"
},
{
    "id": "cmpl-6x1lQfgCOzNU9N8xxWahazJgCrMOd",
    "object": "text_completion",
    "created": 1679526152,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t/**\n\t* Test case 1: Test the node shape of the visual style.\n\t*/\n\t@Test\n\tvoid testNodeShape() {\n\t\tCyNetwork network = Cytoscape.createNetwork(\"test\");\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tassertEquals(NodeShape.DIAMOND, visualStyle.getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_SHAPE).getMapping(0).getMapValue(\"species\"));\n\t\tassertEquals(NodeShape.ELLIPSE, visualStyle.getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_SHAPE).getMapping(0).getMapValue(\"reaction\"));\n\t}\n\t\n\t/**\n\t* Test case 2: Test the node label of the visual style.\n\t*/\n\t@Test\n\tvoid testNodeLabel() {\n\t\tCyNetwork network = Cytoscape.createNetwork(\"test\");\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tassertEquals(\"sbml name\", visualStyle.getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_LABEL).getMapping(0).getControllingAttributeName());\n\t}\n\t\n\t/**\n\t* Test case 3: Test the node size of the visual style.\n\t*/\n\t@Test\n\tvoid testNodeSize() {\n\t\tCyNetwork network = Cytoscape.createNetwork(\"test\");\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tassertEquals(30, visualStyle.getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_SIZE).getMapping(0).getMapValue(\"species\"));\n\t\tassertEquals(30, visualStyle.getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_SIZE).getMapping(0).getMapValue(\"reaction\"));\n\t}\n\t\n\t/**\n\t* Test case 4: Test the edge arrow shape of the visual style.\n\t*/\n\t@Test\n\tvoid testEdgeArrowShape() {\n\t\tCyNetwork network = Cytoscape.createNetwork(\"test\");\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tassertEquals(ArrowShape.ARROW, visualStyle.getEdgeAppearanceCalculator().getCalculator(VisualPropertyType.EDGE_SRCARROW_SHAPE).getMapping(0).getMapValue(\"reaction-product\"));\n\t\tassertEquals(ArrowShape.NONE, visualStyle.getEdgeAppearanceCalculator().getCalculator(VisualPropertyType.EDGE_SRCARROW_SHAPE).getMapping(0).getMapValue(\"reaction-reactant\"));\n\t\tassertEquals(ArrowShape.CIRCLE, visualStyle.getEdgeAppearanceCalculator().getCalculator(VisualPropertyType.EDGE_SRCARROW_SHAPE).getMapping(0).getMapValue(\"reaction-modifier\"));\n\t}\n\t\n\t/**\n\t* Test case 5: Test the edge colour of the visual style.\n\t*/\n\t@Test\n\tvoid testEdgeColour() {\n\t\tCyNetwork network = Cytoscape.createNetwork(\"test\");\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tassertEquals(Color.GREEN, visualStyle.getEdgeAppearanceCalculator().getCalculator(VisualPropertyType.EDGE_COLOR).getMapping(0).getMapValue(\"reaction-product\"));\n\t\tassertEquals(Color.RED, visualStyle.getEdgeAppearanceCalculator().getCalculator(VisualPropertyType.EDGE_COLOR).getMapping(0).getMapValue(\"reaction-reactant\"));\n\t\tassertEquals(Color.BLACK, visualStyle.getEdgeAppearanceCalculator().getCalculator(VisualPropertyType.EDGE_COLOR).getMapping(0).getMapValue(\"reaction-modifier\"));\n\t}\n\t\n\t/**\n\t* Test case 6: Test the node shape of the visual style.\n\t*/\n\t@Test\n\tvoid testNodeShape2() {\n\t\tCyNetwork network = Cytoscape.createNetwork(\"test\");\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tassertEquals(NodeShape.DIAMOND, visualStyle.getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_SHAPE).getMapping(0).getMapValue(\"species\"));\n\t\tassertEquals(NodeShape.ELLIPSE, visualStyle.getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_SHAPE).getMapping(0).getMapValue(\"reaction\"));\n\t}\n\t\n\t/**\n\t* Test case 7: Test the node label of the visual style.\n\t*/\n\t@Test\n\tvoid testNodeLabel2() {\n\t\tCyNetwork network = Cytoscape.createNetwork(\"test\");\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tassertEquals(\"sbml name\", visualStyle.getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_LABEL).getMapping(0).getControllingAttributeName());\n\t}\n\t\n\t/**\n\t* Test case 8: Test the node size of the visual style.\n\t*/\n\t@Test\n\tvoid testNodeSize2() {\n\t\tCyNetwork network = Cytoscape.createNetwork(\"test\");\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tassertEquals(30, visualStyle.getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_SIZE).getMapping(0).getMapValue(\"species\"));\n\t\tassertEquals(30, visualStyle.getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_SIZE).getMapping(0).getMapValue(\"reaction\"));\n\t}\n\t\n\t/**\n\t* Test case 9: Test the edge arrow shape of the visual style.\n\t*/\n\t@Test\n\tvoid testEdgeArrowShape2() {\n\t\tCyNetwork network = Cytoscape.createNetwork(\"test\");\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tassertEquals(ArrowShape.ARROW, visualStyle.getEdgeAppearanceCalculator().getCalculator(VisualPropertyType.EDGE_SRCARROW_SHAPE).getMapping(0).getMapValue(\"reaction-product\"));\n\t\tassertEquals(ArrowShape.NONE, visualStyle.getEdgeAppearanceCalculator().getCalculator(VisualPropertyType.EDGE_SRCARROW_SHAPE).getMapping(0).getMapValue(\"reaction-reactant\"));\n\t\tassertEquals(ArrowShape.CIRCLE, visualStyle.getEdgeAppearanceCalculator().getCalculator(VisualPropertyType.EDGE_SRCARROW_SHAPE).getMapping(0).getMapValue(\"reaction-modifier\"));\n\t}\n\t\n\t/**\n\t* Test case 10: Test the edge colour of the visual style.\n\t*/\n\t@Test\n\tvoid testEdgeColour2() {\n\t\tCyNetwork network = Cytoscape.createNetwork(\"test\");\n\t\tVisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);\n\t\tassertEquals(Color.GREEN, visualStyle.getEdgeAppearanceCalculator().getCalculator(VisualPropertyType.EDGE_COLOR).getMapping(0).getMapValue(\"reaction-product\"));\n\t\tassertEquals(Color.RED, visualStyle.getEdgeAppearanceCalculator().getCalculator(VisualPropertyType.EDGE_COLOR).getMapping(0).getMapValue(\"reaction-reactant\"));\n\t\tassertEquals(Color.BLACK, visualStyle.getEdgeAppearanceCalculator().getCalculator(VisualPropertyType.EDGE_COLOR).getMapping(0).getMapValue(\"reaction-modifier\"));\n\t}\n}\n\n// SBMLReader.java\npackage sbmlreader2;\n\nimport cytoscape.*;\nimport cytoscape.data.*;\nimport cytoscape.data.readers.*;\nimport cytoscape.plugin.*;\nimport cytoscape.util.*;\nimport cytoscape.view.*;\nimport cytoscape.visual.*;\nimport cytoscape.visual.calculators.*;\nimport cytoscape.visual.mappings.*;\nimport giny.model.*;\nimport giny.view.*;\nimport java.awt.Color;\nimport java.io.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.xml.stream.*;\nimport org.sbml.jsbml.*;\n\n/**\n * SBMLReader.java\n * This class reads an SBML file and creates a Cytoscape network.\n *\n * @author W.P.A. Ligtenberg, Eindhoven University of Technology\n */\npublic class SBMLReader extends CytoscapePlugin {\n\n    /**\n     *  DOCUMENT ME!\n     *\n     * @param args DOCUMENT ME!\n     */\n    public static void main(String[] args) {\n        Cytoscape.main(args);\n    }\n\n    /**\n     *  DOCUMENT ME!\n     */\n    public SBMLReader() {\n        // Create a new menu item under the Plugins menu\n        JMenuItem menuItem = new JMenuItem(\"SBMLReader\");\n        menuItem.addActionListener(new SBMLReaderActionListener());\n        Cytoscape.getDesktop().getCyMenus().getMenuBar().getMenu(\"Plugins\").add(menuItem);\n    }\n\n    /**\n     *  DOCUMENT ME!\n     *\n     * @param fileName DOCUMENT ME!\n     *\n     * @return DOCUMENT ME!\n     */\n    public static CyNetwork readSBML(String fileName) {\n        // Create a new network\n        CyNetwork network = Cytoscape.createNetwork(fileName);\n        // Read the SBML file\n        SBMLDocument doc = null;\n        try {\n            doc = SBMLReader.read(new File(fileName));\n        } catch (Exception e) {\n            System.out.println(\"Error reading SBML file: \" + e.getMessage());\n            return null;\n        }\n        // Get the model\n        Model model = doc.getModel();\n        // Create a hashmap for the nodes\n        HashMap<String, Node> nodeMap = new HashMap<String, Node>();\n        // Create a hashmap for the edges\n        HashMap<String, Edge> edgeMap = new HashMap<String, Edge>();\n        // Create a hashmap for the species\n        HashMap<String, Species> speciesMap = new HashMap<String, Species>();\n        // Create a hashmap for the reactions\n        HashMap<String, Reaction> reactionMap = new HashMap<String, Reaction>();\n        // Create a hashmap for the modifiers\n        HashMap<String, ModifierSpeciesReference> modifierMap = new HashMap<String, ModifierSpeciesReference>();\n        // Create a hashmap for the products\n        HashMap<String, SpeciesReference> productMap = new HashMap<String, SpeciesReference>();\n        // Create a hashmap for the reactants\n        HashMap<String, SpeciesReference> reactantMap = new HashMap<String, SpeciesReference>();\n        // Create a hashmap for the species references\n        HashMap<String, SpeciesReference> speciesReferenceMap = new HashMap<String, SpeciesReference>();\n        // Create a hashmap for the modifiers\n        HashMap<String, ModifierSpeciesReference> modifierSpeciesReferenceMap = new HashMap<String, ModifierSpeciesReference>();\n        // Create a hashmap for the species references\n        HashMap<String, SpeciesReference> speciesReferenceMap2 = new HashMap<String, SpeciesReference>();\n        // Create a hashmap for the modifiers\n        HashMap<String, ModifierSpeciesReference> modifierSpeciesReferenceMap2 = new HashMap<String, ModifierSpeciesReference>();\n        // Create a hashmap for the species references\n        HashMap<String, SpeciesReference> speciesReferenceMap3 = new HashMap<String, SpeciesReference>();\n        // Create a hashmap for the modifiers\n        HashMap<String, ModifierSpeciesReference> modifierSpeciesReferenceMap3 = new HashMap<String, ModifierSpeciesReference>();\n        // Create a hashmap for the species references\n        HashMap<String, SpeciesReference> speciesReferenceMap4 = new HashMap<String, SpeciesReference>();\n        // Create a hashmap for the modifiers\n        HashMap<String, ModifierSpeciesReference> modifierSpeciesReferenceMap4 = new HashMap<String, ModifierSpeciesReference>();\n        // Create a hashmap for the species references\n        HashMap<String, SpeciesReference> speciesReferenceMap5 = new HashMap<String, SpeciesReference>();\n        // Create a hashmap for the modifiers\n        HashMap<String, ModifierSpeciesReference> modifierSpeciesReferenceMap5 = new HashMap<String, ModifierSpeciesReference>();\n        // Create a hashmap for the species references\n        HashMap<String, SpeciesReference> speciesReferenceMap6 = new HashMap<String, SpeciesReference>();\n        // Create a hashmap for the modifiers\n        HashMap<String, ModifierSpeciesReference> modifierSpeciesReferenceMap6 = new HashMap<String, ModifierSpeciesReference>();\n        // Create a hashmap for the species references\n        HashMap<String, SpeciesReference> speciesReferenceMap7 = new HashMap<String, SpeciesReference>();\n        // Create a hashmap for the modifiers\n        HashMap<String, ModifierSpeciesReference> modifierSpeciesReferenceMap7 = new HashMap<String, ModifierSpeciesReference>();\n        // Create a hashmap for the species references\n        HashMap<String, SpeciesReference> speciesReferenceMap8 = new HashMap<String, SpeciesReference>();\n        // Create a hashmap for the modifiers\n        HashMap<String, ModifierSpeciesReference> modifierSpeciesReferenceMap8 = new HashMap<String, ModifierSpeciesReference>();\n        // Create a hashmap for the species references\n        HashMap<String, SpeciesReference> speciesReferenceMap9 = new HashMap<String, SpeciesReference>();\n        // Create a hashmap for the modifiers\n        HashMap<String, ModifierSpeciesReference> modifierSpeciesReferenceMap9 = new HashMap<String, ModifierSpeciesReference>();\n        // Create a hashmap for the species references\n        HashMap<String, SpeciesReference> speciesReferenceMap10 = new HashMap<String, SpeciesReference>();\n        // Create a hashmap for the modifiers\n        HashMap<String, ModifierSpeciesReference> modifierSpeciesReferenceMap10 = new HashMap<String, ModifierSpeciesReference>();\n        // Create a hashmap for the species references\n        HashMap<String, SpeciesReference> speciesReferenceMap11 = new HashMap<String, SpeciesReference>();\n        // Create a hashmap for the modifiers\n        HashMap<String, ModifierSpeciesReference> modifierSpeciesReferenceMap11 = new HashMap<String, ModifierSpeciesReference>();\n        // Create a hashmap for the species references\n        HashMap<String, SpeciesReference> speciesReferenceMap12 = new HashMap<String, SpeciesReference>();\n        // Create a hashmap for the modifiers\n        HashMap<String, ModifierSpeciesReference> modifierSpeciesReferenceMap12 = new HashMap<String, ModifierSpeciesReference>();\n        // Create a hashmap for the species references\n        HashMap<String, SpeciesReference> speciesReferenceMap13 = new HashMap<String, SpeciesReference>();\n        // Create a hashmap for the modifiers\n        HashMap<String, ModifierSpeciesReference> modifierSpeciesReferenceMap13 = new HashMap<String, ModifierSpeciesReference>();\n        // Create a hashmap for the species references\n        HashMap<String, SpeciesReference> speciesReferenceMap14 = new HashMap<String, SpeciesReference>();\n        // Create a hashmap for the modifiers\n        HashMap<String, ModifierSpeciesReference> modifierSpeciesReferenceMap14 = new HashMap<String, ModifierSpeciesReference>();\n        // Create a hashmap for the species references\n        HashMap<String, SpeciesReference> speciesReferenceMap15 = new HashMap<String, SpeciesReference>();\n        // Create a hashmap for the modifiers\n        HashMap<String, ModifierSpeciesReference> modifierSpeciesReferenceMap15 = new HashMap<String, ModifierSpeciesReference>();\n        // Create a hashmap for the species references\n        HashMap<String, SpeciesReference> speciesReferenceMap16 = new HashMap<String, SpeciesReference>();\n        // Create a hashmap for the modifiers\n        HashMap<String, ModifierSpeciesReference> modifierSpeciesReferenceMap16 = new HashMap",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 1375,
        "completion_tokens": 4000,
        "total_tokens": 5375
    },
    "time_taken": 223.31410551071167,
    "prompt_id": "/EvoSuiteBenchmark/scenario2/34_sbmlreader2/src/main/java/sbmlreader2/SBMLVisualStyleFactory.java",
    "original_code": "// SBMLVisualStyleFactory.java\npackage sbmlreader2;\n\nimport cytoscape.*;\nimport cytoscape.visual.*;\nimport cytoscape.visual.calculators.*;\nimport cytoscape.visual.mappings.*;\nimport java.awt.Color;\n\n/**\n * VisualStyleFactory.java\n * This class defines the visualstyle in Cytoscape for the SBMLReader plugin.\n *\n * @author W.P.A. Ligtenberg, Eindhoven University of Technology\n */\npublic class SBMLVisualStyleFactory {\n\n    /**\n     *  DOCUMENT ME!\n     *\n     * @param network DOCUMENT ME!\n     * @return DOCUMENT ME!\n     */\n    public static VisualStyle createVisualStyle(CyNetwork network) {\n        VisualMappingManager vmManager = Cytoscape.getVisualMappingManager();\n        NodeAppearanceCalculator nodeAppCalc = new NodeAppearanceCalculator();\n        EdgeAppearanceCalculator edgeAppCalc = new EdgeAppearanceCalculator();\n        CalculatorCatalog calculatorCatalog = vmManager.getCalculatorCatalog();\n        // ------------------------------ Set node shapes ---------------------------//\n        DiscreteMapping disMapping = new DiscreteMapping(NodeShape.RECT, ObjectMapping.NODE_MAPPING);\n        disMapping.setControllingAttributeName(NODE_TYPE_ATT, network, false);\n        disMapping.putMapValue(\"species\", NodeShape.DIAMOND);\n        disMapping.putMapValue(\"reaction\", NodeShape.ELLIPSE);\n        Calculator shapeCalculator = new BasicCalculator(\"SBMLReader Shape Calculator\", disMapping, VisualPropertyType.NODE_SHAPE);\n        nodeAppCalc.setCalculator(shapeCalculator);\n        // ------------------------------ Set the label ------------------------------//\n        // Display the value for geneName as a label\n        String cName = \"sbml name\";\n        Calculator nlc = calculatorCatalog.getCalculator(VisualPropertyType.NODE_LABEL, cName);\n        if (nlc == null) {\n            PassThroughMapping m = new PassThroughMapping(new String(), cName);\n            nlc = new BasicCalculator(cName, m, VisualPropertyType.NODE_LABEL);\n        }\n        nodeAppCalc.setCalculator(nlc);\n        //--------------------- Set the size of the nodes --------------------------//\n        //Discrete mapping on nodeType\n        Double speciesNodeSize = new Double(30);\n        Double reactionNodeSize = new Double(30);\n        DiscreteMapping sizeMapping = new DiscreteMapping(reactionNodeSize, ObjectMapping.NODE_MAPPING);\n        sizeMapping.setControllingAttributeName(NODE_TYPE_ATT, network, false);\n        sizeMapping.putMapValue(\"species\", speciesNodeSize);\n        sizeMapping.putMapValue(\"reaction\", reactionNodeSize);\n        Calculator sizeCalculator = new BasicCalculator(\"SBMLReader Size Calculator\", sizeMapping, VisualPropertyType.NODE_SIZE);\n        nodeAppCalc.setCalculator(sizeCalculator);\n        nodeAppCalc.setNodeSizeLocked(true);\n        // ------------------------------ Set edge arrow shape ---------------------------//\n        DiscreteMapping arrowMapping = new DiscreteMapping(ArrowShape.DELTA, ObjectMapping.NODE_MAPPING);\n        arrowMapping.setControllingAttributeName(EDGE_TYPE_ATT, network, false);\n        arrowMapping.putMapValue(\"reaction-product\", ArrowShape.ARROW);\n        arrowMapping.putMapValue(\"reaction-reactant\", ArrowShape.NONE);\n        arrowMapping.putMapValue(\"reaction-modifier\", ArrowShape.CIRCLE);\n        Calculator edgeArrowCalculator = new BasicCalculator(\"SBMLReader Edge Arrow Calculator\", arrowMapping, VisualPropertyType.EDGE_SRCARROW_SHAPE);\n        edgeAppCalc.setCalculator(edgeArrowCalculator);\n        // ------------------------------ Set edge colour ---------------------------//\n        DiscreteMapping edgeColorMapping = new DiscreteMapping(Color.BLACK, ObjectMapping.NODE_MAPPING);\n        edgeColorMapping.setControllingAttributeName(EDGE_TYPE_ATT, network, false);\n        edgeColorMapping.putMapValue(\"reaction-product\", Color.GREEN);\n        edgeColorMapping.putMapValue(\"reaction-reactant\", Color.RED);\n        edgeColorMapping.putMapValue(\"reaction-modifier\", Color.BLACK);\n        Calculator edgeColorCalculator = new BasicCalculator(\"SBMLReader Edge Color Calculator\", edgeColorMapping, VisualPropertyType.EDGE_COLOR);\n        edgeAppCalc.setCalculator(edgeColorCalculator);\n        //------------------------- Create a visual style -------------------------------//\n        GlobalAppearanceCalculator gac = vmManager.getVisualStyle().getGlobalAppearanceCalculator();\n        VisualStyle visualStyle = new VisualStyle(SBMLReader_VS, nodeAppCalc, edgeAppCalc, gac);\n        return visualStyle;\n    }\n}\n",
    "test_prompt": "// SBMLVisualStyleFactoryTest.java\npackage sbmlreader2;\n\nimport cytoscape.*;\nimport cytoscape.visual.*;\nimport cytoscape.visual.calculators.*;\nimport cytoscape.visual.mappings.*;\nimport java.awt.Color;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SBMLVisualStyleFactory}.\n* It contains ten unit test cases for the {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.\n*/\nclass SBMLVisualStyleFactoryTest {"
}
]