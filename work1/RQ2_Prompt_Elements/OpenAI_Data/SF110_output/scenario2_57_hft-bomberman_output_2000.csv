ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wqPWRT27SXHovC5D1ISvilkhxB7w,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/client/BomberClient0.java,43.550718784332275,stop,"// BomberClient.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;

/**
 * This is central client class. It is responsible for globally scoped messages
 * and the creation of sessions.
 *
 * @author andi
 */
public class BomberClient extends Observable {

    /**
     * Returns the singleton.
     *
     * @return The only BomberClient instance.
     */
    public static BomberClient getInstance() {
        if (instance == null) {
            logger.info(""Creating BomberClient singleton instance"");
            instance = new BomberClient(""client"");
        }
        return instance;
    }
}
","// BomberClientTest.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#getInstance()} method.
*/
class BomberClientTest {","// BomberClientTest.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#getInstance()} method.
*/
class BomberClientTest {

	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns a {@link BomberClient} object.
	*/
	@Test
	void testGetInstance() {
		BomberClient instance = BomberClient.getInstance();
		assertNotNull(instance);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame2() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame3() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame4() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame5() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame6() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame7() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame8() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame9() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
	
	/**
	* Test case for {@link BomberClient#getInstance()} method.
	* It tests if the method returns the same {@link BomberClient} object.
	*/
	@Test
	void testGetInstanceSame10() {
		BomberClient instance1 = BomberClient.getInstance();
		BomberClient instance2 = BomberClient.getInstance();
		assertSame(instance1, instance2);
	}
}"
cmpl-6wqQUm76DwN2ZzsoduuydazXHwWRs,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/client/BomberClient1.java,27.849323511123657,stop,"// BomberClient.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;

/**
 * This is central client class. It is responsible for globally scoped messages
 * and the creation of sessions.
 *
 * @author andi
 */
public class BomberClient extends Observable {

    /**
     * Tries to connect to the server.
     *
     * @throws RuntimeException Thrown when the connection attempt was not successful.
     */
    public boolean connectToSrv() {
        try {
            //System.out.println(""Connecting..."");
            logger.info(""Establishing a connection "");
            server = new Socket(serverName, serverPort);
            msgSender = new ClientMsgSender(server);
            msgSender.start();
            msgReceiver = new ClientMsgReceiver(server, BomberClient.this);
            msgReceiver.start();
            msgSender.sendMsg(new InfoRequestMsg(InfoRequestMsg.GET_SESSION_LIST));
            logger.info(""connected to "" + serverName);
            return true;
        } catch (IOException e) {
            // TODO Auto-generated catch block
            // e.printStackTrace();
            logger.info(""Connection failed"");
            return false;
        }
    }
}
","// BomberClientTest.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#connectToSrv()} method.
*/
class BomberClientTest {","// BomberClientTest.java
package client;

import java.io.IOException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observable;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.InfoRequestMsg;
import messages.global.JoinSessionMsg;
import messages.global.MapInfo;
import messages.global.SessionDetailsMsg;
import messages.round.ClientQuitRunningSessionMsg;
import org.apache.log4j.Logger;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import client.network.ClientMsgSender;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberClient}.
* It contains ten unit test cases for the {@link BomberClient#connectToSrv()} method.
*/
class BomberClientTest {

	/**
	* Test case 1 for {@link BomberClient#connectToSrv()}.
	* It tests the connection to the server.
	*/
	@Test
	void testConnectToSrv1() {
		BomberClient client = new BomberClient();
		assertTrue(client.connectToSrv());
	}
	
	/**
	* Test case 2 for {@link BomberClient#connectToSrv()}.
	* It tests the connection to the server.
	*/
	@Test
	void testConnectToSrv2() {
		BomberClient client = new BomberClient();
		assertTrue(client.connectToSrv());
	}
	
	/**
	* Test case 3 for {@link BomberClient#connectToSrv()}.
	* It tests the connection to the server.
	*/
	@Test
	void testConnectToSrv3() {
		BomberClient client = new BomberClient();
		assertTrue(client.connectToSrv());
	}
	
	/**
	* Test case 4 for {@link BomberClient#connectToSrv()}.
	* It tests the connection to the server.
	*/
	@Test
	void testConnectToSrv4() {
		BomberClient client = new BomberClient();
		assertTrue(client.connectToSrv());
	}
	
	/**
	* Test case 5 for {@link BomberClient#connectToSrv()}.
	* It tests the connection to the server.
	*/
	@Test
	void testConnectToSrv5() {
		BomberClient client = new BomberClient();
		assertTrue(client.connectToSrv());
	}
	
	/**
	* Test case 6 for {@link BomberClient#connectToSrv()}.
	* It tests the connection to the server.
	*/
	@Test
	void testConnectToSrv6() {
		BomberClient client = new BomberClient();
		assertTrue(client.connectToSrv());
	}
	
	/**
	* Test case 7 for {@link BomberClient#connectToSrv()}.
	* It tests the connection to the server.
	*/
	@Test
	void testConnectToSrv7() {
		BomberClient client = new BomberClient();
		assertTrue(client.connectToSrv());
	}
	
	/**
	* Test case 8 for {@link BomberClient#connectToSrv()}.
	* It tests the connection to the server.
	*/
	@Test
	void testConnectToSrv8() {
		BomberClient client = new BomberClient();
		assertTrue(client.connectToSrv());
	}
	
	/**
	* Test case 9 for {@link BomberClient#connectToSrv()}.
	* It tests the connection to the server.
	*/
	@Test
	void testConnectToSrv9() {
		BomberClient client = new BomberClient();
		assertTrue(client.connectToSrv());
	}
	
	/**
	* Test case 10 for {@link BomberClient#connectToSrv()}.
	* It tests the connection to the server.
	*/
	@Test
	void testConnectToSrv10() {
		BomberClient client = new BomberClient();
		assertTrue(client.connectToSrv());
	}
}"
cmpl-6wqRXswOb1t6rM0fDZpKY0GYSBPuA,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/client/ClientGameRound.java,77.71833038330078,length,"// ClientGameRound.java
package client;

import java.awt.Point;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import org.apache.log4j.Logger;
import client.controller.LocalControl;
import client.gui.StartFrame;
import client.network.ForwardingObserver;
import client.view.BombView;
import client.view.GameCanvas;
import client.view.GameView;
import client.view.GfxFactory;
import client.view.OffGamePainter;
import client.view.PlayerView;
import client.view.PowerUpView;
import client.view.StatusView;
import client.view.TileView;
import common.Bomb;
import common.Constants;
import common.GameModel;
import common.GameObject;
import common.GameRound;
import common.Map;
import common.Player;
import common.PowerUp;
import common.Tile;

/**
 * Represents a game on the client side. This class serves as a connection
 * between the model, view and game loop.
 *
 * @author Andi, Bj�rn
 */
public class ClientGameRound extends GameRound implements Observer {

    /**
     * Searches and returns a GameObject by its id.
     *
     * @param id The id of the GameObject that should be returned.
     * @return The matching GameObject or null if the id is unknown.
     */
    public GameObject getGameObjectById(int id) {
        return model.getGameObjectById(id);
    }
}
","// ClientGameRoundTest.java
package client;

import java.awt.Point;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import org.apache.log4j.Logger;
import client.controller.LocalControl;
import client.gui.StartFrame;
import client.network.ForwardingObserver;
import client.view.BombView;
import client.view.GameCanvas;
import client.view.GameView;
import client.view.GfxFactory;
import client.view.OffGamePainter;
import client.view.PlayerView;
import client.view.PowerUpView;
import client.view.StatusView;
import client.view.TileView;
import common.Bomb;
import common.Constants;
import common.GameModel;
import common.GameObject;
import common.GameRound;
import common.Map;
import common.Player;
import common.PowerUp;
import common.Tile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientGameRound}.
* It contains ten unit test cases for the {@link ClientGameRound#getGameObjectById(int)} method.
*/
class ClientGameRoundTest {","// ClientGameRoundTest.java
package client;

import java.awt.Point;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import org.apache.log4j.Logger;
import client.controller.LocalControl;
import client.gui.StartFrame;
import client.network.ForwardingObserver;
import client.view.BombView;
import client.view.GameCanvas;
import client.view.GameView;
import client.view.GfxFactory;
import client.view.OffGamePainter;
import client.view.PlayerView;
import client.view.PowerUpView;
import client.view.StatusView;
import client.view.TileView;
import common.Bomb;
import common.Constants;
import common.GameModel;
import common.GameObject;
import common.GameRound;
import common.Map;
import common.Player;
import common.PowerUp;
import common.Tile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientGameRound}.
* It contains ten unit test cases for the {@link ClientGameRound#getGameObjectById(int)} method.
*/
class ClientGameRoundTest {

	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct GameObject.
	*/
	@Test
	void testGetGameObjectById() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns null if the id is unknown.
	*/
	@Test
	void testGetGameObjectByIdUnknownId() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(null, cgr.getGameObjectById(2));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns null if the id is negative.
	*/
	@Test
	void testGetGameObjectByIdNegativeId() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(null, cgr.getGameObjectById(-1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns null if the id is zero.
	*/
	@Test
	void testGetGameObjectByIdZeroId() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(null, cgr.getGameObjectById(0));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns null if the id is the maximum integer value.
	*/
	@Test
	void testGetGameObjectByIdMaxId() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(null, cgr.getGameObjectById(Integer.MAX_VALUE));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns null if the id is the minimum integer value.
	*/
	@Test
	void testGetGameObjectByIdMinId() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(null, cgr.getGameObjectById(Integer.MIN_VALUE));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns null if the id is the maximum integer value minus one.
	*/
	@Test
	void testGetGameObjectByIdMaxIdMinusOne() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(null, cgr.getGameObjectById(Integer.MAX_VALUE - 1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns null if the id is the minimum integer value plus one.
	*/
	@Test
	void testGetGameObjectByIdMinIdPlusOne() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(null, cgr.getGameObjectById(Integer.MIN_VALUE + 1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns null if the id is the maximum integer value divided by two.
	*/
	@Test
	void testGetGameObjectByIdMaxIdDividedByTwo() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(null, cgr.getGameObjectById(Integer.MAX_VALUE / 2));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns null if the id is the minimum integer value divided by two.
	*/
	@Test
	void testGetGameObjectByIdMinIdDividedByTwo() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(null, cgr.getGameObjectById(Integer.MIN_VALUE / 2));
	}
}

// ClientGameRoundTest.java
package client;

import java.awt.Point;
import java.util.HashMap;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;
import org.apache.log4j.Logger;
import client.controller.LocalControl;
import client.gui.StartFrame;
import client.network.ForwardingObserver;
import client.view.BombView;
import client.view.GameCanvas;
import client.view.GameView;
import client.view.GfxFactory;
import client.view.OffGamePainter;
import client.view.PlayerView;
import client.view.PowerUpView;
import client.view.StatusView;
import client.view.TileView;
import common.Bomb;
import common.Constants;
import common.GameModel;
import common.GameObject;
import common.GameRound;
import common.Map;
import common.Player;
import common.PowerUp;
import common.Tile;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientGameRound}.
* It contains ten unit test cases for the {@link ClientGameRound#getGameObjectById(int)} method.
*/
class ClientGameRoundTest {
		
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns the correct GameObject.
	*/
	@Test
	void testGetGameObjectById() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(go, cgr.getGameObjectById(1));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObjectById(int)} method.
	* It tests if the method returns null if the id is unknown.
	*/
	@Test
	void testGetGameObjectByIdUnknownId() {
		ClientGameRound cgr = new ClientGameRound();
		GameObject go = new GameObject(1, new Point(1, 1));
		cgr.model.addGameObject(go);
		assertEquals(null, cgr.getGameObjectById(2));
	}
	
	/**
	* Test case for {@link ClientGameRound#getGameObject"
cmpl-6wqSnrCuZGaZsuOtvy1q16nmoLnfM,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/client/ClientPlayer.java,77.05024003982544,length,"// ClientPlayer.java
package client;

import java.awt.Point;
import org.apache.log4j.Logger;
import sound.SoundPlayer;
import common.Actor;
import common.Constants;
import common.Player;

/**
 * The client specific implemetation of a Player. This implementation will
 * notify any number of registered observers about changes to their state.
 *
 * @author Andi, Bj�rn
 */
public class ClientPlayer extends Player {

    /**
     * Returns weather the player can bowl bombs
     *
     * @return boolean can bowl bombs
     */
    public boolean canBowlBombs() {
        return bowlBombs;
    }
}
","// ClientPlayerTest.java
package client;

import java.awt.Point;
import org.apache.log4j.Logger;
import sound.SoundPlayer;
import common.Actor;
import common.Constants;
import common.Player;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientPlayer}.
* It contains ten unit test cases for the {@link ClientPlayer#canBowlBombs()} method.
*/
class ClientPlayerTest {","// ClientPlayerTest.java
package client;

import java.awt.Point;
import org.apache.log4j.Logger;
import sound.SoundPlayer;
import common.Actor;
import common.Constants;
import common.Player;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientPlayer}.
* It contains ten unit test cases for the {@link ClientPlayer#canBowlBombs()} method.
*/
class ClientPlayerTest {

	/**
	 * Test case for {@link ClientPlayer#canBowlBombs()}.
	 * It tests if the method returns true when the player can bowl bombs.
	 */
	@Test
	void testCanBowlBombsTrue() {
		ClientPlayer player = new ClientPlayer(new Point(0, 0), ""test"", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
cmpl-6wqU2y5ZAWURjS8cC2d2EiNvH8x4X,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/client/ClientProperties0.java,58.09129333496094,length,"// ClientProperties.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;

/**
 * reads and writes properties to xml-file
 * properties file is saved to user directory
 *
 * @author christian
 */
public class ClientProperties {

    /**
     * get property value by element-name returns empty string if fileError is
     * true
     *
     * @param element -
     *            Name of element
     * @return String - value
     */
    public String getProperty(String element) {
        if (!fileError) {
            String XmlPath = ""//"" + element;
            return xmlFunctions.getXmlValue(XmlPath);
        } else {
            return new String("""");
        }
    }
}
","// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.
*/
class ClientPropertiesTest {","// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.
*/
class ClientPropertiesTest {

	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	* It tests if the method returns the correct value for the element ""server"".
	*/
	@Test
	void testGetPropertyServer() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""localhost"";
		String actual = clientProperties.getProperty(""server"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	* It tests if the method returns the correct value for the element ""port"".
	*/
	@Test
	void testGetPropertyPort() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""8080"";
		String actual = clientProperties.getProperty(""port"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	* It tests if the method returns the correct value for the element ""user"".
	*/
	@Test
	void testGetPropertyUser() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""user"";
		String actual = clientProperties.getProperty(""user"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	* It tests if the method returns the correct value for the element ""password"".
	*/
	@Test
	void testGetPropertyPassword() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""password"";
		String actual = clientProperties.getProperty(""password"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	* It tests if the method returns the correct value for the element ""database"".
	*/
	@Test
	void testGetPropertyDatabase() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""database"";
		String actual = clientProperties.getProperty(""database"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	* It tests if the method returns the correct value for the element ""language"".
	*/
	@Test
	void testGetPropertyLanguage() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""en"";
		String actual = clientProperties.getProperty(""language"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	* It tests if the method returns the correct value for the element ""country"".
	*/
	@Test
	void testGetPropertyCountry() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""US"";
		String actual = clientProperties.getProperty(""country"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	* It tests if the method returns the correct value for the element ""lookAndFeel"".
	*/
	@Test
	void testGetPropertyLookAndFeel() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""com.sun.java.swing.plaf.windows.WindowsLookAndFeel"";
		String actual = clientProperties.getProperty(""lookAndFeel"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	* It tests if the method returns the correct value for the element ""logLevel"".
	*/
	@Test
	void testGetPropertyLogLevel() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""INFO"";
		String actual = clientProperties.getProperty(""logLevel"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	* It tests if the method returns the correct value for the element ""logFile"".
	*/
	@Test
	void testGetPropertyLogFile() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""log.txt"";
		String actual = clientProperties.getProperty(""logFile"");
		assertEquals(expected, actual);
	}
}

// ClientProperties.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;

/**
 * reads and writes properties to xml-file
 * properties file is saved to user directory
 *
 * @author christian
 */
public class ClientProperties {

    /**
     * get property value by element-name returns empty string if fileError is
     * true
     *
     * @param element -
     *            Name of element
     * @return String - value
     */
    public String getProperty(String element) {
        if (!fileError) {
            String XmlPath = ""//"" + element;
            return xmlFunctions.getXmlValue(XmlPath);
        } else {
            return new String("""");
        }
    }
}

// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.
*/
class ClientPropertiesTest {
		
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	* It tests if the method returns the correct value for the element ""server"".
	*/
	@Test
	void testGetPropertyServer() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""localhost"";
		String actual = clientProperties.getProperty(""server"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	* It tests if the method returns the correct value for the element ""port"".
	*/
	@Test
	void testGetPropertyPort() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""8080"";
		String actual = clientProperties.getProperty(""port"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	* It tests if the method returns the correct value for the element ""user"".
	*/
	@Test
	void testGetPropertyUser() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""user"";
		String actual = clientProperties.getProperty(""user"");
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for {@link ClientProperties#getProperty(String)} method.
	* It tests if the method returns the correct value for the element ""password"".
	*/
	@Test
	void testGetPropertyPassword() {
		ClientProperties clientProperties = new ClientProperties();
		String expected = ""password"";
		String actual = clientProperties.getProperty(""password"");
		assertEquals(expected, actual);
	}
	
"
cmpl-6wqV57N9jwQhxVR7PLXejNS1UCDYx,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/client/ClientProperties1.java,69.53844428062439,length,"// ClientProperties.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;

/**
 * reads and writes properties to xml-file
 * properties file is saved to user directory
 *
 * @author christian
 */
public class ClientProperties {

    /**
     * copies a file from a to b
     * used InputStream as provided from ResourceService class as
     * source and File as destination
     *
     * @param sourceFile -
     *            InputStream - File which should be copied
     * @param destFile -
     *            destination where file should be copied to
     * @return boolean - true if successfully copied, otherwise false
     */
    public static boolean fileCopy(InputStream sourceFile, File destFile) {
        try {
            InputStream in = sourceFile;
            FileOutputStream out = new FileOutputStream(destFile);
            byte[] buf = new byte[4096];
            int len;
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
            out.close();
            in.close();
        } catch (IOException e) {
            return false;
        }
        return true;
    }
}
","// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.
*/
class ClientPropertiesTest {","// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.
*/
class ClientPropertiesTest {

	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	void testFileCopySuccess() {
		File file = new File(""test.txt"");
		InputStream inputStream = null;
		try {
			FileOutputStream fileOutputStream = new FileOutputStream(file);
			fileOutputStream.write(""test"".getBytes());
			fileOutputStream.close();
			inputStream = file.toURI().toURL().openStream();
		} catch (IOException e) {
			e.printStackTrace();
		}
		File destFile = new File(""test2.txt"");
		assertTrue(ClientProperties.fileCopy(inputStream, destFile));
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	void testFileCopyFailure() {
		File file = new File(""test.txt"");
		InputStream inputStream = null;
		try {
			FileOutputStream fileOutputStream = new FileOutputStream(file);
			fileOutputStream.write(""test"".getBytes());
			fileOutputStream.close();
			inputStream = file.toURI().toURL().openStream();
		} catch (IOException e) {
			e.printStackTrace();
		}
		File destFile = new File(""test2.txt"");
		assertFalse(ClientProperties.fileCopy(inputStream, destFile));
	}
}

// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.
*/
class ClientPropertiesTest {
		
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	void testFileCopySuccess() {
		File file = new File(""test.txt"");
		InputStream inputStream = null;
		try {
			FileOutputStream fileOutputStream = new FileOutputStream(file);
			fileOutputStream.write(""test"".getBytes());
			fileOutputStream.close();
			inputStream = file.toURI().toURL().openStream();
		} catch (IOException e) {
			e.printStackTrace();
		}
		File destFile = new File(""test2.txt"");
		assertTrue(ClientProperties.fileCopy(inputStream, destFile));
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	void testFileCopyFailure() {
		File file = new File(""test.txt"");
		InputStream inputStream = null;
		try {
			FileOutputStream fileOutputStream = new FileOutputStream(file);
			fileOutputStream.write(""test"".getBytes());
			fileOutputStream.close();
			inputStream = file.toURI().toURL().openStream();
		} catch (IOException e) {
			e.printStackTrace();
		}
		File destFile = new File(""test2.txt"");
		assertFalse(ClientProperties.fileCopy(inputStream, destFile));
	}
}

// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.
*/
class ClientPropertiesTest {
		
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	void testFileCopySuccess() {
		File file = new File(""test.txt"");
		InputStream inputStream = null;
		try {
			FileOutputStream fileOutputStream = new FileOutputStream(file);
			fileOutputStream.write(""test"".getBytes());
			fileOutputStream.close();
			inputStream = file.toURI().toURL().openStream();
		} catch (IOException e) {
			e.printStackTrace();
		}
		File destFile = new File(""test2.txt"");
		assertTrue(ClientProperties.fileCopy(inputStream, destFile));
	}
	
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns false if the file is not successfully copied.
	*/
	@Test
	void testFileCopyFailure() {
		File file = new File(""test.txt"");
		InputStream inputStream = null;
		try {
			FileOutputStream fileOutputStream = new FileOutputStream(file);
			fileOutputStream.write(""test"".getBytes());
			fileOutputStream.close();
			inputStream = file.toURI().toURL().openStream();
		} catch (IOException e) {
			e.printStackTrace();
		}
		File destFile = new File(""test2.txt"");
		assertFalse(ClientProperties.fileCopy(inputStream, destFile));
	}
}

// ClientPropertiesTest.java
package client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import org.apache.log4j.Logger;
import common.Constants;
import common.XmlFunctions;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ClientProperties}.
* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.
*/
class ClientPropertiesTest {
		
	/**
	* Test case for {@link ClientProperties#fileCopy(InputStream, File)} method.
	* It tests if the method returns true if the file is successfully copied.
	*/
	@Test
	void testFileCopySuccess() {
		File file = new File(""test.txt"");
		InputStream inputStream = null;
		try {
			FileOutputStream fileOutputStream = new FileOutputStream(file);
			fileOutputStream.write(""test"".getBytes());
			fileOutputStream.close();
			inputStream = file.toURI().toURL().openStream();
		} catch (IOException e) {
			e.printStackTrace();
		}
		File destFile = new File(""test2.txt"");
		assertTrue(ClientProperties.fileCopy(inputStream, destFile));
	}
	
	/**
	* Test case for {@"
cmpl-6wqWCtJGQaIoGoTCXdipebWBncYop,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/client/view/GfxFactory.java,91.83521914482117,length,"// GfxFactory.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;

/**
 * @author Andreas Glauner
 * @autor Adam Kozielski
 */
public class GfxFactory {

    /**
     * Power up image loading
     *
     * @param type A String value describing the type of powerUp
     *  *
     */
    public Image getPowerUpImage(String type) {
        if (!powerUpImageCache.keySet().contains(type)) {
            String path = ""/gfx/powerUps/"" + type + "".png"";
            powerUpImageCache.put(type, loadImage(path));
        }
        return powerUpImageCache.get(type);
    }
}
","// GfxFactoryTest.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GfxFactory}.
* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.
*/
class GfxFactoryTest {","// GfxFactoryTest.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GfxFactory}.
* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.
*/
class GfxFactoryTest {

	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage2() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage3() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage4() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage5() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage6() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage7() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage8() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage9() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage10() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
}

// GfxFactory.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;

/**
 * @author Andreas Glauner
 * @autor Adam Kozielski
 */
public class GfxFactory {

    /**
     * Power up image loading
     *
     * @param type A String value describing the type of powerUp
     *  *
     */
    public Image getPowerUpImage(String type) {
        if (!powerUpImageCache.keySet().contains(type)) {
            String path = ""/gfx/powerUps/"" + type + "".png"";
            powerUpImageCache.put(type, loadImage(path));
        }
        return powerUpImageCache.get(type);
    }
}

// GfxFactoryTest.java
package client.view;

import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;
import common.ResourceService;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GfxFactory}.
* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.
*/
class GfxFactoryTest {
		
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage2() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage3() {
		GfxFactory gfxFactory = new GfxFactory();
		Image image = gfxFactory.getPowerUpImage(""speed"");
		assertEquals(image, gfxFactory.getPowerUpImage(""speed""));
	}
	
	/**
	 * Test case for {@link GfxFactory#getPowerUpImage(String)} method.
	 * It checks if the method returns the correct image for the given type.
	 */
	@Test
	void testGetPowerUpImage4() {
		GfxFactory"
cmpl-6wqXgdXiNG5Y4bLgthydlrgWGbdXL,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/common/GameModel.java,66.5847737789154,length,"// GameModel.java
package common;

import java.awt.Point;
import java.util.Collection;
import java.util.HashMap;
import java.util.Vector;
import java.util.Map.Entry;
import messages.round.RoundTimeOverMsg;
import org.apache.log4j.Logger;

/**
 * @author Steffen, Andi, Bj�rn
 */
public class GameModel {

    /**
     * Checks if the game is over and if yes returns the gameObjectId of the
     * winner.
     *
     * @return -1 if game still running, 0 in case of a tie, gameObjectId of the
     *         winner in all other cases
     */
    public int checkForWinner() {
        if (players.size() < 2) {
            // 0 means it's a tie (all remaining players got
            int winnerId = 0;
            // killed by the same bomb)
            if (players.size() == 1) {
                // only the winner is left
                winnerId = players.get(0).getId();
            }
            return winnerId;
        } else {
            // game still running
            return -1;
        }
    }
}
","// GameModelTest.java
package common;

import java.awt.Point;
import java.util.Collection;
import java.util.HashMap;
import java.util.Vector;
import java.util.Map.Entry;
import messages.round.RoundTimeOverMsg;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GameModel}.
* It contains ten unit test cases for the {@link GameModel#checkForWinner()} method.
*/
class GameModelTest {","// GameModelTest.java
package common;

import java.awt.Point;
import java.util.Collection;
import java.util.HashMap;
import java.util.Vector;
import java.util.Map.Entry;
import messages.round.RoundTimeOverMsg;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GameModel}.
* It contains ten unit test cases for the {@link GameModel#checkForWinner()} method.
*/
class GameModelTest {

		/**
		* Test case 1:
		* The game is over and there is a winner.
		*/
		@Test
		void testCheckForWinner1() {
				GameModel gameModel = new GameModel();
				gameModel.players = new Vector<Player>();
				gameModel.players.add(new Player(1, ""Player1"", new Point(0, 0), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
cmpl-6wqYlFhDdlPx894VmmyRsWPXJpbup,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/common/Map0.java,82.05125284194946,length,"// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * Map-Class with all information needed for map use of iterators tile-iterator:
 * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class Map implements Iterable<Tile>, Serializable {

    /**
     * return MapTile object at Index x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @return MapTile object
     */
    public Tile getTileByIndex(int x, int y) {
        return (Tile) MapGrid[x][y];
    }
}
","// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTileByIndex(int, int)} method.
*/
class MapTest {","// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTileByIndex(int, int)} method.
*/
class MapTest {

	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex2() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertNotEquals(tile, map.getTileByIndex(0, 1));
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex3() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertNotEquals(tile, map.getTileByIndex(1, 0));
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex4() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertNotEquals(tile, map.getTileByIndex(1, 1));
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex5() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertNotEquals(tile, map.getTileByIndex(0, -1));
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex6() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertNotEquals(tile, map.getTileByIndex(-1, 0));
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex7() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertNotEquals(tile, map.getTileByIndex(-1, -1));
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex8() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertNotEquals(tile, map.getTileByIndex(0, 2));
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex9() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertNotEquals(tile, map.getTileByIndex(2, 0));
	}
	
	/**
	 * Test case for {@link Map#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex10() {
		Map map = new Map();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertNotEquals(tile, map.getTileByIndex(2, 2));
	}
}

// MapTile.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * MapTile-Class with all information needed for map use of iterators
 * tile-iterator: for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class MapTile implements Serializable {

    /**
     * return MapTile object at Index x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @return MapTile object
     */
    public Tile getTileByIndex(int x, int y) {
        return (Tile) MapGrid[x][y];
    }
}

// MapTileTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapTile}.
* It contains ten unit test cases for the {@link MapTile#getTileByIndex(int, int)} method.
*/
class MapTileTest {
		
	/**
	 * Test case for {@link MapTile#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex() {
		MapTile map = new MapTile();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertEquals(tile, map.getTileByIndex(0, 0));
	}
	
	/**
	 * Test case for {@link MapTile#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex2() {
		MapTile map = new MapTile();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertNotEquals(tile, map.getTileByIndex(0, 1));
	}
	
	/**
	 * Test case for {@link MapTile#getTileByIndex(int, int)}
	 * 
	 * @author christian
	 */
	@Test
	void testGetTileByIndex3() {
		MapTile map = new MapTile();
		Tile tile = new Tile(new Point(0, 0), TileType.WALL);
		map.MapGrid[0][0] = tile;
		assertNotEquals(tile, map.getTileByIndex(1, 0));
	}
	
"
cmpl-6wqa5eiR0vHbZ0LxYBH72khWhuY85,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/common/Map1.java,77.66072678565979,length,"// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * Map-Class with all information needed for map use of iterators tile-iterator:
 * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class Map implements Iterable<Tile>, Serializable {

    /**
     * return MapTile object at Position x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @return MapTile object
     */
    public Tile getTile(int x, int y) {
        return (Tile) MapGrid[(int) Math.floor((double) x / Constants.TILE_BORDER)][(int) Math.floor((double) y / Constants.TILE_BORDER)];
    }
}
","// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTile(int, int)} method.
*/
class MapTest {","// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getTile(int, int)} method.
*/
class MapTest {

		/**
		* Test case 1 for {@link Map#getTile(int, int)}.
		* It tests if the method returns the correct tile for the given coordinates.
		*/
		@Test
		void testGetTile1() {
				Map map = new Map();
				Tile tile = map.getTile(0, 0);
				assertEquals(0, tile.getX());
				assertEquals(0, tile.getY());
		}
		
		/**
		* Test case 2 for {@link Map#getTile(int, int)}.
		* It tests if the method returns the correct tile for the given coordinates.
		*/
		@Test
		void testGetTile2() {
				Map map = new Map();
				Tile tile = map.getTile(Constants.TILE_BORDER, 0);
				assertEquals(0, tile.getX());
				assertEquals(0, tile.getY());
		}
		
		/**
		* Test case 3 for {@link Map#getTile(int, int)}.
		* It tests if the method returns the correct tile for the given coordinates.
		*/
		@Test
		void testGetTile3() {
				Map map = new Map();
				Tile tile = map.getTile(0, Constants.TILE_BORDER);
				assertEquals(0, tile.getX());
				assertEquals(0, tile.getY());
		}
		
		/**
		* Test case 4 for {@link Map#getTile(int, int)}.
		* It tests if the method returns the correct tile for the given coordinates.
		*/
		@Test
		void testGetTile4() {
				Map map = new Map();
				Tile tile = map.getTile(Constants.TILE_BORDER, Constants.TILE_BORDER);
				assertEquals(0, tile.getX());
				assertEquals(0, tile.getY());
		}
		
		/**
		* Test case 5 for {@link Map#getTile(int, int)}.
		* It tests if the method returns the correct tile for the given coordinates.
		*/
		@Test
		void testGetTile5() {
				Map map = new Map();
				Tile tile = map.getTile(Constants.TILE_BORDER * 2, 0);
				assertEquals(Constants.TILE_BORDER, tile.getX());
				assertEquals(0, tile.getY());
		}
		
		/**
		* Test case 6 for {@link Map#getTile(int, int)}.
		* It tests if the method returns the correct tile for the given coordinates.
		*/
		@Test
		void testGetTile6() {
				Map map = new Map();
				Tile tile = map.getTile(0, Constants.TILE_BORDER * 2);
				assertEquals(0, tile.getX());
				assertEquals(Constants.TILE_BORDER, tile.getY());
		}
		
		/**
		* Test case 7 for {@link Map#getTile(int, int)}.
		* It tests if the method returns the correct tile for the given coordinates.
		*/
		@Test
		void testGetTile7() {
				Map map = new Map();
				Tile tile = map.getTile(Constants.TILE_BORDER * 2, Constants.TILE_BORDER * 2);
				assertEquals(Constants.TILE_BORDER, tile.getX());
				assertEquals(Constants.TILE_BORDER, tile.getY());
		}
		
		/**
		* Test case 8 for {@link Map#getTile(int, int)}.
		* It tests if the method returns the correct tile for the given coordinates.
		*/
		@Test
		void testGetTile8() {
				Map map = new Map();
				Tile tile = map.getTile(Constants.TILE_BORDER * 2, Constants.TILE_BORDER);
				assertEquals(Constants.TILE_BORDER, tile.getX());
				assertEquals(0, tile.getY());
		}
		
		/**
		* Test case 9 for {@link Map#getTile(int, int)}.
		* It tests if the method returns the correct tile for the given coordinates.
		*/
		@Test
		void testGetTile9() {
				Map map = new Map();
				Tile tile = map.getTile(Constants.TILE_BORDER, Constants.TILE_BORDER * 2);
				assertEquals(0, tile.getX());
				assertEquals(Constants.TILE_BORDER, tile.getY());
		}
		
		/**
		* Test case 10 for {@link Map#getTile(int, int)}.
		* It tests if the method returns the correct tile for the given coordinates.
		*/
		@Test
		void testGetTile10() {
				Map map = new Map();
				Tile tile = map.getTile(Constants.TILE_BORDER * 3, Constants.TILE_BORDER * 3);
				assertEquals(Constants.TILE_BORDER * 2, tile.getX());
				assertEquals(Constants.TILE_BORDER * 2, tile.getY());
		}
}

// MapTile.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * MapTile-Class with all information needed for map use of iterators
 * tile-iterator: for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class MapTile implements Tile, Serializable {

    /**
     * return MapTile object at Position x, y
     *
     * @param x -
     *            number of horizontal tile
     * @param y -
     *            number of vertical tile
     * @return MapTile object
     */
    public Tile getTile(int x, int y) {
        return (Tile) MapGrid[(int) Math.floor((double) x / Constants.TILE_BORDER)][(int) Math.floor((double) y / Constants.TILE_BORDER)];
    }
}

// MapTileTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapTile}.
* It contains ten unit test cases for the {@link MapTile#getTile(int, int)} method.
*/
class MapTileTest {
		
		/**
		* Test case 1 for {@link MapTile#getTile(int, int)}.
		* It tests if the method returns the correct tile for the given coordinates.
		*/
		@Test
		void testGetTile1() {
				MapTile mapTile = new MapTile();
				Tile tile = mapTile.getTile(0, 0);
	"
cmpl-6wqbKXTQZyiyTBYbk5FgNMXgWfwCN,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/common/Map2.java,29.320741891860962,stop,"// Map.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;

/**
 * Map-Class with all information needed for map use of iterators tile-iterator:
 * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :
 * map.powerupiterator)
 *
 * @author christian
 */
public class Map implements Iterable<Tile>, Serializable {

    /**
     * gets start-point-coordinates of player no. if not set, return coordinates
     * of field 1/1
     *
     * @param playerNo -
     *            number of player
     * @return Point with coordinates
     */
    public Point getStartPoint(int playerNo) {
        // startpoint for player is not set, default 1/1
        if (playerNo > StartPoint.length) {
            return new // field
            Point(// field
            1 * Constants.TILE_BORDER + Constants.TILE_BORDER / 2, 1 * Constants.TILE_BORDER + Constants.TILE_BORDER / 2);
            // 1/1
        } else {
            Point retPoint = StartPoint[(playerNo - 1)];
            retPoint.x = retPoint.x * Constants.TILE_BORDER + 20;
            retPoint.y = retPoint.y * Constants.TILE_BORDER + 20;
            return retPoint;
        }
    }
}
","// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getStartPoint(int)} method.
*/
class MapTest {","// MapTest.java
package common;

import java.awt.Point;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getStartPoint(int)} method.
*/
class MapTest {

		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 1.
		*/
		@Test
		void testGetStartPoint1() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(1);
				assertEquals(new Point(20, 20), startPoint);
		}
		
		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 2.
		*/
		@Test
		void testGetStartPoint2() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(2);
				assertEquals(new Point(20, 20), startPoint);
		}
		
		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 3.
		*/
		@Test
		void testGetStartPoint3() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(3);
				assertEquals(new Point(20, 20), startPoint);
		}
		
		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 4.
		*/
		@Test
		void testGetStartPoint4() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(4);
				assertEquals(new Point(20, 20), startPoint);
		}
		
		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 5.
		*/
		@Test
		void testGetStartPoint5() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(5);
				assertEquals(new Point(20, 20), startPoint);
		}
		
		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 6.
		*/
		@Test
		void testGetStartPoint6() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(6);
				assertEquals(new Point(20, 20), startPoint);
		}
		
		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 7.
		*/
		@Test
		void testGetStartPoint7() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(7);
				assertEquals(new Point(20, 20), startPoint);
		}
		
		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 8.
		*/
		@Test
		void testGetStartPoint8() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(8);
				assertEquals(new Point(20, 20), startPoint);
		}
		
		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 9.
		*/
		@Test
		void testGetStartPoint9() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(9);
				assertEquals(new Point(20, 20), startPoint);
		}
		
		/**
		* Test case for {@link Map#getStartPoint(int)} method.
		* It tests if the method returns the correct start point for player 10.
		*/
		@Test
		void testGetStartPoint10() {
				Map map = new Map();
				Point startPoint = map.getStartPoint(10);
				assertEquals(new Point(20, 20), startPoint);
		}
}"
cmpl-6wqcOSk0lWAUmzP5ewgMvcpfWNnI4,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/common/MapFilesLister.java,35.72636532783508,stop,"// MapFilesLister.java
package common;

import java.io.File;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.log4j.Logger;
import messages.global.MapInfo;

/**
 * class for listing maps and returning map information
 *
 * @author christian
 */
public class MapFilesLister {

    /**
     * reads directory and returns a list of found xml-files
     *
     * @param dir -
     *            directory to be searched in
     * @return Vector<File>
     */
    public Vector<File> ListMaps(String dir) {
        // open map folder
        logger.info(""Read map directory: "" + dir + ""..."");
        File mapDir = new File(dir);
        File[] mapDirFiles = mapDir.listFiles();
        Vector<File> foundFiles = new Vector<File>();
        // open directories in map folder
        for (int i = 0; i < mapDirFiles.length; i++) {
            if (mapDirFiles[i].isFile() && mapDirFiles[i].toString().endsWith("".xml"")) {
                logger.info(""XML: "" + mapDirFiles[i]);
                foundFiles.add(mapDirFiles[i]);
            }
        }
        return foundFiles;
    }
}
","// MapFilesListerTest.java
package common;

import java.io.File;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.log4j.Logger;
import messages.global.MapInfo;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapFilesLister}.
* It contains ten unit test cases for the {@link MapFilesLister#ListMaps(String)} method.
*/
class MapFilesListerTest {","// MapFilesListerTest.java
package common;

import java.io.File;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.log4j.Logger;
import messages.global.MapInfo;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapFilesLister}.
* It contains ten unit test cases for the {@link MapFilesLister#ListMaps(String)} method.
*/
class MapFilesListerTest {

		private static final Logger logger = Logger.getLogger(MapFilesListerTest.class);
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps2() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps3() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps4() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps5() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps6() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps7() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps8() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps9() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
		
		/**
		* Test case for {@link MapFilesLister#ListMaps(String)} method.
		* It tests if the method returns a list of files.
		*/
		@Test
		void testListMaps10() {
				MapFilesLister mfl = new MapFilesLister();
				Vector<File> files = mfl.ListMaps(""maps"");
				assertNotNull(files);
		}
}"
cmpl-6wqdR3ik4ewIZkeP4St7LEEsK0iqb,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/common/MapPreview.java,65.38055610656738,length,"// MapPreview.java
package common;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.apache.log4j.Logger;

/**
 * create a ImageIcon Map Preview of a map object
 *
 * usage example: MapPreview mp = new MapPreview(map); mp.setImageSet(""desert"");
 * (optional) ImageIcon ii = mp.getMapPreview(150); !!
 *
 * @author christian
 */
public class MapPreview {

    /**
     * returns preview of current map
     *
     * @param previewWidth -
     *            Width of preview. Proportions are constrained
     * @return BufferedImage with map preview
     */
    public ImageIcon getMapPreview(int previewWidth) {
        // check if file is available, file name is identical to
        // xml file with appended .png
        File checkFile = new File(mapFile + ""_"" + mapImageSet + "".png"");
        if (checkFile.exists()) {
            logger.info(""Loading map preview: "" + checkFile.getName());
            BufferedImage mapPreview;
            try {
                mapPreview = ImageIO.read(new File(mapFile + ""_"" + mapImageSet + "".png""));
                mapPreviewIcon = new ImageIcon();
                mapPreviewIcon.setImage((Image) mapPreview);
            } catch (IOException e) {
                logger.error(e);
            }
        } else {
            // image not found, create it
            logger.info(""Creating map preview: "" + checkFile.getName());
            // preload images
            TILE_WALL_IMAGE = LoadImage(""wall"");
            TILE_STONE_IMAGE = LoadImage(""stone"");
            mapPreviewIcon = new ImageIcon();
            mapPreview = new BufferedImage(mapArea.x * Constants.TILE_BORDER, mapArea.y * Constants.TILE_BORDER, BufferedImage.TYPE_INT_RGB);
            // draw map to BufferedImage
            drawMap();
            try {
                ImageIO.write(scale(mapPreview, previewWidth), ""png"", checkFile);
            } catch (Exception e) {
                logger.error(""Caught in getMapPreview(): "" + e);
            }
            // return / resize and return
            if (previewWidth == (mapArea.x * Constants.TILE_BORDER)) {
                mapPreviewIcon.setImage((Image) mapPreview);
            } else {
                mapPreviewIcon.setImage((Image) scale(mapPreview, previewWidth));
            }
        }
        return mapPreviewIcon;
    }
}
","// MapPreviewTest.java
package common;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapPreview}.
* It contains ten unit test cases for the {@link MapPreview#getMapPreview(int)} method.
*/
class MapPreviewTest {","// MapPreviewTest.java
package common;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapPreview}.
* It contains ten unit test cases for the {@link MapPreview#getMapPreview(int)} method.
*/
class MapPreviewTest {

		/**
		* Test case for the {@link MapPreview#getMapPreview(int)} method.
		* It tests if the method returns a valid {@link ImageIcon} object.
		*/
		@Test
		void testGetMapPreview() {
				MapPreview mp = new MapPreview(map);
				mp.setImageSet(""desert"");
				ImageIcon ii = mp.getMapPreview(150);
				assertNotNull(ii);
		}
}

// MapPreview.java
package common;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.apache.log4j.Logger;

/**
 * create a ImageIcon Map Preview of a map object
 *
 * usage example: MapPreview mp = new MapPreview(map); mp.setImageSet(""desert"");
 * (optional) ImageIcon ii = mp.getMapPreview(150); !!
 *
 * @author christian
 */
public class MapPreview {

    /**
     * returns preview of current map
     *
     * @param previewWidth -
     *            Width of preview. Proportions are constrained
     * @return BufferedImage with map preview
     */
    public ImageIcon getMapPreview(int previewWidth) {
        // check if file is available, file name is identical to
        // xml file with appended .png
        File checkFile = new File(mapFile + ""_"" + mapImageSet + "".png"");
        if (checkFile.exists()) {
            logger.info(""Loading map preview: "" + checkFile.getName());
            BufferedImage mapPreview;
            try {
                mapPreview = ImageIO.read(new File(mapFile + ""_"" + mapImageSet + "".png""));
                mapPreviewIcon = new ImageIcon();
                mapPreviewIcon.setImage((Image) mapPreview);
            } catch (IOException e) {
                logger.error(e);
            }
        } else {
            // image not found, create it
            logger.info(""Creating map preview: "" + checkFile.getName());
            // preload images
            TILE_WALL_IMAGE = LoadImage(""wall"");
            TILE_STONE_IMAGE = LoadImage(""stone"");
            mapPreviewIcon = new ImageIcon();
            mapPreview = new BufferedImage(mapArea.x * Constants.TILE_BORDER, mapArea.y * Constants.TILE_BORDER, BufferedImage.TYPE_INT_RGB);
            // draw map to BufferedImage
            drawMap();
            try {
                ImageIO.write(scale(mapPreview, previewWidth), ""png"", checkFile);
            } catch (Exception e) {
                logger.error(""Caught in getMapPreview(): "" + e);
            }
            // return / resize and return
            if (previewWidth == (mapArea.x * Constants.TILE_BORDER)) {
                mapPreviewIcon.setImage((Image) mapPreview);
            } else {
                mapPreviewIcon.setImage((Image) scale(mapPreview, previewWidth));
            }
        }
        return mapPreviewIcon;
    }
}

// MapPreviewTest.java
package common;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapPreview}.
* It contains ten unit test cases for the {@link MapPreview#getMapPreview(int)} method.
*/
class MapPreviewTest {
		
		/**
		* Test case for the {@link MapPreview#getMapPreview(int)} method.
		* It tests if the method returns a valid {@link ImageIcon} object.
		*/
		@Test
		void testGetMapPreview() {
				MapPreview mp = new MapPreview(map);
				mp.setImageSet(""desert"");
				ImageIcon ii = mp.getMapPreview(150);
				assertNotNull(ii);
		}
}

// MapPreview.java
package common;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.apache.log4j.Logger;

/**
 * create a ImageIcon Map Preview of a map object
 *
 * usage example: MapPreview mp = new MapPreview(map); mp.setImageSet(""desert"");
 * (optional) ImageIcon ii = mp.getMapPreview(150); !!
 *
 * @author christian
 */
public class MapPreview {

    /**
     * returns preview of current map
     *
     * @param previewWidth -
     *            Width of preview. Proportions are constrained
     * @return BufferedImage with map preview
     */
    public ImageIcon getMapPreview(int previewWidth) {
        // check if file is available, file name is identical to
        // xml file with appended .png
        File checkFile = new File(mapFile + ""_"" + mapImageSet + "".png"");
        if (checkFile.exists()) {
            logger.info(""Loading map preview: "" + checkFile.getName());
            BufferedImage mapPreview;
            try {
                mapPreview = ImageIO.read(new File(mapFile + ""_"" + mapImageSet + "".png""));
                mapPreviewIcon = new ImageIcon();
                mapPreviewIcon.setImage((Image) mapPreview);
            } catch (IOException e) {
                logger.error(e);
            }
        } else {
            // image not found, create it
            logger.info(""Creating map preview: "" + checkFile.getName());
            // preload images
            TILE_WALL_IMAGE = LoadImage(""wall"");
            TILE_STONE_IMAGE = LoadImage(""stone"");
            mapPreviewIcon = new ImageIcon();
            mapPreview = new BufferedImage(mapArea.x * Constants.TILE_BORDER, mapArea.y * Constants.TILE_BORDER, BufferedImage.TYPE_INT_RGB);
            // draw map to BufferedImage
            drawMap();
            try {
                ImageIO.write(scale(mapPreview, previewWidth), ""png"", checkFile);
            } catch (Exception e) {
                logger.error(""Caught in getMapPreview(): "" + e);
            }
            // return / resize and return
            if (previewWidth == (mapArea.x * Constants.TILE_BORDER)) {
                mapPreviewIcon.setImage((Image) mapPreview);
            } else {
                mapPreviewIcon.setImage((Image) scale(mapPreview, previewWidth));
            }
        }
        return mapPreviewIcon;
    }
}

// MapPreviewTest.java
package common;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java."
cmpl-6wqeUdt51KVwQ7QIT4xRIy8omYPGr,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/common/MapReader.java,65.72429394721985,length,"// MapReader.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;

/**
 * Loads a XML-file and write read properties, tiles and start points to
 * map-object
 *
 * @author christian
 */
public class MapReader {

    /**
     * Returns a specific value in a group of nodes using XPath expressions
     *
     * @param node -
     *            node(set) in which value should be searched
     * @param XMLPath -
     *            XPath expression
     * @return String - found value
     */
    public String getXMLValue(Node node, String XMLPath) {
        try {
            // todo: exception wenn feld leer
            XPath xpath = XPathFactory.newInstance().newXPath();
            XPathExpression expr = xpath.compile(XMLPath);
            Object result = expr.evaluate(node, XPathConstants.NODE);
            Node foundNode = (Node) result;
            return foundNode.getNodeValue();
        } catch (XPathExpressionException ex) {
            logger.error(ex);
        }
        return new String();
    }
}
","// MapReaderTest.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapReader}.
* It contains ten unit test cases for the {@link MapReader#getXMLValue(Node, String)} method.
*/
class MapReaderTest {","// MapReaderTest.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapReader}.
* It contains ten unit test cases for the {@link MapReader#getXMLValue(Node, String)} method.
*/
class MapReaderTest {

		private static final Logger logger = Logger.getLogger(MapReaderTest.class);
		
		/**
		* Test case for {@link MapReader#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given node and XPath expression.
		*/
		@Test
		void testGetXMLValue() {
				MapReader mapReader = new MapReader();
				Node node = null;
				String XMLPath = """";
				String expected = """";
				String actual = mapReader.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
}

// MapWriter.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;

/**
 * Writes a XML-file from a map-object
 *
 * @author christian
 */
public class MapWriter {

    /**
     * Returns a specific value in a group of nodes using XPath expressions
     *
     * @param node -
     *            node(set) in which value should be searched
     * @param XMLPath -
     *            XPath expression
     * @return String - found value
     */
    public String getXMLValue(Node node, String XMLPath) {
        try {
            // todo: exception wenn feld leer
            XPath xpath = XPathFactory.newInstance().newXPath();
            XPathExpression expr = xpath.compile(XMLPath);
            Object result = expr.evaluate(node, XPathConstants.NODE);
            Node foundNode = (Node) result;
            return foundNode.getNodeValue();
        } catch (XPathExpressionException ex) {
            logger.error(ex);
        }
        return new String();
    }
}

// MapWriterTest.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapWriter}.
* It contains ten unit test cases for the {@link MapWriter#getXMLValue(Node, String)} method.
*/
class MapWriterTest {
		
		private static final Logger logger = Logger.getLogger(MapWriterTest.class);
		
		/**
		* Test case for {@link MapWriter#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given node and XPath expression.
		*/
		@Test
		void testGetXMLValue() {
				MapWriter mapWriter = new MapWriter();
				Node node = null;
				String XMLPath = """";
				String expected = """";
				String actual = mapWriter.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
}

// Map.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;

/**
 * Map-object
 *
 * @author christian
 */
public class Map {

    /**
     * Returns a specific value in a group of nodes using XPath expressions
     *
     * @param node -
     *            node(set) in which value should be searched
     * @param XMLPath -
     *            XPath expression
     * @return String - found value
     */
    public String getXMLValue(Node node, String XMLPath) {
        try {
            // todo: exception wenn feld leer
            XPath xpath = XPathFactory.newInstance().newXPath();
            XPathExpression expr = xpath.compile(XMLPath);
            Object result = expr.evaluate(node, XPathConstants.NODE);
            Node foundNode = (Node) result;
            return foundNode.getNodeValue();
        } catch (XPathExpressionException ex) {
            logger.error(ex);
        }
        return new String();
    }
}

// MapTest.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Map}.
* It contains ten unit test cases for the {@link Map#getXMLValue(Node, String)} method.
*/
class MapTest {
		
		private static final Logger logger = Logger.getLogger(MapTest.class);
		
		/**
		* Test case for {@link Map#getXMLValue(Node, String)} method.
		* It tests if the method returns the correct value for a given node and XPath expression.
		*/
		@Test
		void testGetXMLValue() {
				Map map = new Map();
				Node node = null;
				String XMLPath = """";
				String expected = """";
				String actual = map.getXMLValue(node, XMLPath);
				assertEquals(expected, actual);
		}
}

// MapTile.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;

/**
 * MapTile-object
 *
 * @author christian
 */
public class MapTile {

    /**
     * Returns a specific value in a group of nodes using XPath expressions
     *
     * @param node -
     *            node(set) in which value should be searched
     * @param XMLPath -
     *            XPath expression
     * @return String - found value
     */
    public String getXMLValue(Node node, String XMLPath) {
        try {
            // todo: exception wenn feld leer
            XPath xpath = XPathFactory.newInstance().newXPath();
            XPathExpression expr = xpath.compile(XMLPath);
            Object result = expr.evaluate(node, XPathConstants.NODE);
            Node foundNode = (Node) result;
            return foundNode.getNodeValue();
        } catch (XPathExpressionException ex) {
            logger.error(ex);
        }
        return new String();
    }
}

// MapTileTest.java
package common;

import org.apache.log4j.Logger;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import java.awt.Point;
import javax.xml.xpath.*;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MapTile}.
* It contains ten unit test cases for the {@link MapTile#getXMLValue(Node, String)} method.
*/
class MapTileTest {
		
		private static final Logger logger = Logger.get"
cmpl-6wqfY9tQb75g7Lwjlq5ZOaYy7udN6,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/common/ResourceService0.java,66.48233151435852,length,"// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    /**
     * Loads the {@link Image} that is located at the specified path.
     *
     * @param path The location of the image within the classpath.
     * @return The loaded {@link Image} or null if there was an IOException while trying
     * to read the image from a stream.
     */
    public static Image getImage(String path) {
        BufferedImage image;
        try {
            image = ImageIO.read(getInputStream(path));
        } catch (IOException e) {
            image = null;
        }
        return image;
    }
}
","// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImage(String)} method.
*/
class ResourceServiceTest {","// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImage(String)} method.
*/
class ResourceServiceTest {

	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetImage() throws IOException {
		Image image = ResourceService.getImage(""/images/test.png"");
		assertNotNull(image);
		assertEquals(image.getWidth(null), 100);
		assertEquals(image.getHeight(null), 100);
	}
}

// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    /**
     * Loads the {@link Image} that is located at the specified path.
     *
     * @param path The location of the image within the classpath.
     * @return The loaded {@link Image} or null if there was an IOException while trying
     * to read the image from a stream.
     */
    public static Image getImage(String path) {
        BufferedImage image;
        try {
            image = ImageIO.read(getInputStream(path));
        } catch (IOException e) {
            image = null;
        }
        return image;
    }

    /**
     * Loads the {@link InputStream} that is located at the specified path.
     *
     * @param path The location of the stream within the classpath.
     * @return The loaded {@link InputStream} or null if there was an IOException while trying
     * to read the stream.
     */
    public static InputStream getInputStream(String path) {
        InputStream stream = ResourceService.class.getResourceAsStream(path);
        return stream;
    }
}

// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImage(String)} method.
*/
class ResourceServiceTest {
		
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetImage() throws IOException {
		Image image = ResourceService.getImage(""/images/test.png"");
		assertNotNull(image);
		assertEquals(image.getWidth(null), 100);
		assertEquals(image.getHeight(null), 100);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetInputStream() throws IOException {
		InputStream stream = ResourceService.getInputStream(""/images/test.png"");
		assertNotNull(stream);
		assertTrue(stream.available() > 0);
	}
}

// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    /**
     * Loads the {@link Image} that is located at the specified path.
     *
     * @param path The location of the image within the classpath.
     * @return The loaded {@link Image} or null if there was an IOException while trying
     * to read the image from a stream.
     */
    public static Image getImage(String path) {
        BufferedImage image;
        try {
            image = ImageIO.read(getInputStream(path));
        } catch (IOException e) {
            image = null;
        }
        return image;
    }

    /**
     * Loads the {@link InputStream} that is located at the specified path.
     *
     * @param path The location of the stream within the classpath.
     * @return The loaded {@link InputStream} or null if there was an IOException while trying
     * to read the stream.
     */
    public static InputStream getInputStream(String path) {
        InputStream stream = ResourceService.class.getResourceAsStream(path);
        return stream;
    }
}

// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImage(String)} method.
*/
class ResourceServiceTest {
		
	/**
	 * Test case for {@link ResourceService#getImage(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetImage() throws IOException {
		Image image = ResourceService.getImage(""/images/test.png"");
		assertNotNull(image);
		assertEquals(image.getWidth(null), 100);
		assertEquals(image.getHeight(null), 100);
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetInputStream() throws IOException {
		InputStream stream = ResourceService.getInputStream(""/images/test.png"");
		assertNotNull(stream);
		assertTrue(stream.available() > 0);
	}
}

// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    /**
     * Loads the {@link Image} that is located at the specified path.
     *
     * @param path The location of the image within the classpath.
     * @return The loaded {@link Image} or null if there was an IOException while trying
     * to read the image from a stream.
     */
    public static Image getImage(String path) {
        BufferedImage image;
        try {
            image = ImageIO.read(getInputStream(path));
        } catch (IOException e) {
            image = null;
        }
        return image;
    }

    /**
     * Loads the {@link InputStream} that is located at the specified path.
     *
     * @param path The location of the stream within the classpath.
     * @return The loaded {@link InputStream} or null if there was an IOException while trying
     * to read the stream.
     */
   "
cmpl-6wqgc6PJIG45nS1anFly51u1xokzp,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/common/ResourceService1.java,79.31954979896545,length,"// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    /**
     * Loads the {@link ImageIcon} that is located at the specified path.
     *
     * @param path The location of the image within the classpath.
     * @return The loaded {@link ImageIcon}
     */
    public static ImageIcon getImageIcon(String path) {
        return new ImageIcon(getImage(path));
    }
}
","// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImageIcon(String)} method.
*/
class ResourceServiceTest {","// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getImageIcon(String)} method.
*/
class ResourceServiceTest {

	/**
	 * Test case for {@link ResourceService#getImageIcon(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetImageIcon() throws IOException {
		ImageIcon imageIcon = ResourceService.getImageIcon(""/images/test.png"");
		assertNotNull(imageIcon);
		assertEquals(imageIcon.getIconWidth(), 100);
		assertEquals(imageIcon.getIconHeight(), 100);
	}
}
```

## Test Coverage

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the [JaCoCo](https://www.jacoco.org/jacoco/) library.

The test coverage of the project is measured by the"
cmpl-6wqhtyfeFIZDvTbEoJyoSPK0VCaOM,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/common/ResourceService2.java,30.71907615661621,stop,"// ResourceService.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 * This is an utility class that offers functionality to load resources that are
 * located in the classpath. This is used to load resources like images and sound files
 * from the client jar file.
 *
 * @author andi
 */
public class ResourceService {

    /**
     * Creates a connection to the resource that is located at the specified
     * path via an {@link InputStream}.
     *
     * @param path The location of the resource within the classpath.
     * @return The {@link InputStream} that points the requested resource.
     */
    public static InputStream getInputStream(String path) {
        InputStream resourceAsStream = ResourceService.class.getResourceAsStream(path);
        if (resourceAsStream == null) {
            throw new IllegalArgumentException(""No such resource: "" + path);
        }
        return resourceAsStream;
    }
}
","// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getInputStream(String)} method.
*/
class ResourceServiceTest {","// ResourceServiceTest.java
package common;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceService}.
* It contains ten unit test cases for the {@link ResourceService#getInputStream(String)} method.
*/
class ResourceServiceTest {

	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetInputStream() throws IOException {
		InputStream inputStream = ResourceService.getInputStream(""/images/logo.png"");
		assertNotNull(inputStream);
		inputStream.close();
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetInputStream2() throws IOException {
		InputStream inputStream = ResourceService.getInputStream(""/images/logo.png"");
		assertNotNull(inputStream);
		inputStream.close();
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetInputStream3() throws IOException {
		InputStream inputStream = ResourceService.getInputStream(""/images/logo.png"");
		assertNotNull(inputStream);
		inputStream.close();
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetInputStream4() throws IOException {
		InputStream inputStream = ResourceService.getInputStream(""/images/logo.png"");
		assertNotNull(inputStream);
		inputStream.close();
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetInputStream5() throws IOException {
		InputStream inputStream = ResourceService.getInputStream(""/images/logo.png"");
		assertNotNull(inputStream);
		inputStream.close();
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetInputStream6() throws IOException {
		InputStream inputStream = ResourceService.getInputStream(""/images/logo.png"");
		assertNotNull(inputStream);
		inputStream.close();
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetInputStream7() throws IOException {
		InputStream inputStream = ResourceService.getInputStream(""/images/logo.png"");
		assertNotNull(inputStream);
		inputStream.close();
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetInputStream8() throws IOException {
		InputStream inputStream = ResourceService.getInputStream(""/images/logo.png"");
		assertNotNull(inputStream);
		inputStream.close();
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetInputStream9() throws IOException {
		InputStream inputStream = ResourceService.getInputStream(""/images/logo.png"");
		assertNotNull(inputStream);
		inputStream.close();
	}
	
	/**
	 * Test case for {@link ResourceService#getInputStream(String)}
	 *
	 * @throws IOException
	 */
	@Test
	void testGetInputStream10() throws IOException {
		InputStream inputStream = ResourceService.getInputStream(""/images/logo.png"");
		assertNotNull(inputStream);
		inputStream.close();
	}
}"
cmpl-6wqiw4zwPk9Wi9W4QU6cG2oFVQvpp,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/common/XmlFunctions0.java,69.61055493354797,length,"// XmlFunctions.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * basic functions for reading and writing xml files
 *
 * @author christian
 */
public class XmlFunctions {

    /**
     * returns value of specific xml element
     *
     * @param XmlPath -
     *            element path (XPath)
     * @return String with value of element
     */
    public String getXmlValue(String XmlPath) {
        Node node = findXmlNode(XmlPath);
        return node.getTextContent();
    }
}
","// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#getXmlValue(String)} method.
*/
class XmlFunctionsTest {","// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#getXmlValue(String)} method.
*/
class XmlFunctionsTest {

		/**
		* Test case for {@link XmlFunctions#getXmlValue(String)} method.
		* It tests if the method returns the correct value of the xml element.
		*/
		@Test
		void testGetXmlValue() {
				XmlFunctions xmlFunctions = new XmlFunctions();
				String xmlPath = ""//root/element"";
				String expected = ""value"";
				String actual = xmlFunctions.getXmlValue(xmlPath);
				assertEquals(expected, actual);
		}
}

// XmlFunctions.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * basic functions for reading and writing xml files
 *
 * @author christian
 */
public class XmlFunctions {

    /**
     * returns value of specific xml element
     *
     * @param XmlPath -
     *            element path (XPath)
     * @return String with value of element
     */
    public String getXmlValue(String XmlPath) {
        Node node = findXmlNode(XmlPath);
        return node.getTextContent();
    }
}

// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#getXmlValue(String)} method.
*/
class XmlFunctionsTest {
		
		/**
		* Test case for {@link XmlFunctions#getXmlValue(String)} method.
		* It tests if the method returns the correct value of the xml element.
		*/
		@Test
		void testGetXmlValue() {
				XmlFunctions xmlFunctions = new XmlFunctions();
				String xmlPath = ""//root/element"";
				String expected = ""value"";
				String actual = xmlFunctions.getXmlValue(xmlPath);
				assertEquals(expected, actual);
		}
}

// XmlFunctions.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * basic functions for reading and writing xml files
 *
 * @author christian
 */
public class XmlFunctions {

    /**
     * returns value of specific xml element
     *
     * @param XmlPath -
     *            element path (XPath)
     * @return String with value of element
     */
    public String getXmlValue(String XmlPath) {
        Node node = findXmlNode(XmlPath);
        return node.getTextContent();
    }
}

// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains"
cmpl-6wqk44GECFFNX0u3YZwUu6grQFi9a,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/common/XmlFunctions1.java,68.94405341148376,length,"// XmlFunctions.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 * basic functions for reading and writing xml files
 *
 * @author christian
 */
public class XmlFunctions {

    /**
     * returns a list of nodes matching to the element name
     *
     * @param NodeName -
     *            name of element(s)
     * @return NodeList with found nodes
     */
    public NodeList findXmlNodes(String NodeName) {
        try {
            XPath xpath = XPathFactory.newInstance().newXPath();
            XPathExpression expr = xpath.compile(NodeName);
            Object result = expr.evaluate(xml, XPathConstants.NODESET);
            return (NodeList) result;
        } catch (XPathExpressionException ex) {
            logger.error(ex);
        }
        return null;
    }
}
","// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#findXmlNodes(String)} method.
*/
class XmlFunctionsTest {","// XmlFunctionsTest.java
package common;

import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XmlFunctions}.
* It contains ten unit test cases for the {@link XmlFunctions#findXmlNodes(String)} method.
*/
class XmlFunctionsTest {

		private static final Logger logger = Logger.getLogger(XmlFunctionsTest.class);
		
		private static final String XML_FILE = ""test.xml"";
		
		private static final String XML_FILE_PATH = ""src/test/resources/"";
		
		private static final String XML_FILE_WITH_PATH = XML_FILE_PATH + XML_FILE;
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION = XML_FILE_WITH_PATH + "".xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH_AND_EXTENSION + "".xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION + "".xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION + "".xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION + "".xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION + "".xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION + "".xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION + "".xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION + "".xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION + "".xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION + "".xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION + "".xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION + "".xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION + "".xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION = XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION + "".xml"";
		
		private static final String XML_FILE_WITH_PATH_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXTENSION_AND_EXT"
cmpl-6wqlBMS772twjg8vFMLcXPyRJgL3s,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/server/BomberServer.java,35.853628635406494,stop,"// BomberServer.java
package server;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.GlobalServerMsg;
import messages.global.SessionDetailsMsg;
import messages.global.SessionListMsg;
import org.apache.log4j.Logger;
import org.hsqldb.Server;
import org.hsqldb.jdbc.jdbcDataSource;
import common.Constants;

/**
 * This is the main server class. It is responsible for accepting connections
 * from clients and starting new games/session.
 *
 * @author Steffen, Bj�rn, Daniel
 */
public class BomberServer {

    /**
     * Static factory method.
     *
     * @return The BomberServer Singleton
     */
    public static BomberServer getInstance() {
        if (bomberServer == null) {
            bomberServer = new BomberServer();
        }
        return bomberServer;
    }
}
","// BomberServerTest.java
package server;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.GlobalServerMsg;
import messages.global.SessionDetailsMsg;
import messages.global.SessionListMsg;
import org.apache.log4j.Logger;
import org.hsqldb.Server;
import org.hsqldb.jdbc.jdbcDataSource;
import common.Constants;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberServer}.
* It contains ten unit test cases for the {@link BomberServer#getInstance()} method.
*/
class BomberServerTest {","// BomberServerTest.java
package server;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.ImageIcon;
import messages.Message;
import messages.global.GlobalServerMsg;
import messages.global.SessionDetailsMsg;
import messages.global.SessionListMsg;
import org.apache.log4j.Logger;
import org.hsqldb.Server;
import org.hsqldb.jdbc.jdbcDataSource;
import common.Constants;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BomberServer}.
* It contains ten unit test cases for the {@link BomberServer#getInstance()} method.
*/
class BomberServerTest {

	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns a {@link BomberServer} object.
	*/
	@Test
	void testGetInstance() {
		BomberServer bs = BomberServer.getInstance();
		assertNotNull(bs);
	}
	
	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns the same {@link BomberServer} object.
	*/
	@Test
	void testGetInstance2() {
		BomberServer bs = BomberServer.getInstance();
		BomberServer bs2 = BomberServer.getInstance();
		assertEquals(bs, bs2);
	}
	
	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns the same {@link BomberServer} object.
	*/
	@Test
	void testGetInstance3() {
		BomberServer bs = BomberServer.getInstance();
		BomberServer bs2 = BomberServer.getInstance();
		assertSame(bs, bs2);
	}
	
	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns the same {@link BomberServer} object.
	*/
	@Test
	void testGetInstance4() {
		BomberServer bs = BomberServer.getInstance();
		BomberServer bs2 = BomberServer.getInstance();
		assertSame(bs, bs2);
	}
	
	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns the same {@link BomberServer} object.
	*/
	@Test
	void testGetInstance5() {
		BomberServer bs = BomberServer.getInstance();
		BomberServer bs2 = BomberServer.getInstance();
		assertSame(bs, bs2);
	}
	
	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns the same {@link BomberServer} object.
	*/
	@Test
	void testGetInstance6() {
		BomberServer bs = BomberServer.getInstance();
		BomberServer bs2 = BomberServer.getInstance();
		assertSame(bs, bs2);
	}
	
	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns the same {@link BomberServer} object.
	*/
	@Test
	void testGetInstance7() {
		BomberServer bs = BomberServer.getInstance();
		BomberServer bs2 = BomberServer.getInstance();
		assertSame(bs, bs2);
	}
	
	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns the same {@link BomberServer} object.
	*/
	@Test
	void testGetInstance8() {
		BomberServer bs = BomberServer.getInstance();
		BomberServer bs2 = BomberServer.getInstance();
		assertSame(bs, bs2);
	}
	
	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns the same {@link BomberServer} object.
	*/
	@Test
	void testGetInstance9() {
		BomberServer bs = BomberServer.getInstance();
		BomberServer bs2 = BomberServer.getInstance();
		assertSame(bs, bs2);
	}
	
	/**
	* Test case for the {@link BomberServer#getInstance()} method.
	* It tests if the method returns the same {@link BomberServer} object.
	*/
	@Test
	void testGetInstance10() {
		BomberServer bs = BomberServer.getInstance();
		BomberServer bs2 = BomberServer.getInstance();
		assertSame(bs, bs2);
	}
}"
cmpl-6wqmE4bppzTWL0iP1RQKWATzdBJBq,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/server/ExplosionBounds.java,39.253761768341064,length,"// ExplosionBounds.java
package server;

import java.awt.Point;

/**
 * This class is used by the server to define the bounds of a bomb explosion.
 * It contains four integer fields indicating the min/max pixel value
 * in the given direction that is affected by the explosion. It further offers
 * a method to test if a given point lies within the defined bounds.
 *
 * @author Steffen
 */
public class ExplosionBounds {

    /**
     * Checks whether the given point lies within the bounds of the explosion.
     *
     * @param p The Point to be checked.
     * @return True if p lies within the bounds, false if not.
     */
    public boolean contain(Point p) {
        if (up <= p.y && down >= p.y && right >= p.x && left <= p.x) {
            return true;
        } else {
            return false;
        }
    }
}
","// ExplosionBoundsTest.java
package server;

import java.awt.Point;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExplosionBounds}.
* It contains ten unit test cases for the {@link ExplosionBounds#contain(Point)} method.
*/
class ExplosionBoundsTest {","// ExplosionBoundsTest.java
package server;

import java.awt.Point;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ExplosionBounds}.
* It contains ten unit test cases for the {@link ExplosionBounds#contain(Point)} method.
*/
class ExplosionBoundsTest {

	/**
	 * Test of contain method, of class ExplosionBounds.
	 */
	@Test
	void testContain() {
		System.out.println(""contain"");
		ExplosionBounds instance = new ExplosionBounds();
		instance.up = 0;
		instance.down = 10;
		instance.left = 0;
		instance.right = 10;
		Point p = new Point(5, 5);
		boolean expResult = true;
		boolean result = instance.contain(p);
		assertEquals(expResult, result);
		
		instance.up = 0;
		instance.down = 10;
		instance.left = 0;
		instance.right = 10;
		p = new Point(0, 0);
		expResult = true;
		result = instance.contain(p);
		assertEquals(expResult, result);
		
		instance.up = 0;
		instance.down = 10;
		instance.left = 0;
		instance.right = 10;
		p = new Point(10, 10);
		expResult = true;
		result = instance.contain(p);
		assertEquals(expResult, result);
		
		instance.up = 0;
		instance.down = 10;
		instance.left = 0;
		instance.right = 10;
		p = new Point(0, 10);
		expResult = true;
		result = instance.contain(p);
		assertEquals(expResult, result);
		
		instance.up = 0;
		instance.down = 10;
		instance.left = 0;
		instance.right = 10;
		p = new Point(10, 0);
		expResult = true;
		result = instance.contain(p);
		assertEquals(expResult, result);
		
		instance.up = 0;
		instance.down = 10;
		instance.left = 0;
		instance.right = 10;
		p = new Point(5, 0);
		expResult = true;
		result = instance.contain(p);
		assertEquals(expResult, result);
		
		instance.up = 0;
		instance.down = 10;
		instance.left = 0;
		instance.right = 10;
		p = new Point(5, 10);
		expResult = true;
		result = instance.contain(p);
		assertEquals(expResult, result);
		
		instance.up = 0;
		instance.down = 10;
		instance.left = 0;
		instance.right = 10;
		p = new Point(0, 5);
		expResult = true;
		result = instance.contain(p);
		assertEquals(expResult, result);
		
		instance.up = 0;
		instance.down = 10;
		instance.left = 0;
		instance.right = 10;
		p = new Point(10, 5);
		expResult = true;
		result = instance.contain(p);
		assertEquals(expResult, result);
		
		instance.up = 0;
		instance.down = 10;
		instance.left = 0;
		instance.right = 10;
		p = new Point(11, 5);
		expResult = false;
		result = instance.contain(p);
		assertEquals(expResult, result);
	}
}

// Game.java
package server;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import shared.Bomb;
import shared.BombType;
import shared.Explosion;
import shared.ExplosionType;
import shared.GameObject;
import shared.GameObjectType;
import shared.MapObject;
import shared.MapObjectType;
import shared.Player;
import shared.PlayerType;
import shared.PowerUp;
import shared.PowerUpType;
import shared.Protocol;
import shared.Protocol.Command;
import shared.Protocol.Command.Type;
import shared.Protocol.Command.Update;
import shared.Protocol.Command.Update.Builder;
import shared.Protocol.Command.Update.UpdateType;
import shared.Protocol.Command.Update.UpdateType.Builder;
import shared.Protocol.Command.Update.UpdateType.UpdateTypeCase;
import shared.Protocol.Command.Update.UpdateType.UpdateTypeCase.UpdateTypeOneofCase;
import shared.Protocol.Command.Update.UpdateType.UpdateTypeCase.UpdateTypeOneofCase.UpdateTypeOneof;
import shared.Protocol.Command.Update.UpdateType.UpdateTypeCase.UpdateTypeOneofCase.UpdateTypeOneof.Builder;
import shared.Protocol.Command.Update.UpdateType.UpdateTypeCase.UpdateTypeOneofCase.UpdateTypeOneof.UpdateTypeOneofCase;
import shared.Protocol.Command.Update.UpdateType.UpdateTypeCase.UpdateTypeOneofCase.UpdateTypeOneof.UpdateTypeOneofCase.UpdateTypeOneofOneofCase;
import shared.Protocol.Command.Update.UpdateType.UpdateTypeCase.UpdateTypeOneofCase.UpdateTypeOneof.UpdateTypeOneofCase.UpdateTypeOneofOneofCase.UpdateTypeOneofOneof;
import shared.Protocol.Command.Update.UpdateType.UpdateTypeCase.UpdateTypeOneofCase.UpdateTypeOneof.UpdateTypeOneofCase.UpdateTypeOneofOneofCase.UpdateTypeOneofOneof.Builder;
import shared.Protocol.Command.Update.UpdateType.UpdateTypeCase.UpdateTypeOneofCase.UpdateTypeOneof.UpdateTypeOneofCase.UpdateTypeOneofOneofCase.UpdateTypeOneofOneof.UpdateTypeOneofOneofCase;
import shared.Protocol.Command.Update.UpdateType.UpdateTypeCase.UpdateTypeOneofCase.UpdateTypeOneof.UpdateTypeOneofCase.UpdateTypeOneofOneofCase.UpdateTypeOneofOneof.UpdateTypeOneofOneofCase.UpdateTypeOneofOneofOneofCase;
import shared.Protocol.Command.Update.UpdateType.UpdateTypeCase.UpdateTypeOneofCase.UpdateTypeOneof.UpdateTypeOneofCase.UpdateTypeOneofOneofCase.UpdateTypeOneofOneof.UpdateTypeOneofOneofCase.UpdateTypeOneofOneofOneofCase.UpdateTypeOneofOneofOneof;
import shared.Protocol.Command.Update.UpdateType.UpdateTypeCase.UpdateTypeOneofCase.UpdateTypeOneof.UpdateTypeOneofCase.UpdateTypeOneofOneofCase.UpdateTypeOneofOneof.UpdateTypeOneofOneofCase.UpdateTypeOneofOneofOneofCase.UpdateTypeOneofOneofOneof.Builder;
import shared.Protocol.Command.Update.UpdateType.UpdateTypeCase.UpdateTypeOneofCase.UpdateTypeOneof.UpdateTypeOneofCase.UpdateTypeOneofOneofCase.UpdateTypeOneofOneof.UpdateTypeOneofOneofCase.UpdateTypeOneofOneofOneofCase.UpdateTypeOneofOneofOneof.UpdateTypeOneofOneofOneofCase;
import shared.Protocol.Command.Update.UpdateType.UpdateTypeCase.UpdateTypeOneofCase.UpdateTypeOneof.UpdateTypeOneofCase.UpdateTypeOneofOneofCase.UpdateTypeOneofOneof.UpdateTypeOneofOneofCase.UpdateTypeOneofOneofOneofCase.UpdateTypeOneofOneofOneof.UpdateTypeOneofOneofOneofCase.UpdateTypeOneofOneofOneofOneofCase;
import shared.Protocol.Command.Update.UpdateType.UpdateTypeCase.UpdateTypeOneofCase.UpdateTypeOneof.UpdateTypeOneofCase.UpdateTypeOne"
cmpl-6wqnH7RrwvYFjoktUZ7ZVcApNZD3h,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/server/ServerBomb.java,66.42643356323242,length,"// ServerBomb.java
package server;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.Collection;
import java.util.Vector;
import messages.round.BombExplodedMsg;
import org.apache.log4j.Logger;
import common.Bomb;
import common.Constants;
import common.GameObject;
import common.Player;
import common.PowerUp;
import common.Tile;
import db.DBException;
import db.DBGameUser;
import db.DBServiceFactory;

/**
 * The Bomb Object of the Server. This Bomb ticks some times and then exploded.
 * Then it detects the player and the tile hits.
 *
 * @author Bj�rn, Steffen, Daniel
 */
public class ServerBomb extends Bomb {

    /**
     * handles the tick of the bomb
     *
     * @return
     */
    public boolean tick() {
        this.tickFrames--;
        if (tickFrames == 0) {
            return true;
        } else {
            return false;
        }
    }
}
","// ServerBombTest.java
package server;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.Collection;
import java.util.Vector;
import messages.round.BombExplodedMsg;
import org.apache.log4j.Logger;
import common.Bomb;
import common.Constants;
import common.GameObject;
import common.Player;
import common.PowerUp;
import common.Tile;
import db.DBException;
import db.DBGameUser;
import db.DBServiceFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ServerBomb}.
* It contains ten unit test cases for the {@link ServerBomb#tick()} method.
*/
class ServerBombTest {","// ServerBombTest.java
package server;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.Collection;
import java.util.Vector;
import messages.round.BombExplodedMsg;
import org.apache.log4j.Logger;
import common.Bomb;
import common.Constants;
import common.GameObject;
import common.Player;
import common.PowerUp;
import common.Tile;
import db.DBException;
import db.DBGameUser;
import db.DBServiceFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ServerBomb}.
* It contains ten unit test cases for the {@link ServerBomb#tick()} method.
*/
class ServerBombTest {

	/**
	 * Test case for {@link ServerBomb#tick()} method.
	 * The test case checks if the tick method returns true if the tickFrames are 0.
	 */
	@Test
	void testTick_tickFramesAre0_returnsTrue() {
		ServerBomb bomb = new ServerBomb();
		bomb.tickFrames = 0;
		assertTrue(bomb.tick());
	}
	
	/**
	 * Test case for {@link ServerBomb#tick()} method.
	 * The test case checks if the tick method returns false if the tickFrames are 1.
	 */
	@Test
	void testTick_tickFramesAre1_returnsFalse() {
		ServerBomb bomb = new ServerBomb();
		bomb.tickFrames = 1;
		assertFalse(bomb.tick());
	}
	
	/**
	 * Test case for {@link ServerBomb#tick()} method.
	 * The test case checks if the tick method returns false if the tickFrames are 2.
	 */
	@Test
	void testTick_tickFramesAre2_returnsFalse() {
		ServerBomb bomb = new ServerBomb();
		bomb.tickFrames = 2;
		assertFalse(bomb.tick());
	}
	
	/**
	 * Test case for {@link ServerBomb#tick()} method.
	 * The test case checks if the tick method returns false if the tickFrames are 3.
	 */
	@Test
	void testTick_tickFramesAre3_returnsFalse() {
		ServerBomb bomb = new ServerBomb();
		bomb.tickFrames = 3;
		assertFalse(bomb.tick());
	}
	
	/**
	 * Test case for {@link ServerBomb#tick()} method.
	 * The test case checks if the tick method returns false if the tickFrames are 4.
	 */
	@Test
	void testTick_tickFramesAre4_returnsFalse() {
		ServerBomb bomb = new ServerBomb();
		bomb.tickFrames = 4;
		assertFalse(bomb.tick());
	}
	
	/**
	 * Test case for {@link ServerBomb#tick()} method.
	 * The test case checks if the tick method returns false if the tickFrames are 5.
	 */
	@Test
	void testTick_tickFramesAre5_returnsFalse() {
		ServerBomb bomb = new ServerBomb();
		bomb.tickFrames = 5;
		assertFalse(bomb.tick());
	}
	
	/**
	 * Test case for {@link ServerBomb#tick()} method.
	 * The test case checks if the tick method returns false if the tickFrames are 6.
	 */
	@Test
	void testTick_tickFramesAre6_returnsFalse() {
		ServerBomb bomb = new ServerBomb();
		bomb.tickFrames = 6;
		assertFalse(bomb.tick());
	}
	
	/**
	 * Test case for {@link ServerBomb#tick()} method.
	 * The test case checks if the tick method returns false if the tickFrames are 7.
	 */
	@Test
	void testTick_tickFramesAre7_returnsFalse() {
		ServerBomb bomb = new ServerBomb();
		bomb.tickFrames = 7;
		assertFalse(bomb.tick());
	}
	
	/**
	 * Test case for {@link ServerBomb#tick()} method.
	 * The test case checks if the tick method returns false if the tickFrames are 8.
	 */
	@Test
	void testTick_tickFramesAre8_returnsFalse() {
		ServerBomb bomb = new ServerBomb();
		bomb.tickFrames = 8;
		assertFalse(bomb.tick());
	}
	
	/**
	 * Test case for {@link ServerBomb#tick()} method.
	 * The test case checks if the tick method returns false if the tickFrames are 9.
	 */
	@Test
	void testTick_tickFramesAre9_returnsFalse() {
		ServerBomb bomb = new ServerBomb();
		bomb.tickFrames = 9;
		assertFalse(bomb.tick());
	}
}

// ServerBomb.java
package server;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.Collection;
import java.util.Vector;
import messages.round.BombExplodedMsg;
import org.apache.log4j.Logger;
import common.Bomb;
import common.Constants;
import common.GameObject;
import common.Player;
import common.PowerUp;
import common.Tile;
import db.DBException;
import db.DBGameUser;
import db.DBServiceFactory;

/**
 * The Bomb Object of the Server. This Bomb ticks some times and then exploded.
 * Then it detects the player and the tile hits.
 *
 * @author Bj�rn, Steffen, Daniel
 */
public class ServerBomb extends Bomb {

    /**
     * handles the tick of the bomb
     *
     * @return
     */
    public boolean tick() {
        this.tickFrames--;
        if (tickFrames == 0) {
            return true;
        } else {
            return false;
        }
    }
}

// ServerBombTest.java
package server;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.Collection;
import java.util.Vector;
import messages.round.BombExplodedMsg;
import org.apache.log4j.Logger;
import common.Bomb;
import common.Constants;
import common.GameObject;
import common.Player;
import common.PowerUp;
import common.Tile;
import db.DBException;
import db.DBGameUser;
import db.DBServiceFactory;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ServerBomb}.
* It contains ten unit test cases for the {@link ServerBomb#tick()} method.
*/
class ServerBombTest {
		
	/**
	 * Test case for {@link ServerBomb#tick()} method.
	 * The test case checks if the tick method returns true if the tickFrames are 0.
	 */
	@Test
	void testTick_tickFramesAre0_returnsTrue() {
		ServerBomb bomb = new ServerBomb();
		bomb.tickFrames = 0;
		assertTrue(bomb.tick());
	}
	
	/**
	 * Test case for {@link ServerBomb#tick()} method.
	 * The test case checks if the tick method returns false if the tickFrames are 1.
	 */
	@Test
	void testTick_tickFramesAre1_returnsFalse() {
		ServerBomb bomb = new ServerBomb();
		bomb.tickFrames = 1;
		assertFalse(bomb.tick());
	}
	
	/**
	 * Test case for {@link ServerBomb#tick()} method.
	 * The test case checks if the tick method returns false if the tickFrames are 2.
	 */
	@Test
	void testTick_tickFramesAre2_returnsFalse() {
		ServerBomb bomb = new ServerBomb();
		bomb.tickFrames = 2;
		assertFalse(bomb.tick());
	}
	
	/**
	 * Test case for {@link ServerBomb#tick()} method.
	 * The test case checks if the tick method returns false if the tickFrames are 3.
	 */
	@Test
	void testTick_tickFramesAre3_returnsFalse() {
		ServerBomb bomb = new ServerBomb();
		bomb.tickFrames = 3;
		assertFalse(bomb.tick());
	}
	
	/**
	 * Test case for {@link ServerBomb#tick()} method.
	 * The test case checks if the tick method returns false if the tickFrames are 4.
	 */
	@Test
	void testTick_tickFramesAre4_returnsFalse() {
		ServerBomb bomb = new ServerBomb();
		bomb.tickFrames = 4;
		assertFalse(bomb.tick());
	}
	
	/**
	 * Test case for {@link ServerBomb#tick()} method.
	 *"
cmpl-6wqoLjEhj2sPitCiwaP0tI1p5E8ha,/EvoSuiteBenchmark/scenario2/57_hft-bomberman/src/main/java/server/StopServer.java,2.635824203491211,stop,"// StopServer.java
package server;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import messages.Message;
import messages.global.StopServerMsg;

/**
 * Sends a Message to the Server, that he should closed
 *
 * @author Bj�rn
 */
public class StopServer {

    /**
     * Connect to the Server
     */
    public boolean connectToSrv() {
        try {
            //System.out.println(""Connecting..."");
            System.out.println(""Establishing a connection "");
            server = new Socket(serverName, serverPort);
            out = new ObjectOutputStream(server.getOutputStream());
            System.out.println(""connected to "" + serverName);
            return true;
        } catch (IOException e) {
            // TODO Auto-generated catch block
            // e.printStackTrace();
            System.out.println(""Connection failed"");
            return false;
        }
    }
}
","// StopServerTest.java
package server;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import messages.Message;
import messages.global.StopServerMsg;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StopServer}.
* It contains ten unit test cases for the {@link StopServer#connectToSrv()} method.
*/
class StopServerTest {","// StopServerTest.java
package server;

import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import messages.Message;
import messages.global.StopServerMsg;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StopServer}.
* It contains ten unit test cases for the {@link StopServer#connectToSrv()} method.
*/
class StopServerTest {

	/**
	* Test case for {@link StopServer#connectToSrv()}.
	* It tests if the connection to the server is established.
	*/
	@Test
	void testConnectToSrv() {
		StopServer stopServer = new StopServer();
		assertTrue(stopServer.connectToSrv());
	}
}"
