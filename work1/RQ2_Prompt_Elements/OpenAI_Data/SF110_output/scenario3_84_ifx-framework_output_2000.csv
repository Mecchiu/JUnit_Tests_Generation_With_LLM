ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6whObG7S62Q1T5GPusJnL3l9kIaVF,/EvoSuiteBenchmark/scenario3/84_ifx-framework/src/main/java/org/sourceforge/ifx/tools/JavaSource0.java,30.937968969345093,stop,"// JavaSource.java
package org.sourceforge.ifx.tools;

import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.StringTokenizer;

/**
 * This class provides an abstraction to collect information about a
 * generated Java class file. Its toString() method will produce a String
 * that can be written using a Writer object to persistent store.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.5 $
 */
public class JavaSource {

    /**
     * Convenience methods since velocity does not understand the conditional
     * ""== null"". Returns true if this class implements an interface.
     *
     * @return true if this class implements an interface else false.
     */
    public boolean hasInterface();
}
","// JavaSourceTest.java
package org.sourceforge.ifx.tools;

import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JavaSource}.
* It contains ten unit test cases for the {@link JavaSource#hasInterface()} method.
*/
class JavaSourceTest {","// JavaSourceTest.java
package org.sourceforge.ifx.tools;

import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JavaSource}.
* It contains ten unit test cases for the {@link JavaSource#hasInterface()} method.
*/
class JavaSourceTest {

	/**
	* Test case for {@link JavaSource#hasInterface()} method.
	* It tests the method with a null interface.
	*/
	@Test
	public void testHasInterfaceWithNullInterface() {
		JavaSource javaSource = new JavaSource();
		javaSource.setInterface(null);
		assertFalse(javaSource.hasInterface());
	}
	
	/**
	* Test case for {@link JavaSource#hasInterface()} method.
	* It tests the method with an empty interface.
	*/
	@Test
	public void testHasInterfaceWithEmptyInterface() {
		JavaSource javaSource = new JavaSource();
		javaSource.setInterface("""");
		assertFalse(javaSource.hasInterface());
	}
	
	/**
	* Test case for {@link JavaSource#hasInterface()} method.
	* It tests the method with a non-empty interface.
	*/
	@Test
	public void testHasInterfaceWithNonEmptyInterface() {
		JavaSource javaSource = new JavaSource();
		javaSource.setInterface(""java.lang.Runnable"");
		assertTrue(javaSource.hasInterface());
	}
}"
cmpl-6whQJPH6ZBDjcFhZORPL3PMSuCl5v,/EvoSuiteBenchmark/scenario3/84_ifx-framework/src/main/java/org/sourceforge/ifx/tools/JavaSource1.java,63.03902769088745,stop,"// JavaSource.java
package org.sourceforge.ifx.tools;

import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.StringTokenizer;

/**
 * This class provides an abstraction to collect information about a
 * generated Java class file. Its toString() method will produce a String
 * that can be written using a Writer object to persistent store.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.5 $
 */
public class JavaSource {

    /**
     * Convenience method since velocity does not understand the conditional
     * ""== null"". Returns true if this class inherits from a superclass.
     *
     * @return true if this class has a superclass, else false.
     */
    public boolean hasSuperClass();
}
","// JavaSourceTest.java
package org.sourceforge.ifx.tools;

import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JavaSource}.
* It contains ten unit test cases for the {@link JavaSource#hasSuperClass()} method.
*/
class JavaSourceTest {","// JavaSourceTest.java
package org.sourceforge.ifx.tools;

import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JavaSource}.
* It contains ten unit test cases for the {@link JavaSource#hasSuperClass()} method.
*/
class JavaSourceTest {

	/**
	* Test case for {@link JavaSource#hasSuperClass()} method.
	* This test case checks if the method returns true when the superclass is not null.
	*/
	@Test
	public void testHasSuperClass_True() {
		JavaSource javaSource = new JavaSource();
		javaSource.setSuperClass(""SuperClass"");
		assertTrue(javaSource.hasSuperClass());
	}
	
	/**
	* Test case for {@link JavaSource#hasSuperClass()} method.
	* This test case checks if the method returns false when the superclass is null.
	*/
	@Test
	public void testHasSuperClass_False() {
		JavaSource javaSource = new JavaSource();
		assertFalse(javaSource.hasSuperClass());
	}
}"
cmpl-6whRqhwY5cKF1o9C9YxVHDoUKFuX4,/EvoSuiteBenchmark/scenario3/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDecoder.java,184.63427829742432,stop,"// IFXDecoder.java
package org.sourceforge.ifx.utils;

import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Iterator;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.sourceforge.ifx.basetypes.IFXString;
import org.sourceforge.ifx.basetypes.IBaseType;
import org.jdom.Element;

/**
 * Decodes an IFX XML String to its equivalent Framework bean.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.3 $
 */
public class IFXDecoder {

    /**
     * Decodes the element into its equivalent IFX XML representation.
     *
     * @param element the Element to decode.
     * @return an IFXObject.
     * @exception IFXException wrapper for underlying exception.
     */
    public IFXObject decode(Element element) throws IFXException;
}
","// IFXDecoderTest.java
package org.sourceforge.ifx.utils;

import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Iterator;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.sourceforge.ifx.basetypes.IFXString;
import org.sourceforge.ifx.basetypes.IBaseType;
import org.jdom.Element;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXDecoder}.
* It contains ten unit test cases for the {@link IFXDecoder#decode(Element)} method.
*/
class IFXDecoderTest {","// IFXDecoderTest.java
package org.sourceforge.ifx.utils;

import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Iterator;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.sourceforge.ifx.basetypes.IFXString;
import org.sourceforge.ifx.basetypes.IBaseType;
import org.jdom.Element;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXDecoder}.
* It contains ten unit test cases for the {@link IFXDecoder#decode(Element)} method.
*/
class IFXDecoderTest {

	/**
	 * Test case for {@link IFXDecoder#decode(Element)} method.
	 * It tests the decoding of a simple IFX XML String to its equivalent bean.
	 */
	@Test
	public void testDecodeSimple() throws Exception {
		IFXDecoder decoder = new IFXDecoder();
		Element element = new Element(""IFX"");
		Element child = new Element(""IFXString"");
		child.setText(""Hello World"");
		element.addContent(child);
		IFXObject ifxObject = decoder.decode(element);
		assertTrue(ifxObject instanceof IFXString);
		assertEquals(""Hello World"", ((IFXString)ifxObject).getValue());
	}
	
	/**
	 * Test case for {@link IFXDecoder#decode(Element)} method.
	 * It tests the decoding of a simple IFX XML String to its equivalent bean.
	 */
	@Test
	public void testDecodeSimple2() throws Exception {
		IFXDecoder decoder = new IFXDecoder();
		Element element = new Element(""IFX"");
		Element child = new Element(""IFXString"");
		child.setText(""Hello World"");
		element.addContent(child);
		IFXObject ifxObject = decoder.decode(element);
		assertTrue(ifxObject instanceof IFXString);
		assertEquals(""Hello World"", ((IFXString)ifxObject).getValue());
	}
	
	/**
	 * Test case for {@link IFXDecoder#decode(Element)} method.
	 * It tests the decoding of a simple IFX XML String to its equivalent bean.
	 */
	@Test
	public void testDecodeSimple3() throws Exception {
		IFXDecoder decoder = new IFXDecoder();
		Element element = new Element(""IFX"");
		Element child = new Element(""IFXString"");
		child.setText(""Hello World"");
		element.addContent(child);
		IFXObject ifxObject = decoder.decode(element);
		assertTrue(ifxObject instanceof IFXString);
		assertEquals(""Hello World"", ((IFXString)ifxObject).getValue());
	}
	
	/**
	 * Test case for {@link IFXDecoder#decode(Element)} method.
	 * It tests the decoding of a simple IFX XML String to its equivalent bean.
	 */
	@Test
	public void testDecodeSimple4() throws Exception {
		IFXDecoder decoder = new IFXDecoder();
		Element element = new Element(""IFX"");
		Element child = new Element(""IFXString"");
		child.setText(""Hello World"");
		element.addContent(child);
		IFXObject ifxObject = decoder.decode(element);
		assertTrue(ifxObject instanceof IFXString);
		assertEquals(""Hello World"", ((IFXString)ifxObject).getValue());
	}
	
	/**
	 * Test case for {@link IFXDecoder#decode(Element)} method.
	 * It tests the decoding of a simple IFX XML String to its equivalent bean.
	 */
	@Test
	public void testDecodeSimple5() throws Exception {
		IFXDecoder decoder = new IFXDecoder();
		Element element = new Element(""IFX"");
		Element child = new Element(""IFXString"");
		child.setText(""Hello World"");
		element.addContent(child);
		IFXObject ifxObject = decoder.decode(element);
		assertTrue(ifxObject instanceof IFXString);
		assertEquals(""Hello World"", ((IFXString)ifxObject).getValue());
	}
	
	/**
	 * Test case for {@link IFXDecoder#decode(Element)} method.
	 * It tests the decoding of a simple IFX XML String to its equivalent bean.
	 */
	@Test
	public void testDecodeSimple6() throws Exception {
		IFXDecoder decoder = new IFXDecoder();
		Element element = new Element(""IFX"");
		Element child = new Element(""IFXString"");
		child.setText(""Hello World"");
		element.addContent(child);
		IFXObject ifxObject = decoder.decode(element);
		assertTrue(ifxObject instanceof IFXString);
		assertEquals(""Hello World"", ((IFXString)ifxObject).getValue());
	}
	
	/**
	 * Test case for {@link IFXDecoder#decode(Element)} method.
	 * It tests the decoding of a simple IFX XML String to its equivalent bean.
	 */
	@Test
	public void testDecodeSimple7() throws Exception {
		IFXDecoder decoder = new IFXDecoder();
		Element element = new Element(""IFX"");
		Element child = new Element(""IFXString"");
		child.setText(""Hello World"");
		element.addContent(child);
		IFXObject ifxObject = decoder.decode(element);
		assertTrue(ifxObject instanceof IFXString);
		assertEquals(""Hello World"", ((IFXString)ifxObject).getValue());
	}
	
	/**
	 * Test case for {@link IFXDecoder#decode(Element)} method.
	 * It tests the decoding of a simple IFX XML String to its equivalent bean.
	 */
	@Test
	public void testDecodeSimple8() throws Exception {
		IFXDecoder decoder = new IFXDecoder();
		Element element = new Element(""IFX"");
		Element child = new Element(""IFXString"");
		child.setText(""Hello World"");
		element.addContent(child);
		IFXObject ifxObject = decoder.decode(element);
		assertTrue(ifxObject instanceof IFXString);
		assertEquals(""Hello World"", ((IFXString)ifxObject).getValue());
	}
	
	/**
	 * Test case for {@link IFXDecoder#decode(Element)} method.
	 * It tests the decoding of a simple IFX XML String to its equivalent bean.
	 */
	@Test
	public void testDecodeSimple9() throws Exception {
		IFXDecoder decoder = new IFXDecoder();
		Element element = new Element(""IFX"");
		Element child = new Element(""IFXString"");
		child.setText(""Hello World"");
		element.addContent(child);
		IFXObject ifxObject = decoder.decode(element);
		assertTrue(ifxObject instanceof IFXString);
		assertEquals(""Hello World"", ((IFXString)ifxObject).getValue());
	}
	
	/**
	 * Test case for {@link IFXDecoder#decode(Element)} method.
	 * It tests the decoding of a simple IFX XML String to its equivalent bean.
	 */
	@Test
	public void testDecodeSimple10() throws Exception {
		IFXDecoder decoder = new IFXDecoder();
		Element element = new Element(""IFX"");
		Element child = new Element(""IFXString"");
		child.setText(""Hello World"");
		element.addContent(child);
		IFXObject ifxObject = decoder.decode(element);
		assertTrue(ifxObject instanceof IFXString);
		assertEquals(""Hello World"", ((IFXString)ifxObject).getValue());
	}
}"
cmpl-6whTdQNO8DUHnoYCUUEE5zyIpsR49,/EvoSuiteBenchmark/scenario3/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDocumentHandler0.java,66.18643498420715,length,"// IFXDocumentHandler.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;

/**
 * The IFXDocumentHandler provides methods for formatting and validating
 * IFX XML Documents.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.2 $
 */
public class IFXDocumentHandler {

    /**
     * Builds a JDOM Document object from an IFXObject.
     *
     * @param obj the IFXObject object to format.
     * @param namespacePrefix the namespace prefix to use in the output. A
     * value of null implies no prefix. If the namespaceURI is specified it
     * will be treated as the default namespace.
     * @param namespaceURI the namespace URI to use in the output. If specified
     * an xmlns declaration will be prepended to the output.
     * @return a JDOM Document object.
     * @exception IFXException if there was a problem building the document.
     */
    public static Document build(IFXObject obj, String namespacePrefix, String namespaceURI) throws IFXException;
}
","// IFXDocumentHandlerTest.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXDocumentHandler}.
* It contains ten unit test cases for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
*/
class IFXDocumentHandlerTest {","// IFXDocumentHandlerTest.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXDocumentHandler}.
* It contains ten unit test cases for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
*/
class IFXDocumentHandlerTest {

	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the {@code obj} parameter is {@code null}.
	* Expected result: {@code IllegalArgumentException} is thrown.
	*/
	@Test
	void testBuild_objIsNull() {
		assertThrows(IllegalArgumentException.class, () -> {
			IFXDocumentHandler.build(null, """", """");
		});
	}
	
	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the {@code namespacePrefix} parameter is {@code null}.
	* Expected result: {@code IllegalArgumentException} is thrown.
	*/
	@Test
	void testBuild_namespacePrefixIsNull() {
		assertThrows(IllegalArgumentException.class, () -> {
			IFXDocumentHandler.build(new IFXObject(), null, """");
		});
	}
	
	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the {@code namespaceURI} parameter is {@code null}.
	* Expected result: {@code IllegalArgumentException} is thrown.
	*/
	@Test
	void testBuild_namespaceURIIsNull() {
		assertThrows(IllegalArgumentException.class, () -> {
			IFXDocumentHandler.build(new IFXObject(), """", null);
		});
	}
	
	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the {@code obj} parameter is an instance of {@code IFXObject} class.
	* Expected result: {@code IFXException} is thrown.
	*/
	@Test
	void testBuild_objIsIFXObject() {
		assertThrows(IFXException.class, () -> {
			IFXDocumentHandler.build(new IFXObject(), """", """");
		});
	}
	
	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the {@code obj} parameter is an instance of {@code IFXObject} class.
	* Expected result: {@code IFXException} is thrown.
	*/
	@Test
	void testBuild_objIsIFXObject_namespacePrefixIsEmpty() {
		assertThrows(IFXException.class, () -> {
			IFXDocumentHandler.build(new IFXObject(), """", """");
		});
	}
	
	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the {@code obj} parameter is an instance of {@code IFXObject} class.
	* Expected result: {@code IFXException} is thrown.
	*/
	@Test
	void testBuild_objIsIFXObject_namespaceURIIsEmpty() {
		assertThrows(IFXException.class, () -> {
			IFXDocumentHandler.build(new IFXObject(), """", """");
		});
	}
	
	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the {@code obj} parameter is an instance of {@code IFXObject} class.
	* Expected result: {@code IFXException} is thrown.
	*/
	@Test
	void testBuild_objIsIFXObject_namespacePrefixIsEmpty_namespaceURIIsEmpty() {
		assertThrows(IFXException.class, () -> {
			IFXDocumentHandler.build(new IFXObject(), """", """");
		});
	}
	
	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the {@code obj} parameter is an instance of {@code IFXObject} class.
	* Expected result: {@code IFXException} is thrown.
	*/
	@Test
	void testBuild_objIsIFXObject_namespacePrefixIsNotEmpty() {
		assertThrows(IFXException.class, () -> {
			IFXDocumentHandler.build(new IFXObject(), ""prefix"", """");
		});
	}
	
	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the {@code obj} parameter is an instance of {@code IFXObject} class.
	* Expected result: {@code IFXException} is thrown.
	*/
	@Test
	void testBuild_objIsIFXObject_namespaceURIIsNotEmpty() {
		assertThrows(IFXException.class, () -> {
			IFXDocumentHandler.build(new IFXObject(), """", ""uri"");
		});
	}
	
	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the {@code obj} parameter is an instance of {@code IFXObject} class.
	* Expected result: {@code IFXException} is thrown.
	*/
	@Test
	void testBuild_objIsIFXObject_namespacePrefixIsNotEmpty_namespaceURIIsNotEmpty() {
		assertThrows(IFXException.class, () -> {
			IFXDocumentHandler.build(new IFXObject(), ""prefix"", ""uri"");
		});
	}
}

// IFXDocumentHandler.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;

/**
 * The IFXDocumentHandler provides methods for formatting and validating
 * IFX XML Documents.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.2 $
 */
public class IFXDocumentHandler {

    /**
     * Builds a JDOM Document object from an IFXObject.
     *
     * @param obj the IFXObject object to format.
     * @param namespacePrefix the namespace prefix to use in the output. A
     * value of null implies no prefix. If the namespaceURI is specified it
     * will be treated as the default namespace.
     * @param namespaceURI the namespace URI to use in the output. If specified
     * an xmlns declaration will be prepended to the output.
     * @return a JDOM Document object.
     * @exception IFXException if there was a problem building the document.
     */
    public static Document build(IFXObject obj, String namespacePrefix, String namespaceURI) throws IFXException {
        if (obj == null) {
            throw new IllegalArgumentException(""obj cannot be null."");
        }
        if (namespacePrefix == null) {
            throw new IllegalArgumentException(""namespacePrefix cannot be null."");
        }
        if (namespaceURI == null) {
            throw new IllegalArgumentException(""namespaceURI cannot be null."");
        }
        if (obj instanceof IFXObject) {
            throw new IFXException(""Cannot build a document from an IFXObject."");
        }
        Element root = new Element(obj.getObjectName());
        if (namespacePrefix.length() > 0) {
            root.setNamespace(Namespace.getNamespace(namespacePrefix, namespace"
cmpl-6whUhWEt5PYXlC2HoVV2zO7b5idS6,/EvoSuiteBenchmark/scenario3/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDocumentHandler1.java,60.154032945632935,length,"// IFXDocumentHandler.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;

/**
 * The IFXDocumentHandler provides methods for formatting and validating
 * IFX XML Documents.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.2 $
 */
public class IFXDocumentHandler {

    /**
     * Parses a Document object into an IFXObject. This is a thin wrapper
     * over the IFXDecoder.decode() method.
     *
     * @param doc the JDOM Document object to parse.
     * @exception IFXException if any problems were encountered in parsing.
     */
    public static IFXObject parse(Document doc) throws IFXException;
}
","// IFXDocumentHandlerTest.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXDocumentHandler}.
* It contains ten unit test cases for the {@link IFXDocumentHandler#parse(Document)} method.
*/
class IFXDocumentHandlerTest {","// IFXDocumentHandlerTest.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXDocumentHandler}.
* It contains ten unit test cases for the {@link IFXDocumentHandler#parse(Document)} method.
*/
class IFXDocumentHandlerTest {

	/**
	* Test case for {@link IFXDocumentHandler#parse(Document)} method.
	* It tests the case when the document is null.
	*/
	@Test
	public void testParse_NullDocument() throws IFXException {
		IFXObject ifxObject = IFXDocumentHandler.parse(null);
		assertNull(ifxObject);
	}
	
	/**
	* Test case for {@link IFXDocumentHandler#parse(Document)} method.
	* It tests the case when the document is not null.
	*/
	@Test
	public void testParse_NotNullDocument() throws IFXException {
		IFXObject ifxObject = IFXDocumentHandler.parse(new Document());
		assertNotNull(ifxObject);
	}
}

// IFXDecoder.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;

/**
 * The IFXDecoder class provides methods for parsing an IFX XML Document
 * into an IFXObject.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.2 $
 */
public class IFXDecoder {

    /**
     * Parses a Document object into an IFXObject.
     *
     * @param doc the JDOM Document object to parse.
     * @exception IFXException if any problems were encountered in parsing.
     */
    public static IFXObject decode(Document doc) throws IFXException;
}

// IFXDecoderTest.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXDecoder}.
* It contains ten unit test cases for the {@link IFXDecoder#decode(Document)} method.
*/
class IFXDecoderTest {
		
	/**
	* Test case for {@link IFXDecoder#decode(Document)} method.
	* It tests the case when the document is null.
	*/
	@Test
	public void testDecode_NullDocument() throws IFXException {
		IFXObject ifxObject = IFXDecoder.decode(null);
		assertNull(ifxObject);
	}
	
	/**
	* Test case for {@link IFXDecoder#decode(Document)} method.
	* It tests the case when the document is not null.
	*/
	@Test
	public void testDecode_NotNullDocument() throws IFXException {
		IFXObject ifxObject = IFXDecoder.decode(new Document());
		assertNotNull(ifxObject);
	}
}

// IFXEncoder.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;

/**
 * The IFXEncoder class provides methods for formatting an IFXObject
 * into an IFX XML Document.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.2 $
 */
public class IFXEncoder {

    /**
     * Formats an IFXObject into an IFX XML Document.
     *
     * @param ifxObject the IFXObject to format.
     * @exception IFXException if any problems were encountered in formatting.
     */
    public static Document encode(IFXObject ifxObject) throws IFXException;
}

// IFXEncoderTest.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXEncoder}.
* It contains ten unit test cases for the {@link IFXEncoder#encode(IFXObject)} method.
*/
class IFXEncoderTest {
		
	/**
	* Test case for {@link IFXEncoder#encode(IFXObject)} method.
	* It tests the case when the ifxObject is null.
	*/
	@Test
	public void testEncode_NullIFXObject() throws IFXException {
		Document document = IFXEncoder.encode(null);
		assertNull(document);
	}
	
	/**
	* Test case for {@link IFXEncoder#encode(IFXObject)} method.
	* It tests the case when the ifxObject is not null.
	*/
	@Test
	public void testEncode_NotNullIFXObject() throws IFXException {
		Document document = IFXEncoder.encode(new IFXObject());
		assertNotNull(document);
	}
}

// IFXObject.java
package org.sourceforge.ifx.basetypes;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;

/**
 * The IFXObject class is the base class for all IFX objects.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.2 $
 */
public class IFXObject {

    /**
     * Returns the XML representation of this object.
     *
     * @return the XML representation of this object.
     */
    public String toXML();
}

// IFXObjectTest.java
package org.sourceforge.ifx.basetypes;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXObject}.
* It contains ten unit test cases"
cmpl-6whVgAlOFZhY33WXsxXcU3M6c4OgR,/EvoSuiteBenchmark/scenario3/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDocumentHandler2.java,42.18589735031128,stop,"// IFXDocumentHandler.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;

/**
 * The IFXDocumentHandler provides methods for formatting and validating
 * IFX XML Documents.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.2 $
 */
public class IFXDocumentHandler {

    /**
     * Reads an XML stream from the specified InputStream and returns a
     * JDOM Document object. If validation is requested, then the XML is
     * validated while reading it into a Document.
     *
     * @param istream the InputStream to read from.
     * @param validate XML is validated against schema if true.
     * @param validationProperties a Map of name value pairs specifying
     * the schema and the namespaces to validate against.
     * @exception IFXExveption if there was a problem reading the document.
     */
    public static Document read(InputStream istream, boolean validate, Map validationProperties) throws IFXException;
}
","// IFXDocumentHandlerTest.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXDocumentHandler}.
* It contains ten unit test cases for the {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
*/
class IFXDocumentHandlerTest {","// IFXDocumentHandlerTest.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXDocumentHandler}.
* It contains ten unit test cases for the {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
*/
class IFXDocumentHandlerTest {

	/**
	* Test case for {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
	* It tests the case when the input stream is null.
	*/
	@Test
	public void testRead_NullInputStream() {
		try {
			IFXDocumentHandler.read(null, false, null);
			fail(""Expected IFXException"");
		} catch (IFXException e) {
			assertEquals(""InputStream is null"", e.getMessage());
		}
	}
	
	/**
	* Test case for {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
	* It tests the case when the input stream is empty.
	*/
	@Test
	public void testRead_EmptyInputStream() {
		try {
			IFXDocumentHandler.read(new ByteArrayInputStream(new byte[0]), false, null);
			fail(""Expected IFXException"");
		} catch (IFXException e) {
			assertEquals(""InputStream is empty"", e.getMessage());
		}
	}
	
	/**
	* Test case for {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
	* It tests the case when the input stream is not an XML stream.
	*/
	@Test
	public void testRead_NotXMLInputStream() {
		try {
			IFXDocumentHandler.read(new ByteArrayInputStream(""This is not an XML stream"".getBytes()), false, null);
			fail(""Expected IFXException"");
		} catch (IFXException e) {
			assertEquals(""InputStream is not an XML stream"", e.getMessage());
		}
	}
	
	/**
	* Test case for {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
	* It tests the case when the input stream is an XML stream but not an IFX stream.
	*/
	@Test
	public void testRead_NotIFXInputStream() {
		try {
			IFXDocumentHandler.read(new ByteArrayInputStream(""<root></root>"".getBytes()), false, null);
			fail(""Expected IFXException"");
		} catch (IFXException e) {
			assertEquals(""InputStream is not an IFX stream"", e.getMessage());
		}
	}
	
	/**
	* Test case for {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
	* It tests the case when the input stream is an IFX stream but not a valid IFX stream.
	*/
	@Test
	public void testRead_NotValidIFXInputStream() {
		try {
			IFXDocumentHandler.read(new ByteArrayInputStream(""<IFX></IFX>"".getBytes()), false, null);
			fail(""Expected IFXException"");
		} catch (IFXException e) {
			assertEquals(""InputStream is not a valid IFX stream"", e.getMessage());
		}
	}
	
	/**
	* Test case for {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
	* It tests the case when the input stream is a valid IFX stream but not a valid IFX stream according to the schema.
	*/
	@Test
	public void testRead_NotValidIFXInputStreamAccordingToSchema() {
		try {
			IFXDocumentHandler.read(new ByteArrayInputStream(""<IFX><SignonRq></SignonRq></IFX>"".getBytes()), true, null);
			fail(""Expected IFXException"");
		} catch (IFXException e) {
			assertEquals(""InputStream is not a valid IFX stream according to the schema"", e.getMessage());
		}
	}
	
	/**
	* Test case for {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
	* It tests the case when the input stream is a valid IFX stream according to the schema.
	*/
	@Test
	public void testRead_ValidIFXInputStreamAccordingToSchema() {
		try {
			IFXDocumentHandler.read(new ByteArrayInputStream(""<IFX><SignonRq><ClientDt>2001-01-01</ClientDt></SignonRq></IFX>"".getBytes()), true, null);
		} catch (IFXException e) {
			fail(""Unexpected IFXException"");
		}
	}
	
	/**
	* Test case for {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
	* It tests the case when the input stream is a valid IFX stream but not a valid IFX stream according to the schema.
	*/
	@Test
	public void testRead_NotValidIFXInputStreamAccordingToSchema_WithValidationProperties() {
		try {
			Map validationProperties = new HashMap();
			validationProperties.put(""schema"", ""ifx_v1_0.xsd"");
			validationProperties.put(""namespace"", ""http://www.ifxforum.org/IFX/1.0"");
			IFXDocumentHandler.read(new ByteArrayInputStream(""<IFX><SignonRq></SignonRq></IFX>"".getBytes()), true, validationProperties);
			fail(""Expected IFXException"");
		} catch (IFXException e) {
			assertEquals(""InputStream is not a valid IFX stream according to the schema"", e.getMessage());
		}
	}
	
	/**
	* Test case for {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
	* It tests the case when the input stream is a valid IFX stream according to the schema.
	*/
	@Test
	public void testRead_ValidIFXInputStreamAccordingToSchema_WithValidationProperties() {
		try {
			Map validationProperties = new HashMap();
			validationProperties.put(""schema"", ""ifx_v1_0.xsd"");
			validationProperties.put(""namespace"", ""http://www.ifxforum.org/IFX/1.0"");
			IFXDocumentHandler.read(new ByteArrayInputStream(""<IFX><SignonRq><ClientDt>2001-01-01</ClientDt></SignonRq></IFX>"".getBytes()), true, validationProperties);
		} catch (IFXException e) {
			fail(""Unexpected IFXException"");
		}
	}
}"
cmpl-6whWjBC6bzBUzZAqIHuh8ZCc9PCQ4,/EvoSuiteBenchmark/scenario3/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXEncoder.java,43.301424741744995,length,"// IFXEncoder.java
package org.sourceforge.ifx.utils;

import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.io.Writer;
import java.io.OutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.sourceforge.ifx.basetypes.IBaseType;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.output.XMLOutputter;
import org.jdom.input.SAXBuilder;

/**
 * Encodes an IFXObject to its equivalent IFX XML Element.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.2 $
 */
public class IFXEncoder {

    /**
     * Builds a JDOM Element for the IFXObject supplied. No validation is
     * performed, regardless of the setting. To validate, use the encode()
     * methods instead.
     *
     * @param obj an IFXObject.
     * @return a JDOM Element.
     * @exception IFXException if an exception was encountered in encoding.
     */
    public Element encode(IFXObject obj) throws IFXException;
}
","// IFXEncoderTest.java
package org.sourceforge.ifx.utils;

import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.io.Writer;
import java.io.OutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.sourceforge.ifx.basetypes.IBaseType;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.output.XMLOutputter;
import org.jdom.input.SAXBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXEncoder}.
* It contains ten unit test cases for the {@link IFXEncoder#encode(IFXObject)} method.
*/
class IFXEncoderTest {","// IFXEncoderTest.java
package org.sourceforge.ifx.utils;

import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.io.Writer;
import java.io.OutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.sourceforge.ifx.basetypes.IBaseType;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.output.XMLOutputter;
import org.jdom.input.SAXBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXEncoder}.
* It contains ten unit test cases for the {@link IFXEncoder#encode(IFXObject)} method.
*/
class IFXEncoderTest {

	/**
	* Test case for {@link IFXEncoder#encode(IFXObject)} method.
	* It tests the encoding of a simple IFXObject.
	*/
	@Test
	public void testEncodeSimpleIFXObject() throws Exception {
		IFXObject obj = new IFXObject();
		obj.setString(""string"", ""string"");
		obj.setInt(""int"", 1);
		obj.setLong(""long"", 2);
		obj.setFloat(""float"", 3.0f);
		obj.setDouble(""double"", 4.0);
		obj.setBoolean(""boolean"", true);
		obj.setDate(""date"", new java.util.Date());
		obj.setObject(""object"", new Object());
		obj.setArray(""array"", new String[] {""one"", ""two"", ""three""});
		obj.setList(""list"", new ArrayList());
		obj.setMap(""map"", new HashMap());
		obj.setIFXObject(""ifxobject"", new IFXObject());
		Element element = new IFXEncoder().encode(obj);
		assertNotNull(element);
		assertEquals(""IFXObject"", element.getName());
		assertEquals(12, element.getChildren().size());
		assertEquals(""string"", element.getChild(""string"").getText());
		assertEquals(""1"", element.getChild(""int"").getText());
		assertEquals(""2"", element.getChild(""long"").getText());
		assertEquals(""3.0"", element.getChild(""float"").getText());
		assertEquals(""4.0"", element.getChild(""double"").getText());
		assertEquals(""true"", element.getChild(""boolean"").getText());
		assertNotNull(element.getChild(""date"").getText());
		assertEquals(""Object"", element.getChild(""object"").getText());
		assertEquals(3, element.getChild(""array"").getChildren().size());
		assertEquals(0, element.getChild(""list"").getChildren().size());
		assertEquals(0, element.getChild(""map"").getChildren().size());
		assertEquals(0, element.getChild(""ifxobject"").getChildren().size());
	}
	
	/**
	* Test case for {@link IFXEncoder#encode(IFXObject)} method.
	* It tests the encoding of a complex IFXObject.
	*/
	@Test
	public void testEncodeComplexIFXObject() throws Exception {
		IFXObject obj = new IFXObject();
		obj.setString(""string"", ""string"");
		obj.setInt(""int"", 1);
		obj.setLong(""long"", 2);
		obj.setFloat(""float"", 3.0f);
		obj.setDouble(""double"", 4.0);
		obj.setBoolean(""boolean"", true);
		obj.setDate(""date"", new java.util.Date());
		obj.setObject(""object"", new Object());
		obj.setArray(""array"", new String[] {""one"", ""two"", ""three""});
		obj.setList(""list"", new ArrayList());
		obj.setMap(""map"", new HashMap());
		obj.setIFXObject(""ifxobject"", new IFXObject());
		IFXObject obj2 = new IFXObject();
		obj2.setString(""string"", ""string"");
		obj2.setInt(""int"", 1);
		obj2.setLong(""long"", 2);
		obj2.setFloat(""float"", 3.0f);
		obj2.setDouble(""double"", 4.0);
		obj2.setBoolean(""boolean"", true);
		obj2.setDate(""date"", new java.util.Date());
		obj2.setObject(""object"", new Object());
		obj2.setArray(""array"", new String[] {""one"", ""two"", ""three""});
		obj2.setList(""list"", new ArrayList());
		obj2.setMap(""map"", new HashMap());
		obj2.setIFXObject(""ifxobject"", new IFXObject());
		obj.setIFXObject(""ifxobject2"", obj2);
		Element element = new IFXEncoder().encode(obj);
		assertNotNull(element);
		assertEquals(""IFXObject"", element.getName());
		assertEquals(13, element.getChildren().size());
		assertEquals(""string"", element.getChild(""string"").getText());
		assertEquals(""1"", element.getChild(""int"").getText());
		assertEquals(""2"", element.getChild(""long"").getText());
		assertEquals(""3.0"", element.getChild(""float"").getText());
		assertEquals(""4.0"", element.getChild(""double"").getText());
		assertEquals(""true"", element.getChild(""boolean"").getText());
		assertNotNull(element.getChild(""date"").getText());
		assertEquals(""Object"", element.getChild(""object"").getText());
		assertEquals(3, element.getChild(""array"").getChildren().size());
		assertEquals(0, element.getChild(""list"").getChildren().size());
		assertEquals(0, element.getChild(""map"").getChildren().size());
		assertEquals(0, element.getChild(""ifxobject"").getChildren().size());
		assertEquals(12, element.getChild(""ifxobject2"").getChildren().size());
	}
	
	/**
	* Test case for {@link IFXEncoder#encode(IFXObject)} method.
	* It tests the encoding of a simple IFXObject with a null value.
	*/
	@Test
	public void testEncodeSimpleIFXObjectWithNullValue() throws Exception {
		IFXObject obj = new IFXObject();
		obj.setString(""string"", null);
		obj.setInt(""int"", 1);
		obj.setLong(""long"", 2);
		obj.setFloat(""float"", 3.0f);
		obj.setDouble(""double"", 4.0);
		obj.setBoolean(""boolean"", true);
		obj.setDate(""date"", new java.util.Date());
		obj.setObject(""object"", new Object());
		obj.setArray(""array"", new String[] {""one"", ""two"", ""three""});
		obj.setList(""list"", new ArrayList());
		obj.setMap(""map"", new HashMap());
		obj.setIFXObject(""ifxobject"", new IFXObject());
		Element element = new IFXEncoder().encode(obj);
		assertNotNull(element);
		assertEquals(""IFXObject"", element.getName());
		assertEquals(12, element.getChildren().size());
		assertNull(element.getChild(""string""));
		assertEquals(""1"", element.getChild(""int"").getText());
		assertEquals(""2"", element.getChild(""long"").getText());
		assertEquals(""3.0"", element.getChild(""float"").getText());
		assertEquals(""4.0"", element.getChild(""double"").getText());
		assertEquals(""true"", element.getChild(""boolean"").getText());
		assertNotNull(element.getChild(""date"").getText());
		assertEquals(""Object"", element.getChild(""object"").getText());
		assertEquals(3, element.getChild(""array"").getChildren().size());
		assertEquals(0, element.getChild(""list"").getChildren().size());
		assertEquals(0, element.getChild(""map"").getChildren().size());
		assertEquals(0, element.getChild(""ifxobject"").getChildren().size());
	}
	
	/**
	* Test case for {@link IFXEncoder#encode(IFXObject)} method.
	* It tests the encoding of a complex IFXObject with a null value.
	*/
	@Test
	public void testEncodeComplexIFXObjectWithNullValue() throws Exception {
		"
