ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6x29LTnHi6LinsNoegm8lb53gSBIZ,/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter_0Test.java,85.9186041355133,length,"// SBMLFilter.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;

/**
 * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler
 * framework.
 */
public class SBMLFilter extends CyFileFilter {

    /**
     * XGMML Files are Graphs.
     */
    private static String fileNature = ImportHandler.GRAPH_NATURE;

    /**
     * File Extensions.
     */
    private static String[] fileExtensions = { ""xml"", ""sbml"" };

    /**
     * Filter Description.
     */
    private static String description = ""SBML files"";

    /**
     * Constructor.
     */
    public SBMLFilter() {
    }

    /**
     * Indicates which files the SBMLFilter accepts.
     * <p/>
     * This method will return true only if:
     * <UL>
     * <LI>File ends in .xml or .sbml;  and
     * <LI>File headers includes the www.sbml.org namespace declaration.
     * </UL>
     *
     * @param file File
     * @return true or false.
     */
    public boolean accept(File file);

    /**
     * Gets the appropirate GraphReader object.
     * If the libsbml is not available use the old sbml library.
     *
     * @author Matthias Koenig
     * @param fileName File Name.
     * @return GraphReader Object.
     */
    public GraphReader getReader(String fileName);
}
","// SBMLFilter_0Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains ten unit test cases for the {@link SBMLFilter#accept(File)} method.
*/
class SBMLFilter_0Test {","// SBMLFilter_0Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains ten unit test cases for the {@link SBMLFilter#accept(File)} method.
*/
class SBMLFilter_0Test {

	/**
	 * Test of accept method, of class SBMLFilter.
	 */
	@Test
	public void testAccept_File_0() {
		System.out.println(""accept"");
		File file = null;
		SBMLFilter instance = new SBMLFilter();
		boolean expResult = false;
		boolean result = instance.accept(file);
		assertEquals(expResult, result);
	}

	/**
	 * Test of accept method, of class SBMLFilter.
	 */
	@Test
	public void testAccept_File_1() {
		System.out.println(""accept"");
		File file = new File("""");
		SBMLFilter instance = new SBMLFilter();
		boolean expResult = false;
		boolean result = instance.accept(file);
		assertEquals(expResult, result);
	}

	/**
	 * Test of accept method, of class SBMLFilter.
	 */
	@Test
	public void testAccept_File_2() {
		System.out.println(""accept"");
		File file = new File(""test/resources/test.xml"");
		SBMLFilter instance = new SBMLFilter();
		boolean expResult = true;
		boolean result = instance.accept(file);
		assertEquals(expResult, result);
	}

	/**
	 * Test of accept method, of class SBMLFilter.
	 */
	@Test
	public void testAccept_File_3() {
		System.out.println(""accept"");
		File file = new File(""test/resources/test.sbml"");
		SBMLFilter instance = new SBMLFilter();
		boolean expResult = true;
		boolean result = instance.accept(file);
		assertEquals(expResult, result);
	}

	/**
	 * Test of accept method, of class SBMLFilter.
	 */
	@Test
	public void testAccept_File_4() {
		System.out.println(""accept"");
		File file = new File(""test/resources/test.txt"");
		SBMLFilter instance = new SBMLFilter();
		boolean expResult = false;
		boolean result = instance.accept(file);
		assertEquals(expResult, result);
	}

	/**
	 * Test of accept method, of class SBMLFilter.
	 */
	@Test
	public void testAccept_File_5() {
		System.out.println(""accept"");
		File file = new File(""test/resources/test.xml.txt"");
		SBMLFilter instance = new SBMLFilter();
		boolean expResult = false;
		boolean result = instance.accept(file);
		assertEquals(expResult, result);
	}

	/**
	 * Test of accept method, of class SBMLFilter.
	 */
	@Test
	public void testAccept_File_6() {
		System.out.println(""accept"");
		File file = new File(""test/resources/test.sbml.txt"");
		SBMLFilter instance = new SBMLFilter();
		boolean expResult = false;
		boolean result = instance.accept(file);
		assertEquals(expResult, result);
	}

	/**
	 * Test of accept method, of class SBMLFilter.
	 */
	@Test
	public void testAccept_File_7() {
		System.out.println(""accept"");
		File file = new File(""test/resources/test.xml.sbml"");
		SBMLFilter instance = new SBMLFilter();
		boolean expResult = false;
		boolean result = instance.accept(file);
		assertEquals(expResult, result);
	}

	/**
	 * Test of accept method, of class SBMLFilter.
	 */
	@Test
	public void testAccept_File_8() {
		System.out.println(""accept"");
		File file = new File(""test/resources/test.sbml.xml"");
		SBMLFilter instance = new SBMLFilter();
		boolean expResult = false;
		boolean result = instance.accept(file);
		assertEquals(expResult, result);
	}

	/**
	 * Test of accept method, of class SBMLFilter.
	 */
	@Test
	public void testAccept_File_9() {
		System.out.println(""accept"");
		File file = new File(""test/resources/test.sbml.xml.txt"");
		SBMLFilter instance = new SBMLFilter();
		boolean expResult = false;
		boolean result = instance.accept(file);
		assertEquals(expResult, result);
	}
}

// SBMLFilter_1Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains ten unit test cases for the {@link SBMLFilter#getReader(String)} method.
*/
class SBMLFilter_1Test {
		
	/**
	 * Test of getReader method, of class SBMLFilter.
	 */
	@Test
	public void testGetReader_String_0() {
		System.out.println(""getReader"");
		String fileName = """";
		SBMLFilter instance = new SBMLFilter();
		GraphReader expResult = null;
		GraphReader result = instance.getReader(fileName);
		assertEquals(expResult, result);
	}

	/**
	 * Test of getReader method, of class SBMLFilter.
	 */
	@Test
	public void testGetReader_String_1() {
		System.out.println(""getReader"");
		String fileName = ""test/resources/test.xml"";
		SBMLFilter instance = new SBMLFilter();
		GraphReader expResult = null;
		GraphReader result = instance.getReader(fileName);
		assertEquals(expResult, result);
	}

	/**
	 * Test of getReader method, of class SBMLFilter.
	 */
	@Test
	public void testGetReader_String_2() {
		System.out.println(""getReader"");
		String fileName = ""test/resources/test.sbml"";
		SBMLFilter instance = new SBMLFilter();
		GraphReader expResult = null;
		GraphReader result = instance.getReader(fileName);
		assertEquals(expResult, result);
	}

	/**
	 * Test of getReader method, of class SBMLFilter.
	 */
	@Test
	public void testGetReader_String_3() {
		System.out.println(""getReader"");
		String fileName = ""test/resources/test.txt"";
		SBMLFilter instance = new SBMLFilter();
		GraphReader expResult = null;
		GraphReader result = instance.getReader(fileName);
		assertEquals(expResult, result);
	}

	/**
	 * Test of getReader method, of class SBMLFilter.
	 */
	@Test
	public void testGetReader_String_4() {
		System.out.println(""getReader"");
		String fileName = ""test/resources/test.xml.txt"";
		SBMLFilter instance = new SBMLFilter();
		GraphReader expResult = null;
		GraphReader result = instance.getReader(fileName);
		assertEquals(expResult, result);
	}

	/**
	 * Test of getReader method, of class SBMLFilter.
	 */
	@Test
	public void testGetReader_String_5() {
		System.out.println(""getReader"");
		String fileName = ""test/resources/test.sbml.txt"";
		SBMLFilter instance = new SBMLFilter();
		GraphReader expResult = null;
		GraphReader"
cmpl-6x2AjhAJlmdYWXTaFfiTpFMo9xuME,/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLFilter_1Test.java,68.70474791526794,length,"// SBMLFilter.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;

/**
 * SBMLReader extends CyFileFilter for integration into the Cytoscape ImportHandler
 * framework.
 */
public class SBMLFilter extends CyFileFilter {

    /**
     * XGMML Files are Graphs.
     */
    private static String fileNature = ImportHandler.GRAPH_NATURE;

    /**
     * File Extensions.
     */
    private static String[] fileExtensions = { ""xml"", ""sbml"" };

    /**
     * Filter Description.
     */
    private static String description = ""SBML files"";

    /**
     * Constructor.
     */
    public SBMLFilter() {
    }

    /**
     * Indicates which files the SBMLFilter accepts.
     * <p/>
     * This method will return true only if:
     * <UL>
     * <LI>File ends in .xml or .sbml;  and
     * <LI>File headers includes the www.sbml.org namespace declaration.
     * </UL>
     *
     * @param file File
     * @return true or false.
     */
    public boolean accept(File file);

    /**
     * Gets the appropirate GraphReader object.
     * If the libsbml is not available use the old sbml library.
     *
     * @author Matthias Koenig
     * @param fileName File Name.
     * @return GraphReader Object.
     */
    public GraphReader getReader(String fileName);
}
","// SBMLFilter_1Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains ten unit test cases for the {@link SBMLFilter#getReader(String)} method.
*/
class SBMLFilter_1Test {","// SBMLFilter_1Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains ten unit test cases for the {@link SBMLFilter#getReader(String)} method.
*/
class SBMLFilter_1Test {

	/**
	 * Test of getReader method, of class SBMLFilter.
	 * @throws java.io.IOException
	 */
	@Test
	void testGetReader() throws IOException {
		System.out.println(""getReader"");
		String fileName = """";
		SBMLFilter instance = new SBMLFilter();
		GraphReader expResult = null;
		GraphReader result = instance.getReader(fileName);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
}

// SBMLFilter_2Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains ten unit test cases for the {@link SBMLFilter#getReader(String)} method.
*/
class SBMLFilter_2Test {
		
	/**
	 * Test of getReader method, of class SBMLFilter.
	 * @throws java.io.IOException
	 */
	@Test
	void testGetReader() throws IOException {
		System.out.println(""getReader"");
		String fileName = """";
		SBMLFilter instance = new SBMLFilter();
		GraphReader expResult = null;
		GraphReader result = instance.getReader(fileName);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
}

// SBMLFilter_3Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains ten unit test cases for the {@link SBMLFilter#getReader(String)} method.
*/
class SBMLFilter_3Test {
		
	/**
	 * Test of getReader method, of class SBMLFilter.
	 * @throws java.io.IOException
	 */
	@Test
	void testGetReader() throws IOException {
		System.out.println(""getReader"");
		String fileName = """";
		SBMLFilter instance = new SBMLFilter();
		GraphReader expResult = null;
		GraphReader result = instance.getReader(fileName);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
}

// SBMLFilter_4Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains ten unit test cases for the {@link SBMLFilter#getReader(String)} method.
*/
class SBMLFilter_4Test {
		
	/**
	 * Test of getReader method, of class SBMLFilter.
	 * @throws java.io.IOException
	 */
	@Test
	void testGetReader() throws IOException {
		System.out.println(""getReader"");
		String fileName = """";
		SBMLFilter instance = new SBMLFilter();
		GraphReader expResult = null;
		GraphReader result = instance.getReader(fileName);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
}

// SBMLFilter_5Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains ten unit test cases for the {@link SBMLFilter#getReader(String)} method.
*/
class SBMLFilter_5Test {
		
	/**
	 * Test of getReader method, of class SBMLFilter.
	 * @throws java.io.IOException
	 */
	@Test
	void testGetReader() throws IOException {
		System.out.println(""getReader"");
		String fileName = """";
		SBMLFilter instance = new SBMLFilter();
		GraphReader expResult = null;
		GraphReader result = instance.getReader(fileName);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
}

// SBMLFilter_6Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains ten unit test cases for the {@link SBMLFilter#getReader(String)} method.
*/
class SBMLFilter_6Test {
		
	/**
	 * Test of getReader method, of class SBMLFilter.
	 * @throws java.io.IOException
	 */
	@Test
	void testGetReader() throws IOException {
		System.out.println(""getReader"");
		String fileName = """";
		SBMLFilter instance = new SBMLFilter();
		GraphReader expResult = null;
		GraphReader result = instance.getReader(fileName);
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
	
}

// SBMLFilter_7Test.java
package sbmlreader2;

import cytoscape.data.ImportHandler;
import cytoscape.data.readers.GraphReader;
import cytoscape.util.CyFileFilter;
import java.io.File;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLFilter}.
* It contains ten unit test cases for the {@link SBMLFilter#getReader(String)} method.
*/
class SBMLFilter_7Test {
		
	/**
	 * Test of getReader method, of class SBMLFilter.
	 * @throws java.io.IOException
	 */
	@Test
	void testGetReader() throws IOException {
		System.out.println(""getReader"");
		String fileName = """";
		SBMLFilter instance = new SBMLFilter();
		GraphReader expResult = null;
		GraphReader result"
cmpl-6x2Bq6VugpL5HccfO5Orn6I2z8RaC,/EvoSuiteBenchmark/original/34_sbmlreader2/src/main/java/sbmlreader2/SBMLVisualStyleFactory.java,69.9109137058258,length,"// SBMLVisualStyleFactory.java
package sbmlreader2;

import cytoscape.*;
import cytoscape.visual.*;
import cytoscape.visual.calculators.*;
import cytoscape.visual.mappings.*;
import java.awt.Color;

/**
 * VisualStyleFactory.java
 * This class defines the visualstyle in Cytoscape for the SBMLReader plugin.
 *
 * @author W.P.A. Ligtenberg, Eindhoven University of Technology
 */
public class SBMLVisualStyleFactory {

    /**
     */
    public static final String SBMLReader_VS = ""SBMLReader Style"";

    /**
     */
    public static final String NODE_TYPE_ATT = ""sbml type"";

    /**
     */
    public static final String EDGE_TYPE_ATT = ""interaction"";

    /**
     *  DOCUMENT ME!
     *
     * @param network DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public static VisualStyle createVisualStyle(CyNetwork network);
}
","// SBMLVisualStyleFactoryTest.java
package sbmlreader2;

import cytoscape.*;
import cytoscape.visual.*;
import cytoscape.visual.calculators.*;
import cytoscape.visual.mappings.*;
import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLVisualStyleFactory}.
* It contains ten unit test cases for the {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.
*/
class SBMLVisualStyleFactoryTest {","// SBMLVisualStyleFactoryTest.java
package sbmlreader2;

import cytoscape.*;
import cytoscape.visual.*;
import cytoscape.visual.calculators.*;
import cytoscape.visual.mappings.*;
import java.awt.Color;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SBMLVisualStyleFactory}.
* It contains ten unit test cases for the {@link SBMLVisualStyleFactory#createVisualStyle(CyNetwork)} method.
*/
class SBMLVisualStyleFactoryTest {

	/**
	* Test case 1:
	* Test if the visual style is created correctly.
	*/
	@Test
	void testCreateVisualStyle1() {
		CyNetwork network = new CyNetwork();
		VisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);
		assertEquals(visualStyle.getName(), ""SBMLReader Style"");
	}
	
	/**
	* Test case 2:
	* Test if the visual style is created correctly.
	*/
	@Test
	void testCreateVisualStyle2() {
		CyNetwork network = new CyNetwork();
		VisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);
		assertEquals(visualStyle.getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_FILL_COLOR).getMapping(0).getControllingAttributeName(), ""sbml type"");
	}
	
	/**
	* Test case 3:
	* Test if the visual style is created correctly.
	*/
	@Test
	void testCreateVisualStyle3() {
		CyNetwork network = new CyNetwork();
		VisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);
		assertEquals(visualStyle.getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_FILL_COLOR).getMapping(0).getControllingAttributeName(), ""sbml type"");
	}
	
	/**
	* Test case 4:
	* Test if the visual style is created correctly.
	*/
	@Test
	void testCreateVisualStyle4() {
		CyNetwork network = new CyNetwork();
		VisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);
		assertEquals(visualStyle.getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_FILL_COLOR).getMapping(0).getControllingAttributeName(), ""sbml type"");
	}
	
	/**
	* Test case 5:
	* Test if the visual style is created correctly.
	*/
	@Test
	void testCreateVisualStyle5() {
		CyNetwork network = new CyNetwork();
		VisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);
		assertEquals(visualStyle.getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_FILL_COLOR).getMapping(0).getControllingAttributeName(), ""sbml type"");
	}
	
	/**
	* Test case 6:
	* Test if the visual style is created correctly.
	*/
	@Test
	void testCreateVisualStyle6() {
		CyNetwork network = new CyNetwork();
		VisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);
		assertEquals(visualStyle.getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_FILL_COLOR).getMapping(0).getControllingAttributeName(), ""sbml type"");
	}
	
	/**
	* Test case 7:
	* Test if the visual style is created correctly.
	*/
	@Test
	void testCreateVisualStyle7() {
		CyNetwork network = new CyNetwork();
		VisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);
		assertEquals(visualStyle.getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_FILL_COLOR).getMapping(0).getControllingAttributeName(), ""sbml type"");
	}
	
	/**
	* Test case 8:
	* Test if the visual style is created correctly.
	*/
	@Test
	void testCreateVisualStyle8() {
		CyNetwork network = new CyNetwork();
		VisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);
		assertEquals(visualStyle.getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_FILL_COLOR).getMapping(0).getControllingAttributeName(), ""sbml type"");
	}
	
	/**
	* Test case 9:
	* Test if the visual style is created correctly.
	*/
	@Test
	void testCreateVisualStyle9() {
		CyNetwork network = new CyNetwork();
		VisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);
		assertEquals(visualStyle.getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_FILL_COLOR).getMapping(0).getControllingAttributeName(), ""sbml type"");
	}
	
	/**
	* Test case 10:
	* Test if the visual style is created correctly.
	*/
	@Test
	void testCreateVisualStyle10() {
		CyNetwork network = new CyNetwork();
		VisualStyle visualStyle = SBMLVisualStyleFactory.createVisualStyle(network);
		assertEquals(visualStyle.getNodeAppearanceCalculator().getCalculator(VisualPropertyType.NODE_FILL_COLOR).getMapping(0).getControllingAttributeName(), ""sbml type"");
	}
}

// SBMLReader.java
package sbmlreader2;

import cytoscape.*;
import cytoscape.data.*;
import cytoscape.data.readers.*;
import cytoscape.plugin.*;
import cytoscape.util.*;
import cytoscape.view.*;
import cytoscape.visual.*;
import cytoscape.visual.calculators.*;
import cytoscape.visual.mappings.*;
import java.awt.Color;
import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.filechooser.*;
import org.sbml.libsbml.*;

/**
 * SBMLReader.java
 * This class reads SBML files and creates a CyNetwork from it.
 *
 * @author W.P.A. Ligtenberg, Eindhoven University of Technology
 */
public class SBMLReader extends CytoscapePlugin {

    /**
     */
    public static final String SBML_NETWORK_NAME = ""SBML Network"";

    /**
     */
    public static final String SBML_NETWORK_TITLE = ""SBML Network"";

    /**
     */
    public static final String SBML_NETWORK_DESCRIPTION = ""SBML Network"";

    /**
     */
    public static final String SBML_NETWORK_TYPE = ""SBML Network"";

    /**
     */
    public static final String SBML_NETWORK_SOURCE = ""SBML Network"";

    /**
     */
    public static final String SBML_NETWORK_VERSION = ""SBML Network"";

    /**
     */
    public static final String SBML_NETWORK_DATE = ""SBML Network"";

    /**
     */
    public static final String SBML_NETWORK_FORMAT = ""SBML Network"";

    /**
     */
    public static final String SBML_NETWORK_IDENTIFIER = ""SBML Network"";

    /**
     */
    public static final String SBML_NETWORK_SOURCE_FILE = ""SBML Network"";

    /**
     */
    public static final String SBML_NETWORK_ATTRIBUTE_NAME = ""SBML Network"";

    /**
     */
    public static final String SBML_NETWORK_ATTRIBUTE_DESCRIPTION = ""SBML Network"";

    /**
     */
    public static final String SBML_NETWORK_ATTRIBUTE_TYPE = ""SBML Network"";

    /**
     */
    public static final String SBML_NETWORK_ATTRIBUTE_VALUE = ""SBML Network"";

    /**
     */
    public static final String SBML_NETWORK_ATTRIBUTE_SOURCE = ""SBML Network"";

    /**
     */
    public static final String SBML_NETWORK_ATTRIBUTE_VERSION = ""SBML Network"";

    /**
     */
    public static final String SBML_NETWORK_ATTRIBUTE_DATE = ""SBML Network"";

    /**
     */
    public static final String SBML_NETWORK_ATTRIBUTE_FORMAT = ""SBML Network"";

    /**
     */
    public static final String SBML_NETWORK_ATTRIBUTE_IDENTIFIER = ""SBML Network"";"
