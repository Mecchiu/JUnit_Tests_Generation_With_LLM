ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6x0v9i0TXTxzaWLwM8Aw63CYeR5dG,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/io/DefaultHomeInputStream.java,90.7371335029602,length,"// DefaultHomeInputStream.java
package com.eteks.sweethome3d.io;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.net.URL;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.URLContent;

/**
 * An <code>InputStream</code> filter that reads a home from a stream
 * at .sh3d file format.
 *
 * @see DefaultHomeOutputStream
 */
public class DefaultHomeInputStream extends FilterInputStream {

    /**
     * Reads home from a zipped stream.
     */
    public Home readHome() throws IOException, ClassNotFoundException;
}
","// DefaultHomeInputStreamTest.java
package com.eteks.sweethome3d.io;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.net.URL;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.URLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultHomeInputStream}.
* It contains ten unit test cases for the {@link DefaultHomeInputStream#readHome()} method.
*/
class DefaultHomeInputStreamTest {","// DefaultHomeInputStreamTest.java
package com.eteks.sweethome3d.io;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.net.URL;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.URLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultHomeInputStream}.
* It contains ten unit test cases for the {@link DefaultHomeInputStream#readHome()} method.
*/
class DefaultHomeInputStreamTest {

	@Test
	public void testReadHome() throws IOException, ClassNotFoundException {
		// Reads home from a zipped stream
		Home home = new DefaultHomeInputStream(new FileInputStream(new File(""test.sh3d""))).readHome();
		assertEquals(home.getName(), ""test"");
	}
}

// DefaultHomeOutputStream.java
package com.eteks.sweethome3d.io;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.net.URL;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.URLContent;

/**
 * An <code>OutputStream</code> filter that writes a home to a stream
 * at .sh3d file format.
 *
 * @see DefaultHomeInputStream
 */
public class DefaultHomeOutputStream extends OutputStream {

    /**
     * Writes home to a zipped stream.
     */
    public void writeHome(Home home) throws IOException;
}

// DefaultHomeOutputStreamTest.java
package com.eteks.sweethome3d.io;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.net.URL;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.URLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultHomeOutputStream}.
* It contains ten unit test cases for the {@link DefaultHomeOutputStream#writeHome(Home)} method.
*/
class DefaultHomeOutputStreamTest {
		
	@Test
	public void testWriteHome() throws IOException, ClassNotFoundException {
		// Writes home to a zipped stream
		Home home = new Home();
		home.setName(""test"");
		new DefaultHomeOutputStream(new FileOutputStream(new File(""test.sh3d""))).writeHome(home);
	}
}

// DefaultUserPreferences.java
package com.eteks.sweethome3d.io;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InterruptedIOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.net.URL;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.URLContent;

/**
 * User preferences.
 * @author Emmanuel Puybaret
 */
public class DefaultUserPreferences extends UserPreferences {

    /**
     * Creates user preferences read from resources and user properties.
     */
    public DefaultUserPreferences();

    /**
     * Creates user preferences read from <code>preferences</code> and user properties.
     */
    public DefaultUserPreferences(Preferences preferences);

    /**
     * Returns the language library matching current language.
     */
    public LanguageLibrary getLanguageLibrary();

    /**
     * Returns the unit matching current unit.
     */
    public Unit getUnit();

    /**
     * Returns the furniture catalog matching current language.
     */
    public FurnitureCatalog getFurnitureCatalog();

    /**
     * Returns the textures catalog matching current language.
     */
    public TexturesCatalog getTexturesCatalog();

    /**
     * Returns the recent homes list.
     */
    public List<String> getRecentHomes();

    /**
     * Returns the recent furniture catalogs list.
     */
    public List<String> getRecentFurnitureCatalog();

    /**
     * Returns the recent textures catalogs list.
     */
    public List<String> getRecentTexturesCatalog();

    /**
     * Returns the recent colors list.
     */
    public List<Integer> getRecentColors();

    /**
     * Returns the recent patterns list.
     */
    public List<String> getRecentPatterns();

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings();

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive, boolean exactMatch);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive, boolean exactMatch, boolean includePrefix);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive, boolean exactMatch, boolean includePrefix, boolean includeSubstring);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive, boolean exactMatch, boolean includePrefix, boolean includeSubstring, boolean includeSuffix);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive, boolean exactMatch, boolean includePrefix, boolean includeSubstring, boolean includeSuffix, boolean includeInfix);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive, boolean exactMatch, boolean includePrefix, boolean includeSubstring, boolean includeSuffix, boolean includeInfix, boolean includeMixedCase);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive, boolean exactMatch, boolean includePrefix, boolean includeSubstring, boolean includeSuffix, boolean includeInfix, boolean includeMixedCase, boolean includeMixedDigits);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive, boolean exactMatch, boolean includePrefix, boolean includeSubstring, boolean includeSuffix, boolean includeInfix, boolean includeMixedCase, boolean includeMixedDigits, boolean includeMixedCaseDigits);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive, boolean exactMatch, boolean includePrefix, boolean includeSubstring, boolean includeSuffix, boolean includeInfix, boolean includeMixedCase, boolean includeMixedDigits, boolean includeMixedCaseDigits, boolean includeMixedCaseDigitsSymbols);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive, boolean exactMatch, boolean includePrefix, boolean includeSubstring, boolean includeSuffix, boolean includeInfix, boolean includeMixedCase, boolean includeMixedDigits, boolean includeMixedCaseDigits, boolean includeMixedCaseDigitsSymbols, boolean includeMixedCaseDigitsSymbolsSpaces);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive, boolean exactMatch, boolean includePrefix, boolean includeSubstring, boolean includeSuffix, boolean includeInfix, boolean includeMixedCase, boolean includeMixedDigits, boolean includeMixedCaseDigits, boolean includeMixedCaseDigitsSymbols, boolean includeMixedCaseDigitsSymbolsSpaces, boolean includeMixedCaseDigitsSymbolsSpacesPunctuation);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive, boolean exactMatch, boolean includePrefix, boolean includeSubstring, boolean includeSuffix, boolean includeInfix, boolean includeMixedCase, boolean includeMixedDigits, boolean includeMixedCaseDigits, boolean includeMixedCaseDigitsSymbols, boolean includeMixedCaseDigitsSymbolsSpaces, boolean includeMixedCaseDigitsSymbolsSpacesPunctuation, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbols);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive, boolean exactMatch, boolean includePrefix, boolean includeSubstring, boolean includeSuffix, boolean includeInfix, boolean includeMixedCase, boolean includeMixedDigits, boolean includeMixedCaseDigits, boolean includeMixedCaseDigitsSymbols, boolean includeMixedCaseDigitsSymbolsSpaces, boolean includeMixedCaseDigitsSymbolsSpacesPunctuation, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbols, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigits);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive, boolean exactMatch, boolean includePrefix, boolean includeSubstring, boolean includeSuffix, boolean includeInfix, boolean includeMixedCase, boolean includeMixedDigits, boolean includeMixedCaseDigits, boolean includeMixedCaseDigitsSymbols, boolean includeMixedCaseDigitsSymbolsSpaces, boolean includeMixedCaseDigitsSymbolsSpacesPunctuation, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbols, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigits, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigitsSymbols);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive, boolean exactMatch, boolean includePrefix, boolean includeSubstring, boolean includeSuffix, boolean includeInfix, boolean includeMixedCase, boolean includeMixedDigits, boolean includeMixedCaseDigits, boolean includeMixedCaseDigitsSymbols, boolean includeMixedCaseDigitsSymbolsSpaces, boolean includeMixedCaseDigitsSymbolsSpacesPunctuation, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbols, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigits, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigitsSymbols, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigitsSymbolsSpaces);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive, boolean exactMatch, boolean includePrefix, boolean includeSubstring, boolean includeSuffix, boolean includeInfix, boolean includeMixedCase, boolean includeMixedDigits, boolean includeMixedCaseDigits, boolean includeMixedCaseDigitsSymbols, boolean includeMixedCaseDigitsSymbolsSpaces, boolean includeMixedCaseDigitsSymbolsSpacesPunctuation, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbols, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigits, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigitsSymbols, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigitsSymbolsSpaces, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigitsSymbolsSpacesPunctuation);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive, boolean exactMatch, boolean includePrefix, boolean includeSubstring, boolean includeSuffix, boolean includeInfix, boolean includeMixedCase, boolean includeMixedDigits, boolean includeMixedCaseDigits, boolean includeMixedCaseDigitsSymbols, boolean includeMixedCaseDigitsSymbolsSpaces, boolean includeMixedCaseDigitsSymbolsSpacesPunctuation, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbols, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigits, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigitsSymbols, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigitsSymbolsSpaces, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigitsSymbolsSpacesPunctuation, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigitsSymbolsSpacesPunctuationSymbols);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive, boolean exactMatch, boolean includePrefix, boolean includeSubstring, boolean includeSuffix, boolean includeInfix, boolean includeMixedCase, boolean includeMixedDigits, boolean includeMixedCaseDigits, boolean includeMixedCaseDigitsSymbols, boolean includeMixedCaseDigitsSymbolsSpaces, boolean includeMixedCaseDigitsSymbolsSpacesPunctuation, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbols, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigits, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigitsSymbols, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigitsSymbolsSpaces, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigitsSymbolsSpacesPunctuation, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigitsSymbolsSpacesPunctuationSymbols, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbolsDigitsSymbolsSpacesPunctuationSymbolsDigits);

    /**
     * Returns the auto completion strings list.
     */
    public List<String> getAutoCompletionStrings(String prefix, int maxCount, boolean caseSensitive, boolean exactMatch, boolean includePrefix, boolean includeSubstring, boolean includeSuffix, boolean includeInfix, boolean includeMixedCase, boolean includeMixedDigits, boolean includeMixedCaseDigits, boolean includeMixedCaseDigitsSymbols, boolean includeMixedCaseDigitsSymbolsSpaces, boolean includeMixedCaseDigitsSymbolsSpacesPunctuation, boolean includeMixedCaseDigitsSymbolsSpacesPunctuationSymbols, boolean includeMixedCaseDigits"
cmpl-6x0wbV5aXy28jmNgP4ZPQk7haxZ0Z,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/io/FileUserPreferences0.java,105.2500422000885,length,"// FileUserPreferences.java
package com.eteks.sweethome3d.io;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.prefs.AbstractPreferences;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCatalog;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.PatternsCatalog;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;

/**
 * User preferences initialized from
 * {@link com.eteks.sweethome3d.io.DefaultUserPreferences default user preferences}
 * and stored in user preferences on local file system.
 *
 * @author Emmanuel Puybaret
 */
public class FileUserPreferences extends UserPreferences {

    /**
     * Returns <code>true</code> if the given furniture library file exists in the first
     * furniture libraries folder.
     *
     * @param name the name of the resource to check
     */
    @Override
    public boolean furnitureLibraryExists(String name) throws RecorderException;
}
","// FileUserPreferencesTest.java
package com.eteks.sweethome3d.io;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.prefs.AbstractPreferences;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCatalog;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.PatternsCatalog;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUserPreferences}.
* It contains ten unit test cases for the {@link FileUserPreferences#furnitureLibraryExists(String)} method.
*/
class FileUserPreferencesTest {","// FileUserPreferencesTest.java
package com.eteks.sweethome3d.io;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.prefs.AbstractPreferences;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCatalog;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.PatternsCatalog;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUserPreferences}.
* It contains ten unit test cases for the {@link FileUserPreferences#furnitureLibraryExists(String)} method.
*/
class FileUserPreferencesTest {

		@Test
		void testFurnitureLibraryExists() throws RecorderException {
				FileUserPreferences prefs = new FileUserPreferences();
				assertTrue(prefs.furnitureLibraryExists(""library.xml""));
		}
}

// FileUserPreferences.java
package com.eteks.sweethome3d.io;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.prefs.AbstractPreferences;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCatalog;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.PatternsCatalog;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;

/**
 * User preferences initialized from
 * {@link com.eteks.sweethome3d.io.DefaultUserPreferences default user preferences}
 * and stored in user preferences on local file system.
 *
 * @author Emmanuel Puybaret
 */
public class FileUserPreferences extends UserPreferences {

    /**
     * Returns <code>true</code> if the given furniture library file exists in the first
     * furniture libraries folder.
     *
     * @param name the name of the resource to check
     */
    @Override
    public boolean furnitureLibraryExists(String name) throws RecorderException;
}

// FileUserPreferencesTest.java
package com.eteks.sweethome3d.io;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.prefs.AbstractPreferences;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCatalog;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.PatternsCatalog;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUserPreferences}.
* It contains ten unit test cases for the {@link FileUserPreferences#furnitureLibraryExists(String)} method.
*/
class FileUserPreferencesTest {
		
		@Test
		void testFurnitureLibraryExists() throws RecorderException {
				FileUserPreferences prefs = new FileUserPreferences();
				assertTrue(prefs.furnitureLibraryExists(""library.xml""));
		}
}

// FileUserPreferences.java
package com.eteks.sweethome3d.io;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.prefs.AbstractPreferences;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCatalog;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.PatternsCatalog;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;

/**
 * User preferences initialized from
 * {@link com.eteks.sweethome3d.io.DefaultUserPreferences default user preferences}
 * and stored in user preferences on local file system.
 *
 * @author Emmanuel Puybaret
 */
public class FileUserPreferences extends UserPreferences {

    /**
     * Returns <code>true</code> if the given furniture library file exists in the first
     * furniture libraries folder.
     *
     * @param name the name of the resource to check
     */
    @Override
    public boolean furnitureLibraryExists(String name) throws RecorderException;
}

// FileUserPreferencesTest.java
package com.eteks.sweethome3d.io;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.prefs.AbstractPreferences;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCatalog;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.PatternsCatalog;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUserPreferences}.
* It contains ten unit test cases for the {@link FileUserPreferences#furnitureLibraryExists(String)} method.
*/
class FileUserPreferencesTest {
		
		@Test
		void testFurnitureLibraryExists() throws RecorderException {
				FileUserPreferences prefs = new FileUserPreferences();
				assertTrue(prefs.furnitureLibraryExists(""library.xml""));
		}
}

// FileUserPreferences.java
package com.eteks.sweethome3d.io;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.prefs.AbstractPreferences;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCatalog;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.PatternsCatalog;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.TemporaryURLContent"
cmpl-6x0yJDULVuI8AM5FYpW5NxYdo7B3C,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/io/FileUserPreferences1.java,123.3222770690918,length,"// FileUserPreferences.java
package com.eteks.sweethome3d.io;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.prefs.AbstractPreferences;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCatalog;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.PatternsCatalog;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;

/**
 * User preferences initialized from
 * {@link com.eteks.sweethome3d.io.DefaultUserPreferences default user preferences}
 * and stored in user preferences on local file system.
 *
 * @author Emmanuel Puybaret
 */
public class FileUserPreferences extends UserPreferences {

    /**
     * Returns <code>true</code> if the given textures library file exists in the first textures libraries folder.
     *
     * @param name the name of the resource to check
     */
    @Override
    public boolean texturesLibraryExists(String name) throws RecorderException;
}
","// FileUserPreferencesTest.java
package com.eteks.sweethome3d.io;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.prefs.AbstractPreferences;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCatalog;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.PatternsCatalog;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUserPreferences}.
* It contains ten unit test cases for the {@link FileUserPreferences#texturesLibraryExists(String)} method.
*/
class FileUserPreferencesTest {","// FileUserPreferencesTest.java
package com.eteks.sweethome3d.io;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.prefs.AbstractPreferences;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCatalog;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.PatternsCatalog;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUserPreferences}.
* It contains ten unit test cases for the {@link FileUserPreferences#texturesLibraryExists(String)} method.
*/
class FileUserPreferencesTest {

		@Test
		void testTexturesLibraryExists() throws RecorderException {
				FileUserPreferences prefs = new FileUserPreferences();
				assertTrue(prefs.texturesLibraryExists(""textures.zip""));
		}
}

// FileUserPreferences.java
package com.eteks.sweethome3d.io;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.prefs.AbstractPreferences;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCatalog;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.PatternsCatalog;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;

/**
 * User preferences initialized from
 * {@link com.eteks.sweethome3d.io.DefaultUserPreferences default user preferences}
 * and stored in user preferences on local file system.
 *
 * @author Emmanuel Puybaret
 */
public class FileUserPreferences extends UserPreferences {

    /**
     * Returns <code>true</code> if the given textures library file exists in the first textures libraries folder.
     *
     * @param name the name of the resource to check
     */
    @Override
    public boolean texturesLibraryExists(String name) throws RecorderException;
}

// FileUserPreferencesTest.java
package com.eteks.sweethome3d.io;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.prefs.AbstractPreferences;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCatalog;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.PatternsCatalog;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUserPreferences}.
* It contains ten unit test cases for the {@link FileUserPreferences#texturesLibraryExists(String)} method.
*/
class FileUserPreferencesTest {
		
		@Test
		void testTexturesLibraryExists() throws RecorderException {
				FileUserPreferences prefs = new FileUserPreferences();
				assertTrue(prefs.texturesLibraryExists(""textures.zip""));
		}
}

// FileUserPreferences.java
package com.eteks.sweethome3d.io;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.prefs.AbstractPreferences;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCatalog;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.PatternsCatalog;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;

/**
 * User preferences initialized from
 * {@link com.eteks.sweethome3d.io.DefaultUserPreferences default user preferences}
 * and stored in user preferences on local file system.
 *
 * @author Emmanuel Puybaret
 */
public class FileUserPreferences extends UserPreferences {

    /**
     * Returns <code>true</code> if the given textures library file exists in the first textures libraries folder.
     *
     * @param name the name of the resource to check
     */
    @Override
    public boolean texturesLibraryExists(String name) throws RecorderException;
}

// FileUserPreferencesTest.java
package com.eteks.sweethome3d.io;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.prefs.AbstractPreferences;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCatalog;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.PatternsCatalog;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileUserPreferences}.
* It contains ten unit test cases for the {@link FileUserPreferences#texturesLibraryExists(String)} method.
*/
class FileUserPreferencesTest {
		
		@Test
		void testTexturesLibraryExists() throws RecorderException {
				FileUserPreferences prefs = new FileUserPreferences();
				assertTrue(prefs.texturesLibraryExists(""textures.zip""));
		}
}

// FileUserPreferences.java
package com.eteks.sweethome3d.io;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.prefs.AbstractPreferences;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCatalog;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.PatternsCatalog;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d."
cmpl-6x10IKBAl8QzG8pP8eFOVP34hSyUn,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/Component3DManager0.java,108.03104186058044,length,"// Component3DManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.GraphicsConfigTemplate;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.GraphicsConfigTemplate3D;
import javax.media.j3d.IllegalRenderingStateException;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.RenderingError;
import javax.media.j3d.RenderingErrorListener;
import javax.media.j3d.Screen3D;
import javax.media.j3d.View;
import javax.media.j3d.VirtualUniverse;
import com.sun.j3d.utils.universe.SimpleUniverse;
import com.sun.j3d.utils.universe.Viewer;
import com.sun.j3d.utils.universe.ViewingPlatform;

/**
 * Manager of <code>Canvas3D</code> instantiations and Java 3D error listeners.
 * Note: this class is compatible with Java 3D 1.3 at runtime but requires Java 3D 1.5 to compile.
 *
 * @author Emmanuel Puybaret
 */
public class Component3DManager {

    /**
     * Returns an instance of this singleton.
     */
    public static Component3DManager getInstance();
}
","// Component3DManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.GraphicsConfigTemplate;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.GraphicsConfigTemplate3D;
import javax.media.j3d.IllegalRenderingStateException;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.RenderingError;
import javax.media.j3d.RenderingErrorListener;
import javax.media.j3d.Screen3D;
import javax.media.j3d.View;
import javax.media.j3d.VirtualUniverse;
import com.sun.j3d.utils.universe.SimpleUniverse;
import com.sun.j3d.utils.universe.Viewer;
import com.sun.j3d.utils.universe.ViewingPlatform;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Component3DManager}.
* It contains ten unit test cases for the {@link Component3DManager#getInstance()} method.
*/
class Component3DManagerTest {","// Component3DManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.GraphicsConfigTemplate;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.GraphicsConfigTemplate3D;
import javax.media.j3d.IllegalRenderingStateException;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.RenderingError;
import javax.media.j3d.RenderingErrorListener;
import javax.media.j3d.Screen3D;
import javax.media.j3d.View;
import javax.media.j3d.VirtualUniverse;
import com.sun.j3d.utils.universe.SimpleUniverse;
import com.sun.j3d.utils.universe.Viewer;
import com.sun.j3d.utils.universe.ViewingPlatform;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Component3DManager}.
* It contains ten unit test cases for the {@link Component3DManager#getInstance()} method.
*/
class Component3DManagerTest {

	@Test
	void testGetInstance() {
		Component3DManager manager = Component3DManager.getInstance();
		assertNotNull(manager);
	}
}

// Component3DManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.GraphicsConfigTemplate;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.GraphicsConfigTemplate3D;
import javax.media.j3d.IllegalRenderingStateException;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.RenderingError;
import javax.media.j3d.RenderingErrorListener;
import javax.media.j3d.Screen3D;
import javax.media.j3d.View;
import javax.media.j3d.VirtualUniverse;
import com.sun.j3d.utils.universe.SimpleUniverse;
import com.sun.j3d.utils.universe.Viewer;
import com.sun.j3d.utils.universe.ViewingPlatform;

/**
 * Manager of <code>Canvas3D</code> instantiations and Java 3D error listeners.
 * Note: this class is compatible with Java 3D 1.3 at runtime but requires Java 3D 1.5 to compile.
 *
 * @author Emmanuel Puybaret
 */
public class Component3DManager {

    /**
     * Returns an instance of this singleton.
     */
    public static Component3DManager getInstance();
}

// Component3DManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.GraphicsConfigTemplate;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.GraphicsConfigTemplate3D;
import javax.media.j3d.IllegalRenderingStateException;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.RenderingError;
import javax.media.j3d.RenderingErrorListener;
import javax.media.j3d.Screen3D;
import javax.media.j3d.View;
import javax.media.j3d.VirtualUniverse;
import com.sun.j3d.utils.universe.SimpleUniverse;
import com.sun.j3d.utils.universe.Viewer;
import com.sun.j3d.utils.universe.ViewingPlatform;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Component3DManager}.
* It contains ten unit test cases for the {@link Component3DManager#getInstance()} method.
*/
class Component3DManagerTest {
		
	@Test
	void testGetInstance() {
		Component3DManager manager = Component3DManager.getInstance();
		assertNotNull(manager);
	}
}

// Component3DManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.GraphicsConfigTemplate;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.GraphicsConfigTemplate3D;
import javax.media.j3d.IllegalRenderingStateException;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.RenderingError;
import javax.media.j3d.RenderingErrorListener;
import javax.media.j3d.Screen3D;
import javax.media.j3d.View;
import javax.media.j3d.VirtualUniverse;
import com.sun.j3d.utils.universe.SimpleUniverse;
import com.sun.j3d.utils.universe.Viewer;
import com.sun.j3d.utils.universe.ViewingPlatform;

/**
 * Manager of <code>Canvas3D</code> instantiations and Java 3D error listeners.
 * Note: this class is compatible with Java 3D 1.3 at runtime but requires Java 3D 1.5 to compile.
 *
 * @author Emmanuel Puybaret
 */
public class Component3DManager {

    /**
     * Returns an instance of this singleton.
     */
    public static Component3DManager getInstance();
}

// Component3DManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.GraphicsConfigTemplate;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.GraphicsConfigTemplate3D;
import javax.media.j3d.IllegalRenderingStateException;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.RenderingError;
import javax.media.j3d.RenderingErrorListener;
import javax.media.j3d.Screen3D;
import javax.media.j3d.View;
import javax.media.j3d.VirtualUniverse;
import com.sun.j3d.utils.universe.SimpleUniverse;
import com.sun.j3d.utils.universe.Viewer;
import com.sun.j3d.utils.universe.ViewingPlatform;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Component3DManager}.
* It contains ten unit test cases for the {@link Component3DManager#getInstance()} method.
*/
class Component3DManagerTest {
		
	@Test
	void testGetInstance() {
		Component3DManager manager = Component3DManager.getInstance();
		assertNotNull(manager);
	}
}

// Component3DManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.GraphicsConfigTemplate;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.GraphicsConfigTemplate3D;
import javax.media.j3d.IllegalRenderingStateException;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.RenderingError;
import javax.media.j3d.RenderingErrorListener;
import javax.media.j3d.Screen3D;
import javax.media.j3d.View;
import javax.media.j3d.VirtualUniverse;
import com.sun.j3d.utils.universe.SimpleUniverse;
import com.sun.j3d.utils.universe.Viewer;
import com.sun.j3d.utils.universe.ViewingPlatform;

/**
 * Manager of <code>Canvas3D</code> instantiations and Java 3D error listeners.
 * Note: this class is compatible with Java 3D 1.3 at runtime but requires Java 3D 1.5 to compile.
 *
 * @author Emmanuel Puybaret
 */
public class Component3DManager {

    /**
     * Returns an instance of this singleton.
     */
    public static Component3DManager getInstance();
}

// Component3DManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.GraphicsConfigTemplate;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.GraphicsConfigTemplate3D;
import javax.media.j3d.IllegalRenderingStateException;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.RenderingError;
import javax.media.j3d.RenderingErrorListener;
import javax.media.j3d.Screen3D;
import javax.media.j3d.View;
import javax.media.j3d.VirtualUniverse;
import com.sun.j3d.utils.universe.SimpleUniverse;
import com.sun.j3d.utils.universe.Viewer;
import com.sun.j3d.utils.universe.ViewingPlatform;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Component3DManager}.
* It contains ten unit test cases for the {@link Component3DManager#getInstance()} method.
*/
class Component3DManagerTest {
		
	@Test
	void testGetInstance() {
		Component3DManager manager = Component3DManager.getInstance();
		assertNotNull(manager);
	}
}

// Component3DManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.GraphicsConfigTemplate;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.GraphicsConfigTemplate3D;
import javax.media.j3d.IllegalRenderingStateException;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.RenderingError;
import javax.media.j3d.RenderingErrorListener;
import javax.media.j3d.Screen3D;
import javax.media.j3d.View;
import javax.media.j3d.VirtualUniverse;
import com.sun.j3d.utils.universe.SimpleUniverse;
import com.sun.j3d.utils.universe.Viewer;
import com.sun.j3d.utils.universe.ViewingPlatform;

/**
 * Manager of <code>Canvas3D</code> instantiations and Java 3D error listeners.
 * Note: this class is compatible with Java 3D 1.3 at runtime but requires Java 3D 1.5 to compile.
 *
 * @author Emmanuel Puybaret
 */
public class Component3DManager {

    /**
     * Returns an instance of this singleton.
     */
    public static Component3DManager getInstance();
}

// Component3DManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.GraphicsConfigTemplate;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.GraphicsConfigTemplate3D;
import javax.media.j3d.IllegalRenderingStateException;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.RenderingError;
import javax.media.j3d.RenderingErrorListener;
import javax.media.j3d.Screen3D;
import javax.media.j3d.View;
import javax.media.j3d.VirtualUniverse;
import com.sun.j3d.utils.universe.SimpleUniverse;
import com.sun.j3d.utils.universe.Viewer;
import com.sun.j3d.utils.universe.ViewingPlatform;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Component3DManager}.
* It contains ten unit test cases for the {@link Component3DManager#getInstance()} method.
*/
class Component3DManagerTest {
		
	@Test
	void testGetInstance() {
		Component3DManager manager = Component3DManager.getInstance();
		assertNotNull(manager);
	}
}

// Component3DManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.GraphicsConfigTemplate;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.GraphicsConfigTemplate3D;
import javax.media.j3d.IllegalRenderingStateException;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.RenderingError;
import javax.media.j3d.RenderingErrorListener;
import javax.media.j3d.Screen3D;
import javax.media.j3d.View;
import javax.media.j3d.VirtualUniverse;
import com.sun.j3d.utils.universe.SimpleUniverse;
import com.sun.j3d.utils.universe.Viewer;
import com.sun.j3d.utils.universe.ViewingPlatform;

/**
 * Manager of <code>Canvas3D</code> instantiations and Java 3D error listeners.
 * Note: this class is compatible with Java 3D 1.3 at runtime but requires Java 3D 1.5 to compile.
 *
 * @author Emmanuel Puybaret
 */
public class Component3DManager {

    /**
     * Returns an instance of this singleton.
     */
    public static Component3DManager getInstance();
}

// Component3DManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.GraphicsConfigTemplate;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java"
cmpl-6x13uF0VvjKsrY594duPfND11XcUt,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/Component3DManager1.java,248.870600938797,length,"// Component3DManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.GraphicsConfigTemplate;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.GraphicsConfigTemplate3D;
import javax.media.j3d.IllegalRenderingStateException;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.RenderingError;
import javax.media.j3d.RenderingErrorListener;
import javax.media.j3d.Screen3D;
import javax.media.j3d.View;
import javax.media.j3d.VirtualUniverse;
import com.sun.j3d.utils.universe.SimpleUniverse;
import com.sun.j3d.utils.universe.Viewer;
import com.sun.j3d.utils.universe.ViewingPlatform;

/**
 * Manager of <code>Canvas3D</code> instantiations and Java 3D error listeners.
 * Note: this class is compatible with Java 3D 1.3 at runtime but requires Java 3D 1.5 to compile.
 *
 * @author Emmanuel Puybaret
 */
public class Component3DManager {

    /**
     * Returns a new on screen <code>canva3D</code> instance which rendering will be observed
     * with the given rendering observer. The returned canvas 3D will be associated with the
     * graphics configuration of the default screen device.
     *
     * @param renderingObserver an observer of the 3D rendering process of the returned canvas.
     *            Caution: The methods of the observer will be called in 3D rendering loop thread.
     * @throws IllegalRenderingStateException if the canvas 3D couldn't be created.
     */
    public Canvas3D getOnscreenCanvas3D(RenderingObserver renderingObserver);
}
","// Component3DManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.GraphicsConfigTemplate;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.GraphicsConfigTemplate3D;
import javax.media.j3d.IllegalRenderingStateException;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.RenderingError;
import javax.media.j3d.RenderingErrorListener;
import javax.media.j3d.Screen3D;
import javax.media.j3d.View;
import javax.media.j3d.VirtualUniverse;
import com.sun.j3d.utils.universe.SimpleUniverse;
import com.sun.j3d.utils.universe.Viewer;
import com.sun.j3d.utils.universe.ViewingPlatform;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Component3DManager}.
* It contains ten unit test cases for the {@link Component3DManager#getOnscreenCanvas3D(RenderingObserver)} method.
*/
class Component3DManagerTest {","// Component3DManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.GraphicsConfigTemplate;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.GraphicsConfigTemplate3D;
import javax.media.j3d.IllegalRenderingStateException;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.RenderingError;
import javax.media.j3d.RenderingErrorListener;
import javax.media.j3d.Screen3D;
import javax.media.j3d.View;
import javax.media.j3d.VirtualUniverse;
import com.sun.j3d.utils.universe.SimpleUniverse;
import com.sun.j3d.utils.universe.Viewer;
import com.sun.j3d.utils.universe.ViewingPlatform;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Component3DManager}.
* It contains ten unit test cases for the {@link Component3DManager#getOnscreenCanvas3D(RenderingObserver)} method.
*/
class Component3DManagerTest {

	@Test
	public void testGetOnscreenCanvas3D() {
		// Test 1: Check that the returned canvas 3D is not null
		Canvas3D canvas3D = Component3DManager.getOnscreenCanvas3D(null);
		assertNotNull(canvas3D);
		
		// Test 2: Check that the returned canvas 3D is on screen
		assertTrue(canvas3D.getScreen3D().getSize().width > 0);
		assertTrue(canvas3D.getScreen3D().getSize().height > 0);
		
		// Test 3: Check that the returned canvas 3D is double buffered
		assertTrue(canvas3D.getDoubleBufferEnable());
		
		// Test 4: Check that the returned canvas 3D is stereo enabled
		assertTrue(canvas3D.getStereoEnable());
		
		// Test 5: Check that the returned canvas 3D is hardware accelerated
		assertTrue(canvas3D.getGraphicsConfigTemplate().getSceneAntialiasing());
		
		// Test 6: Check that the returned canvas 3D is associated with the default screen device
		GraphicsDevice defaultScreenDevice = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
		assertEquals(defaultScreenDevice, canvas3D.getGraphicsConfiguration().getDevice());
		
		// Test 7: Check that the returned canvas 3D is associated with the default screen device
		//         and that the returned canvas 3D is the only one associated with this device
		GraphicsDevice [] screenDevices = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();
		for (GraphicsDevice screenDevice : screenDevices) {
			GraphicsConfiguration [] configurations = screenDevice.getConfigurations();
			for (GraphicsConfiguration configuration : configurations) {
				if (configuration.getDevice() == defaultScreenDevice) {
					assertEquals(canvas3D.getGraphicsConfiguration(), configuration);
				}
			}
		}
		
		// Test 8: Check that the returned canvas 3D is associated with the default screen device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that the returned canvas 3D is the only one associated with this device
		//         and that"
cmpl-6x163HFUX1lKayuo0It0yofiOHuXu,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/ModelManager0.java,121.9968843460083,length,"// ModelManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.EventQueue;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.awt.geom.PathIterator;
import java.awt.geom.Rectangle2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.media.j3d.Appearance;
import javax.media.j3d.BoundingBox;
import javax.media.j3d.Bounds;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.Geometry;
import javax.media.j3d.GeometryArray;
import javax.media.j3d.GeometryStripArray;
import javax.media.j3d.Group;
import javax.media.j3d.IndexedGeometryArray;
import javax.media.j3d.IndexedGeometryStripArray;
import javax.media.j3d.IndexedQuadArray;
import javax.media.j3d.IndexedTriangleArray;
import javax.media.j3d.IndexedTriangleFanArray;
import javax.media.j3d.IndexedTriangleStripArray;
import javax.media.j3d.Light;
import javax.media.j3d.Link;
import javax.media.j3d.Material;
import javax.media.j3d.Node;
import javax.media.j3d.QuadArray;
import javax.media.j3d.RenderingAttributes;
import javax.media.j3d.Shape3D;
import javax.media.j3d.SharedGroup;
import javax.media.j3d.Texture;
import javax.media.j3d.TextureAttributes;
import javax.media.j3d.Transform3D;
import javax.media.j3d.TransformGroup;
import javax.media.j3d.TransparencyAttributes;
import javax.media.j3d.TriangleArray;
import javax.media.j3d.TriangleFanArray;
import javax.media.j3d.TriangleStripArray;
import javax.vecmath.Color3f;
import javax.vecmath.Matrix3f;
import javax.vecmath.Point3d;
import javax.vecmath.Point3f;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;
import org.apache.batik.parser.AWTPathProducer;
import org.apache.batik.parser.ParseException;
import org.apache.batik.parser.PathParser;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import com.microcrowd.loader.java3d.max3ds.Loader3DS;
import com.sun.j3d.loaders.IncorrectFormatException;
import com.sun.j3d.loaders.Loader;
import com.sun.j3d.loaders.ParsingErrorException;
import com.sun.j3d.loaders.Scene;
import com.sun.j3d.loaders.lw3d.Lw3dLoader;

/**
 * Singleton managing 3D models cache.
 * This manager supports 3D models with an OBJ, DAE, 3DS or LWS format by default.
 * Additional classes implementing Java 3D <code>Loader</code> interface may be
 * specified in the <code>com.eteks.sweethome3d.j3d.additionalLoaderClasses</code>
 * (separated by a space or a colon :) to enable the support of other formats.<br>
 * Note: this class is compatible with Java 3D 1.3.
 *
 * @author Emmanuel Puybaret
 */
public class ModelManager {

    /**
     * Returns an instance of this singleton.
     */
    public static ModelManager getInstance();
}
","// ModelManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.EventQueue;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.awt.geom.PathIterator;
import java.awt.geom.Rectangle2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.media.j3d.Appearance;
import javax.media.j3d.BoundingBox;
import javax.media.j3d.Bounds;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.Geometry;
import javax.media.j3d.GeometryArray;
import javax.media.j3d.GeometryStripArray;
import javax.media.j3d.Group;
import javax.media.j3d.IndexedGeometryArray;
import javax.media.j3d.IndexedGeometryStripArray;
import javax.media.j3d.IndexedQuadArray;
import javax.media.j3d.IndexedTriangleArray;
import javax.media.j3d.IndexedTriangleFanArray;
import javax.media.j3d.IndexedTriangleStripArray;
import javax.media.j3d.Light;
import javax.media.j3d.Link;
import javax.media.j3d.Material;
import javax.media.j3d.Node;
import javax.media.j3d.QuadArray;
import javax.media.j3d.RenderingAttributes;
import javax.media.j3d.Shape3D;
import javax.media.j3d.SharedGroup;
import javax.media.j3d.Texture;
import javax.media.j3d.TextureAttributes;
import javax.media.j3d.Transform3D;
import javax.media.j3d.TransformGroup;
import javax.media.j3d.TransparencyAttributes;
import javax.media.j3d.TriangleArray;
import javax.media.j3d.TriangleFanArray;
import javax.media.j3d.TriangleStripArray;
import javax.vecmath.Color3f;
import javax.vecmath.Matrix3f;
import javax.vecmath.Point3d;
import javax.vecmath.Point3f;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;
import org.apache.batik.parser.AWTPathProducer;
import org.apache.batik.parser.ParseException;
import org.apache.batik.parser.PathParser;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import com.microcrowd.loader.java3d.max3ds.Loader3DS;
import com.sun.j3d.loaders.IncorrectFormatException;
import com.sun.j3d.loaders.Loader;
import com.sun.j3d.loaders.ParsingErrorException;
import com.sun.j3d.loaders.Scene;
import com.sun.j3d.loaders.lw3d.Lw3dLoader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModelManager}.
* It contains ten unit test cases for the {@link ModelManager#getInstance()} method.
*/
class ModelManagerTest {","// ModelManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.EventQueue;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.awt.geom.PathIterator;
import java.awt.geom.Rectangle2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.media.j3d.Appearance;
import javax.media.j3d.BoundingBox;
import javax.media.j3d.Bounds;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.Geometry;
import javax.media.j3d.GeometryArray;
import javax.media.j3d.GeometryStripArray;
import javax.media.j3d.Group;
import javax.media.j3d.IndexedGeometryArray;
import javax.media.j3d.IndexedGeometryStripArray;
import javax.media.j3d.IndexedQuadArray;
import javax.media.j3d.IndexedTriangleArray;
import javax.media.j3d.IndexedTriangleFanArray;
import javax.media.j3d.IndexedTriangleStripArray;
import javax.media.j3d.Light;
import javax.media.j3d.Link;
import javax.media.j3d.Material;
import javax.media.j3d.Node;
import javax.media.j3d.QuadArray;
import javax.media.j3d.RenderingAttributes;
import javax.media.j3d.Shape3D;
import javax.media.j3d.SharedGroup;
import javax.media.j3d.Texture;
import javax.media.j3d.TextureAttributes;
import javax.media.j3d.Transform3D;
import javax.media.j3d.TransformGroup;
import javax.media.j3d.TransparencyAttributes;
import javax.media.j3d.TriangleArray;
import javax.media.j3d.TriangleFanArray;
import javax.media.j3d.TriangleStripArray;
import javax.vecmath.Color3f;
import javax.vecmath.Matrix3f;
import javax.vecmath.Point3d;
import javax.vecmath.Point3f;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;
import org.apache.batik.parser.AWTPathProducer;
import org.apache.batik.parser.ParseException;
import org.apache.batik.parser.PathParser;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import com.microcrowd.loader.java3d.max3ds.Loader3DS;
import com.sun.j3d.loaders.IncorrectFormatException;
import com.sun.j3d.loaders.Loader;
import com.sun.j3d.loaders.ParsingErrorException;
import com.sun.j3d.loaders.Scene;
import com.sun.j3d.loaders.lw3d.Lw3dLoader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModelManager}.
* It contains ten unit test cases for the {@link ModelManager#getInstance()} method.
*/
class ModelManagerTest {

		@Test
		void testGetInstance() {
				ModelManager modelManager = ModelManager.getInstance();
				assertNotNull(modelManager);
		}
}

// ModelManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.EventQueue;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.awt.geom.PathIterator;
import java.awt.geom.Rectangle2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.media.j3d.Appearance;
import javax.media.j3d.BoundingBox;
import javax.media.j3d.Bounds;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.Geometry;
import javax.media.j3d.GeometryArray;
import javax.media.j3d.GeometryStripArray;
import javax.media.j3d.Group;
import javax.media.j3d.IndexedGeometryArray;
import javax.media.j3d.IndexedGeometryStripArray;
import javax.media.j3d.IndexedQuadArray;
import javax.media.j3d.IndexedTriangleArray;
import javax.media.j3d.IndexedTriangleFanArray;
import javax.media.j3d.IndexedTriangleStripArray;
import javax.media.j3d.Light;
import javax.media.j3d.Link;
import javax.media.j3d.Material;
import javax.media.j3d.Node;
import javax.media.j3d.QuadArray;
import javax.media.j3d.RenderingAttributes;
import javax.media.j3d.Shape3D;
import javax.media.j3d.SharedGroup;
import javax.media.j3d.Texture;
import javax.media.j3d.TextureAttributes;
import javax.media.j3d.Transform3D;
import javax.media.j3d.TransformGroup;
import javax.media.j3d.TransparencyAttributes;
import javax.media.j3d.TriangleArray;
import javax.media.j3d.TriangleFanArray;
import javax.media.j3d.TriangleStripArray;
import javax.vecmath.Color3f;
import javax.vecmath.Matrix3f;
import javax.vecmath.Point3d;
import javax.vecmath.Point3f;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;
import org.apache.batik.parser.AWTPathProducer;
import org.apache.batik.parser.ParseException;
import org.apache.batik.parser.PathParser;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import com.microcrowd.loader.java3d.max3ds.Loader3DS;
import com.sun.j3d.loaders.IncorrectFormatException;
import com.sun.j3d.loaders.Loader;
import com.sun.j3d.loaders.ParsingErrorException;
import com.sun.j3d.loaders.Scene;
import com.sun.j3d.loaders.lw3d.Lw3dLoader;

/**
 * Singleton managing 3D models cache.
 * This manager supports 3D models with an OBJ, DAE, 3DS or LWS format by default.
 * Additional classes implementing Java 3D <code>Loader</code> interface may be
 * specified in the <code>com.eteks.sweethome3d.j3d.additionalLoaderClasses</code>
 * (separated by a space or a colon :) to enable the support of other formats.<br>
 * Note: this class is compatible with Java 3D 1.3.
 *
 * @author Emmanuel Puybaret
 */
public class ModelManager {

    /**
     * Returns an instance of this singleton.
     */
    public static ModelManager getInstance() {
        return INSTANCE;
    }

    /**
     * Returns the 3D model matching the given <code>content</code>.
     * @param content the content of the model
     * @param name    the name of the model
     * @param creator the creator of the model
     * @return the 3D model matching the given <code>content</code>
     * @throws IllegalArgumentException if the given <code>content</code> doesn't match any 3D model.
     */
    public BranchGroup getModel(Content content, String name, String creator) {
        return getModel(content, name, creator, null);
    }

    /**
     * Returns the 3D model matching the given <code>content</code>.
     * @param content the content of the model
     * @param name    the name of the model
     * @param creator the creator of the model
     * @param modelSize the size of the model or <code>null</code>
     * @return the 3D model matching the given <code>content</code>
     * @throws IllegalArgumentException if the given <code>content</code> doesn't match any 3D model.
     */
    public BranchGroup getModel(Content content, String name, String creator, float [] modelSize) {
        BranchGroup model = this.models.get(content);
        if (model == null) {
            model = loadModel(content, name, creator, modelSize);
            this.models.put(content, model);
        }
        return model;
    }

    /**
     * Returns the 3D model matching the given <code>content</code>.
     * @param content the content of the model
     * @param name    the name of the model
     * @param creator the creator of the model
     * @return the 3D model matching the given <code>content</code>
     * @throws IllegalArgumentException if the given <code>content</code> doesn't match any 3D model.
     */
    public BranchGroup getModel(Content content, String name, String creator) {
        return getModel(content, name, creator, null);
    }

    /**
     * Returns the 3D model matching the given <code>content</code>.
     * @param content the content of the model
     * @param name    the name of the model
     * @param creator the creator of the model
     * @param modelSize the size of the model or <code>null</code>
     * @return the 3D model matching the given <code>content</code>
     * @throws IllegalArgumentException if the given <code>content</code> doesn't match any 3D model.
     */
    public BranchGroup getModel(Content content, String name, String creator, float [] modelSize) {
        BranchGroup model = this.models.get(content);
        if (model == null) {
            model = loadModel(content, name, creator, modelSize);
            this.models.put(content, model);
        }
        return model;
    }

    /**
     * Returns the 3D model matching the given <code>content</code>.
     * @param content the content of the model
     * @param name    the name of the model
     * @param creator the creator of the model
     * @return the 3D model matching the given <code>content</code>
     * @throws IllegalArgumentException if the given <code>content</code> doesn't match any 3D model.
     */
    public BranchGroup getModel(Content content, String name, String creator) {
        return getModel(content, name, creator, null);
    }

    /**
     * Returns the 3D model matching the given <code>content</code>.
     * @param content the content of the model
     * @param name    the name of the model
     * @param creator the creator of the model
     * @param modelSize the size of the model or <code>null</code>
     * @return the 3D model matching the given <code>content</code>
     * @throws IllegalArgumentException if the given <code>content</code> doesn't match any 3D model.
     */
    public BranchGroup getModel(Content content, String name, String creator, float [] modelSize) {
        BranchGroup model = this.models.get(content);
        if (model == null) {
            model = loadModel(content, name, creator, modelSize);
            this.models.put(content, model);
        }
        return model;
    }

    /**
     * Returns the 3D model matching the given <code>content</code>.
     * @param content the content of the model
     * @param name    the name of the model
     * @param creator the creator of the model
     * @return the 3D model matching the given <code>content</code>
     * @throws IllegalArgumentException if the given <code>content</code> doesn't match any 3D model.
     */
    public BranchGroup getModel(Content content, String name, String creator) {
        return getModel(content, name, creator, null);
    }

    /**
     * Returns the 3D model matching the given <code>content</code>.
     * @param content the content of the model
     * @param name    the name of the model
     * @param creator the creator of the model
     * @param modelSize the size of the model or <code>null</code>
     * @return the 3D model matching the given <code>content</code>
     * @throws IllegalArgumentException if the given <code>content</code> doesn't match any 3D model.
     */
    public BranchGroup getModel(Content content, String name, String creator, float [] modelSize) {
        BranchGroup model = this.models.get(content);
        if (model == null) {
            model = loadModel(content, name, creator, modelSize);
            this.models.put(content, model);
        }
        return model;
    }

    /**
     * Returns the 3D model matching the given <code>content</code>.
     * @param content the content of the model
     * @param name    the name of the model
     * @param creator the creator of the model
     * @return the 3D model matching the given <code>content</code>
     * @throws IllegalArgumentException if the given <code>content</code> doesn't match any 3D model.
     */
    public BranchGroup getModel(Content content, String name, String creator) {
        return getModel(content, name, creator, null);
    }

    /**
     * Returns the 3D model matching the given <code>content</code>.
     * @param content the content of the model
     * @param name    the name of the model
     * @param creator the creator of the model
     * @param modelSize the size of the model or <code>null</code>
     * @return the 3D model matching the given <code>content</code>
     * @throws IllegalArgumentException if the given <code>content</code> doesn't match any 3D model.
     */
    public BranchGroup getModel(Content content, String name, String creator, float [] modelSize) {
        BranchGroup model = this.models.get(content);
        if (model == null) {
            model = loadModel(content, name, creator, modelSize);
            this.models.put(content, model);
        }
        return model;
    }

    /**
     * Returns the 3D model matching the given <code>content</code>.
     * @param content the content of the model
     * @param name    the name of the model
     * @param creator the creator of the model
     * @return the 3D model matching the given <code>content</code>
     * @throws IllegalArgumentException if the given <code>content</code> doesn't match any 3D model.
     */
    public BranchGroup getModel(Content content, String name, String creator) {
        return getModel(content, name, creator, null);
    }

    /**
     * Returns the 3D model matching the given <code>content</code>.
     * @param content the content of the model
     * @param name    the name of the model
     * @param creator the creator of the model
     * @param modelSize the size of the model or <code>null</code>
     * @return the 3D model matching the given <code>content</code>
     * @throws IllegalArgumentException if the given <code>content</code> doesn't match any 3D model.
     */
    public BranchGroup getModel(Content content, String name, String creator, float [] modelSize) {
        BranchGroup model = this.models.get(content);
        if (model == null) {
            model = loadModel(content, name, creator, modelSize);
            this.models.put(content, model);
        }
        return model;
    }

    /**
     * Returns the 3D model matching the given <code>content</code>.
     * @param content the content of the model
     * @param name    the name of the model
     * @param creator the creator of the model
     * @return the 3D model matching the given <code>content</code>
     * @throws IllegalArgumentException if the given <code>content</code> doesn't match any 3D model.
     */
    public BranchGroup getModel(Content content, String name, String creator) {
        return getModel(content, name, creator, null);
    }

    /**
     * Returns the 3D model matching the given <code>content</code>.
     * @param content the content of the model
     * @param name    the name of the model
     * @param creator the creator of the model
     * @param modelSize the size of the model or <code>null</code>
     * @return the 3D model matching the given <code>content</code>
     * @throws IllegalArgumentException if the given <code>content</code> doesn't match any 3D model.
     */
    public BranchGroup getModel(Content content, String name, String creator, float [] modelSize) {
        BranchGroup model = this.models.get(content);
        if (model == null) {
            model = loadModel(content, name, creator, modelSize);
            this.models.put(content, model);
        }
        return model;
    }

    /**
     * Returns the 3D model matching the given <code>content</code>.
     * @param content the content of the model
     * @param name    the name of the model
     * @param creator the creator of the model
     * @return the 3D model matching the given <code>content</code>
     * @throws IllegalArgumentException if the given <code>content</code> doesn't match any 3D model.
     */
    public BranchGroup getModel(Content content, String name, String creator) {
        return getModel(content, name, creator, null);
    }

    /**
     * Returns the 3D model matching the given <code>content</code>.
     * @param content the content of the model
     * @param name    the name of the model
     * @param creator the creator of the model
     * @param modelSize the size of the model or <code>null</code>
     * @return the 3D"
163e3e0e-a195-4189-9783-aa72bbaacc0d,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/ModelManager1.java,-1,"ERROR - Error communicating with OpenAI: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))","// ModelManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.EventQueue;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.awt.geom.PathIterator;
import java.awt.geom.Rectangle2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.media.j3d.Appearance;
import javax.media.j3d.BoundingBox;
import javax.media.j3d.Bounds;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.Geometry;
import javax.media.j3d.GeometryArray;
import javax.media.j3d.GeometryStripArray;
import javax.media.j3d.Group;
import javax.media.j3d.IndexedGeometryArray;
import javax.media.j3d.IndexedGeometryStripArray;
import javax.media.j3d.IndexedQuadArray;
import javax.media.j3d.IndexedTriangleArray;
import javax.media.j3d.IndexedTriangleFanArray;
import javax.media.j3d.IndexedTriangleStripArray;
import javax.media.j3d.Light;
import javax.media.j3d.Link;
import javax.media.j3d.Material;
import javax.media.j3d.Node;
import javax.media.j3d.QuadArray;
import javax.media.j3d.RenderingAttributes;
import javax.media.j3d.Shape3D;
import javax.media.j3d.SharedGroup;
import javax.media.j3d.Texture;
import javax.media.j3d.TextureAttributes;
import javax.media.j3d.Transform3D;
import javax.media.j3d.TransformGroup;
import javax.media.j3d.TransparencyAttributes;
import javax.media.j3d.TriangleArray;
import javax.media.j3d.TriangleFanArray;
import javax.media.j3d.TriangleStripArray;
import javax.vecmath.Color3f;
import javax.vecmath.Matrix3f;
import javax.vecmath.Point3d;
import javax.vecmath.Point3f;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;
import org.apache.batik.parser.AWTPathProducer;
import org.apache.batik.parser.ParseException;
import org.apache.batik.parser.PathParser;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import com.microcrowd.loader.java3d.max3ds.Loader3DS;
import com.sun.j3d.loaders.IncorrectFormatException;
import com.sun.j3d.loaders.Loader;
import com.sun.j3d.loaders.ParsingErrorException;
import com.sun.j3d.loaders.Scene;
import com.sun.j3d.loaders.lw3d.Lw3dLoader;

/**
 * Singleton managing 3D models cache.
 * This manager supports 3D models with an OBJ, DAE, 3DS or LWS format by default.
 * Additional classes implementing Java 3D <code>Loader</code> interface may be
 * specified in the <code>com.eteks.sweethome3d.j3d.additionalLoaderClasses</code>
 * (separated by a space or a colon :) to enable the support of other formats.<br>
 * Note: this class is compatible with Java 3D 1.3.
 *
 * @author Emmanuel Puybaret
 */
public class ModelManager {

    /**
     * Returns a transform group that will transform the model <code>node</code>
     * to let it fill a box of the given <code>width</code> centered on the origin.
     *
     * @param node the root of a model with any size and location
     * @param modelRotation the rotation applied to the model before normalization
     *                 or <code>null</code> if no transformation should be applied to node.
     * @param width the width of the box
     */
    public TransformGroup getNormalizedTransformGroup(Node node, float[][] modelRotation, float width);
}
","// ModelManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.EventQueue;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.awt.geom.PathIterator;
import java.awt.geom.Rectangle2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.media.j3d.Appearance;
import javax.media.j3d.BoundingBox;
import javax.media.j3d.Bounds;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.Geometry;
import javax.media.j3d.GeometryArray;
import javax.media.j3d.GeometryStripArray;
import javax.media.j3d.Group;
import javax.media.j3d.IndexedGeometryArray;
import javax.media.j3d.IndexedGeometryStripArray;
import javax.media.j3d.IndexedQuadArray;
import javax.media.j3d.IndexedTriangleArray;
import javax.media.j3d.IndexedTriangleFanArray;
import javax.media.j3d.IndexedTriangleStripArray;
import javax.media.j3d.Light;
import javax.media.j3d.Link;
import javax.media.j3d.Material;
import javax.media.j3d.Node;
import javax.media.j3d.QuadArray;
import javax.media.j3d.RenderingAttributes;
import javax.media.j3d.Shape3D;
import javax.media.j3d.SharedGroup;
import javax.media.j3d.Texture;
import javax.media.j3d.TextureAttributes;
import javax.media.j3d.Transform3D;
import javax.media.j3d.TransformGroup;
import javax.media.j3d.TransparencyAttributes;
import javax.media.j3d.TriangleArray;
import javax.media.j3d.TriangleFanArray;
import javax.media.j3d.TriangleStripArray;
import javax.vecmath.Color3f;
import javax.vecmath.Matrix3f;
import javax.vecmath.Point3d;
import javax.vecmath.Point3f;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;
import org.apache.batik.parser.AWTPathProducer;
import org.apache.batik.parser.ParseException;
import org.apache.batik.parser.PathParser;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import com.microcrowd.loader.java3d.max3ds.Loader3DS;
import com.sun.j3d.loaders.IncorrectFormatException;
import com.sun.j3d.loaders.Loader;
import com.sun.j3d.loaders.ParsingErrorException;
import com.sun.j3d.loaders.Scene;
import com.sun.j3d.loaders.lw3d.Lw3dLoader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModelManager}.
* It contains ten unit test cases for the {@link ModelManager#getNormalizedTransformGroup(Node, float[][], float)} method.
*/
class ModelManagerTest {","// ModelManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.EventQueue;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.awt.geom.PathIterator;
import java.awt.geom.Rectangle2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.media.j3d.Appearance;
import javax.media.j3d.BoundingBox;
import javax.media.j3d.Bounds;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.Geometry;
import javax.media.j3d.GeometryArray;
import javax.media.j3d.GeometryStripArray;
import javax.media.j3d.Group;
import javax.media.j3d.IndexedGeometryArray;
import javax.media.j3d.IndexedGeometryStripArray;
import javax.media.j3d.IndexedQuadArray;
import javax.media.j3d.IndexedTriangleArray;
import javax.media.j3d.IndexedTriangleFanArray;
import javax.media.j3d.IndexedTriangleStripArray;
import javax.media.j3d.Light;
import javax.media.j3d.Link;
import javax.media.j3d.Material;
import javax.media.j3d.Node;
import javax.media.j3d.QuadArray;
import javax.media.j3d.RenderingAttributes;
import javax.media.j3d.Shape3D;
import javax.media.j3d.SharedGroup;
import javax.media.j3d.Texture;
import javax.media.j3d.TextureAttributes;
import javax.media.j3d.Transform3D;
import javax.media.j3d.TransformGroup;
import javax.media.j3d.TransparencyAttributes;
import javax.media.j3d.TriangleArray;
import javax.media.j3d.TriangleFanArray;
import javax.media.j3d.TriangleStripArray;
import javax.vecmath.Color3f;
import javax.vecmath.Matrix3f;
import javax.vecmath.Point3d;
import javax.vecmath.Point3f;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;
import org.apache.batik.parser.AWTPathProducer;
import org.apache.batik.parser.ParseException;
import org.apache.batik.parser.PathParser;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import com.microcrowd.loader.java3d.max3ds.Loader3DS;
import com.sun.j3d.loaders.IncorrectFormatException;
import com.sun.j3d.loaders.Loader;
import com.sun.j3d.loaders.ParsingErrorException;
import com.sun.j3d.loaders.Scene;
import com.sun.j3d.loaders.lw3d.Lw3dLoader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModelManager}.
* It contains ten unit test cases for the {@link ModelManager#getNormalizedTransformGroup(Node, float[][], float)} method.
*/
class ModelManagerTest {
"
cmpl-6x1D1i5iOOISajdPvgwDdYZWdLewx,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/ModelManager2.java,107.51829648017883,length,"// ModelManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.EventQueue;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.awt.geom.PathIterator;
import java.awt.geom.Rectangle2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.media.j3d.Appearance;
import javax.media.j3d.BoundingBox;
import javax.media.j3d.Bounds;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.Geometry;
import javax.media.j3d.GeometryArray;
import javax.media.j3d.GeometryStripArray;
import javax.media.j3d.Group;
import javax.media.j3d.IndexedGeometryArray;
import javax.media.j3d.IndexedGeometryStripArray;
import javax.media.j3d.IndexedQuadArray;
import javax.media.j3d.IndexedTriangleArray;
import javax.media.j3d.IndexedTriangleFanArray;
import javax.media.j3d.IndexedTriangleStripArray;
import javax.media.j3d.Light;
import javax.media.j3d.Link;
import javax.media.j3d.Material;
import javax.media.j3d.Node;
import javax.media.j3d.QuadArray;
import javax.media.j3d.RenderingAttributes;
import javax.media.j3d.Shape3D;
import javax.media.j3d.SharedGroup;
import javax.media.j3d.Texture;
import javax.media.j3d.TextureAttributes;
import javax.media.j3d.Transform3D;
import javax.media.j3d.TransformGroup;
import javax.media.j3d.TransparencyAttributes;
import javax.media.j3d.TriangleArray;
import javax.media.j3d.TriangleFanArray;
import javax.media.j3d.TriangleStripArray;
import javax.vecmath.Color3f;
import javax.vecmath.Matrix3f;
import javax.vecmath.Point3d;
import javax.vecmath.Point3f;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;
import org.apache.batik.parser.AWTPathProducer;
import org.apache.batik.parser.ParseException;
import org.apache.batik.parser.PathParser;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import com.microcrowd.loader.java3d.max3ds.Loader3DS;
import com.sun.j3d.loaders.IncorrectFormatException;
import com.sun.j3d.loaders.Loader;
import com.sun.j3d.loaders.ParsingErrorException;
import com.sun.j3d.loaders.Scene;
import com.sun.j3d.loaders.lw3d.Lw3dLoader;

/**
 * Singleton managing 3D models cache.
 * This manager supports 3D models with an OBJ, DAE, 3DS or LWS format by default.
 * Additional classes implementing Java 3D <code>Loader</code> interface may be
 * specified in the <code>com.eteks.sweethome3d.j3d.additionalLoaderClasses</code>
 * (separated by a space or a colon :) to enable the support of other formats.<br>
 * Note: this class is compatible with Java 3D 1.3.
 *
 * @author Emmanuel Puybaret
 */
public class ModelManager {

    /**
     * Returns a transform that will transform the model <code>node</code>
     * to let it fill a box of the given <code>width</code> centered on the origin.
     *
     * @param node the root of a model with any size and location
     * @param modelRotation the rotation applied to the model before normalization
     *                 or <code>null</code> if no transformation should be applied to node.
     * @param width the width of the box
     */
    public Transform3D getNormalizedTransform(Node node, float[][] modelRotation, float width);
}
","// ModelManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.EventQueue;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.awt.geom.PathIterator;
import java.awt.geom.Rectangle2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.media.j3d.Appearance;
import javax.media.j3d.BoundingBox;
import javax.media.j3d.Bounds;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.Geometry;
import javax.media.j3d.GeometryArray;
import javax.media.j3d.GeometryStripArray;
import javax.media.j3d.Group;
import javax.media.j3d.IndexedGeometryArray;
import javax.media.j3d.IndexedGeometryStripArray;
import javax.media.j3d.IndexedQuadArray;
import javax.media.j3d.IndexedTriangleArray;
import javax.media.j3d.IndexedTriangleFanArray;
import javax.media.j3d.IndexedTriangleStripArray;
import javax.media.j3d.Light;
import javax.media.j3d.Link;
import javax.media.j3d.Material;
import javax.media.j3d.Node;
import javax.media.j3d.QuadArray;
import javax.media.j3d.RenderingAttributes;
import javax.media.j3d.Shape3D;
import javax.media.j3d.SharedGroup;
import javax.media.j3d.Texture;
import javax.media.j3d.TextureAttributes;
import javax.media.j3d.Transform3D;
import javax.media.j3d.TransformGroup;
import javax.media.j3d.TransparencyAttributes;
import javax.media.j3d.TriangleArray;
import javax.media.j3d.TriangleFanArray;
import javax.media.j3d.TriangleStripArray;
import javax.vecmath.Color3f;
import javax.vecmath.Matrix3f;
import javax.vecmath.Point3d;
import javax.vecmath.Point3f;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;
import org.apache.batik.parser.AWTPathProducer;
import org.apache.batik.parser.ParseException;
import org.apache.batik.parser.PathParser;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import com.microcrowd.loader.java3d.max3ds.Loader3DS;
import com.sun.j3d.loaders.IncorrectFormatException;
import com.sun.j3d.loaders.Loader;
import com.sun.j3d.loaders.ParsingErrorException;
import com.sun.j3d.loaders.Scene;
import com.sun.j3d.loaders.lw3d.Lw3dLoader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModelManager}.
* It contains ten unit test cases for the {@link ModelManager#getNormalizedTransform(Node, float[][], float)} method.
*/
class ModelManagerTest {","// ModelManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.EventQueue;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.awt.geom.PathIterator;
import java.awt.geom.Rectangle2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.media.j3d.Appearance;
import javax.media.j3d.BoundingBox;
import javax.media.j3d.Bounds;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.Geometry;
import javax.media.j3d.GeometryArray;
import javax.media.j3d.GeometryStripArray;
import javax.media.j3d.Group;
import javax.media.j3d.IndexedGeometryArray;
import javax.media.j3d.IndexedGeometryStripArray;
import javax.media.j3d.IndexedQuadArray;
import javax.media.j3d.IndexedTriangleArray;
import javax.media.j3d.IndexedTriangleFanArray;
import javax.media.j3d.IndexedTriangleStripArray;
import javax.media.j3d.Light;
import javax.media.j3d.Link;
import javax.media.j3d.Material;
import javax.media.j3d.Node;
import javax.media.j3d.QuadArray;
import javax.media.j3d.RenderingAttributes;
import javax.media.j3d.Shape3D;
import javax.media.j3d.SharedGroup;
import javax.media.j3d.Texture;
import javax.media.j3d.TextureAttributes;
import javax.media.j3d.Transform3D;
import javax.media.j3d.TransformGroup;
import javax.media.j3d.TransparencyAttributes;
import javax.media.j3d.TriangleArray;
import javax.media.j3d.TriangleFanArray;
import javax.media.j3d.TriangleStripArray;
import javax.vecmath.Color3f;
import javax.vecmath.Matrix3f;
import javax.vecmath.Point3d;
import javax.vecmath.Point3f;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;
import org.apache.batik.parser.AWTPathProducer;
import org.apache.batik.parser.ParseException;
import org.apache.batik.parser.PathParser;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import com.microcrowd.loader.java3d.max3ds.Loader3DS;
import com.sun.j3d.loaders.IncorrectFormatException;
import com.sun.j3d.loaders.Loader;
import com.sun.j3d.loaders.ParsingErrorException;
import com.sun.j3d.loaders.Scene;
import com.sun.j3d.loaders.lw3d.Lw3dLoader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModelManager}.
* It contains ten unit test cases for the {@link ModelManager#getNormalizedTransform(Node, float[][], float)} method.
*/
class ModelManagerTest {

	@Test
	void testGetNormalizedTransform() {
		ModelManager modelManager = new ModelManager();
		float [][] modelRotation = null;
		float width = 1;
		
		// Test 1
		Node node = new BranchGroup();
		Transform3D transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
		
		// Test 2
		node = new TransformGroup();
		transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
		
		// Test 3
		node = new Group();
		transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
		
		// Test 4
		node = new Shape3D();
		transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
		
		// Test 5
		node = new Link();
		transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
		
		// Test 6
		node = new SharedGroup();
		transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
		
		// Test 7
		node = new Light();
		transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
		
		// Test 8
		node = new Appearance();
		transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
		
		// Test 9
		node = new Material();
		transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
		
		// Test 10
		node = new Texture();
		transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
	}
}

// ModelManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.EventQueue;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.awt.geom.PathIterator;
import java.awt.geom.Rectangle2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.media.j3d.Appearance;
import javax.media.j3d.BoundingBox;
import javax.media.j3d.Bounds;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.Geometry;
import javax.media.j3d.GeometryArray;
import javax.media.j3d.GeometryStripArray;
import javax.media.j3d.Group;
import javax.media.j3d.IndexedGeometryArray;
import javax.media.j3d.IndexedGeometryStripArray;
import javax.media.j3d.IndexedQuadArray;
import javax.media.j3d.IndexedTriangleArray;
import javax.media.j3d.IndexedTriangleFanArray;
import javax.media.j3d.IndexedTriangleStripArray;
import javax.media.j3d.Light;
import javax.media.j3d.Link;
import javax.media.j3d.Material;
import javax.media.j3d.Node;
import javax.media.j3d.QuadArray;
import javax.media.j3d.RenderingAttributes;
import javax.media.j3d.Shape3D;
import javax.media.j3d.SharedGroup;
import javax.media.j3d.Texture;
import javax.media.j3d.TextureAttributes;
import javax.media.j3d.Transform3D;
import javax.media.j3d.TransformGroup;
import javax.media.j3d.TransparencyAttributes;
import javax.media.j3d.TriangleArray;
import javax.media.j3d.TriangleFanArray;
import javax.media.j3d.TriangleStripArray;
import javax.vecmath.Color3f;
import javax.vecmath.Matrix3f;
import javax.vecmath.Point3d;
import javax.vecmath.Point3f;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;
import org.apache.batik.parser.AWTPathProducer;
import org.apache.batik.parser.ParseException;
import org.apache.batik.parser.PathParser;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import com.microcrowd.loader.java3d.max3ds.Loader3DS;
import com.sun.j3d.loaders.IncorrectFormatException;
import com.sun.j3d.loaders.Loader;
import com.sun.j3d.loaders.ParsingErrorException;
import com.sun.j3d.loaders.Scene;
import com.sun.j3d.loaders.lw3d.Lw3dLoader;

/**
 * Singleton managing 3D models cache.
 * This manager supports 3D models with an OBJ, DAE, 3DS or LWS format by default.
 * Additional classes implementing Java 3D <code>Loader</code> interface may be
 * specified in the <code>com.eteks.sweethome3d.j3d.additionalLoaderClasses</code>
 * (separated by a space or a colon :) to enable the support of other formats.<br>
 * Note: this class is compatible with Java 3D 1.3.
 *
 * @author Emmanuel Puybaret
 */
public class ModelManager {

    /**
     * Returns a transform that will transform the model <code>node</code>
     * to let it fill a box of the given <code>width</code> centered on the origin.
     *
     * @param node the root of a model with any size and location
     * @param modelRotation the rotation applied to the model before normalization
     *                 or <code>null</code> if no transformation should be applied to node.
     * @param width the width of the box
     */
    public Transform3D getNormalizedTransform(Node node, float[][] modelRotation, float width);
}

// ModelManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.EventQueue;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.awt.geom.PathIterator;
import java.awt.geom.Rectangle2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.media.j3d.Appearance;
import javax.media.j3d.BoundingBox;
import javax.media.j3d.Bounds;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.Geometry;
import javax.media.j3d.GeometryArray;
import javax.media.j3d.GeometryStripArray;
import javax.media.j3d.Group;
import javax.media.j3d.IndexedGeometryArray;
import javax.media.j3d.IndexedGeometryStripArray;
import javax.media.j3d.IndexedQuadArray;
import javax.media.j3d.IndexedTriangleArray;
import javax.media.j3d.IndexedTriangleFanArray;
import javax.media.j3d.IndexedTriangleStripArray;
import javax.media.j3d.Light;
import javax.media.j3d.Link;
import javax.media.j3d.Material;
import javax.media.j3d.Node;
import javax.media.j3d.QuadArray;
import javax.media.j3d.RenderingAttributes;
import javax.media.j3d.Shape3D;
import javax.media.j3d.SharedGroup;
import javax.media.j3d.Texture;
import javax.media.j3d.TextureAttributes;
import javax.media.j3d.Transform3D;
import javax.media.j3d.TransformGroup;
import javax.media.j3d.TransparencyAttributes;
import javax.media.j3d.TriangleArray;
import javax.media.j3d.TriangleFanArray;
import javax.media.j3d.TriangleStripArray;
import javax.vecmath.Color3f;
import javax.vecmath.Matrix3f;
import javax.vecmath.Point3d;
import javax.vecmath.Point3f;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;
import org.apache.batik.parser.AWTPathProducer;
import org.apache.batik.parser.ParseException;
import org.apache.batik.parser.PathParser;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import com.microcrowd.loader.java3d.max3ds.Loader3DS;
import com.sun.j3d.loaders.IncorrectFormatException;
import com.sun.j3d.loaders.Loader;
import com.sun.j3d.loaders.ParsingErrorException;
import com.sun.j3d.loaders.Scene;
import com.sun.j3d.loaders.lw3d.Lw3dLoader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModelManager}.
* It contains ten unit test cases for the {@link ModelManager#getNormalizedTransform(Node, float[][], float)} method.
*/
class ModelManagerTest {
		
	@Test
	void testGetNormalizedTransform() {
		ModelManager modelManager = new ModelManager();
		float [][] modelRotation = null;
		float width = 1;
		
		// Test 1
		Node node = new BranchGroup();
		Transform3D transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
		
		// Test 2
		node = new TransformGroup();
		transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
		
		// Test 3
		node = new Group();
		transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
		
		// Test 4
		node = new Shape3D();
		transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
		
		// Test 5
		node = new Link();
		transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
		
		// Test 6
		node = new SharedGroup();
		transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
		
		// Test 7
		node = new Light();
		transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
		
		// Test 8
		node = new Appearance();
		transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
		
		// Test 9
		node = new Material();
		transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
		
		// Test 10
		node = new Texture();
		transform = modelManager.getNormalizedTransform(node, modelRotation, width);
		assertEquals(new Transform3D(), transform);
	}
}

// ModelManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.EventQueue;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.awt.geom.PathIterator;
import java.awt.geom.Rectangle2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
"
cmpl-6x1EkUVsF0fkfs9kJ0s0ZAuD7jb8t,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/ModelManager3.java,147.0239064693451,length,"// ModelManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.EventQueue;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.awt.geom.PathIterator;
import java.awt.geom.Rectangle2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.media.j3d.Appearance;
import javax.media.j3d.BoundingBox;
import javax.media.j3d.Bounds;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.Geometry;
import javax.media.j3d.GeometryArray;
import javax.media.j3d.GeometryStripArray;
import javax.media.j3d.Group;
import javax.media.j3d.IndexedGeometryArray;
import javax.media.j3d.IndexedGeometryStripArray;
import javax.media.j3d.IndexedQuadArray;
import javax.media.j3d.IndexedTriangleArray;
import javax.media.j3d.IndexedTriangleFanArray;
import javax.media.j3d.IndexedTriangleStripArray;
import javax.media.j3d.Light;
import javax.media.j3d.Link;
import javax.media.j3d.Material;
import javax.media.j3d.Node;
import javax.media.j3d.QuadArray;
import javax.media.j3d.RenderingAttributes;
import javax.media.j3d.Shape3D;
import javax.media.j3d.SharedGroup;
import javax.media.j3d.Texture;
import javax.media.j3d.TextureAttributes;
import javax.media.j3d.Transform3D;
import javax.media.j3d.TransformGroup;
import javax.media.j3d.TransparencyAttributes;
import javax.media.j3d.TriangleArray;
import javax.media.j3d.TriangleFanArray;
import javax.media.j3d.TriangleStripArray;
import javax.vecmath.Color3f;
import javax.vecmath.Matrix3f;
import javax.vecmath.Point3d;
import javax.vecmath.Point3f;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;
import org.apache.batik.parser.AWTPathProducer;
import org.apache.batik.parser.ParseException;
import org.apache.batik.parser.PathParser;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import com.microcrowd.loader.java3d.max3ds.Loader3DS;
import com.sun.j3d.loaders.IncorrectFormatException;
import com.sun.j3d.loaders.Loader;
import com.sun.j3d.loaders.ParsingErrorException;
import com.sun.j3d.loaders.Scene;
import com.sun.j3d.loaders.lw3d.Lw3dLoader;

/**
 * Singleton managing 3D models cache.
 * This manager supports 3D models with an OBJ, DAE, 3DS or LWS format by default.
 * Additional classes implementing Java 3D <code>Loader</code> interface may be
 * specified in the <code>com.eteks.sweethome3d.j3d.additionalLoaderClasses</code>
 * (separated by a space or a colon :) to enable the support of other formats.<br>
 * Note: this class is compatible with Java 3D 1.3.
 *
 * @author Emmanuel Puybaret
 */
public class ModelManager {

    /**
     * Returns the node loaded synchronously from <code>content</code> with supported loaders.
     * This method is threadsafe and may be called from any thread.
     *
     * @param content an object containing a model
     */
    public BranchGroup loadModel(Content content) throws IOException;
}
","// ModelManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.EventQueue;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.awt.geom.PathIterator;
import java.awt.geom.Rectangle2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.media.j3d.Appearance;
import javax.media.j3d.BoundingBox;
import javax.media.j3d.Bounds;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.Geometry;
import javax.media.j3d.GeometryArray;
import javax.media.j3d.GeometryStripArray;
import javax.media.j3d.Group;
import javax.media.j3d.IndexedGeometryArray;
import javax.media.j3d.IndexedGeometryStripArray;
import javax.media.j3d.IndexedQuadArray;
import javax.media.j3d.IndexedTriangleArray;
import javax.media.j3d.IndexedTriangleFanArray;
import javax.media.j3d.IndexedTriangleStripArray;
import javax.media.j3d.Light;
import javax.media.j3d.Link;
import javax.media.j3d.Material;
import javax.media.j3d.Node;
import javax.media.j3d.QuadArray;
import javax.media.j3d.RenderingAttributes;
import javax.media.j3d.Shape3D;
import javax.media.j3d.SharedGroup;
import javax.media.j3d.Texture;
import javax.media.j3d.TextureAttributes;
import javax.media.j3d.Transform3D;
import javax.media.j3d.TransformGroup;
import javax.media.j3d.TransparencyAttributes;
import javax.media.j3d.TriangleArray;
import javax.media.j3d.TriangleFanArray;
import javax.media.j3d.TriangleStripArray;
import javax.vecmath.Color3f;
import javax.vecmath.Matrix3f;
import javax.vecmath.Point3d;
import javax.vecmath.Point3f;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;
import org.apache.batik.parser.AWTPathProducer;
import org.apache.batik.parser.ParseException;
import org.apache.batik.parser.PathParser;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import com.microcrowd.loader.java3d.max3ds.Loader3DS;
import com.sun.j3d.loaders.IncorrectFormatException;
import com.sun.j3d.loaders.Loader;
import com.sun.j3d.loaders.ParsingErrorException;
import com.sun.j3d.loaders.Scene;
import com.sun.j3d.loaders.lw3d.Lw3dLoader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModelManager}.
* It contains ten unit test cases for the {@link ModelManager#loadModel(Content)} method.
*/
class ModelManagerTest {","// ModelManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.EventQueue;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.GeneralPath;
import java.awt.geom.PathIterator;
import java.awt.geom.Rectangle2D;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.media.j3d.Appearance;
import javax.media.j3d.BoundingBox;
import javax.media.j3d.Bounds;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.Geometry;
import javax.media.j3d.GeometryArray;
import javax.media.j3d.GeometryStripArray;
import javax.media.j3d.Group;
import javax.media.j3d.IndexedGeometryArray;
import javax.media.j3d.IndexedGeometryStripArray;
import javax.media.j3d.IndexedQuadArray;
import javax.media.j3d.IndexedTriangleArray;
import javax.media.j3d.IndexedTriangleFanArray;
import javax.media.j3d.IndexedTriangleStripArray;
import javax.media.j3d.Light;
import javax.media.j3d.Link;
import javax.media.j3d.Material;
import javax.media.j3d.Node;
import javax.media.j3d.QuadArray;
import javax.media.j3d.RenderingAttributes;
import javax.media.j3d.Shape3D;
import javax.media.j3d.SharedGroup;
import javax.media.j3d.Texture;
import javax.media.j3d.TextureAttributes;
import javax.media.j3d.Transform3D;
import javax.media.j3d.TransformGroup;
import javax.media.j3d.TransparencyAttributes;
import javax.media.j3d.TriangleArray;
import javax.media.j3d.TriangleFanArray;
import javax.media.j3d.TriangleStripArray;
import javax.vecmath.Color3f;
import javax.vecmath.Matrix3f;
import javax.vecmath.Point3d;
import javax.vecmath.Point3f;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;
import org.apache.batik.parser.AWTPathProducer;
import org.apache.batik.parser.ParseException;
import org.apache.batik.parser.PathParser;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import com.microcrowd.loader.java3d.max3ds.Loader3DS;
import com.sun.j3d.loaders.IncorrectFormatException;
import com.sun.j3d.loaders.Loader;
import com.sun.j3d.loaders.ParsingErrorException;
import com.sun.j3d.loaders.Scene;
import com.sun.j3d.loaders.lw3d.Lw3dLoader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModelManager}.
* It contains ten unit test cases for the {@link ModelManager#loadModel(Content)} method.
*/
class ModelManagerTest {

	@Test
	void testLoadModel() throws IOException {
		ModelManager modelManager = new ModelManager();
		BranchGroup model = modelManager.loadModel(new URLContent(getClass().getResource(""resources/test.obj"")));
		assertNotNull(model);
		assertEquals(1, model.numChildren());
		assertTrue(model.getChild(0) instanceof Shape3D);
		Shape3D shape = (Shape3D)model.getChild(0);
		assertEquals(1, shape.numGeometries());
		assertTrue(shape.getGeometry(0) instanceof TriangleArray);
		TriangleArray geometry = (TriangleArray)shape.getGeometry(0);
		assertEquals(3, geometry.getVertexCount());
		assertEquals(3, geometry.getValidVertexCount());
		assertEquals(3, geometry.getCoordinatesSize());
		assertEquals(3, geometry.getVertexFormat());
		assertEquals(0, geometry.getInitialCoordIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals(0, geometry.getInitialColorIndex());
		assertEquals(0, geometry.getInitialNormalIndex());
		assertEquals(0, geometry.getInitialTexCoordIndex());
		assertEquals(0, geometry.getInitialVertexIndex());
		assertEquals(0, geometry.getInitialIndexIndex());
		assertEquals"
cmpl-6x1H71VlncTzyOsEPSYJ6REfMXWuK,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/j3d/TextureManager.java,121.92818307876587,length,"// TextureManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.media.j3d.ImageComponent;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.Texture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.URLContent;
import com.sun.j3d.utils.image.TextureLoader;

/**
 * Singleton managing texture image cache.
 *
 * @author Emmanuel Puybaret
 */
public class TextureManager {

    /**
     * Returns an instance of this singleton.
     */
    public static TextureManager getInstance();
}
","// TextureManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.media.j3d.ImageComponent;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.Texture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.URLContent;
import com.sun.j3d.utils.image.TextureLoader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TextureManager}.
* It contains ten unit test cases for the {@link TextureManager#getInstance()} method.
*/
class TextureManagerTest {","// TextureManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.media.j3d.ImageComponent;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.Texture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.URLContent;
import com.sun.j3d.utils.image.TextureLoader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TextureManager}.
* It contains ten unit test cases for the {@link TextureManager#getInstance()} method.
*/
class TextureManagerTest {

		@Test
		public void testGetInstance() {
				TextureManager textureManager = TextureManager.getInstance();
				assertNotNull(textureManager);
		}
}

// TextureManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.media.j3d.ImageComponent;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.Texture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.URLContent;
import com.sun.j3d.utils.image.TextureLoader;

/**
 * Singleton managing texture image cache.
 *
 * @author Emmanuel Puybaret
 */
public class TextureManager {

    /**
     * Returns an instance of this singleton.
     */
    public static TextureManager getInstance();
}

// TextureManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.media.j3d.ImageComponent;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.Texture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.URLContent;
import com.sun.j3d.utils.image.TextureLoader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TextureManager}.
* It contains ten unit test cases for the {@link TextureManager#getInstance()} method.
*/
class TextureManagerTest {
		
		@Test
		public void testGetInstance() {
				TextureManager textureManager = TextureManager.getInstance();
				assertNotNull(textureManager);
		}
}

// TextureManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.media.j3d.ImageComponent;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.Texture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.URLContent;
import com.sun.j3d.utils.image.TextureLoader;

/**
 * Singleton managing texture image cache.
 *
 * @author Emmanuel Puybaret
 */
public class TextureManager {

    /**
     * Returns an instance of this singleton.
     */
    public static TextureManager getInstance();
}

// TextureManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.media.j3d.ImageComponent;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.Texture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.URLContent;
import com.sun.j3d.utils.image.TextureLoader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TextureManager}.
* It contains ten unit test cases for the {@link TextureManager#getInstance()} method.
*/
class TextureManagerTest {
		
		@Test
		public void testGetInstance() {
				TextureManager textureManager = TextureManager.getInstance();
				assertNotNull(textureManager);
		}
}

// TextureManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.media.j3d.ImageComponent;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.Texture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.URLContent;
import com.sun.j3d.utils.image.TextureLoader;

/**
 * Singleton managing texture image cache.
 *
 * @author Emmanuel Puybaret
 */
public class TextureManager {

    /**
     * Returns an instance of this singleton.
     */
    public static TextureManager getInstance();
}

// TextureManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.media.j3d.ImageComponent;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.Texture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.URLContent;
import com.sun.j3d.utils.image.TextureLoader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TextureManager}.
* It contains ten unit test cases for the {@link TextureManager#getInstance()} method.
*/
class TextureManagerTest {
		
		@Test
		public void testGetInstance() {
				TextureManager textureManager = TextureManager.getInstance();
				assertNotNull(textureManager);
		}
}

// TextureManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.media.j3d.ImageComponent;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.Texture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.URLContent;
import com.sun.j3d.utils.image.TextureLoader;

/**
 * Singleton managing texture image cache.
 *
 * @author Emmanuel Puybaret
 */
public class TextureManager {

    /**
     * Returns an instance of this singleton.
     */
    public static TextureManager getInstance();
}

// TextureManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.media.j3d.ImageComponent;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.Texture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.URLContent;
import com.sun.j3d.utils.image.TextureLoader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TextureManager}.
* It contains ten unit test cases for the {@link TextureManager#getInstance()} method.
*/
class TextureManagerTest {
		
		@Test
		public void testGetInstance() {
				TextureManager textureManager = TextureManager.getInstance();
				assertNotNull(textureManager);
		}
}

// TextureManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.media.j3d.ImageComponent;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.Texture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.URLContent;
import com.sun.j3d.utils.image.TextureLoader;

/**
 * Singleton managing texture image cache.
 *
 * @author Emmanuel Puybaret
 */
public class TextureManager {

    /**
     * Returns an instance of this singleton.
     */
    public static TextureManager getInstance();
}

// TextureManagerTest.java
package com.eteks.sweethome3d.j3d;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.media.j3d.ImageComponent;
import javax.media.j3d.ImageComponent2D;
import javax.media.j3d.Texture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.URLContent;
import com.sun.j3d.utils.image.TextureLoader;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TextureManager}.
* It contains ten unit test cases for the {@link TextureManager#getInstance()} method.
*/
class TextureManagerTest {
		
		@Test
		public void testGetInstance() {
				TextureManager textureManager = TextureManager.getInstance();
				assertNotNull(textureManager);
		}
}

// TextureManager.java
package com.eteks.sweethome3d.j3d;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics"
672f4b17-5dc9-4f3d-89e1-8d78277f7819,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane0.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8381 tokens (4381 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// HomePane.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;

/**
 * The MVC view that edits a home.
 *
 * @author Emmanuel Puybaret
 */
public class HomePane extends JRootPane implements HomeView {

    /**
     * Displays a content chooser open dialog to choose the name of a home.
     */
    public String showOpenDialog();
}
","// HomePaneTest.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HomePane}.
* It contains ten unit test cases for the {@link HomePane#showOpenDialog()} method.
*/
class HomePaneTest {","// HomePaneTest.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HomePane}.
* It contains ten unit test cases for the {@link HomePane#showOpenDialog()} method.
*/
class HomePaneTest {
"
17d65b23-a6d6-460d-a630-83e636b7fca8,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane1.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8383 tokens (4383 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// HomePane.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;

/**
 * The MVC view that edits a home.
 *
 * @author Emmanuel Puybaret
 */
public class HomePane extends JRootPane implements HomeView {

    /**
     * Displays a content chooser open dialog to choose a language library.
     */
    public String showImportLanguageLibraryDialog();
}
","// HomePaneTest.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HomePane}.
* It contains ten unit test cases for the {@link HomePane#showImportLanguageLibraryDialog()} method.
*/
class HomePaneTest {","// HomePaneTest.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HomePane}.
* It contains ten unit test cases for the {@link HomePane#showImportLanguageLibraryDialog()} method.
*/
class HomePaneTest {
"
d45558a1-289c-40cb-9578-7e944a5ac9fa,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane2.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8387 tokens (4387 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// HomePane.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;

/**
 * The MVC view that edits a home.
 *
 * @author Emmanuel Puybaret
 */
public class HomePane extends JRootPane implements HomeView {

    /**
     * Displays a content chooser open dialog to choose a furniture library.
     */
    public String showImportFurnitureLibraryDialog();
}
","// HomePaneTest.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HomePane}.
* It contains ten unit test cases for the {@link HomePane#showImportFurnitureLibraryDialog()} method.
*/
class HomePaneTest {","// HomePaneTest.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HomePane}.
* It contains ten unit test cases for the {@link HomePane#showImportFurnitureLibraryDialog()} method.
*/
class HomePaneTest {
"
5c3b52de-be15-4c45-b1b6-dacaf74dc627,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane3.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8383 tokens (4383 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// HomePane.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;

/**
 * The MVC view that edits a home.
 *
 * @author Emmanuel Puybaret
 */
public class HomePane extends JRootPane implements HomeView {

    /**
     * Displays a content chooser open dialog to choose a textures library.
     */
    public String showImportTexturesLibraryDialog();
}
","// HomePaneTest.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HomePane}.
* It contains ten unit test cases for the {@link HomePane#showImportTexturesLibraryDialog()} method.
*/
class HomePaneTest {","// HomePaneTest.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HomePane}.
* It contains ten unit test cases for the {@link HomePane#showImportTexturesLibraryDialog()} method.
*/
class HomePaneTest {
"
0be19632-c619-473c-836e-154429b591ab,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane4.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8405 tokens (4405 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// HomePane.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;

/**
 * The MVC view that edits a home.
 *
 * @author Emmanuel Puybaret
 */
public class HomePane extends JRootPane implements HomeView {

    /**
     * Displays a dialog that let user choose whether he wants to exit
     * application or not.
     *
     * @return <code>true</code> if user confirmed to exit.
     */
    public boolean confirmExit();
}
","// HomePaneTest.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HomePane}.
* It contains ten unit test cases for the {@link HomePane#confirmExit()} method.
*/
class HomePaneTest {","// HomePaneTest.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HomePane}.
* It contains ten unit test cases for the {@link HomePane#confirmExit()} method.
*/
class HomePaneTest {
"
6f850b98-000a-40e3-b1a5-b174cb43294d,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane5.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8478 tokens (4478 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// HomePane.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;

/**
 * The MVC view that edits a home.
 *
 * @author Emmanuel Puybaret
 */
public class HomePane extends JRootPane implements HomeView {

    /**
     * Shows a print dialog to print the home displayed by this pane.
     *
     * @return a print task to execute or <code>null</code> if the user canceled print.
     *    The <code>call</code> method of the returned task may throw a
     *    {@link RecorderException RecorderException} exception if print failed
     *    or an {@link InterruptedRecorderException InterruptedRecorderException}
     *    exception if it was interrupted.
     */
    public Callable<Void> showPrintDialog();
}
","// HomePaneTest.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HomePane}.
* It contains ten unit test cases for the {@link HomePane#showPrintDialog()} method.
*/
class HomePaneTest {","// HomePaneTest.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HomePane}.
* It contains ten unit test cases for the {@link HomePane#showPrintDialog()} method.
*/
class HomePaneTest {
"
5848b20e-c67a-43cb-bf49-00969faf14f7,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/HomePane6.java,-1,"ERROR - This model's maximum context length is 8001 tokens, however you requested 8415 tokens (4415 in your prompt; 4000 for the completion). Please reduce your prompt; or completion length.","// HomePane.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;

/**
 * The MVC view that edits a home.
 *
 * @author Emmanuel Puybaret
 */
public class HomePane extends JRootPane implements HomeView {

    /**
     * Displays a dialog that let user choose whether he wants to delete
     * the selected furniture from catalog or not.
     *
     * @return <code>true</code> if user confirmed to delete.
     */
    public boolean confirmDeleteCatalogSelection();
}
","// HomePaneTest.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HomePane}.
* It contains ten unit test cases for the {@link HomePane#confirmDeleteCatalogSelection()} method.
*/
class HomePaneTest {","// HomePaneTest.java
package com.eteks.sweethome3d.swing;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.FocusTraversalPolicy;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Window;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.LayoutFocusTraversalPolicy;
import javax.swing.Scrollable;
import javax.swing.SwingUtilities;
import javax.swing.ToolTipManager;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.SwingPropertyChangeSupport;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.j3d.Ground3D;
import com.eteks.sweethome3d.j3d.HomePieceOfFurniture3D;
import com.eteks.sweethome3d.j3d.OBJWriter;
import com.eteks.sweethome3d.j3d.Room3D;
import com.eteks.sweethome3d.j3d.Wall3D;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Elevatable;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.InterruptedRecorderException;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.RecorderException;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionEvent;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.plugin.HomePluginController;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.ContentManager;
import com.eteks.sweethome3d.viewcontroller.FurnitureController;
import com.eteks.sweethome3d.viewcontroller.HomeController;
import com.eteks.sweethome3d.viewcontroller.HomeController3D;
import com.eteks.sweethome3d.viewcontroller.HomeView;
import com.eteks.sweethome3d.viewcontroller.PlanController;
import com.eteks.sweethome3d.viewcontroller.PlanController.Mode;
import com.eteks.sweethome3d.viewcontroller.PlanView;
import com.eteks.sweethome3d.viewcontroller.View;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HomePane}.
* It contains ten unit test cases for the {@link HomePane#confirmDeleteCatalogSelection()} method.
*/
class HomePaneTest {
"
cmpl-6x1PtQbiO6gfoq7Hm3eKtV6aeEaFE,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/IconManager0.java,172.84828233718872,length,"// IconManager.java
package com.eteks.sweethome3d.swing;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.ResourceURLContent;

/**
 * Singleton managing icons cache.
 *
 * @author Emmanuel Puybaret
 */
public class IconManager {

    /**
     * Returns an instance of this singleton.
     */
    public static IconManager getInstance();
}
","// IconManagerTest.java
package com.eteks.sweethome3d.swing;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IconManager}.
* It contains ten unit test cases for the {@link IconManager#getInstance()} method.
*/
class IconManagerTest {","// IconManagerTest.java
package com.eteks.sweethome3d.swing;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IconManager}.
* It contains ten unit test cases for the {@link IconManager#getInstance()} method.
*/
class IconManagerTest {

		/**
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case 1 for method {@link IconManager#getInstance()}.
		* Test case"
cmpl-6x1SfNaaBsup60U54MZpglAm17oMa,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/IconManager1.java,146.7037603855133,length,"// IconManager.java
package com.eteks.sweethome3d.swing;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.ResourceURLContent;

/**
 * Singleton managing icons cache.
 *
 * @author Emmanuel Puybaret
 */
public class IconManager {

    /**
     * Returns an icon read from <code>content</code>.
     *
     * @param content an object containing an image
     * @param waitingComponent a waiting component. If <code>null</code>, the returned icon will
     *            be read immediately in the current thread.
     */
    public Icon getIcon(Content content, Component waitingComponent);
}
","// IconManagerTest.java
package com.eteks.sweethome3d.swing;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IconManager}.
* It contains ten unit test cases for the {@link IconManager#getIcon(Content, Component)} method.
*/
class IconManagerTest {","// IconManagerTest.java
package com.eteks.sweethome3d.swing;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IconManager}.
* It contains ten unit test cases for the {@link IconManager#getIcon(Content, Component)} method.
*/
class IconManagerTest {

		/**
		* Test case 1:
		* This test case checks if the method returns an icon read from <code>content</code>.
		*
		* @throws IOException
		*/
		@Test
		public void testGetIcon() throws IOException {
				// Create a new IconManager
				IconManager iconManager = new IconManager();
				// Create a new Content
				Content content = new ResourceURLContent(getClass().getResource(""/com/eteks/sweethome3d/swing/resources/about.png""));
				// Create a new Component
				Component waitingComponent = new Component() {
						@Override
						public void paint(Graphics g) {
								super.paint(g);
						}
				};
				// Call the method
				Icon icon = iconManager.getIcon(content, waitingComponent);
				// Check if the method returns an icon read from <code>content</code>
				assertEquals(icon.getIconHeight(), 64);
				assertEquals(icon.getIconWidth(), 64);
		}
}

// IconManager.java
package com.eteks.sweethome3d.swing;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.ResourceURLContent;

/**
 * Singleton managing icons cache.
 *
 * @author Emmanuel Puybaret
 */
public class IconManager {

    /**
     * Returns an icon read from <code>content</code>.
     *
     * @param content an object containing an image
     * @param waitingComponent a waiting component. If <code>null</code>, the returned icon will
     *            be read immediately in the current thread.
     */
    public Icon getIcon(Content content, Component waitingComponent);
}

// IconManagerTest.java
package com.eteks.sweethome3d.swing;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IconManager}.
* It contains ten unit test cases for the {@link IconManager#getIcon(Content, Component)} method.
*/
class IconManagerTest {
		
		/**
		* Test case 1:
		* This test case checks if the method returns an icon read from <code>content</code>.
		*
		* @throws IOException
		*/
		@Test
		public void testGetIcon() throws IOException {
				// Create a new IconManager
				IconManager iconManager = new IconManager();
				// Create a new Content
				Content content = new ResourceURLContent(getClass().getResource(""/com/eteks/sweethome3d/swing/resources/about.png""));
				// Create a new Component
				Component waitingComponent = new Component() {
						@Override
						public void paint(Graphics g) {
								super.paint(g);
						}
				};
				// Call the method
				Icon icon = iconManager.getIcon(content, waitingComponent);
				// Check if the method returns an icon read from <code>content</code>
				assertEquals(icon.getIconHeight(), 64);
				assertEquals(icon.getIconWidth(), 64);
		}
}

// IconManager.java
package com.eteks.sweethome3d.swing;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.ResourceURLContent;

/**
 * Singleton managing icons cache.
 *
 * @author Emmanuel Puybaret
 */
public class IconManager {

    /**
     * Returns an icon read from <code>content</code>.
     *
     * @param content an object containing an image
     * @param waitingComponent a waiting component. If <code>null</code>, the returned icon will
     *            be read immediately in the current thread.
     */
    public Icon getIcon(Content content, Component waitingComponent);
}

// IconManagerTest.java
package com.eteks.sweethome3d.swing;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IconManager}.
* It contains ten unit test cases for the {@link IconManager#getIcon(Content, Component)} method.
*/
class IconManagerTest {
		
		/**
		* Test case 1:
		* This test case checks if the method returns an icon read from <code>content</code>.
		*
		* @throws IOException
		*/
		@Test
		public void testGetIcon() throws IOException {
				// Create a new IconManager
				IconManager iconManager = new IconManager();
				// Create a new Content
				Content content = new ResourceURLContent(getClass().getResource(""/com/eteks/sweethome3d/swing/resources/about.png""));
				// Create a new Component
				Component waitingComponent = new Component() {
						@Override
						public void paint(Graphics g) {
								super.paint(g);
						}
				};
				// Call the method
				Icon icon = iconManager.getIcon(content, waitingComponent);
				// Check if the method returns an icon read from <code>content</code>
				assertEquals(icon.getIconHeight(), 64);
				assertEquals(icon.getIconWidth(), 64);
		}
}

// IconManager.java
package com.eteks.sweethome3d.swing;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.ResourceURLContent;

/**
 * Singleton managing icons cache.
 *
 * @author Emmanuel Puybaret
 */
public class IconManager {

    /**
     * Returns an icon read from <code>content</code>.
     *
     * @param content an object containing an image
     * @param waitingComponent a waiting component. If <code>null</code>, the returned icon will
     *            be read immediately in the current thread.
     */
    public Icon getIcon(Content content, Component waitingComponent);
}

// IconManagerTest.java
package com.eteks.sweethome3d.swing;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IconManager}.
* It contains ten unit test cases for the {@link IconManager#getIcon(Content, Component)} method.
*/
class IconManagerTest {
		
		/**
		* Test case 1:
		* This test case checks if the method returns an icon read from <code>content</code>.
		*
		* @throws IOException
		*/
		@Test
		public void testGetIcon() throws IOException {
				// Create a new IconManager
				IconManager iconManager = new IconManager();
				// Create a new Content
				Content content = new ResourceURLContent(getClass().getResource(""/com/eteks/sweethome3d/swing/resources/about.png""));
				// Create a new Component
				Component waitingComponent = new Component() {
						@Override
						public void paint(Graphics g) {
								super.paint(g);
						}
				};
				// Call the method
				Icon icon = iconManager.getIcon(content, waitingComponent);
				// Check if the method returns an icon read from <code>content</code>
				assertEquals(icon.getIconHeight(), 64);
				assertEquals(icon.getIconWidth(), 64);
		}
}

// IconManager.java
package com.eteks.sweethome3d.swing;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.ResourceURLContent;

/**
 * Singleton managing icons cache.
 *
 * @author Emmanuel Puybaret
 */
public class IconManager {

    /**
     * Returns an icon read from <code>content</code>.
     *
     * @param content an object containing an image
     * @param waitingComponent a waiting component. If <code>null</code>, the returned icon will
     *            be read immediately in the current thread.
     */
    public Icon getIcon(Content content, Component waitingComponent);
}

// IconManagerTest.java
package com.eteks.sweethome3d.swing;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IconManager}.
* It contains ten unit test cases for the {@link IconManager#getIcon(Content, Component)} method.
*/
class IconManagerTest {
		
		/**
		* Test case 1:
		* This test case checks if the method returns an icon read from <code>content</code>.
		*
		* @throws IOException
		*/
		@Test
		public void testGetIcon() throws IOException {
				// Create a new IconManager
				IconManager iconManager = new IconManager();
				// Create a new Content
				Content content = new ResourceURLContent(getClass().getResource(""/com/eteks/sweethome3d/swing/resources/about.png""));
				// Create a new Component
				Component waitingComponent = new Component() {
						@Override
						public void paint(Graphics g) {
								super.paint(g);
						}
				};
				// Call the method
				Icon icon = iconManager.getIcon(content, waitingComponent);
				// Check if the method"
cmpl-6x1V2myl17Ii0Ylkx2K4OiFa2jBEj,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/IconManager2.java,103.34381365776062,,"// IconManager.java
package com.eteks.sweethome3d.swing;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.ResourceURLContent;

/**
 * Singleton managing icons cache.
 *
 * @author Emmanuel Puybaret
 */
public class IconManager {

    /**
     * Returns an icon read from <code>content</code> and rescaled at a given <code>height</code>.
     *
     * @param content an object containing an image
     * @param height the desired height of the returned icon
     * @param waitingComponent a waiting component. If <code>null</code>, the returned icon will
     *            be read immediately in the current thread.
     */
    public Icon getIcon(Content content, final int height, Component waitingComponent);
}
","// IconManagerTest.java
package com.eteks.sweethome3d.swing;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IconManager}.
* It contains ten unit test cases for the {@link IconManager#getIcon(Content, int, Component)} method.
*/
class IconManagerTest {","// IconManagerTest.java
package com.eteks.sweethome3d.swing;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.WeakHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IconManager}.
* It contains ten unit test cases for the {@link IconManager#getIcon(Content, int, Component)} method.
*/
class IconManagerTest {

		/**
		* Test case 1:
		* The method {@link IconManager#getIcon(Content, int, Component)} is tested with the following inputs:
		* <ul>
		* 	<li><code>content</code>: a {@link Content} object</li>
		* 	<li><code>height</code>: a positive integer</li>
		* 	<li><code>waitingComponent</code>: a {@link Component} object</li>
		* </ul>
		*
		* <p>Expected result:
		* <ul>
		* 	<li>an {@link Icon} object is returned</li>
		* </ul>
		* </p>
		*
		* @throws IOException
		*/
		@Test
		void testGetIcon_1() throws IOException {
				Content content = new ResourceURLContent(IconManagerTest.class.getResource(""/com/eteks/sweethome3d/swing/resources/about.png""));
				int height = 1;
				Component waitingComponent = new Component() {};
				IconManager iconManager = new IconManager();
				Icon result = iconManager.getIcon(content, height, waitingComponent);
				assertNotNull(result);
		}
		
		/**
		* Test case 2:
		* The method {@link IconManager#getIcon(Content, int, Component)} is tested with the following inputs:
		* <ul>
		* 	<li><code>content</code>: a {@link Content} object</li>
		* 	<li><code>height</code>: a positive integer</li>
		* 	<li><code>waitingComponent</code>: a {@link Component} object</li>
		* </ul>
		*
		* <p>Expected result:
		* <ul>
		* 	<li>an {@link Icon} object is returned</li>
		* </ul>
		* </p>
		*
		* @throws IOException
		*/
		@Test
		void testGetIcon_2() throws IOException {
				Content content = new ResourceURLContent(IconManagerTest.class.getResource(""/com/eteks/sweethome3d/swing/resources/about.png""));
				int height = 1;
				Component waitingComponent = new Component() {};
				IconManager iconManager = new IconManager();
				Icon result = iconManager.getIcon(content, height, waitingComponent);
				assertNotNull(result);
		}
		
		/**
		* Test case 3:
		* The method {@link IconManager#getIcon(Content, int, Component)} is tested with the following inputs:
		* <ul>
		* 	<li><code>content</code>: a {@link Content} object</li>
		* 	<li><code>height</code>: a positive integer</li>
		* 	<li><code>waitingComponent</code>: a {@link Component} object</li>
		* </ul>
		*
		* <p>Expected result:
		* <ul>
		* 	<li>an {@link Icon} object is returned</li>
		* </ul>
		* </p>
		*
		* @throws IOException
		*/
		@Test
		void testGetIcon_3() throws IOException {
				Content content = new ResourceURLContent(IconManagerTest.class.getResource(""/com/eteks/sweethome3d/swing/resources/about.png""));
				int height = 1;
				Component waitingComponent = new Component() {};
				IconManager iconManager = new IconManager();
				Icon result = iconManager.getIcon(content, height, waitingComponent);
				assertNotNull(result);
		}
		
		/**
		* Test case 4:
		* The method {@link IconManager#getIcon(Content, int, Component)} is tested with the following inputs:
		* <ul>
		* 	<li><code>content</code>: a {@link Content} object</li>
		* 	<li><code>height</code>: a positive integer</li>
		* 	<li><code>waitingComponent</code>: a {@link Component} object</li>
		* </ul>
		*
		* <p>Expected result:
		* <ul>
		* 	<li>an {@link Icon} object is returned</li>
		* </ul>
		* </p>
		*
		* @throws IOException
		*/
		@Test
		void testGetIcon_4() throws IOException {
				Content content = new ResourceURLContent(IconManagerTest.class.getResource(""/com/eteks/sweethome3d/swing/resources/about.png""));
				int height = 1;
				Component waitingComponent = new Component() {};
				IconManager iconManager = new IconManager();
				Icon result = iconManager.getIcon(content, height, waitingComponent);
				assertNotNull(result);
		}
		
		/**
		* Test case 5:
		* The method {@link IconManager#getIcon(Content, int, Component)} is tested with the following inputs:
		* <ul>
		* 	<li><code>content</code>: a {@link Content} object</li>
		* 	<li><code>height</code>: a positive integer</li>
		* 	<li><code>waitingComponent</code>: a {@link Component} object</li>
		* </ul>
		*
		* <p>Expected result:
		* <ul>
		* 	<li>an {@link Icon} object is returned</li>
		* </ul>
		* </p>
		*
		* @throws IOException
		*/
		@Test
		void testGetIcon_5() throws IOException {
				Content content = new ResourceURLContent(IconManagerTest.class.getResource(""/com/eteks/sweethome3d/swing/resources/about.png""));
				int height = 1;
				Component waitingComponent = new Component() {};
				IconManager iconManager = new IconManager();
				Icon result = iconManager.getIcon(content, height, waitingComponent);
				assertNotNull(result);
		}
		
		/**
		* Test case 6:
		* The method {@link IconManager#getIcon(Content, int, Component)} is tested with the following inputs:
		* <ul>
		* 	<li><code>content</code>: a {@link Content} object</li>
		* 	<li><code>height</code>: a positive integer</li>
		* 	<li><code>waitingComponent</code>: a {@link Component} object</li>
		* </ul>
		*
		* <p>Expected result:
		* <ul>
		* 	<li>an {@link Icon} object is returned</li>
		* </ul>
		* </p>
		*
		* @throws IOException
		*/
		@Test
		void testGetIcon_6() throws IOException {
				Content content = new ResourceURLContent(IconManagerTest.class.getResource(""/com/eteks/sweethome3d/swing/resources/about.png""));
				int height = 1;
				Component waitingComponent = new Component() {};
				IconManager iconManager = new IconManager();
				Icon result = iconManager.getIcon(content, height, waitingComponent);
				assertNotNull(result);
		}
		
		/**
		* Test case 7:
		* The method {@link IconManager#getIcon(Content, int, Component)} is tested with the following inputs:
		* <ul>
		* 	<li><code>content</code>: a {@link Content} object</li>
		* 	<li><code>height</code>: a positive integer</li>
		* 	<li><code>waitingComponent</code>: a {@link Component} object</li>
		* </ul>
		*
		* <p>Expected result:
		* <ul>
		* 	<li>an {@link Icon} object is returned</li>
		* </ul>
		* </p>
		*
		* @throws IOException
		*/
		@Test
		void testGetIcon_7() throws IOException {
				Content content = new ResourceURLContent(IconManagerTest.class.getResource(""/com/eteks/sweethome3d/swing/resources/about.png""));
				int height = 1;
				Component waitingComponent = new Component() {};
				IconManager iconManager = new IconManager();
				Icon result = iconManager.getIcon(content, height, waitingComponent);
				assertNotNull(result);
		}
		
		/**
		* Test case 8:
		* The method {@link IconManager#getIcon(Content, int, Component)} is tested with the following inputs:
		* <ul>
		* 	<li><code>content</code>: a {@link Content} object</li>
		* 	<li><code>height</code>: a positive integer</li>
		* 	<li><code>waitingComponent</code>: a {@link Component} object</li>
		* </ul>
		*
		* <p>Expected result:
		* <ul>
		* 	<li>an {@link Icon} object is returned</li>
		* </ul>
		* </p>
		*
		* @throws IOException
		*/
		@Test
		void testGetIcon_8() throws IOException {
				Content content = new ResourceURLContent(IconManagerTest.class.getResource(""/com/eteks/sweethome3d/swing/resources/about.png""));
				int height = 1;
				Component waitingComponent = new Component() {};
				IconManager iconManager = new IconManager();
				Icon result = iconManager.getIcon(content, height, waitingComponent);
				assertNotNull(result);
		}
		
		/**
		* Test case 9:
		* The method {@link IconManager#getIcon(Content, int, Component)} is tested with the following inputs:
		* <ul>
		* 	<li><code>content</code>: a {@link Content} object</li>
		* 	<li><code>height</code>: a positive integer</li>
		* 	<li><code>waitingComponent</code>: a {@link Component} object</li>
		* </ul>
		*
		* <p>Expected result:
		* <ul>
		* 	<li>an {@link Icon} object is returned</li>
		* </ul>
		* </p>
		*
		* @throws IOException
		*/
		@Test
		void testGetIcon_9() throws IOException {
				Content content = new ResourceURLContent(IconManagerTest.class.getResource(""/com/eteks/sweethome3d/swing/resources/about.png""));
				int height = 1;
				Component waitingComponent = new Component() {};
				IconManager iconManager = new IconManager();
				Icon result = iconManager.getIcon(content, height, waitingComponent);
				assertNotNull(result);
		}
		
		/**
		* Test case 10:
		* The method {@link IconManager#getIcon(Content, int, Component)} is tested with the following inputs:
		* <ul>
		* 	<li><code>content</code>: a {@link Content} object</li>
		* 	<li><code>height</code>: a positive integer</li>
		* 	<li><code>waitingComponent</code>: a {@link Component} object</li>
		* </ul>
		*
		* <p>Expected result:
		* <ul>
		* 	<li>an {@link Icon} object is returned</li>
		* </ul>
		* </p>
		*
		* @throws IOException
		*/
		@Test
		void testGetIcon_10() throws IOException {
				Content content = new ResourceURLContent(IconManagerTest.class.getResource(""/com/eteks/sweethome3d/swing/resources/about.png""));
				int height = 1;
				Component waitingComponent = new Component() {};
				IconManager iconManager = new IconManager();
				Icon result = iconManager.getIcon(content, height, waitingComponent);
				assertNotNull(result);
		}
}"
cmpl-6x1WpuhIB07o8UQusOxREIM0wErXV,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/SwingTools.java,149.91875672340393,length,"// SwingTools.java
package com.eteks.sweethome3d.swing;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Area;
import java.awt.image.BufferedImage;
import java.awt.image.FilteredImageSource;
import java.awt.image.RGBImageFilter;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.jnlp.BasicService;
import javax.jnlp.ServiceManager;
import javax.jnlp.UnavailableServiceException;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JToggleButton;
import javax.swing.JViewport;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;

/**
 * Gathers some useful tools for Swing.
 *
 * @author Emmanuel Puybaret
 */
public class SwingTools {

    /**
     * Returns the border of a component where a user may drop objects.
     */
    public static Border getDropableComponentBorder();
}
","// SwingToolsTest.java
package com.eteks.sweethome3d.swing;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Area;
import java.awt.image.BufferedImage;
import java.awt.image.FilteredImageSource;
import java.awt.image.RGBImageFilter;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.jnlp.BasicService;
import javax.jnlp.ServiceManager;
import javax.jnlp.UnavailableServiceException;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JToggleButton;
import javax.swing.JViewport;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SwingTools}.
* It contains ten unit test cases for the {@link SwingTools#getDropableComponentBorder()} method.
*/
class SwingToolsTest {","// SwingToolsTest.java
package com.eteks.sweethome3d.swing;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Area;
import java.awt.image.BufferedImage;
import java.awt.image.FilteredImageSource;
import java.awt.image.RGBImageFilter;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.jnlp.BasicService;
import javax.jnlp.ServiceManager;
import javax.jnlp.UnavailableServiceException;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JToggleButton;
import javax.swing.JViewport;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SwingTools}.
* It contains ten unit test cases for the {@link SwingTools#getDropableComponentBorder()} method.
*/
class SwingToolsTest {

		@Test
		void testGetDropableComponentBorder() {
				assertNotNull(SwingTools.getDropableComponentBorder());
		}
}

// SwingTools.java
package com.eteks.sweethome3d.swing;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Area;
import java.awt.image.BufferedImage;
import java.awt.image.FilteredImageSource;
import java.awt.image.RGBImageFilter;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.jnlp.BasicService;
import javax.jnlp.ServiceManager;
import javax.jnlp.UnavailableServiceException;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JToggleButton;
import javax.swing.JViewport;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;

/**
 * Gathers some useful tools for Swing.
 *
 * @author Emmanuel Puybaret
 */
public class SwingTools {

    /**
     * Returns the border of a component where a user may drop objects.
     */
    public static Border getDropableComponentBorder();
}

// SwingToolsTest.java
package com.eteks.sweethome3d.swing;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Area;
import java.awt.image.BufferedImage;
import java.awt.image.FilteredImageSource;
import java.awt.image.RGBImageFilter;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.jnlp.BasicService;
import javax.jnlp.ServiceManager;
import javax.jnlp.UnavailableServiceException;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JToggleButton;
import javax.swing.JViewport;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SwingTools}.
* It contains ten unit test cases for the {@link SwingTools#getDropableComponentBorder()} method.
*/
class SwingToolsTest {
		
		@Test
		void testGetDropableComponentBorder() {
				assertNotNull(SwingTools.getDropableComponentBorder());
		}
}

// SwingTools.java
package com.eteks.sweethome3d.swing;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Area;
import java.awt.image.BufferedImage;
import java.awt.image.FilteredImageSource;
import java.awt.image.RGBImageFilter;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.jnlp.BasicService;
import javax.jnlp.ServiceManager;
import javax.jnlp.UnavailableServiceException;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JToggleButton;
import javax.swing.JViewport;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;

/**
 * Gathers some useful tools for Swing.
 *
 * @author Emmanuel Puybaret
 */
public class SwingTools {

    /**
     * Returns the border of a component where a user may drop objects.
     */
    public static Border getDropableComponentBorder();
}

// SwingToolsTest.java
package com.eteks.sweethome3d.swing;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Area;
import java.awt.image.BufferedImage;
import java.awt.image.FilteredImageSource;
import java.awt.image.RGBImageFilter;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.jnlp.BasicService;
import javax.jnlp.ServiceManager;
import javax.jnlp.UnavailableServiceException;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JToggleButton;
import javax.swing.JViewport;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.text.JTextComponent;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SwingTools}.
* It contains ten unit test cases for the {@link SwingTools#getDropableComponentBorder()} method.
*/
class SwingToolsTest {
		
		@Test
		void testGetDropableComponentBorder() {
				assertNotNull(SwingTools.getDropableComponentBorder());
		}
}

// SwingTools.java
package com.eteks.sweethome3d.swing;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Area;
import java.awt.image.BufferedImage;
import java.awt.image.FilteredImageSource;
import java.awt.image.RGBImageFilter;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.jnlp.BasicService;
import javax.jnlp.ServiceManager;
import javax.jnlp.Un"
cmpl-6x1Z7XCKYletiOrMWh7S9bgZAr7jC,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/swing/TextureChoiceComponent.java,144.4709849357605,length,"// TextureChoiceComponent.java
package com.eteks.sweethome3d.swing;

import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import javax.swing.AbstractListModel;
import javax.swing.BorderFactory;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;
import javax.swing.border.EtchedBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.TextureChoiceController;
import com.eteks.sweethome3d.viewcontroller.TextureChoiceView;
import com.eteks.sweethome3d.viewcontroller.View;

/**
 * Button displaying a texture as an icon. When the user clicks
 * on this button a dialog appears to let him choose an other texture.
 */
public class TextureChoiceComponent extends JButton implements TextureChoiceView {

    /**
     * Displays a dialog that let user choose whether he wants to delete
     * the selected texture from catalog or not.
     *
     * @return <code>true</code> if user confirmed to delete.
     */
    public boolean confirmDeleteSelectedCatalogTexture();
}
","// TextureChoiceComponentTest.java
package com.eteks.sweethome3d.swing;

import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import javax.swing.AbstractListModel;
import javax.swing.BorderFactory;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;
import javax.swing.border.EtchedBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.TextureChoiceController;
import com.eteks.sweethome3d.viewcontroller.TextureChoiceView;
import com.eteks.sweethome3d.viewcontroller.View;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TextureChoiceComponent}.
* It contains ten unit test cases for the {@link TextureChoiceComponent#confirmDeleteSelectedCatalogTexture()} method.
*/
class TextureChoiceComponentTest {","// TextureChoiceComponentTest.java
package com.eteks.sweethome3d.swing;

import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import javax.swing.AbstractListModel;
import javax.swing.BorderFactory;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;
import javax.swing.border.EtchedBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.TextureChoiceController;
import com.eteks.sweethome3d.viewcontroller.TextureChoiceView;
import com.eteks.sweethome3d.viewcontroller.View;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TextureChoiceComponent}.
* It contains ten unit test cases for the {@link TextureChoiceComponent#confirmDeleteSelectedCatalogTexture()} method.
*/
class TextureChoiceComponentTest {

		@Test
		void testConfirmDeleteSelectedCatalogTexture() {
				// Test case 1
				// Inputs:
				// Outputs:
				// Expected result:
				assertEquals(true, true);
				// Test case 2
				// Inputs:
				// Outputs:
				// Expected result:
				assertEquals(true, true);
				// Test case 3
				// Inputs:
				// Outputs:
				// Expected result:
				assertEquals(true, true);
				// Test case 4
				// Inputs:
				// Outputs:
				// Expected result:
				assertEquals(true, true);
				// Test case 5
				// Inputs:
				// Outputs:
				// Expected result:
				assertEquals(true, true);
				// Test case 6
				// Inputs:
				// Outputs:
				// Expected result:
				assertEquals(true, true);
				// Test case 7
				// Inputs:
				// Outputs:
				// Expected result:
				assertEquals(true, true);
				// Test case 8
				// Inputs:
				// Outputs:
				// Expected result:
				assertEquals(true, true);
				// Test case 9
				// Inputs:
				// Outputs:
				// Expected result:
				assertEquals(true, true);
				// Test case 10
				// Inputs:
				// Outputs:
				// Expected result:
				assertEquals(true, true);
		}
}

// TextureChoiceController.java
package com.eteks.sweethome3d.viewcontroller;

import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import javax.swing.AbstractListModel;
import javax.swing.BorderFactory;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;
import javax.swing.border.EtchedBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.TextureChoiceController;
import com.eteks.sweethome3d.viewcontroller.TextureChoiceView;
import com.eteks.sweethome3d.viewcontroller.View;

/**
* A controller that manages a texture choice view.
*/
public class TextureChoiceController implements Controller {

    /**
     * The properties that may be edited by the view associated to this controller.
     */
    public enum Property {
        TEXTURE,
        DELETE_ACTION_ENABLED
    }

    /**
     * The possible values for <code>Property.TEXTURE</code> property.
     */
    public enum TextureType {
        DEFAULT,
        STORED,
        MODIFIED,
        ADD
    }

    private final TextureChoiceView textureChoiceView;

    private final UserPreferences preferences;

    private final TexturesCatalog texturesCatalog;

    private HomeTexture texture;

    private boolean deleteActionEnabled;

    /**
     * Creates the controller of texture choice view.
     * @param texture the texture displayed by the view managed by this controller
     * @param preferences user preferences
     * @param texturesCatalog the textures catalog of the application
     */
    public TextureChoiceController(HomeTexture texture, UserPreferences preferences, TexturesCatalog texturesCatalog) {
        this(texture, preferences, texturesCatalog, new TextureChoiceComponent(preferences, texturesCatalog));
    }

    /**
     * Creates the controller of texture choice view with undo support.
     */
    public TextureChoiceController(final HomeTexture texture, UserPreferences preferences, TexturesCatalog texturesCatalog, TextureChoiceView textureChoiceView) {
        this.texture = texture;
        this.preferences = preferences;
        this.texturesCatalog = texturesCatalog;
        this.textureChoiceView = textureChoiceView;
        this.deleteActionEnabled = true;
        updateView();
    }

    /**
     * Returns the view associated with this controller.
     */
    public TextureChoiceView getView() {
        return this.textureChoiceView;
    }

    /**
     * Displays this controller view in a modal dialog box.
     */
    public void displayView(View parentView) {
        getView().displayView(parentView);
    }

    /**
     * Updates the view managed by this controller.
     */
    protected void updateView() {
        if (this.texture != null) {
            getView().setTexture(this.texture);
        }
        getView().setDeleteActionEnabled(this.deleteActionEnabled);
    }

    /**
     * Sets the texture edited by this controller.
     */
    public void setTexture(HomeTexture texture) {
        if (texture != this.texture || texture != null && !texture.equals(this.texture)) {
            HomeTexture oldTexture = this.texture;
            this.texture = texture;
            updateView();
            firePropertyChange(Property.TEXTURE.name(), oldTexture, texture);
        }
    }

    /**
     * Returns the texture edited by this controller.
     */
    public HomeTexture getTexture() {
        return this.texture;
    }

    /**
     * Sets whether the delete action is enabled or not.
     */
    public void setDeleteActionEnabled(boolean deleteActionEnabled) {
        if (this.deleteActionEnabled != deleteActionEnabled) {
            this.deleteActionEnabled = deleteActionEnabled;
            updateView();
            firePropertyChange(Property.DELETE_ACTION_ENABLED.name(), !deleteActionEnabled, deleteActionEnabled);
        }
    }

    /**
     * Returns <code>true</code> if the delete action is enabled.
     */
    public boolean isDeleteActionEnabled() {
        return this.deleteActionEnabled;
    }

    /**
     * Controls new values of properties edited by this controller.
     */
    public void modifyProperty(Property property, Object value) {
        if (property == Property.TEXTURE) {
            setTexture((HomeTexture) value);
        } else if (property == Property.DELETE_ACTION_ENABLED) {
            setDeleteActionEnabled((Boolean) value);
        } else {
            throw new IllegalArgumentException(""Unknown property "" + property);
        }
    }
}

// TextureChoiceView.java
package com.eteks.sweethome3d.viewcontroller;

import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import javax.swing.AbstractListModel;
import javax.swing.BorderFactory;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;
import javax.swing.border.EtchedBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweethome3d.tools.OperatingSystem;
import com.eteks.sweethome3d.viewcontroller.TextureChoiceController;
import com.eteks.sweethome3d.viewcontroller.TextureChoiceView;
import com.eteks.sweethome3d.viewcontroller.View;

/**
* The view that edits textures.
*/
public interface TextureChoiceView extends View {

    /**
     * Sets the texture displayed by this view.
     */
    public void setTexture(HomeTexture texture);

    /**
     * Sets the enabled state of the delete action.
     */
    public void setDeleteActionEnabled(boolean enabled);

    /**
     * Displays this view in a modal dialog box.
     */
    public void displayView(View parentView);
}

// TexturesCatalogController.java
package com.eteks.sweethome3d.viewcontroller;

import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.KeyboardFocusManager;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import javax.swing.AbstractListModel;
import javax.swing.BorderFactory;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;
import javax.swing.border.EtchedBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.CollectionEvent;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.TexturesCatalog;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.UserPreferences;
import com.eteks.sweeth"
cmpl-6x1bSy3f9sYSLi1vBiX70duPzf2U7,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/tools/OperatingSystem0.java,143.15172386169434,length,"// OperatingSystem.java
package com.eteks.sweethome3d.tools;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;

/**
 * Tools used to test current user operating system.
 *
 * @author Emmanuel Puybaret
 */
public class OperatingSystem {

    /**
     * Returns <code>true</code> if current operating is Linux.
     */
    public static boolean isLinux();
}
","// OperatingSystemTest.java
package com.eteks.sweethome3d.tools;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OperatingSystem}.
* It contains ten unit test cases for the {@link OperatingSystem#isLinux()} method.
*/
class OperatingSystemTest {","// OperatingSystemTest.java
package com.eteks.sweethome3d.tools;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OperatingSystem}.
* It contains ten unit test cases for the {@link OperatingSystem#isLinux()} method.
*/
class OperatingSystemTest {

		/**
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case 1 for method {@link OperatingSystem#isLinux()}.
		* Test case"
cmpl-6x1dlE01kFtbnUmDLu8TFO17YFVWy,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/tools/OperatingSystem1.java,115.44923329353333,length,"// OperatingSystem.java
package com.eteks.sweethome3d.tools;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;

/**
 * Tools used to test current user operating system.
 *
 * @author Emmanuel Puybaret
 */
public class OperatingSystem {

    /**
     * Returns <code>true</code> if current operating is Windows.
     */
    public static boolean isWindows();
}
","// OperatingSystemTest.java
package com.eteks.sweethome3d.tools;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OperatingSystem}.
* It contains ten unit test cases for the {@link OperatingSystem#isWindows()} method.
*/
class OperatingSystemTest {","// OperatingSystemTest.java
package com.eteks.sweethome3d.tools;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OperatingSystem}.
* It contains ten unit test cases for the {@link OperatingSystem#isWindows()} method.
*/
class OperatingSystemTest {

	@Test
	void testIsWindows() {
		assertTrue(OperatingSystem.isWindows());
	}
}

// ResourceURLContent.java
package com.eteks.sweethome3d.tools;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.Content;

/**
 * Content that references a resource.
 * @author Emmanuel Puybaret
 */
public class ResourceURLContent implements Content {

    /**
     * Creates a content object that references a resource.
     * @param resource the name of the resource.
     */
    public ResourceURLContent(String resource);

    /**
     * Returns <code>true</code> if this content is a temporary one.
     */
    public boolean isTemporary();

    /**
     * Returns the name of this content.
     */
    public String getName();

    /**
     * Returns the input stream of this content.
     */
    public InputStream getInputStream() throws IOException;

    /**
     * Returns the URL of this content.
     */
    public URL getURL();

    /**
     * Returns the file of this content.
     */
    public File getFile();

    /**
     * Returns the length in bytes of this content.
     */
    public long getLength();

    /**
     * Returns the content type of this content.
     */
    public String getContentType();

    /**
     * Returns the content of this content as a string.
     */
    public String getContentString();

    /**
     * Returns the content of this content as a byte array.
     */
    public byte [] getContentBytes();

    /**
     * Returns the content of this content as a reader.
     */
    public Reader getContentReader();

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage();

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor, boolean forceGray);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor, boolean forceGray, boolean forceBW);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor, boolean forceGray, boolean forceBW, boolean forceInvert);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor, boolean forceGray, boolean forceBW, boolean forceInvert, boolean forceFlip);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor, boolean forceGray, boolean forceBW, boolean forceInvert, boolean forceFlip, boolean forceRotate);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor, boolean forceGray, boolean forceBW, boolean forceInvert, boolean forceFlip, boolean forceRotate, boolean forceCrop);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor, boolean forceGray, boolean forceBW, boolean forceInvert, boolean forceFlip, boolean forceRotate, boolean forceCrop, boolean forceResize);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor, boolean forceGray, boolean forceBW, boolean forceInvert, boolean forceFlip, boolean forceRotate, boolean forceCrop, boolean forceResize, boolean forceScale);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor, boolean forceGray, boolean forceBW, boolean forceInvert, boolean forceFlip, boolean forceRotate, boolean forceCrop, boolean forceResize, boolean forceScale, boolean forceSharpen);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor, boolean forceGray, boolean forceBW, boolean forceInvert, boolean forceFlip, boolean forceRotate, boolean forceCrop, boolean forceResize, boolean forceScale, boolean forceSharpen, boolean forceBlur);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor, boolean forceGray, boolean forceBW, boolean forceInvert, boolean forceFlip, boolean forceRotate, boolean forceCrop, boolean forceResize, boolean forceScale, boolean forceSharpen, boolean forceBlur, boolean forceEdge);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor, boolean forceGray, boolean forceBW, boolean forceInvert, boolean forceFlip, boolean forceRotate, boolean forceCrop, boolean forceResize, boolean forceScale, boolean forceSharpen, boolean forceBlur, boolean forceEdge, boolean forceEmboss);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor, boolean forceGray, boolean forceBW, boolean forceInvert, boolean forceFlip, boolean forceRotate, boolean forceCrop, boolean forceResize, boolean forceScale, boolean forceSharpen, boolean forceBlur, boolean forceEdge, boolean forceEmboss, boolean forceOil);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor, boolean forceGray, boolean forceBW, boolean forceInvert, boolean forceFlip, boolean forceRotate, boolean forceCrop, boolean forceResize, boolean forceScale, boolean forceSharpen, boolean forceBlur, boolean forceEdge, boolean forceEmboss, boolean forceOil, boolean forceNegate);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor, boolean forceGray, boolean forceBW, boolean forceInvert, boolean forceFlip, boolean forceRotate, boolean forceCrop, boolean forceResize, boolean forceScale, boolean forceSharpen, boolean forceBlur, boolean forceEdge, boolean forceEmboss, boolean forceOil, boolean forceNegate, boolean forceGrayScale);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor, boolean forceGray, boolean forceBW, boolean forceInvert, boolean forceFlip, boolean forceRotate, boolean forceCrop, boolean forceResize, boolean forceScale, boolean forceSharpen, boolean forceBlur, boolean forceEdge, boolean forceEmboss, boolean forceOil, boolean forceNegate, boolean forceGrayScale, boolean forceSepia);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor, boolean forceGray, boolean forceBW, boolean forceInvert, boolean forceFlip, boolean forceRotate, boolean forceCrop, boolean forceResize, boolean forceScale, boolean forceSharpen, boolean forceBlur, boolean forceEdge, boolean forceEmboss, boolean forceOil, boolean forceNegate, boolean forceGrayScale, boolean forceSepia, boolean forceSolarize);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor, boolean forceGray, boolean forceBW, boolean forceInvert, boolean forceFlip, boolean forceRotate, boolean forceCrop, boolean forceResize, boolean forceScale, boolean forceSharpen, boolean forceBlur, boolean forceEdge, boolean forceEmboss, boolean forceOil, boolean forceNegate, boolean forceGrayScale, boolean forceSepia, boolean forceSolarize, boolean forceContrast);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async, boolean forceLoad, boolean forceReload, boolean forceTransparent, boolean forceBackground, boolean forceAlpha, boolean forceColor, boolean forceGray, boolean forceBW, boolean forceInvert, boolean forceFlip, boolean forceRotate, boolean forceCrop, boolean forceResize, boolean forceScale, boolean forceSharpen, boolean forceBlur, boolean forceEdge, boolean forceEmboss, boolean forceOil, boolean forceNegate, boolean forceGrayScale, boolean forceSepia, boolean forceSolarize, boolean forceContrast, boolean forceBrightness);

    /**
     * Returns the content of this content as a buffered image.
     */
    public BufferedImage getContentImage(int width, int height, boolean proportional, boolean maximumSize, boolean smooth, boolean cache, boolean hiDPI, boolean wait, boolean async,"
cmpl-6x1fdF6WiLXUCvnJQ2ZaEudrvXTGy,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/tools/OperatingSystem2.java,101.2109022140503,length,"// OperatingSystem.java
package com.eteks.sweethome3d.tools;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;

/**
 * Tools used to test current user operating system.
 *
 * @author Emmanuel Puybaret
 */
public class OperatingSystem {

    /**
     * Returns <code>true</code> if current operating is Mac OS X.
     */
    public static boolean isMacOSX();
}
","// OperatingSystemTest.java
package com.eteks.sweethome3d.tools;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OperatingSystem}.
* It contains ten unit test cases for the {@link OperatingSystem#isMacOSX()} method.
*/
class OperatingSystemTest {","// OperatingSystemTest.java
package com.eteks.sweethome3d.tools;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OperatingSystem}.
* It contains ten unit test cases for the {@link OperatingSystem#isMacOSX()} method.
*/
class OperatingSystemTest {

	@Test
	void testIsMacOSX() {
		assertTrue(OperatingSystem.isMacOSX());
	}
}

// ResourceURLContent.java
package com.eteks.sweethome3d.tools;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceURLContent}.
* It contains ten unit test cases for the {@link ResourceURLContent#getURL()} method.
*/
class ResourceURLContentTest {
		
	@Test
	void testGetURL() {
		assertEquals(ResourceURLContent.getURL(""com/eteks/sweethome3d/resources/resources.properties""), ResourceURLContent.class.getResource(""resources.properties""));
	}
}

// SweetHome3D.java
package com.eteks.sweethome3d;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SweetHome3D}.
* It contains ten unit test cases for the {@link SweetHome3D#main(String[])} method.
*/
class SweetHome3DTest {
		
	@Test
	void testMain() {
		SweetHome3D.main(new String[] {""-open"", ""test.sh3d""});
	}
}

// SweetHome3D.java
package com.eteks.sweethome3d;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SweetHome3D}.
* It contains ten unit test cases for the {@link SweetHome3D#main(String[])} method.
*/
class SweetHome3DTest {
		
	@Test
	void testMain() {
		SweetHome3D.main(new String[] {""-open"", ""test.sh3d""});
	}
}

// SweetHome3D.java
package com.eteks.sweethome3d;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SweetHome3D}.
* It contains ten unit test cases for the {@link SweetHome3D#main(String[])} method.
*/
class SweetHome3DTest {
		
	@Test
	void testMain() {
		SweetHome3D.main(new String[] {""-open"", ""test.sh3d""});
	}
}

// SweetHome3D.java
package com.eteks.sweethome3d;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SweetHome3D}.
* It contains ten unit test cases for the {@link SweetHome3D#main(String[])} method.
*/
class SweetHome3DTest {
		
	@Test
	void testMain() {
		SweetHome3D.main(new String[] {""-open"", ""test.sh3d""});
	}
}

// SweetHome3D.java
package com.eteks.sweethome3d;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SweetHome3D}.
* It contains ten unit test cases for the {@link SweetHome3D#main(String[])} method.
*/
class SweetHome3DTest {
		
	@Test
	void testMain() {
		SweetHome3D.main(new String[] {""-open"", ""test.sh3d""});
	}
}

// SweetHome3D.java
package com.eteks.sweethome3d;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SweetHome3D}.
* It contains ten unit test cases for the {@link SweetHome3D#main(String[])} method.
*/
class SweetHome3DTest {
		
	@Test
	void testMain() {
		SweetHome3D.main(new String[] {""-open"", ""test.sh3d""});
	}
}

// SweetHome3D.java
package com.eteks.sweethome3d;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SweetHome3D}.
* It contains ten unit test cases for the {@link SweetHome3D#main(String[])} method.
*/
class SweetHome3DTest {
		
	@Test
	void testMain() {
		SweetHome3D.main(new String[] {""-open"", ""test.sh3d""});
	}
}

// SweetHome3D.java
package com.eteks.sweethome3d;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SweetHome3D}.
* It contains ten unit test cases for the {@link SweetHome3D#main(String[])} method.
*/
class SweetHome3DTest {
		
	@Test
	void testMain() {
		SweetHome3D.main(new String[] {""-open"", ""test.sh3d""});
	}
}

// SweetHome3D.java
package com.eteks.sweethome3d;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SweetHome3D}.
* It contains ten unit test cases for the {@link SweetHome3D#main(String[])} method.
*/
class SweetHome3DTest {
		
	@Test
	void testMain() {
		SweetHome3D.main(new String[] {""-open"", ""test.sh3d""});
	}
}

// SweetHome3D.java
package com.eteks.sweethome3d;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SweetHome3D}.
* It contains ten unit test cases for the {@link SweetHome3D#main(String[])} method.
*/
class SweetHome3DTest {
		
	@Test
	void testMain() {
		SweetHome3D.main(new String[] {""-open"", ""test.sh3d""});
	}
}

// SweetHome3D.java
package com.eteks.sweethome3d;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SweetHome3D}.
* It contains ten unit test cases for the {@link SweetHome3D#main(String[])} method.
*/
class SweetHome3DTest {
		
	@Test
	void testMain() {
		SweetHome3D.main(new String[] {""-open"", ""test.sh3d""});
	}
}

// SweetHome3D.java
package com.eteks.sweethome3d;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SweetHome3D}.
* It contains ten unit test cases for the {@link SweetHome3D#main(String[])} method.
*/
class SweetHome3DTest {
		
	@Test
	void testMain() {
		SweetHome3D.main(new String[] {""-open"", ""test.sh3d""});
	}
}

// SweetHome3D.java
package com.eteks.sweethome3d;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SweetHome3D}.
* It contains ten unit test cases for the {@link SweetHome3D#main(String[])} method.
*/
class SweetHome3DTest {
		
	@Test
	void testMain() {
		SweetHome3D.main(new String[] {""-open"", ""test.sh3d""});
	}
}

// SweetHome3D.java
package com.eteks.sweethome3d;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SweetHome3D}.
* It contains ten unit test cases for the {@link SweetHome3D#main(String[])} method.
*/
class SweetHome3DTest {
		
	@Test
	void testMain() {
		SweetHome3D.main(new String[] {""-open"", ""test.sh3d""});
	}
}

// SweetHome3D.java
package com.eteks.sweethome"
cmpl-6x1hGD0izHBqETJDwuWypNUMGzQy0,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/tools/OperatingSystem3.java,101.11489677429199,stop,"// OperatingSystem.java
package com.eteks.sweethome3d.tools;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;

/**
 * Tools used to test current user operating system.
 *
 * @author Emmanuel Puybaret
 */
public class OperatingSystem {

    /**
     * Returns <code>true</code> if current operating is Mac OS X 10.5
     * or superior.
     */
    public static boolean isMacOSXLeopardOrSuperior();
}
","// OperatingSystemTest.java
package com.eteks.sweethome3d.tools;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OperatingSystem}.
* It contains ten unit test cases for the {@link OperatingSystem#isMacOSXLeopardOrSuperior()} method.
*/
class OperatingSystemTest {","// OperatingSystemTest.java
package com.eteks.sweethome3d.tools;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OperatingSystem}.
* It contains ten unit test cases for the {@link OperatingSystem#isMacOSXLeopardOrSuperior()} method.
*/
class OperatingSystemTest {

		@Test
		void testIsMacOSXLeopardOrSuperior() {
				assertTrue(OperatingSystem.isMacOSXLeopardOrSuperior());
		}
}

// Home.java
package com.eteks.sweethome3d.model;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;

/**
 * A home managed by Sweet Home 3D.
 * @author Emmanuel Puybaret
 */
public class Home {
		
		/**
		 * Returns <code>true</code> if this home is modified.
		 */
		public boolean isModified();
}

// HomeTest.java
package com.eteks.sweethome3d.model;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Home}.
* It contains ten unit test cases for the {@link Home#isModified()} method.
*/
class HomeTest {
		
		@Test
		void testIsModified() {
				assertTrue(new Home().isModified());
		}
}

// FileManager.java
package com.apple.eio;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;

/**
 * A class to manage files.
 * @author Emmanuel Puybaret
 */
public class FileManager {
		
		/**
		 * Returns <code>true</code> if this file is a directory.
		 */
		public static boolean isDirectory(File file);
}

// FileManagerTest.java
package com.apple.eio;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileManager}.
* It contains ten unit test cases for the {@link FileManager#isDirectory(File)} method.
*/
class FileManagerTest {
		
		@Test
		void testIsDirectory() {
				assertTrue(FileManager.isDirectory(new File("""")));
		}
}

// File.java
package java.io;

import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;

/**
 * A class to manage files.
 * @author Emmanuel Puybaret
 */
public class File {
		
		/**
		 * Returns <code>true</code> if this file is a directory.
		 */
		public boolean isDirectory();
}

// FileTest.java
package java.io;

import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link File}.
* It contains ten unit test cases for the {@link File#isDirectory()} method.
*/
class FileTest {
		
		@Test
		void testIsDirectory() {
				assertTrue(new File("""").isDirectory());
		}
}

// FileFilter.java
package java.io;

import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;

/**
 * A class to manage files.
 * @author Emmanuel Puybaret
 */
public interface FileFilter {
		
		/**
		 * Returns <code>true</code> if this file is a directory.
		 */
		public boolean accept(File file);
}

// FileFilterTest.java
package java.io;

import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileFilter}.
* It contains ten unit test cases for the {@link FileFilter#accept(File)} method.
*/
class FileFilterTest {
		
		@Test
		void testAccept() {
				assertTrue(new FileFilter() {
						public boolean accept(File file) {
								return true;
						}
				}.accept(new File("""")));
		}
}

// IOException.java
package java.io;

import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;

/**
 * A class to manage files.
 * @author Emmanuel Puybaret
 */
public class IOException extends Exception {
		
		/**
		 * Returns <code>true</code> if this file is a directory.
		 */
		public boolean isDirectory();
}

// IOExceptionTest.java
package java.io;

import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IOException}.
* It contains ten unit test cases for the {@link IOException#isDirectory()} method.
*/
class IOExceptionTest {
		
		@Test
		void testIsDirectory() {
				assertTrue(new IOException().isDirectory());
		}
}

// AccessControlException.java
package java.security;

import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;

/**
 * A class to manage files.
 * @author Emmanuel Puybaret
 */
public class AccessControlException extends Exception {
		
		/**
		 * Returns <code>true</code> if this file is a directory.
		 */
		public boolean isDirectory();
}

// AccessControlExceptionTest.java
package java.security;

import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AccessControlException}.
* It contains ten unit test cases for the {@link AccessControlException#isDirectory()} method.
*/
class AccessControlExceptionTest {
		
		@Test
		void testIsDirectory() {
				assertTrue(new AccessControlException("""").isDirectory());
		}
}

// MissingResourceException.java
package java.util;

import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;

/**
 * A class to manage files.
 * @author Emmanuel Puybaret
 */
public class MissingResourceException extends Exception {
		
		/**
		 * Returns <code>true</code> if this file is a directory.
		 */
		public boolean isDirectory();
}

// MissingResourceExceptionTest.java
package java.util;

import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MissingResourceException}.
* It contains ten unit test cases for the {@link MissingResourceException#isDirectory()} method.
*/
class MissingResourceExceptionTest {
		
		@Test
		void testIsDirectory() {
				assertTrue(new MissingResourceException("""", """", """").isDirectory());
		}
}

// ResourceBundle.java
package java.util;

import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;

/**
 * A class to manage files.
 * @author Emmanuel Puybaret
 */
public class ResourceBundle {
		
		/**
		 * Returns <code>true</code> if this file is a directory.
		 */
		public boolean isDirectory();
}

// ResourceBundleTest.java
package java.util;

import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ResourceBundle}.
* It contains ten unit test cases for the {@link ResourceBundle#isDirectory()} method.
*/
class ResourceBundleTest {
		
		@Test
		void testIsDirectory() {
				assertTrue(new ResourceBundle() {
						protected Object handleGetObject(String key) {
								return null;
						}
						public Enumeration<String> getKeys() {
								return null;
						}
				}.isDirectory());
		}
}

// Timer.java
package java.util;

import java.util.TimerTask;
import java.util.UUID;

/**
 * A class to manage files.
 * @author Emmanuel Puybaret
 */
public class Timer {
		
		/**
		 * Returns <code>true</code> if this file is a directory.
		 */
		public boolean isDirectory();
}

// TimerTest.java
package java.util;

import java.util.TimerTask;
import java.util.UUID;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Timer}.
* It contains ten unit test cases for the {@link Timer#isDirectory()} method.
*/
class TimerTest {
		
		@Test
		void testIsDirectory() {
				assertTrue(new Timer().isDirectory());
		}
}

// TimerTask.java
package java.util;

import java.util.UUID;

/**
 * A class to manage files.
 * @author Emmanuel Puybaret
 */
public class TimerTask {
		
		/**
		 * Returns <code>true</code> if this file is a directory.
		 */
		public boolean isDirectory();
}

// TimerTaskTest.java
package java.util;

import java.util.UUID;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TimerTask}.
* It contains ten unit test cases for the {@link TimerTask#isDirectory()} method.
*/
class TimerTaskTest {
		
		@Test
		void testIsDirectory() {
				assertTrue(new TimerTask() {
						public void run() {
						}
				}.isDirectory());
		}
}

// UUID.java
package java.util;

/**
 * A class to manage files.
 * @author Emmanuel Puybaret
 */
public class UUID {
		
		/**
		 * Returns <code>true</code> if this file is a directory.
		 */
		public boolean isDirectory();
}

// UUIDTest.java
package java.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UUID}.
* It contains ten unit test cases for the {@link UUID#isDirectory()} method.
*/
class UUIDTest {
		
		@Test
		void testIsDirectory() {
				assertTrue(new UUID(0, 0).isDirectory());
		}
}"
cmpl-6x1it5lCHXsjqcdcSZvEP7Wk6EVDf,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/tools/OperatingSystem4.java,133.81082940101624,length,"// OperatingSystem.java
package com.eteks.sweethome3d.tools;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;

/**
 * Tools used to test current user operating system.
 *
 * @author Emmanuel Puybaret
 */
public class OperatingSystem {

    /**
     * Returns default application folder.
     */
    public static File getDefaultApplicationFolder() throws IOException;
}
","// OperatingSystemTest.java
package com.eteks.sweethome3d.tools;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OperatingSystem}.
* It contains ten unit test cases for the {@link OperatingSystem#getDefaultApplicationFolder()} method.
*/
class OperatingSystemTest {","// OperatingSystemTest.java
package com.eteks.sweethome3d.tools;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import com.eteks.sweethome3d.model.Home;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OperatingSystem}.
* It contains ten unit test cases for the {@link OperatingSystem#getDefaultApplicationFolder()} method.
*/
class OperatingSystemTest {

	@Test
	void testGetDefaultApplicationFolder() throws IOException {
		// Test 1
		File defaultApplicationFolder = OperatingSystem.getDefaultApplicationFolder();
		assertNotNull(defaultApplicationFolder);
		assertTrue(defaultApplicationFolder.exists());
		assertTrue(defaultApplicationFolder.isDirectory());
		assertTrue(defaultApplicationFolder.canRead());
		assertTrue(defaultApplicationFolder.canWrite());
		
		// Test 2
		defaultApplicationFolder = OperatingSystem.getDefaultApplicationFolder();
		assertNotNull(defaultApplicationFolder);
		assertTrue(defaultApplicationFolder.exists());
		assertTrue(defaultApplicationFolder.isDirectory());
		assertTrue(defaultApplicationFolder.canRead());
		assertTrue(defaultApplicationFolder.canWrite());
		
		// Test 3
		defaultApplicationFolder = OperatingSystem.getDefaultApplicationFolder();
		assertNotNull(defaultApplicationFolder);
		assertTrue(defaultApplicationFolder.exists());
		assertTrue(defaultApplicationFolder.isDirectory());
		assertTrue(defaultApplicationFolder.canRead());
		assertTrue(defaultApplicationFolder.canWrite());
		
		// Test 4
		defaultApplicationFolder = OperatingSystem.getDefaultApplicationFolder();
		assertNotNull(defaultApplicationFolder);
		assertTrue(defaultApplicationFolder.exists());
		assertTrue(defaultApplicationFolder.isDirectory());
		assertTrue(defaultApplicationFolder.canRead());
		assertTrue(defaultApplicationFolder.canWrite());
		
		// Test 5
		defaultApplicationFolder = OperatingSystem.getDefaultApplicationFolder();
		assertNotNull(defaultApplicationFolder);
		assertTrue(defaultApplicationFolder.exists());
		assertTrue(defaultApplicationFolder.isDirectory());
		assertTrue(defaultApplicationFolder.canRead());
		assertTrue(defaultApplicationFolder.canWrite());
		
		// Test 6
		defaultApplicationFolder = OperatingSystem.getDefaultApplicationFolder();
		assertNotNull(defaultApplicationFolder);
		assertTrue(defaultApplicationFolder.exists());
		assertTrue(defaultApplicationFolder.isDirectory());
		assertTrue(defaultApplicationFolder.canRead());
		assertTrue(defaultApplicationFolder.canWrite());
		
		// Test 7
		defaultApplicationFolder = OperatingSystem.getDefaultApplicationFolder();
		assertNotNull(defaultApplicationFolder);
		assertTrue(defaultApplicationFolder.exists());
		assertTrue(defaultApplicationFolder.isDirectory());
		assertTrue(defaultApplicationFolder.canRead());
		assertTrue(defaultApplicationFolder.canWrite());
		
		// Test 8
		defaultApplicationFolder = OperatingSystem.getDefaultApplicationFolder();
		assertNotNull(defaultApplicationFolder);
		assertTrue(defaultApplicationFolder.exists());
		assertTrue(defaultApplicationFolder.isDirectory());
		assertTrue(defaultApplicationFolder.canRead());
		assertTrue(defaultApplicationFolder.canWrite());
		
		// Test 9
		defaultApplicationFolder = OperatingSystem.getDefaultApplicationFolder();
		assertNotNull(defaultApplicationFolder);
		assertTrue(defaultApplicationFolder.exists());
		assertTrue(defaultApplicationFolder.isDirectory());
		assertTrue(defaultApplicationFolder.canRead());
		assertTrue(defaultApplicationFolder.canWrite());
		
		// Test 10
		defaultApplicationFolder = OperatingSystem.getDefaultApplicationFolder();
		assertNotNull(defaultApplicationFolder);
		assertTrue(defaultApplicationFolder.exists());
		assertTrue(defaultApplicationFolder.isDirectory());
		assertTrue(defaultApplicationFolder.canRead());
		assertTrue(defaultApplicationFolder.canWrite());
	}
}

// Home.java
package com.eteks.sweethome3d.model;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;

/**
* A home is a 3D scene composed of <code>HomePieceOfFurniture</code> objects and <code>Wall</code> objects.
*/
public class Home {
	
	/**
	* Returns the name of this home.
	*/
	public String getName();
	
	/**
	* Returns the name of this home.
	*/
	public String getName();
	
	/**
	* Returns the name of this home.
	*/
	public String getName();
	
	/**
	* Returns the name of this home.
	*/
	public String getName();
	
	/**
	* Returns the name of this home.
	*/
	public String getName();
	
	/**
	* Returns the name of this home.
	*/
	public String getName();
	
	/**
	* Returns the name of this home.
	*/
	public String getName();
	
	/**
	* Returns the name of this home.
	*/
	public String getName();
	
	/**
	* Returns the name of this home.
	*/
	public String getName();
	
	/**
	* Returns the name of this home.
	*/
	public String getName();
}

// HomeTest.java
package com.eteks.sweethome3d.model;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Home}.
* It contains ten unit test cases for the {@link Home#getName()} method.
*/
class HomeTest {
		
	@Test
	void testGetName() {
		// Test 1
		Home home = new Home();
		assertNotNull(home.getName());
		
		// Test 2
		home = new Home();
		assertNotNull(home.getName());
		
		// Test 3
		home = new Home();
		assertNotNull(home.getName());
		
		// Test 4
		home = new Home();
		assertNotNull(home.getName());
		
		// Test 5
		home = new Home();
		assertNotNull(home.getName());
		
		// Test 6
		home = new Home();
		assertNotNull(home.getName());
		
		// Test 7
		home = new Home();
		assertNotNull(home.getName());
		
		// Test 8
		home = new Home();
		assertNotNull(home.getName());
		
		// Test 9
		home = new Home();
		assertNotNull(home.getName());
		
		// Test 10
		home = new Home();
		assertNotNull(home.getName());
	}
}

// HomePieceOfFurniture.java
package com.eteks.sweethome3d.model;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;

/**
* A piece of furniture in {@linkplain Home home}.
*/
public class HomePieceOfFurniture {
	
	/**
	* Returns the name of this piece of furniture.
	*/
	public String getName();
	
	/**
	* Returns the name of this piece of furniture.
	*/
	public String getName();
	
	/**
	* Returns the name of this piece of furniture.
	*/
	public String getName();
	
	/**
	* Returns the name of this piece of furniture.
	*/
	public String getName();
	
	/**
	* Returns the name of this piece of furniture.
	*/
	public String getName();
	
	/**
	* Returns the name of this piece of furniture.
	*/
	public String getName();
	
	/**
	* Returns the name of this piece of furniture.
	*/
	public String getName();
	
	/**
	* Returns the name of this piece of furniture.
	*/
	public String getName();
	
	/**
	* Returns the name of this piece of furniture.
	*/
	public String getName();
	
	/**
	* Returns the name of this piece of furniture.
	*/
	public String getName();
}

// HomePieceOfFurnitureTest.java
package com.eteks.sweethome3d.model;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HomePieceOfFurniture}.
* It contains ten unit test cases for the {@link HomePieceOfFurniture#getName()} method.
*/
class HomePieceOfFurnitureTest {
		
	@Test
	void testGetName() {
		// Test 1
		HomePieceOfFurniture piece = new HomePieceOfFurniture();
		assertNotNull(piece.getName());
		
		// Test 2
		piece = new HomePieceOfFurniture();
		assertNotNull(piece.getName());
		
		// Test 3
		piece = new HomePieceOfFurniture();
		assertNotNull(piece.getName());
		
		// Test 4
		piece = new HomePieceOfFurniture();
		assertNotNull(piece.getName());
		
		// Test 5
		piece = new HomePieceOfFurniture();
		assertNotNull(piece.getName());
		
		// Test 6
		piece = new HomePieceOfFurniture();
		assertNotNull(piece.getName());
		
		// Test 7
		piece = new HomePieceOfFurniture();
		assertNotNull(piece.getName());
		
		// Test 8
		piece = new HomePieceOfFurniture();
		assertNotNull(piece.getName());
		
		// Test 9
		piece = new HomePieceOfFurniture();
		assertNotNull(piece.getName());
		
		// Test 10
		piece = new HomePieceOfFurniture();
		assertNotNull(piece.getName());
	}
}

// Wall.java
package com.eteks.sweethome3d.model;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;

/**
* A wall in {@linkplain Home home}.
*/
public class Wall {
	
	/**
	* Returns the name of this wall.
	*/
	public String getName();
	
	/**
	* Returns the name of this wall.
	*/
	public String getName();
	
	/**
	* Returns the name of this wall.
	*/
	public String getName();
	
	/**
	* Returns the name of this wall.
	*/
	public String getName();
	
	/**
	* Returns the name of this wall.
	*/
	public String getName();
	
	/**
	* Returns the name of this wall.
	*/
	public String getName();
	
	/**
	* Returns the name of this wall.
	*/
	public String getName();
	
	/**
	* Returns the name of this wall.
	*/
	public String getName();
	
	/**
	* Returns the name of this wall.
	*/
	public String getName();
	
	/**
	* Returns the name of this wall.
	*/
	public String getName();
}

// WallTest.java
package com.eteks.sweethome3d.model;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Wall}.
* It contains ten unit test cases for the {@link Wall#getName()} method.
*/
class WallTest {
		
	@Test
	void testGetName() {
		// Test 1
		Wall wall = new Wall();
		assertNotNull(wall.getName());
		
		// Test 2
		wall = new Wall();
		assertNotNull(wall.getName());
		
		// Test 3
		wall = new Wall();
		assertNotNull(wall.getName());
		
		// Test 4
		wall = new Wall();
		assertNotNull(wall.getName());
		
		// Test 5
		wall = new Wall();
		assertNotNull(wall.getName());
		
		// Test 6
		wall = new Wall();
		assertNotNull(wall.getName());
		
		// Test 7
		wall = new Wall();
		assertNotNull(wall.getName());
		
		// Test 8
		wall = new Wall();
		assertNotNull(wall.getName());
		
		// Test 9
		wall = new Wall();
		assertNotNull(wall.getName());
		
		// Test 10
		wall = new Wall();
		assertNotNull(wall.getName());
	}
}

// HomeRecorder.java
package com.eteks.sweethome3d.model;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.security.AccessControlException;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.UUID;
import com.apple.eio.FileManager;

/**
* A recorder able to write and read homes in a file.
*/
public class HomeRecorder {
	
	/**
	* Writes the given home in a file.
	*/
	public void writeHome(Home home, File homeFile) throws RecorderException;
	
	/**
	* Writes the given home in a file.
	*/
	public void writeHome(Home home, File homeFile) throws RecorderException;
	
	/**
	* Writes the given home in a file.
	*/
	public void writeHome(Home home, File homeFile) throws RecorderException;
	
	/**
	* Writes the given home in a file.
	*/
	public void writeHome(Home home, File homeFile) throws RecorderException"
cmpl-6x1l3hzm00LjqB2vMfy52zTJRFhdH,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/tools/URLContent.java,127.52716398239136,length,"// URLContent.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;

/**
 * URL content for files, images...
 *
 * @author Emmanuel Puybaret
 */
public class URLContent implements Content {

    /**
     * Returns an InputStream on the URL content.
     *
     * @throws IOException if URL stream can't be opened.
     */
    public InputStream openStream() throws IOException;
}
","// URLContentTest.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link URLContent}.
* It contains ten unit test cases for the {@link URLContent#openStream()} method.
*/
class URLContentTest {","// URLContentTest.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link URLContent}.
* It contains ten unit test cases for the {@link URLContent#openStream()} method.
*/
class URLContentTest {

	@Test
	void testOpenStream() throws MalformedURLException, IOException {
		URL url = new URL(""http://www.eteks.com/"");
		Content content = new URLContent(url);
		InputStream stream = content.openStream();
		assertNotNull(stream);
		stream.close();
	}
}

// URLContent.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;

/**
 * URL content for files, images...
 *
 * @author Emmanuel Puybaret
 */
public class URLContent implements Content {

    /**
     * Returns an InputStream on the URL content.
     *
     * @throws IOException if URL stream can't be opened.
     */
    public InputStream openStream() throws IOException {
        return url.openStream();
    }
}

// URLContentTest.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link URLContent}.
* It contains ten unit test cases for the {@link URLContent#openStream()} method.
*/
class URLContentTest {
		
	@Test
	void testOpenStream() throws MalformedURLException, IOException {
		URL url = new URL(""http://www.eteks.com/"");
		Content content = new URLContent(url);
		InputStream stream = content.openStream();
		assertNotNull(stream);
		stream.close();
	}
}

// URLContent.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;

/**
 * URL content for files, images...
 *
 * @author Emmanuel Puybaret
 */
public class URLContent implements Content {

    /**
     * Returns an InputStream on the URL content.
     *
     * @throws IOException if URL stream can't be opened.
     */
    public InputStream openStream() throws IOException {
        return url.openStream();
    }
}

// URLContentTest.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link URLContent}.
* It contains ten unit test cases for the {@link URLContent#openStream()} method.
*/
class URLContentTest {
		
	@Test
	void testOpenStream() throws MalformedURLException, IOException {
		URL url = new URL(""http://www.eteks.com/"");
		Content content = new URLContent(url);
		InputStream stream = content.openStream();
		assertNotNull(stream);
		stream.close();
	}
}

// URLContent.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;

/**
 * URL content for files, images...
 *
 * @author Emmanuel Puybaret
 */
public class URLContent implements Content {

    /**
     * Returns an InputStream on the URL content.
     *
     * @throws IOException if URL stream can't be opened.
     */
    public InputStream openStream() throws IOException {
        return url.openStream();
    }
}

// URLContentTest.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link URLContent}.
* It contains ten unit test cases for the {@link URLContent#openStream()} method.
*/
class URLContentTest {
		
	@Test
	void testOpenStream() throws MalformedURLException, IOException {
		URL url = new URL(""http://www.eteks.com/"");
		Content content = new URLContent(url);
		InputStream stream = content.openStream();
		assertNotNull(stream);
		stream.close();
	}
}

// URLContent.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;

/**
 * URL content for files, images...
 *
 * @author Emmanuel Puybaret
 */
public class URLContent implements Content {

    /**
     * Returns an InputStream on the URL content.
     *
     * @throws IOException if URL stream can't be opened.
     */
    public InputStream openStream() throws IOException {
        return url.openStream();
    }
}

// URLContentTest.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link URLContent}.
* It contains ten unit test cases for the {@link URLContent#openStream()} method.
*/
class URLContentTest {
		
	@Test
	void testOpenStream() throws MalformedURLException, IOException {
		URL url = new URL(""http://www.eteks.com/"");
		Content content = new URLContent(url);
		InputStream stream = content.openStream();
		assertNotNull(stream);
		stream.close();
	}
}

// URLContent.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;

/**
 * URL content for files, images...
 *
 * @author Emmanuel Puybaret
 */
public class URLContent implements Content {

    /**
     * Returns an InputStream on the URL content.
     *
     * @throws IOException if URL stream can't be opened.
     */
    public InputStream openStream() throws IOException {
        return url.openStream();
    }
}

// URLContentTest.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link URLContent}.
* It contains ten unit test cases for the {@link URLContent#openStream()} method.
*/
class URLContentTest {
		
	@Test
	void testOpenStream() throws MalformedURLException, IOException {
		URL url = new URL(""http://www.eteks.com/"");
		Content content = new URLContent(url);
		InputStream stream = content.openStream();
		assertNotNull(stream);
		stream.close();
	}
}

// URLContent.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;

/**
 * URL content for files, images...
 *
 * @author Emmanuel Puybaret
 */
public class URLContent implements Content {

    /**
     * Returns an InputStream on the URL content.
     *
     * @throws IOException if URL stream can't be opened.
     */
    public InputStream openStream() throws IOException {
        return url.openStream();
    }
}

// URLContentTest.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link URLContent}.
* It contains ten unit test cases for the {@link URLContent#openStream()} method.
*/
class URLContentTest {
		
	@Test
	void testOpenStream() throws MalformedURLException, IOException {
		URL url = new URL(""http://www.eteks.com/"");
		Content content = new URLContent(url);
		InputStream stream = content.openStream();
		assertNotNull(stream);
		stream.close();
	}
}

// URLContent.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;

/**
 * URL content for files, images...
 *
 * @author Emmanuel Puybaret
 */
public class URLContent implements Content {

    /**
     * Returns an InputStream on the URL content.
     *
     * @throws IOException if URL stream can't be opened.
     */
    public InputStream openStream() throws IOException {
        return url.openStream();
    }
}

// URLContentTest.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link URLContent}.
* It contains ten unit test cases for the {@link URLContent#openStream()} method.
*/
class URLContentTest {
		
	@Test
	void testOpenStream() throws MalformedURLException, IOException {
		URL url = new URL(""http://www.eteks.com/"");
		Content content = new URLContent(url);
		InputStream stream = content.openStream();
		assertNotNull(stream);
		stream.close();
	}
}

// URLContent.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;

/**
 * URL content for files, images...
 *
 * @author Emmanuel Puybaret
 */
public class URLContent implements Content {

    /**
     * Returns an InputStream on the URL content.
     *
     * @throws IOException if URL stream can't be opened.
     */
    public InputStream openStream() throws IOException {
        return url.openStream();
    }
}

// URLContentTest.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link URLContent}.
* It contains ten unit test cases for the {@link URLContent#openStream()} method.
*/
class URLContentTest {
		
	@Test
	void testOpenStream() throws MalformedURLException, IOException {
		URL url = new URL(""http://www.eteks.com/"");
		Content content = new URLContent(url);
		InputStream stream = content.openStream();
		assertNotNull(stream);
		stream.close();
	}
}

// URLContent.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;

/**
 * URL content for files, images...
 *
 * @author Emmanuel Puybaret
 */
public class URLContent implements Content {

    /**
     * Returns an InputStream on the URL content.
     *
     * @throws IOException if URL stream can't be opened.
     */
    public InputStream openStream() throws IOException {
        return url.openStream();
    }
}

// URLContentTest.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link URLContent}.
* It contains ten unit test cases for the {@link URLContent#openStream()} method.
*/
class URLContentTest {
		
	@Test
	void testOpenStream() throws MalformedURLException, IOException {
		URL url = new URL(""http://www.eteks.com/"");
		Content content = new URLContent(url);
		InputStream stream = content.openStream();
		assertNotNull(stream);
		stream.close();
	}
}

// URLContent.java
package com.eteks.sweethome3d.tools;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import com.eteks.sweethome3d.model.Content;

/**
 * URL content for files, images...
 *
 * @author Emmanuel Puybaret
 */
public class URLContent implements Content {

    /**
     * Returns an InputStream on the URL content.
     *
     * @throws IOException if URL stream can't"
cmpl-6x1n7z6QP0XNdjLPKg1Z3ViwrUpVM,/EvoSuiteBenchmark/scenario3/103_sweethome3d/src/main/java/com/eteks/sweethome3d/viewcontroller/UserPreferencesController.java,120.17618918418884,length,"// UserPreferencesController.java
package com.eteks.sweethome3d.viewcontroller;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.UserPreferences;

/**
 * A MVC controller for user preferences view.
 *
 * @author Emmanuel Puybaret
 */
public class UserPreferencesController implements Controller {

    /**
     * Returns <code>true</code> if language libraries can be imported.
     */
    public boolean mayImportLanguageLibrary();
}
","// UserPreferencesControllerTest.java
package com.eteks.sweethome3d.viewcontroller;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.UserPreferences;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UserPreferencesController}.
* It contains ten unit test cases for the {@link UserPreferencesController#mayImportLanguageLibrary()} method.
*/
class UserPreferencesControllerTest {","// UserPreferencesControllerTest.java
package com.eteks.sweethome3d.viewcontroller;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.UserPreferences;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UserPreferencesController}.
* It contains ten unit test cases for the {@link UserPreferencesController#mayImportLanguageLibrary()} method.
*/
class UserPreferencesControllerTest {

	@Test
	public void testMayImportLanguageLibrary() {
		// Test case 1
		UserPreferencesController userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 2
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 3
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 4
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 5
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 6
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 7
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 8
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 9
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 10
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
	}
}

// UserPreferencesControllerTest.java
package com.eteks.sweethome3d.viewcontroller;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.UserPreferences;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UserPreferencesController}.
* It contains ten unit test cases for the {@link UserPreferencesController#mayImportLanguageLibrary()} method.
*/
class UserPreferencesControllerTest {
		
	@Test
	public void testMayImportLanguageLibrary() {
		// Test case 1
		UserPreferencesController userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 2
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 3
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 4
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 5
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 6
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 7
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 8
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 9
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 10
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
	}
}

// UserPreferencesControllerTest.java
package com.eteks.sweethome3d.viewcontroller;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.UserPreferences;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UserPreferencesController}.
* It contains ten unit test cases for the {@link UserPreferencesController#mayImportLanguageLibrary()} method.
*/
class UserPreferencesControllerTest {
		
	@Test
	public void testMayImportLanguageLibrary() {
		// Test case 1
		UserPreferencesController userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 2
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 3
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 4
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 5
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 6
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 7
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 8
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 9
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 10
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
	}
}

// UserPreferencesControllerTest.java
package com.eteks.sweethome3d.viewcontroller;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.UserPreferences;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UserPreferencesController}.
* It contains ten unit test cases for the {@link UserPreferencesController#mayImportLanguageLibrary()} method.
*/
class UserPreferencesControllerTest {
		
	@Test
	public void testMayImportLanguageLibrary() {
		// Test case 1
		UserPreferencesController userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 2
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 3
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 4
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 5
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 6
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 7
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 8
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 9
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 10
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
	}
}

// UserPreferencesControllerTest.java
package com.eteks.sweethome3d.viewcontroller;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.UserPreferences;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UserPreferencesController}.
* It contains ten unit test cases for the {@link UserPreferencesController#mayImportLanguageLibrary()} method.
*/
class UserPreferencesControllerTest {
		
	@Test
	public void testMayImportLanguageLibrary() {
		// Test case 1
		UserPreferencesController userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 2
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 3
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 4
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 5
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 6
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 7
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 8
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 9
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 10
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
	}
}

// UserPreferencesControllerTest.java
package com.eteks.sweethome3d.viewcontroller;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.UserPreferences;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UserPreferencesController}.
* It contains ten unit test cases for the {@link UserPreferencesController#mayImportLanguageLibrary()} method.
*/
class UserPreferencesControllerTest {
		
	@Test
	public void testMayImportLanguageLibrary() {
		// Test case 1
		UserPreferencesController userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 2
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 3
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 4
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 5
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 6
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 7
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 8
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 9
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 10
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
	}
}

// UserPreferencesControllerTest.java
package com.eteks.sweethome3d.viewcontroller;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.UserPreferences;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link UserPreferencesController}.
* It contains ten unit test cases for the {@link UserPreferencesController#mayImportLanguageLibrary()} method.
*/
class UserPreferencesControllerTest {
		
	@Test
	public void testMayImportLanguageLibrary() {
		// Test case 1
		UserPreferencesController userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 2
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 3
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 4
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 5
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 6
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 7
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
		// Test case 8
		userPreferencesController = new UserPreferencesController();
		assertTrue(userPreferencesController.mayImportLanguageLibrary());
		
"
