ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6x1n8DfNH53q8AEBXDLz0njV8cQKj,/EvoSuiteBenchmark/scenario2/60_sugar/src/main/java/net/sf/sugar/fspath/DefaultFSPath.java,150.53441286087036,length,"// DefaultFSPath.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import net.sf.sugar.fspath.xpath.RegexFunctionResolver;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *  The default implementation of the FSPath interface.
 *  This class uses the JDK's XPath implementation as the basis for
 *  FSPath queries.
 *  On instantiation, a DOM is created of the filesystem metadata starting form the <code>rootDirectory</code>.
 *  This DOM can then be queried using standard XML tools.
 *  <br/>
 *  Whilst this approach has been relatively quick to implement, it is still tied to the limitations of XPath.
 *  Future implementations of this class are likely to implement the FSPath language fully themselves wthout relying on XPath.
 *  <br/>
 *  todo: develop some front end substitution to enable the short queries i.e. /var/www etc
 *
 * @author keith
 *  $Id$
 */
public class DefaultFSPath implements FSPath {

    /**
     *  Calls this.query(expression, XPathConstants.NODESET)
     *
     *  Note : This method MUST be passed an expression which returns a nodeset.
     *
     * @param expression the FSPath expression to execute.
     * @returns <code>FSPathResultList</code> the FSPathResult objects contained
     *  in this list will be of type <code>java.io.File</code>,
     *  <code>java.lang.Double</code>, <code>java.lang.Boolean</code>,
     *  <code>java.lang.String</code>
     */
    public FSPathResultList query(String expression) {
        return this.query(expression, XPathConstants.NODESET);
    }
}
","// DefaultFSPathTest.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import net.sf.sugar.fspath.xpath.RegexFunctionResolver;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultFSPath}.
* It contains ten unit test cases for the {@link DefaultFSPath#query(String)} method.
*/
class DefaultFSPathTest {","// DefaultFSPathTest.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import net.sf.sugar.fspath.xpath.RegexFunctionResolver;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DefaultFSPath}.
* It contains ten unit test cases for the {@link DefaultFSPath#query(String)} method.
*/
class DefaultFSPathTest {

	/**
	* Test case for the {@link DefaultFSPath#query(String)} method.
	* It tests the query ""/"" and expects a result of type {@link FSPathResultList}.
	*/
	@Test
	public void testQuery1() {
		DefaultFSPath defaultFSPath = new DefaultFSPath();
		FSPathResultList result = defaultFSPath.query(""/"");
		assertTrue(result instanceof FSPathResultList);
	}
	
	/**
	* Test case for the {@link DefaultFSPath#query(String)} method.
	* It tests the query ""/"" and expects a result of type {@link FSPathResultList}.
	*/
	@Test
	public void testQuery2() {
		DefaultFSPath defaultFSPath = new DefaultFSPath();
		FSPathResultList result = defaultFSPath.query(""/"");
		assertTrue(result instanceof FSPathResultList);
	}
	
	/**
	* Test case for the {@link DefaultFSPath#query(String)} method.
	* It tests the query ""/"" and expects a result of type {@link FSPathResultList}.
	*/
	@Test
	public void testQuery3() {
		DefaultFSPath defaultFSPath = new DefaultFSPath();
		FSPathResultList result = defaultFSPath.query(""/"");
		assertTrue(result instanceof FSPathResultList);
	}
	
	/**
	* Test case for the {@link DefaultFSPath#query(String)} method.
	* It tests the query ""/"" and expects a result of type {@link FSPathResultList}.
	*/
	@Test
	public void testQuery4() {
		DefaultFSPath defaultFSPath = new DefaultFSPath();
		FSPathResultList result = defaultFSPath.query(""/"");
		assertTrue(result instanceof FSPathResultList);
	}
	
	/**
	* Test case for the {@link DefaultFSPath#query(String)} method.
	* It tests the query ""/"" and expects a result of type {@link FSPathResultList}.
	*/
	@Test
	public void testQuery5() {
		DefaultFSPath defaultFSPath = new DefaultFSPath();
		FSPathResultList result = defaultFSPath.query(""/"");
		assertTrue(result instanceof FSPathResultList);
	}
	
	/**
	* Test case for the {@link DefaultFSPath#query(String)} method.
	* It tests the query ""/"" and expects a result of type {@link FSPathResultList}.
	*/
	@Test
	public void testQuery6() {
		DefaultFSPath defaultFSPath = new DefaultFSPath();
		FSPathResultList result = defaultFSPath.query(""/"");
		assertTrue(result instanceof FSPathResultList);
	}
	
	/**
	* Test case for the {@link DefaultFSPath#query(String)} method.
	* It tests the query ""/"" and expects a result of type {@link FSPathResultList}.
	*/
	@Test
	public void testQuery7() {
		DefaultFSPath defaultFSPath = new DefaultFSPath();
		FSPathResultList result = defaultFSPath.query(""/"");
		assertTrue(result instanceof FSPathResultList);
	}
	
	/**
	* Test case for the {@link DefaultFSPath#query(String)} method.
	* It tests the query ""/"" and expects a result of type {@link FSPathResultList}.
	*/
	@Test
	public void testQuery8() {
		DefaultFSPath defaultFSPath = new DefaultFSPath();
		FSPathResultList result = defaultFSPath.query(""/"");
		assertTrue(result instanceof FSPathResultList);
	}
	
	/**
	* Test case for the {@link DefaultFSPath#query(String)} method.
	* It tests the query ""/"" and expects a result of type {@link FSPathResultList}.
	*/
	@Test
	public void testQuery9() {
		DefaultFSPath defaultFSPath = new DefaultFSPath();
		FSPathResultList result = defaultFSPath.query(""/"");
		assertTrue(result instanceof FSPathResultList);
	}
	
	/**
	* Test case for the {@link DefaultFSPath#query(String)} method.
	* It tests the query ""/"" and expects a result of type {@link FSPathResultList}.
	*/
	@Test
	public void testQuery10() {
		DefaultFSPath defaultFSPath = new DefaultFSPath();
		FSPathResultList result = defaultFSPath.query(""/"");
		assertTrue(result instanceof FSPathResultList);
	}
}

// FSPath.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import net.sf.sugar.fspath.xpath.RegexFunctionResolver;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *  The FSPath interface defines the methods required to query the filesystem.
 *  <br/>
 *  The FSPath language is a subset of XPath.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed to be used to query XML documents.
 *  <br/>
 *  The FSPath language is designed to be used to query the filesystem.
 *  It is not designed"
cmpl-6x1pYWpx6Pgpx8W1HiRgeRCjvynKG,/EvoSuiteBenchmark/scenario2/60_sugar/src/main/java/net/sf/sugar/fspath/FSPathFactory.java,112.19964075088501,length,"// FSPathFactory.java
package net.sf.sugar.fspath;

import java.io.File;

/**
 * @author kbishop
 */
public class FSPathFactory {

    /**
     * @returns FSPath a new DefaultFSPath instance which uses the current user directory (System.getProperty(""user.dir"")) to search from.
     */
    public static FSPath newFSPath() {
        return new DefaultFSPath(new File(System.getProperty(""user.dir"")));
    }
}
","// FSPathFactoryTest.java
package net.sf.sugar.fspath;

import java.io.File;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathFactory}.
* It contains ten unit test cases for the {@link FSPathFactory#newFSPath()} method.
*/
class FSPathFactoryTest {","// FSPathFactoryTest.java
package net.sf.sugar.fspath;

import java.io.File;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathFactory}.
* It contains ten unit test cases for the {@link FSPathFactory#newFSPath()} method.
*/
class FSPathFactoryTest {

	/**
	 * Test of newFSPath method, of class FSPathFactory.
	 */
	@Test
	public void testNewFSPath() {
		System.out.println(""newFSPath"");
		FSPath result = FSPathFactory.newFSPath();
		assertNotNull(result);
		assertEquals(new File(System.getProperty(""user.dir"")), result.getFile());
	}
}

// FSPathTest.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Test class of {@link FSPath}.
 * It contains ten unit test cases for the {@link FSPath#getFile()}, {@link FSPath#getPath()}, {@link FSPath#getParent()}, {@link FSPath#getName()}, {@link FSPath#getAbsolutePath()}, {@link FSPath#getAbsoluteFile()}, {@link FSPath#getCanonicalPath()}, {@link FSPath#getCanonicalFile()}, {@link FSPath#getURI()}, {@link FSPath#getURL()}, {@link FSPath#getTotalSpace()}, {@link FSPath#getFreeSpace()}, {@link FSPath#getUsableSpace()}, {@link FSPath#getFileSystem()}, {@link FSPath#getRoot()}, {@link FSPath#getParentFile()}, {@link FSPath#getNameCount()}, {@link FSPath#getName(int)}, {@link FSPath#subpath(int, int)}, {@link FSPath#isAbsolute()}, {@link FSPath#isDirectory()}, {@link FSPath#isFile()}, {@link FSPath#isHidden()}, {@link FSPath#exists()}, {@link FSPath#canRead()}, {@link FSPath#canWrite()}, {@link FSPath#canExecute()}, {@link FSPath#isReadable()}, {@link FSPath#isWritable()}, {@link FSPath#isExecutable()}, {@link FSPath#isSameFile(FSPath)}, {@link FSPath#isHidden()}, {@link FSPath#toString()}, {@link FSPath#toRealPath(LinkOption...)}, {@link FSPath#toAbsolutePath()}, {@link FSPath#toFile()}, {@link FSPath#toPath()}, {@link FSPath#register(WatchService, WatchEvent.Kind[], WatchEvent.Modifier...)}, {@link FSPath#register(WatchService, WatchEvent.Kind[])}, {@link FSPath#getFileSystem()}, {@link FSPath#getName(int)}, {@link FSPath#getNameCount()}, {@link FSPath#getParent()}, {@link FSPath#getRoot()}, {@link FSPath#iterator()}, {@link FSPath#subpath(int, int)}, {@link FSPath#compareTo(FSPath)}, {@link FSPath#endsWith(FSPath)}, {@link FSPath#startsWith(FSPath)}, {@link FSPath#normalize()}, {@link FSPath#resolve(FSPath)}, {@link FSPath#resolveSibling(FSPath)}, {@link FSPath#relativize(FSPath)}, {@link FSPath#toUri()}, {@link FSPath#toAbsolutePath()}, {@link FSPath#toRealPath(LinkOption...)}, {@link FSPath#toFile()}, {@link FSPath#register(WatchService, WatchEvent.Kind[], WatchEvent.Modifier...)}, {@link FSPath#register(WatchService, WatchEvent.Kind[])}, {@link FSPath#getFileName()}, {@link FSPath#getParent()}, {@link FSPath#getRoot()}, {@link FSPath#iterator()}, {@link FSPath#compareTo(FSPath)}, {@link FSPath#endsWith(FSPath)}, {@link FSPath#startsWith(FSPath)}, {@link FSPath#normalize()}, {@link FSPath#resolve(FSPath)}, {@link FSPath#resolveSibling(FSPath)}, {@link FSPath#relativize(FSPath)}, {@link FSPath#toUri()}, {@link FSPath#toAbsolutePath()}, {@link FSPath#toRealPath(LinkOption...)}, {@link FSPath#toFile()}, {@link FSPath#register(WatchService, WatchEvent.Kind[], WatchEvent.Modifier...)}, {@link FSPath#register(WatchService, WatchEvent.Kind[])}, {@link FSPath#getFileName()}, {@link FSPath#getParent()}, {@link FSPath#getRoot()}, {@link FSPath#iterator()}, {@link FSPath#compareTo(FSPath)}, {@link FSPath#endsWith(FSPath)}, {@link FSPath#startsWith(FSPath)}, {@link FSPath#normalize()}, {@link FSPath#resolve(FSPath)}, {@link FSPath#resolveSibling(FSPath)}, {@link FSPath#relativize(FSPath)}, {@link FSPath#toUri()}, {@link FSPath#toAbsolutePath()}, {@link FSPath#toRealPath(LinkOption...)}, {@link FSPath#toFile()}, {@link FSPath#register(WatchService, WatchEvent.Kind[], WatchEvent.Modifier...)}, {@link FSPath#register(WatchService, WatchEvent.Kind[])}, {@link FSPath#getFileName()}, {@link FSPath#getParent()}, {@link FSPath#getRoot()}, {@link FSPath#iterator()}, {@link FSPath#compareTo(FSPath)}, {@link FSPath#endsWith(FSPath)}, {@link FSPath#startsWith(FSPath)}, {@link FSPath#normalize()}, {@link FSPath#resolve(FSPath)}, {@link FSPath#resolveSibling(FSPath)}, {@link FSPath#relativize(FSPath)}, {@link FSPath#toUri()}, {@link FSPath#toAbsolutePath()}, {@link FSPath#toRealPath(LinkOption...)}, {@link FSPath#toFile()}, {@link FSPath#register(WatchService, WatchEvent.Kind[], WatchEvent.Modifier...)}, {@link FSPath#register(WatchService, WatchEvent.Kind[])}, {@link FSPath#getFileName()}, {@link FSPath#getParent()}, {@link FSPath#getRoot()}, {@link FSPath#iterator()}, {@link FSPath#compareTo(FSPath)}, {@link FSPath#endsWith(FSPath)}, {@link FSPath#startsWith(FSPath)}, {@link FSPath#normalize()}, {@link FSPath#resolve(FSPath)}, {@link FSPath#resolveSibling(FSPath)}, {@link FSPath#relativize(FSPath)}, {@link FSPath#toUri()}, {@link FSPath#toAbsolutePath()}, {@link FSPath#toRealPath(LinkOption...)}, {@link FSPath#toFile()}, {@link FSPath#register(WatchService, WatchEvent.Kind[], WatchEvent.Modifier...)}, {@link FSPath#register(WatchService, WatchEvent.Kind[])}, {@link FSPath#getFileName()}, {@link FSPath#getParent()}, {@link FSPath#getRoot()}, {@link FSPath#iterator()}, {@link FSPath#compareTo(FSPath)}, {@link FSPath#endsWith(FSPath)}, {@link FSPath#startsWith(FSPath)}, {@link FSPath#normalize()}, {@link FSPath#resolve(FSPath)}, {@link FSPath#resolveSibling(FSPath)}, {@link FSPath#relativize(FSPath)}, {@link FSPath#toUri()}, {@link FSPath#toAbsolutePath()}, {@link FSPath#toRealPath(LinkOption...)}, {@link FSPath#toFile()}, {@link FSPath#register(WatchService, WatchEvent.Kind[], WatchEvent.Modifier...)}, {@link FSPath#register(WatchService, WatchEvent.Kind[])}, {@link FSPath#getFileName()}, {@link FSPath#getParent()}, {@link FSPath#getRoot()}, {@link FSPath#iterator()}, {@link FSPath#compareTo(FSPath)}, {@link FSPath#endsWith(FSPath)}, {@link FSPath#startsWith(FSPath)}, {@link FSPath#normalize()}, {@link FSPath#resolve(FSPath)}, {@link FSPath#resolveSibling(FSPath)}, {@link FSPath#relativize(FSPath)}, {@link FSPath#toUri()}, {@link FSPath#toAbsolutePath()}, {@link FSPath#toRealPath(LinkOption...)}, {@link FSPath#toFile()}, {@link FSPath#register(WatchService, WatchEvent.Kind[], WatchEvent.Modifier...)}, {@link FSPath#register(WatchService, WatchEvent.Kind[])}, {@link FSPath#getFileName()}, {@link FSPath#getParent()}, {@link FSPath#getRoot()}, {@link FSPath#iterator()}, {@link FSPath#compareTo(FSPath)}, {@link FSPath#endsWith(FSPath)}, {@link FSPath#startsWith(FSPath)}, {@link FSPath#normalize()}, {@link FSPath#resolve(FSPath)}, {@link FSPath#resolveSibling(FSPath)}, {@link FSPath#relativize(FSPath)}, {@link FSPath#toUri()}, {@link FSPath#toAbsolutePath()}, {@link FSPath#toRealPath(LinkOption...)}, {@link FSPath#toFile()}, {@link FSPath#register(WatchService, WatchEvent.Kind[], WatchEvent.Modifier...)}, {@link FSPath#register(WatchService, WatchEvent.Kind[])}, {@link FSPath#getFileName()}, {@link FSPath#getParent()}, {@link FSPath#getRoot()}, {@link FSPath#iterator()}, {@link FSPath#compareTo(FSPath)}, {@link FSPath#endsWith(FSPath)}, {@link FSPath#startsWith(FSPath)}, {@link FSPath#normalize()}, {@link FSPath#resolve(FSPath)}, {@link FSPath#resolveSibling(FSPath)}, {@link FSPath#relativize(FSPath)}, {@link FSPath#toUri()}, {@link FSPath#toAbsolutePath()}, {@link FSPath#toRealPath(LinkOption...)}, {@link FSPath#toFile()}, {@link FSPath#register(WatchService, WatchEvent.Kind[], WatchEvent.Modifier...)}, {@link FSPath#register(WatchService, WatchEvent.Kind[])}, {@link FSPath#getFileName()}, {@link FSPath#getParent()}, {@link FSPath#getRoot()}, {@link FSPath#iterator()}, {@link FSPath#compareTo(FSPath)}, {@link FSPath#endsWith(FSPath)}, {@link FSPath#startsWith(FSPath)}, {@link FSPath#normalize()}, {@link FSPath#resolve(FSPath)}, {@link FSPath#resolveSibling(FSPath)}, {@link FSPath#relativize(FSPath)}, {@link FSPath#toUri()}, {@link FSPath#toAbsolutePath()}, {@link FSPath#toRealPath(LinkOption...)}, {@link FSPath#toFile()}, {@link FSPath#register(WatchService, WatchEvent.Kind[], WatchEvent.Modifier...)}, {@link FSPath#register(WatchService, WatchEvent.Kind[])}, {@link FSPath#getFileName()}, {@link FSPath#getParent()}, {@link FSPath#getRoot()}, {@link FSPath#iterator()}, {@link FSPath#compareTo(FSPath)}, {@link FSPath#endsWith(FSPath)}, {@link FSPath#startsWith(FSPath)}, {@link FSPath#normalize()}, {@link FSPath#resolve(FSPath)}, {@link FSPath#resolveSibling(FSPath)}, {@link FSPath#relativize(FSPath)}, {@link FSPath#toUri()}, {@link FSPath#toAbsolutePath()}, {@link FSPath#toRealPath(LinkOption...)}, {@link FSPath#toFile()}, {@link FSPath#register(WatchService, WatchEvent.Kind[], WatchEvent.Modifier...)}, {@link FSPath#register(WatchService, WatchEvent.Kind[])}, {@link FSPath#getFileName()}, {@link FSPath#getParent()}, {@link FSPath#getRoot()}, {@link FSPath#iterator()}, {@link FSPath#compareTo(FSPath)}, {@link FSPath#endsWith(FSPath)}, {@link FSPath#startsWith(FSPath)}, {@link FSPath#normalize()}, {@link FSPath#resolve(FSPath)}, {@link FSPath#resolveSibling(FSPath)}, {@link FSPath#relativize(FSPath)}, {@link FSPath#toUri()}, {@link FSPath#toAbsolutePath()}, {@link FSPath#toRealPath(LinkOption...)}, {@link FSPath#toFile()}, {@link FSPath#register(WatchService, WatchEvent.Kind[], WatchEvent.Modifier...)}, {@link FSPath#register(WatchService, WatchEvent.Kind[])}, {@link FSPath#getFileName()}, {@link FSPath#getParent()}, {@link FSPath#getRoot()}, {@link FSPath#iterator()}, {@link FSPath#compareTo(FSPath)}, {@link FSPath#endsWith(FSPath)}, {@link FSPath#startsWith(FSPath)}, {@link FSPath#normalize()}, {@link FSPath#resolve(FSPath)}, {@link FSPath#resolveSibling(FSPath)}, {@link FSPath#relativize(FSPath)}, {@link FSPath#toUri()}, {@link FSPath#toAbsolutePath()}, {@link FSPath#toRealPath(LinkOption...)}, {@link FSPath#toFile()}, {@link FSPath#register(WatchService, WatchEvent.Kind[], WatchEvent.Modifier...)}, {@link FSPath#register(WatchService, WatchEvent.Kind[])}, {@link FSPath#getFileName()}, {@link FSPath#getParent()}, {@link FSPath#getRoot()}, {@link FSPath#iterator()}, {@link F"
cmpl-6x1rNMbDwkauLGjBmhSGEgTVV0Zl1,/EvoSuiteBenchmark/scenario2/60_sugar/src/main/java/net/sf/sugar/fspath/FSPathResultListImpl0.java,134.54429292678833,length,"// FSPathResultListImpl.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author kbishop
 * @version $Id$
 */
public class FSPathResultListImpl extends ArrayList<FSPathResult> implements FSPathResultList {

    /**
     *  A convenience method for defining custom filesystem interaction
     *  across the whole list of results.
     *
     *  This method loops through the results and calls the call(Result result)
     *  method of the Callback class passed to it for each individual result.
     *
     * @param Callback - a custom implementation of the Callback interface.
     * @throws IOException
     */
    public FSPathResultList each(Callback callback) throws IOException {
        for (FSPathResult result : this) {
            callback.call(result);
        }
        return this;
    }
}
","// FSPathResultListImplTest.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathResultListImpl}.
* It contains ten unit test cases for the {@link FSPathResultListImpl#each(Callback)} method.
*/
class FSPathResultListImplTest {","// FSPathResultListImplTest.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathResultListImpl}.
* It contains ten unit test cases for the {@link FSPathResultListImpl#each(Callback)} method.
*/
class FSPathResultListImplTest {

	/**
	 * Test case for the {@link FSPathResultListImpl#each(Callback)} method.
	 * It tests the case when the callback method is called for each result.
	 * @throws IOException
	 */
	@Test
	void testEach() throws IOException {
		FSPathResultListImpl list = new FSPathResultListImpl();
		list.add(new FSPathResultImpl(new File(""test1.txt"")));
		list.add(new FSPathResultImpl(new File(""test2.txt"")));
		list.add(new FSPathResultImpl(new File(""test3.txt"")));
		list.add(new FSPathResultImpl(new File(""test4.txt"")));
		list.add(new FSPathResultImpl(new File(""test5.txt"")));
		list.add(new FSPathResultImpl(new File(""test6.txt"")));
		list.add(new FSPathResultImpl(new File(""test7.txt"")));
		list.add(new FSPathResultImpl(new File(""test8.txt"")));
		list.add(new FSPathResultImpl(new File(""test9.txt"")));
		list.add(new FSPathResultImpl(new File(""test10.txt"")));
		
		list.each(new Callback() {
			public void call(FSPathResult result) throws IOException {
				FileWriter writer = new FileWriter(result.getFile());
				writer.write(""Hello World!"");
				writer.close();
			}
		});
		
		for (FSPathResult result : list) {
			FileReader reader = new FileReader(result.getFile());
			char[] buffer = new char[13];
			reader.read(buffer);
			reader.close();
			assertEquals(""Hello World!"", new String(buffer));
		}
	}
}

// FSPathResultListImplTest.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathResultListImpl}.
* It contains ten unit test cases for the {@link FSPathResultListImpl#each(Callback)} method.
*/
class FSPathResultListImplTest {
		
	/**
	 * Test case for the {@link FSPathResultListImpl#each(Callback)} method.
	 * It tests the case when the callback method is called for each result.
	 * @throws IOException
	 */
	@Test
	void testEach() throws IOException {
		FSPathResultListImpl list = new FSPathResultListImpl();
		list.add(new FSPathResultImpl(new File(""test1.txt"")));
		list.add(new FSPathResultImpl(new File(""test2.txt"")));
		list.add(new FSPathResultImpl(new File(""test3.txt"")));
		list.add(new FSPathResultImpl(new File(""test4.txt"")));
		list.add(new FSPathResultImpl(new File(""test5.txt"")));
		list.add(new FSPathResultImpl(new File(""test6.txt"")));
		list.add(new FSPathResultImpl(new File(""test7.txt"")));
		list.add(new FSPathResultImpl(new File(""test8.txt"")));
		list.add(new FSPathResultImpl(new File(""test9.txt"")));
		list.add(new FSPathResultImpl(new File(""test10.txt"")));
		
		list.each(new Callback() {
			public void call(FSPathResult result) throws IOException {
				FileWriter writer = new FileWriter(result.getFile());
				writer.write(""Hello World!"");
				writer.close();
			}
		});
		
		for (FSPathResult result : list) {
			FileReader reader = new FileReader(result.getFile());
			char[] buffer = new char[13];
			reader.read(buffer);
			reader.close();
			assertEquals(""Hello World!"", new String(buffer));
		}
	}
}

// FSPathResultListImplTest.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathResultListImpl}.
* It contains ten unit test cases for the {@link FSPathResultListImpl#each(Callback)} method.
*/
class FSPathResultListImplTest {
		
	/**
	 * Test case for the {@link FSPathResultListImpl#each(Callback)} method.
	 * It tests the case when the callback method is called for each result.
	 * @throws IOException
	 */
	@Test
	void testEach() throws IOException {
		FSPathResultListImpl list = new FSPathResultListImpl();
		list.add(new FSPathResultImpl(new File(""test1.txt"")));
		list.add(new FSPathResultImpl(new File(""test2.txt"")));
		list.add(new FSPathResultImpl(new File(""test3.txt"")));
		list.add(new FSPathResultImpl(new File(""test4.txt"")));
		list.add(new FSPathResultImpl(new File(""test5.txt"")));
		list.add(new FSPathResultImpl(new File(""test6.txt"")));
		list.add(new FSPathResultImpl(new File(""test7.txt"")));
		list.add(new FSPathResultImpl(new File(""test8.txt"")));
		list.add(new FSPathResultImpl(new File(""test9.txt"")));
		list.add(new FSPathResultImpl(new File(""test10.txt"")));
		
		list.each(new Callback() {
			public void call(FSPathResult result) throws IOException {
				FileWriter writer = new FileWriter(result.getFile());
				writer.write(""Hello World!"");
				writer.close();
			}
		});
		
		for (FSPathResult result : list) {
			FileReader reader = new FileReader(result.getFile());
			char[] buffer = new char[13];
			reader.read(buffer);
			reader.close();
			assertEquals(""Hello World!"", new String(buffer));
		}
	}
}

// FSPathResultListImplTest.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathResultListImpl}.
* It contains ten unit test cases for the {@link FSPathResultListImpl#each(Callback)} method.
*/
class FSPathResultListImplTest {
		
	/**
	 * Test case for the {@link FSPathResultListImpl#each(Callback)} method.
	 * It tests the case when the callback method is called for each result.
	 * @throws IOException
	 */
	@Test
	void testEach() throws IOException {
		FSPathResultListImpl list = new FSPathResultListImpl();
		list.add(new FSPathResultImpl(new File(""test1.txt"")));
		list.add(new FSPathResultImpl(new File(""test2.txt"")));
		list.add(new FSPathResultImpl(new File(""test3.txt"")));
		list.add(new FSPathResultImpl(new File(""test4.txt"")));
		list.add(new FSPathResultImpl(new File(""test5.txt"")));
		list.add(new FSPathResultImpl(new File(""test6.txt"")));
		list.add(new FSPathResultImpl(new File(""test7.txt"")));
		list.add(new FSPathResultImpl(new File(""test8.txt"")));
		list.add(new FSPathResultImpl(new File(""test9.txt"")));
		list.add(new FSPathResultImpl(new File(""test10.txt"")));
		
		list.each(new Callback() {
			public void call(FSPathResult result) throws IOException {
				FileWriter writer = new FileWriter(result.getFile());
				writer.write(""Hello World!"");
				writer.close();
			}
		});
		
		for (FSPathResult result : list) {
			FileReader reader = new FileReader(result.getFile());
			char[] buffer = new char[13];
			reader.read(buffer);
			reader.close();
			assertEquals(""Hello World!"", new String(buffer));
		}
	}
}

// FSPathResultListImplTest.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathResultListImpl}.
* It contains ten unit test cases for the {@link FSPathResultListImpl#each(Callback)} method.
*/
class FSPathResultListImplTest {
		
	/**
	 * Test case for the {@link FSPathResultListImpl#each(Callback)} method.
	 * It tests the case when the callback method is called for each result.
	 * @throws IOException
	 */
	@Test
	void testEach() throws IOException {
		FSPathResultListImpl list = new FSPathResultListImpl();
		list.add(new FSPathResultImpl(new File(""test1.txt"")));
		list.add(new FSPathResultImpl(new File(""test2.txt"")));
		list.add(new FSPathResultImpl(new File(""test3.txt"")));
		list.add(new FSPathResultImpl(new File(""test4.txt"")));
		list.add(new FSPathResultImpl(new File(""test5.txt"")));
		list.add(new FSPathResultImpl(new File(""test6.txt"")));
		list.add(new FSPathResultImpl(new File(""test7.txt"")));
		list.add(new FSPathResultImpl(new File(""test8.txt"")));
		list.add(new FSPathResultImpl(new File(""test9.txt"")));
		list.add(new FSPathResultImpl(new File(""test10.txt"")));
		
		list.each(new Callback() {
			public void call(FSPathResult result) throws IOException {
				FileWriter writer = new FileWriter(result.getFile());
				writer.write(""Hello World!"");
				writer.close();
			}
		});
		
		for (FSPathResult result : list) {
			FileReader reader = new FileReader(result.getFile());
			char[] buffer = new char[13];
			reader.read(buffer);
			reader.close();
			assertEquals(""Hello World!"", new String(buffer));
		}
	}
}

// FSPathResultListImplTest.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathResultListImpl}.
* It contains ten unit test cases for the {@link FSPathResultListImpl#each(Callback)} method.
*/
class FSPathResultListImplTest {
		
	/**
	 * Test case for the {@link FSPathResultListImpl#each(Callback)} method.
	 * It tests the case when the callback method is called for each result.
	 * @throws IOException
	 */
	@Test
	void testEach() throws IOException {
		FSPathResultListImpl list = new FSPathResultListImpl();
		list.add(new FSPathResultImpl(new File(""test1.txt"")));
		list.add(new FSPathResultImpl(new File(""test2.txt"")));
		list.add(new FSPathResultImpl(new File(""test3.txt"")));
		list.add(new FSPathResultImpl(new File(""test4.txt"")));
		list.add(new FSPathResultImpl(new File(""test5.txt"")));
		list.add(new FSPathResultImpl(new File(""test6.txt"")));
		list.add(new FSPathResultImpl(new File(""test7.txt"")));
		list.add(new FSPathResultImpl(new File(""test8.txt"")));
		list.add(new FSPathResultImpl(new File(""test9.txt"")));
		list.add(new FSPathResultImpl(new File(""test10.txt"")));
		
		list.each(new Callback() {
			public void call(FSPathResult result) throws IOException {
				FileWriter writer = new FileWriter(result.getFile());
				writer.write(""Hello World!"");
				writer.close();
			}
		});
		
		for (FSPathResult result : list) {
			FileReader reader = new FileReader(result.getFile());
			char[] buffer = new char[13];
			reader.read(buffer);
			reader.close();
			assertEquals(""Hello World!"", new String(buffer));
		}
	}
}

// FSPathResultListImplTest.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathResultListImpl}.
* It"
cmpl-6x1tXPfnY0kJ6sHYN4BIt9u9kQlps,/EvoSuiteBenchmark/scenario2/60_sugar/src/main/java/net/sf/sugar/fspath/FSPathResultListImpl1.java,126.64321446418762,length,"// FSPathResultListImpl.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author kbishop
 * @version $Id$
 */
public class FSPathResultListImpl extends ArrayList<FSPathResult> implements FSPathResultList {

    /**
     *  Deletes each file contained in this FSPathResultList.
     *  <br/>
     *  <pre>
     *  ************************************************************************
     *  *               IMPORTANT !!!!!    Use with caution                    *
     *  *   This method makes it extremely easy to trash your filesystem       *
     *  *   Its advised that FSPath queries are tested thouroughly before use  *
     *  *   in order to verify which files would be deleted                    *
     *  *                                                                      *
     *  ************************************************************************
     *  </pre>
     *
     * @returns FSPathResultModificationListImpl - all successfully deleted files<br/>
     *  will be added as a success, and the failures will be added as failures.
     * @throws IOException - NOTE this method does not currently thrown an IOException
     * @throws OperationNotPermittedException - this exception will be thrown if<br/>
     *  The FSPathResult objects contained in this FSPathResultList don't contain<br/>
     *  java.io.File objects<br/>
     *  (i.e the FSPath query was written to return Boolean, String nor numerical results).
     */
    public FSPathResultModificationList delete() throws IOException, OperationNotPermittedException {
        if (!isListOfFiles()) {
            throw new OperationNotPermittedException(""Delete is only permitted on FSPathResult objects containing a File object"");
        }
        FSPathResultModificationList deletionList = new FSPathResultModificationListImpl();
        for (FSPathResult result : this) {
            try {
                File file = result.getFile();
                boolean success = file.delete();
                if (success) {
                    deletionList.addSuccess(result);
                } else {
                    deletionList.addFailure(result);
                }
            } catch (Exception e) {
                //todo: log this ?
                deletionList.addFailure(result);
            }
        }
        return deletionList;
    }
}
","// FSPathResultListImplTest.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathResultListImpl}.
* It contains ten unit test cases for the {@link FSPathResultListImpl#delete()} method.
*/
class FSPathResultListImplTest {","// FSPathResultListImplTest.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathResultListImpl}.
* It contains ten unit test cases for the {@link FSPathResultListImpl#delete()} method.
*/
class FSPathResultListImplTest {

	/**
	 * Test of delete method, of class FSPathResultListImpl.
	 * This test case is for the scenario where the FSPathResultListImpl contains
	 * a single FSPathResult object that contains a File object.
	 * The file is deleted and the FSPathResultModificationListImpl returned by the
	 * delete method is checked to ensure that it contains a single success.
	 */
	@Test
	public void testDelete_SingleFile() throws Exception {
		System.out.println(""delete"");
		File file = File.createTempFile(""testDelete_SingleFile"", "".tmp"");
		FSPathResultListImpl instance = new FSPathResultListImpl();
		instance.add(new FSPathResultImpl(file));
		FSPathResultModificationList result = instance.delete();
		assertEquals(1, result.getSuccesses().size());
		assertEquals(0, result.getFailures().size());
	}

	/**
	 * Test of delete method, of class FSPathResultListImpl.
	 * This test case is for the scenario where the FSPathResultListImpl contains
	 * a single FSPathResult object that contains a File object.
	 * The file is deleted and the FSPathResultModificationListImpl returned by the
	 * delete method is checked to ensure that it contains a single success.
	 */
	@Test
	public void testDelete_SingleFile_NonExistant() throws Exception {
		System.out.println(""delete"");
		File file = File.createTempFile(""testDelete_SingleFile_NonExistant"", "".tmp"");
		file.delete();
		FSPathResultListImpl instance = new FSPathResultListImpl();
		instance.add(new FSPathResultImpl(file));
		FSPathResultModificationList result = instance.delete();
		assertEquals(0, result.getSuccesses().size());
		assertEquals(1, result.getFailures().size());
	}

	/**
	 * Test of delete method, of class FSPathResultListImpl.
	 * This test case is for the scenario where the FSPathResultListImpl contains
	 * a single FSPathResult object that contains a File object.
	 * The file is deleted and the FSPathResultModificationListImpl returned by the
	 * delete method is checked to ensure that it contains a single success.
	 */
	@Test
	public void testDelete_SingleFile_ReadOnly() throws Exception {
		System.out.println(""delete"");
		File file = File.createTempFile(""testDelete_SingleFile_ReadOnly"", "".tmp"");
		file.setReadOnly();
		FSPathResultListImpl instance = new FSPathResultListImpl();
		instance.add(new FSPathResultImpl(file));
		FSPathResultModificationList result = instance.delete();
		assertEquals(0, result.getSuccesses().size());
		assertEquals(1, result.getFailures().size());
	}

	/**
	 * Test of delete method, of class FSPathResultListImpl.
	 * This test case is for the scenario where the FSPathResultListImpl contains
	 * a single FSPathResult object that contains a File object.
	 * The file is deleted and the FSPathResultModificationListImpl returned by the
	 * delete method is checked to ensure that it contains a single success.
	 */
	@Test
	public void testDelete_SingleFile_Directory() throws Exception {
		System.out.println(""delete"");
		File file = File.createTempFile(""testDelete_SingleFile_Directory"", "".tmp"");
		file.delete();
		file.mkdir();
		FSPathResultListImpl instance = new FSPathResultListImpl();
		instance.add(new FSPathResultImpl(file));
		FSPathResultModificationList result = instance.delete();
		assertEquals(0, result.getSuccesses().size());
		assertEquals(1, result.getFailures().size());
	}

	/**
	 * Test of delete method, of class FSPathResultListImpl.
	 * This test case is for the scenario where the FSPathResultListImpl contains
	 * a single FSPathResult object that contains a File object.
	 * The file is deleted and the FSPathResultModificationListImpl returned by the
	 * delete method is checked to ensure that it contains a single success.
	 */
	@Test
	public void testDelete_SingleFile_Directory_NonEmpty() throws Exception {
		System.out.println(""delete"");
		File file = File.createTempFile(""testDelete_SingleFile_Directory_NonEmpty"", "".tmp"");
		file.delete();
		file.mkdir();
		File child = new File(file, ""child"");
		child.createNewFile();
		FSPathResultListImpl instance = new FSPathResultListImpl();
		instance.add(new FSPathResultImpl(file));
		FSPathResultModificationList result = instance.delete();
		assertEquals(0, result.getSuccesses().size());
		assertEquals(1, result.getFailures().size());
	}

	/**
	 * Test of delete method, of class FSPathResultListImpl.
	 * This test case is for the scenario where the FSPathResultListImpl contains
	 * a single FSPathResult object that contains a File object.
	 * The file is deleted and the FSPathResultModificationListImpl returned by the
	 * delete method is checked to ensure that it contains a single success.
	 */
	@Test
	public void testDelete_SingleFile_Directory_NonEmpty_Recursive() throws Exception {
		System.out.println(""delete"");
		File file = File.createTempFile(""testDelete_SingleFile_Directory_NonEmpty_Recursive"", "".tmp"");
		file.delete();
		file.mkdir();
		File child = new File(file, ""child"");
		child.createNewFile();
		FSPathResultListImpl instance = new FSPathResultListImpl();
		instance.add(new FSPathResultImpl(file));
		FSPathResultModificationList result = instance.delete();
		assertEquals(0, result.getSuccesses().size());
		assertEquals(1, result.getFailures().size());
	}

	/**
	 * Test of delete method, of class FSPathResultListImpl.
	 * This test case is for the scenario where the FSPathResultListImpl contains
	 * a single FSPathResult object that contains a File object.
	 * The file is deleted and the FSPathResultModificationListImpl returned by the
	 * delete method is checked to ensure that it contains a single success.
	 */
	@Test
	public void testDelete_SingleFile_Directory_NonEmpty_Recursive_ReadOnly() throws Exception {
		System.out.println(""delete"");
		File file = File.createTempFile(""testDelete_SingleFile_Directory_NonEmpty_Recursive_ReadOnly"", "".tmp"");
		file.delete();
		file.mkdir();
		File child = new File(file, ""child"");
		child.createNewFile();
		child.setReadOnly();
		FSPathResultListImpl instance = new FSPathResultListImpl();
		instance.add(new FSPathResultImpl(file));
		FSPathResultModificationList result = instance.delete();
		assertEquals(0, result.getSuccesses().size());
		assertEquals(1, result.getFailures().size());
	}

	/**
	 * Test of delete method, of class FSPathResultListImpl.
	 * This test case is for the scenario where the FSPathResultListImpl contains
	 * a single FSPathResult object that contains a File object.
	 * The file is deleted and the FSPathResultModificationListImpl returned by the
	 * delete method is checked to ensure that it contains a single success.
	 */
	@Test
	public void testDelete_SingleFile_Directory_NonEmpty_Recursive_ReadOnly_DeleteChild() throws Exception {
		System.out.println(""delete"");
		File file = File.createTempFile(""testDelete_SingleFile_Directory_NonEmpty_Recursive_ReadOnly_DeleteChild"", "".tmp"");
		file.delete();
		file.mkdir();
		File child = new File(file, ""child"");
		child.createNewFile();
		child.setReadOnly();
		FSPathResultListImpl instance = new FSPathResultListImpl();
		instance.add(new FSPathResultImpl(file));
		FSPathResultModificationList result = instance.delete();
		assertEquals(0, result.getSuccesses().size());
		assertEquals(1, result.getFailures().size());
	}

	/**
	 * Test of delete method, of class FSPathResultListImpl.
	 * This test case is for the scenario where the FSPathResultListImpl contains
	 * a single FSPathResult object that contains a File object.
	 * The file is deleted and the FSPathResultModificationListImpl returned by the
	 * delete method is checked to ensure that it contains a single success.
	 */
	@Test
	public void testDelete_SingleFile_Directory_NonEmpty_Recursive_ReadOnly_DeleteChild_DeleteParent() throws Exception {
		System.out.println(""delete"");
		File file = File.createTempFile(""testDelete_SingleFile_Directory_NonEmpty_Recursive_ReadOnly_DeleteChild_DeleteParent"", "".tmp"");
		file.delete();
		file.mkdir();
		File child = new File(file, ""child"");
		child.createNewFile();
		child.setReadOnly();
		FSPathResultListImpl instance = new FSPathResultListImpl();
		instance.add(new FSPathResultImpl(file));
		FSPathResultModificationList result = instance.delete();
		assertEquals(0, result.getSuccesses().size());
		assertEquals(1, result.getFailures().size());
	}

	/**
	 * Test of delete method, of class FSPathResultListImpl.
	 * This test case is for the scenario where the FSPathResultListImpl contains
	 * a single FSPathResult object that contains a File object.
	 * The file is deleted and the FSPathResultModificationListImpl returned by the
	 * delete method is checked to ensure that it contains a single success.
	 */
	@Test
	public void testDelete_SingleFile_Directory_NonEmpty_Recursive_ReadOnly_DeleteChild_DeleteParent_DeleteChild() throws Exception {
		System.out.println(""delete"");
		File file = File.createTempFile(""testDelete_SingleFile_Directory_NonEmpty_Recursive_ReadOnly_DeleteChild_DeleteParent_DeleteChild"", "".tmp"");
		file.delete();
		file.mkdir();
		File child = new File(file, ""child"");
		child.createNewFile();
		child.setReadOnly();
		FSPathResultListImpl instance = new FSPathResultListImpl();
		instance.add(new FSPathResultImpl(file));
		FSPathResultModificationList result = instance.delete();
		assertEquals(0, result.getSuccesses().size());
		assertEquals(1, result.getFailures().size());
	}

	/**
	 * Test of delete method, of class FSPathResultListImpl.
	 * This test case is for the scenario where the FSPathResultListImpl contains
	 * a single FSPathResult object that contains a File object.
	 * The file is deleted and the FSPathResultModificationListImpl returned by the
	 * delete method is checked to ensure that it contains a single success.
	 */
	@Test
	public void testDelete_SingleFile_Directory_NonEmpty_Recursive_ReadOnly_DeleteChild_DeleteParent_DeleteChild_DeleteParent() throws Exception {
		System.out.println(""delete"");
		File file = File.createTempFile(""testDelete_SingleFile_Directory_NonEmpty_Recursive_ReadOnly_DeleteChild_DeleteParent_DeleteChild_DeleteParent"", "".tmp"");
		file.delete();
		file.mkdir();
		File child = new File(file, ""child"");
		child.createNewFile();
		child.setReadOnly();
		FSPathResultListImpl instance = new FSPathResultListImpl();
		instance.add(new FSPathResultImpl(file));
		FSPathResultModificationList result = instance.delete();
		assertEquals(0, result.getSuccesses().size());
		assertEquals(1, result.getFailures().size());
	}
}

// FSPathResultModificationListImpl.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author kbishop
 * @version $Id$
 */
public class FSPathResultModificationListImpl extends ArrayList<FSPathResult> implements FSPathResultModificationList {

    private ArrayList<FSPathResult> successes = new ArrayList<FSPathResult>();
    private ArrayList<FSPathResult> failures = new ArrayList<FSPathResult>();

    public void addSuccess(FSPathResult result) {
        successes.add(result);
    }

    public void addFailure(FSPathResult result) {
        failures.add(result);
    }

    public FSPathResultList getSuccesses() {
        return new FSPathResultListImpl(successes);
    }

    public FSPathResultList getFailures() {
        return new FSPathResultListImpl(failures);
    }
}

// FSPathResultModificationListImplTest.java
package net.sf.sugar.fspath;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FSPathResultModificationListImpl}.
* It contains ten unit test cases for the {@link FSPathResultModificationListImpl#delete()} method.
*/
class FSPathResultModificationListImplTest {
		
	/**
	 * Test of delete method, of class FSPathResultModificationListImpl.
	 * This test case is for the scenario where the FSPathResultModificationListImpl contains
	 * a single FSPathResult object that contains a File object.
	 * The file is deleted and the FSPathResultModificationListImpl returned by the
	 * delete method is checked to ensure that it contains a single success.
	 */
	@Test
	public void testDelete_SingleFile() throws Exception {
		System.out.println(""delete"");
		File file = File.createTempFile(""testDelete_SingleFile"", "".tmp"");
		FSPathResultModificationListImpl instance = new FSPathResultModificationListImpl();
		instance.add(new FSPathResultImpl(file));
		FSPathResultModificationList result = instance.delete();
		assertEquals(1, result.getSuccesses().size());
		assertEquals(0, result.getFailures().size());
	}

	/**
	 * Test of delete method, of class FSPathResultModificationListImpl.
	 * This test case is for the scenario where the FSPathResultModificationListImpl contains
	 * a single FSPathResult object that contains a File object.
	 * The file is deleted and the FSPathResultModificationListImpl returned by the
	 * delete method is checked to ensure that it contains a single success.
	 */
	@Test
	public void testDelete_SingleFile_NonExistant() throws Exception {
		System.out.println(""delete"");
		File file = File.createTempFile(""testDelete_SingleFile_NonExistant"", "".tmp"");
		file.delete();
		FSPathResultModificationList"
