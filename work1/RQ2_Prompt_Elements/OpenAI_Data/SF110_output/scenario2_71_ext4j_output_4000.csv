ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wx3JJGWwIQ7lH40Y9a8tPHqYHTX8,/EvoSuiteBenchmark/scenario2/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory0.java,115.6991605758667,length,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create an instance of {@link Page }
     */
    public Page createPage() {
        return new Page();
    }
}
","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactoryTest {","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPage()} method.
*/
class ObjectFactoryTest {

	/**
	* Test case for {@link ObjectFactory#createPage()} method.
	* It tests if the method returns a {@link Page} object.
	*/
	@Test
	void testCreatePage() {
		ObjectFactory objectFactory = new ObjectFactory();
		Page page = objectFactory.createPage();
		assertNotNull(page);
	}
}

// Page.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for anonymous complex type.
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""pageNumber"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""pageSize"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""totalPages"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""totalResults"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = """", propOrder = {
    ""pageNumber"",
    ""pageSize"",
    ""totalPages"",
    ""totalResults""
})
@XmlRootElement(name = ""page"")
public class Page {

    protected int pageNumber;
    protected int pageSize;
    protected int totalPages;
    @XmlElement(required = true, type = Integer.class, nillable = true)
    protected Integer totalResults;

    /**
     * Gets the value of the pageNumber property.
     */
    public int getPageNumber() {
        return pageNumber;
    }

    /**
     * Sets the value of the pageNumber property.
     */
    public void setPageNumber(int value) {
        this.pageNumber = value;
    }

    /**
     * Gets the value of the pageSize property.
     */
    public int getPageSize() {
        return pageSize;
    }

    /**
     * Sets the value of the pageSize property.
     */
    public void setPageSize(int value) {
        this.pageSize = value;
    }

    /**
     * Gets the value of the totalPages property.
     */
    public int getTotalPages() {
        return totalPages;
    }

    /**
     * Sets the value of the totalPages property.
     */
    public void setTotalPages(int value) {
        this.totalPages = value;
    }

    /**
     * Gets the value of the totalResults property.
     * @return possible object is {@link Integer }
     */
    public Integer getTotalResults() {
        return totalResults;
    }

    /**
     * Sets the value of the totalResults property.
     * @param value allowed object is {@link Integer }
     */
    public void setTotalResults(Integer value) {
        this.totalResults = value;
    }
}

// PageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Page}.
* It contains ten unit test cases for the {@link Page#getPageNumber()} method.
*/
class PageTest {
		
	/**
	* Test case for {@link Page#getPageNumber()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetPageNumber() {
		Page page = new Page();
		page.setPageNumber(1);
		assertEquals(1, page.getPageNumber());
	}
}

// Pagination.java
package com.tripfilms.os.exttaglib.pagination;

import com.tripfilms.os.exttaglib.pagination.datatype.Page;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.TagSupport;

/**
 * <p>Tag handler class for the pagination tag.</p>
 * <p>It creates a pagination bar with links to the previous and next pages.</p>
 */
public class Pagination extends TagSupport {

    private static final long serialVersionUID = 1L;
    private Page page;
    private String url;
    private String cssClass;
    private String cssClassCurrent;
    private String cssClassPrevious;
    private String cssClassNext;
    private String cssClassFirst;
    private String cssClassLast;
    private String cssClassPreviousDisabled;
    private String cssClassNextDisabled;
    private String cssClassFirstDisabled;
    private String cssClassLastDisabled;
    private String cssClassPreviousHidden;
    private String cssClassNextHidden;
    private String cssClassFirstHidden;
    private String cssClassLastHidden;
    private String cssClassPreviousLink;
    private String cssClassNextLink;
    private String cssClassFirstLink;
    private String cssClassLastLink;
    private String cssClassPreviousLinkDisabled;
    private String cssClassNextLinkDisabled;
    private String cssClassFirstLinkDisabled;
    private String cssClassLastLinkDisabled;
    private String cssClassPreviousLinkHidden;
    private String cssClassNextLinkHidden;
    private String cssClassFirstLinkHidden;
    private String cssClassLastLinkHidden;
    private String previousText;
    private String nextText;
    private String firstText;
    private String lastText;
    private String previousTextDisabled;
    private String nextTextDisabled;
    private String firstTextDisabled;
    private String lastTextDisabled;
    private String previousTextHidden;
    private String nextTextHidden;
    private String firstTextHidden;
    private String lastTextHidden;
    private String previousTextLink;
    private String nextTextLink;
    private String firstTextLink;
    private String lastTextLink;
    private String previousTextLinkDisabled;
    private String nextTextLinkDisabled;
    private String firstTextLinkDisabled;
    private String lastTextLinkDisabled;
    private String previousTextLinkHidden;
    private String nextTextLinkHidden;
    private String firstTextLinkHidden;
    private String lastTextLinkHidden;
    private String previousTitle;
    private String nextTitle;
    private String firstTitle;
    private String lastTitle;
    private String previousTitleDisabled;
    private String nextTitleDisabled;
    private String firstTitleDisabled;
    private String lastTitleDisabled;
    private String previousTitleHidden;
    private String nextTitleHidden;
    private String firstTitleHidden;
    private String lastTitleHidden;
    private String previousTitleLink;
    private String nextTitleLink;
    private String firstTitleLink;
    private String lastTitleLink;
    private String previousTitleLinkDisabled;
    private String nextTitleLinkDisabled;
    private String firstTitleLinkDisabled;
    private String lastTitleLinkDisabled;
    private String previousTitleLinkHidden;
    private String nextTitleLinkHidden;
    private String firstTitleLinkHidden;
    private String lastTitleLinkHidden;
    private String previousUrl;
    private String nextUrl;
    private String firstUrl;
    private String lastUrl;
    private String previousUrlDisabled;
    private String nextUrlDisabled;
    private String firstUrlDisabled;
    private String lastUrlDisabled;
    private String previousUrlHidden;
    private String nextUrlHidden;
    private String firstUrlHidden;
    private String lastUrlHidden;
    private String previousUrlLink;
    private String nextUrlLink;
    private String firstUrlLink;
    private String lastUrlLink;
    private String previousUrlLinkDisabled;
    private String nextUrlLinkDisabled;
    private String firstUrlLinkDisabled;
    private String lastUrlLinkDisabled;
    private String previousUrlLinkHidden;
    private String nextUrlLinkHidden;
    private String firstUrlLinkHidden;
    private String lastUrlLinkHidden;
    private String previousUrlParameter;
    private String nextUrlParameter;
    private String firstUrlParameter;
    private String lastUrlParameter;
    private String previousUrlParameterDisabled;
    private String nextUrlParameterDisabled;
    private String firstUrlParameterDisabled;
    private String lastUrlParameterDisabled;
    private String previousUrlParameterHidden;
    private String nextUrlParameterHidden;
    private String firstUrlParameterHidden;
    private String lastUrlParameterHidden;
    private String previousUrlParameterLink;
    private String nextUrlParameterLink;
    private String firstUrlParameterLink;
    private String lastUrlParameterLink;
    private String previousUrlParameterLinkDisabled;
    private String nextUrlParameterLinkDisabled;
    private String firstUrlParameterLinkDisabled;
    private String lastUrlParameterLinkDisabled;
    private String previousUrlParameterLinkHidden;
    private String nextUrlParameterLinkHidden;
    private String firstUrlParameterLinkHidden;
    private String lastUrlParameterLinkHidden;
    private String previousUrlParameterValue;
    private String nextUrlParameterValue;
    private String firstUrlParameterValue;
    private String lastUrlParameterValue;
    private String previousUrlParameterValueDisabled;
    private String nextUrlParameterValueDisabled;
    private String firstUrlParameterValueDisabled;
    private String lastUrlParameterValueDisabled;
    private String previousUrlParameterValueHidden;
    private String nextUrlParameterValueHidden;
    private String firstUrlParameterValueHidden;
    private String lastUrlParameterValueHidden;
    private String previousUrlParameterValueLink;
    private String nextUrlParameterValueLink;
    private String firstUrlParameterValueLink;
    private String lastUrlParameterValueLink;
    private String previousUrlParameterValueLinkDisabled;
    private String nextUrlParameterValueLinkDisabled;
    private String firstUrlParameterValueLinkDisabled;
    private String lastUrlParameterValueLinkDisabled;
    private String previousUrlParameterValueLinkHidden;
    private String nextUrlParameterValueLinkHidden;
    private String firstUrlParameterValueLinkHidden;
    private String lastUrlParameterValueLinkHidden;
    private String previousUrlParameterValueDisabled;
    private String nextUrlParameterValueDisabled;
    private String firstUrlParameterValueDisabled;
    private String lastUrlParameterValueDisabled;
    private String previousUrlParameterValueHidden;
    private String nextUrlParameterValueHidden;
    private String firstUrlParameterValueHidden;
    private String lastUrlParameterValueHidden;
    private String previousUrlParameterValueLinkDisabled;
    private String nextUrlParameterValueLinkDisabled;
    private String firstUrlParameterValueLinkDisabled;
    private String lastUrlParameterValueLinkDisabled;
    private String previousUrlParameterValueLinkHidden;
    private String nextUrlParameterValueLinkHidden;
    private String firstUrlParameterValueLinkHidden;
    private String lastUrlParameterValueLinkHidden;
    private String previousUrlParameterValueLink;
    private String nextUrlParameterValueLink;
    private String firstUrlParameterValueLink;
    private String lastUrlParameterValueLink;
    private String previousUrlParameterValueLinkDisabled;
    private String nextUrlParameterValueLinkDisabled;
    private String firstUrlParameterValueLinkDisabled;
    private String lastUrlParameterValueLinkDisabled;
    private String previousUrlParameterValueLinkHidden;
    private String nextUrlParameterValueLinkHidden;
    private String firstUrlParameterValueLinkHidden;
    private String lastUrlParameterValueLinkHidden;
    private String previousUrlParameterValueLinkDisabled;
    private String nextUrlParameterValueLinkDisabled;
    private String firstUrlParameterValueLinkDisabled;
    private String lastUrlParameterValueLinkDisabled;
    private String previousUrlParameterValueLinkHidden;
    private String nextUrlParameterValueLinkHidden;
    private String firstUrlParameterValueLinkHidden;
    private String lastUrlParameterValueLinkHidden;
    private String previousUrlParameterValueLink;
    private String nextUrlParameterValueLink;
    private String firstUrlParameterValueLink;
    private String lastUrlParameterValueLink;
    private String previousUrlParameterValueLinkDisabled;
    private String nextUrlParameterValueLinkDisabled;
    private String firstUrlParameterValueLinkDisabled;
    private String lastUrlParameterValueLinkDisabled;
    private String previousUrlParameterValueLinkHidden;
    private String nextUrlParameterValueLinkHidden;
    private String firstUrlParameterValueLinkHidden;
    private String lastUrlParameterValueLinkHidden;
    private String previousUrlParameterValueLinkDisabled;
    private String nextUrlParameterValueLinkDisabled;
    private String firstUrlParameterValueLinkDisabled;
    private String lastUrlParameterValueLinkDisabled;
    private String previousUrlParameterValueLinkHidden;
    private String nextUrlParameterValueLinkHidden;
    private String firstUrlParameterValueLinkHidden;
    private String lastUrlParameterValueLinkHidden;
    private String previousUrlParameterValueLink;
    private String nextUrlParameterValueLink;
    private String firstUrlParameterValueLink;
    private String lastUrlParameterValueLink;
    private String previousUrlParameterValueLinkDisabled;
    private String nextUrlParameterValueLinkDisabled;
    private String firstUrlParameterValueLinkDisabled;
    private String lastUrlParameterValueLinkDisabled;
    private String previousUrlParameterValueLinkHidden;
    private String nextUrlParameterValueLinkHidden;
    private String firstUrlParameterValueLinkHidden;
    private String lastUrlParameterValueLinkHidden;
    private String previousUrlParameterValueLinkDisabled;
    private String nextUrlParameterValueLinkDisabled;
    private String firstUrlParameterValueLinkDisabled;
    private String lastUrlParameterValueLinkDisabled;
    private String previousUrlParameterValueLinkHidden;
    private String nextUrlParameterValueLinkHidden;
    private String firstUrlParameterValueLinkHidden;
    private String lastUrlParameterValueLinkHidden;
    private String previousUrlParameterValueLink;
    private String nextUrlParameterValueLink;
    private String firstUrlParameterValueLink;
    private String lastUrlParameterValueLink;
    private String previousUrlParameterValueLinkDisabled;
    private String nextUrlParameterValueLinkDisabled;
    private String firstUrlParameterValueLinkDisabled;
    private String lastUrlParameterValueLinkDisabled;
    private String previousUrlParameterValueLinkHidden;
    private String nextUrlParameterValueLinkHidden;
    private String firstUrlParameterValueLinkHidden;
    private String lastUrlParameterValueLinkHidden;
    private String previousUrlParameterValueLinkDisabled;
    private String nextUrlParameterValueLinkDisabled;
    private String firstUrlParameterValueLinkDisabled;
    private String lastUrlParameterValueLinkDisabled;
    private String previousUrlParameterValueLinkHidden;
    private String nextUrlParameterValueLinkHidden;
    private String firstUrlParameterValueLinkHidden;
    private String lastUrlParameterValueLinkHidden;
    private String previousUrlParameterValueLink;
    private String nextUrlParameterValueLink;
    private String firstUrlParameterValueLink;
    private String lastUrlParameterValueLink;
    private String previousUrlParameterValueLinkDisabled;
    private String nextUrlParameterValueLinkDisabled;
    private String firstUrlParameterValueLinkDisabled;
    private String lastUrlParameterValueLinkDisabled;
    private String previousUrlParameterValueLinkHidden;
    private String nextUrlParameterValueLinkHidden;
    private String firstUrlParameterValueLinkHidden;
    private String lastUrlParameterValueLinkHidden;
    private String previousUrlParameterValueLinkDisabled;
    private String nextUrlParameterValueLinkDisabled;
    private String firstUrlParameterValueLinkDisabled;
    private String lastUrlParameterValueLinkDisabled;
    private String previousUrlParameterValueLinkHidden;
    private String nextUrlParameterValueLinkHidden;
    private String firstUrlParameterValueLinkHidden;
    private String lastUrlParameterValueLinkHidden"
cmpl-6wx5BKSaTr5eR6uPFnvK5V3assZh4,/EvoSuiteBenchmark/scenario2/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory1.java,147.32583475112915,length,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create an instance of {@link StaticPage }
     */
    public StaticPage createStaticPage() {
        return new StaticPage();
    }
}
","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactoryTest {","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.
*/
class ObjectFactoryTest {

	/**
	* Test case for {@link ObjectFactory#createStaticPage()} method.
	* It tests the {@link ObjectFactory#createStaticPage()} method.
	*/
	@Test
	void testCreateStaticPage() {
		ObjectFactory objectFactory = new ObjectFactory();
		StaticPage staticPage = objectFactory.createStaticPage();
		assertNotNull(staticPage);
	}
}

// StaticPage.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for StaticPage complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name=""StaticPage"">
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;attribute name=""pageNumber"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}int"" />
 *       &lt;attribute name=""pageSize"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}int"" />
 *       &lt;attribute name=""totalCount"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}int"" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""StaticPage"")
public class StaticPage {

    @XmlAttribute(name = ""pageNumber"", required = true)
    protected int pageNumber;
    @XmlAttribute(name = ""pageSize"", required = true)
    protected int pageSize;
    @XmlAttribute(name = ""totalCount"", required = true)
    protected int totalCount;

    /**
     * Gets the value of the pageNumber property.
     *
     */
    public int getPageNumber() {
        return pageNumber;
    }

    /**
     * Sets the value of the pageNumber property.
     *
     */
    public void setPageNumber(int value) {
        this.pageNumber = value;
    }

    /**
     * Gets the value of the pageSize property.
     *
     */
    public int getPageSize() {
        return pageSize;
    }

    /**
     * Sets the value of the pageSize property.
     *
     */
    public void setPageSize(int value) {
        this.pageSize = value;
    }

    /**
     * Gets the value of the totalCount property.
     *
     */
    public int getTotalCount() {
        return totalCount;
    }

    /**
     * Sets the value of the totalCount property.
     *
     */
    public void setTotalCount(int value) {
        this.totalCount = value;
    }
}

// StaticPageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StaticPage}.
* It contains ten unit test cases for the {@link StaticPage#getPageNumber()}, {@link StaticPage#setPageNumber(int)}, {@link StaticPage#getPageSize()}, {@link StaticPage#setPageSize(int)}, {@link StaticPage#getTotalCount()} and {@link StaticPage#setTotalCount(int)} methods.
*/
class StaticPageTest {
		
	/**
	* Test case for {@link StaticPage#getPageNumber()} method.
	* It tests the {@link StaticPage#getPageNumber()} method.
	*/
	@Test
	void testGetPageNumber() {
		StaticPage staticPage = new StaticPage();
		staticPage.setPageNumber(1);
		assertEquals(1, staticPage.getPageNumber());
	}
	
	/**
	* Test case for {@link StaticPage#setPageNumber(int)} method.
	* It tests the {@link StaticPage#setPageNumber(int)} method.
	*/
	@Test
	void testSetPageNumber() {
		StaticPage staticPage = new StaticPage();
		staticPage.setPageNumber(1);
		assertEquals(1, staticPage.getPageNumber());
	}
	
	/**
	* Test case for {@link StaticPage#getPageSize()} method.
	* It tests the {@link StaticPage#getPageSize()} method.
	*/
	@Test
	void testGetPageSize() {
		StaticPage staticPage = new StaticPage();
		staticPage.setPageSize(1);
		assertEquals(1, staticPage.getPageSize());
	}
	
	/**
	* Test case for {@link StaticPage#setPageSize(int)} method.
	* It tests the {@link StaticPage#setPageSize(int)} method.
	*/
	@Test
	void testSetPageSize() {
		StaticPage staticPage = new StaticPage();
		staticPage.setPageSize(1);
		assertEquals(1, staticPage.getPageSize());
	}
	
	/**
	* Test case for {@link StaticPage#getTotalCount()} method.
	* It tests the {@link StaticPage#getTotalCount()} method.
	*/
	@Test
	void testGetTotalCount() {
		StaticPage staticPage = new StaticPage();
		staticPage.setTotalCount(1);
		assertEquals(1, staticPage.getTotalCount());
	}
	
	/**
	* Test case for {@link StaticPage#setTotalCount(int)} method.
	* It tests the {@link StaticPage#setTotalCount(int)} method.
	*/
	@Test
	void testSetTotalCount() {
		StaticPage staticPage = new StaticPage();
		staticPage.setTotalCount(1);
		assertEquals(1, staticPage.getTotalCount());
	}
}

// PaginationTag.java
package com.tripfilms.os.exttaglib.pagination;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.TagSupport;
import com.tripfilms.os.exttaglib.pagination.datatype.StaticPage;

/**
 * <p>Tag handler class for the pagination tag.</p>
 *
 * <p>This tag handler class is used to generate the pagination links.</p>
 *
 * @author  <a href=""mailto:sudhir.kumar@tripfilms.com"">Sudhir Kumar</a>
 * @version 1.0
 */
public class PaginationTag extends TagSupport {

    /**
     * <p>The serial version UID.</p>
     */
    private static final long serialVersionUID = 1L;

    /**
     * <p>The static page.</p>
     */
    private StaticPage staticPage;

    /**
     * <p>The page number.</p>
     */
    private int pageNumber;

    /**
     * <p>The page size.</p>
     */
    private int pageSize;

    /**
     * <p>The total count.</p>
     */
    private int totalCount;

    /**
     * <p>The page link.</p>
     */
    private String pageLink;

    /**
     * <p>The page link parameter.</p>
     */
    private String pageLinkParameter;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValue;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValueSuffix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValueSeparator;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSeparator;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValueSuffixSeparator;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparator;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorSuffix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparator;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorSuffix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparator;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorSuffix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparator;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorSuffix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparator;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorSuffix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparator;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorSuffix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparator;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorSuffix;

    /**
     * <p>The page link parameter value.</p>
     */
    private String pageLinkParameterValuePrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefixSuffixSeparatorPrefix"
cmpl-6wx8xlltEOArjkh9qKqAmSVOlaskJ,/EvoSuiteBenchmark/scenario2/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory2.java,209.7914915084839,length,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create an instance of {@link Pagination }
     */
    public Pagination createPagination() {
        return new Pagination();
    }
}
","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactoryTest {","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPagination()} method.
*/
class ObjectFactoryTest {

	/**
	* Test case for {@link ObjectFactory#createPagination()} method.
	* It tests if the method returns a {@link Pagination} object.
	*/
	@Test
	void testCreatePagination() {
		ObjectFactory objectFactory = new ObjectFactory();
		Pagination pagination = objectFactory.createPagination();
		assertNotNull(pagination);
	}
}

// Pagination.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for anonymous complex type.
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""currentPage"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""totalPages"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""totalResults"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""resultsPerPage"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""startIndex"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *         &lt;element name=""endIndex"" type=""{http://www.w3.org/2001/XMLSchema}int""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = """", propOrder = {
    ""currentPage"",
    ""totalPages"",
    ""totalResults"",
    ""resultsPerPage"",
    ""startIndex"",
    ""endIndex""
})
@XmlRootElement(name = ""pagination"")
public class Pagination {

    protected int currentPage;
    protected int totalPages;
    protected int totalResults;
    protected int resultsPerPage;
    protected int startIndex;
    protected int endIndex;

    /**
     * Gets the value of the currentPage property.
     */
    public int getCurrentPage() {
        return currentPage;
    }

    /**
     * Sets the value of the currentPage property.
     */
    public void setCurrentPage(int value) {
        this.currentPage = value;
    }

    /**
     * Gets the value of the totalPages property.
     */
    public int getTotalPages() {
        return totalPages;
    }

    /**
     * Sets the value of the totalPages property.
     */
    public void setTotalPages(int value) {
        this.totalPages = value;
    }

    /**
     * Gets the value of the totalResults property.
     */
    public int getTotalResults() {
        return totalResults;
    }

    /**
     * Sets the value of the totalResults property.
     */
    public void setTotalResults(int value) {
        this.totalResults = value;
    }

    /**
     * Gets the value of the resultsPerPage property.
     */
    public int getResultsPerPage() {
        return resultsPerPage;
    }

    /**
     * Sets the value of the resultsPerPage property.
     */
    public void setResultsPerPage(int value) {
        this.resultsPerPage = value;
    }

    /**
     * Gets the value of the startIndex property.
     */
    public int getStartIndex() {
        return startIndex;
    }

    /**
     * Sets the value of the startIndex property.
     */
    public void setStartIndex(int value) {
        this.startIndex = value;
    }

    /**
     * Gets the value of the endIndex property.
     */
    public int getEndIndex() {
        return endIndex;
    }

    /**
     * Sets the value of the endIndex property.
     */
    public void setEndIndex(int value) {
        this.endIndex = value;
    }
}

// PaginationTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Pagination}.
* It contains ten unit test cases for the {@link Pagination#getCurrentPage()}, {@link Pagination#setCurrentPage(int)},
* {@link Pagination#getTotalPages()}, {@link Pagination#setTotalPages(int)}, {@link Pagination#getTotalResults()},
* {@link Pagination#setTotalResults(int)}, {@link Pagination#getResultsPerPage()}, {@link Pagination#setResultsPerPage(int)},
* {@link Pagination#getStartIndex()}, {@link Pagination#setStartIndex(int)}, {@link Pagination#getEndIndex()} and
* {@link Pagination#setEndIndex(int)} methods.
*/
class PaginationTest {
		
	/**
	* Test case for {@link Pagination#getCurrentPage()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetCurrentPage() {
		Pagination pagination = new Pagination();
		pagination.setCurrentPage(1);
		assertEquals(1, pagination.getCurrentPage());
	}
	
	/**
	* Test case for {@link Pagination#setCurrentPage(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetCurrentPage() {
		Pagination pagination = new Pagination();
		pagination.setCurrentPage(1);
		assertEquals(1, pagination.getCurrentPage());
	}
	
	/**
	* Test case for {@link Pagination#getTotalPages()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetTotalPages() {
		Pagination pagination = new Pagination();
		pagination.setTotalPages(1);
		assertEquals(1, pagination.getTotalPages());
	}
	
	/**
	* Test case for {@link Pagination#setTotalPages(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetTotalPages() {
		Pagination pagination = new Pagination();
		pagination.setTotalPages(1);
		assertEquals(1, pagination.getTotalPages());
	}
	
	/**
	* Test case for {@link Pagination#getTotalResults()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetTotalResults() {
		Pagination pagination = new Pagination();
		pagination.setTotalResults(1);
		assertEquals(1, pagination.getTotalResults());
	}
	
	/**
	* Test case for {@link Pagination#setTotalResults(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetTotalResults() {
		Pagination pagination = new Pagination();
		pagination.setTotalResults(1);
		assertEquals(1, pagination.getTotalResults());
	}
	
	/**
	* Test case for {@link Pagination#getResultsPerPage()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetResultsPerPage() {
		Pagination pagination = new Pagination();
		pagination.setResultsPerPage(1);
		assertEquals(1, pagination.getResultsPerPage());
	}
	
	/**
	* Test case for {@link Pagination#setResultsPerPage(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetResultsPerPage() {
		Pagination pagination = new Pagination();
		pagination.setResultsPerPage(1);
		assertEquals(1, pagination.getResultsPerPage());
	}
	
	/**
	* Test case for {@link Pagination#getStartIndex()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetStartIndex() {
		Pagination pagination = new Pagination();
		pagination.setStartIndex(1);
		assertEquals(1, pagination.getStartIndex());
	}
	
	/**
	* Test case for {@link Pagination#setStartIndex(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetStartIndex() {
		Pagination pagination = new Pagination();
		pagination.setStartIndex(1);
		assertEquals(1, pagination.getStartIndex());
	}
	
	/**
	* Test case for {@link Pagination#getEndIndex()} method.
	* It tests if the method returns the correct value.
	*/
	@Test
	void testGetEndIndex() {
		Pagination pagination = new Pagination();
		pagination.setEndIndex(1);
		assertEquals(1, pagination.getEndIndex());
	}
	
	/**
	* Test case for {@link Pagination#setEndIndex(int)} method.
	* It tests if the method sets the correct value.
	*/
	@Test
	void testSetEndIndex() {
		Pagination pagination = new Pagination();
		pagination.setEndIndex(1);
		assertEquals(1, pagination.getEndIndex());
	}
}

// PaginationTag.java
package com.tripfilms.os.exttaglib.pagination;

import com.tripfilms.os.exttaglib.pagination.datatype.Pagination;
import java.io.IOException;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.TagSupport;

/**
 * <p>Tag handler class for the pagination tag.</p>
 * <p>It generates a pagination bar for the given pagination object.</p>
 */
public class PaginationTag extends TagSupport {
	
	/**
	* The pagination object.
	*/
	private Pagination pagination;
	
	/**
	* The pagination object setter.
	* @param pagination The pagination object.
	*/
	public void setPagination(Pagination pagination) {
		this.pagination = pagination;
	}
	
	/**
	* The pagination object getter.
	* @return The pagination object.
	*/
	public Pagination getPagination() {
		return pagination;
	}
	
	/**
	* The pagination tag start.
	* @return The pagination tag start.
	* @throws JspException If an error occurs.
	*/
	@Override
	public int doStartTag() throws JspException {
		try {
			JspWriter out = pageContext.getOut();
			out.println(""<div class=\""pagination\"">"");
			out.println(""<ul>"");
			if (pagination.getCurrentPage() > 1) {
				out.println(""<li><a href=\""#\"">&laquo;</a></li>"");
			}
			for (int i = 1; i <= pagination.getTotalPages(); i++) {
				if (i == pagination.getCurrentPage()) {
					out.println(""<li class=\""active\""><a href=\""#\"">"" + i + ""</a></li>"");
				} else {
					out.println(""<li><a href=\""#\"">"" + i + ""</a></li>"");
				}
			}
			if (pagination.getCurrentPage() < pagination.getTotalPages()) {
				out.println(""<li><a href=\""#\"">&raquo;</a></li>"");
			}
			out.println(""</ul>"");
			out.println(""</div>"");
		} catch (IOException e) {
			throw new JspException(e);
		}
		return SKIP_BODY;
	}
	
	/**
	* The pagination tag end.
	* @return The pagination tag end.
	* @throws JspException If an error occurs.
	*/
	@Override
	public int doEndTag() throws JspException {
		return EVAL_PAGE;
	}
}

// PaginationTagTest.java
package com.tripfilms.os.exttaglib.pagination;

import com.tripfilms.os.exttaglib.pagination.datatype.Pagination;
import java.io.IOException;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.TagSupport;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

/**
* Test class of {@link PaginationTag}.
* It contains ten unit test cases for the {@link PaginationTag#doStartTag()} and {@link PaginationTag#doEndTag()} methods.
*/
class PaginationTagTest {
		
	/**
	* Test case for {@link PaginationTag#doStartTag()} method.
	* It tests if the method generates the correct pagination bar.
	* @throws JspException If an error occurs.
	*/
	@Test
	void testDoStartTag() throws JspException {
		PaginationTag paginationTag = new PaginationTag();
		Pagination pagination = new Pagination();
		pagination.setCurrentPage(1);
		pagination.setTotalPages(10);
		paginationTag.setPagination(pagination);
		JspWriter jspWriter = mock(JspWriter.class);
		paginationTag.setJspContext(new MockJspContext(jspWriter));
		try {
			paginationTag.doStartTag();
			verify(jspWriter).println(""<div class=\""pagination\"">"");
			verify(jspWriter).println(""<ul>"");
			verify(jspWriter).println(""<li><a href=\""#\"">&laquo;</a></li>"");
			for (int i = 1; i <= pagination.getTotalPages(); i++) {
				if (i == pagination.getCurrentPage()) {
					verify(jspWriter).println(""<li class=\""active\""><a href=\""#\"">"" + i + ""</a></li>"");
				} else {
					verify(jspWriter).println(""<li><a href=\""#\"">"" + i + ""</a></li>"");"
cmpl-6wxAw8KdFEhNrptI3wjVEQ59698t6,/EvoSuiteBenchmark/scenario2/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory3.java,136.87995672225952,length,"// ObjectFactory.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
@XmlRegistry
public class ObjectFactory {

    /**
     * Create an instance of {@link Pages }
     */
    public Pages createPages() {
        return new Pages();
    }
}
","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactoryTest {","// ObjectFactoryTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlRegistry;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ObjectFactory}.
* It contains ten unit test cases for the {@link ObjectFactory#createPages()} method.
*/
class ObjectFactoryTest {

	/**
	* Test case for {@link ObjectFactory#createPages()} method.
	* It tests if the method returns a non-null object.
	*/
	@Test
	void testCreatePages() {
		ObjectFactory objectFactory = new ObjectFactory();
		assertNotNull(objectFactory.createPages());
	}
}

// Pages.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for anonymous complex type.
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""page"" type=""{http://www.tripfilms.com/os/exttaglib/pagination/datatype}page"" maxOccurs=""unbounded""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = """", propOrder = {
    ""page""
})
@XmlRootElement(name = ""pages"")
public class Pages {

    @XmlElement(required = true)
    protected List<Page> page;

    /**
     * Gets the value of the page property.
     * <p>This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the page property.
     * <p>For example, to add a new item, do as follows:
     * <pre>
     *    getPage().add(newItem);
     * </pre>
     * <p>Objects of the following type(s) are allowed in the list
     * {@link Page }
     */
    public List<Page> getPage() {
        if (page == null) {
            page = new ArrayList<Page>();
        }
        return this.page;
    }
}

// PagesTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Pages}.
* It contains ten unit test cases for the {@link Pages#getPage()} method.
*/
class PagesTest {
		
	/**
	* Test case for {@link Pages#getPage()} method.
	* It tests if the method returns a non-null object.
	*/
	@Test
	void testGetPage() {
		Pages pages = new Pages();
		assertNotNull(pages.getPage());
	}
}

// Page.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>Java class for page complex type.
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;complexType name=""page"">
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;attribute name=""number"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}int"" />
 *       &lt;attribute name=""url"" use=""required"" type=""{http://www.w3.org/2001/XMLSchema}string"" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = ""page"")
public class Page {

    @XmlAttribute(name = ""number"", required = true)
    protected int number;
    @XmlAttribute(name = ""url"", required = true)
    protected String url;

    /**
     * Gets the value of the number property.
     */
    public int getNumber() {
        return number;
    }

    /**
     * Sets the value of the number property.
     */
    public void setNumber(int value) {
        this.number = value;
    }

    /**
     * Gets the value of the url property.
     * @return possible object is
     * {@link String }
     */
    public String getUrl() {
        return url;
    }

    /**
     * Sets the value of the url property.
     * @param value allowed object is
     * {@link String }
     */
    public void setUrl(String value) {
        this.url = value;
    }
}

// PageTest.java
package com.tripfilms.os.exttaglib.pagination.datatype;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Page}.
* It contains ten unit test cases for the {@link Page#getNumber()} method.
*/
class PageTest {
		
	/**
	* Test case for {@link Page#getNumber()} method.
	* It tests if the method returns a non-null object.
	*/
	@Test
	void testGetNumber() {
		Page page = new Page();
		assertNotNull(page.getNumber());
	}
}

// Pagination.java
package com.tripfilms.os.exttaglib.pagination;

import com.tripfilms.os.exttaglib.pagination.datatype.Pages;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.tagext.SimpleTagSupport;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

/**
 * <p>This class is a custom tag handler for the <code>pagination</code> tag.
 * <p>It generates a pagination bar based on the given parameters.
 * <p>The pagination bar is generated in the form of an XML document.
 * <p>The XML document is then transformed into an HTML document using an XSLT stylesheet.
 * <p>The HTML document is then written to the JSP page.
 */
public class Pagination extends SimpleTagSupport {

    /**
     * The number of pages to be displayed in the pagination bar.
     */
    private int numberOfPages;
    /**
     * The current page number.
     */
    private int currentPage;
    /**
     * The URL of the current page.
     */
    private String currentPageUrl;
    /**
     * The URL of the first page.
     */
    private String firstPageUrl;
    /**
     * The URL of the last page.
     */
    private String lastPageUrl;
    /**
     * The URL of the previous page.
     */
    private String previousPageUrl;
    /**
     * The URL of the next page.
     */
    private String nextPageUrl;
    /**
     * The URL of the page before the first page.
     */
    private String pageBeforeFirstPageUrl;
    /**
     * The URL of the page after the last page.
     */
    private String pageAfterLastPageUrl;
    /**
     * The URL of the page before the current page.
     */
    private String pageBeforeCurrentPageUrl;
    /**
     * The URL of the page after the current page.
     */
    private String pageAfterCurrentPageUrl;
    /**
     * The URL of the page before the previous page.
     */
    private String pageBeforePreviousPageUrl;
    /**
     * The URL of the page after the next page.
     */
    private String pageAfterNextPageUrl;
    /**
     * The URL of the page before the first page.
     */
    private String pageBeforeFirstPageUrl2;
    /**
     * The URL of the page after the last page.
     */
    private String pageAfterLastPageUrl2;
    /**
     * The URL of the page before the current page.
     */
    private String pageBeforeCurrentPageUrl2;
    /**
     * The URL of the page after the current page.
     */
    private String pageAfterCurrentPageUrl2;
    /**
     * The URL of the page before the previous page.
     */
    private String pageBeforePreviousPageUrl2;
    /**
     * The URL of the page after the next page.
     */
    private String pageAfterNextPageUrl2;
    /**
     * The URL of the page before the first page.
     */
    private String pageBeforeFirstPageUrl3;
    /**
     * The URL of the page after the last page.
     */
    private String pageAfterLastPageUrl3;
    /**
     * The URL of the page before the current page.
     */
    private String pageBeforeCurrentPageUrl3;
    /**
     * The URL of the page after the current page.
     */
    private String pageAfterCurrentPageUrl3;
    /**
     * The URL of the page before the previous page.
     */
    private String pageBeforePreviousPageUrl3;
    /**
     * The URL of the page after the next page.
     */
    private String pageAfterNextPageUrl3;
    /**
     * The URL of the page before the first page.
     */
    private String pageBeforeFirstPageUrl4;
    /**
     * The URL of the page after the last page.
     */
    private String pageAfterLastPageUrl4;
    /**
     * The URL of the page before the current page.
     */
    private String pageBeforeCurrentPageUrl4;
    /**
     * The URL of the page after the current page.
     */
    private String pageAfterCurrentPageUrl4;
    /**
     * The URL of the page before the previous page.
     */
    private String pageBeforePreviousPageUrl4;
    /**
     * The URL of the page after the next page.
     */
    private String pageAfterNextPageUrl4;
    /**
     * The URL of the page before the first page.
     */
    private String pageBeforeFirstPageUrl5;
    /**
     * The URL of the page after the last page.
     */
    private String pageAfterLastPageUrl5;
    /**
     * The URL of the page before the current page.
     */
    private String pageBeforeCurrentPageUrl5;
    /**
     * The URL of the page after the current page.
     */
    private String pageAfterCurrentPageUrl5;
    /**
     * The URL of the page before the previous page.
     */
    private String pageBeforePreviousPageUrl5;
    /**
     * The URL of the page after the next page.
     */
    private String pageAfterNextPageUrl5;
    /**
     * The URL of the page before the first page.
     */
    private String pageBeforeFirstPageUrl6;
    /**
     * The URL of the page after the last page.
     */
    private String pageAfterLastPageUrl6;
    /**
     * The URL of the page before the current page.
     */
    private String pageBeforeCurrentPageUrl6;
    /**
     * The URL of the page after the current page.
     */
    private String pageAfterCurrentPageUrl6;
    /**
     * The URL of the page before the previous page.
     */
    private String pageBeforePreviousPageUrl6;
    /**
     * The URL of the page after the next page.
     */
    private String pageAfterNextPageUrl6;
    /**
     * The URL of the page before the first page.
     */
    private String pageBeforeFirstPageUrl7;
    /**
     * The URL of the page after the last page.
     */
    private String pageAfterLastPageUrl7;
    /**
     * The URL of the page before the current page.
     */
    private String pageBeforeCurrentPageUrl7;
    /**
     * The URL of the page after the current page.
     */
    private String pageAfterCurrentPageUrl7;
    /**
     * The URL of the page before the previous page.
     */
    private String pageBeforePreviousPageUrl7;
    /**
     * The URL of the page after the next page.
     */
    private String pageAfterNextPageUrl7;
    /**
     * The URL of the page before the first page.
     */
    private String pageBeforeFirstPageUrl8;
    /**
     * The URL of the page after the last page.
     */
    private String pageAfterLastPageUrl8;
    /**
     * The URL of the page before the current page.
     */
    private String pageBeforeCurrentPageUrl8;
    /**
     * The URL of the page after the current page.
     */
    private String pageAfterCurrentPageUrl8;
    /**
     * The URL of the page before the previous page.
     */
    private String pageBeforePreviousPageUrl8;
    /**
     * The URL of the page after the next page.
     */
    private String pageAfterNextPageUrl8;
    /**
     * The URL of the page before the first page.
     */
    private String pageBeforeFirstPageUrl9;
    /**
     * The URL of the page after the last page.
     */
    private String pageAfterLastPageUrl9;
    /**
     * The URL of the page before the current page.
     */
    private String pageBeforeCurrentPageUrl9;
    /**
     * The URL of the page after the current page.
     */
    private String pageAfterCurrentPageUrl9;
    /**
     * The URL of the page before the previous page.
     */
    private String pageBeforePreviousPageUrl9;
    /**
     * The URL of the page after the next page.
     */
    private String pageAfterNextPageUrl9;
    /**
     * The URL of the page before the first page.
     */
    private String pageBeforeFirstPageUrl10;
    /**
     * The URL of the page after the last page.
     */
    private String pageAfterLastPageUrl10;
    /**
     * The URL of the page before the current page.
     */
    private String pageBeforeCurrentPageUrl10;
    /**
     * The URL of the page after the current page.
     */
    private String pageAfterCurrentPageUrl10;
    /**
     * The URL of the page before the previous page.
     */
    private String pageBeforePreviousPageUrl10;
    /**
     * The URL of the page after the next page.
     */
    private String pageAfterNextPageUrl10;
    /**
     * The URL of the page before the first page.
     */
    private String pageBeforeFirstPageUrl11;
    /**
     * The URL of the page after the last page.
     */
    private String pageAfterLastPageUrl11;
    /**
     * The URL of the page before the current page.
     */
    private String pageBeforeCurrentPageUrl11;
    /**
     * The URL of the page after the current page.
     */
    private String pageAfterCurrentPageUrl11;
    /**"
cmpl-6wxD93tIeHRDKOcWDdmR2cZ4cc7yc,/EvoSuiteBenchmark/scenario2/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions0.java,6.509985685348511,stop,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    /**
     * Format a date with a pattern (using java.text.SimpleDateFormat)
     *
     * @param pDateTime the date
     * @param pPattern the pattern
     * @return the date to display
     */
    public static String dateFormat(Date pDateTime, String pPattern) {
        if (pDateTime == null)
            return """";
        SimpleDateFormat oFormatter = new SimpleDateFormat(pPattern);
        return oFormatter.format(pDateTime);
    }
}
","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateFormat(Date, String)} method.
*/
class FunctionsTest {","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateFormat(Date, String)} method.
*/
class FunctionsTest {

	/**
	 * Test case for {@link Functions#dateFormat(Date, String)} method.
	 *
	 * @throws Exception
	 */
	@Test
	void testDateFormat() throws Exception {
		Date date = new Date();
		String pattern = ""dd/MM/yyyy"";
		String result = Functions.dateFormat(date, pattern);
		assertNotNull(result);
	}
}
```

## How to use it

### Maven

Add the following dependency to your pom.xml:

```xml
<dependency>
    <groupId>net.sourceforge.ext4j</groupId>
    <artifactId>ext4j-taglib</artifactId>
    <version>1.0.0</version>
</dependency>
```

### Gradle

Add the following dependency to your build.gradle:

```groovy
compile 'net.sourceforge.ext4j:ext4j-taglib:1.0.0'
```

### Others

You can download the jar file from the [Maven Central Repository](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22net.sourceforge.ext4j%22%20AND%20a%3A%22ext4j-taglib%22).

## License

This project is licensed under the [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)."
cmpl-6wxEChDuhiJQD64QxZqwtz517vYG4,/EvoSuiteBenchmark/scenario2/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions1.java,133.05857944488525,length,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    /**
     * Add 's or ' at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     *
     * @param pText the text
     * @return the text with 's or '
     */
    public static String addS(String pText) {
        if (pText == null || pText.trim().equals(""""))
            return """";
        if (pText.charAt(pText.length() - 1) == 's')
            return pText + ""'"";
        else
            return pText + ""'s"";
    }
}
","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#addS(String)} method.
*/
class FunctionsTest {","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#addS(String)} method.
*/
class FunctionsTest {

	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is null.
	 */
	@Test
	void testAddS_null() {
		assertEquals("""", Functions.addS(null));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is empty.
	 */
	@Test
	void testAddS_empty() {
		assertEquals("""", Functions.addS(""""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James"".
	 */
	@Test
	void testAddS_James() {
		assertEquals(""James's"", Functions.addS(""James""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""Daniel"".
	 */
	@Test
	void testAddS_Daniel() {
		assertEquals(""Daniel's"", Functions.addS(""Daniel""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James "".
	 */
	@Test
	void testAddS_James_space() {
		assertEquals(""James 's"", Functions.addS(""James ""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James  "".
	 */
	@Test
	void testAddS_James_2spaces() {
		assertEquals(""James  's"", Functions.addS(""James  ""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James\t"".
	 */
	@Test
	void testAddS_James_tab() {
		assertEquals(""James\t's"", Functions.addS(""James\t""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James\n"".
	 */
	@Test
	void testAddS_James_newline() {
		assertEquals(""James\n's"", Functions.addS(""James\n""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James\r"".
	 */
	@Test
	void testAddS_James_carriageReturn() {
		assertEquals(""James\r's"", Functions.addS(""James\r""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James\r\n"".
	 */
	@Test
	void testAddS_James_carriageReturnNewline() {
		assertEquals(""James\r\n's"", Functions.addS(""James\r\n""));
	}
}
```

## Test-Driven Development

### Test-Driven Development

Test-Driven Development (TDD) is a software development process that relies on the repetition of a very short development cycle: first the developer writes an (initially failing) automated test case that defines a desired improvement or new function, then produces the minimum amount of code to pass that test, and finally refactors the new code to acceptable standards.

### Test-Driven Development Cycle

1. Add a test
2. Run all tests and see if the new test fails
3. Write some code
4. Run tests
5. Refactor code
6. Repeat

### Test-Driven Development Benefits

* **Design**: TDD helps you to design your code better.
* **Documentation**: TDD helps you to document your code.
* **Quality**: TDD helps you to write better code.
* **Speed**: TDD helps you to write code faster.

### Test-Driven Development Disadvantages

* **Time**: TDD takes more time.
* **Learning curve**: TDD is hard to learn.
* **Not for all projects**: TDD is not for all projects.

### Test-Driven Development Tools

* **JUnit**: JUnit is a simple framework to write repeatable tests. It is an instance of the xUnit architecture for unit testing frameworks.
* **Mockito**: Mockito is a mocking framework that tastes really good. It lets you write beautiful tests with a clean & simple API.
* **PowerMock**: PowerMock is a framework that extends other mock libraries such as EasyMock with more powerful capabilities.

### Test-Driven Development Example

```java
// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    /**
     * Add 's or ' at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     *
     * @param pText the text
     * @return the text with 's or '
     */
    public static String addS(String pText) {
        if (pText == null || pText.trim().equals(""""))
            return """";
        if (pText.charAt(pText.length() - 1) == 's')
            return pText + ""'"";
        else
            return pText + ""'s"";
    }
}

// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#addS(String)} method.
*/
class FunctionsTest {
		
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is null.
	 */
	@Test
	void testAddS_null() {
		assertEquals("""", Functions.addS(null));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is empty.
	 */
	@Test
	void testAddS_empty() {
		assertEquals("""", Functions.addS(""""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James"".
	 */
	@Test
	void testAddS_James() {
		assertEquals(""James's"", Functions.addS(""James""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""Daniel"".
	 */
	@Test
	void testAddS_Daniel() {
		assertEquals(""Daniel's"", Functions.addS(""Daniel""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James "".
	 */
	@Test
	void testAddS_James_space() {
		assertEquals(""James 's"", Functions.addS(""James ""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James  "".
	 */
	@Test
	void testAddS_James_2spaces() {
		assertEquals(""James  's"", Functions.addS(""James  ""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James\t"".
	 */
	@Test
	void testAddS_James_tab() {
		assertEquals(""James\t's"", Functions.addS(""James\t""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James\n"".
	 */
	@Test
	void testAddS_James_newline() {
		assertEquals(""James\n's"", Functions.addS(""James\n""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James\r"".
	 */
	@Test
	void testAddS_James_carriageReturn() {
		assertEquals(""James\r's"", Functions.addS(""James\r""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James\r\n"".
	 */
	@Test
	void testAddS_James_carriageReturnNewline() {
		assertEquals(""James\r\n's"", Functions.addS(""James\r\n""));
	}
}
```

## Behavior-Driven Development

### Behavior-Driven Development

Behavior-Driven Development (BDD) is a software development process that emerged from Test-Driven Development (TDD). Behavior-Driven Development combines the general techniques and principles of TDD with ideas from domain-driven design and object-oriented analysis and design to provide software development and management teams with shared tools and a shared process to collaborate on software development.

### Behavior-Driven Development Cycle

1. Add a test
2. Run all tests and see if the new test fails
3. Write some code
4. Run tests
5. Refactor code
6. Repeat

### Behavior-Driven Development Benefits

* **Design**: BDD helps you to design your code better.
* **Documentation**: BDD helps you to document your code.
* **Quality**: BDD helps you to write better code.
* **Speed**: BDD helps you to write code faster.

### Behavior-Driven Development Disadvantages

* **Time**: BDD takes more time.
* **Learning curve**: BDD is hard to learn.
* **Not for all projects**: BDD is not for all projects.

### Behavior-Driven Development Tools

* **JBehave**: JBehave is a framework for Behaviour-Driven Development (BDD).
* **Cucumber**: Cucumber is a tool that supports Behaviour-Driven Development (BDD).
* **Spock**: Spock is a testing and specification framework for Java and Groovy applications.

### Behavior-Driven Development Example

```java
// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    /**
     * Add 's or ' at the end of the text, for example ""James'"" for ""James"" or ""Daniel's"" for ""Daniel""
     *
     * @param pText the text
     * @return the text with 's or '
     */
    public static String addS(String pText) {
        if (pText == null || pText.trim().equals(""""))
            return """";
        if (pText.charAt(pText.length() - 1) == 's')
            return pText + ""'"";
        else
            return pText + ""'s"";
    }
}

// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#addS(String)} method.
*/
class FunctionsTest {
		
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is null.
	 */
	@Test
	void testAddS_null() {
		assertEquals("""", Functions.addS(null));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is empty.
	 */
	@Test
	void testAddS_empty() {
		assertEquals("""", Functions.addS(""""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James"".
	 */
	@Test
	void testAddS_James() {
		assertEquals(""James's"", Functions.addS(""James""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""Daniel"".
	 */
	@Test
	void testAddS_Daniel() {
		assertEquals(""Daniel's"", Functions.addS(""Daniel""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James "".
	 */
	@Test
	void testAddS_James_space() {
		assertEquals(""James 's"", Functions.addS(""James ""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James  "".
	 */
	@Test
	void testAddS_James_2spaces() {
		assertEquals(""James  's"", Functions.addS(""James  ""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James\t"".
	 */
	@Test
	void testAddS_James_tab() {
		assertEquals(""James\t's"", Functions.addS(""James\t""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James\n"".
	 */
	@Test
	void testAddS_James_newline() {
		assertEquals(""James\n's"", Functions.addS(""James\n""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James\r"".
	 */
	@Test
	void testAddS_James_carriageReturn() {
		assertEquals(""James\r's"", Functions.addS(""James\r""));
	}
	
	/**
	 * Test case for {@link Functions#addS(String)} method.
	 * It tests the case when the input is ""James\r\n"".
	 */
	@Test
	void testAddS_James_carriageReturnNewline() {
		assertEquals(""James\r\n's"", Functions.addS(""James\r\n""));
	}
}
```

## Acceptance Test-Driven Development

### Acceptance Test-Driven Development

Acceptance Test-Driven Development (ATDD) is a development methodology based on communication between the business customers, the developers, and the testers. ATDD encompasses many of the"
cmpl-6wxGLJJI4FvcYG3eGXanlAet97ohb,/EvoSuiteBenchmark/scenario2/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions2.java,116.64656972885132,length,"// Functions.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;

/**
 * @author luc
 */
public class Functions {

    /**
     * Convert a date in milliseconds
     *
     * @param pDateTime the date
     * @return the milliseconds
     */
    public static long dateToMilliseconds(Date pDateTime) {
        if (pDateTime == null)
            return 0;
        Calendar c = Calendar.getInstance();
        c.setTime(pDateTime);
        return c.getTimeInMillis();
    }
}
","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class FunctionsTest {","// FunctionsTest.java
package net.sourceforge.ext4j.taglib.tag;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import javax.servlet.jsp.JspTagException;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Functions}.
* It contains ten unit test cases for the {@link Functions#dateToMilliseconds(Date)} method.
*/
class FunctionsTest {

	/**
	 * Test case for {@link Functions#dateToMilliseconds(Date)} method.
	 * It tests the case when the date is null.
	 */
	@Test
	void testDateToMilliseconds_NullDate() {
		assertEquals(0, Functions.dateToMilliseconds(null));
	}
	
	/**
	 * Test case for {@link Functions#dateToMilliseconds(Date)} method.
	 * It tests the case when the date is not null.
	 */
	@Test
	void testDateToMilliseconds_NotNullDate() {
		Calendar c = Calendar.getInstance();
		c.set(Calendar.YEAR, 2020);
		c.set(Calendar.MONTH, Calendar.JANUARY);
		c.set(Calendar.DAY_OF_MONTH, 1);
		c.set(Calendar.HOUR_OF_DAY, 0);
		c.set(Calendar.MINUTE, 0);
		c.set(Calendar.SECOND, 0);
		c.set(Calendar.MILLISECOND, 0);
		assertEquals(1577836800000L, Functions.dateToMilliseconds(c.getTime()));
	}
}
```

## How to run the tests

### Using Maven

```
mvn test
```

### Using Gradle

```
gradle test
```

## How to generate the test report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport
```

## How to generate the test coverage report

### Using Maven

```
mvn site
```

### Using Gradle

```
gradle test jacocoTestReport"
