ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wt6ooWwc8NoG1CM0n267eG9lyqzt,/EvoSuiteBenchmark/scenario1/73_fim1/src/main/java/osa/ora/server/ModernChatServer0.java,2.2913997173309326,stop,"// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    public static Logger getLogger() {
        return logger;
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#getLogger()} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#getLogger()} method.
*/
class ModernChatServerTest {

	/**
	* Test case for {@link ModernChatServer#getLogger()} method.
	*/
	@Test
	void testGetLogger() {
		// TODO
	}
}"
cmpl-6wt7r7eUXoyHh8Z3GRCT1qxEG2wAB,/EvoSuiteBenchmark/scenario1/73_fim1/src/main/java/osa/ora/server/ModernChatServer1.java,2.7686808109283447,stop,"// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    public boolean ping() {
        return true;
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#ping()} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#ping()} method.
*/
class ModernChatServerTest {

	/**
	* Test case for {@link ModernChatServer#ping()} method.
	* It tests if the method returns true.
	*/
	@Test
	void testPing() {
		ModernChatServer modernChatServer = new ModernChatServer();
		assertTrue(modernChatServer.ping());
	}
}"
cmpl-6wt8u1lGEYLXEbMIDbvfU5t3DDwzH,/EvoSuiteBenchmark/scenario1/73_fim1/src/main/java/osa/ora/server/ModernChatServer2.java,69.94717836380005,length,"// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    public LoginBean signIn(ClientInterface cf, String emailAddr, String password, String ipAddress) throws RemoteException {
        LoginBean loginBean = null;
        //authenticate User
        //DB authentication....
        if (emailAddr != null && password != null && ipAddress != null) {
            String email = StringEncoder64.decodeStringUTF8(emailAddr);
            //System.out.println(""email=""+email);
            User user = authenticateUser(email, password);
            if (user != null) {
                ipAddress = StringEncoder64.decodeStringUTF8(ipAddress);
                //System.out.println(""ip=""+ipAddress);
                ClientInterface oldOne = connectedClients.get(user.getId());
                if (oldOne != null) {
                    String ipAdd = connectedClientsIPs.get(user.getId());
                    if (ipAdd != null && ipAdd.equals(ipAddress)) {
                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, true);
                        sendKickOffByLoginMessageThread.start();
                    } else {
                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, false);
                        sendKickOffByLoginMessageThread.start();
                    }
                }
                connectedClients.put(user.getId(), cf);
                connectedClientsIPs.put(user.getId(), ipAddress);
                getLogger().log(Level.FINE, ""User "" + email + "" has logged in."");
                loginBean = new LoginBean();
                loginBean.setUser(user);
                String orignalPass = passwordEnc.decrypt(passwords.get(user.getId()));
                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);
                loginBean.setSecureToken(tokenUsed);
                loginBean.setAuthToken(clientAuthToken);
                return loginBean;
            } else {
                getLogger().log(Level.FINE, ""User "" + email + "" is not valid!"");
                return null;
            }
        } else {
            getLogger().log(Level.WARNING, ""Credentials is null!"");
            return null;
        }
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.
*/
class ModernChatServerTest {

	/**
	* Test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.
	* This test case checks if the method returns null when the email address is null.
	*/
	@Test
	void testSignIn_EmailAddressIsNull() {
		//Arrange
		ClientInterface cf = null;
		String emailAddr = null;
		String password = ""password"";
		String ipAddress = ""127.0.0.1"";
		
		//Act
		LoginBean loginBean = null;
		try {
			loginBean = signIn(cf, emailAddr, password, ipAddress);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.
	* This test case checks if the method returns null when the email address is empty.
	*/
	@Test
	void testSignIn_EmailAddressIsEmpty() {
		//Arrange
		ClientInterface cf = null;
		String emailAddr = """";
		String password = ""password"";
		String ipAddress = ""127.0.0.1"";
		
		//Act
		LoginBean loginBean = null;
		try {
			loginBean = signIn(cf, emailAddr, password, ipAddress);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.
	* This test case checks if the method returns null when the email address is not valid.
	*/
	@Test
	void testSignIn_EmailAddressIsNotValid() {
		//Arrange
		ClientInterface cf = null;
		String emailAddr = ""email"";
		String password = ""password"";
		String ipAddress = ""127.0.0.1"";
		
		//Act
		LoginBean loginBean = null;
		try {
			loginBean = signIn(cf, emailAddr, password, ipAddress);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.
	* This test case checks if the method returns null when the password is null.
	*/
	@Test
	void testSignIn_PasswordIsNull() {
		//Arrange
		ClientInterface cf = null;
		String emailAddr = ""email@email.com"";
		String password = null;
		String ipAddress = ""127.0.0.1"";
		
		//Act
		LoginBean loginBean = null;
		try {
			loginBean = signIn(cf, emailAddr, password, ipAddress);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.
	* This test case checks if the method returns null when the password is empty.
	*/
	@Test
	void testSignIn_PasswordIsEmpty() {
		//Arrange
		ClientInterface cf = null;
		String emailAddr = ""email@email.com"";
		String password = """";
		String ipAddress = ""127.0.0.1"";
		
		//Act
		LoginBean loginBean = null;
		try {
			loginBean = signIn(cf, emailAddr, password, ipAddress);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.
	* This test case checks if the method returns null when the password is not valid.
	*/
	@Test
	void testSignIn_PasswordIsNotValid() {
		//Arrange
		ClientInterface cf = null;
		String emailAddr = ""email@email.com"";
		String password = ""pass"";
		String ipAddress = ""127.0.0.1"";
		
		//Act
		LoginBean loginBean = null;
		try {
			loginBean = signIn(cf, emailAddr, password, ipAddress);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.
	* This test case checks if the method returns null when the ip address is null.
	*/
	@Test
	void testSignIn_IpAddressIsNull() {
		//Arrange
		ClientInterface cf = null;
		String emailAddr = ""email@email.com"";
		String password = ""password"";
		String ipAddress = null;
		
		//Act
		LoginBean loginBean = null;
		try {
			loginBean = signIn(cf, emailAddr, password, ipAddress);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.
	* This test case checks if the method returns null when the ip address is empty.
	*/
	@Test
	void testSignIn_IpAddressIsEmpty() {
		//Arrange
		ClientInterface cf = null;
		String emailAddr = ""email@email.com"";
		String password = ""password"";
		String ipAddress = """";
		
		//Act
		LoginBean loginBean = null;
		try {
			loginBean = signIn(cf, emailAddr, password, ipAddress);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.
	* This test case checks if the method returns null when the ip address is not valid.
	*/
	@Test
	void testSignIn_IpAddressIsNotValid() {
		//Arrange
		ClientInterface cf = null;
		String emailAddr = ""email@email.com"";
		String password = ""password"";
		String ipAddress = ""127.0.0.1.1"";
		
		//Act
		LoginBean loginBean = null;
		try {
			loginBean = signIn(cf, emailAddr, password, ipAddress);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signIn(ClientInterface, String, String,"
cmpl-6wtA2C27t6HXuFjTLAIsBFrbNSkPy,/EvoSuiteBenchmark/scenario1/73_fim1/src/main/java/osa/ora/server/ModernChatServer3.java,78.90979623794556,length,"// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    public ResultBean changePassword(String email, String oldPass, String newPass) throws RemoteException {
        email = StringEncoder64.decodeStringUTF8(email);
        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);
        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);
        User user = authenticateUser(email, newOldPass);
        if (user == null) {
            return new ResultBean(false, IConstant.ERROR, ""Invalid Password!"");
        }
        oldPass = passwordEnc.encrypt(oldPass);
        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);
        newPass = passwordEnc.encrypt(newPass);
        if (userBD.updatePassword(user.getId(), oldPass, newPass)) {
            passwords.put(user.getId(), newPass);
            return new ResultBean(true, IConstant.SUCCESS, null);
        }
        return new ResultBean(false, IConstant.ERROR, ""Error During Applying New Password!"");
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#changePassword(String, String, String)} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#changePassword(String, String, String)} method.
*/
class ModernChatServerTest {

	/**
	* Test case for the {@link ModernChatServer#changePassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the user is not authenticated.
	*/
	@Test
	void testChangePassword_UserNotAuthenticated() {
		// Arrange
		String email = ""test@test.com"";
		String oldPass = ""test"";
		String newPass = ""test"";
		ResultBean expected = new ResultBean(false, IConstant.ERROR, ""Invalid Password!"");
		
		// Act
		ResultBean actual = ModernChatServer.changePassword(email, oldPass, newPass);
		
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link ModernChatServer#changePassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the user is authenticated.
	*/
	@Test
	void testChangePassword_UserAuthenticated() {
		// Arrange
		String email = ""test@test.com"";
		String oldPass = ""test"";
		String newPass = ""test"";
		ResultBean expected = new ResultBean(true, IConstant.SUCCESS, null);
		
		// Act
		ResultBean actual = ModernChatServer.changePassword(email, oldPass, newPass);
		
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link ModernChatServer#changePassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the user is authenticated and the new password is the same as the old one.
	*/
	@Test
	void testChangePassword_UserAuthenticated_NewPasswordSameAsOld() {
		// Arrange
		String email = ""test@test.com"";
		String oldPass = ""test"";
		String newPass = ""test"";
		ResultBean expected = new ResultBean(true, IConstant.SUCCESS, null);
		
		// Act
		ResultBean actual = ModernChatServer.changePassword(email, oldPass, newPass);
		
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link ModernChatServer#changePassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the user is authenticated and the new password is different from the old one.
	*/
	@Test
	void testChangePassword_UserAuthenticated_NewPasswordDifferentFromOld() {
		// Arrange
		String email = ""test@test.com"";
		String oldPass = ""test"";
		String newPass = ""test"";
		ResultBean expected = new ResultBean(true, IConstant.SUCCESS, null);
		
		// Act
		ResultBean actual = ModernChatServer.changePassword(email, oldPass, newPass);
		
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link ModernChatServer#changePassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the user is authenticated and the new password is empty.
	*/
	@Test
	void testChangePassword_UserAuthenticated_NewPasswordEmpty() {
		// Arrange
		String email = ""test@test.com"";
		String oldPass = ""test"";
		String newPass = """";
		ResultBean expected = new ResultBean(true, IConstant.SUCCESS, null);
		
		// Act
		ResultBean actual = ModernChatServer.changePassword(email, oldPass, newPass);
		
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link ModernChatServer#changePassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the user is authenticated and the new password is null.
	*/
	@Test
	void testChangePassword_UserAuthenticated_NewPasswordNull() {
		// Arrange
		String email = ""test@test.com"";
		String oldPass = ""test"";
		String newPass = null;
		ResultBean expected = new ResultBean(true, IConstant.SUCCESS, null);
		
		// Act
		ResultBean actual = ModernChatServer.changePassword(email, oldPass, newPass);
		
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link ModernChatServer#changePassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the user is authenticated and the new password is a special character.
	*/
	@Test
	void testChangePassword_UserAuthenticated_NewPasswordSpecialCharacter() {
		// Arrange
		String email = ""test@test.com"";
		String oldPass = ""test"";
		String newPass = ""test"";
		ResultBean expected = new ResultBean(true, IConstant.SUCCESS, null);
		
		// Act
		ResultBean actual = ModernChatServer.changePassword(email, oldPass, newPass);
		
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link ModernChatServer#changePassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the user is authenticated and the new password is a number.
	*/
	@Test
	void testChangePassword_UserAuthenticated_NewPasswordNumber() {
		// Arrange
		String email = ""test@test.com"";
		String oldPass = ""test"";
		String newPass = ""test"";
		ResultBean expected = new ResultBean(true, IConstant.SUCCESS, null);
		
		// Act
		ResultBean actual = ModernChatServer.changePassword(email, oldPass, newPass);
		
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link ModernChatServer#changePassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the user is authenticated and the new password is a letter.
	*/
	@Test
	void testChangePassword_UserAuthenticated_NewPasswordLetter() {
		// Arrange
		String email = ""test@test.com"";
		String oldPass = ""test"";
		String newPass = ""test"";
		ResultBean expected = new ResultBean(true, IConstant.SUCCESS, null);
		
		// Act
		ResultBean actual = ModernChatServer.changePassword(email, oldPass, newPass);
		
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link ModernChatServer#changePassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the user is authenticated and the new password is a letter and a number.
	*/
	@Test
	void testChangePassword_UserAuthenticated_NewPasswordLetterAndNumber() {
		// Arrange
		String email = ""test@test.com"";
		String oldPass = ""test"";
		String newPass = ""test"";
		ResultBean expected = new ResultBean(true, IConstant.SUCCESS, null);
		
		// Act
		ResultBean actual = ModernChatServer.changePassword(email, oldPass, newPass);
		
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link ModernChatServer#changePassword(String, String, String"
cmpl-6wtBJrmfuK60AGMGjF1zZPyXBSdUl,/EvoSuiteBenchmark/scenario1/73_fim1/src/main/java/osa/ora/server/ModernChatServer4.java,67.46864342689514,length,"// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    public ResultBean changeAdminPassword(String emailAddr, String oldPass, String newPass) throws RemoteException {
        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);
        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);
        LoginBean loginBean = signInAsAdmin(emailAddr, newOldPass);
        if (loginBean == null) {
            return new ResultBean(false, IConstant.ERROR, ""Invalid Password!"");
        }
        oldPass = passwordEnc.encrypt(oldPass);
        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);
        newPass = passwordEnc.encrypt(newPass);
        if (userBD.updatePassword(adminUser.getId(), oldPass, newPass)) {
            passwords.put(adminUser.getId(), newPass);
            return new ResultBean(true, IConstant.SUCCESS, null);
        }
        return new ResultBean(false, IConstant.ERROR, ""Error During Applying New Password!"");
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.
*/
class ModernChatServerTest {

	/**
	* Test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the old password is invalid.
	*/
	@Test
	void testChangeAdminPassword_InvalidOldPassword() {
		// Arrange
		String emailAddr = ""admin@admin.com"";
		String oldPass = ""admin"";
		String newPass = ""admin"";
		ResultBean expected = new ResultBean(false, IConstant.ERROR, ""Invalid Password!"");
		
		// Act
		ResultBean actual = ModernChatServer.changeAdminPassword(emailAddr, oldPass, newPass);
		
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the old password is valid.
	*/
	@Test
	void testChangeAdminPassword_ValidOldPassword() {
		// Arrange
		String emailAddr = ""admin@admin.com"";
		String oldPass = ""admin"";
		String newPass = ""admin"";
		ResultBean expected = new ResultBean(true, IConstant.SUCCESS, null);
		
		// Act
		ResultBean actual = ModernChatServer.changeAdminPassword(emailAddr, oldPass, newPass);
		
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the old password is valid and the new password is invalid.
	*/
	@Test
	void testChangeAdminPassword_ValidOldPassword_InvalidNewPassword() {
		// Arrange
		String emailAddr = ""admin@admin.com"";
		String oldPass = ""admin"";
		String newPass = ""admin"";
		ResultBean expected = new ResultBean(false, IConstant.ERROR, ""Error During Applying New Password!"");
		
		// Act
		ResultBean actual = ModernChatServer.changeAdminPassword(emailAddr, oldPass, newPass);
		
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the old password is valid and the new password is valid.
	*/
	@Test
	void testChangeAdminPassword_ValidOldPassword_ValidNewPassword() {
		// Arrange
		String emailAddr = ""admin@admin.com"";
		String oldPass = ""admin"";
		String newPass = ""admin"";
		ResultBean expected = new ResultBean(true, IConstant.SUCCESS, null);
		
		// Act
		ResultBean actual = ModernChatServer.changeAdminPassword(emailAddr, oldPass, newPass);
		
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the old password is invalid and the new password is invalid.
	*/
	@Test
	void testChangeAdminPassword_InvalidOldPassword_InvalidNewPassword() {
		// Arrange
		String emailAddr = ""admin@admin.com"";
		String oldPass = ""admin"";
		String newPass = ""admin"";
		ResultBean expected = new ResultBean(false, IConstant.ERROR, ""Invalid Password!"");
		
		// Act
		ResultBean actual = ModernChatServer.changeAdminPassword(emailAddr, oldPass, newPass);
		
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the old password is invalid and the new password is valid.
	*/
	@Test
	void testChangeAdminPassword_InvalidOldPassword_ValidNewPassword() {
		// Arrange
		String emailAddr = ""admin@admin.com"";
		String oldPass = ""admin"";
		String newPass = ""admin"";
		ResultBean expected = new ResultBean(false, IConstant.ERROR, ""Invalid Password!"");
		
		// Act
		ResultBean actual = ModernChatServer.changeAdminPassword(emailAddr, oldPass, newPass);
		
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the old password is valid and the new password is invalid.
	*/
	@Test
	void testChangeAdminPassword_ValidOldPassword_InvalidNewPassword() {
		// Arrange
		String emailAddr = ""admin@admin.com"";
		String oldPass = ""admin"";
		String newPass = ""admin"";
		ResultBean expected = new ResultBean(false, IConstant.ERROR, ""Error During Applying New Password!"");
		
		// Act
		ResultBean actual = ModernChatServer.changeAdminPassword(emailAddr, oldPass, newPass);
		
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the old password is valid and the new password is valid.
	*/
	@Test
	void testChangeAdminPassword_ValidOldPassword_ValidNewPassword() {
		// Arrange
		String emailAddr = ""admin@admin.com"";
		String oldPass = ""admin"";
		String newPass = ""admin"";
		ResultBean expected = new ResultBean(true, IConstant.SUCCESS, null);
		
		// Act
		ResultBean actual = ModernChatServer.changeAdminPassword(emailAddr, oldPass, newPass);
		
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the old password is invalid and the new password is invalid.
	*/
	@Test
	void testChangeAdminPassword_InvalidOldPassword_InvalidNewPassword() {
		// Arrange
		String emailAddr = ""admin@admin.com"";
		String oldPass = ""admin"";
		String newPass = ""admin"";
		ResultBean expected = new ResultBean(false, IConstant.ERROR, ""Invalid Password!"");
		
		// Act
		ResultBean actual = ModernChatServer.changeAdminPassword(emailAddr, oldPass, newPass);
		
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.
	* This test case checks if the method returns the correct result when the old password is invalid and the new password is valid.
	*/
	@Test
	void testChangeAdminPassword_InvalidOldPassword_ValidNewPassword() {
		// Arrange
		String emailAddr = ""admin@admin.com"";
		String oldPass = ""admin"";
		String newPass = ""admin"";
		ResultBean expected = new ResultBean(false, IConstant.ERROR, ""Invalid Password!"");
		
		// Act
		ResultBean"
cmpl-6wtCOUhnwX6CpJauj1OK5Sl1sU2SS,/EvoSuiteBenchmark/scenario1/73_fim1/src/main/java/osa/ora/server/ModernChatServer5.java,72.0218334197998,length,"// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    public boolean sendSecureTextMessage(TextMessage msg) throws RemoteException {
        if (msg.getTargetType() == IConstant.USER_CHAT) {
            ClientInterface cf = connectedClients.get(msg.getToUserId());
            return sendSecureTextMessageToUser(msg, cf);
        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {
            Vector<User> tempUsers = null;
            ClientInterface cf = null;
            for (int i = 0; i < getGroups().size(); i++) {
                if (getGroups().get(i).getId() == msg.getToUserId()) {
                    tempUsers = getGroups().get(i).getUsers();
                    break;
                }
            }
            if (tempUsers != null && tempUsers.size() > 0) {
                //loop on users
                boolean success = false;
                for (int i = 0; i < tempUsers.size(); i++) {
                    if (tempUsers.get(i).getId() != msg.getFromUserId()) {
                        cf = connectedClients.get(tempUsers.get(i).getId());
                        if (sendSecureTextMessageToUser(msg, cf)) {
                            success = true;
                        }
                    }
                }
                if (success) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {
            int[] tempUsers = null;
            ClientInterface cf = null;
            for (int i = 0; i < getRooms().size(); i++) {
                if (getRooms().get(i).getId() == msg.getToUserId()) {
                    tempUsers = getRooms().get(i).getUserId();
                    break;
                }
            }
            if (tempUsers != null && tempUsers.length > 0) {
                boolean success = false;
                //loop on users
                for (int i = 0; i < tempUsers.length; i++) {
                    if (tempUsers[i] != msg.getFromUserId()) {
                        cf = connectedClients.get(tempUsers[i]);
                        if (sendSecureTextMessageToUser(msg, cf)) {
                            success = true;
                        }
                    }
                }
                if (success) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.
*/
class ModernChatServerTest {

	/**
	* Test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.
	* This test case checks if the method returns true when the target type is USER_CHAT and the user is connected.
	*/
	@Test
	void testSendSecureTextMessage_1() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		TextMessage msg = new TextMessage();
		msg.setTargetType(IConstant.USER_CHAT);
		msg.setToUserId(1);
		msg.setFromUserId(2);
		msg.setMessage(""Hello"");
		ClientInterface cf = new ClientInterface() {
			@Override
			public boolean sendSecureTextMessage(TextMessage msg) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendSecureBinaryMessage(BinaryMessage msg) throws RemoteException {
				return false;
			}
			@Override
			public boolean sendTextMessage(TextMessage msg) throws RemoteException {
				return false;
			}
			@Override
			public boolean sendBinaryMessage(BinaryMessage msg) throws RemoteException {
				return false;
			}
			@Override
			public boolean sendUserUpdatedStatus(User user) throws RemoteException {
				return false;
			}
			@Override
			public boolean sendRefreshContact(User user) throws RemoteException {
				return false;
			}
			@Override
			public boolean sendKickOffMessage(User user) throws RemoteException {
				return false;
			}
			@Override
			public boolean sendKickOffByLoginMessage(User user) throws RemoteException {
				return false;
			}
		};
		server.connectedClients.put(1, cf);
		assertTrue(server.sendSecureTextMessage(msg));
	}
	
	/**
	* Test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.
	* This test case checks if the method returns false when the target type is USER_CHAT and the user is not connected.
	*/
	@Test
	void testSendSecureTextMessage_2() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		TextMessage msg = new TextMessage();
		msg.setTargetType(IConstant.USER_CHAT);
		msg.setToUserId(1);
		msg.setFromUserId(2);
		msg.setMessage(""Hello"");
		assertFalse(server.sendSecureTextMessage(msg));
	}
	
	/**
	* Test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.
	* This test case checks if the method returns true when the target type is GROUP_CHAT and the user is connected.
	*/
	@Test
	void testSendSecureTextMessage_3() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		TextMessage msg = new TextMessage();
		msg.setTargetType(IConstant.GROUP_CHAT);
		msg.setToUserId(1);
		msg.setFromUserId(2);
		msg.setMessage(""Hello"");
		ClientInterface cf = new ClientInterface() {
			@Override
			public boolean sendSecureTextMessage(TextMessage msg) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendSecureBinaryMessage(BinaryMessage msg) throws RemoteException {
				return false;
			}
			@Override
			public boolean sendTextMessage(TextMessage msg) throws RemoteException {
				return false;
			}
			@Override
			public boolean sendBinaryMessage(BinaryMessage msg) throws RemoteException {
				return false;
			}
			@Override
			public boolean sendUserUpdatedStatus(User user) throws RemoteException {
				return false;
			}
			@Override
			public boolean sendRefreshContact(User user) throws RemoteException {
				return false;
			}
			@Override
			public boolean sendKickOffMessage(User user) throws RemoteException {
				return false;
			}
			@Override
			public boolean sendKickOffByLoginMessage(User user) throws RemoteException {
				return false;
			}
		};
		server.connectedClients.put(1, cf);
		server.connectedClients.put(3, cf);
		server.connectedClients.put(4, cf);
		server.connectedClients.put(5, cf);
		server.connectedClients.put(6, cf);
		server.connectedClients.put(7, cf);
		server.connectedClients.put(8, cf);
		server.connectedClients.put(9, cf);
		server.connectedClients.put(10, cf);
		server.connectedClients.put(11, cf);
		server.connectedClients.put(12, cf);
		server.connectedClients.put(13, cf);
		server.connectedClients.put(14, cf);
		server.connectedClients.put(15, cf);
		server.connectedClients.put(16, cf);
		server.connectedClients.put(17, cf);
		server.connectedClients.put(18, cf);
		server.connectedClients.put(19, cf);
		server.connectedClients.put(20, cf);
		server.connectedClients.put(21, cf);
		server.connectedClients.put(22, cf);
		server.connectedClients.put(23, cf);
		server.connectedClients.put(24, cf);
		server.connectedClients.put(25, cf);
		server.connectedClients.put(26, cf);
		server.connectedClients.put(27, cf);
		server.connectedClients.put(28, cf);
		server.connectedClients.put(29, cf);
		server.connectedClients.put(30, cf);
		server.connectedClients.put(31, cf);
		server.connectedClients.put(32, cf);
		server.connectedClients.put(33, cf);
		server.connectedClients.put(34, cf);
		server.connectedClients.put(35, cf);
		server.connectedClients.put(36, cf);
		server.connectedClients.put(37, cf);
		server.connectedClients.put(38, cf);
		server.connectedClients.put(39, cf);
		server.connectedClients.put(40, cf);
		server.connectedClients.put(41, cf);
		server.connectedClients.put(42, cf);
		server.connectedClients.put(43, cf);
		server.connectedClients.put(44, cf);
		server.connectedClients.put(45, cf);
		server.connectedClients.put(46, cf);
		server.connectedClients.put(47, cf);
		server.connectedClients.put(48, cf);
		server.connectedClients.put(49, cf);
		server.connectedClients.put(50, cf);
		server.connectedClients.put(51, cf);
		server.connectedClients.put(52, cf);
		server.connectedClients.put(53, cf);
		server.connectedClients.put(54, cf);
		server.connectedClients.put(55, cf);
		server.connectedClients.put(56, cf);
		server.connectedClients.put(57, cf);
		server.connectedClients.put(58"
cmpl-6wtDY2cmxohqKKDoVkyMbkCOSmNmQ,/EvoSuiteBenchmark/scenario1/73_fim1/src/main/java/osa/ora/server/ModernChatServer6.java,60.00376844406128,length,"// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    public ResultBean sendBinaryMessage(BinaryMessage msg) throws RemoteException {
        ClientInterface cf = connectedClients.get(msg.getToUserId());
        if (cf == null) {
            return new ResultBean(false, IConstant.OFFLINE, null);
        } else {
            try {
                //online message, send it..
                if (msg.getAction() == IConstant.REQUEST) {
                    getLogger().log(Level.FINE, ""Request send"");
                    return cf.receiveBinaryMessageRequest(msg);
                } else {
                    getLogger().log(Level.FINE, ""Online BinaryMessage size="" + msg.getData().length + "" From="" + msg.getFromUserId() + "" To="" + msg.getToUserId());
                    cf.receiveBinaryMessageLoad(msg);
                    return new ResultBean(true, IConstant.SUCCESS, null);
                }
            } catch (RemoteException ex) {
                try {
                    getLogger().log(Level.FINE, ""Exception happen, will logoff this user"");
                    connectedClients.remove(msg.getToUserId());
                    connectedClientsIPs.remove(msg.getToUserId());
                    offlineStatus(msg.getToUserId());
                } catch (RemoteException ex1) {
                }
                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());
            }
        }
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#sendBinaryMessage(BinaryMessage)} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#sendBinaryMessage(BinaryMessage)} method.
*/
class ModernChatServerTest {

	/**
	* Test case 1 for method {@link ModernChatServer#sendBinaryMessage(BinaryMessage)}.
	*/
	@Test
	void testSendBinaryMessage1() throws RemoteException {
		//TODO: Test goes here...
		ModernChatServer modernChatServer = new ModernChatServer();
		BinaryMessage binaryMessage = new BinaryMessage();
		binaryMessage.setAction(IConstant.REQUEST);
		binaryMessage.setData(new byte[0]);
		binaryMessage.setFromUserId(0);
		binaryMessage.setToUserId(0);
		ResultBean resultBean = modernChatServer.sendBinaryMessage(binaryMessage);
		assertEquals(false, resultBean.isSuccess());
		assertEquals(IConstant.OFFLINE, resultBean.getMessage());
		assertEquals(null, resultBean.getData());
	}
	
	/**
	* Test case 2 for method {@link ModernChatServer#sendBinaryMessage(BinaryMessage)}.
	*/
	@Test
	void testSendBinaryMessage2() throws RemoteException {
		//TODO: Test goes here...
		ModernChatServer modernChatServer = new ModernChatServer();
		BinaryMessage binaryMessage = new BinaryMessage();
		binaryMessage.setAction(IConstant.REQUEST);
		binaryMessage.setData(new byte[0]);
		binaryMessage.setFromUserId(0);
		binaryMessage.setToUserId(0);
		ResultBean resultBean = modernChatServer.sendBinaryMessage(binaryMessage);
		assertEquals(false, resultBean.isSuccess());
		assertEquals(IConstant.OFFLINE, resultBean.getMessage());
		assertEquals(null, resultBean.getData());
	}
	
	/**
	* Test case 3 for method {@link ModernChatServer#sendBinaryMessage(BinaryMessage)}.
	*/
	@Test
	void testSendBinaryMessage3() throws RemoteException {
		//TODO: Test goes here...
		ModernChatServer modernChatServer = new ModernChatServer();
		BinaryMessage binaryMessage = new BinaryMessage();
		binaryMessage.setAction(IConstant.REQUEST);
		binaryMessage.setData(new byte[0]);
		binaryMessage.setFromUserId(0);
		binaryMessage.setToUserId(0);
		ResultBean resultBean = modernChatServer.sendBinaryMessage(binaryMessage);
		assertEquals(false, resultBean.isSuccess());
		assertEquals(IConstant.OFFLINE, resultBean.getMessage());
		assertEquals(null, resultBean.getData());
	}
	
	/**
	* Test case 4 for method {@link ModernChatServer#sendBinaryMessage(BinaryMessage)}.
	*/
	@Test
	void testSendBinaryMessage4() throws RemoteException {
		//TODO: Test goes here...
		ModernChatServer modernChatServer = new ModernChatServer();
		BinaryMessage binaryMessage = new BinaryMessage();
		binaryMessage.setAction(IConstant.REQUEST);
		binaryMessage.setData(new byte[0]);
		binaryMessage.setFromUserId(0);
		binaryMessage.setToUserId(0);
		ResultBean resultBean = modernChatServer.sendBinaryMessage(binaryMessage);
		assertEquals(false, resultBean.isSuccess());
		assertEquals(IConstant.OFFLINE, resultBean.getMessage());
		assertEquals(null, resultBean.getData());
	}
	
	/**
	* Test case 5 for method {@link ModernChatServer#sendBinaryMessage(BinaryMessage)}.
	*/
	@Test
	void testSendBinaryMessage5() throws RemoteException {
		//TODO: Test goes here...
		ModernChatServer modernChatServer = new ModernChatServer();
		BinaryMessage binaryMessage = new BinaryMessage();
		binaryMessage.setAction(IConstant.REQUEST);
		binaryMessage.setData(new byte[0]);
		binaryMessage.setFromUserId(0);
		binaryMessage.setToUserId(0);
		ResultBean resultBean = modernChatServer.sendBinaryMessage(binaryMessage);
		assertEquals(false, resultBean.isSuccess());
		assertEquals(IConstant.OFFLINE, resultBean.getMessage());
		assertEquals(null, resultBean.getData());
	}
	
	/**
	* Test case 6 for method {@link ModernChatServer#sendBinaryMessage(BinaryMessage)}.
	*/
	@Test
	void testSendBinaryMessage6() throws RemoteException {
		//TODO: Test goes here...
		ModernChatServer modernChatServer = new ModernChatServer();
		BinaryMessage binaryMessage = new BinaryMessage();
		binaryMessage.setAction(IConstant.REQUEST);
		binaryMessage.setData(new byte[0]);
		binaryMessage.setFromUserId(0);
		binaryMessage.setToUserId(0);
		ResultBean resultBean = modernChatServer.sendBinaryMessage(binaryMessage);
		assertEquals(false, resultBean.isSuccess());
		assertEquals(IConstant.OFFLINE, resultBean.getMessage());
		assertEquals(null, resultBean.getData());
	}
	
	/**
	* Test case 7 for method {@link ModernChatServer#sendBinaryMessage(BinaryMessage)}.
	*/
	@Test
	void testSendBinaryMessage7() throws RemoteException {
		//TODO: Test goes here...
		ModernChatServer modernChatServer = new ModernChatServer();
		BinaryMessage binaryMessage = new BinaryMessage();
		binaryMessage.setAction(IConstant.REQUEST);
		binaryMessage.setData(new byte[0]);
		binaryMessage.setFromUserId(0);
		binaryMessage.setToUserId(0);
		ResultBean resultBean = modernChatServer.sendBinaryMessage(binaryMessage);
		assertEquals(false, resultBean.isSuccess());
		assertEquals(IConstant.OFFLINE, resultBean.getMessage());
		assertEquals(null, resultBean.getData());
	}
	
	/**
	* Test case 8 for method {@link ModernChatServer#sendBinaryMessage(BinaryMessage)}.
	*/
	@Test
	void testSendBinaryMessage8() throws RemoteException {
		//TODO: Test goes here...
		ModernChatServer modernChatServer = new ModernChatServer();
		BinaryMessage binaryMessage = new BinaryMessage();
		binaryMessage.setAction(IConstant.REQUEST);
		binaryMessage.setData(new byte[0]);
		binaryMessage.setFromUserId(0);
		binaryMessage.setToUserId(0);
		ResultBean resultBean = modernChatServer.sendBinaryMessage(binaryMessage);
		assertEquals(false, resultBean.isSuccess());
		assertEquals(IConstant.OFFLINE, resultBean.getMessage());
		assertEquals(null, resultBean.getData());
	}
	
	/**
	* Test case 9 for method {@link ModernChatServer#sendBinaryMessage(BinaryMessage)}.
	*/
	@Test
	void testSendBinaryMessage9() throws RemoteException {
		//TODO: Test goes here...
		ModernChatServer modernChatServer = new ModernChatServer();
		BinaryMessage binaryMessage = new BinaryMessage();
		binaryMessage.setAction(IConstant.REQUEST);
		binaryMessage.setData(new byte[0]);
		binaryMessage.setFromUserId(0);
		binaryMessage.setToUserId(0);
		ResultBean resultBean = modernChatServer.sendBinaryMessage(binaryMessage);
		assertEquals(false, resultBean.isSuccess());
		assertEquals(ICon"
cmpl-6wtEWh9QDHSe6YjvQ4QbMPFOv2YkG,/EvoSuiteBenchmark/scenario1/73_fim1/src/main/java/osa/ora/server/ModernChatServer7.java,72.25944781303406,length,"// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    public ResultBean sendSecureBinaryMessage(BinaryMessage msg) throws RemoteException {
        ClientInterface cf = connectedClients.get(msg.getToUserId());
        if (cf == null) {
            return new ResultBean(false, IConstant.OFFLINE, null);
        } else {
            try {
                //online message, send it..
                if (msg.getAction() == IConstant.REQUEST) {
                    getLogger().log(Level.FINE, ""Request send"");
                    return cf.receiveSecureBinaryMessageRequest(msg);
                } else {
                    getLogger().log(Level.FINE, ""Online BinaryMessage size="" + msg.getData().length + "" From="" + msg.getFromUserId() + "" To="" + msg.getToUserId());
                    cf.receiveSecureBinaryMessageLoad(msg);
                    return new ResultBean(true, IConstant.SUCCESS, null);
                }
            } catch (RemoteException ex) {
                try {
                    getLogger().log(Level.FINE, ""Exception happen, will logoff this user"");
                    connectedClients.remove(msg.getToUserId());
                    connectedClientsIPs.remove(msg.getToUserId());
                    offlineStatus(msg.getToUserId());
                } catch (RemoteException ex1) {
                }
                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());
            }
        }
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
*/
class ModernChatServerTest {

	/**
	* Test case 1 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the client is offline.
	*/
	@Test
	void testSendSecureBinaryMessage_1() throws RemoteException {
		//Arrange
		ModernChatServer server = new ModernChatServer();
		BinaryMessage msg = new BinaryMessage();
		msg.setToUserId(1);
		//Act
		ResultBean result = server.sendSecureBinaryMessage(msg);
		//Assert
		assertEquals(false, result.isSuccess());
		assertEquals(IConstant.OFFLINE, result.getMessage());
		assertEquals(null, result.getData());
	}
	
	/**
	* Test case 2 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the client is online and the action is REQUEST.
	*/
	@Test
	void testSendSecureBinaryMessage_2() throws RemoteException {
		//Arrange
		ModernChatServer server = new ModernChatServer();
		BinaryMessage msg = new BinaryMessage();
		msg.setToUserId(1);
		msg.setAction(IConstant.REQUEST);
		//Act
		ResultBean result = server.sendSecureBinaryMessage(msg);
		//Assert
		assertEquals(false, result.isSuccess());
		assertEquals(IConstant.OFFLINE, result.getMessage());
		assertEquals(null, result.getData());
	}
	
	/**
	* Test case 3 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the client is online and the action is LOAD.
	*/
	@Test
	void testSendSecureBinaryMessage_3() throws RemoteException {
		//Arrange
		ModernChatServer server = new ModernChatServer();
		BinaryMessage msg = new BinaryMessage();
		msg.setToUserId(1);
		msg.setAction(IConstant.LOAD);
		//Act
		ResultBean result = server.sendSecureBinaryMessage(msg);
		//Assert
		assertEquals(false, result.isSuccess());
		assertEquals(IConstant.OFFLINE, result.getMessage());
		assertEquals(null, result.getData());
	}
	
	/**
	* Test case 4 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the client is online and the action is REQUEST.
	*/
	@Test
	void testSendSecureBinaryMessage_4() throws RemoteException {
		//Arrange
		ModernChatServer server = new ModernChatServer();
		BinaryMessage msg = new BinaryMessage();
		msg.setToUserId(1);
		msg.setAction(IConstant.REQUEST);
		//Act
		ResultBean result = server.sendSecureBinaryMessage(msg);
		//Assert
		assertEquals(false, result.isSuccess());
		assertEquals(IConstant.OFFLINE, result.getMessage());
		assertEquals(null, result.getData());
	}
	
	/**
	* Test case 5 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the client is online and the action is LOAD.
	*/
	@Test
	void testSendSecureBinaryMessage_5() throws RemoteException {
		//Arrange
		ModernChatServer server = new ModernChatServer();
		BinaryMessage msg = new BinaryMessage();
		msg.setToUserId(1);
		msg.setAction(IConstant.LOAD);
		//Act
		ResultBean result = server.sendSecureBinaryMessage(msg);
		//Assert
		assertEquals(false, result.isSuccess());
		assertEquals(IConstant.OFFLINE, result.getMessage());
		assertEquals(null, result.getData());
	}
	
	/**
	* Test case 6 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the client is online and the action is REQUEST.
	*/
	@Test
	void testSendSecureBinaryMessage_6() throws RemoteException {
		//Arrange
		ModernChatServer server = new ModernChatServer();
		BinaryMessage msg = new BinaryMessage();
		msg.setToUserId(1);
		msg.setAction(IConstant.REQUEST);
		//Act
		ResultBean result = server.sendSecureBinaryMessage(msg);
		//Assert
		assertEquals(false, result.isSuccess());
		assertEquals(IConstant.OFFLINE, result.getMessage());
		assertEquals(null, result.getData());
	}
	
	/**
	* Test case 7 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the client is online and the action is LOAD.
	*/
	@Test
	void testSendSecureBinaryMessage_7() throws RemoteException {
		//Arrange
		ModernChatServer server = new ModernChatServer();
		BinaryMessage msg = new BinaryMessage();
		msg.setToUserId(1);
		msg.setAction(IConstant.LOAD);
		//Act
		ResultBean result = server.sendSecureBinaryMessage(msg);
		//Assert
		assertEquals(false, result.isSuccess());
		assertEquals(IConstant.OFFLINE, result.getMessage());
		assertEquals(null, result.getData());
	}
	
	/**
	* Test case 8 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the client is online and the action is REQUEST.
	*/
	@Test
	void testSendSecureBinaryMessage_8() throws RemoteException {
		//Arrange
		ModernChatServer server = new ModernChatServer();
		BinaryMessage msg = new BinaryMessage();
		msg.setToUserId(1);
		msg.setAction(IConstant.REQUEST);
		//Act
		ResultBean result = server.sendSecureBinaryMessage(msg);
		//Assert
		assertEquals(false, result.isSuccess());
		assertEquals(IConstant.OFFLINE, result.getMessage());
		assertEquals(null, result.getData());
	}
	
	/**
	* Test case 9 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the client is online and the action is LOAD.
	*/
	@Test
	void testSendSecureBinaryMessage_9() throws RemoteException {
		//Arrange
		ModernChatServer server = new ModernChatServer();
		BinaryMessage msg = new BinaryMessage();
		msg.setToUserId(1);
		msg.setAction(IConstant.LOAD);
		//Act
		ResultBean result = server.sendSecureBinaryMessage(msg);
		//Assert
		assertEquals(false, result.isSuccess());
		assertEquals(IConstant.OFFLINE, result.getMessage());
		assertEquals(null, result.getData());
	}
	
	/**
	* Test case 10 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the client is online and the action is REQUEST.
	*/
	@Test
"
cmpl-6wtFhMz2R9mMc6zifgmIcQ8SwjARX,/EvoSuiteBenchmark/scenario1/73_fim1/src/main/java/osa/ora/server/ModernChatServer8.java,74.61479902267456,length,"// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    public boolean sendSecureTextAnnouncement(TextMessage msg) throws RemoteException {
        if (msg.getTargetType() == IConstant.USER_CHAT) {
            ClientInterface cf = connectedClients.get(msg.getToUserId());
            return sendSecureTextAnnouncementToUser(msg, cf);
        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {
            Vector<User> tempUsers = null;
            ClientInterface cf = null;
            for (int i = 0; i < getGroups().size(); i++) {
                if (getGroups().get(i).getId() == msg.getToUserId()) {
                    tempUsers = getGroups().get(i).getUsers();
                    break;
                }
            }
            if (tempUsers != null && tempUsers.size() > 0) {
                //loop on users
                boolean deliverToAll = true;
                for (int i = 0; i < tempUsers.size(); i++) {
                    if (tempUsers.get(i).getId() != msg.getFromUserId()) {
                        cf = connectedClients.get(tempUsers.get(i).getId());
                        if (deliverToAll) {
                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);
                        } else {
                            sendSecureTextAnnouncementToUser(msg, cf);
                        }
                    }
                }
                return deliverToAll;
            }
        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {
            int[] tempUsers = null;
            ClientInterface cf = null;
            for (int i = 0; i < getRooms().size(); i++) {
                if (getRooms().get(i).getId() == msg.getToUserId()) {
                    tempUsers = getRooms().get(i).getUserId();
                    break;
                }
            }
            if (tempUsers != null && tempUsers.length > 0) {
                //loop on users
                boolean deliverToAll = true;
                for (int i = 0; i < tempUsers.length; i++) {
                    if (tempUsers[i] != msg.getFromUserId()) {
                        cf = connectedClients.get(tempUsers[i]);
                        if (deliverToAll) {
                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);
                        } else {
                            sendSecureTextAnnouncementToUser(msg, cf);
                        }
                    }
                }
                return deliverToAll;
            }
        }
        return false;
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
*/
class ModernChatServerTest {

	/**
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement("
cmpl-6wtGvjgYa6aAilzcQxWc1OMrx7PjV,/EvoSuiteBenchmark/scenario1/73_fim1/src/main/java/osa/ora/server/ModernChatServer9.java,73.96209836006165,length,"// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    public LoginBean signInAsAdmin(String emailAddr, String password) throws RemoteException {
        //authenticate User
        //DB authentication....
        if (emailAddr != null && password != null) {
            String email = StringEncoder64.decodeStringUTF8(emailAddr);
            User user = null;
            String orignalPass = passwordEnc.decrypt(passwords.get(1000));
            password = StringEncrypter.getInstance(orignalPass).decrypt(password);
            if (email.equalsIgnoreCase(getAdminUser().getEmail()) && password != null && password.equals(orignalPass)) {
                user = getAdminUser();
            }
            if (user != null) {
                getLogger().log(Level.FINE, ""User "" + email + "" has logged in."");
                authToken = ""FIM"" + Calendar.getInstance().getTimeInMillis();
                LoginBean loginBean = new LoginBean();
                loginBean.setUser(adminUser);
                loginBean.setAuthToken(authToken);
                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);
                loginBean.setSecureToken(tokenUsed);
                return loginBean;
            } else {
                getLogger().log(Level.FINE, ""User "" + email + "" is not valid!"");
                return null;
            }
        } else {
            getLogger().log(Level.WARNING, ""Credentials is null!"");
            return null;
        }
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
*/
class ModernChatServerTest {

	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the email address is null.
	*/
	@Test
	void testSignInAsAdmin_EmailAddressIsNull() {
		//Arrange
		ModernChatServer modernChatServer = new ModernChatServer();
		String emailAddr = null;
		String password = ""password"";
		
		//Act
		LoginBean loginBean = modernChatServer.signInAsAdmin(emailAddr, password);
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the password is null.
	*/
	@Test
	void testSignInAsAdmin_PasswordIsNull() {
		//Arrange
		ModernChatServer modernChatServer = new ModernChatServer();
		String emailAddr = ""email@email.com"";
		String password = null;
		
		//Act
		LoginBean loginBean = modernChatServer.signInAsAdmin(emailAddr, password);
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the email address is empty.
	*/
	@Test
	void testSignInAsAdmin_EmailAddressIsEmpty() {
		//Arrange
		ModernChatServer modernChatServer = new ModernChatServer();
		String emailAddr = """";
		String password = ""password"";
		
		//Act
		LoginBean loginBean = modernChatServer.signInAsAdmin(emailAddr, password);
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the password is empty.
	*/
	@Test
	void testSignInAsAdmin_PasswordIsEmpty() {
		//Arrange
		ModernChatServer modernChatServer = new ModernChatServer();
		String emailAddr = ""email@email.com"";
		String password = """";
		
		//Act
		LoginBean loginBean = modernChatServer.signInAsAdmin(emailAddr, password);
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the email address is not valid.
	*/
	@Test
	void testSignInAsAdmin_EmailAddressIsNotValid() {
		//Arrange
		ModernChatServer modernChatServer = new ModernChatServer();
		String emailAddr = ""email"";
		String password = ""password"";
		
		//Act
		LoginBean loginBean = modernChatServer.signInAsAdmin(emailAddr, password);
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the password is not valid.
	*/
	@Test
	void testSignInAsAdmin_PasswordIsNotValid() {
		//Arrange
		ModernChatServer modernChatServer = new ModernChatServer();
		String emailAddr = ""email@email.com"";
		String password = ""pass"";
		
		//Act
		LoginBean loginBean = modernChatServer.signInAsAdmin(emailAddr, password);
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the email address is not valid.
	*/
	@Test
	void testSignInAsAdmin_EmailAddressIsNotValid2() {
		//Arrange
		ModernChatServer modernChatServer = new ModernChatServer();
		String emailAddr = ""email@email"";
		String password = ""password"";
		
		//Act
		LoginBean loginBean = modernChatServer.signInAsAdmin(emailAddr, password);
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the password is not valid.
	*/
	@Test
	void testSignInAsAdmin_PasswordIsNotValid2() {
		//Arrange
		ModernChatServer modernChatServer = new ModernChatServer();
		String emailAddr = ""email@email.com"";
		String password = ""passwor"";
		
		//Act
		LoginBean loginBean = modernChatServer.signInAsAdmin(emailAddr, password);
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the email address is not valid.
	*/
	@Test
	void testSignInAsAdmin_EmailAddressIsNotValid3() {
		//Arrange
		ModernChatServer modernChatServer = new ModernChatServer();
		String emailAddr = ""email@email.com."";
		String password = ""password"";
		
		//Act
		LoginBean loginBean = modernChatServer.signInAsAdmin(emailAddr, password);
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the password is not valid.
	*/
	@Test
	void testSignInAsAdmin_PasswordIsNotValid3() {
		//Arrange
		ModernChatServer modernChatServer = new ModernChatServer();
		String emailAddr = ""email@email.com"";
		String password = ""passworD"";
		
		//Act
		LoginBean loginBean = modernChatServer.signInAsAdmin(emailAddr, password);
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the email address is not valid.
	*/
	@Test
	void testSignInAsAdmin_EmailAddressIsNotValid4() {
		//Arrange
		ModernChatServer modernChatServer = new ModernChatServer();
		String emailAddr = ""email@email.com."";
		String password = ""password"";
		
		//Act
		LoginBean loginBean = modernChatServer.signInAsAdmin(emailAddr, password);
		
		//Assert
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the password is not valid.
	*/
	@Test
	void testSignInAsAdmin_PasswordIsNotValid4() {
		//Arrange
		ModernChatServer modernChatServer = new ModernChatServer();
		String emailAddr = ""email@email.com"";
		String password = ""passworD"";
		"
cmpl-6wtIwDXKO1eqbjb58TtMqpbCwPBWz,/EvoSuiteBenchmark/scenario1/73_fim1/src/main/java/osa/ora/server/client/ui/utils/JFontChooser0.java,117.55236530303955,length,"// JFontChooser.java
package osa.ora.server.client.ui.utils;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.Serializable;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 * <code>JFontChooser</code> provides a pane of controls designed to allow
 * a user to manipulate and select a font.
 *
 * This class provides three levels of API:
 * <ol>
 * <li>A static convenience method which shows a modal font-chooser
 * dialog and returns the font selected by the user.
 * <li>A static convenience method for creating a font-chooser dialog
 * where <code>ActionListeners</code> can be specified to be invoked when
 * the user presses one of the dialog buttons.
 * <li>The ability to create instances of <code>JFontChooser</code> panes
 * directly (within any container). <code>PropertyChange</code> listeners
 * can be added to detect when the current ""font"" property changes.
 * </ol>
 * <p>
 *
 * @author Adrian BER
 */
public class JFontChooser extends JComponent {

    public Font showDialog(Component component, String title) {
        FontTracker ok = new FontTracker(this);
        JDialog dialog = createDialog(component, title, true, ok, null);
        dialog.addWindowListener(new FontChooserDialog.Closer());
        dialog.addComponentListener(new FontChooserDialog.DisposeOnClose());
        dialog.setAlwaysOnTop(true);
        // blocks until user brings dialog down...
        dialog.setVisible(true);
        return ok.getFont();
    }
}
","// JFontChooserTest.java
package osa.ora.server.client.ui.utils;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.Serializable;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JFontChooser}.
* It contains ten unit test cases for the {@link JFontChooser#showDialog(Component, String)} method.
*/
class JFontChooserTest {","// JFontChooserTest.java
package osa.ora.server.client.ui.utils;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.Serializable;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JFontChooser}.
* It contains ten unit test cases for the {@link JFontChooser#showDialog(Component, String)} method.
*/
class JFontChooserTest {

	/**
	* Test case for the {@link JFontChooser#showDialog(Component, String)} method.
	* It tests the case when the component is null.
	*/
	@Test
	void testShowDialog_ComponentIsNull() {
		JFontChooser jFontChooser = new JFontChooser();
		Font font = jFontChooser.showDialog(null, ""Test"");
		assertNull(font);
	}
	
	/**
	* Test case for the {@link JFontChooser#showDialog(Component, String)} method.
	* It tests the case when the title is null.
	*/
	@Test
	void testShowDialog_TitleIsNull() {
		JFontChooser jFontChooser = new JFontChooser();
		Font font = jFontChooser.showDialog(new JButton(), null);
		assertNull(font);
	}
	
	/**
	* Test case for the {@link JFontChooser#showDialog(Component, String)} method.
	* It tests the case when the title is empty.
	*/
	@Test
	void testShowDialog_TitleIsEmpty() {
		JFontChooser jFontChooser = new JFontChooser();
		Font font = jFontChooser.showDialog(new JButton(), """");
		assertNull(font);
	}
	
	/**
	* Test case for the {@link JFontChooser#showDialog(Component, String)} method.
	* It tests the case when the title is blank.
	*/
	@Test
	void testShowDialog_TitleIsBlank() {
		JFontChooser jFontChooser = new JFontChooser();
		Font font = jFontChooser.showDialog(new JButton(), "" "");
		assertNull(font);
	}
	
	/**
	* Test case for the {@link JFontChooser#showDialog(Component, String)} method.
	* It tests the case when the title is valid.
	*/
	@Test
	void testShowDialog_TitleIsValid() {
		JFontChooser jFontChooser = new JFontChooser();
		Font font = jFontChooser.showDialog(new JButton(), ""Test"");
		assertNotNull(font);
	}
	
	/**
	* Test case for the {@link JFontChooser#showDialog(Component, String)} method.
	* It tests the case when the component is valid and the title is null.
	*/
	@Test
	void testShowDialog_ComponentIsValid_TitleIsNull() {
		JFontChooser jFontChooser = new JFontChooser();
		Font font = jFontChooser.showDialog(new JButton(), null);
		assertNull(font);
	}
	
	/**
	* Test case for the {@link JFontChooser#showDialog(Component, String)} method.
	* It tests the case when the component is valid and the title is empty.
	*/
	@Test
	void testShowDialog_ComponentIsValid_TitleIsEmpty() {
		JFontChooser jFontChooser = new JFontChooser();
		Font font = jFontChooser.showDialog(new JButton(), """");
		assertNull(font);
	}
	
	/**
	* Test case for the {@link JFontChooser#showDialog(Component, String)} method.
	* It tests the case when the component is valid and the title is blank.
	*/
	@Test
	void testShowDialog_ComponentIsValid_TitleIsBlank() {
		JFontChooser jFontChooser = new JFontChooser();
		Font font = jFontChooser.showDialog(new JButton(), "" "");
		assertNull(font);
	}
	
	/**
	* Test case for the {@link JFontChooser#showDialog(Component, String)} method.
	* It tests the case when the component is valid and the title is valid.
	*/
	@Test
	void testShowDialog_ComponentIsValid_TitleIsValid() {
		JFontChooser jFontChooser = new JFontChooser();
		Font font = jFontChooser.showDialog(new JButton(), ""Test"");
		assertNotNull(font);
	}
}

// FontChooserDialog.java
package osa.ora.server.client.ui.utils;

import java.awt.Component;
import java.awt.Container;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.Serializable;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;

/**
 * A class that displays a font chooser dialog.
 *
 * @author Adrian BER
 */
class FontChooserDialog extends JDialog {

    /**
     * The font chooser that is contained in this dialog.
     */
    private JFontChooser chooserPane;

    /**
     * The string that is shown in the approve button.
     */
    private String approveButtonText;

    /**
     * The string that is shown in the cancel button.
     */
    private String cancelButtonText;

    /**
     * The <code>Locale</code> that is used for locating the strings.
     */
    private java.util.Locale locale;

    /**
     * The value that is returned if the approve button is pressed.
     */
    private int returnValue = ERROR_OPTION;

    /**
     * Return value from class method if cancel is chosen.
     */
    public static final int CANCEL_OPTION = 1;

    /**
     * Return value if approve (yes, ok) is chosen.
     */
    public static final int APPROVE_OPTION = 0;

    /**
     * Return value if an error occured.
     */
    public static final int ERROR_OPTION = -1;

    /**
     * Creates a new instance of <code>FontChooserDialog</code>.
     *
     * @param parent the parent frame
     * @param title the title of the dialog
     * @param modal true for a modal dialog, false for one that allows
     *              others windows to be active at the same time
     * @param chooserPane the font chooser that is contained in this dialog
     * @param approveListener the listener that is notified when the user
     *                        presses the approve button
     * @param cancelListener the listener that is notified when the user
     *                        presses the cancel button
     * @throws HeadlessException if GraphicsEnvironment.isHeadless() returns true.
     * @see java.awt.GraphicsEnvironment#isHeadless
     */
    public FontChooserDialog(Frame parent, String title, boolean modal,
            JFontChooser chooserPane, ActionListener approveListener,
            ActionListener cancelListener) throws HeadlessException {
        super(parent, title, modal);
        this.chooserPane = chooserPane;
        init(approveListener, cancelListener);
    }

    /**
     * Creates a new instance of <code>FontChooserDialog</code>.
     *
     * @param parent the parent dialog
     * @param title the title of the dialog
     * @param modal true for a modal dialog, false for one that allows
     *              others windows to be active at the same time
     * @param chooserPane the font chooser that is contained in this dialog
     * @param approveListener the listener that is notified when the user
     *                        presses the approve button
     * @param cancelListener the listener that is notified when the user"
cmpl-6wtJzajAkTOKhpRPxqje7SfKUUUfi,/EvoSuiteBenchmark/scenario1/73_fim1/src/main/java/osa/ora/server/client/ui/utils/JFontChooser1.java,72.33452820777893,length,"// JFontChooser.java
package osa.ora.server.client.ui.utils;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.Serializable;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 * <code>JFontChooser</code> provides a pane of controls designed to allow
 * a user to manipulate and select a font.
 *
 * This class provides three levels of API:
 * <ol>
 * <li>A static convenience method which shows a modal font-chooser
 * dialog and returns the font selected by the user.
 * <li>A static convenience method for creating a font-chooser dialog
 * where <code>ActionListeners</code> can be specified to be invoked when
 * the user presses one of the dialog buttons.
 * <li>The ability to create instances of <code>JFontChooser</code> panes
 * directly (within any container). <code>PropertyChange</code> listeners
 * can be added to detect when the current ""font"" property changes.
 * </ol>
 * <p>
 *
 * @author Adrian BER
 */
public class JFontChooser extends JComponent {

    public JDialog createDialog(Component c, String title, boolean modal, ActionListener okListener, ActionListener cancelListener) {
        return new FontChooserDialog(c, title, modal, this, okListener, cancelListener);
    }
}
","// JFontChooserTest.java
package osa.ora.server.client.ui.utils;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.Serializable;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JFontChooser}.
* It contains ten unit test cases for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
*/
class JFontChooserTest {","// JFontChooserTest.java
package osa.ora.server.client.ui.utils;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.Serializable;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JFontChooser}.
* It contains ten unit test cases for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
*/
class JFontChooserTest {

	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when the component is null.
	*/
	@Test
	void testCreateDialog_ComponentIsNull() {
		JFontChooser jFontChooser = new JFontChooser();
		JDialog dialog = jFontChooser.createDialog(null, ""Test"", true, null, null);
		assertNotNull(dialog);
	}
	
	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when the title is null.
	*/
	@Test
	void testCreateDialog_TitleIsNull() {
		JFontChooser jFontChooser = new JFontChooser();
		JDialog dialog = jFontChooser.createDialog(new JButton(), null, true, null, null);
		assertNotNull(dialog);
	}
	
	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when the title is empty.
	*/
	@Test
	void testCreateDialog_TitleIsEmpty() {
		JFontChooser jFontChooser = new JFontChooser();
		JDialog dialog = jFontChooser.createDialog(new JButton(), """", true, null, null);
		assertNotNull(dialog);
	}
	
	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when the title is not empty.
	*/
	@Test
	void testCreateDialog_TitleIsNotEmpty() {
		JFontChooser jFontChooser = new JFontChooser();
		JDialog dialog = jFontChooser.createDialog(new JButton(), ""Test"", true, null, null);
		assertNotNull(dialog);
	}
	
	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when the okListener is null.
	*/
	@Test
	void testCreateDialog_OkListenerIsNull() {
		JFontChooser jFontChooser = new JFontChooser();
		JDialog dialog = jFontChooser.createDialog(new JButton(), ""Test"", true, null, null);
		assertNotNull(dialog);
	}
	
	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when the okListener is not null.
	*/
	@Test
	void testCreateDialog_OkListenerIsNotNull() {
		JFontChooser jFontChooser = new JFontChooser();
		JDialog dialog = jFontChooser.createDialog(new JButton(), ""Test"", true, new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			}
		}, null);
		assertNotNull(dialog);
	}
	
	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when the cancelListener is null.
	*/
	@Test
	void testCreateDialog_CancelListenerIsNull() {
		JFontChooser jFontChooser = new JFontChooser();
		JDialog dialog = jFontChooser.createDialog(new JButton(), ""Test"", true, null, null);
		assertNotNull(dialog);
	}
	
	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when the cancelListener is not null.
	*/
	@Test
	void testCreateDialog_CancelListenerIsNotNull() {
		JFontChooser jFontChooser = new JFontChooser();
		JDialog dialog = jFontChooser.createDialog(new JButton(), ""Test"", true, null, new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			}
		});
		assertNotNull(dialog);
	}
	
	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when the component, title, okListener and cancelListener are not null.
	*/
	@Test
	void testCreateDialog_ComponentTitleOkListenerCancelListenerAreNotNull() {
		JFontChooser jFontChooser = new JFontChooser();
		JDialog dialog = jFontChooser.createDialog(new JButton(), ""Test"", true, new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			}
		}, new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
			}
		});
		assertNotNull(dialog);
	}
}

// FontChooserDialog.java
package osa.ora.server.client.ui.utils;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.Serializable;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 * <code>FontChooserDialog</code> is a dialog that allows users to choose
 * a font by name, size, style, and color.
 *
 * @author Adrian BER
 */
class FontChooserDialog extends JDialog {

    private static final long serialVersionUID = 1L;
    private static final String uiClassID = ""FontChooserDialogUI"";
    private static final String CANCEL_ACTION = ""cancel-search"";
    private static final String OK_ACTION = ""ok"";
    private static final String APPLY_ACTION = ""apply"";
    private static final String CLOSE_ACTION = ""close"";
    private static final String RESET_ACTION"
cmpl-6wtL98CNSQqB6etwdShYvqxAFFCTe,/EvoSuiteBenchmark/scenario1/73_fim1/src/main/java/osa/ora/server/utils/FileEncrypter.java,72.68877339363098,length,"// FileEncrypter.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class FileEncrypter {

    public static FileEncrypter getInstance() {
        if (fileEncrypter == null)
            fileEncrypter = new FileEncrypter(""FIM"".getBytes());
        return fileEncrypter;
    }
}
","// FileEncrypterTest.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEncrypter}.
* It contains ten unit test cases for the {@link FileEncrypter#getInstance()} method.
*/
class FileEncrypterTest {","// FileEncrypterTest.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEncrypter}.
* It contains ten unit test cases for the {@link FileEncrypter#getInstance()} method.
*/
class FileEncrypterTest {

		/**
		* Test case for the {@link FileEncrypter#getInstance()} method.
		* It checks if the method returns a non-null object.
		*/
		@Test
		void testGetInstance() {
				FileEncrypter fileEncrypter = FileEncrypter.getInstance();
				assertNotNull(fileEncrypter);
		}
}

// FileEncrypter.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class FileEncrypter {

    public static FileEncrypter getInstance() {
        if (fileEncrypter == null)
            fileEncrypter = new FileEncrypter(""FIM"".getBytes());
        return fileEncrypter;
    }
}

// FileEncrypterTest.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEncrypter}.
* It contains ten unit test cases for the {@link FileEncrypter#getInstance()} method.
*/
class FileEncrypterTest {
		
		/**
		* Test case for the {@link FileEncrypter#getInstance()} method.
		* It checks if the method returns a non-null object.
		*/
		@Test
		void testGetInstance() {
				FileEncrypter fileEncrypter = FileEncrypter.getInstance();
				assertNotNull(fileEncrypter);
		}
}

// FileEncrypter.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class FileEncrypter {

    public static FileEncrypter getInstance() {
        if (fileEncrypter == null)
            fileEncrypter = new FileEncrypter(""FIM"".getBytes());
        return fileEncrypter;
    }
}

// FileEncrypterTest.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEncrypter}.
* It contains ten unit test cases for the {@link FileEncrypter#getInstance()} method.
*/
class FileEncrypterTest {
		
		/**
		* Test case for the {@link FileEncrypter#getInstance()} method.
		* It checks if the method returns a non-null object.
		*/
		@Test
		void testGetInstance() {
				FileEncrypter fileEncrypter = FileEncrypter.getInstance();
				assertNotNull(fileEncrypter);
		}
}

// FileEncrypter.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class FileEncrypter {

    public static FileEncrypter getInstance() {
        if (fileEncrypter == null)
            fileEncrypter = new FileEncrypter(""FIM"".getBytes());
        return fileEncrypter;
    }
}

// FileEncrypterTest.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEncrypter}.
* It contains ten unit test cases for the {@link FileEncrypter#getInstance()} method.
*/
class FileEncrypterTest {
		
		/**
		* Test case for the {@link FileEncrypter#getInstance()} method.
		* It checks if the method returns a non-null object.
		*/
		@Test
		void testGetInstance() {
				FileEncrypter fileEncrypter = FileEncrypter.getInstance();
				assertNotNull(fileEncrypter);
		}
}

// FileEncrypter.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class FileEncrypter {

    public static FileEncrypter getInstance() {
        if (fileEncrypter == null)
            fileEncrypter = new FileEncrypter(""FIM"".getBytes());
        return fileEncrypter;
    }
}

// FileEncrypterTest.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEncrypter}.
* It contains ten unit test cases for the {@link FileEncrypter#getInstance()} method.
*/
class FileEncrypterTest {
		
		/**
		* Test case for the {@link FileEncrypter#getInstance()} method.
		* It checks if the method returns a non-null object.
		*/
		@Test
		void testGetInstance() {
				FileEncrypter fileEncrypter = FileEncrypter.getInstance();
				assertNotNull(fileEncrypter);
		}
}

// FileEncrypter.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax"
cmpl-6wtMKRF5q5dXxIXKI3vHcZPjqXxiw,/EvoSuiteBenchmark/scenario1/73_fim1/src/main/java/osa/ora/server/utils/StringEncrypter0.java,6.637623310089111,stop,"// StringEncrypter.java
package osa.ora.server.utils;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import java.security.spec.KeySpec;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEParameterSpec;

public class StringEncrypter {

    public String encrypt(String str) {
        if (str == null)
            return null;
        try {
            // Encode the string into bytes using utf-8
            byte[] utf8 = str.getBytes(""UTF8"");
            // Encrypt
            byte[] enc = ecipher.doFinal(utf8);
            // Encode bytes to base64 to get a string
            return StringEncoder64.encode(enc);
        } catch (Exception e) {
        }
        return null;
    }
}
","// StringEncrypterTest.java
package osa.ora.server.utils;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import java.security.spec.KeySpec;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEParameterSpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringEncrypter}.
* It contains ten unit test cases for the {@link StringEncrypter#encrypt(String)} method.
*/
class StringEncrypterTest {","// StringEncrypterTest.java
package osa.ora.server.utils;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import java.security.spec.KeySpec;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEParameterSpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringEncrypter}.
* It contains ten unit test cases for the {@link StringEncrypter#encrypt(String)} method.
*/
class StringEncrypterTest {

		@Test
		void testEncrypt() {
				StringEncrypter encrypter = new StringEncrypter();
				String encrypted = encrypter.encrypt(""test"");
				assertEquals(""test"", encrypted);
		}
}

// StringEncoder64.java
package osa.ora.server.utils;

import java.io.IOException;

public class StringEncoder64 {

    public static String encode(byte[] bytes) {
        return new sun.misc.BASE64Encoder().encode(bytes);
    }

    public static byte[] decode(String str) throws IOException {
        return new sun.misc.BASE64Decoder().decodeBuffer(str);
    }
}"
cmpl-6wtNNJgzcoOOpntSKnojpnmROBweR,/EvoSuiteBenchmark/scenario1/73_fim1/src/main/java/osa/ora/server/utils/StringEncrypter1.java,65.45918393135071,length,"// StringEncrypter.java
package osa.ora.server.utils;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import java.security.spec.KeySpec;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEParameterSpec;

public class StringEncrypter {

    public String decrypt(String str) {
        if (str == null)
            return null;
        try {
            // Decode base64 to get bytes
            byte[] dec = StringEncoder64.decode(str);
            // Decrypt
            byte[] utf8 = dcipher.doFinal(dec);
            // Decode using utf-8
            return new String(utf8, ""UTF8"");
        } catch (Exception e) {
        }
        return null;
    }
}
","// StringEncrypterTest.java
package osa.ora.server.utils;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import java.security.spec.KeySpec;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEParameterSpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringEncrypter}.
* It contains ten unit test cases for the {@link StringEncrypter#decrypt(String)} method.
*/
class StringEncrypterTest {","// StringEncrypterTest.java
package osa.ora.server.utils;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import java.security.spec.KeySpec;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEParameterSpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringEncrypter}.
* It contains ten unit test cases for the {@link StringEncrypter#decrypt(String)} method.
*/
class StringEncrypterTest {

		@Test
		void testDecrypt() {
				StringEncrypter se = new StringEncrypter();
				assertEquals(""test"", se.decrypt(""test""));
		}
}

// StringEncoder64.java
package osa.ora.server.utils;

import java.io.IOException;

public class StringEncoder64 {

    public static String encode(byte[] d) {
        if (d == null)
            return null;
        byte data[] = new byte[d.length + 2];
        System.arraycopy(d, 0, data, 0, d.length);
        byte dest[] = new byte[(data.length / 3) * 4];
        // 3-byte to 4-byte conversion
        for (int sidx = 0, didx = 0; sidx < d.length; sidx += 3, didx += 4) {
            dest[didx] = (byte) ((data[sidx] >>> 2) & 077);
            dest[didx + 1] = (byte) ((data[sidx + 1] >>> 4) & 017 | (data[sidx] << 4) & 077);
            dest[didx + 2] = (byte) ((data[sidx + 2] >>> 6) & 003 | (data[sidx + 1] << 2) & 077);
            dest[didx + 3] = (byte) (data[sidx + 2] & 077);
        }
        // 0-63 to ascii printable conversion
        for (int idx = 0; idx < dest.length; idx++) {
            if (dest[idx] < 26)
                dest[idx] = (byte) (dest[idx] + 'A');
            else if (dest[idx] < 52)
                dest[idx] = (byte) (dest[idx] + 'a' - 26);
            else if (dest[idx] < 62)
                dest[idx] = (byte) (dest[idx] + '0' - 52);
            else if (dest[idx] < 63)
                dest[idx] = (byte) '+';
            else
                dest[idx] = (byte) '/';
        }
        // add padding
        for (int idx = dest.length - 1; idx > (d.length * 4) / 3; idx--) {
            dest[idx] = (byte) '=';
        }
        return new String(dest);
    }

    public static byte[] decode(String str) throws IOException {
        if (str == null)
            return null;
        byte data[] = str.getBytes();
        // ascii printable to 0-63 conversion
        for (int idx = 0; idx < data.length; idx++) {
            if (data[idx] == '=')
                data[idx] = 0;
            else if (data[idx] == '/')
                data[idx] = 63;
            else if (data[idx] == '+')
                data[idx] = 62;
            else if (data[idx] >= '0' && data[idx] <= '9')
                data[idx] = (byte) (data[idx] - ('0' - 52));
            else if (data[idx] >= 'a' && data[idx] <= 'z')
                data[idx] = (byte) (data[idx] - ('a' - 26));
            else if (data[idx] >= 'A' && data[idx] <= 'Z')
                data[idx] = (byte) (data[idx] - 'A');
        }
        // 4-byte to 3-byte conversion
        byte dest[] = new byte[(data.length / 4) * 3];
        for (int sidx = 0, didx = 0; didx < dest.length - 2; sidx += 4, didx += 3) {
            dest[didx] = (byte) (((data[sidx] << 2) & 255) | ((data[sidx + 1] >>> 4) & 3));
            dest[didx + 1] = (byte) (((data[sidx + 1] << 4) & 255) | ((data[sidx + 2] >>> 2) & 017));
            dest[didx + 2] = (byte) (((data[sidx + 2] << 6) & 255) | (data[sidx + 3] & 077));
        }
        if (data[data.length - 2] == 0)
            System.arraycopy(dest, 0, dest, 0, dest.length - 2);
        else if (data[data.length - 1] == 0)
            System.arraycopy(dest, 0, dest, 0, dest.length - 1);
        return dest;
    }
}

// StringEncoder64Test.java
package osa.ora.server.utils;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringEncoder64}.
* It contains ten unit test cases for the {@link StringEncoder64#encode(byte[])} method.
*/
class StringEncoder64Test {
		
		@Test
		void testEncode() {
				StringEncoder64 se = new StringEncoder64();
				assertEquals(""test"", se.encode(""test"".getBytes()));
		}
}

// StringEncoder64Test.java
package osa.ora.server.utils;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringEncoder64}.
* It contains ten unit test cases for the {@link StringEncoder64#decode(String)} method.
*/
class StringEncoder64Test {
		
		@Test
		void testDecode() {
				StringEncoder64 se = new StringEncoder64();
				assertEquals(""test"", se.decode(""test""));
		}
}

// StringEncoder64Test.java
package osa.ora.server.utils;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringEncoder64}.
* It contains ten unit test cases for the {@link StringEncoder64#encode(byte[])} method.
*/
class StringEncoder64Test {
		
		@Test
		void testEncode() {
				StringEncoder64 se = new StringEncoder64();
				assertEquals(""test"", se.encode(""test"".getBytes()));
		}
}

// StringEncoder64Test.java
package osa.ora.server.utils;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringEncoder64}.
* It contains ten unit test cases for the {@link StringEncoder64#decode(String)} method.
*/
class StringEncoder64Test {
		
		@Test
		void testDecode() {
				StringEncoder64 se = new StringEncoder64();
				assertEquals(""test"", se.decode(""test""));
		}
}

// StringEncoder64Test.java
package osa.ora.server.utils;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringEncoder64}.
* It contains ten unit test cases for the {@link StringEncoder64#encode(byte[])} method.
*/
class StringEncoder64Test {
		
		@Test
		void testEncode() {
				StringEncoder64 se = new StringEncoder64();
				assertEquals(""test"", se.encode(""test"".getBytes()));
		}
}

//"
