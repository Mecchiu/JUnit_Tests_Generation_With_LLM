ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wmaH5hFbkTIPMZp4PXSFooeiL6qy,/EvoSuiteBenchmark/scenario2/73_fim1/src/main/java/osa/ora/server/ModernChatServer0.java,73.79148697853088,length,"// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    /**
     * @return the logger
     */
    public static Logger getLogger() {
        return logger;
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#getLogger()} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#getLogger()} method.
*/
class ModernChatServerTest {

	/**
	* Test case for the {@link ModernChatServer#getLogger()} method.
	*/
	@Test
	void testGetLogger() {
		// TODO
	}
}

// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    /**
     * @return the logger
     */
    public static Logger getLogger() {
        return logger;
    }
}

// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#getLogger()} method.
*/
class ModernChatServerTest {
		
	/**
	* Test case for the {@link ModernChatServer#getLogger()} method.
	*/
	@Test
	void testGetLogger() {
		// TODO
	}
}

// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    /**
     * @return the logger
     */
    public static Logger getLogger() {
        return logger;
    }
}

// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora"
cmpl-6wmbSnQ9gdIyvegxNmXczx4RtyuYa,/EvoSuiteBenchmark/scenario2/73_fim1/src/main/java/osa/ora/server/ModernChatServer1.java,1.6578543186187744,,"// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    /**
     * any clinet ping it should receive true
     *
     * @return true always
     */
    public boolean ping() {
        return true;
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#ping()} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#ping()} method.
*/
class ModernChatServerTest {

	/**
	* Test case for {@link ModernChatServer#ping()}.
	*/
	@Test
	void testPing() {
		assertTrue(true);
	}
}"
b410fc15-6202-47b9-be26-11068fd97968,/EvoSuiteBenchmark/scenario2/73_fim1/src/main/java/osa/ora/server/ModernChatServer2.java,-1,"ERROR - Request timed out: HTTPSConnectionPool(host='api.openai.com', port=443): Read timed out. (read timeout=600)","// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    /**
     * Method to sing in ..
     *
     * @param cf : user client interface to communicate with the client
     * @param emailAddr : user email
     * @param password : user password
     * @param ipAddress : user ip address
     * @return User object if authentication correctly , or null if not exist.
     * @throws RemoteException
     */
    public LoginBean signIn(ClientInterface cf, String emailAddr, String password, String ipAddress) throws RemoteException {
        LoginBean loginBean = null;
        //authenticate User
        //DB authentication....
        if (emailAddr != null && password != null && ipAddress != null) {
            String email = StringEncoder64.decodeStringUTF8(emailAddr);
            //System.out.println(""email=""+email);
            User user = authenticateUser(email, password);
            if (user != null) {
                ipAddress = StringEncoder64.decodeStringUTF8(ipAddress);
                //System.out.println(""ip=""+ipAddress);
                ClientInterface oldOne = connectedClients.get(user.getId());
                if (oldOne != null) {
                    String ipAdd = connectedClientsIPs.get(user.getId());
                    if (ipAdd != null && ipAdd.equals(ipAddress)) {
                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, true);
                        sendKickOffByLoginMessageThread.start();
                    } else {
                        SendKickOffByLoginMessageThread sendKickOffByLoginMessageThread = new SendKickOffByLoginMessageThread(oldOne, false);
                        sendKickOffByLoginMessageThread.start();
                    }
                }
                connectedClients.put(user.getId(), cf);
                connectedClientsIPs.put(user.getId(), ipAddress);
                getLogger().log(Level.FINE, ""User "" + email + "" has logged in."");
                loginBean = new LoginBean();
                loginBean.setUser(user);
                String orignalPass = passwordEnc.decrypt(passwords.get(user.getId()));
                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);
                loginBean.setSecureToken(tokenUsed);
                loginBean.setAuthToken(clientAuthToken);
                return loginBean;
            } else {
                getLogger().log(Level.FINE, ""User "" + email + "" is not valid!"");
                return null;
            }
        } else {
            getLogger().log(Level.WARNING, ""Credentials is null!"");
            return null;
        }
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#signIn(ClientInterface, String, String, String)} method.
*/
class ModernChatServerTest {
"
fb31d847-ff5c-46b3-8fa0-ee16bc247d61,/EvoSuiteBenchmark/scenario2/73_fim1/src/main/java/osa/ora/server/ModernChatServer3.java,-1,"ERROR - HTTP code 502 from API (<html>
<head><title>502 Bad Gateway</title></head>
<body>
<center><h1>502 Bad Gateway</h1></center>
<hr><center>nginx</center>
</body>
</html>
)","// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    /**
     * change user password
     *
     * @param email : user email
     * @param oldPass : current password
     * @param newPass : new password
     * @return ResultBean with either true or false
     * @throws RemoteException
     */
    public ResultBean changePassword(String email, String oldPass, String newPass) throws RemoteException {
        email = StringEncoder64.decodeStringUTF8(email);
        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);
        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);
        User user = authenticateUser(email, newOldPass);
        if (user == null) {
            return new ResultBean(false, IConstant.ERROR, ""Invalid Password!"");
        }
        oldPass = passwordEnc.encrypt(oldPass);
        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);
        newPass = passwordEnc.encrypt(newPass);
        if (userBD.updatePassword(user.getId(), oldPass, newPass)) {
            passwords.put(user.getId(), newPass);
            return new ResultBean(true, IConstant.SUCCESS, null);
        }
        return new ResultBean(false, IConstant.ERROR, ""Error During Applying New Password!"");
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#changePassword(String, String, String)} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#changePassword(String, String, String)} method.
*/
class ModernChatServerTest {
"
cmpl-6wmwTjehYoh9IcX89cfXWuA6O61dm,/EvoSuiteBenchmark/scenario2/73_fim1/src/main/java/osa/ora/server/ModernChatServer4.java,204.07381057739258,length,"// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    /**
     * Change admin password
     *
     * @param emailAddr : email of the admin
     * @param oldPass : current password
     * @param newPass : new password
     * @return ResultBean : return status
     * @throws RemoteException
     */
    public ResultBean changeAdminPassword(String emailAddr, String oldPass, String newPass) throws RemoteException {
        oldPass = StringEncrypter.getInstance(secToken).decrypt(oldPass);
        String newOldPass = StringEncrypter.getInstance(oldPass).encrypt(oldPass);
        LoginBean loginBean = signInAsAdmin(emailAddr, newOldPass);
        if (loginBean == null) {
            return new ResultBean(false, IConstant.ERROR, ""Invalid Password!"");
        }
        oldPass = passwordEnc.encrypt(oldPass);
        newPass = StringEncrypter.getInstance(secToken).decrypt(newPass);
        newPass = passwordEnc.encrypt(newPass);
        if (userBD.updatePassword(adminUser.getId(), oldPass, newPass)) {
            passwords.put(adminUser.getId(), newPass);
            return new ResultBean(true, IConstant.SUCCESS, null);
        }
        return new ResultBean(false, IConstant.ERROR, ""Error During Applying New Password!"");
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#changeAdminPassword(String, String, String)} method.
*/
class ModernChatServerTest {

	/**
	* Test case 1 for method {@link ModernChatServer#changeAdminPassword(String, String, String)}.
	* Test case 1 checks if the method returns the correct result when the old password is correct.
	* @throws RemoteException
	*/
	@Test
	void testChangeAdminPassword1() throws RemoteException {
		// Arrange
		String emailAddr = ""admin@admin.com"";
		String oldPass = ""admin"";
		String newPass = ""admin"";
		ResultBean expected = new ResultBean(true, IConstant.SUCCESS, null);
		// Act
		ResultBean actual = changeAdminPassword(emailAddr, oldPass, newPass);
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 2 for method {@link ModernChatServer#changeAdminPassword(String, String, String)}.
	* Test case 2 checks if the method returns the correct result when the old password is incorrect.
	* @throws RemoteException
	*/
	@Test
	void testChangeAdminPassword2() throws RemoteException {
		// Arrange
		String emailAddr = ""admin@admin.com"";
		String oldPass = ""admin1"";
		String newPass = ""admin"";
		ResultBean expected = new ResultBean(false, IConstant.ERROR, ""Invalid Password!"");
		// Act
		ResultBean actual = changeAdminPassword(emailAddr, oldPass, newPass);
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 3 for method {@link ModernChatServer#changeAdminPassword(String, String, String)}.
	* Test case 3 checks if the method returns the correct result when the old password is null.
	* @throws RemoteException
	*/
	@Test
	void testChangeAdminPassword3() throws RemoteException {
		// Arrange
		String emailAddr = ""admin@admin.com"";
		String oldPass = null;
		String newPass = ""admin"";
		ResultBean expected = new ResultBean(false, IConstant.ERROR, ""Invalid Password!"");
		// Act
		ResultBean actual = changeAdminPassword(emailAddr, oldPass, newPass);
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 4 for method {@link ModernChatServer#changeAdminPassword(String, String, String)}.
	* Test case 4 checks if the method returns the correct result when the old password is empty.
	* @throws RemoteException
	*/
	@Test
	void testChangeAdminPassword4() throws RemoteException {
		// Arrange
		String emailAddr = ""admin@admin.com"";
		String oldPass = """";
		String newPass = ""admin"";
		ResultBean expected = new ResultBean(false, IConstant.ERROR, ""Invalid Password!"");
		// Act
		ResultBean actual = changeAdminPassword(emailAddr, oldPass, newPass);
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 5 for method {@link ModernChatServer#changeAdminPassword(String, String, String)}.
	* Test case 5 checks if the method returns the correct result when the new password is correct.
	* @throws RemoteException
	*/
	@Test
	void testChangeAdminPassword5() throws RemoteException {
		// Arrange
		String emailAddr = ""admin@admin.com"";
		String oldPass = ""admin"";
		String newPass = ""admin"";
		ResultBean expected = new ResultBean(true, IConstant.SUCCESS, null);
		// Act
		ResultBean actual = changeAdminPassword(emailAddr, oldPass, newPass);
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 6 for method {@link ModernChatServer#changeAdminPassword(String, String, String)}.
	* Test case 6 checks if the method returns the correct result when the new password is incorrect.
	* @throws RemoteException
	*/
	@Test
	void testChangeAdminPassword6() throws RemoteException {
		// Arrange
		String emailAddr = ""admin@admin.com"";
		String oldPass = ""admin"";
		String newPass = ""admin1"";
		ResultBean expected = new ResultBean(false, IConstant.ERROR, ""Error During Applying New Password!"");
		// Act
		ResultBean actual = changeAdminPassword(emailAddr, oldPass, newPass);
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 7 for method {@link ModernChatServer#changeAdminPassword(String, String, String)}.
	* Test case 7 checks if the method returns the correct result when the new password is null.
	* @throws RemoteException
	*/
	@Test
	void testChangeAdminPassword7() throws RemoteException {
		// Arrange
		String emailAddr = ""admin@admin.com"";
		String oldPass = ""admin"";
		String newPass = null;
		ResultBean expected = new ResultBean(false, IConstant.ERROR, ""Error During Applying New Password!"");
		// Act
		ResultBean actual = changeAdminPassword(emailAddr, oldPass, newPass);
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 8 for method {@link ModernChatServer#changeAdminPassword(String, String, String)}.
	* Test case 8 checks if the method returns the correct result when the new password is empty.
	* @throws RemoteException
	*/
	@Test
	void testChangeAdminPassword8() throws RemoteException {
		// Arrange
		String emailAddr = ""admin@admin.com"";
		String oldPass = ""admin"";
		String newPass = """";
		ResultBean expected = new ResultBean(false, IConstant.ERROR, ""Error During Applying New Password!"");
		// Act
		ResultBean actual = changeAdminPassword(emailAddr, oldPass, newPass);
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 9 for method {@link ModernChatServer#changeAdminPassword(String, String, String)}.
	* Test case 9 checks if the method returns the correct result when the email address is correct.
	* @throws RemoteException
	*/
	@Test
	void testChangeAdminPassword9() throws RemoteException {
		// Arrange
		String emailAddr = ""admin@admin.com"";
		String oldPass = ""admin"";
		String newPass = ""admin"";
		ResultBean expected = new ResultBean(true, IConstant.SUCCESS, null);
		// Act
		ResultBean actual = changeAdminPassword(emailAddr, oldPass, newPass);
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 10 for method {@link ModernChatServer#changeAdminPassword(String, String, String)}.
	* Test case 10 checks if the method returns the correct result when the email address is incorrect.
	* @throws RemoteException
	*/
	@Test
	void testChangeAdminPassword10() throws RemoteException {
		// Arrange
		String emailAddr = ""admin1@admin.com"";
		String oldPass = ""admin"";
		String newPass = ""admin"";
		ResultBean expected = new ResultBean(false, IConstant.ERROR, ""Invalid Password!"");
		// Act
		ResultBean actual = changeAdminPassword(emailAddr, oldPass, newPass);
		// Assert
		assertEquals(expected, actual);
	}
	
	/**
	* Test case 11 for method {@link ModernChatServer#changeAdminPassword(String, String, String)}.
	* Test case 11 checks if the method returns the correct result when the email address is null.
	"
cmpl-6wmzk99KgifenyXU3KVmACtLIt5AD,/EvoSuiteBenchmark/scenario2/73_fim1/src/main/java/osa/ora/server/ModernChatServer5.java,88.73272895812988,length,"// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    /**
     * Send text message but securly (i.e. encrypted)
     *
     * @param msg : the message to be send
     * @return boolean : true/false if the text message send or not.
     * @throws RemoteException
     */
    public boolean sendSecureTextMessage(TextMessage msg) throws RemoteException {
        if (msg.getTargetType() == IConstant.USER_CHAT) {
            ClientInterface cf = connectedClients.get(msg.getToUserId());
            return sendSecureTextMessageToUser(msg, cf);
        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {
            Vector<User> tempUsers = null;
            ClientInterface cf = null;
            for (int i = 0; i < getGroups().size(); i++) {
                if (getGroups().get(i).getId() == msg.getToUserId()) {
                    tempUsers = getGroups().get(i).getUsers();
                    break;
                }
            }
            if (tempUsers != null && tempUsers.size() > 0) {
                //loop on users
                boolean success = false;
                for (int i = 0; i < tempUsers.size(); i++) {
                    if (tempUsers.get(i).getId() != msg.getFromUserId()) {
                        cf = connectedClients.get(tempUsers.get(i).getId());
                        if (sendSecureTextMessageToUser(msg, cf)) {
                            success = true;
                        }
                    }
                }
                if (success) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {
            int[] tempUsers = null;
            ClientInterface cf = null;
            for (int i = 0; i < getRooms().size(); i++) {
                if (getRooms().get(i).getId() == msg.getToUserId()) {
                    tempUsers = getRooms().get(i).getUserId();
                    break;
                }
            }
            if (tempUsers != null && tempUsers.length > 0) {
                boolean success = false;
                //loop on users
                for (int i = 0; i < tempUsers.length; i++) {
                    if (tempUsers[i] != msg.getFromUserId()) {
                        cf = connectedClients.get(tempUsers[i]);
                        if (sendSecureTextMessageToUser(msg, cf)) {
                            success = true;
                        }
                    }
                }
                if (success) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.
*/
class ModernChatServerTest {

	/**
	* Test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.
	* This test case checks if the method returns false when the target type is not valid.
	*/
	@Test
	void testSendSecureTextMessage_TargetTypeNotValid() {
		//Arrange
		TextMessage msg = new TextMessage();
		msg.setTargetType(0);
		ModernChatServer server = new ModernChatServer();
		//Act
		boolean result = server.sendSecureTextMessage(msg);
		//Assert
		assertFalse(result);
	}
	
	/**
	* Test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.
	* This test case checks if the method returns false when the target type is USER_CHAT and the user is not connected.
	*/
	@Test
	void testSendSecureTextMessage_TargetTypeUserChat_UserNotConnected() {
		//Arrange
		TextMessage msg = new TextMessage();
		msg.setTargetType(IConstant.USER_CHAT);
		msg.setToUserId(1);
		ModernChatServer server = new ModernChatServer();
		//Act
		boolean result = server.sendSecureTextMessage(msg);
		//Assert
		assertFalse(result);
	}
	
	/**
	* Test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.
	* This test case checks if the method returns false when the target type is USER_CHAT and the user is connected.
	*/
	@Test
	void testSendSecureTextMessage_TargetTypeUserChat_UserConnected() {
		//Arrange
		TextMessage msg = new TextMessage();
		msg.setTargetType(IConstant.USER_CHAT);
		msg.setToUserId(1);
		ModernChatServer server = new ModernChatServer();
		ClientInterface client = new ClientInterface() {
			@Override
			public boolean sendTextMessage(TextMessage msg) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendBinaryMessage(BinaryMessage msg) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendSecureTextMessage(TextMessage msg) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendSecureBinaryMessage(BinaryMessage msg) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendUserUpdatedStatus(User user) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendRefreshContact(User user) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendKickOffMessage(User user) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendKickOffByLoginMessage(User user) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendUserUpdatedStatus(User user, int targetType, int targetId) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendRefreshContact(User user, int targetType, int targetId) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendKickOffMessage(User user, int targetType, int targetId) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendKickOffByLoginMessage(User user, int targetType, int targetId) throws RemoteException {
				return true;
			}
		};
		server.connectedClients.put(1, client);
		//Act
		boolean result = server.sendSecureTextMessage(msg);
		//Assert
		assertTrue(result);
	}
	
	/**
	* Test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.
	* This test case checks if the method returns false when the target type is GROUP_CHAT and the group is not found.
	*/
	@Test
	void testSendSecureTextMessage_TargetTypeGroupChat_GroupNotFound() {
		//Arrange
		TextMessage msg = new TextMessage();
		msg.setTargetType(IConstant.GROUP_CHAT);
		msg.setToUserId(1);
		ModernChatServer server = new ModernChatServer();
		//Act
		boolean result = server.sendSecureTextMessage(msg);
		//Assert
		assertFalse(result);
	}
	
	/**
	* Test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.
	* This test case checks if the method returns false when the target type is GROUP_CHAT and the group is found but the user is not connected.
	*/
	@Test
	void testSendSecureTextMessage_TargetTypeGroupChat_GroupFound_UserNotConnected() {
		//Arrange
		TextMessage msg = new TextMessage();
		msg.setTargetType(IConstant.GROUP_CHAT);
		msg.setToUserId(1);
		ModernChatServer server = new ModernChatServer();
		Group group = new Group();
		group.setId(1);
		User user = new User();
		user.setId(1);
		group.getUsers().add(user);
		server.getGroups().add(group);
		//Act
		boolean result = server.sendSecureTextMessage(msg);
		//Assert
		assertFalse(result);
	}
	
	/**
	* Test case for the {@link ModernChatServer#sendSecureTextMessage(TextMessage)} method.
	* This test case checks if the method returns false when the target type is GROUP_CHAT and the group is found but the user is connected.
	*/
	@Test
	void testSendSecureTextMessage_TargetTypeGroupChat_GroupFound_UserConnected() {
		//Arrange
		TextMessage msg = new TextMessage();
		msg.setTargetType(IConstant.GROUP_CHAT);
		msg.setToUserId(1);
		ModernChatServer server = new ModernChatServer();
		Group group = new Group();
		group.setId(1);
		User user = new User();
		user.setId(1);
		group.getUsers().add(user);
		server.getGroups().add(group);
		ClientInterface client = new ClientInterface() {
			@Override
			public boolean sendTextMessage(TextMessage msg) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendBinaryMessage(BinaryMessage msg) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendSecureTextMessage(TextMessage msg) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendSecureBinaryMessage(BinaryMessage msg) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendUserUpdatedStatus(User user) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendRefreshContact(User user) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendKickOffMessage(User user) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendKickOffByLoginMessage(User user) throws RemoteException {
				return true;
			}
			@Override
			public boolean sendUserUpdatedStatus(User"
cmpl-6wn1BRNBo6Fz7VxIIkvmjAUIqv9G5,/EvoSuiteBenchmark/scenario2/73_fim1/src/main/java/osa/ora/server/ModernChatServer6.java,54.41589546203613,stop,"// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    /**
     * Send Binary message (files)
     *
     * @param msg : the message to be send
     * @return ResultBean include the status of message send or not.
     * @throws RemoteException
     */
    public ResultBean sendBinaryMessage(BinaryMessage msg) throws RemoteException {
        ClientInterface cf = connectedClients.get(msg.getToUserId());
        if (cf == null) {
            return new ResultBean(false, IConstant.OFFLINE, null);
        } else {
            try {
                //online message, send it..
                if (msg.getAction() == IConstant.REQUEST) {
                    getLogger().log(Level.FINE, ""Request send"");
                    return cf.receiveBinaryMessageRequest(msg);
                } else {
                    getLogger().log(Level.FINE, ""Online BinaryMessage size="" + msg.getData().length + "" From="" + msg.getFromUserId() + "" To="" + msg.getToUserId());
                    cf.receiveBinaryMessageLoad(msg);
                    return new ResultBean(true, IConstant.SUCCESS, null);
                }
            } catch (RemoteException ex) {
                try {
                    getLogger().log(Level.FINE, ""Exception happen, will logoff this user"");
                    connectedClients.remove(msg.getToUserId());
                    connectedClientsIPs.remove(msg.getToUserId());
                    offlineStatus(msg.getToUserId());
                } catch (RemoteException ex1) {
                }
                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());
            }
        }
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#sendBinaryMessage(BinaryMessage)} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#sendBinaryMessage(BinaryMessage)} method.
*/
class ModernChatServerTest {

	/**
	* Test case 1 for {@link ModernChatServer#sendBinaryMessage(BinaryMessage)}.
	* This test case checks if the method returns the correct result when the message is sent to an offline user.
	*/
	@Test
	void testSendBinaryMessage_1() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
	
	/**
	* Test case 2 for {@link ModernChatServer#sendBinaryMessage(BinaryMessage)}.
	* This test case checks if the method returns the correct result when the message is sent to an online user.
	*/
	@Test
	void testSendBinaryMessage_2() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
	
	/**
	* Test case 3 for {@link ModernChatServer#sendBinaryMessage(BinaryMessage)}.
	* This test case checks if the method returns the correct result when the message is sent to an online user and the message is a request.
	*/
	@Test
	void testSendBinaryMessage_3() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
	
	/**
	* Test case 4 for {@link ModernChatServer#sendBinaryMessage(BinaryMessage)}.
	* This test case checks if the method returns the correct result when the message is sent to an online user and the message is a request and the user is not connected.
	*/
	@Test
	void testSendBinaryMessage_4() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
	
	/**
	* Test case 5 for {@link ModernChatServer#sendBinaryMessage(BinaryMessage)}.
	* This test case checks if the method returns the correct result when the message is sent to an online user and the message is a request and the user is not connected and the user is not connected.
	*/
	@Test
	void testSendBinaryMessage_5() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
	
	/**
	* Test case 6 for {@link ModernChatServer#sendBinaryMessage(BinaryMessage)}.
	* This test case checks if the method returns the correct result when the message is sent to an online user and the message is a request and the user is not connected and the user is not connected and the user is not connected.
	*/
	@Test
	void testSendBinaryMessage_6() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
	
	/**
	* Test case 7 for {@link ModernChatServer#sendBinaryMessage(BinaryMessage)}.
	* This test case checks if the method returns the correct result when the message is sent to an online user and the message is a request and the user is not connected and the user is not connected and the user is not connected and the user is not connected.
	*/
	@Test
	void testSendBinaryMessage_7() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
	
	/**
	* Test case 8 for {@link ModernChatServer#sendBinaryMessage(BinaryMessage)}.
	* This test case checks if the method returns the correct result when the message is sent to an online user and the message is a request and the user is not connected and the user is not connected and the user is not connected and the user is not connected and the user is not connected.
	*/
	@Test
	void testSendBinaryMessage_8() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
	
	/**
	* Test case 9 for {@link ModernChatServer#sendBinaryMessage(BinaryMessage)}.
	* This test case checks if the method returns the correct result when the message is sent to an online user and the message is a request and the user is not connected and the user is not connected and the user is not connected and the user is not connected and the user is not connected and the user is not connected.
	*/
	@Test
	void testSendBinaryMessage_9() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
	
	/**
	* Test case 10 for {@link ModernChatServer#sendBinaryMessage(BinaryMessage)}.
	* This test case checks if the method returns the correct result when the message is sent to an online user and the message is a request and the user is not connected and the user is not connected and the user is not connected and the user is not connected and the user is not connected and the user is not connected and the user is not connected.
	*/
	@Test
	void testSendBinaryMessage_10() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
	
}"
cmpl-6wn2EBMcMqrWSRngfhLJ07LZKA40W,/EvoSuiteBenchmark/scenario2/73_fim1/src/main/java/osa/ora/server/ModernChatServer7.java,58.85554337501526,stop,"// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    /**
     * Send Binary message (files) but secure (files not secure)
     *
     * @param msg : the message to be send
     * @return ResultBean include the status of message send or not.
     * @throws RemoteException
     */
    public ResultBean sendSecureBinaryMessage(BinaryMessage msg) throws RemoteException {
        ClientInterface cf = connectedClients.get(msg.getToUserId());
        if (cf == null) {
            return new ResultBean(false, IConstant.OFFLINE, null);
        } else {
            try {
                //online message, send it..
                if (msg.getAction() == IConstant.REQUEST) {
                    getLogger().log(Level.FINE, ""Request send"");
                    return cf.receiveSecureBinaryMessageRequest(msg);
                } else {
                    getLogger().log(Level.FINE, ""Online BinaryMessage size="" + msg.getData().length + "" From="" + msg.getFromUserId() + "" To="" + msg.getToUserId());
                    cf.receiveSecureBinaryMessageLoad(msg);
                    return new ResultBean(true, IConstant.SUCCESS, null);
                }
            } catch (RemoteException ex) {
                try {
                    getLogger().log(Level.FINE, ""Exception happen, will logoff this user"");
                    connectedClients.remove(msg.getToUserId());
                    connectedClientsIPs.remove(msg.getToUserId());
                    offlineStatus(msg.getToUserId());
                } catch (RemoteException ex1) {
                }
                return new ResultBean(false, IConstant.EXCEPTION, ex.getMessage());
            }
        }
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
*/
class ModernChatServerTest {

	/**
	* Test case 1 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the message is sent to an offline user.
	*/
	@Test
	void testSendSecureBinaryMessage_1() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
	
	/**
	* Test case 2 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the message is sent to an online user.
	*/
	@Test
	void testSendSecureBinaryMessage_2() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
	
	/**
	* Test case 3 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the message is sent to an online user and the message is a request.
	*/
	@Test
	void testSendSecureBinaryMessage_3() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
	
	/**
	* Test case 4 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the message is sent to an online user and the message is a load.
	*/
	@Test
	void testSendSecureBinaryMessage_4() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
	
	/**
	* Test case 5 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the message is sent to an online user and the message is a request and the user is kicked off.
	*/
	@Test
	void testSendSecureBinaryMessage_5() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
	
	/**
	* Test case 6 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the message is sent to an online user and the message is a load and the user is kicked off.
	*/
	@Test
	void testSendSecureBinaryMessage_6() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
	
	/**
	* Test case 7 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the message is sent to an online user and the message is a request and the user is kicked off and the user is logged off.
	*/
	@Test
	void testSendSecureBinaryMessage_7() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
	
	/**
	* Test case 8 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the message is sent to an online user and the message is a load and the user is kicked off and the user is logged off.
	*/
	@Test
	void testSendSecureBinaryMessage_8() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
	
	/**
	* Test case 9 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the message is sent to an online user and the message is a request and the user is kicked off and the user is logged off and an exception is thrown.
	*/
	@Test
	void testSendSecureBinaryMessage_9() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
	
	/**
	* Test case 10 for {@link ModernChatServer#sendSecureBinaryMessage(BinaryMessage)} method.
	* This test case checks if the method returns the correct result when the message is sent to an online user and the message is a load and the user is kicked off and the user is logged off and an exception is thrown.
	*/
	@Test
	void testSendSecureBinaryMessage_10() {
		// TODO: implement this test case
		fail(""Not yet implemented"");
	}
}"
cmpl-6wn3HgWblCoC1NGgpiyhKj8RVi9D1,/EvoSuiteBenchmark/scenario2/73_fim1/src/main/java/osa/ora/server/ModernChatServer8.java,83.0090684890747,stop,"// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    /**
     * Send announcemnt but securly (encrypted)
     *
     * @param msg : the announcemnt to be send
     * @throws RemoteException
     */
    public boolean sendSecureTextAnnouncement(TextMessage msg) throws RemoteException {
        if (msg.getTargetType() == IConstant.USER_CHAT) {
            ClientInterface cf = connectedClients.get(msg.getToUserId());
            return sendSecureTextAnnouncementToUser(msg, cf);
        } else if (msg.getTargetType() == IConstant.GROUP_CHAT) {
            Vector<User> tempUsers = null;
            ClientInterface cf = null;
            for (int i = 0; i < getGroups().size(); i++) {
                if (getGroups().get(i).getId() == msg.getToUserId()) {
                    tempUsers = getGroups().get(i).getUsers();
                    break;
                }
            }
            if (tempUsers != null && tempUsers.size() > 0) {
                //loop on users
                boolean deliverToAll = true;
                for (int i = 0; i < tempUsers.size(); i++) {
                    if (tempUsers.get(i).getId() != msg.getFromUserId()) {
                        cf = connectedClients.get(tempUsers.get(i).getId());
                        if (deliverToAll) {
                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);
                        } else {
                            sendSecureTextAnnouncementToUser(msg, cf);
                        }
                    }
                }
                return deliverToAll;
            }
        } else if (msg.getTargetType() == IConstant.ROOM_CHAT) {
            int[] tempUsers = null;
            ClientInterface cf = null;
            for (int i = 0; i < getRooms().size(); i++) {
                if (getRooms().get(i).getId() == msg.getToUserId()) {
                    tempUsers = getRooms().get(i).getUserId();
                    break;
                }
            }
            if (tempUsers != null && tempUsers.length > 0) {
                //loop on users
                boolean deliverToAll = true;
                for (int i = 0; i < tempUsers.length; i++) {
                    if (tempUsers[i] != msg.getFromUserId()) {
                        cf = connectedClients.get(tempUsers[i]);
                        if (deliverToAll) {
                            deliverToAll = sendSecureTextAnnouncementToUser(msg, cf);
                        } else {
                            sendSecureTextAnnouncementToUser(msg, cf);
                        }
                    }
                }
                return deliverToAll;
            }
        }
        return false;
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
*/
class ModernChatServerTest {

	/**
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* This test case checks if the method returns true when the target type is USER_CHAT.
	*/
	@Test
	void testSendSecureTextAnnouncement_USER_CHAT() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		TextMessage msg = new TextMessage();
		msg.setTargetType(IConstant.USER_CHAT);
		msg.setToUserId(1);
		msg.setFromUserId(2);
		assertTrue(server.sendSecureTextAnnouncement(msg));
	}
	
	/**
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* This test case checks if the method returns true when the target type is GROUP_CHAT.
	*/
	@Test
	void testSendSecureTextAnnouncement_GROUP_CHAT() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		TextMessage msg = new TextMessage();
		msg.setTargetType(IConstant.GROUP_CHAT);
		msg.setToUserId(1);
		msg.setFromUserId(2);
		assertTrue(server.sendSecureTextAnnouncement(msg));
	}
	
	/**
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* This test case checks if the method returns true when the target type is ROOM_CHAT.
	*/
	@Test
	void testSendSecureTextAnnouncement_ROOM_CHAT() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		TextMessage msg = new TextMessage();
		msg.setTargetType(IConstant.ROOM_CHAT);
		msg.setToUserId(1);
		msg.setFromUserId(2);
		assertTrue(server.sendSecureTextAnnouncement(msg));
	}
	
	/**
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* This test case checks if the method returns false when the target type is not USER_CHAT, GROUP_CHAT or ROOM_CHAT.
	*/
	@Test
	void testSendSecureTextAnnouncement_OTHER() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		TextMessage msg = new TextMessage();
		msg.setTargetType(0);
		msg.setToUserId(1);
		msg.setFromUserId(2);
		assertFalse(server.sendSecureTextAnnouncement(msg));
	}
	
	/**
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* This test case checks if the method returns false when the target type is USER_CHAT and the user is not connected.
	*/
	@Test
	void testSendSecureTextAnnouncement_USER_CHAT_NOT_CONNECTED() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		TextMessage msg = new TextMessage();
		msg.setTargetType(IConstant.USER_CHAT);
		msg.setToUserId(1);
		msg.setFromUserId(2);
		assertFalse(server.sendSecureTextAnnouncement(msg));
	}
	
	/**
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* This test case checks if the method returns false when the target type is GROUP_CHAT and the user is not connected.
	*/
	@Test
	void testSendSecureTextAnnouncement_GROUP_CHAT_NOT_CONNECTED() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		TextMessage msg = new TextMessage();
		msg.setTargetType(IConstant.GROUP_CHAT);
		msg.setToUserId(1);
		msg.setFromUserId(2);
		assertFalse(server.sendSecureTextAnnouncement(msg));
	}
	
	/**
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* This test case checks if the method returns false when the target type is ROOM_CHAT and the user is not connected.
	*/
	@Test
	void testSendSecureTextAnnouncement_ROOM_CHAT_NOT_CONNECTED() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		TextMessage msg = new TextMessage();
		msg.setTargetType(IConstant.ROOM_CHAT);
		msg.setToUserId(1);
		msg.setFromUserId(2);
		assertFalse(server.sendSecureTextAnnouncement(msg));
	}
	
	/**
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* This test case checks if the method returns false when the target type is USER_CHAT and the user is connected.
	*/
	@Test
	void testSendSecureTextAnnouncement_USER_CHAT_CONNECTED() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		TextMessage msg = new TextMessage();
		msg.setTargetType(IConstant.USER_CHAT);
		msg.setToUserId(1);
		msg.setFromUserId(2);
		assertFalse(server.sendSecureTextAnnouncement(msg));
	}
	
	/**
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* This test case checks if the method returns false when the target type is GROUP_CHAT and the user is connected.
	*/
	@Test
	void testSendSecureTextAnnouncement_GROUP_CHAT_CONNECTED() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		TextMessage msg = new TextMessage();
		msg.setTargetType(IConstant.GROUP_CHAT);
		msg.setToUserId(1);
		msg.setFromUserId(2);
		assertFalse(server.sendSecureTextAnnouncement(msg));
	}
	
	/**
	* Test case for the {@link ModernChatServer#sendSecureTextAnnouncement(TextMessage)} method.
	* This test case checks if the method returns false when the target type is ROOM_CHAT and the user is connected.
	*/
	@Test
	void testSendSecureTextAnnouncement_ROOM_CHAT_CONNECTED() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		TextMessage msg = new TextMessage();
		msg.setTargetType(IConstant.ROOM_CHAT);
		msg.setToUserId(1);
		msg.setFromUserId(2);
		assertFalse(server.sendSecureTextAnnouncement(msg));
	}
}"
cmpl-6wn4ckuwUFePBZxnrhuQLeZskv1cY,/EvoSuiteBenchmark/scenario2/73_fim1/src/main/java/osa/ora/server/ModernChatServer9.java,59.07157063484192,stop,"// ModernChatServer.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;

/**
 * @author ooransa
 * Class implements 2 interfaces:
 * 1.Runnable for ping users thread : that ping users periodically to check if they are still connected or not.
 * 2.ServerInterface that extends 2 other interfaces : Admin Interface and Client Interface , both used
 * As the RMI view of the server for the connected client.
 */
public class ModernChatServer implements ServerInterface, Runnable {

    /**
     * method used for sign in by the admin user
     *
     * @param emailAddr : email of the admin user
     * @param password : password of the admin user.
     * @return User either adminUser object or null if authentication failed.
     * @throws RemoteException
     */
    public LoginBean signInAsAdmin(String emailAddr, String password) throws RemoteException {
        //authenticate User
        //DB authentication....
        if (emailAddr != null && password != null) {
            String email = StringEncoder64.decodeStringUTF8(emailAddr);
            User user = null;
            String orignalPass = passwordEnc.decrypt(passwords.get(1000));
            password = StringEncrypter.getInstance(orignalPass).decrypt(password);
            if (email.equalsIgnoreCase(getAdminUser().getEmail()) && password != null && password.equals(orignalPass)) {
                user = getAdminUser();
            }
            if (user != null) {
                getLogger().log(Level.FINE, ""User "" + email + "" has logged in."");
                authToken = ""FIM"" + Calendar.getInstance().getTimeInMillis();
                LoginBean loginBean = new LoginBean();
                loginBean.setUser(adminUser);
                loginBean.setAuthToken(authToken);
                String tokenUsed = StringEncrypter.getInstance(orignalPass).encrypt(secToken);
                loginBean.setSecureToken(tokenUsed);
                return loginBean;
            } else {
                getLogger().log(Level.FINE, ""User "" + email + "" is not valid!"");
                return null;
            }
        } else {
            getLogger().log(Level.WARNING, ""Credentials is null!"");
            return null;
        }
    }
}
","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
*/
class ModernChatServerTest {","// ModernChatServerTest.java
package osa.ora.server;

import java.net.URISyntaxException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JOptionPane;
import osa.ora.server.bd.UsersBD;
import osa.ora.server.beans.BinaryMessage;
import osa.ora.server.beans.Group;
import osa.ora.server.beans.IConstant;
import osa.ora.server.beans.LoginBean;
import osa.ora.server.beans.ResultBean;
import osa.ora.server.beans.Room;
import osa.ora.server.beans.ServerSettingBean;
import osa.ora.server.beans.TextMessage;
import osa.ora.server.beans.User;
import osa.ora.server.client.ClientInterface;
import osa.ora.server.threads.SendKickOffByLoginMessageThread;
import osa.ora.server.threads.SendKickOffMessageThread;
import osa.ora.server.threads.SendRefreshContactThread;
import osa.ora.server.threads.SendUserUpdatedStatusThread;
import osa.ora.server.utils.StringEncoder64;
import osa.ora.server.utils.StringEncrypter;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModernChatServer}.
* It contains ten unit test cases for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
*/
class ModernChatServerTest {

	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the email address is null.
	*/
	@Test
	void testSignInAsAdmin_EmailAddressIsNull() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		LoginBean loginBean = server.signInAsAdmin(null, ""password"");
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the password is null.
	*/
	@Test
	void testSignInAsAdmin_PasswordIsNull() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		LoginBean loginBean = server.signInAsAdmin(""email"", null);
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the email address is empty.
	*/
	@Test
	void testSignInAsAdmin_EmailAddressIsEmpty() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		LoginBean loginBean = server.signInAsAdmin("""", ""password"");
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the password is empty.
	*/
	@Test
	void testSignInAsAdmin_PasswordIsEmpty() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		LoginBean loginBean = server.signInAsAdmin(""email"", """");
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the email address is not valid.
	*/
	@Test
	void testSignInAsAdmin_EmailAddressIsNotValid() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		LoginBean loginBean = server.signInAsAdmin(""email"", ""password"");
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the password is not valid.
	*/
	@Test
	void testSignInAsAdmin_PasswordIsNotValid() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		LoginBean loginBean = server.signInAsAdmin(""email"", ""password"");
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the email address is not valid.
	*/
	@Test
	void testSignInAsAdmin_EmailAddressIsNotValid2() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		LoginBean loginBean = server.signInAsAdmin(""email"", ""password"");
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the password is not valid.
	*/
	@Test
	void testSignInAsAdmin_PasswordIsNotValid2() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		LoginBean loginBean = server.signInAsAdmin(""email"", ""password"");
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the email address is not valid.
	*/
	@Test
	void testSignInAsAdmin_EmailAddressIsNotValid3() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		LoginBean loginBean = server.signInAsAdmin(""email"", ""password"");
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the password is not valid.
	*/
	@Test
	void testSignInAsAdmin_PasswordIsNotValid3() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		LoginBean loginBean = server.signInAsAdmin(""email"", ""password"");
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the email address is not valid.
	*/
	@Test
	void testSignInAsAdmin_EmailAddressIsNotValid4() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		LoginBean loginBean = server.signInAsAdmin(""email"", ""password"");
		assertNull(loginBean);
	}
	
	/**
	* Test case for the {@link ModernChatServer#signInAsAdmin(String, String)} method.
	* This test case checks if the method returns null when the password is not valid.
	*/
	@Test
	void testSignInAsAdmin_PasswordIsNotValid4() throws RemoteException {
		ModernChatServer server = new ModernChatServer();
		LoginBean loginBean = server.signInAsAdmin(""email"", ""password"");
		assertNull(loginBean);
	}
	
}"
cmpl-6wn5fuFdV0PTtfIOWencrq70su8wy,/EvoSuiteBenchmark/scenario2/73_fim1/src/main/java/osa/ora/server/client/ui/utils/JFontChooser0.java,25.353038787841797,stop,"// JFontChooser.java
package osa.ora.server.client.ui.utils;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.Serializable;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 * <code>JFontChooser</code> provides a pane of controls designed to allow
 * a user to manipulate and select a font.
 *
 * This class provides three levels of API:
 * <ol>
 * <li>A static convenience method which shows a modal font-chooser
 * dialog and returns the font selected by the user.
 * <li>A static convenience method for creating a font-chooser dialog
 * where <code>ActionListeners</code> can be specified to be invoked when
 * the user presses one of the dialog buttons.
 * <li>The ability to create instances of <code>JFontChooser</code> panes
 * directly (within any container). <code>PropertyChange</code> listeners
 * can be added to detect when the current ""font"" property changes.
 * </ol>
 * <p>
 *
 * @author Adrian BER
 */
public class JFontChooser extends JComponent {

    /**
     * Shows a modal font-chooser dialog and blocks until the
     * dialog is hidden.  If the user presses the ""OK"" button, then
     * this method hides/disposes the dialog and returns the selected color.
     * If the user presses the ""Cancel"" button or closes the dialog without
     * pressing ""OK"", then this method hides/disposes the dialog and returns
     * <code>null</code>.
     *
     * @param component the parent <code>Component</code> for the dialog
     * @param title the String containing the dialog's title
     * @return the selected font or <code>null</code> if the user opted out
     * @exception HeadlessException if GraphicsEnvironment.isHeadless()
     * returns true.
     * @see java.awt.GraphicsEnvironment#isHeadless
     */
    public Font showDialog(Component component, String title) {
        FontTracker ok = new FontTracker(this);
        JDialog dialog = createDialog(component, title, true, ok, null);
        dialog.addWindowListener(new FontChooserDialog.Closer());
        dialog.addComponentListener(new FontChooserDialog.DisposeOnClose());
        dialog.setAlwaysOnTop(true);
        // blocks until user brings dialog down...
        dialog.setVisible(true);
        return ok.getFont();
    }
}
","// JFontChooserTest.java
package osa.ora.server.client.ui.utils;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.Serializable;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JFontChooser}.
* It contains ten unit test cases for the {@link JFontChooser#showDialog(Component, String)} method.
*/
class JFontChooserTest {","// JFontChooserTest.java
package osa.ora.server.client.ui.utils;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.Serializable;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JFontChooser}.
* It contains ten unit test cases for the {@link JFontChooser#showDialog(Component, String)} method.
*/
class JFontChooserTest {

	/**
	* Test case for the {@link JFontChooser#showDialog(Component, String)} method.
	* It tests the case when the component is null.
	*/
	@Test
	void testShowDialog_ComponentNull() {
		JFontChooser jFontChooser = new JFontChooser();
		Font font = jFontChooser.showDialog(null, ""Test"");
		assertNull(font);
	}
	
	/**
	* Test case for the {@link JFontChooser#showDialog(Component, String)} method.
	* It tests the case when the title is null.
	*/
	@Test
	void testShowDialog_TitleNull() {
		JFontChooser jFontChooser = new JFontChooser();
		Font font = jFontChooser.showDialog(new JButton(), null);
		assertNull(font);
	}
	
	/**
	* Test case for the {@link JFontChooser#showDialog(Component, String)} method.
	* It tests the case when the title is empty.
	*/
	@Test
	void testShowDialog_TitleEmpty() {
		JFontChooser jFontChooser = new JFontChooser();
		Font font = jFontChooser.showDialog(new JButton(), """");
		assertNull(font);
	}
	
	/**
	* Test case for the {@link JFontChooser#showDialog(Component, String)} method.
	* It tests the case when the title is blank.
	*/
	@Test
	void testShowDialog_TitleBlank() {
		JFontChooser jFontChooser = new JFontChooser();
		Font font = jFontChooser.showDialog(new JButton(), "" "");
		assertNull(font);
	}
	
	/**
	* Test case for the {@link JFontChooser#showDialog(Component, String)} method.
	* It tests the case when the title is valid.
	*/
	@Test
	void testShowDialog_TitleValid() {
		JFontChooser jFontChooser = new JFontChooser();
		Font font = jFontChooser.showDialog(new JButton(), ""Test"");
		assertNotNull(font);
	}
}"
cmpl-6wn6iSNPL8qdJVWpCpLoKxsASDHX4,/EvoSuiteBenchmark/scenario2/73_fim1/src/main/java/osa/ora/server/client/ui/utils/JFontChooser1.java,108.49604845046997,length,"// JFontChooser.java
package osa.ora.server.client.ui.utils;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.Serializable;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 * <code>JFontChooser</code> provides a pane of controls designed to allow
 * a user to manipulate and select a font.
 *
 * This class provides three levels of API:
 * <ol>
 * <li>A static convenience method which shows a modal font-chooser
 * dialog and returns the font selected by the user.
 * <li>A static convenience method for creating a font-chooser dialog
 * where <code>ActionListeners</code> can be specified to be invoked when
 * the user presses one of the dialog buttons.
 * <li>The ability to create instances of <code>JFontChooser</code> panes
 * directly (within any container). <code>PropertyChange</code> listeners
 * can be added to detect when the current ""font"" property changes.
 * </ol>
 * <p>
 *
 * @author Adrian BER
 */
public class JFontChooser extends JComponent {

    /**
     * Creates and returns a new dialog containing the specified
     * <code>ColorChooser</code> pane along with ""OK"", ""Cancel"", and ""Reset""
     * buttons. If the ""OK"" or ""Cancel"" buttons are pressed, the dialog is
     * automatically hidden (but not disposed).  If the ""Reset""
     * button is pressed, the color-chooser's color will be reset to the
     * font which was set the last time <code>show</code> was invoked on the
     * dialog and the dialog will remain showing.
     *
     * @param c the parent component for the dialog
     * @param title the title for the dialog
     * @param modal a boolean. When true, the remainder of the program
     *                       is inactive until the dialog is closed.
     * @param okListener the ActionListener invoked when ""OK"" is pressed
     * @param cancelListener the ActionListener invoked when ""Cancel"" is pressed
     * @return a new dialog containing the font-chooser pane
     * @exception HeadlessException if GraphicsEnvironment.isHeadless()
     * returns true.
     * @see java.awt.GraphicsEnvironment#isHeadless
     */
    public JDialog createDialog(Component c, String title, boolean modal, ActionListener okListener, ActionListener cancelListener) {
        return new FontChooserDialog(c, title, modal, this, okListener, cancelListener);
    }
}
","// JFontChooserTest.java
package osa.ora.server.client.ui.utils;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.Serializable;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JFontChooser}.
* It contains ten unit test cases for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
*/
class JFontChooserTest {","// JFontChooserTest.java
package osa.ora.server.client.ui.utils;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.Serializable;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JFontChooser}.
* It contains ten unit test cases for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
*/
class JFontChooserTest {

	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when the {@code c} parameter is {@code null}.
	*/
	@Test
	void testCreateDialog_NullComponent() {
		JFontChooser fontChooser = new JFontChooser();
		JDialog dialog = fontChooser.createDialog(null, ""Test"", true, null, null);
		assertNotNull(dialog);
	}
	
	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when the {@code title} parameter is {@code null}.
	*/
	@Test
	void testCreateDialog_NullTitle() {
		JFontChooser fontChooser = new JFontChooser();
		JDialog dialog = fontChooser.createDialog(null, null, true, null, null);
		assertNotNull(dialog);
	}
	
	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when the {@code title} parameter is empty.
	*/
	@Test
	void testCreateDialog_EmptyTitle() {
		JFontChooser fontChooser = new JFontChooser();
		JDialog dialog = fontChooser.createDialog(null, """", true, null, null);
		assertNotNull(dialog);
	}
	
	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when the {@code title} parameter is not empty.
	*/
	@Test
	void testCreateDialog_NotEmptyTitle() {
		JFontChooser fontChooser = new JFontChooser();
		JDialog dialog = fontChooser.createDialog(null, ""Test"", true, null, null);
		assertNotNull(dialog);
	}
	
	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when the {@code modal} parameter is {@code true}.
	*/
	@Test
	void testCreateDialog_TrueModal() {
		JFontChooser fontChooser = new JFontChooser();
		JDialog dialog = fontChooser.createDialog(null, ""Test"", true, null, null);
		assertNotNull(dialog);
	}
	
	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when the {@code modal} parameter is {@code false}.
	*/
	@Test
	void testCreateDialog_FalseModal() {
		JFontChooser fontChooser = new JFontChooser();
		JDialog dialog = fontChooser.createDialog(null, ""Test"", false, null, null);
		assertNotNull(dialog);
	}
	
	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when the {@code okListener} parameter is {@code null}.
	*/
	@Test
	void testCreateDialog_NullOkListener() {
		JFontChooser fontChooser = new JFontChooser();
		JDialog dialog = fontChooser.createDialog(null, ""Test"", true, null, null);
		assertNotNull(dialog);
	}
	
	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when the {@code okListener} parameter is not {@code null}.
	*/
	@Test
	void testCreateDialog_NotNullOkListener() {
		JFontChooser fontChooser = new JFontChooser();
		JDialog dialog = fontChooser.createDialog(null, ""Test"", true, new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// Do nothing
			}
		}, null);
		assertNotNull(dialog);
	}
	
	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when the {@code cancelListener} parameter is {@code null}.
	*/
	@Test
	void testCreateDialog_NullCancelListener() {
		JFontChooser fontChooser = new JFontChooser();
		JDialog dialog = fontChooser.createDialog(null, ""Test"", true, null, null);
		assertNotNull(dialog);
	}
	
	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when the {@code cancelListener} parameter is not {@code null}.
	*/
	@Test
	void testCreateDialog_NotNullCancelListener() {
		JFontChooser fontChooser = new JFontChooser();
		JDialog dialog = fontChooser.createDialog(null, ""Test"", true, null, new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// Do nothing
			}
		});
		assertNotNull(dialog);
	}
	
	/**
	* Test case for the {@link JFontChooser#createDialog(Component, String, boolean, ActionListener, ActionListener)} method.
	* It tests the case when all parameters are not {@code null}.
	*/
	@Test
	void testCreateDialog_NotNullParameters() {
		JFontChooser fontChooser = new JFontChooser();
		JDialog dialog = fontChooser.createDialog(null, ""Test"", true, new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// Do nothing
			}
		}, new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// Do nothing
			}
		});
		assertNotNull(dialog);
	}
}

// JFontChooserDialog.java
package osa.ora.server.client.ui.utils;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.Serializable;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import jav"
cmpl-6wn8Tx8n7l6BVbl3FjAlaSKV6i8XT,/EvoSuiteBenchmark/scenario2/73_fim1/src/main/java/osa/ora/server/utils/FileEncrypter.java,103.86196160316467,length,"// FileEncrypter.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class FileEncrypter {

    /**
     * Singleton
     */
    public static FileEncrypter getInstance() {
        if (fileEncrypter == null)
            fileEncrypter = new FileEncrypter(""FIM"".getBytes());
        return fileEncrypter;
    }
}
","// FileEncrypterTest.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEncrypter}.
* It contains ten unit test cases for the {@link FileEncrypter#getInstance()} method.
*/
class FileEncrypterTest {","// FileEncrypterTest.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEncrypter}.
* It contains ten unit test cases for the {@link FileEncrypter#getInstance()} method.
*/
class FileEncrypterTest {

	/**
	 * Test of getInstance method, of class FileEncrypter.
	 */
	@Test
	public void testGetInstance() {
		System.out.println(""getInstance"");
		FileEncrypter expResult = null;
		FileEncrypter result = FileEncrypter.getInstance();
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
}

// FileEncrypter.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class FileEncrypter {

    /**
     * Singleton
     */
    public static FileEncrypter getInstance() {
        if (fileEncrypter == null)
            fileEncrypter = new FileEncrypter(""FIM"".getBytes());
        return fileEncrypter;
    }
}

// FileEncrypterTest.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEncrypter}.
* It contains ten unit test cases for the {@link FileEncrypter#getInstance()} method.
*/
class FileEncrypterTest {
		
	/**
	 * Test of getInstance method, of class FileEncrypter.
	 */
	@Test
	public void testGetInstance() {
		System.out.println(""getInstance"");
		FileEncrypter expResult = null;
		FileEncrypter result = FileEncrypter.getInstance();
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
}

// FileEncrypter.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class FileEncrypter {

    /**
     * Singleton
     */
    public static FileEncrypter getInstance() {
        if (fileEncrypter == null)
            fileEncrypter = new FileEncrypter(""FIM"".getBytes());
        return fileEncrypter;
    }
}

// FileEncrypterTest.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEncrypter}.
* It contains ten unit test cases for the {@link FileEncrypter#getInstance()} method.
*/
class FileEncrypterTest {
		
	/**
	 * Test of getInstance method, of class FileEncrypter.
	 */
	@Test
	public void testGetInstance() {
		System.out.println(""getInstance"");
		FileEncrypter expResult = null;
		FileEncrypter result = FileEncrypter.getInstance();
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
}

// FileEncrypter.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class FileEncrypter {

    /**
     * Singleton
     */
    public static FileEncrypter getInstance() {
        if (fileEncrypter == null)
            fileEncrypter = new FileEncrypter(""FIM"".getBytes());
        return fileEncrypter;
    }
}

// FileEncrypterTest.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEncrypter}.
* It contains ten unit test cases for the {@link FileEncrypter#getInstance()} method.
*/
class FileEncrypterTest {
		
	/**
	 * Test of getInstance method, of class FileEncrypter.
	 */
	@Test
	public void testGetInstance() {
		System.out.println(""getInstance"");
		FileEncrypter expResult = null;
		FileEncrypter result = FileEncrypter.getInstance();
		assertEquals(expResult, result);
		// TODO review the generated test code and remove the default call to fail.
		fail(""The test case is a prototype."");
	}
}

// FileEncrypter.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class FileEncrypter {

    /**
     * Singleton
     */
    public static FileEncrypter getInstance() {
        if (fileEncrypter == null)
            fileEncrypter = new FileEncrypter(""FIM"".getBytes());
        return fileEncrypter;
    }
}

// FileEncrypterTest.java
package osa.ora.server.utils;

// -----------------------------------------------------------------------------
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import java.io.IOException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FileEncrypter}.
* It contains ten unit test cases for the {@link FileEncrypter#getInstance()} method.
*/
class FileEncrypterTest {
		
	/**
	 * Test of getInstance method, of class FileEncrypter.
	 */
	"
cmpl-6wnA9xjUxMUHvFm0sMScLwpDpsgp3,/EvoSuiteBenchmark/scenario2/73_fim1/src/main/java/osa/ora/server/utils/StringEncrypter0.java,46.64670515060425,stop,"// StringEncrypter.java
package osa.ora.server.utils;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import java.security.spec.KeySpec;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEParameterSpec;

public class StringEncrypter {

    /**
     * Takes a single String as an argument and returns an Encrypted version
     * of that String.
     *
     * @param str String to be encrypted
     * @return <code>String</code> Encrypted version of the provided String
     */
    public String encrypt(String str) {
        if (str == null)
            return null;
        try {
            // Encode the string into bytes using utf-8
            byte[] utf8 = str.getBytes(""UTF8"");
            // Encrypt
            byte[] enc = ecipher.doFinal(utf8);
            // Encode bytes to base64 to get a string
            return StringEncoder64.encode(enc);
        } catch (Exception e) {
        }
        return null;
    }
}
","// StringEncrypterTest.java
package osa.ora.server.utils;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import java.security.spec.KeySpec;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEParameterSpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringEncrypter}.
* It contains ten unit test cases for the {@link StringEncrypter#encrypt(String)} method.
*/
class StringEncrypterTest {","// StringEncrypterTest.java
package osa.ora.server.utils;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import java.security.spec.KeySpec;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEParameterSpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringEncrypter}.
* It contains ten unit test cases for the {@link StringEncrypter#encrypt(String)} method.
*/
class StringEncrypterTest {

	/**
	* Test case for {@link StringEncrypter#encrypt(String)} method.
	* It tests the encryption of a null string.
	*/
	@Test
	void testEncryptNullString() {
		StringEncrypter encrypter = new StringEncrypter();
		assertNull(encrypter.encrypt(null));
	}
	
	/**
	* Test case for {@link StringEncrypter#encrypt(String)} method.
	* It tests the encryption of an empty string.
	*/
	@Test
	void testEncryptEmptyString() {
		StringEncrypter encrypter = new StringEncrypter();
		assertEquals("""", encrypter.encrypt(""""));
	}
	
	/**
	* Test case for {@link StringEncrypter#encrypt(String)} method.
	* It tests the encryption of a string with one character.
	*/
	@Test
	void testEncryptStringWithOneCharacter() {
		StringEncrypter encrypter = new StringEncrypter();
		assertEquals(""a"", encrypter.encrypt(""a""));
	}
	
	/**
	* Test case for {@link StringEncrypter#encrypt(String)} method.
	* It tests the encryption of a string with two characters.
	*/
	@Test
	void testEncryptStringWithTwoCharacters() {
		StringEncrypter encrypter = new StringEncrypter();
		assertEquals(""ab"", encrypter.encrypt(""ab""));
	}
	
	/**
	* Test case for {@link StringEncrypter#encrypt(String)} method.
	* It tests the encryption of a string with three characters.
	*/
	@Test
	void testEncryptStringWithThreeCharacters() {
		StringEncrypter encrypter = new StringEncrypter();
		assertEquals(""abc"", encrypter.encrypt(""abc""));
	}
	
	/**
	* Test case for {@link StringEncrypter#encrypt(String)} method.
	* It tests the encryption of a string with four characters.
	*/
	@Test
	void testEncryptStringWithFourCharacters() {
		StringEncrypter encrypter = new StringEncrypter();
		assertEquals(""abcd"", encrypter.encrypt(""abcd""));
	}
	
	/**
	* Test case for {@link StringEncrypter#encrypt(String)} method.
	* It tests the encryption of a string with five characters.
	*/
	@Test
	void testEncryptStringWithFiveCharacters() {
		StringEncrypter encrypter = new StringEncrypter();
		assertEquals(""abcde"", encrypter.encrypt(""abcde""));
	}
	
	/**
	* Test case for {@link StringEncrypter#encrypt(String)} method.
	* It tests the encryption of a string with six characters.
	*/
	@Test
	void testEncryptStringWithSixCharacters() {
		StringEncrypter encrypter = new StringEncrypter();
		assertEquals(""abcdef"", encrypter.encrypt(""abcdef""));
	}
	
	/**
	* Test case for {@link StringEncrypter#encrypt(String)} method.
	* It tests the encryption of a string with seven characters.
	*/
	@Test
	void testEncryptStringWithSevenCharacters() {
		StringEncrypter encrypter = new StringEncrypter();
		assertEquals(""abcdefg"", encrypter.encrypt(""abcdefg""));
	}
	
	/**
	* Test case for {@link StringEncrypter#encrypt(String)} method.
	* It tests the encryption of a string with eight characters.
	*/
	@Test
	void testEncryptStringWithEightCharacters() {
		StringEncrypter encrypter = new StringEncrypter();
		assertEquals(""abcdefgh"", encrypter.encrypt(""abcdefgh""));
	}
}"
cmpl-6wnBCnu4nN2gTm2F6dkepBN0vj4cp,/EvoSuiteBenchmark/scenario2/73_fim1/src/main/java/osa/ora/server/utils/StringEncrypter1.java,130.30396246910095,length,"// StringEncrypter.java
package osa.ora.server.utils;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import java.security.spec.KeySpec;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEParameterSpec;

public class StringEncrypter {

    /**
     * Takes a encrypted String as an argument, decrypts and returns the
     * decrypted String.
     *
     * @param str Encrypted String to be decrypted
     * @return <code>String</code> Decrypted version of the provided String
     */
    public String decrypt(String str) {
        if (str == null)
            return null;
        try {
            // Decode base64 to get bytes
            byte[] dec = StringEncoder64.decode(str);
            // Decrypt
            byte[] utf8 = dcipher.doFinal(dec);
            // Decode using utf-8
            return new String(utf8, ""UTF8"");
        } catch (Exception e) {
        }
        return null;
    }
}
","// StringEncrypterTest.java
package osa.ora.server.utils;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import java.security.spec.KeySpec;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEParameterSpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringEncrypter}.
* It contains ten unit test cases for the {@link StringEncrypter#decrypt(String)} method.
*/
class StringEncrypterTest {","// StringEncrypterTest.java
package osa.ora.server.utils;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import java.security.spec.KeySpec;
import java.security.spec.AlgorithmParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEParameterSpec;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringEncrypter}.
* It contains ten unit test cases for the {@link StringEncrypter#decrypt(String)} method.
*/
class StringEncrypterTest {

	/**
	* Test case for {@link StringEncrypter#decrypt(String)} method.
	* It tests the case when the input is null.
	*/
	@Test
	void testDecrypt_1() {
		StringEncrypter stringEncrypter = new StringEncrypter();
		String result = stringEncrypter.decrypt(null);
		assertNull(result);
	}
	
	/**
	* Test case for {@link StringEncrypter#decrypt(String)} method.
	* It tests the case when the input is empty.
	*/
	@Test
	void testDecrypt_2() {
		StringEncrypter stringEncrypter = new StringEncrypter();
		String result = stringEncrypter.decrypt("""");
		assertNull(result);
	}
	
	/**
	* Test case for {@link StringEncrypter#decrypt(String)} method.
	* It tests the case when the input is a valid encrypted string.
	*/
	@Test
	void testDecrypt_3() {
		StringEncrypter stringEncrypter = new StringEncrypter();
		String result = stringEncrypter.decrypt(""ZW5jcnlwdGVk"");
		assertEquals(""encrypted"", result);
	}
	
	/**
	* Test case for {@link StringEncrypter#decrypt(String)} method.
	* It tests the case when the input is a valid encrypted string.
	*/
	@Test
	void testDecrypt_4() {
		StringEncrypter stringEncrypter = new StringEncrypter();
		String result = stringEncrypter.decrypt(""ZW5jcnlwdGVk"");
		assertEquals(""encrypted"", result);
	}
	
	/**
	* Test case for {@link StringEncrypter#decrypt(String)} method.
	* It tests the case when the input is a valid encrypted string.
	*/
	@Test
	void testDecrypt_5() {
		StringEncrypter stringEncrypter = new StringEncrypter();
		String result = stringEncrypter.decrypt(""ZW5jcnlwdGVk"");
		assertEquals(""encrypted"", result);
	}
	
	/**
	* Test case for {@link StringEncrypter#decrypt(String)} method.
	* It tests the case when the input is a valid encrypted string.
	*/
	@Test
	void testDecrypt_6() {
		StringEncrypter stringEncrypter = new StringEncrypter();
		String result = stringEncrypter.decrypt(""ZW5jcnlwdGVk"");
		assertEquals(""encrypted"", result);
	}
	
	/**
	* Test case for {@link StringEncrypter#decrypt(String)} method.
	* It tests the case when the input is a valid encrypted string.
	*/
	@Test
	void testDecrypt_7() {
		StringEncrypter stringEncrypter = new StringEncrypter();
		String result = stringEncrypter.decrypt(""ZW5jcnlwdGVk"");
		assertEquals(""encrypted"", result);
	}
	
	/**
	* Test case for {@link StringEncrypter#decrypt(String)} method.
	* It tests the case when the input is a valid encrypted string.
	*/
	@Test
	void testDecrypt_8() {
		StringEncrypter stringEncrypter = new StringEncrypter();
		String result = stringEncrypter.decrypt(""ZW5jcnlwdGVk"");
		assertEquals(""encrypted"", result);
	}
	
	/**
	* Test case for {@link StringEncrypter#decrypt(String)} method.
	* It tests the case when the input is a valid encrypted string.
	*/
	@Test
	void testDecrypt_9() {
		StringEncrypter stringEncrypter = new StringEncrypter();
		String result = stringEncrypter.decrypt(""ZW5jcnlwdGVk"");
		assertEquals(""encrypted"", result);
	}
	
	/**
	* Test case for {@link StringEncrypter#decrypt(String)} method.
	* It tests the case when the input is a valid encrypted string.
	*/
	@Test
	void testDecrypt_10() {
		StringEncrypter stringEncrypter = new StringEncrypter();
		String result = stringEncrypter.decrypt(""ZW5jcnlwdGVk"");
		assertEquals(""encrypted"", result);
	}
}

// StringEncoder64.java
package osa.ora.server.utils;

import java.io.IOException;

/**
 * This class provides encode/decode for RFC 2045 Base64 as defined by RFC 2045,
 * N. Freed and N. Borenstein. RFC 2045: Multipurpose Internet Mail Extensions
 * (MIME) Part One: Format of Internet Message Bodies. Reference 1996 Available
 * at: http://www.ietf.org/rfc/rfc2045.txt This class is used by XML Schema
 * binary format validation
 *
 * @author Jeffrey Rodriguez
 * @version 1.0
 */
public class StringEncoder64 {

    /**
     * Encodes a String as a base64 String.
     *
     * @param data a String to encode.
     * @return a base64 encoded String.
     */
    public static String encode(String data) {
        return encode(data.getBytes());
    }

    /**
     * Encodes a byte array into a base64 String.
     *
     * @param data a byte array to encode.
     * @return a base64 encode String.
     */
    public static String encode(byte[] data) {
        int c;
        int len = data.length;
        StringBuffer ret = new StringBuffer(((len / 3) + 1) * 4);
        for (int i = 0; i < len; ++i) {
            c = (data[i] >> 2) & 0x3f;
            ret.append(cvt.charAt(c));
            c = (data[i] << 4) & 0x3f;
            if (++i < len) {
                c |= (data[i] >> 4) & 0x0f;
            }

            ret.append(cvt.charAt(c));
            if (i < len) {
                c = (data[i] << 2) & 0x3f;
                if (++i < len) {
                    c |= (data[i] >> 6) & 0x03;
                }

                ret.append(cvt.charAt(c));
            } else {
                ++i;
                ret.append((char) fillchar);
            }

            if (i < len) {
                c = data[i] & 0x3f;
                ret.append(cvt.charAt(c));
            } else {
                ret.append((char) fillchar);
            }
        }
        return ret.toString();
    }

    /**
     * Decodes a base64 String.
     *
     * @param data a base64 encoded String to decode.
     * @return the decoded String.
     */
    public static String decode(String data) {
        return decode(data.getBytes());
    }

    /**
     * Decodes a base64 aray of bytes.
     *
     * @param data a base64 encode byte array to decode.
     * @return the decoded String.
     */
    public static String decode(byte[] data) {
        int c, c1;
        int len = data.length;
        StringBuffer ret = new StringBuffer((len * 3) / 4);
        for (int i = 0; i < len; ++i) {
            c = cvt.indexOf(data[i]);
            ++i;
            c1 = cvt.indexOf(data[i]);
            c = ((c << 2) | ((c1 >> 4) & 0x3));
            ret.append((char) c);
            if (++i < len) {
                c = data[i];
                if (fillchar == c) {
                    break;
                }

                c = cvt.indexOf((char) c"
