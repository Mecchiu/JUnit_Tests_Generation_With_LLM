ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6xAov86qrNpKUeOXUgrmL1H4KaqOk,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale_0Test.java,99.28788638114929,length,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    /**
     */
    private static final long serialVersionUID = 1L;

    static JTextField textFieldNomResponsable;

    static JTextField textFieldPrenomResponsable;

    static JComboBox comboBoxSexeResponsable;

    static JTextField textFieldEmailResponsable;

    static JTextField textFieldTelResponsable;

    static JTable tableResp;

    static JTextField outputNomResp;

    static JTextField outputPrenomResp;

    static JTextField outputSexeResp;

    static JTextField outputEmailResp;

    static JTextField outputTelResp;

    static JTextField textFieldTitreFormation;

    static JComponent comboBoxDateLimiteFormation;

    static JTextField textFieldPrixDeLaFormation;

    static JComboBox comboBoxResponsableDeLaFormation;

    static JComboBox comboBoxJourDLM;

    static JComboBox comboBoxMoisDLM;

    static JComboBox comboBoxAnneeDLM;

    static JTable tableFormation;

    static JTextField outputTitreFormation;

    static JTextField outputDateLimiteFormation;

    static JTextField outputPrixFormation;

    static JTextField outputRespFormation;

    ModifTableStockage modifTableStockage;

    static JTextField textFieldNomEtudiant;

    static JTextField textFieldPrenomEtudiant;

    static JComboBox comboBoxSexeEtudiant;

    static JTextField textFieldEmailEtudiant;

    static JComponent textFieldPhotoEtudiants;

    static JComponent comboBoxDateNaissanceEtudiant;

    static JTextField textFieldDiplomeEtudiant;

    static JTextField textFieldNationnaliteEtudiant;

    static JTextField textFieldPhotoEtudiant;

    static JComboBox comboBoxJourDDNEtu;

    static JComboBox comboBoxMoisDDNEtu;

    static JComboBox comboBoxAnneeDDNEtu;

    static JComboBox comboBoxFormation1;

    static JComboBox comboBoxFormation2;

    static JTextArea outputRespArea;

    static JLabel titreArea;

    String[] columnNamesResp = { ""Nom"", ""Prenom"", ""Sexe"", ""Email"", ""Telephone"" };

    static JTable tableEtu;

    ListSelectionModel listSelectionModel;

    static JTextField outputNom;

    static JTextField outputPrenom;

    static JTextField outputSexe;

    static JTextField outputEmail;

    static JTextField outputDateDeNaissance;

    static JLabel outputPhoto;

    static JTextField outputDiplome;

    static JTextField outputNationalite;

    static JTextField outputFormation;

    static JCheckBox checkBoxAccept;

    static JCheckBox checkBoxBourse;

    static boolean accept;

    static boolean bourse;

    static JTextField montant;

    Object[][] dataResp;

    Zmodel modelResp;

    Zmodel modelForm;

    Zmodel modelEtu;

    Controler c;

    ImageIcon photoEtu;

    String[] columnNamesFormation = { ""Titre de la formation"", ""Date limite"", ""Prix"", ""Responsable"" };

    Object[][] dataFormation;

    String[] columnNamesEtu = { ""Nom"", ""Prenom"", ""Sexe"", ""Email"", ""Date de naissance"", ""Photo"", ""Diplome"", ""Nationalite"", ""Formation"", ""Acceptation"", ""Bourse"" };

    static Object[][] dataEtu;

    /**
     * constructeur qui cree l interface graphique
     * @param c
     */
    public FenetrePrincipale(Controler c) {
    }

    /**
     * creation de la matrice pour la liste deroulante
     * @return matrice pour la liste deroulante responsable
     */
    private Object[][] createListeDeroulanteResponsable();

    /**
     * creation de la matrice pour la liste deroulante
     * @return matrice pour la liste deroulante formation
     */
    private Object[][] createListeDeroulanteFormation();

    /**
     * creation de la matrice pour la liste deroulante
     * @return matrice pour la liste deroulante etudiant
     */
    private Object[][] createListeDeroulanteEtudiant();

    /**
     * creation de la barre d outil
     * @return creation de la barre d outil
     */
    void buildBarreDOutil();

    public void buildOnglet();

    /*
	 * 	reunion des de la creation du premiere ongle
	 */
    JComponent makeFormulaireResponsable();

    /*
	 * 	
	 * 
	 *		|nom :    |
	 *		|prenom : |
	 *		|sexe :   |
	 *		|email :  |
	 */
    JComponent makeFormultext();

    /*
	 * 
	 * 		|textField|
	 * 		|textField|
	 * 		|textField|
	 * 		|textField|
	 * 
	 */
    JComponent makeFormulTextField();

    JComponent makeModifierResponsable();

    JComponent makeFormulaireFormation();

    JComponent makeFormultextFormation();

    JComponent makeFormulTextFieldFormation();

    JComponent makeDateDeLaFormation();

    JComponent makeModifierFormation();

    /*
	 * 	reunion des de la creation du troisieme ongle
	 */
    JComponent makeFormulaireEtudiant();

    JComponent makeFormultextEtudiant();

    JComponent makeFormulTextFieldEtudiant();

    JComponent makeChargeImage();

    JComponent makeDateDeNaissance();

    JComponent makeValidation();

    public void actionPerformed(ActionEvent e);

    /**
     * Lit les checkbox
     */
    public void itemStateChanged(ItemEvent e);

    /**
     * date de la formation
     * @return la date de la formation sous forme de String
     */
    public String dateLimForm();

    /**
     * date de naissance
     * @return la date de naissance sous form de String
     */
    public String dateDeNaiss();

    /**
     * pour l icone
     * @return une image icon, ou null si le chemin est invalide
     */
    protected static ImageIcon createImageIcon(String path);

    /**
     * creation de la fenetre principale
     */
    private void build();

    /**
     * verification si les champ sont editable ou pas
     */
    public void afficheSiCelluleEditable();
}
","// FenetrePrincipale_0Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipale_0Test {","// FenetrePrincipale_0Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipale_0Test {

	/**
	 * Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	 * 
	 * <p>
	 * This test case is used to check if the {@link FenetrePrincipale#dateLimForm()} method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateLimForm_0() {
		// Initialize the test fixture
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		
		// Call the method under test
		String result = fenetrePrincipale.dateLimForm();
		
		// Verify the result
		assertEquals("""", result);
	}
	
	/**
	 * Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	 * 
	 * <p>
	 * This test case is used to check if the {@link FenetrePrincipale#dateLimForm()} method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateLimForm_1() {
		// Initialize the test fixture
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		
		// Call the method under test
		String result = fenetrePrincipale.dateLimForm();
		
		// Verify the result
		assertEquals("""", result);
	}
	
	/**
	 * Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	 * 
	 * <p>
	 * This test case is used to check if the {@link FenetrePrincipale#dateLimForm()} method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateLimForm_2() {
		// Initialize the test fixture
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		
		// Call the method under test
		String result = fenetrePrincipale.dateLimForm();
		
		// Verify the result
		assertEquals("""", result);
	}
	
	/**
	 * Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	 * 
	 * <p>
	 * This test case is used to check if the {@link FenetrePrincipale#dateLimForm()} method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateLimForm_3() {
		// Initialize the test fixture
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		
		// Call the method under test
		String result = fenetrePrincipale.dateLimForm();
		
		// Verify the result
		assertEquals("""", result);
	}
	
	/**
	 * Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	 * 
	 * <p>
	 * This test case is used to check if the {@link FenetrePrincipale#dateLimForm()} method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateLimForm_4() {
		// Initialize the test fixture
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		
		// Call the method under test
		String result = fenetrePrincipale.dateLimForm();
		
		// Verify the result
		assertEquals("""", result);
	}
	
	/**
	 * Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	 * 
	 * <p>
	 * This test case is used to check if the {@link FenetrePrincipale#dateLimForm()} method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateLimForm_5() {
		// Initialize the test fixture
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		
		// Call the method under test
		String result = fenetrePrincipale.dateLimForm();
		
		// Verify the result
		assertEquals("""", result);
	}
	
	/**
	 * Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	 * 
	 * <p>
	 * This test case is used to check if the {@link FenetrePrincipale#dateLimForm()} method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateLimForm_6() {
		// Initialize the test fixture
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		
		// Call the method under test
		String result = fenetrePrincipale.dateLimForm();
		
		// Verify the result
		assertEquals("""", result);
	}
	
	/**
	 * Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	 * 
	 * <p>
	 * This test case is used to check if the {@link FenetrePrincipale#dateLimForm()} method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateLimForm_7() {
		// Initialize the test fixture
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		
		// Call the method under test
		String result = fenetrePrincipale.dateLimForm();
		
		// Verify the result
		assertEquals("""", result);
	}
	
	/**
	 * Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	 * 
	 * <p>
	 * This test case is used to check if the {@link FenetrePrincipale#dateLimForm()} method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateLimForm_8() {
		// Initialize the test fixture
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		
		// Call the method under test
		String result = fenetrePrincipale.dateLimForm();
		
		// Verify the result
		assertEquals("""", result);
	}
	
	/**
	 * Test case for the {@link FenetrePrincipale#dateLimForm()} method.
	 * 
	 * <p>
	 * This test case is used to check if the {@link FenetrePrincipale#dateLimForm()} method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateLimForm_9() {
		// Initialize the test fixture
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		
		// Call the method under test
		String result = fenetrePrincipale.dateLimForm();
		
		// Verify the result
		assertEquals("""", result);
	}
	
}

// FenetrePrincipale_1Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java"
cmpl-6xAqWGSdSTG0rPBy4thH3XlSTytCj,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale_1Test.java,56.537842750549316,length,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    /**
     */
    private static final long serialVersionUID = 1L;

    static JTextField textFieldNomResponsable;

    static JTextField textFieldPrenomResponsable;

    static JComboBox comboBoxSexeResponsable;

    static JTextField textFieldEmailResponsable;

    static JTextField textFieldTelResponsable;

    static JTable tableResp;

    static JTextField outputNomResp;

    static JTextField outputPrenomResp;

    static JTextField outputSexeResp;

    static JTextField outputEmailResp;

    static JTextField outputTelResp;

    static JTextField textFieldTitreFormation;

    static JComponent comboBoxDateLimiteFormation;

    static JTextField textFieldPrixDeLaFormation;

    static JComboBox comboBoxResponsableDeLaFormation;

    static JComboBox comboBoxJourDLM;

    static JComboBox comboBoxMoisDLM;

    static JComboBox comboBoxAnneeDLM;

    static JTable tableFormation;

    static JTextField outputTitreFormation;

    static JTextField outputDateLimiteFormation;

    static JTextField outputPrixFormation;

    static JTextField outputRespFormation;

    ModifTableStockage modifTableStockage;

    static JTextField textFieldNomEtudiant;

    static JTextField textFieldPrenomEtudiant;

    static JComboBox comboBoxSexeEtudiant;

    static JTextField textFieldEmailEtudiant;

    static JComponent textFieldPhotoEtudiants;

    static JComponent comboBoxDateNaissanceEtudiant;

    static JTextField textFieldDiplomeEtudiant;

    static JTextField textFieldNationnaliteEtudiant;

    static JTextField textFieldPhotoEtudiant;

    static JComboBox comboBoxJourDDNEtu;

    static JComboBox comboBoxMoisDDNEtu;

    static JComboBox comboBoxAnneeDDNEtu;

    static JComboBox comboBoxFormation1;

    static JComboBox comboBoxFormation2;

    static JTextArea outputRespArea;

    static JLabel titreArea;

    String[] columnNamesResp = { ""Nom"", ""Prenom"", ""Sexe"", ""Email"", ""Telephone"" };

    static JTable tableEtu;

    ListSelectionModel listSelectionModel;

    static JTextField outputNom;

    static JTextField outputPrenom;

    static JTextField outputSexe;

    static JTextField outputEmail;

    static JTextField outputDateDeNaissance;

    static JLabel outputPhoto;

    static JTextField outputDiplome;

    static JTextField outputNationalite;

    static JTextField outputFormation;

    static JCheckBox checkBoxAccept;

    static JCheckBox checkBoxBourse;

    static boolean accept;

    static boolean bourse;

    static JTextField montant;

    Object[][] dataResp;

    Zmodel modelResp;

    Zmodel modelForm;

    Zmodel modelEtu;

    Controler c;

    ImageIcon photoEtu;

    String[] columnNamesFormation = { ""Titre de la formation"", ""Date limite"", ""Prix"", ""Responsable"" };

    Object[][] dataFormation;

    String[] columnNamesEtu = { ""Nom"", ""Prenom"", ""Sexe"", ""Email"", ""Date de naissance"", ""Photo"", ""Diplome"", ""Nationalite"", ""Formation"", ""Acceptation"", ""Bourse"" };

    static Object[][] dataEtu;

    /**
     * constructeur qui cree l interface graphique
     * @param c
     */
    public FenetrePrincipale(Controler c) {
    }

    /**
     * creation de la matrice pour la liste deroulante
     * @return matrice pour la liste deroulante responsable
     */
    private Object[][] createListeDeroulanteResponsable();

    /**
     * creation de la matrice pour la liste deroulante
     * @return matrice pour la liste deroulante formation
     */
    private Object[][] createListeDeroulanteFormation();

    /**
     * creation de la matrice pour la liste deroulante
     * @return matrice pour la liste deroulante etudiant
     */
    private Object[][] createListeDeroulanteEtudiant();

    /**
     * creation de la barre d outil
     * @return creation de la barre d outil
     */
    void buildBarreDOutil();

    public void buildOnglet();

    /*
	 * 	reunion des de la creation du premiere ongle
	 */
    JComponent makeFormulaireResponsable();

    /*
	 * 	
	 * 
	 *		|nom :    |
	 *		|prenom : |
	 *		|sexe :   |
	 *		|email :  |
	 */
    JComponent makeFormultext();

    /*
	 * 
	 * 		|textField|
	 * 		|textField|
	 * 		|textField|
	 * 		|textField|
	 * 
	 */
    JComponent makeFormulTextField();

    JComponent makeModifierResponsable();

    JComponent makeFormulaireFormation();

    JComponent makeFormultextFormation();

    JComponent makeFormulTextFieldFormation();

    JComponent makeDateDeLaFormation();

    JComponent makeModifierFormation();

    /*
	 * 	reunion des de la creation du troisieme ongle
	 */
    JComponent makeFormulaireEtudiant();

    JComponent makeFormultextEtudiant();

    JComponent makeFormulTextFieldEtudiant();

    JComponent makeChargeImage();

    JComponent makeDateDeNaissance();

    JComponent makeValidation();

    public void actionPerformed(ActionEvent e);

    /**
     * Lit les checkbox
     */
    public void itemStateChanged(ItemEvent e);

    /**
     * date de la formation
     * @return la date de la formation sous forme de String
     */
    public String dateLimForm();

    /**
     * date de naissance
     * @return la date de naissance sous form de String
     */
    public String dateDeNaiss();

    /**
     * pour l icone
     * @return une image icon, ou null si le chemin est invalide
     */
    protected static ImageIcon createImageIcon(String path);

    /**
     * creation de la fenetre principale
     */
    private void build();

    /**
     * verification si les champ sont editable ou pas
     */
    public void afficheSiCelluleEditable();
}
","// FenetrePrincipale_1Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipale_1Test {","// FenetrePrincipale_1Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipale_1Test {

	/**
	 * Test case for {@link FenetrePrincipale#dateDeNaiss()} method.
	 * 
	 * <p>
	 * This test case is used to check if the method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateDeNaiss_1() {
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		String result = fenetrePrincipale.dateDeNaiss();
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link FenetrePrincipale#dateDeNaiss()} method.
	 * 
	 * <p>
	 * This test case is used to check if the method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateDeNaiss_2() {
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		String result = fenetrePrincipale.dateDeNaiss();
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link FenetrePrincipale#dateDeNaiss()} method.
	 * 
	 * <p>
	 * This test case is used to check if the method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateDeNaiss_3() {
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		String result = fenetrePrincipale.dateDeNaiss();
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link FenetrePrincipale#dateDeNaiss()} method.
	 * 
	 * <p>
	 * This test case is used to check if the method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateDeNaiss_4() {
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		String result = fenetrePrincipale.dateDeNaiss();
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link FenetrePrincipale#dateDeNaiss()} method.
	 * 
	 * <p>
	 * This test case is used to check if the method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateDeNaiss_5() {
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		String result = fenetrePrincipale.dateDeNaiss();
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link FenetrePrincipale#dateDeNaiss()} method.
	 * 
	 * <p>
	 * This test case is used to check if the method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateDeNaiss_6() {
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		String result = fenetrePrincipale.dateDeNaiss();
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link FenetrePrincipale#dateDeNaiss()} method.
	 * 
	 * <p>
	 * This test case is used to check if the method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateDeNaiss_7() {
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		String result = fenetrePrincipale.dateDeNaiss();
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link FenetrePrincipale#dateDeNaiss()} method.
	 * 
	 * <p>
	 * This test case is used to check if the method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateDeNaiss_8() {
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		String result = fenetrePrincipale.dateDeNaiss();
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link FenetrePrincipale#dateDeNaiss()} method.
	 * 
	 * <p>
	 * This test case is used to check if the method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateDeNaiss_9() {
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		String result = fenetrePrincipale.dateDeNaiss();
		assertEquals("""", result);
	}
	
	/**
	 * Test case for {@link FenetrePrincipale#dateDeNaiss()} method.
	 * 
	 * <p>
	 * This test case is used to check if the method returns the correct value.
	 * </p>
	 */
	@Test
	void testDateDeNaiss_10() {
		FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
		String result = fenetrePrincipale.dateDeNaiss();
		assertEquals("""", result);
	}
}

// FenetrePrincipale_2Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipale_2Test {
		
	/**
	 * Test case for {@link FenetrePrincipale#"
cmpl-6xArZ97GzrxUtv6DuW9bkXfEqpgpz,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_0Test.java,116.18988871574402,length,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    // dimension de la table
    private int nbColonnes = 0;

    // avec la ligne de description (les noms des colonnes)
    private int nbLignes = 0;

    // la table d'origine (String[] nomColonnes ; Object[][] matrice;)
    private TableStockage ts;

    /**
     * Constructeur : recuperation de la TableStockage et initialisation
     *
     * @param ts
     */
    public ModifTableStockage(TableStockage ts) {
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage &agrave; partir de la table d'origine, mais avec une colonne en plus.
     * Nouvelle colonne de nom ""nomNouvelleColonne"" et de type ""type""
     * Colonne Ajoutee a la fin de la JTable
     * @param nomNouvelleColonne
     * @param type
     * @return TableStockage
     */
    public TableStockage ajouterColonne(String nomNouvelleColonne, Class<?> type);

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     * @return TableStockage
     */
    public TableStockage ajouterLigne();

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine
     * avec la colonne selectionnee en moins
     * colonne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerColonne(int indice);

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la ligne selectionnee en moins.
     * ligne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerLigne(int indice);

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre separee.
     * @param indice
     * @return TableStockage
     */
    public TableStockage separerColonne(int indice);

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre fusionnee avec la colonne voisine de droite.
     * @param indice
     * @return TableStockage
     */
    public TableStockage fusionnerColonnes(int indice);

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     * @return TableStockage
     */
    public TableStockage colonneMail();

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     * @return TableStockage
     */
    public TableStockage selectMail();
}
","// ModifTableStockage_0Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockage_0Test {","// ModifTableStockage_0Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockage_0Test {

	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table is empty.
	*/
	@Test
	void testAjouterLigne_0() {
		TableStockage ts = new TableStockage();
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getNbLignes(), 1);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has one column.
	*/
	@Test
	void testAjouterLigne_1() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""colonne1"", String.class);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getNbLignes(), 1);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has one column and one row.
	*/
	@Test
	void testAjouterLigne_2() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""colonne1"", String.class);
		ts.ajouterLigne();
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getNbLignes(), 2);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has one column and two rows.
	*/
	@Test
	void testAjouterLigne_3() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""colonne1"", String.class);
		ts.ajouterLigne();
		ts.ajouterLigne();
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getNbLignes(), 3);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has two columns and one row.
	*/
	@Test
	void testAjouterLigne_4() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""colonne1"", String.class);
		ts.ajouterColonne(""colonne2"", String.class);
		ts.ajouterLigne();
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getNbLignes(), 2);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has two columns and two rows.
	*/
	@Test
	void testAjouterLigne_5() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""colonne1"", String.class);
		ts.ajouterColonne(""colonne2"", String.class);
		ts.ajouterLigne();
		ts.ajouterLigne();
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getNbLignes(), 3);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has two columns and three rows.
	*/
	@Test
	void testAjouterLigne_6() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""colonne1"", String.class);
		ts.ajouterColonne(""colonne2"", String.class);
		ts.ajouterLigne();
		ts.ajouterLigne();
		ts.ajouterLigne();
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getNbLignes(), 4);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has three columns and one row.
	*/
	@Test
	void testAjouterLigne_7() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""colonne1"", String.class);
		ts.ajouterColonne(""colonne2"", String.class);
		ts.ajouterColonne(""colonne3"", String.class);
		ts.ajouterLigne();
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getNbLignes(), 2);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has three columns and two rows.
	*/
	@Test
	void testAjouterLigne_8() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""colonne1"", String.class);
		ts.ajouterColonne(""colonne2"", String.class);
		ts.ajouterColonne(""colonne3"", String.class);
		ts.ajouterLigne();
		ts.ajouterLigne();
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getNbLignes(), 3);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#ajouterLigne()} method.
	* It tests the case where the table has three columns and three rows.
	*/
	@Test
	void testAjouterLigne_9() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""colonne1"", String.class);
		ts.ajouterColonne(""colonne2"", String.class);
		ts.ajouterColonne(""colonne3"", String.class);
		ts.ajouterLigne();
		ts.ajouterLigne();
		ts.ajouterLigne();
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.ajouterLigne();
		assertEquals(ts2.getNbLignes(), 4);
	}
}

// ModifTableStockage_1Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#supprimerLigne(int)} method.
*/
class ModifTableStockage_1Test {
		
	/**
	* Test case for the {@link ModifTableStockage"
cmpl-6xAtRGp7phDhg8pdfbXoCB0O95KVe,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_1Test.java,79.12563347816467,length,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    // dimension de la table
    private int nbColonnes = 0;

    // avec la ligne de description (les noms des colonnes)
    private int nbLignes = 0;

    // la table d'origine (String[] nomColonnes ; Object[][] matrice;)
    private TableStockage ts;

    /**
     * Constructeur : recuperation de la TableStockage et initialisation
     *
     * @param ts
     */
    public ModifTableStockage(TableStockage ts) {
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage &agrave; partir de la table d'origine, mais avec une colonne en plus.
     * Nouvelle colonne de nom ""nomNouvelleColonne"" et de type ""type""
     * Colonne Ajoutee a la fin de la JTable
     * @param nomNouvelleColonne
     * @param type
     * @return TableStockage
     */
    public TableStockage ajouterColonne(String nomNouvelleColonne, Class<?> type);

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     * @return TableStockage
     */
    public TableStockage ajouterLigne();

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine
     * avec la colonne selectionnee en moins
     * colonne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerColonne(int indice);

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la ligne selectionnee en moins.
     * ligne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerLigne(int indice);

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre separee.
     * @param indice
     * @return TableStockage
     */
    public TableStockage separerColonne(int indice);

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre fusionnee avec la colonne voisine de droite.
     * @param indice
     * @return TableStockage
     */
    public TableStockage fusionnerColonnes(int indice);

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     * @return TableStockage
     */
    public TableStockage colonneMail();

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     * @return TableStockage
     */
    public TableStockage selectMail();
}
","// ModifTableStockage_1Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockage_1Test {","// ModifTableStockage_1Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockage_1Test {

	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the table is empty.
	*/
	@Test
	void testColonneMail_1() {
		TableStockage ts = new TableStockage();
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.colonneMail();
		assertEquals(ts2.getNbColonnes(), 1);
		assertEquals(ts2.getNbLignes(), 0);
		assertEquals(ts2.getNomColonne(0), ""E-Mail"");
		assertEquals(ts2.getTypeColonne(0), Boolean.class);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the table has only one column.
	*/
	@Test
	void testColonneMail_2() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""Nom"", String.class);
		ts.ajouterLigne();
		ts.setValeur(0, 0, ""Dupont"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.colonneMail();
		assertEquals(ts2.getNbColonnes(), 2);
		assertEquals(ts2.getNbLignes(), 1);
		assertEquals(ts2.getNomColonne(0), ""Nom"");
		assertEquals(ts2.getTypeColonne(0), String.class);
		assertEquals(ts2.getNomColonne(1), ""E-Mail"");
		assertEquals(ts2.getTypeColonne(1), Boolean.class);
		assertEquals(ts2.getValeur(0, 0), ""Dupont"");
		assertEquals(ts2.getValeur(0, 1), false);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the table has only one column and one row.
	*/
	@Test
	void testColonneMail_3() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""Nom"", String.class);
		ts.ajouterLigne();
		ts.setValeur(0, 0, ""Dupont"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.colonneMail();
		assertEquals(ts2.getNbColonnes(), 2);
		assertEquals(ts2.getNbLignes(), 1);
		assertEquals(ts2.getNomColonne(0), ""Nom"");
		assertEquals(ts2.getTypeColonne(0), String.class);
		assertEquals(ts2.getNomColonne(1), ""E-Mail"");
		assertEquals(ts2.getTypeColonne(1), Boolean.class);
		assertEquals(ts2.getValeur(0, 0), ""Dupont"");
		assertEquals(ts2.getValeur(0, 1), false);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the table has only one column and two rows.
	*/
	@Test
	void testColonneMail_4() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""Nom"", String.class);
		ts.ajouterLigne();
		ts.setValeur(0, 0, ""Dupont"");
		ts.ajouterLigne();
		ts.setValeur(1, 0, ""Durand"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.colonneMail();
		assertEquals(ts2.getNbColonnes(), 2);
		assertEquals(ts2.getNbLignes(), 2);
		assertEquals(ts2.getNomColonne(0), ""Nom"");
		assertEquals(ts2.getTypeColonne(0), String.class);
		assertEquals(ts2.getNomColonne(1), ""E-Mail"");
		assertEquals(ts2.getTypeColonne(1), Boolean.class);
		assertEquals(ts2.getValeur(0, 0), ""Dupont"");
		assertEquals(ts2.getValeur(0, 1), false);
		assertEquals(ts2.getValeur(1, 0), ""Durand"");
		assertEquals(ts2.getValeur(1, 1), false);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the table has two columns and one row.
	*/
	@Test
	void testColonneMail_5() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""Nom"", String.class);
		ts.ajouterColonne(""Prenom"", String.class);
		ts.ajouterLigne();
		ts.setValeur(0, 0, ""Dupont"");
		ts.setValeur(0, 1, ""Jean"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.colonneMail();
		assertEquals(ts2.getNbColonnes(), 3);
		assertEquals(ts2.getNbLignes(), 1);
		assertEquals(ts2.getNomColonne(0), ""Nom"");
		assertEquals(ts2.getTypeColonne(0), String.class);
		assertEquals(ts2.getNomColonne(1), ""Prenom"");
		assertEquals(ts2.getTypeColonne(1), String.class);
		assertEquals(ts2.getNomColonne(2), ""E-Mail"");
		assertEquals(ts2.getTypeColonne(2), Boolean.class);
		assertEquals(ts2.getValeur(0, 0), ""Dupont"");
		assertEquals(ts2.getValeur(0, 1), ""Jean"");
		assertEquals(ts2.getValeur(0, 2), false);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#colonneMail()} method.
	* It tests the case where the table has two columns and two rows.
	*/
	@Test
	void testColonneMail_6() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""Nom"", String.class);
		ts.ajouterColonne(""Prenom"", String.class);
		ts.ajouterLigne();
		ts.setValeur(0, 0, ""Dupont"");
		ts.setValeur(0, 1, ""Jean"");
		ts.ajouterLigne();
		ts.setValeur(1, 0, ""Durand"");
		ts.setValeur(1, 1, ""Pierre"");
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.colonneMail();
		assertEquals(ts2.getNbColonnes(), 3);
		assertEquals(ts2.getNbLignes(), 2);
		assertEquals(ts2.getNomColonne(0), ""Nom"");
		assertEquals(ts2.getTypeColonne"
cmpl-6xAuimbgBz12EXWuNqtjF939eW4n9,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_2Test.java,85.74814128875732,length,"// ModifTableStockage.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

public class ModifTableStockage {

    // dimension de la table
    private int nbColonnes = 0;

    // avec la ligne de description (les noms des colonnes)
    private int nbLignes = 0;

    // la table d'origine (String[] nomColonnes ; Object[][] matrice;)
    private TableStockage ts;

    /**
     * Constructeur : recuperation de la TableStockage et initialisation
     *
     * @param ts
     */
    public ModifTableStockage(TableStockage ts) {
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage &agrave; partir de la table d'origine, mais avec une colonne en plus.
     * Nouvelle colonne de nom ""nomNouvelleColonne"" et de type ""type""
     * Colonne Ajoutee a la fin de la JTable
     * @param nomNouvelleColonne
     * @param type
     * @return TableStockage
     */
    public TableStockage ajouterColonne(String nomNouvelleColonne, Class<?> type);

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     * @return TableStockage
     */
    public TableStockage ajouterLigne();

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine
     * avec la colonne selectionnee en moins
     * colonne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerColonne(int indice);

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la ligne selectionnee en moins.
     * ligne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerLigne(int indice);

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre separee.
     * @param indice
     * @return TableStockage
     */
    public TableStockage separerColonne(int indice);

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre fusionnee avec la colonne voisine de droite.
     * @param indice
     * @return TableStockage
     */
    public TableStockage fusionnerColonnes(int indice);

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     * @return TableStockage
     */
    public TableStockage colonneMail();

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     * @return TableStockage
     */
    public TableStockage selectMail();
}
","// ModifTableStockage_2Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockage_2Test {","// ModifTableStockage_2Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockage_2Test {

	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* It tests the case where the table is empty.
	*/
	@Test
	public void testSelectMail_1() {
		TableStockage ts = new TableStockage();
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts2.getNbLignes(), 0);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* It tests the case where the table contains only one line.
	*/
	@Test
	public void testSelectMail_2() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""Nom"", String.class);
		ts.ajouterColonne(""Prenom"", String.class);
		ts.ajouterColonne(""E-Mail"", Boolean.class);
		ts.ajouterLigne();
		ts.setValeur(0, 0, ""Dupont"");
		ts.setValeur(0, 1, ""Jean"");
		ts.setValeur(0, 2, true);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts2.getNbLignes(), 1);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* It tests the case where the table contains only one line and the mail is not selected.
	*/
	@Test
	public void testSelectMail_3() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""Nom"", String.class);
		ts.ajouterColonne(""Prenom"", String.class);
		ts.ajouterColonne(""E-Mail"", Boolean.class);
		ts.ajouterLigne();
		ts.setValeur(0, 0, ""Dupont"");
		ts.setValeur(0, 1, ""Jean"");
		ts.setValeur(0, 2, false);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts2.getNbLignes(), 0);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* It tests the case where the table contains only one line and the mail is selected.
	*/
	@Test
	public void testSelectMail_4() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""Nom"", String.class);
		ts.ajouterColonne(""Prenom"", String.class);
		ts.ajouterColonne(""E-Mail"", Boolean.class);
		ts.ajouterLigne();
		ts.setValeur(0, 0, ""Dupont"");
		ts.setValeur(0, 1, ""Jean"");
		ts.setValeur(0, 2, true);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts2.getNbLignes(), 1);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* It tests the case where the table contains only two lines and the mail is not selected.
	*/
	@Test
	public void testSelectMail_5() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""Nom"", String.class);
		ts.ajouterColonne(""Prenom"", String.class);
		ts.ajouterColonne(""E-Mail"", Boolean.class);
		ts.ajouterLigne();
		ts.setValeur(0, 0, ""Dupont"");
		ts.setValeur(0, 1, ""Jean"");
		ts.setValeur(0, 2, false);
		ts.ajouterLigne();
		ts.setValeur(1, 0, ""Dupont"");
		ts.setValeur(1, 1, ""Jean"");
		ts.setValeur(1, 2, false);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts2.getNbLignes(), 0);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* It tests the case where the table contains only two lines and the mail is selected.
	*/
	@Test
	public void testSelectMail_6() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""Nom"", String.class);
		ts.ajouterColonne(""Prenom"", String.class);
		ts.ajouterColonne(""E-Mail"", Boolean.class);
		ts.ajouterLigne();
		ts.setValeur(0, 0, ""Dupont"");
		ts.setValeur(0, 1, ""Jean"");
		ts.setValeur(0, 2, true);
		ts.ajouterLigne();
		ts.setValeur(1, 0, ""Dupont"");
		ts.setValeur(1, 1, ""Jean"");
		ts.setValeur(1, 2, true);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts2.getNbLignes(), 2);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* It tests the case where the table contains only two lines and the mail is selected in the first line.
	*/
	@Test
	public void testSelectMail_7() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""Nom"", String.class);
		ts.ajouterColonne(""Prenom"", String.class);
		ts.ajouterColonne(""E-Mail"", Boolean.class);
		ts.ajouterLigne();
		ts.setValeur(0, 0, ""Dupont"");
		ts.setValeur(0, 1, ""Jean"");
		ts.setValeur(0, 2, true);
		ts.ajouterLigne();
		ts.setValeur(1, 0, ""Dupont"");
		ts.setValeur(1, 1, ""Jean"");
		ts.setValeur(1, 2, false);
		ModifTableStockage mts = new ModifTableStockage(ts);
		TableStockage ts2 = mts.selectMail();
		assertEquals(ts2.getNbLignes(), 1);
	}
	
	/**
	* Test case for the {@link ModifTableStockage#selectMail()} method.
	* It tests the case where the table contains only two lines and the mail is selected in the second line.
	*/
	@Test
	public void testSelectMail_8() {
		TableStockage ts = new TableStockage();
		ts.ajouterColonne(""Nom"", String.class);
		ts.ajouterColonne(""Prenom"", String.class);
		ts.ajouterColonne(""E-Mail"", Boolean.class);
		ts.ajouterLigne();
		ts.setValeur(0, 0, ""Dupont"");
		ts.setValeur(0, 1, ""Jean"");
		ts.set"
cmpl-6xAw6p2fCThHe8jvwfMkguVL7aNBu,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler.java,65.32833790779114,length,"// Controler.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;

/**
 * Fait la liaison entre l'interface graphique et le moteur de l'application
 * Rend comprehensible les requetes de l'interface graphique pour les bases de
 * donnees
 *
 * @author scarankle
 */
public class Controler {

    DaoFactory df;

    IdentiteDao idao;

    FormationDao fdao;

    Candidat[] tabcand;

    String formationName;

    TypeFabrique tf;

    /**
     * Constructeur initialisant les dao et le type de la base
     * @param tf type de la base
     * @throws DaoFactoryException
     */
    public Controler() throws DaoFactoryException {
    }

    public void setTypeDataBase(String type) throws DaoFactoryException;

    public void launchDatabase() throws IOException;

    /**
     */
    private void bdChoice(TypeFabrique tfab) throws DaoFactoryException;

    /**
     * Cree un candidat ou un responsable de formation et l'insert dans la base
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param type
     * @param date_naissance
     * @param diplome
     * @param photo
     * @param nationalite
     * @param telephone
     * @param bourse
     * @param acceptation
     * @param formation
     * @throws IOException
     * @return le candidat ou le responsable de formation
     */
    public Identite createIdentite(String nom, String prenom, String sex, String email, TypeIdentite type, String date_naissance, String diplome, String photo, String nationalite, String telephone, int bourse, int acceptation, String formation) throws IOException;

    /**
     * cree un calendar a partir d'une string date de la forme dd/mm/yyyy
     * @param date
     * @return
     */
    private Calendar creerCalendar(String date);

    /**
     * cree une formation et l'enregistre dans la base
     * @param titre
     * @param date_limite
     * @param montant
     * @param responsable
     * @return
     */
    public Formation createFormation(String titre, String date_limite, int montant, String responsable);

    /**
     * Cherche des candidats dans la base
     * @param nom
     * @param prenom
     * @return un tableau contenant les candidats
     */
    public Candidat[] findCandidat(String nom, String prenom);

    /**
     * Cherche des responsables de formation dans la base
     * @param nom
     * @param prenom
     * @return un tableau contenant les responsables de formation
     */
    public RespFormation[] findRespForm(String nom, String prenom);

    /**
     * Cherche des formations dans la base
     * @param name
     * @param date
     * @return un tableau contenant les formations
     */
    public Formation[] findFormation(String name, String date);

    /**
     * Retourne toutes les formations
     * @return un tableau contenant toutes les formations
     */
    public Formation[] findAllFormation();

    /**
     * Retourne tous les Candidats d'une formation donnee
     * @param formation
     * @param date
     * @return tableau contenant tous les etudiants d'une formation donnee
     */
    public Candidat[] findCandidatInFormation(String formation, String date);

    /**
     * Exporte sous forme de fichier excel les candidats d'une formation
     * @throws RowsExceededException
     * @throws WriteException
     * @throws IOException
     * @throws ParseException
     */
    public void exportExcel(String form) throws RowsExceededException, WriteException, IOException, ParseException;

    /**
     * Fait un update d'un candidat
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param date_naissance
     * @param diplome
     * @param photo
     * @param nationalite
     * @param bourse
     * @param acceptation
     * @param formation
     * @throws Exception
     */
    public void updateCandidat(String nom, String prenom, String sex, String email, String date_naissance, String diplome, byte[] photo, String nationalite, int bourse, String acceptation, String formation) throws Exception;

    /**
     * Fait un update d'un responsable
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param telephone
     * @throws Exception
     */
    public void updateResponsable(String nom, String prenom, String sex, String email, String telephone) throws Exception;

    /**
     * Fait un update d'une formation
     * @param titre
     * @param date_limite
     * @param montant
     * @param responsable
     */
    public void updateFormation(String titre, String date_limite, int montant, String responsable);

    /**
     * Enleve un candidat ou un responsable de formation de la base
     * @param nom
     * @param prenom
     */
    public void deleteIdentite(String nom, String prenom, TypeIdentite type);

    /**
     * Enleve une formation de la base
     * @param nom
     * @param date
     */
    public void deleteFormation(String nom, String date);
}
","// ControlerTest.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findAllFormation()} method.
*/
class ControlerTest {","// ControlerTest.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findAllFormation()} method.
*/
class ControlerTest {

		/**
		* Test case for {@link Controler#findAllFormation()} method.
		* This test case checks if the method returns an empty collection when there is no formation in the database.
		*/
		@Test
		public void testFindAllFormation_EmptyCollection() {
				// TODO
		}
		
		/**
		* Test case for {@link Controler#findAllFormation()} method.
		* This test case checks if the method returns a collection containing one formation when there is one formation in the database.
		*/
		@Test
		public void testFindAllFormation_OneFormation() {
				// TODO
		}
		
		/**
		* Test case for {@link Controler#findAllFormation()} method.
		* This test case checks if the method returns a collection containing two formations when there are two formations in the database.
		*/
		@Test
		public void testFindAllFormation_TwoFormations() {
				// TODO
		}
		
		/**
		* Test case for {@link Controler#findAllFormation()} method.
		* This test case checks if the method returns a collection containing three formations when there are three formations in the database.
		*/
		@Test
		public void testFindAllFormation_ThreeFormations() {
				// TODO
		}
		
		/**
		* Test case for {@link Controler#findAllFormation()} method.
		* This test case checks if the method returns a collection containing four formations when there are four formations in the database.
		*/
		@Test
		public void testFindAllFormation_FourFormations() {
				// TODO
		}
		
		/**
		* Test case for {@link Controler#findAllFormation()} method.
		* This test case checks if the method returns a collection containing five formations when there are five formations in the database.
		*/
		@Test
		public void testFindAllFormation_FiveFormations() {
				// TODO
		}
		
		/**
		* Test case for {@link Controler#findAllFormation()} method.
		* This test case checks if the method returns a collection containing six formations when there are six formations in the database.
		*/
		@Test
		public void testFindAllFormation_SixFormations() {
				// TODO
		}
		
		/**
		* Test case for {@link Controler#findAllFormation()} method.
		* This test case checks if the method returns a collection containing seven formations when there are seven formations in the database.
		*/
		@Test
		public void testFindAllFormation_SevenFormations() {
				// TODO
		}
		
		/**
		* Test case for {@link Controler#findAllFormation()} method.
		* This test case checks if the method returns a collection containing eight formations when there are eight formations in the database.
		*/
		@Test
		public void testFindAllFormation_EightFormations() {
				// TODO
		}
		
		/**
		* Test case for {@link Controler#findAllFormation()} method.
		* This test case checks if the method returns a collection containing nine formations when there are nine formations in the database.
		*/
		@Test
		public void testFindAllFormation_NineFormations() {
				// TODO
		}
		
		/**
		* Test case for {@link Controler#findAllFormation()} method.
		* This test case checks if the method returns a collection containing ten formations when there are ten formations in the database.
		*/
		@Test
		public void testFindAllFormation_TenFormations() {
				// TODO
		}
		
}

// DaoFactory.java
package fr.unice.gfarce.dao;

import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.dao.JdbcDaoFactory;
import fr.unice.gfarce.dao.Neo4jDaoFactory;
import fr.unice.gfarce.dao.XmlDaoFactory;

/**
 * Fabrique de DAO
 *
 * @author scarankle
 */
public abstract class DaoFactory {

    /**
     * Enumeration des types de fabriques
     */
    public enum TypeFabrique {

        JDBC, XML, NEO4J
    };

    /**
     * Retourne une fabrique de DAO
     * @param type
     * @return
     * @throws DaoFactoryException
     */
    public static DaoFactory getDaoFactory(TypeFabrique type) throws DaoFactoryException {
        switch (type) {
            case JDBC:
                return new JdbcDaoFactory();
            case XML:
                return new XmlDaoFactory();
            case NEO4J:
                return new Neo4jDaoFactory();
            default:
                throw new DaoFactoryException(""Type de fabrique inconnu"");
        }
    }

    /**
     * Retourne un DAO d'identite
     * @return
     */
    public abstract IdentiteDao getIdentiteDao();

    /**
     * Retourne un DAO de formation
     * @return
     */
    public abstract FormationDao getFormationDao();
}

// DaoFactoryException.java
package fr.unice.gfarce.dao;

/**
 * Exception levee par la fabrique de DAO
 *
 * @author scarankle
 */
public class DaoFactoryException extends Exception {

    /**
     * Constructeur
     * @param message
     */
    public DaoFactoryException(String message) {
        super(message);
    }
}

// FormationDao.java
package fr.unice.gfarce.dao;

import fr.unice.gfarce.identity.Formation;
import java.util.Collection;

/**
 * Interface de DAO de formation
 *
 * @author scarankle
 */
public interface FormationDao {

    /**
     * Cree une formation
     * @param formation
     */
    public void createFormation(Formation formation);

    /**
     * Cherche une formation
     * @param name
     * @param date
     * @return
     */
    public Formation findFormation(String name, String date);

    /**
     * Cherche toutes les formations
     * @return
     */
    public Collection<Formation> findAllFormation();

    /**
     * Cherche tous les candidats d'une formation
     * @param formation
     * @param date
     * @return
     */
    public Collection<Formation> findCandidatInFormation(String formation, String date);

    /**
     * Met a jour une formation
     * @param formation
     */
    public void updateFormation(Formation formation);

    /**
     * Supprime une formation
     * @param formation
     */
    public void deleteFormation(Formation formation);
}

// Identite.java
package fr.unice.gfarce.identity;

import java.io.Serializable;
import java.util.Calendar;

/**
 * Classe abstraite representant une identite
 *
 * @author scarankle
 */
public abstract class Identite implements Serializable {

    /**
     * Enumeration des types d'identite
     */
    public enum TypeIdentite {

        CANDIDAT, RESP_FORMATION
    };

    /**
     * Nom de l'identite
     */
    protected String nom;

    /**
     * Prenom de"
