ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6x6jZgF7mSDyqETz07oHMaRPzLkQS,/EvoSuiteBenchmark/scenario1/84_ifx-framework/src/main/java/org/sourceforge/ifx/tools/JavaSource0.java,2.8084564208984375,stop,"// JavaSource.java
package org.sourceforge.ifx.tools;

import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.StringTokenizer;

/**
 * This class provides an abstraction to collect information about a
 * generated Java class file. Its toString() method will produce a String
 * that can be written using a Writer object to persistent store.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.5 $
 */
public class JavaSource {

    public boolean hasInterface() {
        return (this.getInterface() != null);
    }
}
","// JavaSourceTest.java
package org.sourceforge.ifx.tools;

import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JavaSource}.
* It contains ten unit test cases for the {@link JavaSource#hasInterface()} method.
*/
class JavaSourceTest {","// JavaSourceTest.java
package org.sourceforge.ifx.tools;

import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JavaSource}.
* It contains ten unit test cases for the {@link JavaSource#hasInterface()} method.
*/
class JavaSourceTest {

	@Test
	void testHasInterface() {
		JavaSource javaSource = new JavaSource();
		assertFalse(javaSource.hasInterface());
	}
}"
cmpl-6x6kb5ltuo9IvPrgAhu6G8kkZCOdv,/EvoSuiteBenchmark/scenario1/84_ifx-framework/src/main/java/org/sourceforge/ifx/tools/JavaSource1.java,1.6218953132629395,stop,"// JavaSource.java
package org.sourceforge.ifx.tools;

import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.StringTokenizer;

/**
 * This class provides an abstraction to collect information about a
 * generated Java class file. Its toString() method will produce a String
 * that can be written using a Writer object to persistent store.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.5 $
 */
public class JavaSource {

    public boolean hasSuperClass() {
        return (this.getSuperClass() != null);
    }
}
","// JavaSourceTest.java
package org.sourceforge.ifx.tools;

import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JavaSource}.
* It contains ten unit test cases for the {@link JavaSource#hasSuperClass()} method.
*/
class JavaSourceTest {","// JavaSourceTest.java
package org.sourceforge.ifx.tools;

import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.StringTokenizer;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JavaSource}.
* It contains ten unit test cases for the {@link JavaSource#hasSuperClass()} method.
*/
class JavaSourceTest {

	@Test
	void testHasSuperClass() {
		JavaSource javaSource = new JavaSource();
		assertFalse(javaSource.hasSuperClass());
	}
}"
cmpl-6x6lftJIaR9UVmzKhwaSi0qfTMy2v,/EvoSuiteBenchmark/scenario1/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDecoder.java,117.1803662776947,stop,"// IFXDecoder.java
package org.sourceforge.ifx.utils;

import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Iterator;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.sourceforge.ifx.basetypes.IFXString;
import org.sourceforge.ifx.basetypes.IBaseType;
import org.jdom.Element;

/**
 * Decodes an IFX XML String to its equivalent Framework bean.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.3 $
 */
public class IFXDecoder {

    public IFXObject decode(Element element) throws IFXException {
        try {
            String id = element.getAttributeValue(""Id"");
            String beanClassName = getBeanClassName(element);
            IFXObject obj = (IFXObject) Class.forName(beanClassName).newInstance();
            List children = element.getChildren();
            if (children.size() == 0) {
                String text = element.getText();
                if (text != null && text.trim().length() > 0) {
                    if (!(obj instanceof IBaseType)) {
                        throw new IFXException(""Leaf node not an instance of IBaseType: "" + obj.getClass().getName());
                    } else {
                        ((IBaseType) obj).setString(text);
                        return obj;
                    }
                } else {
                    // return the empty object
                    return obj;
                }
            } else {
                Iterator childIter = children.iterator();
                while (childIter.hasNext()) {
                    Element childElement = (Element) childIter.next();
                    IFXObject childObj = decode(childElement);
                    // run corresponding accessor method to see if the
                    // result is an array
                    Method accessorMethod = getAccessor(obj, childElement);
                    Object retValObj = accessorMethod.invoke(obj, null);
                    boolean isArray = accessorMethod.getReturnType().isArray();
                    // then get the mutator method and invoke it
                    Method mutatorMethod = getMutator(obj, childElement);
                    if (isArray) {
                        // if result is an array, build a new array with
                        // size = returned array size + 1, and stuff this
                        // object at the end of the array
                        IFXObject[] childObjs = null;
                        if (retValObj != null) {
                            int oldLen = Array.getLength(retValObj);
                            childObjs = (IFXObject[]) Array.newInstance(childObj.getClass(), new int[] { oldLen + 1 });
                            IFXObject[] retValObjs = (IFXObject[]) retValObj;
                            System.arraycopy(retValObj, 0, childObjs, 0, oldLen);
                            childObjs[oldLen] = childObj;
                        } else {
                            childObjs = (IFXObject[]) Array.newInstance(childObj.getClass(), new int[] { 1 });
                            childObjs[0] = childObj;
                        }
                        mutatorMethod.invoke(obj, new Object[] { childObjs });
                    } else {
                        mutatorMethod.invoke(obj, new Object[] { childObj });
                    }
                }
                // if Id attribute is specified, populate it
                if (id != null) {
                    Method mutatorMethod = getMutator(obj, ""Id"");
                    IFXString idObj = new IFXString();
                    idObj.setString(id);
                    mutatorMethod.invoke(obj, new Object[] { idObj });
                }
                return obj;
            }
        } catch (Exception e) {
            throw new IFXException(""Error decoding "" + element.getName(), e);
        }
    }
}
","// IFXDecoderTest.java
package org.sourceforge.ifx.utils;

import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Iterator;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.sourceforge.ifx.basetypes.IFXString;
import org.sourceforge.ifx.basetypes.IBaseType;
import org.jdom.Element;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXDecoder}.
* It contains ten unit test cases for the {@link IFXDecoder#decode(Element)} method.
*/
class IFXDecoderTest {","// IFXDecoderTest.java
package org.sourceforge.ifx.utils;

import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Iterator;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.sourceforge.ifx.basetypes.IFXString;
import org.sourceforge.ifx.basetypes.IBaseType;
import org.jdom.Element;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXDecoder}.
* It contains ten unit test cases for the {@link IFXDecoder#decode(Element)} method.
*/
class IFXDecoderTest {

	/**
	* Test case for {@link IFXDecoder#decode(Element)} method.
	* It tests the decoding of an IFX XML String to its equivalent Framework bean.
	*/
	@Test
	void testDecode() throws IFXException {
		IFXDecoder decoder = new IFXDecoder();
		IFXObject obj = decoder.decode(new Element(""IFX""));
		assertEquals(""org.sourceforge.ifx.basetypes.IFXObject"", obj.getClass().getName());
	}
}

// IFXEncoder.java
package org.sourceforge.ifx.utils;

import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Iterator;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.sourceforge.ifx.basetypes.IFXString;
import org.sourceforge.ifx.basetypes.IBaseType;
import org.jdom.Element;

/**
 * Encodes an IFX Framework bean to its equivalent XML String.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.3 $
 */
public class IFXEncoder {

    public Element encode(IFXObject obj) throws IFXException {
        try {
            Element element = new Element(getElementName(obj));
            // run the accessor method to get the Id
            Method accessorMethod = getAccessor(obj, ""Id"");
            IFXString idObj = (IFXString) accessorMethod.invoke(obj, null);
            if (idObj != null) {
                element.setAttribute(""Id"", idObj.getString());
            }
            // get the list of child elements
            List childElements = getChildElements(obj);
            Iterator childIter = childElements.iterator();
            while (childIter.hasNext()) {
                String childElementName = (String) childIter.next();
                // run corresponding accessor method to see if the
                // result is an array
                accessorMethod = getAccessor(obj, childElementName);
                Object retValObj = accessorMethod.invoke(obj, null);
                boolean isArray = accessorMethod.getReturnType().isArray();
                if (isArray) {
                    IFXObject[] retValObjs = (IFXObject[]) retValObj;
                    for (int i = 0; i < retValObjs.length; i++) {
                        element.addContent(encode(retValObjs[i]));
                    }
                } else {
                    element.addContent(encode((IFXObject) retValObj));
                }
            }
            return element;
        } catch (Exception e) {
            throw new IFXException(""Error encoding "" + obj.getClass().getName(), e);
        }
    }
}

// IFXEncoderTest.java
package org.sourceforge.ifx.utils;

import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Iterator;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.sourceforge.ifx.basetypes.IFXString;
import org.sourceforge.ifx.basetypes.IBaseType;
import org.jdom.Element;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXEncoder}.
* It contains ten unit test cases for the {@link IFXEncoder#encode(IFXObject)} method.
*/
class IFXEncoderTest {
		
	/**
	* Test case for {@link IFXEncoder#encode(IFXObject)} method.
	* It tests the encoding of an IFX Framework bean to its equivalent XML String.
	*/
	@Test
	void testEncode() throws IFXException {
		IFXEncoder encoder = new IFXEncoder();
		Element element = encoder.encode(new IFXObject());
		assertEquals(""IFX"", element.getName());
	}
}

// IFXException.java
package org.sourceforge.ifx.utils;

/**
 * Exception class for IFX Framework.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.3 $
 */
public class IFXException extends Exception {

    public IFXException() {
        super();
    }

    public IFXException(String message) {
        super(message);
    }

    public IFXException(String message, Throwable cause) {
        super(message, cause);
    }

    public IFXException(Throwable cause) {
        super(cause);
    }
}

// IFXExceptionTest.java
package org.sourceforge.ifx.utils;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXException}.
* It contains ten unit test cases for the {@link IFXException} class.
*/
class IFXExceptionTest {
		
	/**
	* Test case for {@link IFXException} class.
	* It tests the default constructor of the {@link IFXException} class.
	*/
	@Test
	void testIFXException() {
		IFXException ifxException = new IFXException();
		assertNotNull(ifxException);
	}
	
	/**
	* Test case for {@link IFXException} class.
	* It tests the constructor of the {@link IFXException} class with a message.
	*/
	@Test
	void testIFXExceptionWithMessage() {
		IFXException ifxException = new IFXException(""IFXException"");
		assertNotNull(ifxException);
	}
	
	/**
	* Test case for {@link IFXException} class.
	* It tests the constructor of the {@link IFXException} class with a message and a cause.
	*/
	@Test
	void testIFXExceptionWithMessageAndCause() {
		IFXException ifxException = new IFXException(""IFXException"", new Exception());
		assertNotNull(ifxException);
	}
	
	/**
	* Test case for {@link IFXException} class.
	* It tests the constructor of the {@link IFXException} class with a cause.
	*/
	@Test
	void testIFXExceptionWithCause() {
		IFXException ifxException = new IFXException(new Exception());
		assertNotNull(ifxException);
	}
}

// IFXObject.java
package org.sourceforge.ifx.basetypes;

import java.util.List;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import org.sourceforge.ifx.utils.IFXException;

/**
 * Base class for all IFX Framework beans.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.3 $
 */
public class IFXObject {

    private IFXString id;

    public IFXString getId() {
        return id;
    }

    public void setId(IFXString id) {
        this.id = id;
    }

    public List getChildElements() throws IFXException {
        try {
            ResourceBundle bundle = ResourceBundle.getBundle(this.getClass().getName());
            String childElements = bundle.getString(""childElements"");
            String[] childElementNames = childElements.split("","");
            List childElementList = new ArrayList();
            for (int i = 0; i < childElementNames.length; i++) {
                childElementList.add(childElementNames[i]);
            }
            return childElementList;
        } catch (MissingResourceException mre) {
            throw new IFXException(""No child elements defined for "" + this.getClass().getName());
        }
    }
}

// IFXObjectTest.java
package org.sourceforge.ifx.basetypes;

import java.util.List;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import org.sourceforge.ifx.utils.IFXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXObject}.
* It contains ten unit test cases for the {@link IFXObject} class.
*/
class IFXObjectTest {
		
	/**
	* Test case for {@link IFXObject} class.
	* It tests the getter and setter methods of the {@link IFXObject} class.
	*/
	@Test
	void testGetterAndSetter() {
		IFXObject ifxObject = new IFXObject();
		IFXString id = new IFXString();
		id.setString(""id"");
		ifxObject.setId(id);
		assertEquals(""id"", ifxObject.getId().getString());
	}
	
	/**
	* Test case for {@link IFXObject} class.
	* It tests the getChildElements method of the {@link IFXObject} class.
	*/
	@Test
	void testGetChildElements() throws IFXException {
		IFXObject ifxObject = new IFXObject();
		List childElements = ifxObject.getChildElements();
		assertEquals(0, childElements.size());
	}
}

// IFXString.java
package org.sourceforge.ifx.basetypes;

/**
 * Base class for all IFX Framework beans.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.3 $
 */
public class IFXString extends IBaseType {

    private String string;

    public String getString() {
        return string;
    }

    public void setString(String string) {
        this.string = string;
    }
}

// IFXStringTest.java
package org.sourceforge.ifx.basetypes;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXString}.
* It contains ten unit test cases for the {@link IFXString} class.
*/
class IFXStringTest {
		
	/**
	* Test case for {@link IFXString} class.
	* It tests the getter and setter methods of the {@link IFXString} class.
	*/
	@Test
	void testGetterAndSetter() {
		IFXString ifxString = new IFXString();
		ifxString.setString(""string"");
		assertEquals(""string"", ifxString.getString());
	}
}

// IBaseType.java
package org.sourceforge.ifx.basetypes;

/**
 * Base class for all IFX Framework beans.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.3 $
 */
public class IBaseType extends IFXObject {
}

// IBaseTypeTest.java
package org.sourceforge.ifx.basetypes;

import java.util.List;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import org.sourceforge.ifx.utils.IFXException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IBaseType}.
* It contains ten unit test cases for the {@link IBaseType} class.
*/
class IBaseTypeTest {
		
	/**
	* Test case for {@link IBaseType} class.
	* It tests the getter and setter methods of the {@link IBaseType} class.
	*/
	@Test
	void testGetterAndSetter() {
		IBaseType iBaseType = new IBaseType();
		IFXString id = new IFXString();
		id.setString(""id"");
		iBaseType.setId(id);
		assertEquals(""id"", iBaseType.getId().getString());
	}
	
	/**
	* Test case for {@link IBaseType} class.
	* It tests the getChildElements method of the {@link IBaseType} class.
	*/
	@Test
	void testGetChildElements() throws IFXException {
		IBaseType iBaseType = new IBaseType();
		List childElements = iBaseType.getChildElements();
		assertEquals(0, childElements.size());
	}
}"
cmpl-6x6nYgtlE5xYuZe9tiygVpJWLMGpF,/EvoSuiteBenchmark/scenario1/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDocumentHandler0.java,118.19158458709717,length,"// IFXDocumentHandler.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;

/**
 * The IFXDocumentHandler provides methods for formatting and validating
 * IFX XML Documents.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.2 $
 */
public class IFXDocumentHandler {

    public static Document build(IFXObject obj, String namespacePrefix, String namespaceURI) throws IFXException {
        IFXEncoder encoder = null;
        if (namespaceURI != null) {
            encoder = new IFXEncoder(namespacePrefix, namespaceURI);
        } else {
            encoder = new IFXEncoder();
        }
        Element element = encoder.encode(obj);
        Document doc = new Document(element);
        return doc;
    }
}
","// IFXDocumentHandlerTest.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXDocumentHandler}.
* It contains ten unit test cases for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
*/
class IFXDocumentHandlerTest {","// IFXDocumentHandlerTest.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXDocumentHandler}.
* It contains ten unit test cases for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
*/
class IFXDocumentHandlerTest {

	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the namespace prefix is null.
	*/
	@Test
	void testBuild_1() throws IFXException {
		IFXObject obj = new IFXObject();
		Document doc = IFXDocumentHandler.build(obj, null, null);
		assertNotNull(doc);
		assertEquals(""IFX"", doc.getRootElement().getName());
		assertEquals(""http://www.ifxforum.org/ifx/2.0/"", doc.getRootElement().getNamespaceURI());
	}
	
	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the namespace prefix is not null.
	*/
	@Test
	void testBuild_2() throws IFXException {
		IFXObject obj = new IFXObject();
		Document doc = IFXDocumentHandler.build(obj, ""ifx"", ""http://www.ifxforum.org/ifx/2.0/"");
		assertNotNull(doc);
		assertEquals(""ifx:IFX"", doc.getRootElement().getQualifiedName());
		assertEquals(""http://www.ifxforum.org/ifx/2.0/"", doc.getRootElement().getNamespaceURI());
	}
	
	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the namespace prefix is not null and the namespace URI is null.
	*/
	@Test
	void testBuild_3() throws IFXException {
		IFXObject obj = new IFXObject();
		Document doc = IFXDocumentHandler.build(obj, ""ifx"", null);
		assertNotNull(doc);
		assertEquals(""ifx:IFX"", doc.getRootElement().getQualifiedName());
		assertEquals(""http://www.ifxforum.org/ifx/2.0/"", doc.getRootElement().getNamespaceURI());
	}
	
	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the namespace prefix is not null and the namespace URI is not null.
	*/
	@Test
	void testBuild_4() throws IFXException {
		IFXObject obj = new IFXObject();
		Document doc = IFXDocumentHandler.build(obj, ""ifx"", ""http://www.ifxforum.org/ifx/2.0/"");
		assertNotNull(doc);
		assertEquals(""ifx:IFX"", doc.getRootElement().getQualifiedName());
		assertEquals(""http://www.ifxforum.org/ifx/2.0/"", doc.getRootElement().getNamespaceURI());
	}
	
	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the namespace prefix is null and the namespace URI is not null.
	*/
	@Test
	void testBuild_5() throws IFXException {
		IFXObject obj = new IFXObject();
		Document doc = IFXDocumentHandler.build(obj, null, ""http://www.ifxforum.org/ifx/2.0/"");
		assertNotNull(doc);
		assertEquals(""IFX"", doc.getRootElement().getName());
		assertEquals(""http://www.ifxforum.org/ifx/2.0/"", doc.getRootElement().getNamespaceURI());
	}
	
	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the namespace prefix is not null and the namespace URI is null.
	*/
	@Test
	void testBuild_6() throws IFXException {
		IFXObject obj = new IFXObject();
		Document doc = IFXDocumentHandler.build(obj, ""ifx"", null);
		assertNotNull(doc);
		assertEquals(""ifx:IFX"", doc.getRootElement().getQualifiedName());
		assertEquals(""http://www.ifxforum.org/ifx/2.0/"", doc.getRootElement().getNamespaceURI());
	}
	
	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the namespace prefix is null and the namespace URI is null.
	*/
	@Test
	void testBuild_7() throws IFXException {
		IFXObject obj = new IFXObject();
		Document doc = IFXDocumentHandler.build(obj, null, null);
		assertNotNull(doc);
		assertEquals(""IFX"", doc.getRootElement().getName());
		assertEquals(""http://www.ifxforum.org/ifx/2.0/"", doc.getRootElement().getNamespaceURI());
	}
	
	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the namespace prefix is not null and the namespace URI is not null.
	*/
	@Test
	void testBuild_8() throws IFXException {
		IFXObject obj = new IFXObject();
		Document doc = IFXDocumentHandler.build(obj, ""ifx"", ""http://www.ifxforum.org/ifx/2.0/"");
		assertNotNull(doc);
		assertEquals(""ifx:IFX"", doc.getRootElement().getQualifiedName());
		assertEquals(""http://www.ifxforum.org/ifx/2.0/"", doc.getRootElement().getNamespaceURI());
	}
	
	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the namespace prefix is null and the namespace URI is not null.
	*/
	@Test
	void testBuild_9() throws IFXException {
		IFXObject obj = new IFXObject();
		Document doc = IFXDocumentHandler.build(obj, null, ""http://www.ifxforum.org/ifx/2.0/"");
		assertNotNull(doc);
		assertEquals(""IFX"", doc.getRootElement().getName());
		assertEquals(""http://www.ifxforum.org/ifx/2.0/"", doc.getRootElement().getNamespaceURI());
	}
	
	/**
	* Test case for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.
	* It tests the case when the namespace prefix is not null and the namespace URI is null.
	*/
	@Test
	void testBuild_10() throws IFXException {
		IFXObject obj = new IFXObject();
		Document doc = IFXDocumentHandler.build(obj, ""ifx"", null);
		assertNotNull(doc);
		assertEquals(""ifx:IFX"", doc.getRootElement().getQualifiedName());
		assertEquals(""http://www.ifxforum.org/ifx/2.0/"", doc.getRootElement().getNamespaceURI());
	}
}

// IFXEncoder.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;

/**
 * The IFXEncoder class provides methods for encoding an IFXObject into
 * an XML Element.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.2 $
 */
public class IFXEncoder {

    private String namespacePrefix;
    private String namespaceURI;

    public IFXEncoder() {
        this.namespacePrefix = """";
        this.namespaceURI = ""http://www.ifxforum.org/ifx/2.0/"";
    }

    public IFXEncoder(String namespacePrefix, String namespaceURI) {
        this.namespacePrefix = namespacePrefix;
        this.namespaceURI = namespaceURI;
    }

    public Element encode(IFXObject obj) throws IFXException {
        Element element = new Element(""IFX"", namespacePrefix, namespaceURI);
        Map map = obj.getFieldMap();
        Iterator iter = map.keySet().iterator();
        while (iter.hasNext()) {
            String key = (String) iter.next();
            Object value = map.get(key);
            if (value instanceof IFXObject) {
                Element child = encode((IFXObject) value);
                element.addContent(child);
            } else if (value instanceof String) {
                Element child = new Element(key, namespacePrefix, namespaceURI);
                child.setText((String) value);
                element.addContent(child);
            }
        }
        return element;
    }
}

// IFXEncoderTest.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXEncoder}.
* It contains ten unit test cases for the {@link IFXEncoder#encode(IFXObject)} method.
*/
class IFXEncoderTest {
		
	/**
	* Test case for the {@link IFXEncoder#encode(IFXObject)} method.
	* It tests the case when the namespace prefix is null.
	*/
	@Test
	void testEncode_1() throws IFXException {
		IFXObject obj = new IFXObject();
		IFXEncoder encoder = new IFXEncoder(null, null);
		Element element = encoder.encode(obj);
		assertNotNull(element);
		assertEquals(""IFX"", element.getName());
		assertEquals(""http://www.ifxforum.org/ifx/2.0/"", element.getNamespaceURI());
	}
	
	/**
	* Test case for the {@link IFXEncoder#encode(IFXObject)} method.
	* It tests the case when the namespace prefix is not null.
	*/
	@Test
	void testEncode_2() throws IFXException {
		IFXObject obj = new IFXObject();
		IFXEncoder encoder = new IFXEncoder(""ifx"", ""http://www.ifxforum.org/ifx/2.0/"");
		Element element = encoder.encode(obj);
		assertNotNull(element);
		assertEquals(""ifx:IFX"", element.getQualifiedName());
		assertEquals(""http://www.ifxforum.org/ifx/2.0/"", element.getNamespaceURI());
	}
	
	/**
	* Test case for the {@link IFXEncoder#encode(IFXObject)} method.
	* It tests the case when the namespace prefix is not null and the namespace URI is null.
	*/
	@Test
	void testEncode_3() throws IFXException {
		IFXObject obj = new IFXObject();
		IFXEncoder encoder = new IFXEncoder(""ifx"", null);
		Element element = encoder.encode(obj);
		assertNotNull(element);
		assertEquals(""ifx:IFX"", element.getQualifiedName());
		assertEquals(""http://www.ifxforum.org/ifx/2.0/"", element.getNamespaceURI());
	}
	
	/**
	* Test case for the {@link IFXEncoder#encode(IFXObject)} method.
	* It tests the case when the namespace prefix is not null and the namespace URI is not null.
	*/
	@Test
	void testEncode_4() throws IFXException {
		IFXObject obj = new IFXObject();
		IFXEncoder encoder = new IFXEncoder(""ifx"", ""http://www.ifxforum.org/ifx/2.0/"");
		Element element = encoder.encode(obj);
		assertNotNull(element);
		assertEquals(""ifx:IFX"", element.getQualifiedName());
		assertEquals(""http://www.ifxforum.org/ifx/2.0/"", element.getNamespaceURI());
	}
	
	/**
	* Test case for the {@link IFXEncoder#encode(IFXObject)} method.
	* It tests the case when the namespace prefix is null and the namespace URI is not null.
	*/
	@Test
	void testEncode_5() throws IFXException {
		IFXObject obj = new IFXObject();
		IFXEncoder encoder = new IFXEncoder(null, ""http://www.ifxforum.org/ifx/2.0/"");
		Element element = encoder.encode(obj);
		assertNotNull(element);
		assertEquals(""IFX"", element.getName());
		assertEquals(""http://www.ifxforum.org/ifx/2.0/"", element.getNamespaceURI());
	}
	
	/**
	* Test case for the {@link IFXEncoder#encode(IFXObject)} method.
	* It tests the case when the namespace prefix is not null and the namespace URI is null.
	*/
	@Test
	void testEncode_6() throws IFXException {
		IFXObject obj = new IFXObject();
		IFXEncoder encoder = new IFXEncoder(""ifx"", null);
		Element element = encoder.encode(obj);
		assertNotNull(element);
		assertEquals(""ifx:IFX"", element.getQualifiedName());
		assertEquals(""http://www.ifxforum.org/ifx/2.0/"", element.getNamespaceURI());
	}
	
	/**
	* Test case for the {@link IFXEncoder#encode(IFXObject)} method.
	* It tests the case when the namespace prefix is null and the namespace URI is null.
	*/
	@Test
	void testEncode_7() throws IFXException {
		IFXObject obj = new IFXObject();
		IFXEncoder encoder = new IFXEncoder(null, null);
		Element element = encoder.encode(obj);
		assertNotNull(element);
		assertEquals(""IFX"", element.getName());
		assertEquals(""http://www.ifxforum.org/ifx/2.0/"", element.getNamespaceURI());
	}
	
	/**
	* Test case for the {@link IFXEncoder#encode(IFXObject)} method.
	* It tests the case when the namespace prefix is not null and the namespace URI is not null.
	*/
	@Test
	void testEncode_8() throws IFXException {
		IFXObject obj = new IFXObject();
		IFXEncoder encoder = new IFXEncoder(""ifx"", ""http://www.ifxforum.org/ifx/2.0/"");
		Element element = encoder.en"
cmpl-6x6pS5KtEOTG5YpzTgWvKf4XSctav,/EvoSuiteBenchmark/scenario1/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDocumentHandler1.java,144.79003167152405,length,"// IFXDocumentHandler.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;

/**
 * The IFXDocumentHandler provides methods for formatting and validating
 * IFX XML Documents.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.2 $
 */
public class IFXDocumentHandler {

    public static IFXObject parse(Document doc) throws IFXException {
        Element element = doc.getRootElement();
        IFXDecoder decoder = new IFXDecoder();
        return decoder.decode(element);
    }
}
","// IFXDocumentHandlerTest.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXDocumentHandler}.
* It contains ten unit test cases for the {@link IFXDocumentHandler#parse(Document)} method.
*/
class IFXDocumentHandlerTest {","// IFXDocumentHandlerTest.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXDocumentHandler}.
* It contains ten unit test cases for the {@link IFXDocumentHandler#parse(Document)} method.
*/
class IFXDocumentHandlerTest {

	@Test
	void testParse() throws IFXException {
		IFXObject ifxObject = IFXDocumentHandler.parse(getDocument(""/ifx/ifx-1.0.xml""));
		assertNotNull(ifxObject);
		assertEquals(""1.0"", ifxObject.getVersion());
		assertEquals(""1.0"", ifxObject.getHeader().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getCustId().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getCustLangPref().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecCtrlIn().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNamePrefix().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getGivenName().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getMiddleName().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getFamilyName().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getGeneration().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameSuffix().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameTitle().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine1().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine2().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine3().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine4().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine5().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine6().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine7().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine8().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine9().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine10().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine11().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine12().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine13().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine14().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine15().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine16().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine17().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine18().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine19().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine20().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine21().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine22().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine23().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine24().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine25().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine26().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine27().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine28().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine29().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine30().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine31().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine32().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine33().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine34().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine35().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine36().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine37().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine38().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine39().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine40().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine41().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine42().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine43().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine44().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine45().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine46().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getNameFullLine().getNameFullLine47().getVersion());
		assertEquals(""1.0"", ifxObject.getBody().getRequest().getCustomerInqRq().getRecSelect().getCustRec().getCustInfo().getPersonName().getNameFull().getName"
cmpl-6x6rnX0G2xAM5ztNuXgkpLQAZIll3,/EvoSuiteBenchmark/scenario1/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDocumentHandler2.java,62.20598030090332,stop,"// IFXDocumentHandler.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;

/**
 * The IFXDocumentHandler provides methods for formatting and validating
 * IFX XML Documents.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.2 $
 */
public class IFXDocumentHandler {

    public static Document read(InputStream istream, boolean validate, Map validationProperties) throws IFXException {
        SAXBuilder builder = null;
        if (validate) {
            builder = new SAXBuilder(""org.apache.xerces.parsers.SAXParser"", true);
            builder.setFeature(""http://apache.org/xml/features/validation/schema"", true);
            if (validationProperties != null) {
                Iterator propIter = validationProperties.keySet().iterator();
                StringBuffer buf = new StringBuffer();
                int i = 0;
                while (propIter.hasNext()) {
                    String key = (String) propIter.next();
                    String value = (String) validationProperties.get(key);
                    if (i > 0) {
                        buf.append("" "");
                    }
                    buf.append(key).append("" "").append(value);
                    i++;
                }
                builder.setProperty(""http://apache.org/xml/properties/schema/external-schemaLocation"", buf.toString());
            }
        } else {
            builder = new SAXBuilder();
        }
        Document doc = null;
        try {
            doc = builder.build(istream);
        } catch (Exception e) {
            throw new IFXException(""Error reading Document"", e);
        }
        return doc;
    }
}
","// IFXDocumentHandlerTest.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXDocumentHandler}.
* It contains ten unit test cases for the {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
*/
class IFXDocumentHandlerTest {","// IFXDocumentHandlerTest.java
package org.sourceforge.ifx.utils;

import java.io.OutputStream;
import java.io.InputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Iterator;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXDocumentHandler}.
* It contains ten unit test cases for the {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
*/
class IFXDocumentHandlerTest {

	/**
	* Test case for {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
	* It tests the method with a valid IFX document.
	*/
	@Test
	void testReadValidIFXDocument() throws Exception {
		InputStream istream = getClass().getResourceAsStream(""/org/sourceforge/ifx/utils/ifx-valid.xml"");
		IFXDocumentHandler.read(istream, true, null);
	}
	
	/**
	* Test case for {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
	* It tests the method with an invalid IFX document.
	*/
	@Test
	void testReadInvalidIFXDocument() throws Exception {
		InputStream istream = getClass().getResourceAsStream(""/org/sourceforge/ifx/utils/ifx-invalid.xml"");
		assertThrows(IFXException.class, () -> {
			IFXDocumentHandler.read(istream, true, null);
		});
	}
	
	/**
	* Test case for {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
	* It tests the method with a valid IFX document and a valid schema location.
	*/
	@Test
	void testReadValidIFXDocumentWithValidSchemaLocation() throws Exception {
		InputStream istream = getClass().getResourceAsStream(""/org/sourceforge/ifx/utils/ifx-valid.xml"");
		Map validationProperties = new java.util.HashMap();
		validationProperties.put(""http://www.ifxforum.org/ifx/2.1/ifx.xsd"", ""http://www.ifxforum.org/ifx/2.1/ifx.xsd"");
		IFXDocumentHandler.read(istream, true, validationProperties);
	}
	
	/**
	* Test case for {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
	* It tests the method with a valid IFX document and an invalid schema location.
	*/
	@Test
	void testReadValidIFXDocumentWithInvalidSchemaLocation() throws Exception {
		InputStream istream = getClass().getResourceAsStream(""/org/sourceforge/ifx/utils/ifx-valid.xml"");
		Map validationProperties = new java.util.HashMap();
		validationProperties.put(""http://www.ifxforum.org/ifx/2.1/ifx.xsd"", ""http://www.ifxforum.org/ifx/2.1/ifx-invalid.xsd"");
		assertThrows(IFXException.class, () -> {
			IFXDocumentHandler.read(istream, true, validationProperties);
		});
	}
	
	/**
	* Test case for {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
	* It tests the method with a valid IFX document and a valid schema location.
	*/
	@Test
	void testReadValidIFXDocumentWithValidSchemaLocationAndNoValidation() throws Exception {
		InputStream istream = getClass().getResourceAsStream(""/org/sourceforge/ifx/utils/ifx-valid.xml"");
		Map validationProperties = new java.util.HashMap();
		validationProperties.put(""http://www.ifxforum.org/ifx/2.1/ifx.xsd"", ""http://www.ifxforum.org/ifx/2.1/ifx.xsd"");
		IFXDocumentHandler.read(istream, false, validationProperties);
	}
	
	/**
	* Test case for {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
	* It tests the method with a valid IFX document and an invalid schema location.
	*/
	@Test
	void testReadValidIFXDocumentWithInvalidSchemaLocationAndNoValidation() throws Exception {
		InputStream istream = getClass().getResourceAsStream(""/org/sourceforge/ifx/utils/ifx-valid.xml"");
		Map validationProperties = new java.util.HashMap();
		validationProperties.put(""http://www.ifxforum.org/ifx/2.1/ifx.xsd"", ""http://www.ifxforum.org/ifx/2.1/ifx-invalid.xsd"");
		IFXDocumentHandler.read(istream, false, validationProperties);
	}
	
	/**
	* Test case for {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
	* It tests the method with a valid IFX document and a valid schema location.
	*/
	@Test
	void testReadValidIFXDocumentWithValidSchemaLocationAndNoValidationProperties() throws Exception {
		InputStream istream = getClass().getResourceAsStream(""/org/sourceforge/ifx/utils/ifx-valid.xml"");
		IFXDocumentHandler.read(istream, true, null);
	}
	
	/**
	* Test case for {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
	* It tests the method with a valid IFX document and an invalid schema location.
	*/
	@Test
	void testReadValidIFXDocumentWithInvalidSchemaLocationAndNoValidationProperties() throws Exception {
		InputStream istream = getClass().getResourceAsStream(""/org/sourceforge/ifx/utils/ifx-valid.xml"");
		assertThrows(IFXException.class, () -> {
			IFXDocumentHandler.read(istream, true, null);
		});
	}
	
	/**
	* Test case for {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
	* It tests the method with a valid IFX document and a valid schema location.
	*/
	@Test
	void testReadValidIFXDocumentWithValidSchemaLocationAndNoValidationPropertiesAndNoValidation() throws Exception {
		InputStream istream = getClass().getResourceAsStream(""/org/sourceforge/ifx/utils/ifx-valid.xml"");
		IFXDocumentHandler.read(istream, false, null);
	}
	
	/**
	* Test case for {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.
	* It tests the method with a valid IFX document and an invalid schema location.
	*/
	@Test
	void testReadValidIFXDocumentWithInvalidSchemaLocationAndNoValidationPropertiesAndNoValidation() throws Exception {
		InputStream istream = getClass().getResourceAsStream(""/org/sourceforge/ifx/utils/ifx-valid.xml"");
		IFXDocumentHandler.read(istream, false, null);
	}
}"
cmpl-6x6sn4du0N82LFN7t0rf1FKLve8jU,/EvoSuiteBenchmark/scenario1/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXEncoder.java,147.26413488388062,length,"// IFXEncoder.java
package org.sourceforge.ifx.utils;

import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.io.Writer;
import java.io.OutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.sourceforge.ifx.basetypes.IBaseType;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.output.XMLOutputter;
import org.jdom.input.SAXBuilder;

/**
 * Encodes an IFXObject to its equivalent IFX XML Element.
 *
 * @author Sujit Pal (spal@users.sourceforge.net)
 * @version $Revision: 1.2 $
 */
public class IFXEncoder {

    public Element encode(IFXObject obj) throws IFXException {
        try {
            Element element = new Element(getElementName(obj), namespace);
            List accessorList = getAccessors(obj);
            Iterator accessorIter = accessorList.iterator();
            while (accessorIter.hasNext()) {
                Method accessorMethod = (Method) accessorIter.next();
                if (accessorMethod.getName().equals(""getClass"")) {
                    continue;
                }
                Object retValObj = accessorMethod.invoke(obj, null);
                if (retValObj == null) {
                    continue;
                }
                IFXObject[] retVals = new IFXObject[1];
                if (retValObj.getClass().isArray()) {
                    retVals = (IFXObject[]) retValObj;
                } else {
                    retVals[0] = (IFXObject) retValObj;
                }
                for (int i = 0; i < retVals.length; i++) {
                    IFXObject retVal = retVals[i];
                    if (retVal instanceof IBaseType) {
                        String value = ((IBaseType) retVal).getString();
                        if (accessorMethod.getName().equals(""getId"")) {
                            element.setAttribute(""Id"", value);
                        } else {
                            Element baseElement = new Element(getElementName(retVal), namespace);
                            baseElement.setText(value);
                            element.addContent(baseElement);
                        }
                    } else {
                        element.addContent(encode(retVal));
                    }
                }
            }
            return element;
        } catch (Exception e) {
            throw new IFXException(""Error encoding "" + obj.getClass().getName(), e);
        }
    }
}
","// IFXEncoderTest.java
package org.sourceforge.ifx.utils;

import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.io.Writer;
import java.io.OutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.sourceforge.ifx.basetypes.IBaseType;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.output.XMLOutputter;
import org.jdom.input.SAXBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXEncoder}.
* It contains ten unit test cases for the {@link IFXEncoder#encode(IFXObject)} method.
*/
class IFXEncoderTest {","// IFXEncoderTest.java
package org.sourceforge.ifx.utils;

import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.io.Writer;
import java.io.OutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.ResourceBundle;
import java.util.MissingResourceException;
import org.sourceforge.ifx.basetypes.IFXObject;
import org.sourceforge.ifx.basetypes.IBaseType;
import org.jdom.Element;
import org.jdom.Namespace;
import org.jdom.output.XMLOutputter;
import org.jdom.input.SAXBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IFXEncoder}.
* It contains ten unit test cases for the {@link IFXEncoder#encode(IFXObject)} method.
*/
class IFXEncoderTest {

		/**
		* Test case for {@link IFXEncoder#encode(IFXObject)} method.
		* It tests the encoding of a simple IFXObject.
		*/
		@Test
		public void testEncodeSimpleIFXObject() throws Exception {
				IFXEncoder encoder = new IFXEncoder();
				IFXObject obj = new IFXObject();
				obj.setId(""12345"");
				Element element = encoder.encode(obj);
				assertEquals(""IFXObject"", element.getName());
				assertEquals(""12345"", element.getAttributeValue(""Id""));
		}
		
		/**
		* Test case for {@link IFXEncoder#encode(IFXObject)} method.
		* It tests the encoding of a simple IFXObject with a single IBaseType.
		*/
		@Test
		public void testEncodeSimpleIFXObjectWithIBaseType() throws Exception {
				IFXEncoder encoder = new IFXEncoder();
				IFXObject obj = new IFXObject();
				obj.setId(""12345"");
				obj.setName(""Sujit"");
				Element element = encoder.encode(obj);
				assertEquals(""IFXObject"", element.getName());
				assertEquals(""12345"", element.getAttributeValue(""Id""));
				Element nameElement = element.getChild(""Name"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Sujit"", nameElement.getText());
		}
		
		/**
		* Test case for {@link IFXEncoder#encode(IFXObject)} method.
		* It tests the encoding of a simple IFXObject with a single IBaseType.
		*/
		@Test
		public void testEncodeSimpleIFXObjectWithIBaseTypeArray() throws Exception {
				IFXEncoder encoder = new IFXEncoder();
				IFXObject obj = new IFXObject();
				obj.setId(""12345"");
				obj.setName(new String[] {""Sujit"", ""Pal""});
				Element element = encoder.encode(obj);
				assertEquals(""IFXObject"", element.getName());
				assertEquals(""12345"", element.getAttributeValue(""Id""));
				Element nameElement = element.getChild(""Name"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Sujit"", nameElement.getText());
				nameElement = element.getChild(""Name"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Pal"", nameElement.getText());
		}
		
		/**
		* Test case for {@link IFXEncoder#encode(IFXObject)} method.
		* It tests the encoding of a simple IFXObject with a single IBaseType.
		*/
		@Test
		public void testEncodeSimpleIFXObjectWithIFXObject() throws Exception {
				IFXEncoder encoder = new IFXEncoder();
				IFXObject obj = new IFXObject();
				obj.setId(""12345"");
				obj.setName(""Sujit"");
				obj.setAddress(new Address());
				Element element = encoder.encode(obj);
				assertEquals(""IFXObject"", element.getName());
				assertEquals(""12345"", element.getAttributeValue(""Id""));
				Element nameElement = element.getChild(""Name"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Sujit"", nameElement.getText());
				Element addressElement = element.getChild(""Address"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Address"", addressElement.getName());
		}
		
		/**
		* Test case for {@link IFXEncoder#encode(IFXObject)} method.
		* It tests the encoding of a simple IFXObject with a single IBaseType.
		*/
		@Test
		public void testEncodeSimpleIFXObjectWithIFXObjectArray() throws Exception {
				IFXEncoder encoder = new IFXEncoder();
				IFXObject obj = new IFXObject();
				obj.setId(""12345"");
				obj.setName(""Sujit"");
				obj.setAddress(new Address[] {new Address(), new Address()});
				Element element = encoder.encode(obj);
				assertEquals(""IFXObject"", element.getName());
				assertEquals(""12345"", element.getAttributeValue(""Id""));
				Element nameElement = element.getChild(""Name"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Sujit"", nameElement.getText());
				Element addressElement = element.getChild(""Address"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Address"", addressElement.getName());
				addressElement = element.getChild(""Address"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Address"", addressElement.getName());
		}
		
		/**
		* Test case for {@link IFXEncoder#encode(IFXObject)} method.
		* It tests the encoding of a simple IFXObject with a single IBaseType.
		*/
		@Test
		public void testEncodeSimpleIFXObjectWithIFXObjectArrayAndIBaseType() throws Exception {
				IFXEncoder encoder = new IFXEncoder();
				IFXObject obj = new IFXObject();
				obj.setId(""12345"");
				obj.setName(""Sujit"");
				obj.setAddress(new Address[] {new Address(), new Address()});
				obj.setPhone(new String[] {""123-456-7890"", ""234-567-8901""});
				Element element = encoder.encode(obj);
				assertEquals(""IFXObject"", element.getName());
				assertEquals(""12345"", element.getAttributeValue(""Id""));
				Element nameElement = element.getChild(""Name"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Sujit"", nameElement.getText());
				Element addressElement = element.getChild(""Address"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Address"", addressElement.getName());
				addressElement = element.getChild(""Address"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Address"", addressElement.getName());
				Element phoneElement = element.getChild(""Phone"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""123-456-7890"", phoneElement.getText());
				phoneElement = element.getChild(""Phone"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""234-567-8901"", phoneElement.getText());
		}
		
		/**
		* Test case for {@link IFXEncoder#encode(IFXObject)} method.
		* It tests the encoding of a simple IFXObject with a single IBaseType.
		*/
		@Test
		public void testEncodeSimpleIFXObjectWithIFXObjectArrayAndIBaseTypeArray() throws Exception {
				IFXEncoder encoder = new IFXEncoder();
				IFXObject obj = new IFXObject();
				obj.setId(""12345"");
				obj.setName(""Sujit"");
				obj.setAddress(new Address[] {new Address(), new Address()});
				obj.setPhone(new String[] {""123-456-7890"", ""234-567-8901""});
				obj.setEmail(new String[] {""spal@users.sourceforge.net"", ""spal@users.sourceforge.net""});
				Element element = encoder.encode(obj);
				assertEquals(""IFXObject"", element.getName());
				assertEquals(""12345"", element.getAttributeValue(""Id""));
				Element nameElement = element.getChild(""Name"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Sujit"", nameElement.getText());
				Element addressElement = element.getChild(""Address"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Address"", addressElement.getName());
				addressElement = element.getChild(""Address"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Address"", addressElement.getName());
				Element phoneElement = element.getChild(""Phone"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""123-456-7890"", phoneElement.getText());
				phoneElement = element.getChild(""Phone"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""234-567-8901"", phoneElement.getText());
				Element emailElement = element.getChild(""Email"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""spal@users.sourceforge.net"", emailElement.getText());
				emailElement = element.getChild(""Email"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""spal@users.sourceforge.net"", emailElement.getText());
		}
		
		/**
		* Test case for {@link IFXEncoder#encode(IFXObject)} method.
		* It tests the encoding of a simple IFXObject with a single IBaseType.
		*/
		@Test
		public void testEncodeSimpleIFXObjectWithIFXObjectArrayAndIBaseTypeArrayAndIFXObject() throws Exception {
				IFXEncoder encoder = new IFXEncoder();
				IFXObject obj = new IFXObject();
				obj.setId(""12345"");
				obj.setName(""Sujit"");
				obj.setAddress(new Address[] {new Address(), new Address()});
				obj.setPhone(new String[] {""123-456-7890"", ""234-567-8901""});
				obj.setEmail(new String[] {""spal@users.sourceforge.net"", ""spal@users.sourceforge.net""});
				obj.setEmployer(new Employer());
				Element element = encoder.encode(obj);
				assertEquals(""IFXObject"", element.getName());
				assertEquals(""12345"", element.getAttributeValue(""Id""));
				Element nameElement = element.getChild(""Name"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Sujit"", nameElement.getText());
				Element addressElement = element.getChild(""Address"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Address"", addressElement.getName());
				addressElement = element.getChild(""Address"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Address"", addressElement.getName());
				Element phoneElement = element.getChild(""Phone"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""123-456-7890"", phoneElement.getText());
				phoneElement = element.getChild(""Phone"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""234-567-8901"", phoneElement.getText());
				Element emailElement = element.getChild(""Email"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""spal@users.sourceforge.net"", emailElement.getText());
				emailElement = element.getChild(""Email"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""spal@users.sourceforge.net"", emailElement.getText());
				Element employerElement = element.getChild(""Employer"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Employer"", employerElement.getName());
		}
		
		/**
		* Test case for {@link IFXEncoder#encode(IFXObject)} method.
		* It tests the encoding of a simple IFXObject with a single IBaseType.
		*/
		@Test
		public void testEncodeSimpleIFXObjectWithIFXObjectArrayAndIBaseTypeArrayAndIFXObjectArray() throws Exception {
				IFXEncoder encoder = new IFXEncoder();
				IFXObject obj = new IFXObject();
				obj.setId(""12345"");
				obj.setName(""Sujit"");
				obj.setAddress(new Address[] {new Address(), new Address()});
				obj.setPhone(new String[] {""123-456-7890"", ""234-567-8901""});
				obj.setEmail(new String[] {""spal@users.sourceforge.net"", ""spal@users.sourceforge.net""});
				obj.setEmployer(new Employer[] {new Employer(), new Employer()});
				Element element = encoder.encode(obj);
				assertEquals(""IFXObject"", element.getName());
				assertEquals(""12345"", element.getAttributeValue(""Id""));
				Element nameElement = element.getChild(""Name"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Sujit"", nameElement.getText());
				Element addressElement = element.getChild(""Address"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Address"", addressElement.getName());
				addressElement = element.getChild(""Address"", Namespace.getNamespace(""http://www.ifxforum.org/ifx/2""));
				assertEquals(""Address"", addressElement.getName());
				Element phone"
