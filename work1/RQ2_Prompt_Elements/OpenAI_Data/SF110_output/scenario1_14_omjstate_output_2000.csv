ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wrj8MAUpd71meHHs9Z4Uqtbo2WT8,/EvoSuiteBenchmark/scenario1/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState0.java,72.06856155395508,length,"// EndState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a  state machines ending state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the end state.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 * @stereotype singleton
 */
public final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    public static EndState getSingleton() {
        return SINGLETON;
    }
}
","// EndStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getSingleton()} method.
*/
class EndStateTest {","// EndStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#getSingleton()} method.
*/
class EndStateTest {

	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton() {
		EndState result = EndState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton2() {
		EndState result = EndState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton3() {
		EndState result = EndState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton4() {
		EndState result = EndState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton5() {
		EndState result = EndState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton6() {
		EndState result = EndState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton7() {
		EndState result = EndState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton8() {
		EndState result = EndState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton9() {
		EndState result = EndState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link EndState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton10() {
		EndState result = EndState.getSingleton();
		assertNotNull(result);
	}
	
}

// IState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Interface representing a state in a state machine.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public interface IState {
}

// ISingleton.java
package uk.me.jockmacmad.jstate.patterns;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Interface representing a singleton pattern.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public interface ISingleton {
}

// State.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state in a state machine.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public class State implements IState {
}

// StateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link State}.
* It contains ten unit test cases for the {@link State#State()} method.
*/
class StateTest {
		
	/**
	* Test case for {@link State#State()}.
	*
	* @since 0.1
	*/
	@Test
	void testState() {
		State result = new State();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State()}.
	*
	* @since 0.1
	*/
	@Test
	void testState2() {
		State result = new State();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State()}.
	*
	* @since 0.1
	*/
	@Test
	void testState3() {
		State result = new State();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State()}.
	*
	* @since 0.1
	*/
	@Test
	void testState4() {
		State result = new State();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State()}.
	*
	* @since 0.1
	*/
	@Test
	void testState5() {
		State result = new State();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State()}.
	*
	* @since 0.1
	*/
	@Test
	void testState6() {
		State result = new State();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State()}.
	*
	* @since 0.1
	*/
	@Test
	void testState7() {
		State result = new State();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State()}.
	*
	* @since 0.1
	*/
	@Test
	void testState8() {
		State result = new State();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State()}.
	*
	* @since 0.1
	*/
	@Test
	void testState9() {
		State result = new State();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State()}.
	*
	* @since 0.1
	*/
	@Test
	void testState10() {
		State result = new State();
		assertNotNull(result);
	}
	
}

// StateMachine.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machine."
cmpl-6wrkItNpjOWB5iTtj4yHacq67WtQW,/EvoSuiteBenchmark/scenario1/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/EndState1.java,62.34096074104309,length,"// EndState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a  state machines ending state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the end state.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 * @stereotype singleton
 */
public final class EndState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    public java.lang.Object toObject() {
        return (java.lang.Object) this;
    }
}
","// EndStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#toObject()} method.
*/
class EndStateTest {","// EndStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EndState}.
* It contains ten unit test cases for the {@link EndState#toObject()} method.
*/
class EndStateTest {

	/**
	* Test case for {@link EndState#toObject()}.
	*/
	@Test
	void testToObject() {
		EndState endState = new EndState();
		assertEquals(endState, endState.toObject());
	}
}

// IState.java
package uk.me.jockmacmad.jstate.state;

/**
 * Interface representing a state in a state machine.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public interface IState {

    /**
     * Returns the state as an object.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}

// ISingleton.java
package uk.me.jockmacmad.jstate.patterns;

/**
 * Interface representing a singleton.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public interface ISingleton {

    /**
     * Returns the singleton as an object.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject();
}

// State.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state in a state machine.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public class State implements IState {

    /**
     * The state name.
     */
    private String name;

    /**
     * Constructor for the State object
     *
     * @param name The name of the state.
     */
    public State(String name) {
        this.name = name;
    }

    /**
     * Returns the state as an object.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @return java.lang.Object
     */
    public java.lang.Object toObject() {
        return (java.lang.Object) this;
    }

    /**
     * Returns the name of the state.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @return java.lang.String
     */
    public String getName() {
        return name;
    }

    /**
     * Returns a string representation of the state.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @return java.lang.String
     */
    public String toString() {
        return name;
    }

    /**
     * Returns a hash code for the state.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @return int
     */
    public int hashCode() {
        return new HashCodeBuilder(17, 37).append(name).toHashCode();
    }

    /**
     * Returns true if the state is equal to the given object.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @param obj The object to compare to.
     * @return boolean
     */
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (obj == this) {
            return true;
        }
        if (obj.getClass() != getClass()) {
            return false;
        }
        State rhs = (State) obj;
        return new EqualsBuilder().append(name, rhs.name).isEquals();
    }
}

// StateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link State}.
* It contains ten unit test cases for the {@link State#toObject()} method.
*/
class StateTest {
		
	/**
	* Test case for {@link State#toObject()}.
	*/
	@Test
	void testToObject() {
		State state = new State(""test"");
		assertEquals(state, state.toObject());
	}
}

// Transition.java
package uk.me.jockmacmad.jstate.transition;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a transition in a state machine.
 * Creation date: (2/19/01 4:22:51 PM)
 *
 * @since 0.1
 * @author :Don Stewart
 * @version 0.1
 */
public class Transition {

    /**
     * The name of the transition.
     */
    private String name;

    /**
     * The source state of the transition.
     */
    private IState source;

    /**
     * The destination state of the transition.
     */
    private IState destination;

    /**
     * Constructor for the Transition object
     *
     * @param name The name of the transition.
     * @param source The source state of the transition.
     * @param destination The destination state of the transition.
     */
    public Transition(String name, IState source, IState destination) {
        this.name = name;
        this.source = source;
        this.destination = destination;
    }

    /**
     * Returns the name of the transition.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @return java.lang.String
     */
    public String getName() {
        return name;
    }

    /**
     * Returns the source state of the transition.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @return IState
     */
    public IState getSource() {
        return source;
    }

    /**
     * Returns the destination state of the transition.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @return IState
     */
    public IState getDestination() {
        return destination;
    }

    /**
     * Returns a string representation of the transition.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @return java.lang.String
     */
    public String toString() {
        return name;
    }

    /**
     * Returns a hash code for the transition.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @return int
     */
    public int hashCode() {
        return new HashCodeBuilder(17, 37).append(name).append(source).append(destination).toHashCode();
    }

    /**
     * Returns true if the transition is equal to the given object.
     * Creation date: (2/19/01 4:22:51 PM)
     *
     * @param obj The object to compare to.
     * @return boolean
     */
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (obj == this) {
            return true;
        }
        if (obj.getClass() != getClass()) {
            return false;
        }
        Transition rhs = (Transition) obj;
        return new EqualsBuilder().append(name, rhs.name).append(source, rhs.source).append(destination, rhs"
cmpl-6wrlJ1uA8OGtnKdLFChAz903Cf2ze,/EvoSuiteBenchmark/scenario1/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState0.java,85.72945666313171,length,"// StartState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines staring state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the start state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    public static StartState getSingleton() {
        return SINGLETON;
    }
}
","// StartStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#getSingleton()} method.
*/
class StartStateTest {","// StartStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#getSingleton()} method.
*/
class StartStateTest {

	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton2() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton3() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton4() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton5() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton6() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton7() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton8() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton9() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link StartState#getSingleton()}.
	*
	* @since 0.1
	*/
	@Test
	void testGetSingleton10() {
		StartState result = StartState.getSingleton();
		assertNotNull(result);
	}
	
}

// State.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public class State implements IState {

    /**
     * Constructor for the State object
     *
     * @param name The name of the state
     */
    public State(String name) {
        this.name = name;
    }

    /**
     * The name of the state
     */
    private String name;

    /**
     * Gets the name attribute of the State object
     *
     * @return The name value
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name attribute of the State object
     *
     * @param name The new name value
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns a string representation of the object.
     *
     * @return a string representation of the object.
     */
    public String toString() {
        return name;
    }

    /**
     * Indicates whether some other object is ""equal to"" this one.
     *
     * @param obj the reference object with which to compare.
     * @return <code>true</code> if this object is the same as the obj
     *         argument; <code>false</code> otherwise.
     */
    public boolean equals(Object obj) {
        if (obj instanceof State) {
            State rhs = (State) obj;
            return new EqualsBuilder().append(name, rhs.name).isEquals();
        }
        return false;
    }

    /**
     * Returns a hash code value for the object.
     *
     * @return a hash code value for this object.
     */
    public int hashCode() {
        return new HashCodeBuilder(17, 37).append(name).toHashCode();
    }
}

// StateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link State}.
* It contains ten unit test cases for the {@link State#State(String)} method.
*/
class StateTest {
		
	/**
	* Test case for {@link State#State(String)}.
	*
	* @since 0.1
	*/
	@Test
	void testState() {
		String name = """";
		State result = new State(name);
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State(String)}.
	*
	* @since 0.1
	*/
	@Test
	void testState2() {
		String name = """";
		State result = new State(name);
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State(String)}.
	*
	* @since 0.1
	*/
	@Test
	void testState3() {
		String name = """";
		State result = new State(name);
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State(String)}.
	*
	* @since 0.1
	*/
	@Test
	void testState4() {
		String name = """";
		State result = new State(name);
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State(String)}.
	*
	* @since 0.1
	*/
	@Test
	void testState5() {
		String name = """";
		State result = new State(name);
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State(String)}.
	*
	* @since 0.1
	*/
	@Test
	void testState6() {
		String name = """";
		State result = new State(name);
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State(String)}.
	*
	* @since 0.1
	*/
	@Test
	void testState7() {
		String name = """";
		State result = new State(name);
		assertNotNull(result);
	}
	
	/**
	* Test case for {@link State#State(String)}."
cmpl-6wrmg6QfMmnFtoy74MusksTiKmo0n,/EvoSuiteBenchmark/scenario1/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StartState1.java,66.5203537940979,length,"// StartState.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machines staring state.
 * There is no instance data associated with such a class therefore
 *   there only needs to be a single instance of the start state.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype singleton
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public final class StartState extends java.lang.Object implements IState, uk.me.jockmacmad.jstate.patterns.ISingleton {

    public java.lang.Object toObject() {
        return (java.lang.Object) this;
    }
}
","// StartStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#toObject()} method.
*/
class StartStateTest {","// StartStateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StartState}.
* It contains ten unit test cases for the {@link StartState#toObject()} method.
*/
class StartStateTest {

	/**
	* Test case for {@link StartState#toObject()}.
	*/
	@Test
	void testToObject() {
		StartState startState = new StartState();
		assertEquals(startState, startState.toObject());
	}
}

// State.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state in a state machine.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype state
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public class State implements IState {

    private String name;

    /**
     * Constructor for the State object
     *
     * @param name The name of the state
     */
    public State(String name) {
        this.name = name;
    }

    /**
     * Returns the name of the state
     *
     * @return The name of the state
     */
    public String getName() {
        return name;
    }

    /**
     * Returns the name of the state
     *
     * @return The name of the state
     */
    public String toString() {
        return name;
    }

    /**
     * Returns the name of the state
     *
     * @return The name of the state
     */
    public java.lang.Object toObject() {
        return name;
    }

    /**
     * Returns the hash code of the state
     *
     * @return The hash code of the state
     */
    public int hashCode() {
        return new HashCodeBuilder(17, 37).append(name).toHashCode();
    }

    /**
     * Returns true if the state is equal to the given object
     *
     * @param obj The object to compare the state to
     * @return True if the state is equal to the given object
     */
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (obj == this) {
            return true;
        }
        if (obj.getClass() != getClass()) {
            return false;
        }
        State rhs = (State) obj;
        return new EqualsBuilder().append(name, rhs.name).isEquals();
    }
}

// StateTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link State}.
* It contains ten unit test cases for the {@link State#toObject()} method.
*/
class StateTest {
		
	/**
	* Test case for {@link State#toObject()}.
	*/
	@Test
	void testToObject() {
		State state = new State(""test"");
		assertEquals(""test"", state.toObject());
	}
}

// StateMachine.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

/**
 * Class representing a state machine.
 * Creation date: (19/02/01 4:22:22 PM)
 *
 * @stereotype state machine
 * @author :Don Stewart
 * @version 0.1
 * @since 0.1
 */
public class StateMachine {

    private IState currentState;

    /**
     * Constructor for the StateMachine object
     *
     * @param startState The starting state of the state machine
     */
    public StateMachine(IState startState) {
        currentState = startState;
    }

    /**
     * Returns the current state of the state machine
     *
     * @return The current state of the state machine
     */
    public IState getCurrentState() {
        return currentState;
    }

    /**
     * Sets the current state of the state machine
     *
     * @param state The new current state of the state machine
     */
    public void setCurrentState(IState state) {
        currentState = state;
    }
}

// StateMachineTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StateMachine}.
* It contains ten unit test cases for the {@link StateMachine#getCurrentState()} method.
*/
class StateMachineTest {
		
	/**
	* Test case for {@link StateMachine#getCurrentState()}.
	*/
	@Test
	void testGetCurrentState() {
		StateMachine stateMachine = new StateMachine(new StartState());
		assertEquals(new StartState(), stateMachine.getCurrentState());
	}
}

// StateMachineTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StateMachine}.
* It contains ten unit test cases for the {@link StateMachine#setCurrentState(IState)} method.
*/
class StateMachineTest {
		
	/**
	* Test case for {@link StateMachine#setCurrentState(IState)}.
	*/
	@Test
	void testSetCurrentState() {
		StateMachine stateMachine = new StateMachine(new StartState());
		stateMachine.setCurrentState(new State(""test""));
		assertEquals(new State(""test""), stateMachine.getCurrentState());
	}
}

// StateMachineTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StateMachine}.
* It contains ten unit test cases for the {@link StateMachine#StateMachine(IState)} method.
*/
class StateMachineTest {
		
	/**
	* Test case for {@link StateMachine#StateMachine(IState)}.
	*/
	@Test
	void testStateMachine() {
		StateMachine stateMachine = new StateMachine(new StartState());
		assertEquals(new StartState(), stateMachine.getCurrentState());
	}
}

// StateMachineTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StateMachine}.
* It contains ten unit test cases for the {@link StateMachine#StateMachine(IState)} method.
*/
class StateMachineTest {
		
	/**
	* Test case for {@link StateMachine#StateMachine(IState)}.
	*/
	@Test
	void testStateMachine() {
		StateMachine stateMachine = new StateMachine(new StartState());
		assertEquals(new StartState(), stateMachine.getCurrentState());
	}
}

// StateMachineTest.java
package uk"
cmpl-6wrnlybJkfIGFeN1MsC44mYsKfkg7,/EvoSuiteBenchmark/scenario1/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/StringMatchesGuardCondition.java,61.973647117614746,length,"// StringMatchesGuardCondition.java
package uk.me.jockmacmad.jstate.state;

/**
 * Insert the type's description here.
 * Creation date: (2/26/01 5:09:09 PM)
 *
 * @author: Administrator
 */
public class StringMatchesGuardCondition implements uk.me.jockmacmad.jstate.state.IGuardCondition {

    public boolean evaluate(Object o) {
        boolean rc = false;
        try {
            java.util.Vector params = ((uk.me.jockmacmad.jstate.state.Event) o).getParameters();
            String str = (String) params.elementAt(0);
            if (Value.equals(str)) {
                rc = true;
            }
        } catch (ClassCastException ex) {
            ex.printStackTrace();
        }
        return rc;
    }
}
","// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains ten unit test cases for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {","// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains ten unit test cases for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {

	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: true.
	*/
	@Test
	void testEvaluate_1() {
		StringMatchesGuardCondition fixture = new StringMatchesGuardCondition();
		fixture.Value = ""test"";
		Object o = new Event(""test"");
		boolean result = fixture.evaluate(o);
		assertTrue(result);
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_2() {
		StringMatchesGuardCondition fixture = new StringMatchesGuardCondition();
		fixture.Value = ""test"";
		Object o = new Event(""test2"");
		boolean result = fixture.evaluate(o);
		assertFalse(result);
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_3() {
		StringMatchesGuardCondition fixture = new StringMatchesGuardCondition();
		fixture.Value = ""test"";
		Object o = new Event("""");
		boolean result = fixture.evaluate(o);
		assertFalse(result);
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_4() {
		StringMatchesGuardCondition fixture = new StringMatchesGuardCondition();
		fixture.Value = ""test"";
		Object o = new Event(""test "");
		boolean result = fixture.evaluate(o);
		assertFalse(result);
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_5() {
		StringMatchesGuardCondition fixture = new StringMatchesGuardCondition();
		fixture.Value = ""test"";
		Object o = new Event("" test"");
		boolean result = fixture.evaluate(o);
		assertFalse(result);
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_6() {
		StringMatchesGuardCondition fixture = new StringMatchesGuardCondition();
		fixture.Value = ""test"";
		Object o = new Event(""test test"");
		boolean result = fixture.evaluate(o);
		assertFalse(result);
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_7() {
		StringMatchesGuardCondition fixture = new StringMatchesGuardCondition();
		fixture.Value = ""test"";
		Object o = new Event(""test test test"");
		boolean result = fixture.evaluate(o);
		assertFalse(result);
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_8() {
		StringMatchesGuardCondition fixture = new StringMatchesGuardCondition();
		fixture.Value = ""test"";
		Object o = new Event(""test test test test"");
		boolean result = fixture.evaluate(o);
		assertFalse(result);
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_9() {
		StringMatchesGuardCondition fixture = new StringMatchesGuardCondition();
		fixture.Value = ""test"";
		Object o = new Event(""test test test test test"");
		boolean result = fixture.evaluate(o);
		assertFalse(result);
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_10() {
		StringMatchesGuardCondition fixture = new StringMatchesGuardCondition();
		fixture.Value = ""test"";
		Object o = new Event(""test test test test test test"");
		boolean result = fixture.evaluate(o);
		assertFalse(result);
	}
	
}

// StringMatchesGuardCondition.java
package uk.me.jockmacmad.jstate.state;

/**
 * Insert the type's description here.
 * Creation date: (2/26/01 5:09:09 PM)
 *
 * @author: Administrator
 */
public class StringMatchesGuardCondition implements uk.me.jockmacmad.jstate.state.IGuardCondition {

    public boolean evaluate(Object o) {
        boolean rc = false;
        try {
            java.util.Vector params = ((uk.me.jockmacmad.jstate.state.Event) o).getParameters();
            String str = (String) params.elementAt(0);
            if (Value.equals(str)) {
                rc = true;
            }
        } catch (ClassCastException ex) {
            ex.printStackTrace();
        }
        return rc;
    }
}

// StringMatchesGuardConditionTest.java
package uk.me.jockmacmad.jstate.state;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringMatchesGuardCondition}.
* It contains ten unit test cases for the {@link StringMatchesGuardCondition#evaluate(Object)} method.
*/
class StringMatchesGuardConditionTest {
		
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: true.
	*/
	@Test
	void testEvaluate_1() {
		StringMatchesGuardCondition fixture = new StringMatchesGuardCondition();
		fixture.Value = ""test"";
		Object o = new Event(""test"");
		boolean result = fixture.evaluate(o);
		assertTrue(result);
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_2() {
		StringMatchesGuardCondition fixture = new StringMatchesGuardCondition();
		fixture.Value = ""test"";
		Object o = new Event(""test2"");
		boolean result = fixture.evaluate(o);
		assertFalse(result);
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method.
	* Test data: ""test"".
	* Expected result: false.
	*/
	@Test
	void testEvaluate_3() {
		StringMatchesGuardCondition fixture = new StringMatchesGuardCondition();
		fixture.Value = ""test"";
		Object o = new Event("""");
		boolean result = fixture.evaluate(o);
		assertFalse(result);
	}
	
	/**
	* Test case for {@link StringMatchesGuardCondition#evaluate(Object)} method"
cmpl-6wrolOXmq59IHDYESP01Aw99lulma,/EvoSuiteBenchmark/scenario1/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition0.java,66.24377918243408,length,"// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    public final IState trigger(final IState pCurrentState, final Event pEvent) {
        IState retVal = pCurrentState;
        boolean passesGuards = false;
        if ((initialState.equals(pCurrentState)) && (triggerEvent.equals(pEvent))) {
            // Check if there are any guard conditions
            if (guardConditions.isEmpty()) {
                // No guards so just trigger
                passesGuards = true;
            } else {
                for (IGuardCondition ig : guardConditions) {
                    passesGuards = ig.evaluate(pEvent);
                }
            }
            if (passesGuards) {
                retVal = outcomeState;
            }
        }
        return retVal;
    }
}
","// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#trigger(IState, Event)} method.
*/
class TransitionTest {","// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#trigger(IState, Event)} method.
*/
class TransitionTest {

	@Test
	void testTrigger_1() {
		// Given
		IState initialState = new State(""initialState"");
		IState outcomeState = new State(""outcomeState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, outcomeState, triggerEvent);
		
		// When
		IState result = transition.trigger(initialState, triggerEvent);
		
		// Then
		assertEquals(outcomeState, result);
	}
	
	@Test
	void testTrigger_2() {
		// Given
		IState initialState = new State(""initialState"");
		IState outcomeState = new State(""outcomeState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, outcomeState, triggerEvent);
		
		// When
		IState result = transition.trigger(initialState, new Event(""otherEvent""));
		
		// Then
		assertEquals(initialState, result);
	}
	
	@Test
	void testTrigger_3() {
		// Given
		IState initialState = new State(""initialState"");
		IState outcomeState = new State(""outcomeState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, outcomeState, triggerEvent);
		
		// When
		IState result = transition.trigger(new State(""otherState""), triggerEvent);
		
		// Then
		assertEquals(initialState, result);
	}
	
	@Test
	void testTrigger_4() {
		// Given
		IState initialState = new State(""initialState"");
		IState outcomeState = new State(""outcomeState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, outcomeState, triggerEvent);
		
		// When
		IState result = transition.trigger(new State(""otherState""), new Event(""otherEvent""));
		
		// Then
		assertEquals(initialState, result);
	}
	
	@Test
	void testTrigger_5() {
		// Given
		IState initialState = new State(""initialState"");
		IState outcomeState = new State(""outcomeState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, outcomeState, triggerEvent);
		
		// When
		IState result = transition.trigger(initialState, triggerEvent);
		
		// Then
		assertEquals(outcomeState, result);
	}
	
	@Test
	void testTrigger_6() {
		// Given
		IState initialState = new State(""initialState"");
		IState outcomeState = new State(""outcomeState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, outcomeState, triggerEvent);
		
		// When
		IState result = transition.trigger(initialState, new Event(""otherEvent""));
		
		// Then
		assertEquals(initialState, result);
	}
	
	@Test
	void testTrigger_7() {
		// Given
		IState initialState = new State(""initialState"");
		IState outcomeState = new State(""outcomeState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, outcomeState, triggerEvent);
		
		// When
		IState result = transition.trigger(new State(""otherState""), triggerEvent);
		
		// Then
		assertEquals(initialState, result);
	}
	
	@Test
	void testTrigger_8() {
		// Given
		IState initialState = new State(""initialState"");
		IState outcomeState = new State(""outcomeState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, outcomeState, triggerEvent);
		
		// When
		IState result = transition.trigger(new State(""otherState""), new Event(""otherEvent""));
		
		// Then
		assertEquals(initialState, result);
	}
	
	@Test
	void testTrigger_9() {
		// Given
		IState initialState = new State(""initialState"");
		IState outcomeState = new State(""outcomeState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, outcomeState, triggerEvent);
		
		// When
		IState result = transition.trigger(initialState, triggerEvent);
		
		// Then
		assertEquals(outcomeState, result);
	}
	
	@Test
	void testTrigger_10() {
		// Given
		IState initialState = new State(""initialState"");
		IState outcomeState = new State(""outcomeState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, outcomeState, triggerEvent);
		
		// When
		IState result = transition.trigger(initialState, new Event(""otherEvent""));
		
		// Then
		assertEquals(initialState, result);
	}
}

// State.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A state that can be transitioned to.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class State implements IState {

    private final String name;

    public State(final String pName) {
        name = pName;
    }

    public final String getName() {
        return name;
    }

    @Override
    public final boolean equals(final Object pOther) {
        if (pOther == null) {
            return false;
        }
        if (pOther == this) {
            return true;
        }
        if (pOther.getClass() != getClass()) {
            return false;
        }
        State rhs = (State) pOther;
        return new EqualsBuilder().append(name, rhs.name).isEquals();
    }

    @Override
    public final int hashCode() {
        return new HashCodeBuilder(17, 37).append(name).toHashCode();
    }

    @Override
    public final String toString() {
        return new ToStringBuilder(this).append(""name"", name).toString();
    }
}

// Event.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * An event that can be triggered.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Event implements IEvent {

    private final String name;

    public Event(final String pName) {
        name = pName;
    }

    public final String getName() {
        return name;
    }

    @Override
    public final boolean equals(final Object pOther) {
        if (pOther == null) {
            return false;
        }
        if (pOther == this) {
            return true;
        }
        if (pOther.getClass() != getClass()) {
            return false;
        }
        Event rhs = (Event) pOther;
        return new EqualsBuilder().append(name, rhs.name).isEquals();
    }

    @Override
    public final int hashCode() {
        return new HashCodeBuilder(17, 37).append(name).toHashCode();
    }

    @Override
    public"
cmpl-6wrppwxEVWF2ACKR3stn45FC3qGQI,/EvoSuiteBenchmark/scenario1/14_omjstate/src/main/java/uk/me/jockmacmad/jstate/state/Transition1.java,84.13253045082092,length,"// Transition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A transition that is evaluated upon receiving an event.
 * <p>
 *   Given a start state and an event the transition
 *     firstly evaluates if it applies by checking
 *     the start state and and event match its own.
 *     Once it ascertains it is for the start state/event
 *     combination, then the transition evaluates any
 *     guard conditions it has associated to it.
 *     If all the guard conditions evaluate to true,
 *     then the transition executes and returns the
 *     new state that the state machine is in.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class Transition {

    public final boolean willTrigger(final IState pCurrentState, final Event pEvent) {
        boolean retVal = false;
        boolean passesGuards = false;
        if ((initialState.equals(pCurrentState)) && (triggerEvent.equals(pEvent))) {
            for (IGuardCondition ig : guardConditions) {
                passesGuards = ig.evaluate(pEvent);
            }
            if (passesGuards) {
                retVal = true;
            }
        }
        return retVal;
    }
}
","// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#willTrigger(IState, Event)} method.
*/
class TransitionTest {","// TransitionTest.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Transition}.
* It contains ten unit test cases for the {@link Transition#willTrigger(IState, Event)} method.
*/
class TransitionTest {

	@Test
	void testWillTrigger_1() {
		// Given
		IState initialState = new State(""initialState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, triggerEvent);
		IState currentState = new State(""currentState"");
		Event event = new Event(""event"");
		
		// When
		boolean result = transition.willTrigger(currentState, event);
		
		// Then
		assertFalse(result);
	}
	
	@Test
	void testWillTrigger_2() {
		// Given
		IState initialState = new State(""initialState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, triggerEvent);
		IState currentState = new State(""initialState"");
		Event event = new Event(""event"");
		
		// When
		boolean result = transition.willTrigger(currentState, event);
		
		// Then
		assertFalse(result);
	}
	
	@Test
	void testWillTrigger_3() {
		// Given
		IState initialState = new State(""initialState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, triggerEvent);
		IState currentState = new State(""initialState"");
		Event event = new Event(""triggerEvent"");
		
		// When
		boolean result = transition.willTrigger(currentState, event);
		
		// Then
		assertTrue(result);
	}
	
	@Test
	void testWillTrigger_4() {
		// Given
		IState initialState = new State(""initialState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, triggerEvent);
		IState currentState = new State(""initialState"");
		Event event = new Event(""triggerEvent"");
		IGuardCondition guardCondition = new GuardCondition(true);
		transition.addGuardCondition(guardCondition);
		
		// When
		boolean result = transition.willTrigger(currentState, event);
		
		// Then
		assertTrue(result);
	}
	
	@Test
	void testWillTrigger_5() {
		// Given
		IState initialState = new State(""initialState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, triggerEvent);
		IState currentState = new State(""initialState"");
		Event event = new Event(""triggerEvent"");
		IGuardCondition guardCondition = new GuardCondition(false);
		transition.addGuardCondition(guardCondition);
		
		// When
		boolean result = transition.willTrigger(currentState, event);
		
		// Then
		assertFalse(result);
	}
	
	@Test
	void testWillTrigger_6() {
		// Given
		IState initialState = new State(""initialState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, triggerEvent);
		IState currentState = new State(""initialState"");
		Event event = new Event(""triggerEvent"");
		IGuardCondition guardCondition1 = new GuardCondition(true);
		transition.addGuardCondition(guardCondition1);
		IGuardCondition guardCondition2 = new GuardCondition(true);
		transition.addGuardCondition(guardCondition2);
		
		// When
		boolean result = transition.willTrigger(currentState, event);
		
		// Then
		assertTrue(result);
	}
	
	@Test
	void testWillTrigger_7() {
		// Given
		IState initialState = new State(""initialState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, triggerEvent);
		IState currentState = new State(""initialState"");
		Event event = new Event(""triggerEvent"");
		IGuardCondition guardCondition1 = new GuardCondition(true);
		transition.addGuardCondition(guardCondition1);
		IGuardCondition guardCondition2 = new GuardCondition(false);
		transition.addGuardCondition(guardCondition2);
		
		// When
		boolean result = transition.willTrigger(currentState, event);
		
		// Then
		assertFalse(result);
	}
	
	@Test
	void testWillTrigger_8() {
		// Given
		IState initialState = new State(""initialState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, triggerEvent);
		IState currentState = new State(""initialState"");
		Event event = new Event(""triggerEvent"");
		IGuardCondition guardCondition1 = new GuardCondition(false);
		transition.addGuardCondition(guardCondition1);
		IGuardCondition guardCondition2 = new GuardCondition(true);
		transition.addGuardCondition(guardCondition2);
		
		// When
		boolean result = transition.willTrigger(currentState, event);
		
		// Then
		assertFalse(result);
	}
	
	@Test
	void testWillTrigger_9() {
		// Given
		IState initialState = new State(""initialState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, triggerEvent);
		IState currentState = new State(""initialState"");
		Event event = new Event(""triggerEvent"");
		IGuardCondition guardCondition1 = new GuardCondition(false);
		transition.addGuardCondition(guardCondition1);
		IGuardCondition guardCondition2 = new GuardCondition(false);
		transition.addGuardCondition(guardCondition2);
		
		// When
		boolean result = transition.willTrigger(currentState, event);
		
		// Then
		assertFalse(result);
	}
	
	@Test
	void testWillTrigger_10() {
		// Given
		IState initialState = new State(""initialState"");
		Event triggerEvent = new Event(""triggerEvent"");
		Transition transition = new Transition(initialState, triggerEvent);
		IState currentState = new State(""initialState"");
		Event event = new Event(""triggerEvent"");
		IGuardCondition guardCondition1 = new GuardCondition(true);
		transition.addGuardCondition(guardCondition1);
		IGuardCondition guardCondition2 = new GuardCondition(true);
		transition.addGuardCondition(guardCondition2);
		IGuardCondition guardCondition3 = new GuardCondition(true);
		transition.addGuardCondition(guardCondition3);
		
		// When
		boolean result = transition.willTrigger(currentState, event);
		
		// Then
		assertTrue(result);
	}
}

// GuardCondition.java
package uk.me.jockmacmad.jstate.state;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * A guard condition that is evaluated upon receiving an event.
 * <p>
 *   Given an event the guard condition
 *     evaluates if it applies by checking
 *     the event matches its own.
 *     Once it ascertains it is for the event
 *     it evaluates the condition and returns
 *     the result.
 * Creation date: (14/02/01 6:14:35 PM)
 *
 * @author:
 */
public class GuardCondition {

    public final boolean evaluate(final Event pEvent) {
        boolean retVal = false;
        if (event.equals(pEvent)) {
            retVal = condition;
        }
        return retVal;
    }
}

// GuardConditionTest.java
package uk.me.jockmacmad.jstate.state"
