[
{
    "id": "cmpl-6wnyYkqKR2RjghD8o0yyKNfyLRNoB",
    "object": "text_completion",
    "created": 1679473150,
    "model": "code-davinci-002",
    "choices": [
        {
            "text": "\n\t/**\n\t* Test case 1.\n\t* The test case is passed if the method {@link TXTCharacter#load()}\n\t* returns a {@link IndexedFastMap} with the same size of the file\n\t* {@link CharConfig#fileDB}.\n\t*/\n\t@Test\n\tvoid testLoad1() {\n\t\tTXTCharacter txtChar = new TXTCharacter();\n\t\ttry {\n\t\t\tIndexedFastMap<Integer, ROCharacter> indexedChar = txtChar.load();\n\t\t\tassertEquals(indexedChar.size(), countLines(CharConfig.fileDB));\n\t\t} catch (IOException e) {\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n\t\n\t/**\n\t* Test case 2.\n\t* The test case is passed if the method {@link TXTCharacter#load()}\n\t* returns a {@link IndexedFastMap} with the same size of the file\n\t* {@link CharConfig#fileDB}.\n\t*/\n\t@Test\n\tvoid testLoad2() {\n\t\tTXTCharacter txtChar = new TXTCharacter();\n\t\ttry {\n\t\t\tIndexedFastMap<Integer, ROCharacter> indexedChar = txtChar.load();\n\t\t\tassertEquals(indexedChar.size(), countLines(CharConfig.fileDB));\n\t\t} catch (IOException e) {\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n\t\n\t/**\n\t* Test case 3.\n\t* The test case is passed if the method {@link TXTCharacter#load()}\n\t* returns a {@link IndexedFastMap} with the same size of the file\n\t* {@link CharConfig#fileDB}.\n\t*/\n\t@Test\n\tvoid testLoad3() {\n\t\tTXTCharacter txtChar = new TXTCharacter();\n\t\ttry {\n\t\t\tIndexedFastMap<Integer, ROCharacter> indexedChar = txtChar.load();\n\t\t\tassertEquals(indexedChar.size(), countLines(CharConfig.fileDB));\n\t\t} catch (IOException e) {\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n\t\n\t/**\n\t* Test case 4.\n\t* The test case is passed if the method {@link TXTCharacter#load()}\n\t* returns a {@link IndexedFastMap} with the same size of the file\n\t* {@link CharConfig#fileDB}.\n\t*/\n\t@Test\n\tvoid testLoad4() {\n\t\tTXTCharacter txtChar = new TXTCharacter();\n\t\ttry {\n\t\t\tIndexedFastMap<Integer, ROCharacter> indexedChar = txtChar.load();\n\t\t\tassertEquals(indexedChar.size(), countLines(CharConfig.fileDB));\n\t\t} catch (IOException e) {\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n\t\n\t/**\n\t* Test case 5.\n\t* The test case is passed if the method {@link TXTCharacter#load()}\n\t* returns a {@link IndexedFastMap} with the same size of the file\n\t* {@link CharConfig#fileDB}.\n\t*/\n\t@Test\n\tvoid testLoad5() {\n\t\tTXTCharacter txtChar = new TXTCharacter();\n\t\ttry {\n\t\t\tIndexedFastMap<Integer, ROCharacter> indexedChar = txtChar.load();\n\t\t\tassertEquals(indexedChar.size(), countLines(CharConfig.fileDB));\n\t\t} catch (IOException e) {\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n\t\n\t/**\n\t* Test case 6.\n\t* The test case is passed if the method {@link TXTCharacter#load()}\n\t* returns a {@link IndexedFastMap} with the same size of the file\n\t* {@link CharConfig#fileDB}.\n\t*/\n\t@Test\n\tvoid testLoad6() {\n\t\tTXTCharacter txtChar = new TXTCharacter();\n\t\ttry {\n\t\t\tIndexedFastMap<Integer, ROCharacter> indexedChar = txtChar.load();\n\t\t\tassertEquals(indexedChar.size(), countLines(CharConfig.fileDB));\n\t\t} catch (IOException e) {\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n\t\n\t/**\n\t* Test case 7.\n\t* The test case is passed if the method {@link TXTCharacter#load()}\n\t* returns a {@link IndexedFastMap} with the same size of the file\n\t* {@link CharConfig#fileDB}.\n\t*/\n\t@Test\n\tvoid testLoad7() {\n\t\tTXTCharacter txtChar = new TXTCharacter();\n\t\ttry {\n\t\t\tIndexedFastMap<Integer, ROCharacter> indexedChar = txtChar.load();\n\t\t\tassertEquals(indexedChar.size(), countLines(CharConfig.fileDB));\n\t\t} catch (IOException e) {\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n\t\n\t/**\n\t* Test case 8.\n\t* The test case is passed if the method {@link TXTCharacter#load()}\n\t* returns a {@link IndexedFastMap} with the same size of the file\n\t* {@link CharConfig#fileDB}.\n\t*/\n\t@Test\n\tvoid testLoad8() {\n\t\tTXTCharacter txtChar = new TXTCharacter();\n\t\ttry {\n\t\t\tIndexedFastMap<Integer, ROCharacter> indexedChar = txtChar.load();\n\t\t\tassertEquals(indexedChar.size(), countLines(CharConfig.fileDB));\n\t\t} catch (IOException e) {\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n\t\n\t/**\n\t* Test case 9.\n\t* The test case is passed if the method {@link TXTCharacter#load()}\n\t* returns a {@link IndexedFastMap} with the same size of the file\n\t* {@link CharConfig#fileDB}.\n\t*/\n\t@Test\n\tvoid testLoad9() {\n\t\tTXTCharacter txtChar = new TXTCharacter();\n\t\ttry {\n\t\t\tIndexedFastMap<Integer, ROCharacter> indexedChar = txtChar.load();\n\t\t\tassertEquals(indexedChar.size(), countLines(CharConfig.fileDB));\n\t\t} catch (IOException e) {\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n\t\n\t/**\n\t* Test case 10.\n\t* The test case is passed if the method {@link TXTCharacter#load()}\n\t* returns a {@link IndexedFastMap} with the same size of the file\n\t* {@link CharConfig#fileDB}.\n\t*/\n\t@Test\n\tvoid testLoad10() {\n\t\tTXTCharacter txtChar = new TXTCharacter();\n\t\ttry {\n\t\t\tIndexedFastMap<Integer, ROCharacter> indexedChar = txtChar.load();\n\t\t\tassertEquals(indexedChar.size(), countLines(CharConfig.fileDB));\n\t\t} catch (IOException e) {\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n\t\n\t/**\n\t* Count the number of lines of a file.\n\t* @param fileName the name of the file.\n\t* @return the number of lines of the file.\n\t*/\n\tprivate int countLines(String fileName) {\n\t\tint count = 0;\n\t\ttry {\n\t\t\tBufferedReader in = new BufferedReader(new FileReader(new File(fileName)));\n\t\t\twhile (in.readLine() != null) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tin.close();\n\t\t} catch (IOException e) {\n\t\t\tfail(e.getMessage());\n\t\t}\n\t\treturn count;\n\t}\n}\n\n// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javat",
            "index": 0,
            "logprobs": null,
            "finish_reason": "length"
        }
    ],
    "usage": {
        "prompt_tokens": 784,
        "completion_tokens": 2000,
        "total_tokens": 2784
    },
    "time_taken": 88.89558911323547,
    "prompt_id": "/EvoSuiteBenchmark/scenario1/81_javathena/src/main/java/org/character/data/TXTCharacter.java",
    "original_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException {\n        IndexedFastMap<Integer, ROCharacter> indexedChar = new IndexedFastMap<Integer, ROCharacter>();\n        BufferedReader in = new BufferedReader(new FileReader(new File(fileDB)));\n        String line = null;\n        while ((line = in.readLine()) != null) {\n            try {\n                ROCharacter currChar = readCharactere(line);\n                indexedChar.put(currChar.getChar_id(), currChar);\n            } catch (MalformedDataException e) {\n                Functions.showWarning(e.getMessage());\n            }\n        }\n        in.close();\n        readFriend(indexedChar);\n        readHotkeys(indexedChar);\n        return indexedChar;\n    }\n}\n",
    "test_prompt": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains ten unit test cases for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {"
}
]