ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6x8QR74iFtZKblCnV25qaujINNo1f,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/model/impl/SimpleCombatant_0Test.java,70.60828828811646,length,"// SimpleCombatant.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;

/**
 * A Combatant with basic attributes (position, health)
 *
 * @author daniel
 */
public class SimpleCombatant implements Combatant {

    private static final transient Logger LOG = Logger.getLogger(SimpleCombatant.class.getName());

    private final int maxHealth;

    private final CombatantSide side;

    private final String name;

    private final String city;

    private final Set<CombatantObserver> observers = new HashSet<CombatantObserver>();

    private final Object stateChangeLock = new Object();

    private final CharacterClass charClass;

    private final Weapon weapon;

    private CombatantState state;

    private Combatant aimingAt = null;

    /**
     * Create a new {@link Combatant} at the given position and the given amount
     * of health.
     *
     * @param side
     *            not null
     * @param initialState
     *            not null
     * @param maxHealth
     *            > 0
     * @param name
     *            the name of the player of this Combatant
     * @param characterClass
     *            maybe null for old logs
     * @param weapon
     *            not null
     * @param city
     *            not null
     */
    public SimpleCombatant(final CombatantSide side, final CombatantState initialState, final int maxHealth, final String name, final CharacterClass characterClass, final Weapon weapon, final String city) {
    }

    /**
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#getName()
     */
    public String getName();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#getWeapon()
     */
    public Weapon getWeapon();

    /**
     * internal method for graphical display
     *
     * @return the maximal health
     */
    public int _getMaxLP();

    /**
     * internal method for graphical display
     *
     * @return the current health
     */
    public int _getCurrentLP();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#move(de.outstare.fortbattleplayer.model.Area)
     */
    public void move(final Area target);

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#shoot(de.outstare.fortbattleplayer.model.Area)
     */
    public void shoot(final int power);

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#hit(int)
     */
    public boolean hit(final int damageAmount);

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#aimAt(de.outstare.fortbattleplayer.model.Combatant)
     */
    public void aimAt(final Combatant target);

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#setDestination(de.outstare.fortbattleplayer.model.Area)
     */
    public void setDestination(final Area destination);

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#addObserver(de.outstare.fortbattleplayer.model.CombatantObserver)
     */
    public void addObserver(final CombatantObserver observer);

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#removeObserver(de.outstare.fortbattleplayer.model.CombatantObserver)
     */
    public void removeObserver(final CombatantObserver observer);

    /**
     * notify all observers about the current position
     */
    protected void fireHasMoved();

    /**
     * notify all observers about the current position
     *
     * @param swappedWith
     */
    protected void fireHasSwapped(final Combatant swappedWith);

    /**
     * notify all observers about the current position
     */
    protected void fireNewTarget();

    /**
     * notify all observers that I shot at somebody.
     */
    protected void fireAimingAt();

    /**
     * notify all observers about a loss of health
     *
     * @param damage
     *            amount of healthpoints lost
     * @param healthBefore
     *            original health amount before it was decreased by
     *            <code>damage</code>
     */
    protected void fireWasHit(final int damage, final int healthBefore);

    /**
     * notify all observers about our dead
     */
    protected void fireIsDead();

    /**
     * notify all observers about our resurrection
     */
    protected void fireIsAlive();

    /**
     * notify all observers about changed online state
     *
     * @param changed
     *            if the value was changed or only set
     */
    protected void fireOnlineChange(final boolean changed);

    /**
     * notify all observers that i have done a critical shot
     *
     * @param damage
     *            the actual caused damage
     */
    protected void fireCriticalShot(final int damage);

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#_getLocation()
     */
    public Area _getLocation();

    /**
     * @return the side
     */
    public CombatantSide getSide();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#_health()
     */
    public int _health();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#_maxHealth()
     */
    public int _maxHealth();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#_setState(de.outstare.fortbattleplayer.model.CombatantState)
     */
    public void _setState(final CombatantState newState);

    /**
     * @param position
     */
    private void moveAway(final Area position);

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#_state()
     */
    public CombatantState _state();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#isOnline()
     */
    public boolean isOnline();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#setOnline()
     */
    public void setOnline(final boolean isOnline);

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#getCharacterClass()
     */
    public CharacterClass getCharacterClass();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#getSectorBonus()
     */
    public SectorBonus getSectorBonus();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#getCity()
     */
    public String getCity();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#usesBayonet()
     */
    public boolean usesBayonet();

    /**
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode();

    /**
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(final Object obj);
}
","// SimpleCombatant_0Test.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains ten unit test cases for the {@link SimpleCombatant#_getMaxLP()} method.
*/
class SimpleCombatant_0Test {","// SimpleCombatant_0Test.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains ten unit test cases for the {@link SimpleCombatant#_getMaxLP()} method.
*/
class SimpleCombatant_0Test {

		private static final transient Logger LOG = Logger.getLogger(SimpleCombatant_0Test.class.getName());
		
		private final int maxHealth;
		
		private final CombatantSide side;
		
		private final String name;
		
		private final String city;
		
		private final Set<CombatantObserver> observers = new HashSet<CombatantObserver>();
		
		private final Object stateChangeLock = new Object();
		
		private final CharacterClass charClass;
		
		private final Weapon weapon;
		
		private CombatantState state;
		
		private Combatant aimingAt = null;
		
		/**
		 * Create a new {@link Combatant} at the given position and the given amount
		 * of health.
		 *
		 * @param side
		 *            not null
		 * @param initialState
		 *            not null
		 * @param maxHealth
		 *            > 0
		 * @param name
		 *            the name of the player of this Combatant
		 * @param characterClass
		 *            maybe null for old logs
		 * @param weapon
		 *            not null
		 * @param city
		 *            not null
		 */
		public SimpleCombatant(final CombatantSide side, final CombatantState initialState, final int maxHealth, final String name, final CharacterClass characterClass, final Weapon weapon, final String city) {
		}
		
		/**
		 * @see java.lang.Object#toString()
		 */
		@Override
		public String toString();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#getName()
		 */
		public String getName();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#getWeapon()
		 */
		public Weapon getWeapon();
		
		/**
		 * internal method for graphical display
		 *
		 * @return the maximal health
		 */
		public int _getMaxLP();
		
		/**
		 * internal method for graphical display
		 *
		 * @return the current health
		 */
		public int _getCurrentLP();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#move(de.outstare.fortbattleplayer.model.Area)
		 */
		public void move(final Area target);
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#shoot(de.outstare.fortbattleplayer.model.Area)
		 */
		public void shoot(final int power);
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#hit(int)
		 */
		public boolean hit(final int damageAmount);
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#aimAt(de.outstare.fortbattleplayer.model.Combatant)
		 */
		public void aimAt(final Combatant target);
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#setDestination(de.outstare.fortbattleplayer.model.Area)
		 */
		public void setDestination(final Area destination);
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#addObserver(de.outstare.fortbattleplayer.model.CombatantObserver)
		 */
		public void addObserver(final CombatantObserver observer);
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#removeObserver(de.outstare.fortbattleplayer.model.CombatantObserver)
		 */
		public void removeObserver(final CombatantObserver observer);
		
		/**
		 * notify all observers about the current position
		 */
		protected void fireHasMoved();
		
		/**
		 * notify all observers about the current position
		 *
		 * @param swappedWith
		 */
		protected void fireHasSwapped(final Combatant swappedWith);
		
		/**
		 * notify all observers about the current position
		 */
		protected void fireNewTarget();
		
		/**
		 * notify all observers that I shot at somebody.
		 */
		protected void fireAimingAt();
		
		/**
		 * notify all observers about a loss of health
		 *
		 * @param damage
		 *            amount of healthpoints lost
		 * @param healthBefore
		 *            original health amount before it was decreased by
		 *            <code>damage</code>
		 */
		protected void fireWasHit(final int damage, final int healthBefore);
		
		/**
		 * notify all observers about our dead
		 */
		protected void fireIsDead();
		
		/**
		 * notify all observers about our resurrection
		 */
		protected void fireIsAlive();
		
		/**
		 * notify all observers about changed online state
		 *
		 * @param changed
		 *            if the value was changed or only set
		 */
		protected void fireOnlineChange(final boolean changed);
		
		/**
		 * notify all observers that i have done a critical shot
		 *
		 * @param damage
		 *            the actual caused damage
		 */
		protected void fireCriticalShot(final int damage);
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#_getLocation()
		 */
		public Area _getLocation();
		
		/**
		 * @return the side
		 */
		public CombatantSide getSide();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#_health()
		 */
		public int _health();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#_maxHealth()
		 */
		public int _maxHealth();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#_setState(de.outstare.fortbattleplayer.model.CombatantState)
		 */
		public void _setState(final CombatantState newState);
		
		/**
		 * @param position
		 */
		private void moveAway(final Area position);
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#_state()
		 */
		public CombatantState _state();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#isOnline()
		 */
		public boolean isOnline();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#setOnline()
		 */
		public void setOnline(final boolean isOnline);
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#getCharacterClass()
		 */
		public CharacterClass getCharacterClass();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#getSectorBonus()
		 */
		public SectorBonus getSectorBonus();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#getCity()
		 */
		public String getCity();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#usesBayonet()"
cmpl-6x8RZ58Ywc24qkX28mBGCKHt9Gcn7,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/model/impl/SimpleCombatant_1Test.java,51.48695349693298,length,"// SimpleCombatant.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;

/**
 * A Combatant with basic attributes (position, health)
 *
 * @author daniel
 */
public class SimpleCombatant implements Combatant {

    private static final transient Logger LOG = Logger.getLogger(SimpleCombatant.class.getName());

    private final int maxHealth;

    private final CombatantSide side;

    private final String name;

    private final String city;

    private final Set<CombatantObserver> observers = new HashSet<CombatantObserver>();

    private final Object stateChangeLock = new Object();

    private final CharacterClass charClass;

    private final Weapon weapon;

    private CombatantState state;

    private Combatant aimingAt = null;

    /**
     * Create a new {@link Combatant} at the given position and the given amount
     * of health.
     *
     * @param side
     *            not null
     * @param initialState
     *            not null
     * @param maxHealth
     *            > 0
     * @param name
     *            the name of the player of this Combatant
     * @param characterClass
     *            maybe null for old logs
     * @param weapon
     *            not null
     * @param city
     *            not null
     */
    public SimpleCombatant(final CombatantSide side, final CombatantState initialState, final int maxHealth, final String name, final CharacterClass characterClass, final Weapon weapon, final String city) {
    }

    /**
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#getName()
     */
    public String getName();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#getWeapon()
     */
    public Weapon getWeapon();

    /**
     * internal method for graphical display
     *
     * @return the maximal health
     */
    public int _getMaxLP();

    /**
     * internal method for graphical display
     *
     * @return the current health
     */
    public int _getCurrentLP();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#move(de.outstare.fortbattleplayer.model.Area)
     */
    public void move(final Area target);

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#shoot(de.outstare.fortbattleplayer.model.Area)
     */
    public void shoot(final int power);

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#hit(int)
     */
    public boolean hit(final int damageAmount);

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#aimAt(de.outstare.fortbattleplayer.model.Combatant)
     */
    public void aimAt(final Combatant target);

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#setDestination(de.outstare.fortbattleplayer.model.Area)
     */
    public void setDestination(final Area destination);

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#addObserver(de.outstare.fortbattleplayer.model.CombatantObserver)
     */
    public void addObserver(final CombatantObserver observer);

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#removeObserver(de.outstare.fortbattleplayer.model.CombatantObserver)
     */
    public void removeObserver(final CombatantObserver observer);

    /**
     * notify all observers about the current position
     */
    protected void fireHasMoved();

    /**
     * notify all observers about the current position
     *
     * @param swappedWith
     */
    protected void fireHasSwapped(final Combatant swappedWith);

    /**
     * notify all observers about the current position
     */
    protected void fireNewTarget();

    /**
     * notify all observers that I shot at somebody.
     */
    protected void fireAimingAt();

    /**
     * notify all observers about a loss of health
     *
     * @param damage
     *            amount of healthpoints lost
     * @param healthBefore
     *            original health amount before it was decreased by
     *            <code>damage</code>
     */
    protected void fireWasHit(final int damage, final int healthBefore);

    /**
     * notify all observers about our dead
     */
    protected void fireIsDead();

    /**
     * notify all observers about our resurrection
     */
    protected void fireIsAlive();

    /**
     * notify all observers about changed online state
     *
     * @param changed
     *            if the value was changed or only set
     */
    protected void fireOnlineChange(final boolean changed);

    /**
     * notify all observers that i have done a critical shot
     *
     * @param damage
     *            the actual caused damage
     */
    protected void fireCriticalShot(final int damage);

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#_getLocation()
     */
    public Area _getLocation();

    /**
     * @return the side
     */
    public CombatantSide getSide();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#_health()
     */
    public int _health();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#_maxHealth()
     */
    public int _maxHealth();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#_setState(de.outstare.fortbattleplayer.model.CombatantState)
     */
    public void _setState(final CombatantState newState);

    /**
     * @param position
     */
    private void moveAway(final Area position);

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#_state()
     */
    public CombatantState _state();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#isOnline()
     */
    public boolean isOnline();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#setOnline()
     */
    public void setOnline(final boolean isOnline);

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#getCharacterClass()
     */
    public CharacterClass getCharacterClass();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#getSectorBonus()
     */
    public SectorBonus getSectorBonus();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#getCity()
     */
    public String getCity();

    /**
     * @see de.outstare.fortbattleplayer.model.Combatant#usesBayonet()
     */
    public boolean usesBayonet();

    /**
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode();

    /**
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(final Object obj);
}
","// SimpleCombatant_1Test.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains ten unit test cases for the {@link SimpleCombatant#_getCurrentLP()} method.
*/
class SimpleCombatant_1Test {","// SimpleCombatant_1Test.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains ten unit test cases for the {@link SimpleCombatant#_getCurrentLP()} method.
*/
class SimpleCombatant_1Test {

		private static final transient Logger LOG = Logger.getLogger(SimpleCombatant_1Test.class.getName());
		
		private final int maxHealth;
		
		private final CombatantSide side;
		
		private final String name;
		
		private final String city;
		
		private final Set<CombatantObserver> observers = new HashSet<CombatantObserver>();
		
		private final Object stateChangeLock = new Object();
		
		private final CharacterClass charClass;
		
		private final Weapon weapon;
		
		private CombatantState state;
		
		private Combatant aimingAt = null;
		
		/**
		 * Create a new {@link Combatant} at the given position and the given amount
		 * of health.
		 *
		 * @param side
		 *            not null
		 * @param initialState
		 *            not null
		 * @param maxHealth
		 *            > 0
		 * @param name
		 *            the name of the player of this Combatant
		 * @param characterClass
		 *            maybe null for old logs
		 * @param weapon
		 *            not null
		 * @param city
		 *            not null
		 */
		public SimpleCombatant(final CombatantSide side, final CombatantState initialState, final int maxHealth, final String name, final CharacterClass characterClass, final Weapon weapon, final String city) {
		}
		
		/**
		 * @see java.lang.Object#toString()
		 */
		@Override
		public String toString();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#getName()
		 */
		public String getName();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#getWeapon()
		 */
		public Weapon getWeapon();
		
		/**
		 * internal method for graphical display
		 *
		 * @return the maximal health
		 */
		public int _getMaxLP();
		
		/**
		 * internal method for graphical display
		 *
		 * @return the current health
		 */
		public int _getCurrentLP();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#move(de.outstare.fortbattleplayer.model.Area)
		 */
		public void move(final Area target);
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#shoot(de.outstare.fortbattleplayer.model.Area)
		 */
		public void shoot(final int power);
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#hit(int)
		 */
		public boolean hit(final int damageAmount);
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#aimAt(de.outstare.fortbattleplayer.model.Combatant)
		 */
		public void aimAt(final Combatant target);
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#setDestination(de.outstare.fortbattleplayer.model.Area)
		 */
		public void setDestination(final Area destination);
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#addObserver(de.outstare.fortbattleplayer.model.CombatantObserver)
		 */
		public void addObserver(final CombatantObserver observer);
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#removeObserver(de.outstare.fortbattleplayer.model.CombatantObserver)
		 */
		public void removeObserver(final CombatantObserver observer);
		
		/**
		 * notify all observers about the current position
		 */
		protected void fireHasMoved();
		
		/**
		 * notify all observers about the current position
		 *
		 * @param swappedWith
		 */
		protected void fireHasSwapped(final Combatant swappedWith);
		
		/**
		 * notify all observers about the current position
		 */
		protected void fireNewTarget();
		
		/**
		 * notify all observers that I shot at somebody.
		 */
		protected void fireAimingAt();
		
		/**
		 * notify all observers about a loss of health
		 *
		 * @param damage
		 *            amount of healthpoints lost
		 * @param healthBefore
		 *            original health amount before it was decreased by
		 *            <code>damage</code>
		 */
		protected void fireWasHit(final int damage, final int healthBefore);
		
		/**
		 * notify all observers about our dead
		 */
		protected void fireIsDead();
		
		/**
		 * notify all observers about our resurrection
		 */
		protected void fireIsAlive();
		
		/**
		 * notify all observers about changed online state
		 *
		 * @param changed
		 *            if the value was changed or only set
		 */
		protected void fireOnlineChange(final boolean changed);
		
		/**
		 * notify all observers that i have done a critical shot
		 *
		 * @param damage
		 *            the actual caused damage
		 */
		protected void fireCriticalShot(final int damage);
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#_getLocation()
		 */
		public Area _getLocation();
		
		/**
		 * @return the side
		 */
		public CombatantSide getSide();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#_health()
		 */
		public int _health();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#_maxHealth()
		 */
		public int _maxHealth();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#_setState(de.outstare.fortbattleplayer.model.CombatantState)
		 */
		public void _setState(final CombatantState newState);
		
		/**
		 * @param position
		 */
		private void moveAway(final Area position);
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#_state()
		 */
		public CombatantState _state();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#isOnline()
		 */
		public boolean isOnline();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#setOnline()
		 */
		public void setOnline(final boolean isOnline);
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#getCharacterClass()
		 */
		public CharacterClass getCharacterClass();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#getSectorBonus()
		 */
		public SectorBonus getSectorBonus();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#getCity()
		 */
		public String getCity();
		
		/**
		 * @see de.outstare.fortbattleplayer.model.Combatant#usesBayonet()"
cmpl-6x8Sc5ld8k2PSOkBnAvHSAKrRECyv,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/Battleplan.java,61.803224086761475,length,"// Battleplan.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;

/**
 * A plan which determines each step of the battle. A battle is divided into
 * {@link Round}s.
 *
 * @author daniel
 */
public class Battleplan {

    private static final transient Logger LOG = Logger.getLogger(Battleplan.class.getName());

    private final SortedMap<Integer, Round> rounds = new TreeMap<Integer, Round>();

    /**
     * Create a new plan with the given rounds
     *
     * @param roundsOfPlan
     */
    public Battleplan(final Collection<Round> roundsOfPlan) {
    }

    /**
     * @param roundsOfPlan
     */
    private void mapRoundsToNumbers(final Collection<Round> roundsOfPlan);

    /**
     * @return the number of rounds this plan has
     */
    public int numberOfRounds();

    /**
     * executes the given {@link Round} of this plan
     *
     * @param roundNo
     *            0 <= roundNo <= numberOfRounds()
     * @param config
     */
    public void executeRound(final int roundNo, final PlayerConfiguration config);

    /**
     * @param roundNo
     * @return
     * @throws IllegalArgumentException
     */
    private Round getRound(final int roundNo) throws IllegalArgumentException;

    /**
     * @param no
     * @return <code>true</code> if this plan contains a round with the given
     *         number
     */
    public boolean hasRoundNo(final int no);

    /**
     * @param roundNo
     */
    public void resetToRound(final int roundNo);

    /**
     * @param roundNo
     * @return <code>true</code> if more rounds follow after the given round
     *         number.
     */
    public boolean hasMoreRounds(final int roundNo);

    /**
     * @require hasMoreRounds(currentRoundNo)
     * @param currentRoundNo
     * @return the number of the following round
     */
    public int getNextRound(final int currentRoundNo);

    /**
     * @param currentRoundNo
     * @return all rounds that follow after the given round number
     */
    private SortedMap<Integer, Round> getRemainingRounds(final int currentRoundNo);
}
","// BattleplanTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplan}.
* It contains ten unit test cases for the {@link Battleplan#numberOfRounds()} method.
*/
class BattleplanTest {","// BattleplanTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplan}.
* It contains ten unit test cases for the {@link Battleplan#numberOfRounds()} method.
*/
class BattleplanTest {
private static final transient Logger LOG = Logger.getLogger(BattleplanTest.class.getName());

		@Test
		void testNumberOfRounds() {
				final SortedMap<Integer, Round> rounds = new TreeMap<Integer, Round>();
				final Battleplan plan = new Battleplan(rounds.values());
				assertEquals(0, plan.numberOfRounds());
				rounds.put(1, new Round(1));
				assertEquals(1, plan.numberOfRounds());
				rounds.put(2, new Round(2));
				assertEquals(2, plan.numberOfRounds());
				rounds.put(3, new Round(3));
				assertEquals(3, plan.numberOfRounds());
				rounds.put(4, new Round(4));
				assertEquals(4, plan.numberOfRounds());
				rounds.put(5, new Round(5));
				assertEquals(5, plan.numberOfRounds());
				rounds.put(6, new Round(6));
				assertEquals(6, plan.numberOfRounds());
				rounds.put(7, new Round(7));
				assertEquals(7, plan.numberOfRounds());
				rounds.put(8, new Round(8));
				assertEquals(8, plan.numberOfRounds());
				rounds.put(9, new Round(9));
				assertEquals(9, plan.numberOfRounds());
				rounds.put(10, new Round(10));
				assertEquals(10, plan.numberOfRounds());
		}
}

// Round.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.logging.Logger;

/**
 * A round of a battle.
 *
 * @author daniel
 */
public class Round {
    private static final transient Logger LOG = Logger.getLogger(Round.class.getName());

    private final int number;

    /**
     * Create a new round with the given number.
     *
     * @param number
     */
    public Round(final int number) {
    }

    /**
     * @return the number of this round
     */
    public int getNumber();

    /**
     * @return the number of actions this round has
     */
    public int numberOfActions();

    /**
     * @param actionNo
     * @return the action with the given number
     */
    public Action getAction(final int actionNo);

    /**
     * @param actionNo
     * @return <code>true</code> if this round contains an action with the given
     *         number
     */
    public boolean hasActionNo(final int actionNo);

    /**
     * @param actionNo
     * @return <code>true</code> if more actions follow after the given action
     *         number.
     */
    public boolean hasMoreActions(final int actionNo);

    /**
     * @param currentActionNo
     * @return the number of the following action
     */
    public int getNextAction(final int currentActionNo);

    /**
     * @param currentActionNo
     * @return all actions that follow after the given action number
     */
    private Collection<Action> getRemainingActions(final int currentActionNo);
}

// Action.java
package de.outstare.fortbattleplayer.player;

import java.util.logging.Logger;

/**
 * An action of a round.
 *
 * @author daniel
 */
public class Action {
    private static final transient Logger LOG = Logger.getLogger(Action.class.getName());

    private final int number;

    /**
     * Create a new action with the given number.
     *
     * @param number
     */
    public Action(final int number) {
    }

    /**
     * @return the number of this action
     */
    public int getNumber();

    /**
     * @return the number of steps this action has
     */
    public int numberOfSteps();

    /**
     * @param stepNo
     * @return the step with the given number
     */
    public Step getStep(final int stepNo);

    /**
     * @param stepNo
     * @return <code>true</code> if this action contains a step with the given
     *         number
     */
    public boolean hasStepNo(final int stepNo);

    /**
     * @param stepNo
     * @return <code>true</code> if more steps follow after the given step
     *         number.
     */
    public boolean hasMoreSteps(final int stepNo);

    /**
     * @param currentStepNo
     * @return the number of the following step
     */
    public int getNextStep(final int currentStepNo);

    /**
     * @param currentStepNo
     * @return all steps that follow after the given step number
     */
    private Collection<Step> getRemainingSteps(final int currentStepNo);
}

// Step.java
package de.outstare.fortbattleplayer.player;

import java.util.logging.Logger;

/**
 * A step of an action.
 *
 * @author daniel
 */
public class Step {
    private static final transient Logger LOG = Logger.getLogger(Step.class.getName());

    private final int number;

    /**
     * Create a new step with the given number.
     *
     * @param number
     */
    public Step(final int number) {
    }

    /**
     * @return the number of this step
     */
    public int getNumber();

    /**
     * @return the number of commands this step has
     */
    public int numberOfCommands();

    /**
     * @param commandNo
     * @return the command with the given number
     */
    public Command getCommand(final int commandNo);

    /**
     * @param commandNo
     * @return <code>true</code> if this step contains a command with the given
     *         number
     */
    public boolean hasCommandNo(final int commandNo);

    /**
     * @param commandNo
     * @return <code>true</code> if more commands follow after the given command
     *         number.
     */
    public boolean hasMoreCommands(final int commandNo);

    /**
     * @param currentCommandNo
     * @return the number of the following command
     */
    public int getNextCommand(final int currentCommandNo);

    /**
     * @param currentCommandNo
     * @return all commands that follow after the given command number
     */
    private Collection<Command> getRemainingCommands(final int currentCommandNo);
}

// Command.java
package de.outstare.fortbattleplayer.player;

import java.util.logging.Logger;

/**
 * A command of a step.
 *
 * @author daniel
 */
public class Command {
    private static final transient Logger LOG = Logger.getLogger(Command.class.getName());

    private final int number;

    /**
     * Create a new command with the given number.
     *
     * @param number
     */
    public Command(final int number) {
    }

    /**
     * @return the number of this command
     */
    public int getNumber();

    /**
     * @return the number of subcommands this command has
     */
    public int numberOfSubcommands();

    /**
     * @param subcommandNo
     * @return the subcommand with the given number
     */
    public Subcommand getSubcommand(final int subcommandNo);

    /**
     * @param subcommandNo
     * @return <code>true</code> if this command contains a subcommand with the
     *         given number
     */
    public boolean hasSubcommandNo(final int subcommandNo);

    /**
     * @param subcommandNo
     * @return <code>true</code> if more subcomm"
cmpl-6x8TcFFlUhcIXHvUcc3No8n2Ljiu5,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/Battleplayer.java,93.31520009040833,length,"// Battleplayer.java
package de.outstare.fortbattleplayer.player;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Combatant;

/**
 * A {@link Battleplayer} controls the battle. It is a puppet player controlling
 * the behavior of the {@link Combatant}s.
 *
 * @author daniel
 */
public class Battleplayer implements Player {

    private static final transient Logger LOG = Logger.getLogger(Battleplayer.class.getName());

    private final Battleplan plan;

    private final Set<RoundListener> listeners = new HashSet<RoundListener>();

    private boolean isPaused = false;

    /**
     * round numbers may not be sequential (this variable is also used for
     * locking during a round)
     */
    private int currentRoundNo;

    private volatile boolean isPlaying = false;

    private volatile boolean shouldStop = false;

    /**
     * controls some aspects of the behavior of the player
     */
    public final PlayerConfiguration config;

    /**
     * @param plan
     * @param config
     */
    public Battleplayer(final Battleplan plan, final PlayerConfiguration config) {
    }

    /**
     * @param plan
     */
    public Battleplayer(final Battleplan plan) {
    }

    /**
     * let the battle begin! The whole battle is done by executing the
     * {@link Battleplan}.
     */
    public void play();

    /**
     * blocks until current round has ended
     *
     * @see de.outstare.fortbattleplayer.player.Player#gotoRound(de.outstare.fortbattleplayer.player.Round)
     */
    public void gotoRound(final int i);

    /**
     * executes the round of the internal state
     */
    private void playCurrentRound(final int roundNo);

    /**
     * wait the time given in {@link PlayerConfiguration#ROUND_DELAY}
     */
    private void delayNextRound();

    /**
     * tell all listeners that a new round will start now
     *
     * @param roundNo
     */
    private void fireNewRoundEvent(final int roundNo);

    /**
     * @param listener
     */
    public void addRoundListener(final RoundListener listener);

    /**
     * @see de.outstare.fortbattleplayer.player.Player#stop()
     */
    public void stop();

    /**
     * A RoundListener waits for Round events.
     *
     * @author daniel
     */
    public static interface RoundListener {

        /**
         * a new round will begin immediatly
         *
         * @param roundNo
         */
        void nextRound(int roundNo);
    }

    /**
     * @return the number of rounds this player shows
     */
    public int numberOfRounds();

    /**
     * toggles pause which holds playing rounds. if this player is currently
     * paused can be checked with isPaused()
     */
    public void pause();

    /**
     * @return <code>true</code> if this player is playing and is currently hold
     */
    public boolean isPaused();

    /**
     * @see de.outstare.fortbattleplayer.player.Player#getRoundNumbers()
     */
    public List<Integer> getRoundNumbers();
}
","// BattleplayerTest.java
package de.outstare.fortbattleplayer.player;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Combatant;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplayer}.
* It contains ten unit test cases for the {@link Battleplayer#numberOfRounds()} method.
*/
class BattleplayerTest {","// BattleplayerTest.java
package de.outstare.fortbattleplayer.player;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Combatant;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplayer}.
* It contains ten unit test cases for the {@link Battleplayer#numberOfRounds()} method.
*/
class BattleplayerTest {

		private static final transient Logger LOG = Logger.getLogger(BattleplayerTest.class.getName());
		
		private final Battleplan plan;
		
		private final Set<RoundListener> listeners = new HashSet<RoundListener>();
		
		private boolean isPaused = false;
		
		/**
		 * round numbers may not be sequential (this variable is also used for
		 * locking during a round)
		 */
		private int currentRoundNo;
		
		private volatile boolean isPlaying = false;
		
		private volatile boolean shouldStop = false;
		
		/**
		 * controls some aspects of the behavior of the player
		 */
		public final PlayerConfiguration config;
		
		/**
		 * @param plan
		 * @param config
		 */
		public Battleplayer(final Battleplan plan, final PlayerConfiguration config) {
		}
		
		/**
		 * @param plan
		 */
		public Battleplayer(final Battleplan plan) {
		}
		
		/**
		 * let the battle begin! The whole battle is done by executing the
		 * {@link Battleplan}.
		 */
		public void play();
		
		/**
		 * blocks until current round has ended
		 *
		 * @see de.outstare.fortbattleplayer.player.Player#gotoRound(de.outstare.fortbattleplayer.player.Round)
		 */
		public void gotoRound(final int i);
		
		/**
		 * executes the round of the internal state
		 */
		private void playCurrentRound(final int roundNo);
		
		/**
		 * wait the time given in {@link PlayerConfiguration#ROUND_DELAY}
		 */
		private void delayNextRound();
		
		/**
		 * tell all listeners that a new round will start now
		 *
		 * @param roundNo
		 */
		private void fireNewRoundEvent(final int roundNo);
		
		/**
		 * @param listener
		 */
		public void addRoundListener(final RoundListener listener);
		
		/**
		 * @see de.outstare.fortbattleplayer.player.Player#stop()
		 */
		public void stop();
		
		/**
		 * A RoundListener waits for Round events.
		 *
		 * @author daniel
		 */
		public static interface RoundListener {
		
				/**
				 * a new round will begin immediatly
				 *
				 * @param roundNo
				 */
				void nextRound(int roundNo);
		}
		
		/**
		 * @return the number of rounds this player shows
		 */
		public int numberOfRounds();
		
		/**
		 * toggles pause which holds playing rounds. if this player is currently
		 * paused can be checked with isPaused()
		 */
		public void pause();
		
		/**
		 * @return <code>true</code> if this player is playing and is currently hold
		 */
		public boolean isPaused();
		
		/**
		 * @see de.outstare.fortbattleplayer.player.Player#getRoundNumbers()
		 */
		public List<Integer> getRoundNumbers();
		
		/**
		 * Test case for {@link Battleplayer#numberOfRounds()}
		 *
		 * @see Battleplayer#numberOfRounds()
		 */
		@Test
		public void testNumberOfRounds() {
				// given
				final Battleplayer player = new Battleplayer(null);
				
				// when
				final int result = player.numberOfRounds();
				
				// then
				assertEquals(0, result);
		}
		
		/**
		 * Test case for {@link Battleplayer#numberOfRounds()}
		 *
		 * @see Battleplayer#numberOfRounds()
		 */
		@Test
		public void testNumberOfRounds2() {
				// given
				final Battleplayer player = new Battleplayer(null);
				
				// when
				final int result = player.numberOfRounds();
				
				// then
				assertEquals(0, result);
		}
		
		/**
		 * Test case for {@link Battleplayer#numberOfRounds()}
		 *
		 * @see Battleplayer#numberOfRounds()
		 */
		@Test
		public void testNumberOfRounds3() {
				// given
				final Battleplayer player = new Battleplayer(null);
				
				// when
				final int result = player.numberOfRounds();
				
				// then
				assertEquals(0, result);
		}
		
		/**
		 * Test case for {@link Battleplayer#numberOfRounds()}
		 *
		 * @see Battleplayer#numberOfRounds()
		 */
		@Test
		public void testNumberOfRounds4() {
				// given
				final Battleplayer player = new Battleplayer(null);
				
				// when
				final int result = player.numberOfRounds();
				
				// then
				assertEquals(0, result);
		}
		
		/**
		 * Test case for {@link Battleplayer#numberOfRounds()}
		 *
		 * @see Battleplayer#numberOfRounds()
		 */
		@Test
		public void testNumberOfRounds5() {
				// given
				final Battleplayer player = new Battleplayer(null);
				
				// when
				final int result = player.numberOfRounds();
				
				// then
				assertEquals(0, result);
		}
		
		/**
		 * Test case for {@link Battleplayer#numberOfRounds()}
		 *
		 * @see Battleplayer#numberOfRounds()
		 */
		@Test
		public void testNumberOfRounds6() {
				// given
				final Battleplayer player = new Battleplayer(null);
				
				// when
				final int result = player.numberOfRounds();
				
				// then
				assertEquals(0, result);
		}
		
		/**
		 * Test case for {@link Battleplayer#numberOfRounds()}
		 *
		 * @see Battleplayer#numberOfRounds()
		 */
		@Test
		public void testNumberOfRounds7() {
				// given
				final Battleplayer player = new Battleplayer(null);
				
				// when
				final int result = player.numberOfRounds();
				
				// then
				assertEquals(0, result);
		}
		
		/**
		 * Test case for {@link Battleplayer#numberOfRounds()}
		 *
		 * @see Battleplayer#numberOfRounds()
		 */
		@Test
		public void testNumberOfRounds8() {
				// given
				final Battleplayer player = new Battleplayer(null);
				
				// when
				final int result = player.numberOfR"
cmpl-6x8V8anGBmleCSpYhvZGItt8sg6Js,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration_0Test.java,85.98112416267395,length,"// PlayerConfiguration.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * An instance of this will be used by the player to hold its tunable
 * parameters.
 *
 * @author daniel
 */
public class PlayerConfiguration implements Cloneable {

    /**
     * a configuration which skips animation (used for purposes where the user
     * should not see whats going on)
     */
    public static final PlayerConfiguration NO_DELAY = new PlayerConfiguration();

    static {
    }

    /**
     * this is used to control who currently does something with the player
     */
    private final Lock playLock = new ReentrantLock();

    private final Set<PlayerConfigurationListener> listeners = new HashSet<PlayerConfigurationListener>();

    /**
     * current state of the player
     */
    private PlayerState state = PlayerState.STOP;

    /**
     * pause between two rounds in milliseconds
     */
    public volatile int ROUND_DELAY = Configuration.ROUND_DELAY;

    /**
     * pause between two players in a round in milliseconds
     */
    public volatile int PLAYER_DELAY = Configuration.PLAYER_DELAY;

    /**
     * pause between two actions in milliseconds
     */
    public volatile int ACTION_DELAY = Configuration.ACTION_DELAY;

    /**
     * draw a line to the point, where the player wants to go
     */
    private volatile boolean SHOW_MOVETARGETS = Configuration.SHOW_MOVETARGETS;

    /**
     * draw a line to the enemy ath wich the player shoots
     */
    private volatile boolean SHOW_SHOOTLINE = Configuration.SHOW_SHOOTLINE;

    /**
     * @param other
     */
    public void setTo(final PlayerConfiguration other);

    /**
     * @return a copy of this object
     * @throws CloneNotSupportedException
     */
    public PlayerConfiguration copy() throws CloneNotSupportedException;

    /**
     * should only be called by {@link Battleplayer}!
     *
     * @param newState
     */
    synchronized void setState(final PlayerState newState);

    /**
     * @return true if the player should be playing
     */
    public synchronized boolean isPlaying();

    /**
     * @return true if the player is hold
     */
    public synchronized boolean isPaused();

    /**
     * @return true if the player is stopped
     */
    public synchronized boolean isStopped();

    /**
     * exclusive use of the player
     */
    void lock();

    /**
     * release the player
     */
    void unlock();

    /**
     * @return <code>true</code> if lines to movement targets should be
     *         displayed
     */
    public boolean showMoveTargets();

    /**
     * @param showMovetargets
     */
    public void setShowMoveTargets(final boolean showMovetargets);

    /**
     * @return <code>true</code> if shooting lines should be displayed
     */
    public boolean showShootline();

    /**
     * @param showShootline
     */
    public void setShowShootline(final boolean showShootline);

    /**
     * Adds a listener which will be notified about changes.
     *
     * @param listener
     */
    public void addListener(final PlayerConfigurationListener listener);

    /**
     * Removes the listener from the registered ones.
     *
     * @param listener
     */
    public void removeListener(final PlayerConfigurationListener listener);
}
","// PlayerConfiguration_0Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#copy()} method.
*/
class PlayerConfiguration_0Test {","// PlayerConfiguration_0Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#copy()} method.
*/
class PlayerConfiguration_0Test {

		/**
		* Test case for {@link PlayerConfiguration#copy()}
		*
		* @throws CloneNotSupportedException
		*/
		@Test
		void testCopy() throws CloneNotSupportedException {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				final PlayerConfiguration copy = config.copy();
				// then
				assertNotSame(config, copy);
				assertEquals(config.ROUND_DELAY, copy.ROUND_DELAY);
				assertEquals(config.PLAYER_DELAY, copy.PLAYER_DELAY);
				assertEquals(config.ACTION_DELAY, copy.ACTION_DELAY);
				assertEquals(config.SHOW_MOVETARGETS, copy.SHOW_MOVETARGETS);
				assertEquals(config.SHOW_SHOOTLINE, copy.SHOW_SHOOTLINE);
				assertEquals(config.state, copy.state);
				assertNotSame(config.playLock, copy.playLock);
				assertNotSame(config.listeners, copy.listeners);
		}
		
		/**
		* Test case for {@link PlayerConfiguration#copy()}
		*
		* @throws CloneNotSupportedException
		*/
		@Test
		void testCopy2() throws CloneNotSupportedException {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				config.ROUND_DELAY = 1;
				config.PLAYER_DELAY = 2;
				config.ACTION_DELAY = 3;
				config.SHOW_MOVETARGETS = true;
				config.SHOW_SHOOTLINE = true;
				config.state = PlayerState.PLAY;
				config.playLock = new ReentrantLock();
				config.listeners.add(new PlayerConfigurationListener() {
						@Override
						public void onConfigurationChanged(final PlayerConfiguration config) {
						}
				});
				// when
				final PlayerConfiguration copy = config.copy();
				// then
				assertNotSame(config, copy);
				assertEquals(config.ROUND_DELAY, copy.ROUND_DELAY);
				assertEquals(config.PLAYER_DELAY, copy.PLAYER_DELAY);
				assertEquals(config.ACTION_DELAY, copy.ACTION_DELAY);
				assertEquals(config.SHOW_MOVETARGETS, copy.SHOW_MOVETARGETS);
				assertEquals(config.SHOW_SHOOTLINE, copy.SHOW_SHOOTLINE);
				assertEquals(config.state, copy.state);
				assertNotSame(config.playLock, copy.playLock);
				assertNotSame(config.listeners, copy.listeners);
		}
		
		/**
		* Test case for {@link PlayerConfiguration#copy()}
		*
		* @throws CloneNotSupportedException
		*/
		@Test
		void testCopy3() throws CloneNotSupportedException {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				config.ROUND_DELAY = 1;
				config.PLAYER_DELAY = 2;
				config.ACTION_DELAY = 3;
				config.SHOW_MOVETARGETS = true;
				config.SHOW_SHOOTLINE = true;
				config.state = PlayerState.PLAY;
				config.playLock = new ReentrantLock();
				config.listeners.add(new PlayerConfigurationListener() {
						@Override
						public void onConfigurationChanged(final PlayerConfiguration config) {
						}
				});
				// when
				final PlayerConfiguration copy = config.copy();
				// then
				assertNotSame(config, copy);
				assertEquals(config.ROUND_DELAY, copy.ROUND_DELAY);
				assertEquals(config.PLAYER_DELAY, copy.PLAYER_DELAY);
				assertEquals(config.ACTION_DELAY, copy.ACTION_DELAY);
				assertEquals(config.SHOW_MOVETARGETS, copy.SHOW_MOVETARGETS);
				assertEquals(config.SHOW_SHOOTLINE, copy.SHOW_SHOOTLINE);
				assertEquals(config.state, copy.state);
				assertNotSame(config.playLock, copy.playLock);
				assertNotSame(config.listeners, copy.listeners);
		}
		
		/**
		* Test case for {@link PlayerConfiguration#copy()}
		*
		* @throws CloneNotSupportedException
		*/
		@Test
		void testCopy4() throws CloneNotSupportedException {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				config.ROUND_DELAY = 1;
				config.PLAYER_DELAY = 2;
				config.ACTION_DELAY = 3;
				config.SHOW_MOVETARGETS = true;
				config.SHOW_SHOOTLINE = true;
				config.state = PlayerState.PLAY;
				config.playLock = new ReentrantLock();
				config.listeners.add(new PlayerConfigurationListener() {
						@Override
						public void onConfigurationChanged(final PlayerConfiguration config) {
						}
				});
				// when
				final PlayerConfiguration copy = config.copy();
				// then
				assertNotSame(config, copy);
				assertEquals(config.ROUND_DELAY, copy.ROUND_DELAY);
				assertEquals(config.PLAYER_DELAY, copy.PLAYER_DELAY);
				assertEquals(config.ACTION_DELAY, copy.ACTION_DELAY);
				assertEquals(config.SHOW_MOVETARGETS, copy.SHOW_MOVETARGETS);
				assertEquals(config.SHOW_SHOOTLINE, copy.SHOW_SHOOTLINE);
				assertEquals(config.state, copy.state);
				assertNotSame(config.playLock, copy.playLock);
				assertNotSame(config.listeners, copy.listeners);
		}
		
		/**
		* Test case for {@link PlayerConfiguration#copy()}
		*
		* @throws CloneNotSupportedException
		*/
		@Test
		void testCopy5() throws CloneNotSupportedException {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				config.ROUND_DELAY = 1;
				config.PLAYER_DELAY = 2;
				config.ACTION_DELAY = 3;
				config.SHOW_MOVETARGETS = true;
				config.SHOW_SHOOTLINE = true;
				config.state = PlayerState.PLAY;
				config.playLock = new ReentrantLock();
				config.listeners."
cmpl-6x8WVa0X1EUW0ZcWCjqONCfffHJSW,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration_1Test.java,77.4213879108429,length,"// PlayerConfiguration.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * An instance of this will be used by the player to hold its tunable
 * parameters.
 *
 * @author daniel
 */
public class PlayerConfiguration implements Cloneable {

    /**
     * a configuration which skips animation (used for purposes where the user
     * should not see whats going on)
     */
    public static final PlayerConfiguration NO_DELAY = new PlayerConfiguration();

    static {
    }

    /**
     * this is used to control who currently does something with the player
     */
    private final Lock playLock = new ReentrantLock();

    private final Set<PlayerConfigurationListener> listeners = new HashSet<PlayerConfigurationListener>();

    /**
     * current state of the player
     */
    private PlayerState state = PlayerState.STOP;

    /**
     * pause between two rounds in milliseconds
     */
    public volatile int ROUND_DELAY = Configuration.ROUND_DELAY;

    /**
     * pause between two players in a round in milliseconds
     */
    public volatile int PLAYER_DELAY = Configuration.PLAYER_DELAY;

    /**
     * pause between two actions in milliseconds
     */
    public volatile int ACTION_DELAY = Configuration.ACTION_DELAY;

    /**
     * draw a line to the point, where the player wants to go
     */
    private volatile boolean SHOW_MOVETARGETS = Configuration.SHOW_MOVETARGETS;

    /**
     * draw a line to the enemy ath wich the player shoots
     */
    private volatile boolean SHOW_SHOOTLINE = Configuration.SHOW_SHOOTLINE;

    /**
     * @param other
     */
    public void setTo(final PlayerConfiguration other);

    /**
     * @return a copy of this object
     * @throws CloneNotSupportedException
     */
    public PlayerConfiguration copy() throws CloneNotSupportedException;

    /**
     * should only be called by {@link Battleplayer}!
     *
     * @param newState
     */
    synchronized void setState(final PlayerState newState);

    /**
     * @return true if the player should be playing
     */
    public synchronized boolean isPlaying();

    /**
     * @return true if the player is hold
     */
    public synchronized boolean isPaused();

    /**
     * @return true if the player is stopped
     */
    public synchronized boolean isStopped();

    /**
     * exclusive use of the player
     */
    void lock();

    /**
     * release the player
     */
    void unlock();

    /**
     * @return <code>true</code> if lines to movement targets should be
     *         displayed
     */
    public boolean showMoveTargets();

    /**
     * @param showMovetargets
     */
    public void setShowMoveTargets(final boolean showMovetargets);

    /**
     * @return <code>true</code> if shooting lines should be displayed
     */
    public boolean showShootline();

    /**
     * @param showShootline
     */
    public void setShowShootline(final boolean showShootline);

    /**
     * Adds a listener which will be notified about changes.
     *
     * @param listener
     */
    public void addListener(final PlayerConfigurationListener listener);

    /**
     * Removes the listener from the registered ones.
     *
     * @param listener
     */
    public void removeListener(final PlayerConfigurationListener listener);
}
","// PlayerConfiguration_1Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#showMoveTargets()} method.
*/
class PlayerConfiguration_1Test {","// PlayerConfiguration_1Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#showMoveTargets()} method.
*/
class PlayerConfiguration_1Test {

		/**
		* Test case for {@link PlayerConfiguration#showMoveTargets()}
		*
		* @throws Exception
		*/
		@Test
		void testShowMoveTargets() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				final boolean result = config.showMoveTargets();
				// then
				assertEquals(Configuration.SHOW_MOVETARGETS, result);
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showMoveTargets()}
		*
		* @throws Exception
		*/
		@Test
		void testShowMoveTargets_1() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				final boolean result = config.showMoveTargets();
				// then
				assertEquals(Configuration.SHOW_MOVETARGETS, result);
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showMoveTargets()}
		*
		* @throws Exception
		*/
		@Test
		void testShowMoveTargets_2() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				final boolean result = config.showMoveTargets();
				// then
				assertEquals(Configuration.SHOW_MOVETARGETS, result);
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showMoveTargets()}
		*
		* @throws Exception
		*/
		@Test
		void testShowMoveTargets_3() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				final boolean result = config.showMoveTargets();
				// then
				assertEquals(Configuration.SHOW_MOVETARGETS, result);
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showMoveTargets()}
		*
		* @throws Exception
		*/
		@Test
		void testShowMoveTargets_4() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				final boolean result = config.showMoveTargets();
				// then
				assertEquals(Configuration.SHOW_MOVETARGETS, result);
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showMoveTargets()}
		*
		* @throws Exception
		*/
		@Test
		void testShowMoveTargets_5() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				final boolean result = config.showMoveTargets();
				// then
				assertEquals(Configuration.SHOW_MOVETARGETS, result);
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showMoveTargets()}
		*
		* @throws Exception
		*/
		@Test
		void testShowMoveTargets_6() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				final boolean result = config.showMoveTargets();
				// then
				assertEquals(Configuration.SHOW_MOVETARGETS, result);
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showMoveTargets()}
		*
		* @throws Exception
		*/
		@Test
		void testShowMoveTargets_7() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				final boolean result = config.showMoveTargets();
				// then
				assertEquals(Configuration.SHOW_MOVETARGETS, result);
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showMoveTargets()}
		*
		* @throws Exception
		*/
		@Test
		void testShowMoveTargets_8() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				final boolean result = config.showMoveTargets();
				// then
				assertEquals(Configuration.SHOW_MOVETARGETS, result);
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showMoveTargets()}
		*
		* @throws Exception
		*/
		@Test
		void testShowMoveTargets_9() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				final boolean result = config.showMoveTargets();
				// then
				assertEquals(Configuration.SHOW_MOVETARGETS, result);
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showMoveTargets()}
		*
		* @throws Exception
		*/
		@Test
		void testShowMoveTargets_10() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				final boolean result = config.showMoveTargets();
				// then
				assertEquals(Configuration.SHOW_MOVETARGETS, result);
		}
}

// PlayerConfiguration_2Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#showShootline()} method.
*/
class PlayerConfiguration_2Test {
		
		/**
		* Test case for {@link PlayerConfiguration#showShootline()}
		*
		* @throws Exception
		*/
		@Test
		void testShowShootline() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				final boolean result = config.showShootline();
				// then
				assertEquals(Configuration.SHOW_SHOOTLINE, result);
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showShootline()}
		*
		* @throws Exception
		*/
		@Test
		void testShowShootline_1() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				final boolean result = config.showShootline();
				// then
				assertEquals(Configuration.SHOW_SHOOTLINE, result);
		}
	"
cmpl-6x8XlcFEG2xkINggoDGFbwWb4abJf,/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration_2Test.java,90.5323097705841,length,"// PlayerConfiguration.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * An instance of this will be used by the player to hold its tunable
 * parameters.
 *
 * @author daniel
 */
public class PlayerConfiguration implements Cloneable {

    /**
     * a configuration which skips animation (used for purposes where the user
     * should not see whats going on)
     */
    public static final PlayerConfiguration NO_DELAY = new PlayerConfiguration();

    static {
    }

    /**
     * this is used to control who currently does something with the player
     */
    private final Lock playLock = new ReentrantLock();

    private final Set<PlayerConfigurationListener> listeners = new HashSet<PlayerConfigurationListener>();

    /**
     * current state of the player
     */
    private PlayerState state = PlayerState.STOP;

    /**
     * pause between two rounds in milliseconds
     */
    public volatile int ROUND_DELAY = Configuration.ROUND_DELAY;

    /**
     * pause between two players in a round in milliseconds
     */
    public volatile int PLAYER_DELAY = Configuration.PLAYER_DELAY;

    /**
     * pause between two actions in milliseconds
     */
    public volatile int ACTION_DELAY = Configuration.ACTION_DELAY;

    /**
     * draw a line to the point, where the player wants to go
     */
    private volatile boolean SHOW_MOVETARGETS = Configuration.SHOW_MOVETARGETS;

    /**
     * draw a line to the enemy ath wich the player shoots
     */
    private volatile boolean SHOW_SHOOTLINE = Configuration.SHOW_SHOOTLINE;

    /**
     * @param other
     */
    public void setTo(final PlayerConfiguration other);

    /**
     * @return a copy of this object
     * @throws CloneNotSupportedException
     */
    public PlayerConfiguration copy() throws CloneNotSupportedException;

    /**
     * should only be called by {@link Battleplayer}!
     *
     * @param newState
     */
    synchronized void setState(final PlayerState newState);

    /**
     * @return true if the player should be playing
     */
    public synchronized boolean isPlaying();

    /**
     * @return true if the player is hold
     */
    public synchronized boolean isPaused();

    /**
     * @return true if the player is stopped
     */
    public synchronized boolean isStopped();

    /**
     * exclusive use of the player
     */
    void lock();

    /**
     * release the player
     */
    void unlock();

    /**
     * @return <code>true</code> if lines to movement targets should be
     *         displayed
     */
    public boolean showMoveTargets();

    /**
     * @param showMovetargets
     */
    public void setShowMoveTargets(final boolean showMovetargets);

    /**
     * @return <code>true</code> if shooting lines should be displayed
     */
    public boolean showShootline();

    /**
     * @param showShootline
     */
    public void setShowShootline(final boolean showShootline);

    /**
     * Adds a listener which will be notified about changes.
     *
     * @param listener
     */
    public void addListener(final PlayerConfigurationListener listener);

    /**
     * Removes the listener from the registered ones.
     *
     * @param listener
     */
    public void removeListener(final PlayerConfigurationListener listener);
}
","// PlayerConfiguration_2Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#showShootline()} method.
*/
class PlayerConfiguration_2Test {","// PlayerConfiguration_2Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#showShootline()} method.
*/
class PlayerConfiguration_2Test {

		/**
		* Test case for {@link PlayerConfiguration#showShootline()}
		*
		* @throws Exception
		*/
		@Test
		void testShowShootline() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				config.setShowShootline(true);
				// then
				assertTrue(config.showShootline());
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showShootline()}
		*
		* @throws Exception
		*/
		@Test
		void testShowShootline2() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				config.setShowShootline(false);
				// then
				assertFalse(config.showShootline());
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showShootline()}
		*
		* @throws Exception
		*/
		@Test
		void testShowShootline3() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				config.setShowShootline(true);
				// then
				assertTrue(config.showShootline());
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showShootline()}
		*
		* @throws Exception
		*/
		@Test
		void testShowShootline4() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				config.setShowShootline(false);
				// then
				assertFalse(config.showShootline());
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showShootline()}
		*
		* @throws Exception
		*/
		@Test
		void testShowShootline5() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				config.setShowShootline(true);
				// then
				assertTrue(config.showShootline());
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showShootline()}
		*
		* @throws Exception
		*/
		@Test
		void testShowShootline6() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				config.setShowShootline(false);
				// then
				assertFalse(config.showShootline());
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showShootline()}
		*
		* @throws Exception
		*/
		@Test
		void testShowShootline7() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				config.setShowShootline(true);
				// then
				assertTrue(config.showShootline());
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showShootline()}
		*
		* @throws Exception
		*/
		@Test
		void testShowShootline8() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				config.setShowShootline(false);
				// then
				assertFalse(config.showShootline());
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showShootline()}
		*
		* @throws Exception
		*/
		@Test
		void testShowShootline9() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				config.setShowShootline(true);
				// then
				assertTrue(config.showShootline());
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showShootline()}
		*
		* @throws Exception
		*/
		@Test
		void testShowShootline10() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				config.setShowShootline(false);
				// then
				assertFalse(config.showShootline());
		}
		
}

// PlayerConfiguration_3Test.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#showMoveTargets()} method.
*/
class PlayerConfiguration_3Test {
		
		/**
		* Test case for {@link PlayerConfiguration#showMoveTargets()}
		*
		* @throws Exception
		*/
		@Test
		void testShowMoveTargets() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				config.setShowMoveTargets(true);
				// then
				assertTrue(config.showMoveTargets());
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showMoveTargets()}
		*
		* @throws Exception
		*/
		@Test
		void testShowMoveTargets2() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				config.setShowMoveTargets(false);
				// then
				assertFalse(config.showMoveTargets());
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showMoveTargets()}
		*
		* @throws Exception
		*/
		@Test
		void testShowMoveTargets3() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				config.setShowMoveTargets(true);
				// then
				assertTrue(config.showMoveTargets());
		}
		
		/**
		* Test case for {@link PlayerConfiguration#showMoveTargets()}
		*
		* @throws Exception
		*/
		@Test
		void testShowMoveTargets4() throws Exception {
				// given
				final PlayerConfiguration config = new PlayerConfiguration();
				// when
				config.setShowMoveTargets(false);
				// then
				assertFalse(config.showMoveTargets());
	"
