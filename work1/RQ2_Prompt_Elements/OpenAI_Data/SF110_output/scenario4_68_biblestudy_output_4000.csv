ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6xG57wyxsrxKj0uafHbQ1rZKtroEq,/EvoSuiteBenchmark/original/68_biblestudy/src/main/java/bible/servlet/HTMLOutputStream.java,15.711987733840942,stop,"// HTMLOutputStream.java
package bible.servlet;

import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;
import java.net.*;

/**
 * A container for output streams with its own buffers
 *
 * @author Luke Samaha
 */
public class HTMLOutputStream {

    public HTMLOutputStream(HttpServletResponse response) throws IOException {
    }

    public void print(String str);

    public void print(int n);

    public void println(String str);

    public void println(int n);

    public void flush() throws IOException;

    public int getSize();

    public PrintWriter getPW();

    /**
     * @author James Stauffer
     * @return String the contents of the buffer.
     */
    public String reset();

    public String toString();

    //  Private instance variables
    private HttpServletResponse response = null;

    private boolean binary = false;

    private ByteArrayOutputStream baos = null;

    private PrintWriter pw = null;
}
","// HTMLOutputStreamTest.java
package bible.servlet;

import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;
import java.net.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HTMLOutputStream}.
* It contains ten unit test cases for the {@link HTMLOutputStream#reset()} method.
*/
class HTMLOutputStreamTest {","// HTMLOutputStreamTest.java
package bible.servlet;

import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;
import java.net.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HTMLOutputStream}.
* It contains ten unit test cases for the {@link HTMLOutputStream#reset()} method.
*/
class HTMLOutputStreamTest {

	/**
	* Test case for {@link HTMLOutputStream#reset()} method.
	* It tests the case when the buffer is empty.
	*/
	@Test
	public void testResetEmpty() {
		HTMLOutputStream hos = new HTMLOutputStream();
		assertEquals("""", hos.reset());
	}
	
	/**
	* Test case for {@link HTMLOutputStream#reset()} method.
	* It tests the case when the buffer contains a single character.
	*/
	@Test
	public void testResetSingleChar() {
		HTMLOutputStream hos = new HTMLOutputStream();
		hos.print(""a"");
		assertEquals(""a"", hos.reset());
	}
	
	/**
	* Test case for {@link HTMLOutputStream#reset()} method.
	* It tests the case when the buffer contains a single integer.
	*/
	@Test
	public void testResetSingleInt() {
		HTMLOutputStream hos = new HTMLOutputStream();
		hos.print(1);
		assertEquals(""1"", hos.reset());
	}
	
	/**
	* Test case for {@link HTMLOutputStream#reset()} method.
	* It tests the case when the buffer contains a single string.
	*/
	@Test
	public void testResetSingleString() {
		HTMLOutputStream hos = new HTMLOutputStream();
		hos.println(""a"");
		assertEquals(""a\n"", hos.reset());
	}
	
	/**
	* Test case for {@link HTMLOutputStream#reset()} method.
	* It tests the case when the buffer contains a single integer.
	*/
	@Test
	public void testResetSingleIntln() {
		HTMLOutputStream hos = new HTMLOutputStream();
		hos.println(1);
		assertEquals(""1\n"", hos.reset());
	}
	
	/**
	* Test case for {@link HTMLOutputStream#reset()} method.
	* It tests the case when the buffer contains multiple characters.
	*/
	@Test
	public void testResetMultipleChars() {
		HTMLOutputStream hos = new HTMLOutputStream();
		hos.print(""abc"");
		assertEquals(""abc"", hos.reset());
	}
	
	/**
	* Test case for {@link HTMLOutputStream#reset()} method.
	* It tests the case when the buffer contains multiple integers.
	*/
	@Test
	public void testResetMultipleInts() {
		HTMLOutputStream hos = new HTMLOutputStream();
		hos.print(123);
		assertEquals(""123"", hos.reset());
	}
	
	/**
	* Test case for {@link HTMLOutputStream#reset()} method.
	* It tests the case when the buffer contains multiple strings.
	*/
	@Test
	public void testResetMultipleStrings() {
		HTMLOutputStream hos = new HTMLOutputStream();
		hos.println(""abc"");
		hos.println(""def"");
		assertEquals(""abc\ndef\n"", hos.reset());
	}
	
	/**
	* Test case for {@link HTMLOutputStream#reset()} method.
	* It tests the case when the buffer contains multiple integers.
	*/
	@Test
	public void testResetMultipleIntsln() {
		HTMLOutputStream hos = new HTMLOutputStream();
		hos.println(123);
		hos.println(456);
		assertEquals(""123\n456\n"", hos.reset());
	}
	
	/**
	* Test case for {@link HTMLOutputStream#reset()} method.
	* It tests the case when the buffer contains a mixture of characters, integers, and strings.
	*/
	@Test
	public void testResetMixed() {
		HTMLOutputStream hos = new HTMLOutputStream();
		hos.print(""abc"");
		hos.println(123);
		hos.print(""def"");
		hos.println(456);
		assertEquals(""abc123\ndef456\n"", hos.reset());
	}
}"
cmpl-6xG6ArbO71uxp5HJiU0O3C0MrMeSu,/EvoSuiteBenchmark/original/68_biblestudy/src/main/java/bible/util/Queue_0Test.java,99.19350028038025,length,"// Queue.java
package bible.util;

import java.util.*;

/**
 * Queue is a storage class to link together <b>Node</b> objects which are
 * stored in a first in first out storage system.
 *
 * @see Node
 * @version 1.0
 * @author LaMoine Zielieke, James Stauffer
 */
public class Queue {

    public final static int NO_MAXIMUM = -1;

    /**
     * number of items in this list
     */
    private int numItems;

    private int maxNumItems;

    private int maxCapacity;

    /**
     * first Node in list
     */
    private Node first;

    /**
     * last Node in list
     */
    private Node last;

    /**
     * Constructor creating an empty Queue.  All variables are set to zero
     * or null.
     */
    public Queue() {
    }

    /**
     * Constructor creating an empty Queue.  All variables are set to zero
     * or null.
     */
    public Queue(int capacity) {
    }

    /**
     * See if the queue is empty.
     * @return     <code>true</code> if Queue is empty;
     *             <code>false</code> otherwise.
     */
    public boolean isEmpty();

    /**
     * Insert an object into the end of the queue
     *
     * @param someObject  the Object to store
     */
    public void enqueue(Object someObject);

    /**
     * Remove an object from the front of the Queue
     *
     * @return       Object if Queue is not empty
     *               otherwise print message to dos window
     * @see GameQuestion
     */
    public synchronized Object dequeue();

    /**
     *  Removes all nodes where Node.value.equals(object).
     */
    public synchronized int remove(Object object);

    /**
     *  Moves element to back of que.
     */
    public synchronized void refreshElement(Object object);

    /**
     * See how many items are in the queue.
     *
     * @return integer value of number of items in queue
     */
    public int getNumberItems();

    /**
     * The peak number of items in the Queue.
     *
     * @return peak number of items in queue
     */
    public int getPeakNumberItems();

    /**
     * The Queue is stepped through one node at a time and the
     * QuestionNumber is inserted into a Vector.This action copies
     * unused question numbers from queue into temp vector.
     *
     * @return   Vector of unused question numbers. In this way when
     *           a new vector of randomized numbers is created the nunbers
     *           already in the queue will not be duplicated.  If number
     *           396 is in the queue we do not want 396 to appear in the
     *           new randomized vector.  This method is only called in
     *           <b>DataBase</b>
     * @see      Database#load
     * @see      GameQuestion
     */
    public Vector getObjects();

    /**
     *  Returns true if the first should be removed.
     */
    public boolean maxCapacityExceeded();

    public String toString();

    /**
     * Node objects hold the Object to be stored and the next node in our linked list.
     * In this way we can access the next node in our <b>Queue</b>.
     *
     * @version   2.0
     * @author    LaMoine Zielieke
     */
    class Node {

        /**
         * The next Node in the chain.
         */
        Node next;

        /**
         * The Object this node stores.
         */
        Object value;

        /**
         * @param  obj   the Object to be inserted into the node.
         */
        public Node(Object obj) {
            value = obj;
        }
    }
}
","// Queue_0Test.java
package bible.util;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Queue}.
* It contains ten unit test cases for the {@link Queue#dequeue()} method.
*/
class Queue_0Test {","// Queue_0Test.java
package bible.util;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Queue}.
* It contains ten unit test cases for the {@link Queue#dequeue()} method.
*/
class Queue_0Test {

	/**
	* Test case for {@link Queue#dequeue()} method.
	* It tests the case when the queue is empty.
	*/
	@Test
	void testDequeue_0() {
		Queue queue = new Queue();
		assertNull(queue.dequeue());
	}
	
	/**
	* Test case for {@link Queue#dequeue()} method.
	* It tests the case when the queue has one element.
	*/
	@Test
	void testDequeue_1() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		assertNotNull(queue.dequeue());
	}
	
	/**
	* Test case for {@link Queue#dequeue()} method.
	* It tests the case when the queue has two elements.
	*/
	@Test
	void testDequeue_2() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertNotNull(queue.dequeue());
	}
	
	/**
	* Test case for {@link Queue#dequeue()} method.
	* It tests the case when the queue has three elements.
	*/
	@Test
	void testDequeue_3() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertNotNull(queue.dequeue());
	}
	
	/**
	* Test case for {@link Queue#dequeue()} method.
	* It tests the case when the queue has four elements.
	*/
	@Test
	void testDequeue_4() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertNotNull(queue.dequeue());
	}
	
	/**
	* Test case for {@link Queue#dequeue()} method.
	* It tests the case when the queue has five elements.
	*/
	@Test
	void testDequeue_5() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertNotNull(queue.dequeue());
	}
	
	/**
	* Test case for {@link Queue#dequeue()} method.
	* It tests the case when the queue has six elements.
	*/
	@Test
	void testDequeue_6() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertNotNull(queue.dequeue());
	}
	
	/**
	* Test case for {@link Queue#dequeue()} method.
	* It tests the case when the queue has seven elements.
	*/
	@Test
	void testDequeue_7() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertNotNull(queue.dequeue());
	}
	
	/**
	* Test case for {@link Queue#dequeue()} method.
	* It tests the case when the queue has eight elements.
	*/
	@Test
	void testDequeue_8() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertNotNull(queue.dequeue());
	}
	
	/**
	* Test case for {@link Queue#dequeue()} method.
	* It tests the case when the queue has nine elements.
	*/
	@Test
	void testDequeue_9() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertNotNull(queue.dequeue());
	}
	
}

// Queue_1Test.java
package bible.util;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Queue}.
* It contains ten unit test cases for the {@link Queue#enqueue(Object)} method.
*/
class Queue_1Test {
		
	/**
	* Test case for {@link Queue#enqueue(Object)} method.
	* It tests the case when the queue is empty.
	*/
	@Test
	void testEnqueue_0() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		assertNotNull(queue.dequeue());
	}
	
	/**
	* Test case for {@link Queue#enqueue(Object)} method.
	* It tests the case when the queue has one element.
	*/
	@Test
	void testEnqueue_1() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertNotNull(queue.dequeue());
	}
	
	/**
	* Test case for {@link Queue#enqueue(Object)} method.
	* It tests the case when the queue has two elements.
	*/
	@Test
	void testEnqueue_2() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertNotNull(queue.dequeue());
	}
	
	/**
	* Test case for {@link Queue#enqueue(Object)} method.
	* It tests the case when the queue has three elements.
	*/
	@Test
	void testEnqueue_3() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertNotNull(queue.dequeue());
	}
	
	/**
	* Test case for {@link Queue#enqueue(Object)} method.
	* It tests the case when the queue has four elements.
	*/
	@Test
	void testEnqueue_4() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertNotNull(queue.dequeue());
	}
	
	/**
	* Test case for {@link Queue#enqueue(Object)} method.
	* It tests the case when the queue has five elements.
	*/
	@Test
	void testEnqueue_5() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertNotNull(queue.dequeue());
	}
	
	/**
	* Test case for {@link Queue#enqueue(Object)} method.
	* It tests the case when the queue has six elements.
	*/
	@Test
	void testEnqueue_6() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertNotNull(queue.dequeue());
	}
	
	/**
	* Test case for {@link Queue#enqueue(Object)} method.
	* It tests the case when the queue has seven elements.
	*/
	@Test
	void testEnqueue_7() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertNotNull(queue.dequeue());
	}
	
	/**
	* Test case for {@link Queue#enqueue(Object)} method.
	* It tests the case when the queue has eight elements.
	*/
	@Test
	void testEnqueue_8() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertNotNull(queue.dequeue());
	}
	
	/**
	* Test case for {@link Queue#enqueue(Object)} method.
	* It tests the case when the queue has nine elements.
	*/
	@Test
	void testEnqueue_9() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertNotNull(queue.dequeue());
	}
	
}

// Queue_2Test.java
package bible.util;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Queue}.
* It contains ten unit test cases for the {@link Queue#isEmpty()} method.
*/
class Queue_2Test {
		
	/**
	* Test case for {@link Queue#isEmpty()} method.
	* It tests the case when the queue is empty.
	*/
	@Test
	void testIsEmpty_0() {
		Queue queue = new Queue();
		assertTrue(queue.isEmpty());
	}
	
	/**
	* Test case for {@link Queue#isEmpty()} method.
	* It tests the case when the queue has one element.
	*/
	@Test
	void testIsEmpty_1() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		assertFalse(queue.isEmpty());
	}
	
	/**
	* Test case for {@link Queue#isEmpty()} method.
	* It tests the case when the queue has two elements.
	*/
	@Test
	void testIsEmpty_2() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertFalse(queue.isEmpty());
	}
	
	/**
	* Test case for {@link Queue#isEmpty()} method.
	* It tests the case when the queue has three elements.
	*/
	@Test
	void testIsEmpty_3() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertFalse(queue.isEmpty());
	}
	
	/**
	* Test case for {@link Queue#isEmpty()} method.
	* It tests the case when the queue has four elements.
	*/
	@Test
	void testIsEmpty_4() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertFalse(queue.isEmpty());
	}
	
	/**
	* Test case for {@link Queue#isEmpty()} method.
	* It tests the case when the queue has five elements.
	*/
	@Test
	void testIsEmpty_5() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertFalse(queue.isEmpty());
	}
	
	/**
	* Test case for {@link Queue#isEmpty()} method.
	* It tests the case when the queue has six elements.
	*/
	@Test
	void testIsEmpty_6() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertFalse(queue.isEmpty());
	}
	
	/**
	* Test case for {@link Queue#isEmpty()} method.
	* It tests the case when the queue has seven elements.
	*/
	@Test
	void testIsEmpty_7() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertFalse(queue.isEmpty());
	}
	
	/**
	* Test case for {@link Queue#isEmpty()} method.
	* It tests the case when the queue has eight elements.
	*/
	@Test
	void testIsEmpty_8() {
		Queue queue = new Queue();
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		queue.enqueue(new Object());
		assertFalse(queue.isEmpty());
	}
	
"
cmpl-6xG7mCmozT756ErEMybHY35IbQHag,/EvoSuiteBenchmark/original/68_biblestudy/src/main/java/bible/util/Queue_1Test.java,80.16604089736938,length,"// Queue.java
package bible.util;

import java.util.*;

/**
 * Queue is a storage class to link together <b>Node</b> objects which are
 * stored in a first in first out storage system.
 *
 * @see Node
 * @version 1.0
 * @author LaMoine Zielieke, James Stauffer
 */
public class Queue {

    public final static int NO_MAXIMUM = -1;

    /**
     * number of items in this list
     */
    private int numItems;

    private int maxNumItems;

    private int maxCapacity;

    /**
     * first Node in list
     */
    private Node first;

    /**
     * last Node in list
     */
    private Node last;

    /**
     * Constructor creating an empty Queue.  All variables are set to zero
     * or null.
     */
    public Queue() {
    }

    /**
     * Constructor creating an empty Queue.  All variables are set to zero
     * or null.
     */
    public Queue(int capacity) {
    }

    /**
     * See if the queue is empty.
     * @return     <code>true</code> if Queue is empty;
     *             <code>false</code> otherwise.
     */
    public boolean isEmpty();

    /**
     * Insert an object into the end of the queue
     *
     * @param someObject  the Object to store
     */
    public void enqueue(Object someObject);

    /**
     * Remove an object from the front of the Queue
     *
     * @return       Object if Queue is not empty
     *               otherwise print message to dos window
     * @see GameQuestion
     */
    public synchronized Object dequeue();

    /**
     *  Removes all nodes where Node.value.equals(object).
     */
    public synchronized int remove(Object object);

    /**
     *  Moves element to back of que.
     */
    public synchronized void refreshElement(Object object);

    /**
     * See how many items are in the queue.
     *
     * @return integer value of number of items in queue
     */
    public int getNumberItems();

    /**
     * The peak number of items in the Queue.
     *
     * @return peak number of items in queue
     */
    public int getPeakNumberItems();

    /**
     * The Queue is stepped through one node at a time and the
     * QuestionNumber is inserted into a Vector.This action copies
     * unused question numbers from queue into temp vector.
     *
     * @return   Vector of unused question numbers. In this way when
     *           a new vector of randomized numbers is created the nunbers
     *           already in the queue will not be duplicated.  If number
     *           396 is in the queue we do not want 396 to appear in the
     *           new randomized vector.  This method is only called in
     *           <b>DataBase</b>
     * @see      Database#load
     * @see      GameQuestion
     */
    public Vector getObjects();

    /**
     *  Returns true if the first should be removed.
     */
    public boolean maxCapacityExceeded();

    public String toString();

    /**
     * Node objects hold the Object to be stored and the next node in our linked list.
     * In this way we can access the next node in our <b>Queue</b>.
     *
     * @version   2.0
     * @author    LaMoine Zielieke
     */
    class Node {

        /**
         * The next Node in the chain.
         */
        Node next;

        /**
         * The Object this node stores.
         */
        Object value;

        /**
         * @param  obj   the Object to be inserted into the node.
         */
        public Node(Object obj) {
            value = obj;
        }
    }
}
","// Queue_1Test.java
package bible.util;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Queue}.
* It contains ten unit test cases for the {@link Queue#maxCapacityExceeded()} method.
*/
class Queue_1Test {","// Queue_1Test.java
package bible.util;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Queue}.
* It contains ten unit test cases for the {@link Queue#maxCapacityExceeded()} method.
*/
class Queue_1Test {

	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 10 elements.
	* The method should return false.
	*/
	@Test
	void testMaxCapacityExceeded_1() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 10; i++) {
			queue.enqueue(i);
		}
		assertFalse(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 11 elements.
	* The method should return true.
	*/
	@Test
	void testMaxCapacityExceeded_2() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 11; i++) {
			queue.enqueue(i);
		}
		assertTrue(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 9 elements.
	* The method should return false.
	*/
	@Test
	void testMaxCapacityExceeded_3() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 9; i++) {
			queue.enqueue(i);
		}
		assertFalse(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 10 elements.
	* The method should return false.
	*/
	@Test
	void testMaxCapacityExceeded_4() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 10; i++) {
			queue.enqueue(i);
		}
		assertFalse(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 11 elements.
	* The method should return true.
	*/
	@Test
	void testMaxCapacityExceeded_5() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 11; i++) {
			queue.enqueue(i);
		}
		assertTrue(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 9 elements.
	* The method should return false.
	*/
	@Test
	void testMaxCapacityExceeded_6() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 9; i++) {
			queue.enqueue(i);
		}
		assertFalse(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 10 elements.
	* The method should return false.
	*/
	@Test
	void testMaxCapacityExceeded_7() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 10; i++) {
			queue.enqueue(i);
		}
		assertFalse(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 11 elements.
	* The method should return true.
	*/
	@Test
	void testMaxCapacityExceeded_8() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 11; i++) {
			queue.enqueue(i);
		}
		assertTrue(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 9 elements.
	* The method should return false.
	*/
	@Test
	void testMaxCapacityExceeded_9() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 9; i++) {
			queue.enqueue(i);
		}
		assertFalse(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 10 elements.
	* The method should return false.
	*/
	@Test
	void testMaxCapacityExceeded_10() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 10; i++) {
			queue.enqueue(i);
		}
		assertFalse(queue.maxCapacityExceeded());
	}
}

// Queue_2Test.java
package bible.util;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Queue}.
* It contains ten unit test cases for the {@link Queue#maxCapacityExceeded()} method.
*/
class Queue_2Test {
		
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 10 elements.
	* The method should return false.
	*/
	@Test
	void testMaxCapacityExceeded_1() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 10; i++) {
			queue.enqueue(i);
		}
		assertFalse(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 11 elements.
	* The method should return true.
	*/
	@Test
	void testMaxCapacityExceeded_2() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 11; i++) {
			queue.enqueue(i);
		}
		assertTrue(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 9 elements.
	* The method should return false.
	*/
	@Test
	void testMaxCapacityExceeded_3() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 9; i++) {
			queue.enqueue(i);
		}
		assertFalse(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 10 elements.
	* The method should return false.
	*/
	@Test
	void testMaxCapacityExceeded_4() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 10; i++) {
			queue.enqueue(i);
		}
		assertFalse(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 11 elements.
	* The method should return true.
	*/
	@Test
	void testMaxCapacityExceeded_5() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 11; i++) {
			queue.enqueue(i);
		}
		assertTrue(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 9 elements.
	* The method should return false.
	*/
	@Test
	void testMaxCapacityExceeded_6() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 9; i++) {
			queue.enqueue(i);
		}
		assertFalse(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 10 elements.
	* The method should return false.
	*/
	@Test
	void testMaxCapacityExceeded_7() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 10; i++) {
			queue.enqueue(i);
		}
		assertFalse(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 11 elements.
	* The method should return true.
	*/
	@Test
	void testMaxCapacityExceeded_8() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 11; i++) {
			queue.enqueue(i);
		}
		assertTrue(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 9 elements.
	* The method should return false.
	*/
	@Test
	void testMaxCapacityExceeded_9() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 9; i++) {
			queue.enqueue(i);
		}
		assertFalse(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 10 elements.
	* The method should return false.
	*/
	@Test
	void testMaxCapacityExceeded_10() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 10; i++) {
			queue.enqueue(i);
		}
		assertFalse(queue.maxCapacityExceeded());
	}
}

// Queue_3Test.java
package bible.util;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Queue}.
* It contains ten unit test cases for the {@link Queue#maxCapacityExceeded()} method.
*/
class Queue_3Test {
		
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 10 elements.
	* The method should return false.
	*/
	@Test
	void testMaxCapacityExceeded_1() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 10; i++) {
			queue.enqueue(i);
		}
		assertFalse(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 11 elements.
	* The method should return true.
	*/
	@Test
	void testMaxCapacityExceeded_2() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 11; i++) {
			queue.enqueue(i);
		}
		assertTrue(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 9 elements.
	* The method should return false.
	*/
	@Test
	void testMaxCapacityExceeded_3() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 9; i++) {
			queue.enqueue(i);
		}
		assertFalse(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 10 elements.
	* The method should return false.
	*/
	@Test
	void testMaxCapacityExceeded_4() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 10; i++) {
			queue.enqueue(i);
		}
		assertFalse(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 11 elements.
	* The method should return true.
	*/
	@Test
	void testMaxCapacityExceeded_5() {
		Queue queue = new Queue(10);
		for (int i = 0; i < 11; i++) {
			queue.enqueue(i);
		}
		assertTrue(queue.maxCapacityExceeded());
	}
	
	/**
	* Test case for {@link Queue#maxCapacityExceeded()}.
	* The test case tests the method with a queue with a maximum capacity of 10.
	* The queue is filled with 9 elements.
	* The method should return false.
	*/
	@Test
	void testMaxCapacityExceeded_6() {
		Queue queue = new Queue(10);
		for (int i = 0; i <"
