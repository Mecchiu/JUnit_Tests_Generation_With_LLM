ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6x6QsVj3nsZ4k37RTTektlidTbc51,/EvoSuiteBenchmark/original/67_gae-app-manager/src/main/java/net/sf/gaeappmanager/google/LogonHelper.java,114.76090621948242,stop,"// LogonHelper.java
package net.sf.gaeappmanager.google;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.cookie.Cookie;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;

/**
 * Google login helper.
 *
 * Based on work of Cheers Geoff.
 *
 * http://groups.google.com/group/google-appengine
 * -java/browse_thread/thread/c96d4fff73117e1d?pli=1
 *
 * @author Alois Belaska
 */
public class LogonHelper {

    /**
     * Returns the ACSID string to be set as the Cookie field in the request
     * header.
     *
     * @param userid
     *            full gmail address for user
     * @param password
     *            password
     * @param source
     *            name of application requesting quota details
     * @return the ACSID field value
     * @throws Exception
     *             if any error occurs getting the ACSID
     */
    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception;

    private static String getAuthToken(InputStream inputStream) throws Exception;

    private LogonHelper() {
    }
}
","// LogonHelperTest.java
package net.sf.gaeappmanager.google;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.cookie.Cookie;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogonHelper}.
* It contains ten unit test cases for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
*/
class LogonHelperTest {","// LogonHelperTest.java
package net.sf.gaeappmanager.google;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.cookie.Cookie;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link LogonHelper}.
* It contains ten unit test cases for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
*/
class LogonHelperTest {

	/**
	* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
	* It tests the case when the userid is null.
	*/
	@Test
	void testLoginToGoogleAppEngine_UseridIsNull() {
		try {
			LogonHelper.loginToGoogleAppEngine(null, ""password"", ""source"");
			fail(""Expected IllegalArgumentException"");
		} catch (IllegalArgumentException e) {
			assertEquals(""userid is null"", e.getMessage());
		} catch (Exception e) {
			fail(""Expected IllegalArgumentException"");
		}
	}
	
	/**
	* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
	* It tests the case when the userid is empty.
	*/
	@Test
	void testLoginToGoogleAppEngine_UseridIsEmpty() {
		try {
			LogonHelper.loginToGoogleAppEngine("""", ""password"", ""source"");
			fail(""Expected IllegalArgumentException"");
		} catch (IllegalArgumentException e) {
			assertEquals(""userid is empty"", e.getMessage());
		} catch (Exception e) {
			fail(""Expected IllegalArgumentException"");
		}
	}
	
	/**
	* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
	* It tests the case when the password is null.
	*/
	@Test
	void testLoginToGoogleAppEngine_PasswordIsNull() {
		try {
			LogonHelper.loginToGoogleAppEngine(""userid"", null, ""source"");
			fail(""Expected IllegalArgumentException"");
		} catch (IllegalArgumentException e) {
			assertEquals(""password is null"", e.getMessage());
		} catch (Exception e) {
			fail(""Expected IllegalArgumentException"");
		}
	}
	
	/**
	* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
	* It tests the case when the password is empty.
	*/
	@Test
	void testLoginToGoogleAppEngine_PasswordIsEmpty() {
		try {
			LogonHelper.loginToGoogleAppEngine(""userid"", """", ""source"");
			fail(""Expected IllegalArgumentException"");
		} catch (IllegalArgumentException e) {
			assertEquals(""password is empty"", e.getMessage());
		} catch (Exception e) {
			fail(""Expected IllegalArgumentException"");
		}
	}
	
	/**
	* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
	* It tests the case when the source is null.
	*/
	@Test
	void testLoginToGoogleAppEngine_SourceIsNull() {
		try {
			LogonHelper.loginToGoogleAppEngine(""userid"", ""password"", null);
			fail(""Expected IllegalArgumentException"");
		} catch (IllegalArgumentException e) {
			assertEquals(""source is null"", e.getMessage());
		} catch (Exception e) {
			fail(""Expected IllegalArgumentException"");
		}
	}
	
	/**
	* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
	* It tests the case when the source is empty.
	*/
	@Test
	void testLoginToGoogleAppEngine_SourceIsEmpty() {
		try {
			LogonHelper.loginToGoogleAppEngine(""userid"", ""password"", """");
			fail(""Expected IllegalArgumentException"");
		} catch (IllegalArgumentException e) {
			assertEquals(""source is empty"", e.getMessage());
		} catch (Exception e) {
			fail(""Expected IllegalArgumentException"");
		}
	}
	
	/**
	* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
	* It tests the case when the userid is invalid.
	*/
	@Test
	void testLoginToGoogleAppEngine_UseridIsInvalid() {
		try {
			LogonHelper.loginToGoogleAppEngine(""userid"", ""password"", ""source"");
			fail(""Expected Exception"");
		} catch (Exception e) {
			assertEquals(""Error logging in to Google App Engine"", e.getMessage());
		}
	}
	
	/**
	* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
	* It tests the case when the password is invalid.
	*/
	@Test
	void testLoginToGoogleAppEngine_PasswordIsInvalid() {
		try {
			LogonHelper.loginToGoogleAppEngine(""userid@gmail.com"", ""password"", ""source"");
			fail(""Expected Exception"");
		} catch (Exception e) {
			assertEquals(""Error logging in to Google App Engine"", e.getMessage());
		}
	}
	
	/**
	* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
	* It tests the case when the source is invalid.
	*/
	@Test
	void testLoginToGoogleAppEngine_SourceIsInvalid() {
		try {
			LogonHelper.loginToGoogleAppEngine(""userid@gmail.com"", ""password"", ""source"");
			fail(""Expected Exception"");
		} catch (Exception e) {
			assertEquals(""Error logging in to Google App Engine"", e.getMessage());
		}
	}
	
	/**
	* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
	* It tests the case when the userid, password and source are valid.
	*/
	@Test
	void testLoginToGoogleAppEngine_Valid() {
		try {
			String acsid = LogonHelper.loginToGoogleAppEngine(""userid@gmail.com"", ""password"", ""source"");
			assertNotNull(acsid);
		} catch (Exception e) {
			fail(""Expected no Exception"");
		}
	}
	
	/**
	* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
	* It tests the case when the userid, password and source are valid.
	*/
	@Test
	void testLoginToGoogleAppEngine_Valid2() {
		try {
			String acsid = LogonHelper.loginToGoogleAppEngine(""userid@gmail.com"", ""password"", ""source"");
			assertNotNull(acsid);
		} catch (Exception e) {
			fail(""Expected no Exception"");
		}
	}
	
	/**
	* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
	* It tests the case when the userid, password and source are valid.
	*/
	@Test
	void testLoginToGoogleAppEngine_Valid3() {
		try {
			String acsid = LogonHelper.loginToGoogleAppEngine(""userid@gmail.com"", ""password"", ""source"");
			assertNotNull(acsid);
		} catch (Exception e) {
			fail(""Expected no Exception"");
		}
	}
	
	/**
	* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
	* It tests the case when the userid, password and source are valid.
	*/
	@Test
	void testLoginToGoogleAppEngine_Valid4() {
		try {
			String acsid = LogonHelper.loginToGoogleAppEngine(""userid@gmail.com"", ""password"", ""source"");
			assertNotNull(acsid);
		} catch (Exception e) {
			fail(""Expected no Exception"");
		}
	}
	
	/**
	* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
	* It tests the case when the userid, password and source are valid.
	*/
	@Test
	void testLoginToGoogleAppEngine_Valid5() {
		try {
			String acsid = LogonHelper.loginToGoogleAppEngine(""userid@gmail.com"", ""password"", ""source"");
			assertNotNull(acsid);
		} catch (Exception e) {
			fail(""Expected no Exception"");
		}
	}
	
	/**
	* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
	* It tests the case when the userid, password and source are valid.
	*/
	@Test
	void testLoginToGoogleAppEngine_Valid6() {
		try {
			String acsid = LogonHelper.loginToGoogleAppEngine(""userid@gmail.com"", ""password"", ""source"");
			assertNotNull(acsid);
		} catch (Exception e) {
			fail(""Expected no Exception"");
		}
	}
	
	/**
	* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
	* It tests the case when the userid, password and source are valid.
	*/
	@Test
	void testLoginToGoogleAppEngine_Valid7() {
		try {
			String acsid = LogonHelper.loginToGoogleAppEngine(""userid@gmail.com"", ""password"", ""source"");
			assertNotNull(acsid);
		} catch (Exception e) {
			fail(""Expected no Exception"");
		}
	}
	
	/**
	* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
	* It tests the case when the userid, password and source are valid.
	*/
	@Test
	void testLoginToGoogleAppEngine_Valid8() {
		try {
			String acsid = LogonHelper.loginToGoogleAppEngine(""userid@gmail.com"", ""password"", ""source"");
			assertNotNull(acsid);
		} catch (Exception e) {
			fail(""Expected no Exception"");
		}
	}
	
	/**
	* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
	* It tests the case when the userid, password and source are valid.
	*/
	@Test
	void testLoginToGoogleAppEngine_Valid9() {
		try {
			String acsid = LogonHelper.loginToGoogleAppEngine(""userid@gmail.com"", ""password"", ""source"");
			assertNotNull(acsid);
		} catch (Exception e) {
			fail(""Expected no Exception"");
		}
	}
	
	/**
	* Test of {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.
	* It tests the case when the userid, password and source are valid.
	*/
	@Test
	void testLoginToGoogleAppEngine_Valid10() {
		try {
			String acsid = LogonHelper.loginToGoogleAppEngine(""userid@gmail.com"", ""password"", ""source"");
			assertNotNull(acsid);
		} catch (Exception e) {
			fail(""Expected no Exception"");
		}
	}
}"
cmpl-6x6Se89ubmGI8k6wxnS5RUgaD1ZFs,/EvoSuiteBenchmark/original/67_gae-app-manager/src/main/java/net/sf/gaeappmanager/google/appengine/Manager.java,149.64897990226746,stop,"// Manager.java
package net.sf.gaeappmanager.google.appengine;

import net.sf.gaeappmanager.google.LogonHelper;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

/**
 * Google App Engine application manager.
 *
 * @author Alois Belaska
 */
public class Manager {

    /**
     * Retrieve quota details of application deployed in Google App Engine.
     *
     * @param userid
     *            full gmail address for user
     * @param password
     *            gmail account password
     * @param source
     *            name of application requesting quota details
     * @param application
     *            appspot application name
     * @return quota details of application
     * @throws Exception
     *             in case of failure
     */
    public static QuotaDetails retrieveAppQuotaDetails(String userid, String password, String source, String application) throws Exception;
}
","// ManagerTest.java
package net.sf.gaeappmanager.google.appengine;

import net.sf.gaeappmanager.google.LogonHelper;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Manager}.
* It contains ten unit test cases for the {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
*/
class ManagerTest {","// ManagerTest.java
package net.sf.gaeappmanager.google.appengine;

import net.sf.gaeappmanager.google.LogonHelper;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Manager}.
* It contains ten unit test cases for the {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
*/
class ManagerTest {

	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the userid is null.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_userid_null() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(null, ""password"", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the userid is empty.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_userid_empty() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails("""", ""password"", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the password is null.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_password_null() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid"", null, ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the password is empty.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_password_empty() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid"", """", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the source is null.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_source_null() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid"", ""password"", null, ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the source is empty.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_source_empty() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid"", ""password"", """", ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the application is null.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_application_null() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid"", ""password"", ""source"", null);
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the application is empty.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_application_empty() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid"", ""password"", ""source"", """");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the userid is invalid.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_userid_invalid() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid"", ""password"", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the password is invalid.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_password_invalid() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid"", ""password"", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the source is invalid.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_source_invalid() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid"", ""password"", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the application is invalid.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_application_invalid() {
		assertThrows(IllegalArgumentException.class, () -> {
			Manager.retrieveAppQuotaDetails(""userid"", ""password"", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the userid, password, source and application are valid.
	 * Expected result: {@link QuotaDetails} is returned.
	 */
	@Test
	void testRetrieveAppQuotaDetails_valid() {
		QuotaDetails quotaDetails = Manager.retrieveAppQuotaDetails(""userid"", ""password"", ""source"", ""application"");
		assertNotNull(quotaDetails);
	}
}

// QuotaDetails.java
package net.sf.gaeappmanager.google.appengine;

import java.util.Date;

/**
 * Quota details of application deployed in Google App Engine.
 *
 * @author Alois Belaska
 */
public class QuotaDetails {

    /**
     * Retrieve quota details of application deployed in Google App Engine.
     *
     * @param userid
     *            full gmail address for user
     * @param password
     *            gmail account password
     * @param source
     *            name of application requesting quota details
     * @param application
     *            appspot application name
     * @return quota details of application
     * @throws Exception
     *             in case of failure
     */
    public static QuotaDetails retrieveAppQuotaDetails(String userid, String password, String source, String application) throws Exception;
}

// QuotaDetailsTest.java
package net.sf.gaeappmanager.google.appengine;

import net.sf.gaeappmanager.google.LogonHelper;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QuotaDetails}.
* It contains ten unit test cases for the {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.
*/
class QuotaDetailsTest {
		
	/**
	 * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the userid is null.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_userid_null() {
		assertThrows(IllegalArgumentException.class, () -> {
			QuotaDetails.retrieveAppQuotaDetails(null, ""password"", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the userid is empty.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_userid_empty() {
		assertThrows(IllegalArgumentException.class, () -> {
			QuotaDetails.retrieveAppQuotaDetails("""", ""password"", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the password is null.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_password_null() {
		assertThrows(IllegalArgumentException.class, () -> {
			QuotaDetails.retrieveAppQuotaDetails(""userid"", null, ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the password is empty.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_password_empty() {
		assertThrows(IllegalArgumentException.class, () -> {
			QuotaDetails.retrieveAppQuotaDetails(""userid"", """", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the source is null.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_source_null() {
		assertThrows(IllegalArgumentException.class, () -> {
			QuotaDetails.retrieveAppQuotaDetails(""userid"", ""password"", null, ""application"");
		});
	}
	
	/**
	 * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the source is empty.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_source_empty() {
		assertThrows(IllegalArgumentException.class, () -> {
			QuotaDetails.retrieveAppQuotaDetails(""userid"", ""password"", """", ""application"");
		});
	}
	
	/**
	 * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the application is null.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_application_null() {
		assertThrows(IllegalArgumentException.class, () -> {
			QuotaDetails.retrieveAppQuotaDetails(""userid"", ""password"", ""source"", null);
		});
	}
	
	/**
	 * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the application is empty.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_application_empty() {
		assertThrows(IllegalArgumentException.class, () -> {
			QuotaDetails.retrieveAppQuotaDetails(""userid"", ""password"", ""source"", """");
		});
	}
	
	/**
	 * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the userid is invalid.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_userid_invalid() {
		assertThrows(IllegalArgumentException.class, () -> {
			QuotaDetails.retrieveAppQuotaDetails(""userid"", ""password"", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the password is invalid.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_password_invalid() {
		assertThrows(IllegalArgumentException.class, () -> {
			QuotaDetails.retrieveAppQuotaDetails(""userid"", ""password"", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the source is invalid.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_source_invalid() {
		assertThrows(IllegalArgumentException.class, () -> {
			QuotaDetails.retrieveAppQuotaDetails(""userid"", ""password"", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the application is invalid.
	 * Expected result: {@link IllegalArgumentException} is thrown.
	 */
	@Test
	void testRetrieveAppQuotaDetails_application_invalid() {
		assertThrows(IllegalArgumentException.class, () -> {
			QuotaDetails.retrieveAppQuotaDetails(""userid"", ""password"", ""source"", ""application"");
		});
	}
	
	/**
	 * Test case for {@link QuotaDetails#retrieveAppQuotaDetails(String, String, String, String)} method.
	 * It tests the case when the userid, password, source and application are valid.
	 * Expected result: {@link QuotaDetails} is returned.
	 */
	@Test
	void testRetrieveAppQuotaDetails_valid() {
		QuotaDetails quotaDetails = QuotaDetails.retrieveAppQuotaDetails(""userid"", ""password"", ""source"", ""application"");
		assertNotNull(quotaDetails);
	}
}"
