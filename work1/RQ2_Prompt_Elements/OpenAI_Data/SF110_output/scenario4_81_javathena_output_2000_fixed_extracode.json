[
    {
        "id": "cmpl-6x2FNZLmWNSP2l8ZgqKtaqR4JVA6u",
        "object": "text_completion",
        "created": 1679528009,
        "model": "code-davinci-002",
        "choices": [
            {
                "text": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains ten unit test cases for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {\n\t\t\n\t/**\n\t* Test case 1.\n\t* Test the {@link TXTCharacter#load()} method with a valid file.\n\t* The file contains one character.\n\t* The expected result is a {@link IndexedFastMap} containing one {@link ROCharacter}.\n\t*/\n\t@Test\n\tvoid testLoad_1() {\n\t\ttry {\n\t\t\tTXTCharacter txtCharacter = new TXTCharacter();\n\t\t\ttxtCharacter.fileDB = \"test/test_1.txt\";\n\t\t\tIndexedFastMap<Integer, ROCharacter> indexedChar = txtCharacter.load();\n\t\t\tassertEquals(1, indexedChar.size());\n\t\t\tROCharacter character = indexedChar.get(1);\n\t\t\tassertEquals(1, character.getId());\n\t\t\tassertEquals(\"test\", character.getName());\n\t\t\tassertEquals(JOB.NOVICE, character.getJob());\n\t\t\tassertEquals(0, character.getBaseLevel());\n\t\t\tassertEquals(0, character.getJobLevel());\n\t\t\tassertEquals(0, character.getBaseExp());\n\t\t\tassertEquals(0, character.getJobExp());\n\t\t\tassertEquals(0, character.getZeny());\n\t\t\tassertEquals(0, character.getStr());\n\t\t\tassertEquals(0, character.getAgi());\n\t\t\tassertEquals(0, character.getVit());\n\t\t\tassertEquals(0, character.getInt());\n\t\t\tassertEquals(0, character.getDex());\n\t\t\tassertEquals(0, character.getLuk());\n\t\t\tassertEquals(0, character.getMaxHp());\n\t\t\tassertEquals(0, character.getMaxSp());\n\t\t\tassertEquals(0, character.getHp());\n\t\t\tassertEquals(0, character.getSp());\n\t\t\tassertEquals(0, character.getStatusPoints());\n\t\t\tassertEquals(0, character.getSkillPoints());\n\t\t\tassertEquals(0, character.getOption());\n\t\t\tassertEquals(0, character.getKarma());\n\t\t\tassertEquals(0, character.getManner());\n\t\t\tassertEquals(0, character.getPartyId());\n\t\t\tassertEquals(0, character.getGuildId());\n\t\t\tassertEquals(0, character.getPetId());\n\t\t\tassertEquals(0, character.getHair());\n\t\t\tassertEquals(0, character.getHairColor());\n\t\t\tassertEquals(0, character.getClothesColor());\n\t\t\tassertEquals(0, character.getWeapon());\n\t\t\tassertEquals(0, character.getShield());\n\t\t\tassertEquals(0, character.getHeadBottom());\n\t\t\tassertEquals(0, character.getHeadTop());\n\t\t\tassertEquals(0, character.getHeadMid());\n\t\t\tassertEquals(0, character.getHairStyle());\n\t\t\tassertEquals(0, character.getClothesStyle());\n\t\t\tassertEquals(0, character.getLastMap());\n\t\t\tassertEquals(0, character.getLastPoint().getX());\n\t\t\tassertEquals(0, character.getLastPoint().getY());\n\t\t\tassertEquals(0, character.getSavePoint().getX());\n\t\t\tassertEquals(0, character.getSavePoint().getY());\n\t\t\tassertEquals(0, character.getPartnerId());\n\t\t\tassertEquals(0, character.getOnline());\n\t\t\tassertEquals(0, character.getFather());\n\t\t\tassertEquals(0, character.getMother());\n\t\t\tassertEquals(0, character.getChild());\n\t\t\tassertEquals(0, character.getFame());\n\t\t\tassertEquals(0, character.getRename());\n\t\t\tassertEquals(0, character.getDeleteDate());\n\t\t\tassertEquals(0, character.getMoves());\n\t\t\tassertEquals(0, character.getUnbanTime());\n\t\t\tassertEquals(0, character.getFont());\n\t\t\tassertEquals(0, character.getUniqueId());\n\t\t\tassertEquals(0, character.getHotkey().size());\n\t\t\tassertEquals(0, character.getFriends().size());\n\t\t\tassertEquals(0, character.getMails().size());\n\t\t\tassertEquals(0, character.getInventory().size());\n\t\t\tassertEquals(0, character.getCart().size());\n\t\t\tassertEquals(0, character.getSkills().size());\n\t\t\tassertEquals(0, character.getMails().size());\n\t\t} catch (IOException e) {\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n\t\n\t/**\n\t* Test case 2.\n\t* Test the {@link TXTCharacter#load()} method with a valid file.\n\t* The file contains two characters.\n\t* The expected result is a {@link IndexedFastMap} containing two {@link ROCharacter}.\n\t*/\n\t@Test\n\tvoid testLoad_2() {\n}\n}",
                "index": 0,
                "logprobs": null,
                "finish_reason": "length"
            }
        ],
        "usage": {
            "prompt_tokens": 917,
            "completion_tokens": 2000,
            "total_tokens": 2917
        },
        "time_taken": 83.7107744216919,
        "prompt_id": "/EvoSuiteBenchmark/original/81_javathena/src/main/java/org/character/data/TXTCharacter.java",
        "original_code": "// TXTCharacter.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\n\npublic class TXTCharacter implements PersistenteData<IndexedFastMap<Integer, ROCharacter>> {\n\n    private final static String DEFAULT_ACCOUNT_FILE = \"save/athena.txt\";\n\n    private final static int VERSION_LENGTH = 18;\n\n    private final static String DEFAULT_FRIEND_FILE = \"save/friends.txt\";\n\n    private final static String DEFAULT_HOTKEYS_FILE = \"save/hotkeys.txt\";\n\n    private String fileDB = CharConfig.getCharConfig().getDbPath() != null ? CharConfig.getCharConfig().getDbPath() : DEFAULT_ACCOUNT_FILE;\n\n    private String friendDB = DEFAULT_FRIEND_FILE;\n\n    private String hotkeyDB = DEFAULT_HOTKEYS_FILE;\n\n    @Override\n    public void save(IndexedFastMap<Integer, ROCharacter> data) throws IOException;\n\n    /**\n     * Load character under the last format version only version 1500 (homun +\n     * mapindex maps)\n     *\n     * @return indexedChar a fastmap containing loaded characters\n     * @throws MalformedDataException\n     */\n    @Override\n    public IndexedFastMap<Integer, ROCharacter> load() throws IOException;\n\n    private void readHotkeys(IndexedFastMap<Integer, ROCharacter> indexedChar) throws IOException;\n\n    private void readFriend(IndexedFastMap<Integer, ROCharacter> indexedChar) throws IOException;\n\n    private ROCharacter readCharactere(String line) throws MalformedDataException;\n}\n",
        "test_prompt": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains ten unit test cases for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {",
        "original_generated_code": "\n\t/**\n\t* Test case 1.\n\t* Test the {@link TXTCharacter#load()} method with a valid file.\n\t* The file contains one character.\n\t* The expected result is a {@link IndexedFastMap} containing one {@link ROCharacter}.\n\t*/\n\t@Test\n\tvoid testLoad_1() {\n\t\ttry {\n\t\t\tTXTCharacter txtCharacter = new TXTCharacter();\n\t\t\ttxtCharacter.fileDB = \"test/test_1.txt\";\n\t\t\tIndexedFastMap<Integer, ROCharacter> indexedChar = txtCharacter.load();\n\t\t\tassertEquals(1, indexedChar.size());\n\t\t\tROCharacter character = indexedChar.get(1);\n\t\t\tassertEquals(1, character.getId());\n\t\t\tassertEquals(\"test\", character.getName());\n\t\t\tassertEquals(JOB.NOVICE, character.getJob());\n\t\t\tassertEquals(0, character.getBaseLevel());\n\t\t\tassertEquals(0, character.getJobLevel());\n\t\t\tassertEquals(0, character.getBaseExp());\n\t\t\tassertEquals(0, character.getJobExp());\n\t\t\tassertEquals(0, character.getZeny());\n\t\t\tassertEquals(0, character.getStr());\n\t\t\tassertEquals(0, character.getAgi());\n\t\t\tassertEquals(0, character.getVit());\n\t\t\tassertEquals(0, character.getInt());\n\t\t\tassertEquals(0, character.getDex());\n\t\t\tassertEquals(0, character.getLuk());\n\t\t\tassertEquals(0, character.getMaxHp());\n\t\t\tassertEquals(0, character.getMaxSp());\n\t\t\tassertEquals(0, character.getHp());\n\t\t\tassertEquals(0, character.getSp());\n\t\t\tassertEquals(0, character.getStatusPoints());\n\t\t\tassertEquals(0, character.getSkillPoints());\n\t\t\tassertEquals(0, character.getOption());\n\t\t\tassertEquals(0, character.getKarma());\n\t\t\tassertEquals(0, character.getManner());\n\t\t\tassertEquals(0, character.getPartyId());\n\t\t\tassertEquals(0, character.getGuildId());\n\t\t\tassertEquals(0, character.getPetId());\n\t\t\tassertEquals(0, character.getHair());\n\t\t\tassertEquals(0, character.getHairColor());\n\t\t\tassertEquals(0, character.getClothesColor());\n\t\t\tassertEquals(0, character.getWeapon());\n\t\t\tassertEquals(0, character.getShield());\n\t\t\tassertEquals(0, character.getHeadBottom());\n\t\t\tassertEquals(0, character.getHeadTop());\n\t\t\tassertEquals(0, character.getHeadMid());\n\t\t\tassertEquals(0, character.getHairStyle());\n\t\t\tassertEquals(0, character.getClothesStyle());\n\t\t\tassertEquals(0, character.getLastMap());\n\t\t\tassertEquals(0, character.getLastPoint().getX());\n\t\t\tassertEquals(0, character.getLastPoint().getY());\n\t\t\tassertEquals(0, character.getSavePoint().getX());\n\t\t\tassertEquals(0, character.getSavePoint().getY());\n\t\t\tassertEquals(0, character.getPartnerId());\n\t\t\tassertEquals(0, character.getOnline());\n\t\t\tassertEquals(0, character.getFather());\n\t\t\tassertEquals(0, character.getMother());\n\t\t\tassertEquals(0, character.getChild());\n\t\t\tassertEquals(0, character.getFame());\n\t\t\tassertEquals(0, character.getRename());\n\t\t\tassertEquals(0, character.getDeleteDate());\n\t\t\tassertEquals(0, character.getMoves());\n\t\t\tassertEquals(0, character.getUnbanTime());\n\t\t\tassertEquals(0, character.getFont());\n\t\t\tassertEquals(0, character.getUniqueId());\n\t\t\tassertEquals(0, character.getHotkey().size());\n\t\t\tassertEquals(0, character.getFriends().size());\n\t\t\tassertEquals(0, character.getMails().size());\n\t\t\tassertEquals(0, character.getInventory().size());\n\t\t\tassertEquals(0, character.getCart().size());\n\t\t\tassertEquals(0, character.getSkills().size());\n\t\t\tassertEquals(0, character.getMails().size());\n\t\t} catch (IOException e) {\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}\n\t\n\t/**\n\t* Test case 2.\n\t* Test the {@link TXTCharacter#load()} method with a valid file.\n\t* The file contains two characters.\n\t* The expected result is a {@link IndexedFastMap} containing two {@link ROCharacter}.\n\t*/\n\t@Test\n\tvoid testLoad_2() {\n\t\ttry {\n\t\t\tTXTCharacter txtCharacter = new TXTCharacter();\n\t\t\ttxtCharacter.fileDB = \"test/test_2.txt\";\n\t\t\tIndexedFastMap<Integer, ROCharacter> indexedChar = txtCharacter.load();\n\t\t\tassertEquals(2, indexedChar.size());\n\t\t\tROCharacter character = indexedChar.get(1);\n\t\t\tassertEquals(1, character.getId());\n\t\t\tassertEquals(\"test\", character.getName());\n\t\t\tassertEquals(JOB.NOVICE, character.getJob());\n\t\t\tassertEquals(0, character.getBaseLevel());\n\t\t\tassertEquals(0, character.getJobLevel());\n\t\t\tassertEquals(0, character.getBaseExp());\n\t\t\tassertEquals(0, character.getJobExp());\n\t\t\tassertEquals(0, character.getZeny());\n\t\t\tassertEquals(0, character.getStr());\n\t\t\tassertEquals(0, character.getAgi());\n\t\t\tassertEquals(0, character.getVit());\n\t\t\tassertEquals(0, character.getInt());\n\t\t\tassertEquals(0, character.getDex());\n\t\t\tassertEquals(0, character.getLuk());\n\t\t\tassertEquals(0, character.getMaxHp());\n\t\t\tassertEquals(0, character.getMaxSp());\n\t\t\tassertEquals(0, character.getHp());\n\t\t\tassertEquals(0, character.getSp());\n\t\t\tassertEquals(0, character.getStatusPoints());\n\t\t\tassertEquals(0, character.getSkillPoints());\n\t\t\tassertEquals(0, character.getOption());\n\t\t\tassertEquals(0, character.getKarma());\n\t\t\tassertEquals(0, character.getManner());\n\t\t\tassertEquals(0, character.getPartyId());\n\t\t\tassertEquals(0, character.getGuildId());\n\t\t\tassertEquals(0, character.getPetId());\n\t\t\tassertEquals(0, character.getHair());\n\t\t\tassertEquals(0, character.getHairColor());\n\t\t\tassertEquals(0, character.getClothesColor());\n\t\t\tassertEquals(0, character.getWeapon());\n\t\t\tassertEquals(0, character.getShield());\n\t\t\tassertEquals(0, character.getHeadBottom());\n\t\t\tassertEquals(0, character.getHeadTop());\n\t\t\tassertEquals(0, character.getHeadMid());\n\t\t\tassertEquals(0, character.getHairStyle());\n\t\t\tassertEquals(0, character.getClothesStyle());\n\t\t\tassertEquals(0, character.getLastMap());\n\t\t\tassertEquals(0, character.getLastPoint().getX());\n\t\t\tassertEquals(0, character.getLastPoint().getY());\n\t\t\tassertEquals(0,",
        "applied_heuristics": "H7"
    }
]