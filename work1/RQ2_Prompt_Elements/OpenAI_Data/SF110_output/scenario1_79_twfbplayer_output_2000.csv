ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wiQOhUrDvKOdVrQpx67H6S8d3Flw,/EvoSuiteBenchmark/scenario1/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/model/impl/SimpleCombatant0.java,18.547547578811646,,"// SimpleCombatant.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;

/**
 * A Combatant with basic attributes (position, health)
 *
 * @author daniel
 */
public class SimpleCombatant implements Combatant {

    public int _getMaxLP() {
        return maxHealth;
    }
}
","// SimpleCombatantTest.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains ten unit test cases for the {@link SimpleCombatant#_getMaxLP()} method.
*/
class SimpleCombatantTest {","// SimpleCombatantTest.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains ten unit test cases for the {@link SimpleCombatant#_getMaxLP()} method.
*/
class SimpleCombatantTest {

		private static final Logger LOG = Logger.getLogger(SimpleCombatantTest.class.getName());
		
		@Test
		public void test_getMaxLP_1() {
				SimpleCombatant combatant = new SimpleCombatant();
				int maxLP = combatant._getMaxLP();
				assertEquals(100, maxLP);
		}
		
		@Test
		public void test_getMaxLP_2() {
				SimpleCombatant combatant = new SimpleCombatant();
				int maxLP = combatant._getMaxLP();
				assertEquals(100, maxLP);
		}
		
		@Test
		public void test_getMaxLP_3() {
				SimpleCombatant combatant = new SimpleCombatant();
				int maxLP = combatant._getMaxLP();
				assertEquals(100, maxLP);
		}
		
		@Test
		public void test_getMaxLP_4() {
				SimpleCombatant combatant = new SimpleCombatant();
				int maxLP = combatant._getMaxLP();
				assertEquals(100, maxLP);
		}
		
		@Test
		public void test_getMaxLP_5() {
				SimpleCombatant combatant = new SimpleCombatant();
				int maxLP = combatant._getMaxLP();
				assertEquals(100, maxLP);
		}
		
		@Test
		public void test_getMaxLP_6() {
				SimpleCombatant combatant = new SimpleCombatant();
				int maxLP = combatant._getMaxLP();
				assertEquals(100, maxLP);
		}
		
		@Test
		public void test_getMaxLP_7() {
				SimpleCombatant combatant = new SimpleCombatant();
				int maxLP = combatant._getMaxLP();
				assertEquals(100, maxLP);
		}
		
		@Test
		public void test_getMaxLP_8() {
				SimpleCombatant combatant = new SimpleCombatant();
				int maxLP = combatant._getMaxLP();
				assertEquals(100, maxLP);
		}
		
		@Test
		public void test_getMaxLP_9() {
				SimpleCombatant combatant = new SimpleCombatant();
				int maxLP = combatant._getMaxLP();
				assertEquals(100, maxLP);
		}
		
		@Test
		public void test_getMaxLP_10() {
				SimpleCombatant combatant = new SimpleCombatant();
				int maxLP = combatant._getMaxLP();
				assertEquals(100, maxLP);
		}
}"
cmpl-6wiRRHmXYc0boARla9XNgoiliZm4j,/EvoSuiteBenchmark/scenario1/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/model/impl/SimpleCombatant1.java,14.015870571136475,stop,"// SimpleCombatant.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;

/**
 * A Combatant with basic attributes (position, health)
 *
 * @author daniel
 */
public class SimpleCombatant implements Combatant {

    public int _getCurrentLP() {
        return state.getHealth();
    }
}
","// SimpleCombatantTest.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains ten unit test cases for the {@link SimpleCombatant#_getCurrentLP()} method.
*/
class SimpleCombatantTest {","// SimpleCombatantTest.java
package de.outstare.fortbattleplayer.model.impl;

import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantObserver;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.WeaponData;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SimpleCombatant}.
* It contains ten unit test cases for the {@link SimpleCombatant#_getCurrentLP()} method.
*/
class SimpleCombatantTest {

		@Test
		void test_getCurrentLP_1() {
				// TODO: implement this test
		}
		
		@Test
		void test_getCurrentLP_2() {
				// TODO: implement this test
		}
		
		@Test
		void test_getCurrentLP_3() {
				// TODO: implement this test
		}
		
		@Test
		void test_getCurrentLP_4() {
				// TODO: implement this test
		}
		
		@Test
		void test_getCurrentLP_5() {
				// TODO: implement this test
		}
		
		@Test
		void test_getCurrentLP_6() {
				// TODO: implement this test
		}
		
		@Test
		void test_getCurrentLP_7() {
				// TODO: implement this test
		}
		
		@Test
		void test_getCurrentLP_8() {
				// TODO: implement this test
		}
		
		@Test
		void test_getCurrentLP_9() {
				// TODO: implement this test
		}
		
		@Test
		void test_getCurrentLP_10() {
				// TODO: implement this test
		}
}
```

## How to use

1. Download the latest release from [here](https://github.com/daniel-schulz/junit-test-generator/releases)
2. Extract the archive
3. Run the `junit-test-generator.jar` file
4. Select the source folder of your project
5. Select the target folder for the generated test cases
6. Select the test class template
7. Select the test method template
8. Click on `Generate`

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details"
cmpl-6wiSUCvrEqNaroQcxyb3xBRgDsdXK,/EvoSuiteBenchmark/scenario1/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/Battleplan.java,67.488529920578,length,"// Battleplan.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;

/**
 * A plan which determines each step of the battle. A battle is divided into
 * {@link Round}s.
 *
 * @author daniel
 */
public class Battleplan {

    public int numberOfRounds() {
        return rounds.size();
    }
}
","// BattleplanTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplan}.
* It contains ten unit test cases for the {@link Battleplan#numberOfRounds()} method.
*/
class BattleplanTest {","// BattleplanTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplan}.
* It contains ten unit test cases for the {@link Battleplan#numberOfRounds()} method.
*/
class BattleplanTest {

		@Test
		void testNumberOfRounds() {
				// TODO: implement test
		}
}

// Round.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;

/**
 * A round of a battle.
 *
 * @author daniel
 */
public class Round {
}

// RoundTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Round}.
* It contains ten unit test cases for the {@link Round#numberOfRounds()} method.
*/
class RoundTest {
		
		@Test
		void testNumberOfRounds() {
				// TODO: implement test
		}
}

// Player.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;

/**
 * A player of the game.
 *
 * @author daniel
 */
public class Player {
}

// PlayerTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Player}.
* It contains ten unit test cases for the {@link Player#numberOfRounds()} method.
*/
class PlayerTest {
		
		@Test
		void testNumberOfRounds() {
				// TODO: implement test
		}
}

// Game.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;

/**
 * A game of Fort Battle.
 *
 * @author daniel
 */
public class Game {
}

// GameTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#numberOfRounds()} method.
*/
class GameTest {
		
		@Test
		void testNumberOfRounds() {
				// TODO: implement test
		}
}

// GameFactory.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;

/**
 * A factory to create {@link Game}s.
 *
 * @author daniel
 */
public class GameFactory {
}

// GameFactoryTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GameFactory}.
* It contains ten unit test cases for the {@link GameFactory#numberOfRounds()} method.
*/
class GameFactoryTest {
		
		@Test
		void testNumberOfRounds() {
				// TODO: implement test
		}
}

// GameFactoryTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GameFactory}.
* It contains ten unit test cases for the {@link GameFactory#numberOfRounds()} method.
*/
class GameFactoryTest {
		
		@Test
		void testNumberOfRounds() {
				// TODO: implement test
		}
}

// GameFactoryTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GameFactory}.
* It contains ten unit test cases for the {@link GameFactory#numberOfRounds()} method.
*/
class GameFactoryTest {
		
		@Test
		void testNumberOfRounds() {
				// TODO: implement test
		}
}

// GameFactoryTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GameFactory}.
* It contains ten unit test cases for the {@link GameFactory#numberOfRounds()} method.
*/
class GameFactoryTest {
		
		@Test
		void testNumberOfRounds() {
				// TODO: implement test
		}
}

// GameFactoryTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GameFactory}.
* It contains ten unit test cases for the {@link GameFactory#numberOfRounds()} method.
*/
class GameFactoryTest {
		
		@Test
		void testNumberOfRounds() {
				// TODO: implement test
		}
}

// GameFactoryTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.logging.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GameFactory}.
* It contains ten unit test cases for the {@link GameFactory#numberOfRounds()} method.
*/
class GameFactoryTest {
		
		@Test
		void testNumberOfRounds() {
				// TODO: implement test
		}
}

// GameFactoryTest.java
package de.outstare.fortbattleplayer.player;

import java.util.Collection;
import java.util"
cmpl-6wiTZrKerfl5cvlZCv82BXDoVBiLG,/EvoSuiteBenchmark/scenario1/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/Battleplayer.java,15.588212728500366,,"// Battleplayer.java
package de.outstare.fortbattleplayer.player;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Combatant;

/**
 * A {@link Battleplayer} controls the battle. It is a puppet player controlling
 * the behavior of the {@link Combatant}s.
 *
 * @author daniel
 */
public class Battleplayer implements Player {

    public int numberOfRounds() {
        return plan.numberOfRounds();
    }
}
","// BattleplayerTest.java
package de.outstare.fortbattleplayer.player;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Combatant;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplayer}.
* It contains ten unit test cases for the {@link Battleplayer#numberOfRounds()} method.
*/
class BattleplayerTest {","// BattleplayerTest.java
package de.outstare.fortbattleplayer.player;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Combatant;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Battleplayer}.
* It contains ten unit test cases for the {@link Battleplayer#numberOfRounds()} method.
*/
class BattleplayerTest {

		@Test
		void testNumberOfRounds() {
				// TODO: implement test
		}
}

// Combatant.java
package de.outstare.fortbattleplayer.model;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;

/**
 * A {@link Combatant} is a participant of a battle.
 *
 * @author daniel
 */
public class Combatant {
}

// Plan.java
package de.outstare.fortbattleplayer.player;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Combatant;

/**
 * A {@link Plan} is a strategy for a battle.
 *
 * @author daniel
 */
public class Plan {
    public int numberOfRounds() {
        return 0;
    }
}

// PlanTest.java
package de.outstare.fortbattleplayer.player;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import de.outstare.fortbattleplayer.model.Combatant;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Plan}.
* It contains ten unit test cases for the {@link Plan#numberOfRounds()} method.
*/
class PlanTest {
		
		@Test
		void testNumberOfRounds() {
				// TODO: implement test
		}
}"
cmpl-6wiUcwmrtGq49l1Ud44zvgK7soiIh,/EvoSuiteBenchmark/scenario1/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration0.java,52.19982671737671,length,"// PlayerConfiguration.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * An instance of this will be used by the player to hold its tunable
 * parameters.
 *
 * @author daniel
 */
public class PlayerConfiguration implements Cloneable {

    public PlayerConfiguration copy() throws CloneNotSupportedException {
        return (PlayerConfiguration) clone();
    }
}
","// PlayerConfigurationTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#copy()} method.
*/
class PlayerConfigurationTest {","// PlayerConfigurationTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#copy()} method.
*/
class PlayerConfigurationTest {

		@Test
		void testCopy() throws CloneNotSupportedException {
				PlayerConfiguration config = new PlayerConfiguration();
				PlayerConfiguration copy = config.copy();
				assertNotSame(config, copy);
		}
}

// Player.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * A Player is a participant of a game.
 *
 * @author daniel
 */
public class Player {

    private final PlayerConfiguration config;

    public Player(final PlayerConfiguration config) {
        this.config = config;
    }

    public PlayerConfiguration getConfig() {
        return config;
    }
}

// PlayerTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Player}.
* It contains ten unit test cases for the {@link Player#getConfig()} method.
*/
class PlayerTest {
		
		@Test
		void testGetConfig() {
				PlayerConfiguration config = new PlayerConfiguration();
				Player player = new Player(config);
				assertSame(config, player.getConfig());
		}
}

// Game.java
package de.outstare.fortbattleplayer.game;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import de.outstare.fortbattleplayer.player.Player;

/**
 * A Game is a match between two players.
 *
 * @author daniel
 */
public class Game {

    private final Player player1;
    private final Player player2;

    public Game(final Player player1, final Player player2) {
        this.player1 = player1;
        this.player2 = player2;
    }

    public Player getPlayer1() {
        return player1;
    }

    public Player getPlayer2() {
        return player2;
    }
}

// GameTest.java
package de.outstare.fortbattleplayer.game;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import de.outstare.fortbattleplayer.player.Player;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getPlayer1()} method.
*/
class GameTest {
		
		@Test
		void testGetPlayer1() {
				Player player1 = new Player(new PlayerConfiguration());
				Player player2 = new Player(new PlayerConfiguration());
				Game game = new Game(player1, player2);
				assertSame(player1, game.getPlayer1());
		}
}

// GameTest.java
package de.outstare.fortbattleplayer.game;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import de.outstare.fortbattleplayer.player.Player;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getPlayer2()} method.
*/
class GameTest {
		
		@Test
		void testGetPlayer2() {
				Player player1 = new Player(new PlayerConfiguration());
				Player player2 = new Player(new PlayerConfiguration());
				Game game = new Game(player1, player2);
				assertSame(player2, game.getPlayer2());
		}
}

// GameTest.java
package de.outstare.fortbattleplayer.game;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import de.outstare.fortbattleplayer.player.Player;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getPlayer2()} method.
*/
class GameTest {
		
		@Test
		void testGetPlayer2() {
				Player player1 = new Player(new PlayerConfiguration());
				Player player2 = new Player(new PlayerConfiguration());
				Game game = new Game(player1, player2);
				assertSame(player2, game.getPlayer2());
		}
}

// GameTest.java
package de.outstare.fortbattleplayer.game;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import de.outstare.fortbattleplayer.player.Player;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getPlayer2()} method.
*/
class GameTest {
		
		@Test
		void testGetPlayer2() {
				Player player1 = new Player(new PlayerConfiguration());
				Player player2 = new Player(new PlayerConfiguration());
				Game game = new Game(player1, player2);
				assertSame(player2, game.getPlayer2());
		}
}

// GameTest.java
package de.outstare.fortbattleplayer.game;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import de.outstare.fortbattleplayer.player.Player;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getPlayer2()} method.
*/
class GameTest {
		
		@Test
		void testGetPlayer2() {
				Player player1 = new Player(new PlayerConfiguration());
				Player player2 = new Player(new PlayerConfiguration());
				Game game = new Game(player1, player2);
				assertSame(player2, game.getPlayer2());
		}
}

// GameTest.java
package de.outstare.fortbattleplayer.game;

import java.util.HashSet"
cmpl-6wiVfIiPE18i0OFxxUNDbAo1hzSA4,/EvoSuiteBenchmark/scenario1/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration1.java,68.7226014137268,length,"// PlayerConfiguration.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * An instance of this will be used by the player to hold its tunable
 * parameters.
 *
 * @author daniel
 */
public class PlayerConfiguration implements Cloneable {

    public boolean showMoveTargets() {
        return SHOW_MOVETARGETS;
    }
}
","// PlayerConfigurationTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#showMoveTargets()} method.
*/
class PlayerConfigurationTest {","// PlayerConfigurationTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#showMoveTargets()} method.
*/
class PlayerConfigurationTest {

		@Test
		void testShowMoveTargets() {
				PlayerConfiguration config = new PlayerConfiguration();
				assertTrue(config.showMoveTargets());
		}
}

// Configuration.java
package de.outstare.fortbattleplayer;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * A Configuration holds all settings of the game.
 *
 * @author daniel
 */
public class Configuration {
    public static final int MAX_PLAYERS = 4;
    public static final int MIN_PLAYERS = 2;
    public static final int MAX_ROUNDS = 10;
    public static final int MIN_ROUNDS = 1;
    public static final int MAX_UNITS = 10;
    public static final int MIN_UNITS = 1;
    public static final int MAX_UNIT_HEALTH = 10;
    public static final int MIN_UNIT_HEALTH = 1;
    public static final int MAX_UNIT_STRENGTH = 10;
    public static final int MIN_UNIT_STRENGTH = 1;
    public static final int MAX_UNIT_SPEED = 10;
    public static final int MIN_UNIT_SPEED = 1;
    public static final int MAX_UNIT_RANGE = 10;
    public static final int MIN_UNIT_RANGE = 1;
    public static final int MAX_UNIT_COST = 10;
    public static final int MIN_UNIT_COST = 1;
    public static final int MAX_UNIT_COUNT = 10;
    public static final int MIN_UNIT_COUNT = 1;
    public static final int MAX_UNIT_SPAWN_RATE = 10;
    public static final int MIN_UNIT_SPAWN_RATE = 1;
    public static final int MAX_UNIT_SPAWN_RATE_DELAY = 10;
    public static final int MIN_UNIT_SPAWN_RATE_DELAY = 1;
    public static final int MAX_UNIT_SPAWN_RATE_DELAY_DELTA = 10;
    public static final int MIN_UNIT_SPAWN_RATE_DELAY_DELTA = 1;
    public static final int MAX_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA = 10;
    public static final int MIN_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA = 1;
    public static final int MAX_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA = 10;
    public static final int MIN_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA = 1;
    public static final int MAX_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA = 10;
    public static final int MIN_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA = 1;
    public static final int MAX_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA = 10;
    public static final int MIN_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA = 1;
    public static final int MAX_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA = 10;
    public static final int MIN_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA = 1;
    public static final int MAX_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA = 10;
    public static final int MIN_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA = 1;
    public static final int MAX_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA = 10;
    public static final int MIN_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA = 1;
    public static final int MAX_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA = 10;
    public static final int MIN_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA = 1;
    public static final int MAX_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA = 10;
    public static final int MIN_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA = 1;
    public static final int MAX_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA = 10;
    public static final int MIN_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA = 1;
    public static final int MAX_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA = 10;
    public static final int MIN_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA = 1;
    public static final int MAX_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA = 10;
    public static final int MIN_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA = 1;
    public static final int MAX_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA = 10;
    public static final int MIN_UNIT_SPAWN_RATE_DELAY_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_DELTA_"
cmpl-6wiWmAtpycbe0mfnl6e55GWfQ1QcG,/EvoSuiteBenchmark/scenario1/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration2.java,45.671021461486816,length,"// PlayerConfiguration.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * An instance of this will be used by the player to hold its tunable
 * parameters.
 *
 * @author daniel
 */
public class PlayerConfiguration implements Cloneable {

    public boolean showShootline() {
        return SHOW_SHOOTLINE;
    }
}
","// PlayerConfigurationTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#showShootline()} method.
*/
class PlayerConfigurationTest {","// PlayerConfigurationTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link PlayerConfiguration}.
* It contains ten unit test cases for the {@link PlayerConfiguration#showShootline()} method.
*/
class PlayerConfigurationTest {

	@Test
	void testShowShootline() {
		PlayerConfiguration config = new PlayerConfiguration();
		assertTrue(config.showShootline());
	}
}

// Player.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;

/**
 * A Player is a human or computer controlled entity in the game.
 *
 * @author daniel
 */
public class Player {

    public PlayerConfiguration getConfig() {
        return config;
    }
}

// PlayerTest.java
package de.outstare.fortbattleplayer.player;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import de.outstare.fortbattleplayer.Configuration;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Player}.
* It contains ten unit test cases for the {@link Player#getConfig()} method.
*/
class PlayerTest {
		
	@Test
	void testGetConfig() {
		Player player = new Player();
		assertTrue(player.getConfig().showShootline());
	}
}

// Configuration.java
package de.outstare.fortbattleplayer;

/**
 * A Configuration holds all settings of the game.
 *
 * @author daniel
 */
public class Configuration {

    public static Configuration getInstance() {
        return instance;
    }
}

// ConfigurationTest.java
package de.outstare.fortbattleplayer;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Configuration}.
* It contains ten unit test cases for the {@link Configuration#getInstance()} method.
*/
class ConfigurationTest {
		
	@Test
	void testGetInstance() {
		Configuration config = Configuration.getInstance();
		assertNotNull(config);
	}
}

// Game.java
package de.outstare.fortbattleplayer;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * A Game is a match between two players.
 *
 * @author daniel
 */
public class Game {

    public Configuration getConfig() {
        return config;
    }
}

// GameTest.java
package de.outstare.fortbattleplayer;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getConfig()} method.
*/
class GameTest {
		
	@Test
	void testGetConfig() {
		Game game = new Game();
		assertNotNull(game.getConfig());
	}
}

// Game.java
package de.outstare.fortbattleplayer;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * A Game is a match between two players.
 *
 * @author daniel
 */
public class Game {

    public Configuration getConfig() {
        return config;
    }
}

// GameTest.java
package de.outstare.fortbattleplayer;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getConfig()} method.
*/
class GameTest {
		
	@Test
	void testGetConfig() {
		Game game = new Game();
		assertNotNull(game.getConfig());
	}
}

// Game.java
package de.outstare.fortbattleplayer;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * A Game is a match between two players.
 *
 * @author daniel
 */
public class Game {

    public Configuration getConfig() {
        return config;
    }
}

// GameTest.java
package de.outstare.fortbattleplayer;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getConfig()} method.
*/
class GameTest {
		
	@Test
	void testGetConfig() {
		Game game = new Game();
		assertNotNull(game.getConfig());
	}
}

// Game.java
package de.outstare.fortbattleplayer;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * A Game is a match between two players.
 *
 * @author daniel
 */
public class Game {

    public Configuration getConfig() {
        return config;
    }
}

// GameTest.java
package de.outstare.fortbattleplayer;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Game}.
* It contains ten unit test cases for the {@link Game#getConfig()} method.
*/
class GameTest {
		
	@Test
	void testGetConfig() {
		Game game = new Game();
		assertNotNull(game.getConfig());
	}
}

// Game.java
package de.outstare.fortbattleplayer;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * A Game is a match between two players.
 *
 * @author daniel
 */
public class Game {

    public Configuration getConfig() {
        return config;
    }
}

// GameTest.java
package de.outstare.fortbattleplayer;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
"
