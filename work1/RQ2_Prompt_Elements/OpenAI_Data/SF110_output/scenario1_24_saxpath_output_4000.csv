ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
cmpl-6wuZuhN4VqB9robCalp9atcdsKabn,/EvoSuiteBenchmark/scenario1/24_saxpath/src/main/java/saxpath/helpers/XPathReaderFactory0.java,160.47348642349243,length,"// XPathReaderFactory.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;

/**
 * Create an {@link org.saxpath.XPathReader} from
 *  either a system property, or a named class.
 *
 *  <p>
 *  Similar to the SAX API, the <code>XPathReaderFactory</code>
 *  can create an <code>XPathReader</code> from a name of a
 *  class passed in directly, or by inspecting the system
 *  property <code>org.saxpath.driver</code>.
 *
 * @author bob mcwhirter (bob@werken.com)
 */
public class XPathReaderFactory {

    public static XPathReader createReader() throws SAXPathException {
        String className = null;
        boolean securityException = false;
        try {
            className = System.getProperty(DRIVER_PROPERTY);
        } catch (SecurityException e) {
            securityException = true;
        }
        if (className == null || """".equals(className)) {
            if (USE_DEFAULT) {
                className = DEFAULT_DRIVER;
            } else {
                if (securityException) {
                    throw new SAXPathException(""Reading of property "" + DRIVER_PROPERTY + "" disallowed."");
                } else {
                    throw new SAXPathException(""Property "" + DRIVER_PROPERTY + "" not set"");
                }
            }
        }
        return createReader(className);
    }
}
","// XPathReaderFactoryTest.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XPathReaderFactory}.
* It contains ten unit test cases for the {@link XPathReaderFactory#createReader()} method.
*/
class XPathReaderFactoryTest {","// XPathReaderFactoryTest.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XPathReaderFactory}.
* It contains ten unit test cases for the {@link XPathReaderFactory#createReader()} method.
*/
class XPathReaderFactoryTest {

	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name.
	*/
	@Test
	public void testCreateReader_ValidClassName() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader"");
		XPathReader reader = XPathReaderFactory.createReader();
		assertNotNull(reader);
		assertTrue(reader instanceof TestXPathReader);
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to an invalid class name.
	*/
	@Test
	public void testCreateReader_InvalidClassName() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$InvalidTestXPathReader"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class is not an instance of {@link XPathReader}.
	*/
	@Test
	public void testCreateReader_ValidClassName_NotInstanceOfXPathReader() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReaderFactory"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class is not public.
	*/
	@Test
	public void testCreateReader_ValidClassName_NotPublic() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_NotPublic"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class is abstract.
	*/
	@Test
	public void testCreateReader_ValidClassName_Abstract() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_Abstract"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class does not have a public no-argument constructor.
	*/
	@Test
	public void testCreateReader_ValidClassName_NoPublicNoArgConstructor() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_NoPublicNoArgConstructor"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class does not have a public no-argument constructor.
	*/
	@Test
	public void testCreateReader_ValidClassName_NoPublicNoArgConstructor_Private() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_NoPublicNoArgConstructor_Private"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class does not have a public no-argument constructor.
	*/
	@Test
	public void testCreateReader_ValidClassName_NoPublicNoArgConstructor_Protected() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_NoPublicNoArgConstructor_Protected"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class does not have a public no-argument constructor.
	*/
	@Test
	public void testCreateReader_ValidClassName_NoPublicNoArgConstructor_PackagePrivate() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_NoPublicNoArgConstructor_PackagePrivate"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class does not have a public no-argument constructor.
	*/
	@Test
	public void testCreateReader_ValidClassName_NoPublicNoArgConstructor_Argument() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_NoPublicNoArgConstructor_Argument"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class does not have a public no-argument constructor.
	*/
	@Test
	public void testCreateReader_ValidClassName_NoPublicNoArgConstructor_Exception() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_NoPublicNoArgConstructor_Exception"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class does not have a public no-argument constructor.
	*/
	@Test
	public void testCreateReader_ValidClassName_NoPublicNoArgConstructor_Error() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_NoPublicNoArgConstructor_Error"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class does not have a public no-argument constructor.
	*/
	@Test
	public void testCreateReader_ValidClassName_NoPublicNoArgConstructor_Throwable() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_NoPublicNoArgConstructor_Throwable"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class does not have a public no-argument constructor.
	*/
	@Test
	public void testCreateReader_ValidClassName_NoPublicNoArgConstructor_RuntimeException() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_NoPublicNoArgConstructor_RuntimeException"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class does not have a public no-argument constructor.
	*/
	@Test
	public void testCreateReader_ValidClassName_NoPublicNoArgConstructor_SAXPathException() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_NoPublicNoArgConstructor_SAXPathException"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class does not have a public no-argument constructor.
	*/
	@Test
	public void testCreateReader_ValidClassName_NoPublicNoArgConstructor_SAXPathRuntimeException() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_NoPublicNoArgConstructor_SAXPathRuntimeException"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class does not have a public no-argument constructor.
	*/
	@Test
	public void testCreateReader_ValidClassName_NoPublicNoArgConstructor_SAXPathParseException() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_NoPublicNoArgConstructor_SAXPathParseException"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class does not have a public no-argument constructor.
	*/
	@Test
	public void testCreateReader_ValidClassName_NoPublicNoArgConstructor_SAXPathException_Argument() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_NoPublicNoArgConstructor_SAXPathException_Argument"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class does not have a public no-argument constructor.
	*/
	@Test
	public void testCreateReader_ValidClassName_NoPublicNoArgConstructor_SAXPathException_Throwable() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_NoPublicNoArgConstructor_SAXPathException_Throwable"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class does not have a public no-argument constructor.
	*/
	@Test
	public void testCreateReader_ValidClassName_NoPublicNoArgConstructor_SAXPathException_Throwable_Argument() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_NoPublicNoArgConstructor_SAXPathException_Throwable_Argument"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class does not have a public no-argument constructor.
	*/
	@Test
	public void testCreateReader_ValidClassName_NoPublicNoArgConstructor_SAXPathException_Throwable_Argument_Argument() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_NoPublicNoArgConstructor_SAXPathException_Throwable_Argument_Argument"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class does not have a public no-argument constructor.
	*/
	@Test
	public void testCreateReader_ValidClassName_NoPublicNoArgConstructor_SAXPathException_Throwable_Argument_Argument_Argument() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_NoPublicNoArgConstructor_SAXPathException_Throwable_Argument_Argument_Argument"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class does not have a public no-argument constructor.
	*/
	@Test
	public void testCreateReader_ValidClassName_NoPublicNoArgConstructor_SAXPathException_Throwable_Argument_Argument_Argument_Argument() throws SAXPathException {
		System.setProperty(XPathReaderFactory.DRIVER_PROPERTY, ""org.saxpath.helpers.XPathReaderFactoryTest$TestXPathReader_NoPublicNoArgConstructor_SAXPathException_Throwable_Argument_Argument_Argument_Argument"");
		assertThrows(SAXPathException.class, () -> XPathReaderFactory.createReader());
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader()} method.
	* It tests the case when the system property is set to a valid class name but the class does not have a public no-argument constructor.
	*/
	@Test
	public void testCreateReader_ValidClassName_NoPublicNoArgConstructor_SAXPathException_Throwable_"
cmpl-6wucVlTCt39BhZEv7ZH2sakhhCxHg,/EvoSuiteBenchmark/scenario1/24_saxpath/src/main/java/saxpath/helpers/XPathReaderFactory1.java,196.46175408363342,length,"// XPathReaderFactory.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;

/**
 * Create an {@link org.saxpath.XPathReader} from
 *  either a system property, or a named class.
 *
 *  <p>
 *  Similar to the SAX API, the <code>XPathReaderFactory</code>
 *  can create an <code>XPathReader</code> from a name of a
 *  class passed in directly, or by inspecting the system
 *  property <code>org.saxpath.driver</code>.
 *
 * @author bob mcwhirter (bob@werken.com)
 */
public class XPathReaderFactory {

    public static XPathReader createReader(String className) throws SAXPathException {
        Class readerClass = null;
        XPathReader reader = null;
        try {
            // Use the full version of Class.forName(), so as to
            // work better in sandboxed environments, such as
            // Servlet contains, and Applets.
            readerClass = Class.forName(className, true, XPathReaderFactory.class.getClassLoader());
            // Double-check that it's actually the right kind of class
            // before attempting instantiation.
            if (!XPathReader.class.isAssignableFrom(readerClass)) {
                throw new SAXPathException(""Class ["" + className + ""] does not implement the org.saxpath.XPathReader interface."");
            }
        } catch (ClassNotFoundException e) {
            throw new SAXPathException(e.getMessage());
        }
        try {
            reader = (XPathReader) readerClass.newInstance();
        } catch (IllegalAccessException e) {
            throw new SAXPathException(e.getMessage());
        } catch (InstantiationException e) {
            throw new SAXPathException(e.getMessage());
        }
        if (reader == null) {
            throw new SAXPathException(""Unable to create XPathReader"");
        }
        return reader;
    }
}
","// XPathReaderFactoryTest.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XPathReaderFactory}.
* It contains ten unit test cases for the {@link XPathReaderFactory#createReader(String)} method.
*/
class XPathReaderFactoryTest {","// XPathReaderFactoryTest.java
package org.saxpath.helpers;

import org.saxpath.XPathReader;
import org.saxpath.SAXPathException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XPathReaderFactory}.
* It contains ten unit test cases for the {@link XPathReaderFactory#createReader(String)} method.
*/
class XPathReaderFactoryTest {

	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case when the class name is null.
	*/
	@Test
	void testCreateReader_NullClassName() {
		try {
			XPathReaderFactory.createReader(null);
			fail(""Expected SAXPathException"");
		} catch (SAXPathException e) {
			assertEquals(""Class name cannot be null"", e.getMessage());
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case when the class name is empty.
	*/
	@Test
	void testCreateReader_EmptyClassName() {
		try {
			XPathReaderFactory.createReader("""");
			fail(""Expected SAXPathException"");
		} catch (SAXPathException e) {
			assertEquals(""Class name cannot be empty"", e.getMessage());
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case when the class name is not found.
	*/
	@Test
	void testCreateReader_ClassNotFound() {
		try {
			XPathReaderFactory.createReader(""org.saxpath.helpers.XPathReaderFactoryTest"");
			fail(""Expected SAXPathException"");
		} catch (SAXPathException e) {
			assertEquals(""Class [org.saxpath.helpers.XPathReaderFactoryTest] not found"", e.getMessage());
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case when the class name is not an instance of XPathReader.
	*/
	@Test
	void testCreateReader_ClassNotInstanceOfXPathReader() {
		try {
			XPathReaderFactory.createReader(""java.lang.String"");
			fail(""Expected SAXPathException"");
		} catch (SAXPathException e) {
			assertEquals(""Class [java.lang.String] does not implement the org.saxpath.XPathReader interface."", e.getMessage());
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case when the class name is an instance of XPathReader but it cannot be instantiated.
	*/
	@Test
	void testCreateReader_ClassNotInstantiable() {
		try {
			XPathReaderFactory.createReader(""org.saxpath.helpers.XPathReaderFactory"");
			fail(""Expected SAXPathException"");
		} catch (SAXPathException e) {
			assertEquals(""Unable to create XPathReader"", e.getMessage());
		}
	}
	
	/**
	* Test case for {@link XPathReaderFactory#createReader(String)} method.
	* It tests the case when the class name is an instance of XPathReader and it can be instantiated.
	*/
	@Test
	void testCreateReader_ClassInstantiable() {
		try {
			XPathReader reader = XPathReaderFactory.createReader(""org.saxpath.XPathReaderImpl"");
			assertNotNull(reader);
		} catch (SAXPathException e) {
			fail(""Unexpected SAXPathException"");
		}
	}
}

// XPathReaderImpl.java
package org.saxpath;

import org.saxpath.helpers.DefaultXPathHandler;
import org.saxpath.helpers.XPathReaderFactory;
import org.saxpath.helpers.XPathReader;
import org.saxpath.helpers.XPathHandler;
import org.saxpath.helpers.XPathHandlerResolver;
import org.saxpath.helpers.XPathHandlerResolverImpl;
import org.saxpath.helpers.XPathHandlerResolverException;
import org.saxpath.helpers.XPathHandlerResolverFactory;
import org.saxpath.helpers.XPathHandlerResolverFactoryImpl;
import org.saxpath.helpers.XPathHandlerResolverFactoryException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeError;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationRuntimeException;
import org.saxpath.helpers.XPathHandlerResolverFactoryConfigurationAssertionError;
import org.saxpath.helpers"
