[
  {
    "numberTests": "ten",
    "original_code": "// JniInchiStereo0D.java\npackage net.sf.jniinchi;\n\n/**\n * Encapsulates properites of InChI Stereo Parity.  See \u003ctt\u003einchi_api.h\u003c/tt\u003e.\n *\n * @author Sam Adams\n */\npublic class JniInchiStereo0D {\n\n    /**\n     * Indicates non-existent (central) atom. Value from inchi_api.h.\n     */\n    public static final int NO_ATOM \u003d -1;\n\n    /**\n     * Neighbouring atoms.\n     */\n    private JniInchiAtom[] neighbors \u003d new JniInchiAtom[4];\n\n    /**\n     * Central atom.\n     */\n    private JniInchiAtom centralAtom;\n\n    /**\n     * Stereo parity type.\n     */\n    private INCHI_STEREOTYPE type;\n\n    /**\n     * Parity.\n     */\n    private INCHI_PARITY parity;\n\n    /**\n     * Second parity (for disconnected systems).\n     */\n    private INCHI_PARITY disconParity \u003d INCHI_PARITY.NONE;\n\n    /**\n     * Constructor.  See \u003ctt\u003einchi_api.h\u003c/tt\u003e for details of usage.\n     *\n     * @see createNewTetrahedralStereo0D()\n     * @see createNewDoublebondStereo0D()\n     *\n     * @param atC    Central atom\n     * @param at0    Neighbour atom 0\n     * @param at1    Neighbour atom 1\n     * @param at2    Neighbour atom 2\n     * @param at3    Neighbour atom 3\n     * @param type          Stereo parity type\n     * @param parity    Parity\n     */\n    public JniInchiStereo0D(final JniInchiAtom atC, final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, final INCHI_STEREOTYPE type, final INCHI_PARITY parity) {\n    }\n\n    JniInchiStereo0D(final JniInchiAtom atC, final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, final int type, final int parity) {\n    }\n\n    /**\n     * Set second parity (for disconnected systems)\n     * @param parity\n     */\n    public void setDisconnectedParity(final INCHI_PARITY parity);\n\n    /**\n     * Returns central atom of stereo parity.\n     * @return\n     */\n    public JniInchiAtom getCentralAtom();\n\n    /**\n     * Returns neighboring atoms of stereo parity.\n     * @return\n     */\n    public JniInchiAtom[] getNeighbors();\n\n    public JniInchiAtom getNeighbor(int i);\n\n    /**\n     * Returns parity.\n     * @return\n     */\n    public INCHI_PARITY getParity();\n\n    /**\n     * Returns disconnected parity.\n     * @return\n     */\n    public INCHI_PARITY getDisconnectedParity();\n\n    /**\n     * Returns type of stereochemistry.\n     * @return\n     */\n    public INCHI_STEREOTYPE getStereoType();\n\n    /**\n     * Generates string representation of information on stereo parity,\n     * for debugging purposes.\n     */\n    public String getDebugString();\n\n    /**\n     * Outputs information on stereo parity, for debugging purposes.\n     */\n    public void debug();\n\n    /**\n     * \u003cp\u003eConvenience method for generating 0D stereo parities at tetrahedral\n     * atom centres.\n     *\n     * \u003cp\u003e\u003cb\u003eUsage notes from \u003ci\u003einchi_api.h\u003c/i\u003e:\u003c/b\u003e\n     * \u003cpre\u003e\n     *  4 neighbors\n     *\n     *           X                    neighbor[4] : {#W, #X, #Y, #Z}\n     *           |                    central_atom: #A\n     *        W--A--Y                 type        : INCHI_StereoType_Tetrahedral\n     *           |\n     *           Z\n     *  parity: if (X,Y,Z) are clockwize when seen from W then parity is \u0027e\u0027 otherwise \u0027o\u0027\n     *  Example (see AXYZW above): if W is above the plane XYZ then parity \u003d \u0027e\u0027\n     *\n     *  3 neighbors\n     *\n     *             Y          Y       neighbor[4] : {#A, #X, #Y, #Z}\n     *            /          /        central_atom: #A\n     *        X--A  (e.g. O\u003dS   )     type        : INCHI_StereoType_Tetrahedral\n     *            \\          \\\n     *             Z          Z\n     *\n     *  parity: if (X,Y,Z) are clockwize when seen from A then parity is \u0027e\u0027,\n     *                                                         otherwise \u0027o\u0027\n     *  unknown parity \u003d \u0027u\u0027\n     *  Example (see AXYZ above): if A is above the plane XYZ then parity \u003d \u0027e\u0027\n     *  This approach may be used also in case of an implicit H attached to A.\n     *\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *  Note. Correspondence to CML 0D stereo parities\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *  a list of 4 atoms corresponds to CML atomRefs4\n     *\n     *  tetrahedral atom\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *  CML atomParity \u003e 0 \u003c\u003d\u003e INCHI_PARITY_EVEN\n     *  CML atomParity \u003c 0 \u003c\u003d\u003e INCHI_PARITY_ODD\n     *\n     *                               | 1   1   1   1  |  where xW is x-coordinate of\n     *                               | xW  xX  xY  xZ |  atom W, etc. (xyz is a\n     *  CML atomParity \u003d determinant | yW  yX  yY  yZ |  \u0027right-handed\u0027 Cartesian\n     *                               | zW  zX  xY  zZ |  coordinate system)\n     * \u003c/pre\u003e\n     *\n     * @param atC    Central atom\n     * @param at0    Neighbour atom 0\n     * @param at1    Neighbour atom 1\n     * @param at2    Neighbour atom 2\n     * @param at3    Neighbour atom 3\n     * @param parity Parity\n     */\n    public static JniInchiStereo0D createNewTetrahedralStereo0D(final JniInchiAtom atC, final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, INCHI_PARITY parity);\n\n    /**\n     * \u003cp\u003eConvenience method for generating 0D stereo parities at stereogenic\n     * double bonds.\n     *\n     * \u003cp\u003e\u003cb\u003eUsage notes from \u003ci\u003einchi_api.h\u003c/i\u003e:\u003c/b\u003e\n     * \u003cpre\u003e\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *  stereogenic bond \u003eA\u003dB\u003c or cumulene \u003eA\u003dC\u003dC\u003dB\u003c\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *\n     *                              neighbor[4]  : {#X,#A,#B,#Y} in this order\n     *  X                           central_atom : NO_ATOM\n     *   \\            X      Y      type         : INCHI_StereoType_DoubleBond\n     *    A\u003d\u003dB         \\    /\n     *        \\         A\u003d\u003dB\n     *         Y\n     *\n     *  parity\u003d \u0027e\u0027    parity\u003d \u0027o\u0027   unknown parity \u003d \u0027u\u0027\n     *\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *  Note. Correspondence to CML 0D stereo parities\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *\n     *  stereogenic double bond and (not yet defined in CML) cumulenes\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *  CML \u0027C\u0027 (cis)      \u003c\u003d\u003e INCHI_PARITY_ODD\n     *  CML \u0027T\u0027 (trans)    \u003c\u003d\u003e INCHI_PARITY_EVEN\n     * \u003c/pre\u003e\n     *\n     * @param at0    Neighbour atom 0\n     * @param at1    Neighbour atom 1\n     * @param at2    Neighbour atom 2\n     * @param at3    Neighbour atom 3\n     * @param parity Parity\n     * @return\n     */\n    public static JniInchiStereo0D createNewDoublebondStereo0D(final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, final INCHI_PARITY parity);\n\n    int getInchiStereoType();\n\n    int getInchiParity();\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiStereo0D",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStereo0D_0Test.java",
    "test_prompt": "// JniInchiStereo0D_0Test.java\npackage net.sf.jniinchi;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStereo0D}.\n* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.\n*/\nclass JniInchiStereo0D_0Test {",
    "method_signature": "createNewTetrahedralStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// JniInchiStereo0D.java\npackage net.sf.jniinchi;\n\n/**\n * Encapsulates properites of InChI Stereo Parity.  See \u003ctt\u003einchi_api.h\u003c/tt\u003e.\n *\n * @author Sam Adams\n */\npublic class JniInchiStereo0D {\n\n    /**\n     * Indicates non-existent (central) atom. Value from inchi_api.h.\n     */\n    public static final int NO_ATOM \u003d -1;\n\n    /**\n     * Neighbouring atoms.\n     */\n    private JniInchiAtom[] neighbors \u003d new JniInchiAtom[4];\n\n    /**\n     * Central atom.\n     */\n    private JniInchiAtom centralAtom;\n\n    /**\n     * Stereo parity type.\n     */\n    private INCHI_STEREOTYPE type;\n\n    /**\n     * Parity.\n     */\n    private INCHI_PARITY parity;\n\n    /**\n     * Second parity (for disconnected systems).\n     */\n    private INCHI_PARITY disconParity \u003d INCHI_PARITY.NONE;\n\n    /**\n     * Constructor.  See \u003ctt\u003einchi_api.h\u003c/tt\u003e for details of usage.\n     *\n     * @see createNewTetrahedralStereo0D()\n     * @see createNewDoublebondStereo0D()\n     *\n     * @param atC    Central atom\n     * @param at0    Neighbour atom 0\n     * @param at1    Neighbour atom 1\n     * @param at2    Neighbour atom 2\n     * @param at3    Neighbour atom 3\n     * @param type          Stereo parity type\n     * @param parity    Parity\n     */\n    public JniInchiStereo0D(final JniInchiAtom atC, final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, final INCHI_STEREOTYPE type, final INCHI_PARITY parity) {\n    }\n\n    JniInchiStereo0D(final JniInchiAtom atC, final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, final int type, final int parity) {\n    }\n\n    /**\n     * Set second parity (for disconnected systems)\n     * @param parity\n     */\n    public void setDisconnectedParity(final INCHI_PARITY parity);\n\n    /**\n     * Returns central atom of stereo parity.\n     * @return\n     */\n    public JniInchiAtom getCentralAtom();\n\n    /**\n     * Returns neighboring atoms of stereo parity.\n     * @return\n     */\n    public JniInchiAtom[] getNeighbors();\n\n    public JniInchiAtom getNeighbor(int i);\n\n    /**\n     * Returns parity.\n     * @return\n     */\n    public INCHI_PARITY getParity();\n\n    /**\n     * Returns disconnected parity.\n     * @return\n     */\n    public INCHI_PARITY getDisconnectedParity();\n\n    /**\n     * Returns type of stereochemistry.\n     * @return\n     */\n    public INCHI_STEREOTYPE getStereoType();\n\n    /**\n     * Generates string representation of information on stereo parity,\n     * for debugging purposes.\n     */\n    public String getDebugString();\n\n    /**\n     * Outputs information on stereo parity, for debugging purposes.\n     */\n    public void debug();\n\n    /**\n     * \u003cp\u003eConvenience method for generating 0D stereo parities at tetrahedral\n     * atom centres.\n     *\n     * \u003cp\u003e\u003cb\u003eUsage notes from \u003ci\u003einchi_api.h\u003c/i\u003e:\u003c/b\u003e\n     * \u003cpre\u003e\n     *  4 neighbors\n     *\n     *           X                    neighbor[4] : {#W, #X, #Y, #Z}\n     *           |                    central_atom: #A\n     *        W--A--Y                 type        : INCHI_StereoType_Tetrahedral\n     *           |\n     *           Z\n     *  parity: if (X,Y,Z) are clockwize when seen from W then parity is \u0027e\u0027 otherwise \u0027o\u0027\n     *  Example (see AXYZW above): if W is above the plane XYZ then parity \u003d \u0027e\u0027\n     *\n     *  3 neighbors\n     *\n     *             Y          Y       neighbor[4] : {#A, #X, #Y, #Z}\n     *            /          /        central_atom: #A\n     *        X--A  (e.g. O\u003dS   )     type        : INCHI_StereoType_Tetrahedral\n     *            \\          \\\n     *             Z          Z\n     *\n     *  parity: if (X,Y,Z) are clockwize when seen from A then parity is \u0027e\u0027,\n     *                                                         otherwise \u0027o\u0027\n     *  unknown parity \u003d \u0027u\u0027\n     *  Example (see AXYZ above): if A is above the plane XYZ then parity \u003d \u0027e\u0027\n     *  This approach may be used also in case of an implicit H attached to A.\n     *\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *  Note. Correspondence to CML 0D stereo parities\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *  a list of 4 atoms corresponds to CML atomRefs4\n     *\n     *  tetrahedral atom\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *  CML atomParity \u003e 0 \u003c\u003d\u003e INCHI_PARITY_EVEN\n     *  CML atomParity \u003c 0 \u003c\u003d\u003e INCHI_PARITY_ODD\n     *\n     *                               | 1   1   1   1  |  where xW is x-coordinate of\n     *                               | xW  xX  xY  xZ |  atom W, etc. (xyz is a\n     *  CML atomParity \u003d determinant | yW  yX  yY  yZ |  \u0027right-handed\u0027 Cartesian\n     *                               | zW  zX  xY  zZ |  coordinate system)\n     * \u003c/pre\u003e\n     *\n     * @param atC    Central atom\n     * @param at0    Neighbour atom 0\n     * @param at1    Neighbour atom 1\n     * @param at2    Neighbour atom 2\n     * @param at3    Neighbour atom 3\n     * @param parity Parity\n     */\n    public static JniInchiStereo0D createNewTetrahedralStereo0D(final JniInchiAtom atC, final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, INCHI_PARITY parity);\n\n    /**\n     * \u003cp\u003eConvenience method for generating 0D stereo parities at stereogenic\n     * double bonds.\n     *\n     * \u003cp\u003e\u003cb\u003eUsage notes from \u003ci\u003einchi_api.h\u003c/i\u003e:\u003c/b\u003e\n     * \u003cpre\u003e\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *  stereogenic bond \u003eA\u003dB\u003c or cumulene \u003eA\u003dC\u003dC\u003dB\u003c\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *\n     *                              neighbor[4]  : {#X,#A,#B,#Y} in this order\n     *  X                           central_atom : NO_ATOM\n     *   \\            X      Y      type         : INCHI_StereoType_DoubleBond\n     *    A\u003d\u003dB         \\    /\n     *        \\         A\u003d\u003dB\n     *         Y\n     *\n     *  parity\u003d \u0027e\u0027    parity\u003d \u0027o\u0027   unknown parity \u003d \u0027u\u0027\n     *\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *  Note. Correspondence to CML 0D stereo parities\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *\n     *  stereogenic double bond and (not yet defined in CML) cumulenes\n     *  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n     *  CML \u0027C\u0027 (cis)      \u003c\u003d\u003e INCHI_PARITY_ODD\n     *  CML \u0027T\u0027 (trans)    \u003c\u003d\u003e INCHI_PARITY_EVEN\n     * \u003c/pre\u003e\n     *\n     * @param at0    Neighbour atom 0\n     * @param at1    Neighbour atom 1\n     * @param at2    Neighbour atom 2\n     * @param at3    Neighbour atom 3\n     * @param parity Parity\n     * @return\n     */\n    public static JniInchiStereo0D createNewDoublebondStereo0D(final JniInchiAtom at0, final JniInchiAtom at1, final JniInchiAtom at2, final JniInchiAtom at3, final INCHI_PARITY parity);\n\n    int getInchiStereoType();\n\n    int getInchiParity();\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiStereo0D",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStereo0D_1Test.java",
    "test_prompt": "// JniInchiStereo0D_1Test.java\npackage net.sf.jniinchi;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStereo0D}.\n* It contains ten unit test cases for the {@link JniInchiStereo0D#createNewDoublebondStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)} method.\n*/\nclass JniInchiStereo0D_1Test {",
    "method_signature": "createNewDoublebondStereo0D(JniInchiAtom, JniInchiAtom, JniInchiAtom, JniInchiAtom, INCHI_PARITY)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// JniInchiStructure.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author Sam Adams\n */\npublic class JniInchiStructure {\n\n    /**\n     * List of atoms.\n     */\n    private List atomList \u003d new ArrayList();\n\n    /**\n     * List of bonds.\n     */\n    private List bondList \u003d new ArrayList();\n\n    /**\n     * List of stero parities.\n     */\n    private List stereoList \u003d new ArrayList();\n\n    /**\n     * Returns number of atoms in structure.\n     */\n    public int getNumAtoms();\n\n    /**\n     * Returns number of bonds in structure.\n     */\n    public int getNumBonds();\n\n    /**\n     * Returns number of stereo parities in strucuture.\n     */\n    public int getNumStereo0D();\n\n    /**\n     * Adds atom to inchi molecule.\n     *\n     * @param atom  Atom to add\n     * @return      Added atom\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiAtom addAtom(JniInchiAtom atom);\n\n    /**\n     * Convenience method to add multiple atoms to molecule.\n     * @param atoms\n     */\n    public void addAtoms(JniInchiAtom... atoms);\n\n    /**\n     * Adds bond to inchi molecule.\n     *\n     * @param bond  Bond to add\n     * @return      Added bond\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiBond addBond(JniInchiBond bond);\n\n    /**\n     * Convenience method to add multiple bonds to molecule.\n     * @param bonds\n     */\n    public void addBonds(JniInchiBond... bonds);\n\n    /**\n     * Adds 0D stereo parity to inchi molecule.\n     *\n     * @param parity  Parity to add\n     * @return        Added parity\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiStereo0D addStereo0D(JniInchiStereo0D parity);\n\n    /**\n     * Returns atom from structure.\n     * @param i    Index of atom to return.\n     * @return\n     */\n    public JniInchiAtom getAtom(final int i);\n\n    /**\n     * Returns bond from structure.\n     * @param i    Index of bond to return.\n     * @return\n     */\n    public JniInchiBond getBond(final int i);\n\n    /**\n     * Returns stereo parity from structure.\n     * @param i    Index of stereo parity to return.\n     * @return\n     */\n    public JniInchiStereo0D getStereo0D(final int i);\n\n    public void setStructure(JniInchiStructure structure);\n\n    int getAtomIndex(JniInchiAtom atom);\n\n    int getStereo0DIndex(JniInchiStereo0D stereo);\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiStructure",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_0Test.java",
    "test_prompt": "// JniInchiStructure_0Test.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStructure}.\n* It contains ten unit test cases for the {@link JniInchiStructure#addAtom(JniInchiAtom)} method.\n*/\nclass JniInchiStructure_0Test {",
    "method_signature": "addAtom(JniInchiAtom)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// JniInchiStructure.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author Sam Adams\n */\npublic class JniInchiStructure {\n\n    /**\n     * List of atoms.\n     */\n    private List atomList \u003d new ArrayList();\n\n    /**\n     * List of bonds.\n     */\n    private List bondList \u003d new ArrayList();\n\n    /**\n     * List of stero parities.\n     */\n    private List stereoList \u003d new ArrayList();\n\n    /**\n     * Returns number of atoms in structure.\n     */\n    public int getNumAtoms();\n\n    /**\n     * Returns number of bonds in structure.\n     */\n    public int getNumBonds();\n\n    /**\n     * Returns number of stereo parities in strucuture.\n     */\n    public int getNumStereo0D();\n\n    /**\n     * Adds atom to inchi molecule.\n     *\n     * @param atom  Atom to add\n     * @return      Added atom\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiAtom addAtom(JniInchiAtom atom);\n\n    /**\n     * Convenience method to add multiple atoms to molecule.\n     * @param atoms\n     */\n    public void addAtoms(JniInchiAtom... atoms);\n\n    /**\n     * Adds bond to inchi molecule.\n     *\n     * @param bond  Bond to add\n     * @return      Added bond\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiBond addBond(JniInchiBond bond);\n\n    /**\n     * Convenience method to add multiple bonds to molecule.\n     * @param bonds\n     */\n    public void addBonds(JniInchiBond... bonds);\n\n    /**\n     * Adds 0D stereo parity to inchi molecule.\n     *\n     * @param parity  Parity to add\n     * @return        Added parity\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiStereo0D addStereo0D(JniInchiStereo0D parity);\n\n    /**\n     * Returns atom from structure.\n     * @param i    Index of atom to return.\n     * @return\n     */\n    public JniInchiAtom getAtom(final int i);\n\n    /**\n     * Returns bond from structure.\n     * @param i    Index of bond to return.\n     * @return\n     */\n    public JniInchiBond getBond(final int i);\n\n    /**\n     * Returns stereo parity from structure.\n     * @param i    Index of stereo parity to return.\n     * @return\n     */\n    public JniInchiStereo0D getStereo0D(final int i);\n\n    public void setStructure(JniInchiStructure structure);\n\n    int getAtomIndex(JniInchiAtom atom);\n\n    int getStereo0DIndex(JniInchiStereo0D stereo);\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiStructure",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_1Test.java",
    "test_prompt": "// JniInchiStructure_1Test.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStructure}.\n* It contains ten unit test cases for the {@link JniInchiStructure#addBond(JniInchiBond)} method.\n*/\nclass JniInchiStructure_1Test {",
    "method_signature": "addBond(JniInchiBond)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// JniInchiStructure.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author Sam Adams\n */\npublic class JniInchiStructure {\n\n    /**\n     * List of atoms.\n     */\n    private List atomList \u003d new ArrayList();\n\n    /**\n     * List of bonds.\n     */\n    private List bondList \u003d new ArrayList();\n\n    /**\n     * List of stero parities.\n     */\n    private List stereoList \u003d new ArrayList();\n\n    /**\n     * Returns number of atoms in structure.\n     */\n    public int getNumAtoms();\n\n    /**\n     * Returns number of bonds in structure.\n     */\n    public int getNumBonds();\n\n    /**\n     * Returns number of stereo parities in strucuture.\n     */\n    public int getNumStereo0D();\n\n    /**\n     * Adds atom to inchi molecule.\n     *\n     * @param atom  Atom to add\n     * @return      Added atom\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiAtom addAtom(JniInchiAtom atom);\n\n    /**\n     * Convenience method to add multiple atoms to molecule.\n     * @param atoms\n     */\n    public void addAtoms(JniInchiAtom... atoms);\n\n    /**\n     * Adds bond to inchi molecule.\n     *\n     * @param bond  Bond to add\n     * @return      Added bond\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiBond addBond(JniInchiBond bond);\n\n    /**\n     * Convenience method to add multiple bonds to molecule.\n     * @param bonds\n     */\n    public void addBonds(JniInchiBond... bonds);\n\n    /**\n     * Adds 0D stereo parity to inchi molecule.\n     *\n     * @param parity  Parity to add\n     * @return        Added parity\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiStereo0D addStereo0D(JniInchiStereo0D parity);\n\n    /**\n     * Returns atom from structure.\n     * @param i    Index of atom to return.\n     * @return\n     */\n    public JniInchiAtom getAtom(final int i);\n\n    /**\n     * Returns bond from structure.\n     * @param i    Index of bond to return.\n     * @return\n     */\n    public JniInchiBond getBond(final int i);\n\n    /**\n     * Returns stereo parity from structure.\n     * @param i    Index of stereo parity to return.\n     * @return\n     */\n    public JniInchiStereo0D getStereo0D(final int i);\n\n    public void setStructure(JniInchiStructure structure);\n\n    int getAtomIndex(JniInchiAtom atom);\n\n    int getStereo0DIndex(JniInchiStereo0D stereo);\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiStructure",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_2Test.java",
    "test_prompt": "// JniInchiStructure_2Test.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStructure}.\n* It contains ten unit test cases for the {@link JniInchiStructure#addStereo0D(JniInchiStereo0D)} method.\n*/\nclass JniInchiStructure_2Test {",
    "method_signature": "addStereo0D(JniInchiStereo0D)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// JniInchiStructure.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author Sam Adams\n */\npublic class JniInchiStructure {\n\n    /**\n     * List of atoms.\n     */\n    private List atomList \u003d new ArrayList();\n\n    /**\n     * List of bonds.\n     */\n    private List bondList \u003d new ArrayList();\n\n    /**\n     * List of stero parities.\n     */\n    private List stereoList \u003d new ArrayList();\n\n    /**\n     * Returns number of atoms in structure.\n     */\n    public int getNumAtoms();\n\n    /**\n     * Returns number of bonds in structure.\n     */\n    public int getNumBonds();\n\n    /**\n     * Returns number of stereo parities in strucuture.\n     */\n    public int getNumStereo0D();\n\n    /**\n     * Adds atom to inchi molecule.\n     *\n     * @param atom  Atom to add\n     * @return      Added atom\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiAtom addAtom(JniInchiAtom atom);\n\n    /**\n     * Convenience method to add multiple atoms to molecule.\n     * @param atoms\n     */\n    public void addAtoms(JniInchiAtom... atoms);\n\n    /**\n     * Adds bond to inchi molecule.\n     *\n     * @param bond  Bond to add\n     * @return      Added bond\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiBond addBond(JniInchiBond bond);\n\n    /**\n     * Convenience method to add multiple bonds to molecule.\n     * @param bonds\n     */\n    public void addBonds(JniInchiBond... bonds);\n\n    /**\n     * Adds 0D stereo parity to inchi molecule.\n     *\n     * @param parity  Parity to add\n     * @return        Added parity\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiStereo0D addStereo0D(JniInchiStereo0D parity);\n\n    /**\n     * Returns atom from structure.\n     * @param i    Index of atom to return.\n     * @return\n     */\n    public JniInchiAtom getAtom(final int i);\n\n    /**\n     * Returns bond from structure.\n     * @param i    Index of bond to return.\n     * @return\n     */\n    public JniInchiBond getBond(final int i);\n\n    /**\n     * Returns stereo parity from structure.\n     * @param i    Index of stereo parity to return.\n     * @return\n     */\n    public JniInchiStereo0D getStereo0D(final int i);\n\n    public void setStructure(JniInchiStructure structure);\n\n    int getAtomIndex(JniInchiAtom atom);\n\n    int getStereo0DIndex(JniInchiStereo0D stereo);\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiStructure",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_3Test.java",
    "test_prompt": "// JniInchiStructure_3Test.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStructure}.\n* It contains ten unit test cases for the {@link JniInchiStructure#getAtom(int)} method.\n*/\nclass JniInchiStructure_3Test {",
    "method_signature": "getAtom(int)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// JniInchiStructure.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author Sam Adams\n */\npublic class JniInchiStructure {\n\n    /**\n     * List of atoms.\n     */\n    private List atomList \u003d new ArrayList();\n\n    /**\n     * List of bonds.\n     */\n    private List bondList \u003d new ArrayList();\n\n    /**\n     * List of stero parities.\n     */\n    private List stereoList \u003d new ArrayList();\n\n    /**\n     * Returns number of atoms in structure.\n     */\n    public int getNumAtoms();\n\n    /**\n     * Returns number of bonds in structure.\n     */\n    public int getNumBonds();\n\n    /**\n     * Returns number of stereo parities in strucuture.\n     */\n    public int getNumStereo0D();\n\n    /**\n     * Adds atom to inchi molecule.\n     *\n     * @param atom  Atom to add\n     * @return      Added atom\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiAtom addAtom(JniInchiAtom atom);\n\n    /**\n     * Convenience method to add multiple atoms to molecule.\n     * @param atoms\n     */\n    public void addAtoms(JniInchiAtom... atoms);\n\n    /**\n     * Adds bond to inchi molecule.\n     *\n     * @param bond  Bond to add\n     * @return      Added bond\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiBond addBond(JniInchiBond bond);\n\n    /**\n     * Convenience method to add multiple bonds to molecule.\n     * @param bonds\n     */\n    public void addBonds(JniInchiBond... bonds);\n\n    /**\n     * Adds 0D stereo parity to inchi molecule.\n     *\n     * @param parity  Parity to add\n     * @return        Added parity\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiStereo0D addStereo0D(JniInchiStereo0D parity);\n\n    /**\n     * Returns atom from structure.\n     * @param i    Index of atom to return.\n     * @return\n     */\n    public JniInchiAtom getAtom(final int i);\n\n    /**\n     * Returns bond from structure.\n     * @param i    Index of bond to return.\n     * @return\n     */\n    public JniInchiBond getBond(final int i);\n\n    /**\n     * Returns stereo parity from structure.\n     * @param i    Index of stereo parity to return.\n     * @return\n     */\n    public JniInchiStereo0D getStereo0D(final int i);\n\n    public void setStructure(JniInchiStructure structure);\n\n    int getAtomIndex(JniInchiAtom atom);\n\n    int getStereo0DIndex(JniInchiStereo0D stereo);\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiStructure",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_4Test.java",
    "test_prompt": "// JniInchiStructure_4Test.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStructure}.\n* It contains ten unit test cases for the {@link JniInchiStructure#getBond(int)} method.\n*/\nclass JniInchiStructure_4Test {",
    "method_signature": "getBond(int)",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// JniInchiStructure.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author Sam Adams\n */\npublic class JniInchiStructure {\n\n    /**\n     * List of atoms.\n     */\n    private List atomList \u003d new ArrayList();\n\n    /**\n     * List of bonds.\n     */\n    private List bondList \u003d new ArrayList();\n\n    /**\n     * List of stero parities.\n     */\n    private List stereoList \u003d new ArrayList();\n\n    /**\n     * Returns number of atoms in structure.\n     */\n    public int getNumAtoms();\n\n    /**\n     * Returns number of bonds in structure.\n     */\n    public int getNumBonds();\n\n    /**\n     * Returns number of stereo parities in strucuture.\n     */\n    public int getNumStereo0D();\n\n    /**\n     * Adds atom to inchi molecule.\n     *\n     * @param atom  Atom to add\n     * @return      Added atom\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiAtom addAtom(JniInchiAtom atom);\n\n    /**\n     * Convenience method to add multiple atoms to molecule.\n     * @param atoms\n     */\n    public void addAtoms(JniInchiAtom... atoms);\n\n    /**\n     * Adds bond to inchi molecule.\n     *\n     * @param bond  Bond to add\n     * @return      Added bond\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiBond addBond(JniInchiBond bond);\n\n    /**\n     * Convenience method to add multiple bonds to molecule.\n     * @param bonds\n     */\n    public void addBonds(JniInchiBond... bonds);\n\n    /**\n     * Adds 0D stereo parity to inchi molecule.\n     *\n     * @param parity  Parity to add\n     * @return        Added parity\n     */\n    @SuppressWarnings(\"unchecked\")\n    public JniInchiStereo0D addStereo0D(JniInchiStereo0D parity);\n\n    /**\n     * Returns atom from structure.\n     * @param i    Index of atom to return.\n     * @return\n     */\n    public JniInchiAtom getAtom(final int i);\n\n    /**\n     * Returns bond from structure.\n     * @param i    Index of bond to return.\n     * @return\n     */\n    public JniInchiBond getBond(final int i);\n\n    /**\n     * Returns stereo parity from structure.\n     * @param i    Index of stereo parity to return.\n     * @return\n     */\n    public JniInchiStereo0D getStereo0D(final int i);\n\n    public void setStructure(JniInchiStructure structure);\n\n    int getAtomIndex(JniInchiAtom atom);\n\n    int getStereo0DIndex(JniInchiStereo0D stereo);\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiStructure",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiStructure_5Test.java",
    "test_prompt": "// JniInchiStructure_5Test.java\npackage net.sf.jniinchi;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiStructure}.\n* It contains ten unit test cases for the {@link JniInchiStructure#getStereo0D(int)} method.\n*/\nclass JniInchiStructure_5Test {",
    "method_signature": "getStereo0D(int)",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// JniInchiWrapper.java\npackage net.sf.jniinchi;\n\nimport net.sf.jnati.NativeCodeException;\nimport net.sf.jnati.deploy.NativeLibraryLoader;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\n/**\n * \u003cp\u003eJNI Wrapper for International Chemical Identifier (InChI) C++ library.\n *\n * \u003cp\u003eThis class is not intended to be used directly, but should be accessed\n * through subclasses that read data formats and load them into the InChI\n * data structures.\n *\n * \u003cp\u003eSubclasses should load data through the addAtom, addBond and addParity\n * methods. Once the molecule is fully loaded then the generateInchi method\n * should be called. Ideally this should all take place within the subclass\u0027s\n * constructor. The public get methods will all return null until this has\n * happened.\n *\n * \u003cp\u003eSee \u003ctt\u003einchi_api.h\u003c/tt\u003e.\n *\n * @author Sam Adams\n */\npublic class JniInchiWrapper {\n\n    private static final String ID \u003d \"jniinchi\";\n\n    private static final String VERSION \u003d \"1.03_1\";\n\n    /**\n     * Maximum time to wait for a lock (in seconds).\n     */\n    private static final int MAX_LOCK_TIMEOUT \u003d 15;\n\n    /**\n     * Flag indicating windows or linux.\n     */\n    private static final boolean IS_WINDOWS \u003d System.getProperty(\"os.name\", \"\").toLowerCase().startsWith(\"windows\");\n\n    /**\n     * Switch character for passing options. / in windows, - on other systems.\n     */\n    static final String flagChar \u003d IS_WINDOWS ? \"/\" : \"-\";\n\n    /**\n     * Records whether native library has been loaded by system.\n     */\n    private static boolean libraryLoaded \u003d false;\n\n    private static JniInchiWrapper inchiWrapper;\n\n    private static final Lock lock \u003d new ReentrantLock(true);\n\n    /**\n     * Loads native library.\n     * @throws JniInchiException Library failed to load\n     */\n    public static synchronized void loadLibrary() throws LoadNativeLibraryException;\n\n    /**\n     * Checks the expected native code version has been loaded.\n     * @throws NativeCodeException\n     */\n    private static void checkNativeCodeVersion() throws NativeCodeException;\n\n    private static synchronized JniInchiWrapper getWrapper() throws LoadNativeLibraryException;\n\n    /**\n     * Constructor\n     */\n    private JniInchiWrapper() throws LoadNativeLibraryException {\n    }\n\n    /**\n     * Checks and canonicalises options.\n     *\n     * @param ops  List of INCHI_OPTION\n     */\n    protected static String checkOptions(List\u003cINCHI_OPTION\u003e ops) throws JniInchiException;\n\n    /**\n     * Checks and canonicalises options.\n     *\n     * @param ops          Space delimited string of options to pass to InChI library.\n     *                     Each option may optionally be preceded by a command line\n     *                     switch (/ or -).\n     */\n    protected static String checkOptions(final String ops) throws JniInchiException;\n\n    /**\n     * \u003cp\u003eGenerates the InChI for a chemical structure.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf no InChI creation/stereo modification options are specified then a standard\n     * InChI is produced, otherwise the generated InChI will be a non-standard one.\u003c/p\u003e\n     *\n     * \u003cp\u003e\u003cb\u003eValid options:\u003c/b\u003e\u003c/p\u003e\n     * \u003cpre\u003e\n     *  Structure perception (compatible with stdInChI):\n     *    /NEWPSOFF   /DoNotAddH   /SNon\n     *  Stereo interpretation (lead to generation of non-standard InChI)\n     *    /SRel /SRac /SUCF /ChiralFlagON /ChiralFlagOFF\n     *  InChI creation options (lead to generation of non-standard InChI)\n     *    /SUU /SLUUD   /FixedH  /RecMet  /KET /15T\n     * \u003c/pre\u003e\n     *\n     * \u003cp\u003e\u003cb\u003eOther options:\u003c/b\u003e\u003c/p\u003e\n     * \u003cpre\u003e\n     *  /AuxNone    Omit auxiliary information (default: Include)\n     *  /Wnumber    Set time-out per structure in seconds; W0 means unlimited\n     *              In InChI library the default value is unlimited\n     *  /OutputSDF  Output SDfile instead of InChI\n     *  /WarnOnEmptyStructure\n     *              Warn and produce empty InChI for empty structure\n     *  /SaveOpt    Save custom InChI creation options (non-standard InChI)\n     * \u003c/pre\u003e\n     *\n     * @param input\n     * @return\n     * @throws JniInchiException\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static JniInchiOutput getInchi(JniInchiInput input) throws JniInchiException;\n\n    /**\n     * \u003cp\u003eCalculates the Standard InChI string for a chemical structure.\u003c/p\u003e\n     * \u003cp\u003eThe only valid structure perception options are NEWPSOFF/DoNotAddH/SNon. In any other structural\n     * perception options are specified then the calculation will fail.\u003c/p\u003e\n     * @param input\n     * @return\n     * @throws JniInchiException\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static JniInchiOutput getStdInchi(JniInchiInput input) throws JniInchiException;\n\n    /**\n     * \u003cp\u003eConverts an InChI into an InChI for validation purposes (the same as the -InChI2InChI option).\u003c/p\u003e\n     * \u003cp\u003eThis method may also be used to filter out specific layers. For instance, /Snon would remove the\n     * stereochemical layer; Omitting /FixedH and/or /RecMet would remove Fixed-H or Reconnected layers.\n     * In order to keep all InChI layers use options string \"/FixedH /RecMet\"; option /InChI2InChI is not needed.\u003c/p\u003e\n     * @param input\n     * @return\n     * @throws JniInchiException\n     */\n    public static JniInchiOutput getInchiFromInchi(JniInchiInputInchi input) throws JniInchiException;\n\n    /**\n     * Generated 0D structure from an InChI string.\n     * @param input\n     * @return\n     * @throws JniInchiException\n     */\n    public static JniInchiOutputStructure getStructureFromInchi(JniInchiInputInchi input) throws JniInchiException;\n\n    /**\n     * Calculates the InChIKey for an InChI string.\n     * @param inchi     source InChI string\n     * @return  InChIKey output\n     * @throws  JniInchiException\n     */\n    public static JniInchiOutputKey getInchiKey(final String inchi) throws JniInchiException;\n\n    /**\n     * Checks whether a string represents valid InChIKey.\n     * @param key\n     * @return\n     * @throws JniInchiException\n     */\n    public static INCHI_KEY_STATUS checkInchiKey(final String key) throws JniInchiException;\n\n    /**\n     * \u003cp\u003eChecks if the string represents valid InChI/standard InChI.\u003c/p\u003e\n     *\n     * @param inchi  source InChI\n     * @param strict if \u003ccode\u003efalse\u003c/code\u003e, just briefly check for proper layout (prefix, version, etc.) The result\n     *               may not be strict.\n     *               If \u003ccode\u003etrue\u003c/code\u003e, try to perform InChI2InChI conversion and returns success if a resulting\n     *               InChI string exactly match source. The result may be \u0027false alarm\u0027 due to imperfectness of\n     */\n    public static INCHI_STATUS checkInchi(final String inchi, final boolean strict) throws JniInchiException;\n\n    public static JniInchiInputData getInputFromAuxInfo(String auxInfo) throws JniInchiException;\n\n    private static synchronized void getLock() throws JniInchiException;\n\n    protected native static String LibInchiGetVersion();\n\n    private native static void init();\n\n    private native JniInchiOutput GetINCHI(JniInchiInput input);\n\n    private native JniInchiOutput GetStdINCHI(JniInchiInput input);\n\n    private native JniInchiOutput GetINCHIfromINCHI(String inchi, String options);\n\n    private native JniInchiOutputStructure GetStructFromINCHI(String inchi, String options);\n\n    private native JniInchiOutputKey GetINCHIKeyFromINCHI(String inchi);\n\n    private native JniInchiOutputKey GetStdINCHIKeyFromStdINCHI(String inchi);\n\n    private native int CheckINCHIKey(String key);\n\n    private native int CheckINCHI(String inchi, boolean strict);\n\n    private native JniInchiInputData GetINCHIInputFromAuxInfo(String auxInfo, boolean bDoNotAddH, boolean bDiffUnkUndfStereo);\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiWrapper",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper_0Test.java",
    "test_prompt": "// JniInchiWrapper_0Test.java\npackage net.sf.jniinchi;\n\nimport net.sf.jnati.NativeCodeException;\nimport net.sf.jnati.deploy.NativeLibraryLoader;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiWrapper}.\n* It contains ten unit test cases for the {@link JniInchiWrapper#getInchiKey(String)} method.\n*/\nclass JniInchiWrapper_0Test {",
    "method_signature": "getInchiKey(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// JniInchiWrapper.java\npackage net.sf.jniinchi;\n\nimport net.sf.jnati.NativeCodeException;\nimport net.sf.jnati.deploy.NativeLibraryLoader;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\n/**\n * \u003cp\u003eJNI Wrapper for International Chemical Identifier (InChI) C++ library.\n *\n * \u003cp\u003eThis class is not intended to be used directly, but should be accessed\n * through subclasses that read data formats and load them into the InChI\n * data structures.\n *\n * \u003cp\u003eSubclasses should load data through the addAtom, addBond and addParity\n * methods. Once the molecule is fully loaded then the generateInchi method\n * should be called. Ideally this should all take place within the subclass\u0027s\n * constructor. The public get methods will all return null until this has\n * happened.\n *\n * \u003cp\u003eSee \u003ctt\u003einchi_api.h\u003c/tt\u003e.\n *\n * @author Sam Adams\n */\npublic class JniInchiWrapper {\n\n    private static final String ID \u003d \"jniinchi\";\n\n    private static final String VERSION \u003d \"1.03_1\";\n\n    /**\n     * Maximum time to wait for a lock (in seconds).\n     */\n    private static final int MAX_LOCK_TIMEOUT \u003d 15;\n\n    /**\n     * Flag indicating windows or linux.\n     */\n    private static final boolean IS_WINDOWS \u003d System.getProperty(\"os.name\", \"\").toLowerCase().startsWith(\"windows\");\n\n    /**\n     * Switch character for passing options. / in windows, - on other systems.\n     */\n    static final String flagChar \u003d IS_WINDOWS ? \"/\" : \"-\";\n\n    /**\n     * Records whether native library has been loaded by system.\n     */\n    private static boolean libraryLoaded \u003d false;\n\n    private static JniInchiWrapper inchiWrapper;\n\n    private static final Lock lock \u003d new ReentrantLock(true);\n\n    /**\n     * Loads native library.\n     * @throws JniInchiException Library failed to load\n     */\n    public static synchronized void loadLibrary() throws LoadNativeLibraryException;\n\n    /**\n     * Checks the expected native code version has been loaded.\n     * @throws NativeCodeException\n     */\n    private static void checkNativeCodeVersion() throws NativeCodeException;\n\n    private static synchronized JniInchiWrapper getWrapper() throws LoadNativeLibraryException;\n\n    /**\n     * Constructor\n     */\n    private JniInchiWrapper() throws LoadNativeLibraryException {\n    }\n\n    /**\n     * Checks and canonicalises options.\n     *\n     * @param ops  List of INCHI_OPTION\n     */\n    protected static String checkOptions(List\u003cINCHI_OPTION\u003e ops) throws JniInchiException;\n\n    /**\n     * Checks and canonicalises options.\n     *\n     * @param ops          Space delimited string of options to pass to InChI library.\n     *                     Each option may optionally be preceded by a command line\n     *                     switch (/ or -).\n     */\n    protected static String checkOptions(final String ops) throws JniInchiException;\n\n    /**\n     * \u003cp\u003eGenerates the InChI for a chemical structure.\u003c/p\u003e\n     *\n     * \u003cp\u003eIf no InChI creation/stereo modification options are specified then a standard\n     * InChI is produced, otherwise the generated InChI will be a non-standard one.\u003c/p\u003e\n     *\n     * \u003cp\u003e\u003cb\u003eValid options:\u003c/b\u003e\u003c/p\u003e\n     * \u003cpre\u003e\n     *  Structure perception (compatible with stdInChI):\n     *    /NEWPSOFF   /DoNotAddH   /SNon\n     *  Stereo interpretation (lead to generation of non-standard InChI)\n     *    /SRel /SRac /SUCF /ChiralFlagON /ChiralFlagOFF\n     *  InChI creation options (lead to generation of non-standard InChI)\n     *    /SUU /SLUUD   /FixedH  /RecMet  /KET /15T\n     * \u003c/pre\u003e\n     *\n     * \u003cp\u003e\u003cb\u003eOther options:\u003c/b\u003e\u003c/p\u003e\n     * \u003cpre\u003e\n     *  /AuxNone    Omit auxiliary information (default: Include)\n     *  /Wnumber    Set time-out per structure in seconds; W0 means unlimited\n     *              In InChI library the default value is unlimited\n     *  /OutputSDF  Output SDfile instead of InChI\n     *  /WarnOnEmptyStructure\n     *              Warn and produce empty InChI for empty structure\n     *  /SaveOpt    Save custom InChI creation options (non-standard InChI)\n     * \u003c/pre\u003e\n     *\n     * @param input\n     * @return\n     * @throws JniInchiException\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static JniInchiOutput getInchi(JniInchiInput input) throws JniInchiException;\n\n    /**\n     * \u003cp\u003eCalculates the Standard InChI string for a chemical structure.\u003c/p\u003e\n     * \u003cp\u003eThe only valid structure perception options are NEWPSOFF/DoNotAddH/SNon. In any other structural\n     * perception options are specified then the calculation will fail.\u003c/p\u003e\n     * @param input\n     * @return\n     * @throws JniInchiException\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static JniInchiOutput getStdInchi(JniInchiInput input) throws JniInchiException;\n\n    /**\n     * \u003cp\u003eConverts an InChI into an InChI for validation purposes (the same as the -InChI2InChI option).\u003c/p\u003e\n     * \u003cp\u003eThis method may also be used to filter out specific layers. For instance, /Snon would remove the\n     * stereochemical layer; Omitting /FixedH and/or /RecMet would remove Fixed-H or Reconnected layers.\n     * In order to keep all InChI layers use options string \"/FixedH /RecMet\"; option /InChI2InChI is not needed.\u003c/p\u003e\n     * @param input\n     * @return\n     * @throws JniInchiException\n     */\n    public static JniInchiOutput getInchiFromInchi(JniInchiInputInchi input) throws JniInchiException;\n\n    /**\n     * Generated 0D structure from an InChI string.\n     * @param input\n     * @return\n     * @throws JniInchiException\n     */\n    public static JniInchiOutputStructure getStructureFromInchi(JniInchiInputInchi input) throws JniInchiException;\n\n    /**\n     * Calculates the InChIKey for an InChI string.\n     * @param inchi     source InChI string\n     * @return  InChIKey output\n     * @throws  JniInchiException\n     */\n    public static JniInchiOutputKey getInchiKey(final String inchi) throws JniInchiException;\n\n    /**\n     * Checks whether a string represents valid InChIKey.\n     * @param key\n     * @return\n     * @throws JniInchiException\n     */\n    public static INCHI_KEY_STATUS checkInchiKey(final String key) throws JniInchiException;\n\n    /**\n     * \u003cp\u003eChecks if the string represents valid InChI/standard InChI.\u003c/p\u003e\n     *\n     * @param inchi  source InChI\n     * @param strict if \u003ccode\u003efalse\u003c/code\u003e, just briefly check for proper layout (prefix, version, etc.) The result\n     *               may not be strict.\n     *               If \u003ccode\u003etrue\u003c/code\u003e, try to perform InChI2InChI conversion and returns success if a resulting\n     *               InChI string exactly match source. The result may be \u0027false alarm\u0027 due to imperfectness of\n     */\n    public static INCHI_STATUS checkInchi(final String inchi, final boolean strict) throws JniInchiException;\n\n    public static JniInchiInputData getInputFromAuxInfo(String auxInfo) throws JniInchiException;\n\n    private static synchronized void getLock() throws JniInchiException;\n\n    protected native static String LibInchiGetVersion();\n\n    private native static void init();\n\n    private native JniInchiOutput GetINCHI(JniInchiInput input);\n\n    private native JniInchiOutput GetStdINCHI(JniInchiInput input);\n\n    private native JniInchiOutput GetINCHIfromINCHI(String inchi, String options);\n\n    private native JniInchiOutputStructure GetStructFromINCHI(String inchi, String options);\n\n    private native JniInchiOutputKey GetINCHIKeyFromINCHI(String inchi);\n\n    private native JniInchiOutputKey GetStdINCHIKeyFromStdINCHI(String inchi);\n\n    private native int CheckINCHIKey(String key);\n\n    private native int CheckINCHI(String inchi, boolean strict);\n\n    private native JniInchiInputData GetINCHIInputFromAuxInfo(String auxInfo, boolean bDoNotAddH, boolean bDiffUnkUndfStereo);\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "JniInchiWrapper",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/JniInchiWrapper_1Test.java",
    "test_prompt": "// JniInchiWrapper_1Test.java\npackage net.sf.jniinchi;\n\nimport net.sf.jnati.NativeCodeException;\nimport net.sf.jnati.deploy.NativeLibraryLoader;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JniInchiWrapper}.\n* It contains ten unit test cases for the {@link JniInchiWrapper#checkInchi(String, boolean)} method.\n*/\nclass JniInchiWrapper_1Test {",
    "method_signature": "checkInchi(String, boolean)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// Main.java\npackage net.sf.jniinchi;\n\nimport org.apache.log4j.ConsoleAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.PatternLayout;\n\n/**\n * Simple test class, for debugging purposes.\n *\n * @author sea36\n */\npublic class Main {\n\n    /**\n     * Provide test structure.\n     * @return\n     */\n    public static JniInchiStructure getTestMolecule();\n\n    public static void runChecks() throws JniInchiException;\n\n    public static void main(final String[] args) throws Exception;\n}\n",
    "package": "net.sf.jniinchi",
    "classname": "Main",
    "id": "/EvoSuiteBenchmark/original/25_jni-inchi/src/main/java/net/sf/jniinchi/Main.java",
    "test_prompt": "// MainTest.java\npackage net.sf.jniinchi;\n\nimport org.apache.log4j.ConsoleAppender;\nimport org.apache.log4j.Level;\nimport org.apache.log4j.Logger;\nimport org.apache.log4j.PatternLayout;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Main}.\n* It contains ten unit test cases for the {@link Main#getTestMolecule()} method.\n*/\nclass MainTest {",
    "method_signature": "getTestMolecule()",
    "suffix": ""
  }
]