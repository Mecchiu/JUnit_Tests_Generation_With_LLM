[
  {
    "numberTests": "ten",
    "original_code": "// ModifyApprovalQueueEntryAction.java\npackage org.heal.servlet.approver;\n\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.module.catalog.QueuedRecordBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n/**\n * Modifies an approval queue entry.\n *\n * @author Brad Schaefer (\u003cA HREF\u003d\"mailto:schaefer@lib.med.utah.edu\"\u003eschaefer@lib.med.utah.edu\u003c/A\u003e)\n */\npublic class ModifyApprovalQueueEntryAction implements Action {\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin() {\n        return true;\n    }\n}\n",
    "package": "org.heal.servlet.approver",
    "classname": "ModifyApprovalQueueEntryAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/approver/ModifyApprovalQueueEntryAction.java",
    "test_prompt": "// ModifyApprovalQueueEntryActionTest.java\npackage org.heal.servlet.approver;\n\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.module.catalog.QueuedRecordBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModifyApprovalQueueEntryAction}.\n* It contains ten unit test cases for the {@link ModifyApprovalQueueEntryAction#actionRequiresLogin()} method.\n*/\nclass ModifyApprovalQueueEntryActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ShowApprovalQueueAction.java\npackage org.heal.servlet.approver;\n\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.List;\n\n/**\n * An {@link org.heal.servlet.Action} which fetches the information needed to\n * display the approval queue.\n *\n * @author Brad Schaefer (\u003cA HREF\u003d\"mailto:schaefer@lib.med.utah.edu\"\u003eschaefer@lib.med.utah.edu\u003c/A\u003e)\n */\npublic class ShowApprovalQueueAction implements Action {\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin() {\n        return true;\n    }\n}\n",
    "package": "org.heal.servlet.approver",
    "classname": "ShowApprovalQueueAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/approver/ShowApprovalQueueAction.java",
    "test_prompt": "// ShowApprovalQueueActionTest.java\npackage org.heal.servlet.approver;\n\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ShowApprovalQueueAction}.\n* It contains ten unit test cases for the {@link ShowApprovalQueueAction#actionRequiresLogin()} method.\n*/\nclass ShowApprovalQueueActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// EditContextURLAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.ContextURLBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\n\n/**\n * An {@link Action} which is called to edit a Context URL.  If\n * there isn\u0027t an existing Context URL which can be found to edit,\n * we assume that a new Context URL should be edited.\n */\npublic class EditContextURLAction implements Action {\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin() {\n        return true;\n    }\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "EditContextURLAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/EditContextURLAction.java",
    "test_prompt": "// EditContextURLActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.ContextURLBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EditContextURLAction}.\n* It contains ten unit test cases for the {@link EditContextURLAction#actionRequiresLogin()} method.\n*/\nclass EditContextURLActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ModifyMetadataAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * \u003cp\u003eAn {@link Action} that saves the metadata from a form into\n * the session\u0027s {@link CompleteMetadataBean} by mapping {@link MetadataModifier}s\n * to forms.  The {@link MetadataModifier} which matches the form determines\n * the next {@link Action} to execute.\u003c/p\u003e\n *\n * \u003cp\u003eThe mapping is currently defined as:\u003c/p\u003e\n *\n * \u003cul\u003e\u003cli\u003e\u0027metadata\u0027 : {@link MetadataRecordModifier}\n * \u003cli\u003e\u0027contextURL\u0027 : {@link ContextURLRecordModifier}\n * \u003cli\u003e\u0027contributor\u0027 : {@link ContributorRecordModifier}\n * \u003cli\u003e\u0027copyrightHolder\u0027 : {@link CopyrightHolderRecordModifier}\n * \u003cli\u003e\u0027controlledVocabulary\u0027 : {@link ControlledVocabularyRecordModifier}\n * \u003cli\u003e\u0027requirement\u0027 : {@link RequirementRecordModifier}\n * \u003c/ul\u003e\n */\npublic class ModifyMetadataAction implements Action {\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin() {\n        return true;\n    }\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "ModifyMetadataAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/ModifyMetadataAction.java",
    "test_prompt": "// ModifyMetadataActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModifyMetadataAction}.\n* It contains ten unit test cases for the {@link ModifyMetadataAction#actionRequiresLogin()} method.\n*/\nclass ModifyMetadataActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SaveMetadataAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.module.metadata.ContextURLBean;\nimport org.heal.module.metadata.CopyrightHolderBean;\nimport org.heal.module.metadata.ContributorBean;\nimport org.heal.module.metadata.TaxonPathBean;\nimport org.heal.module.metadata.TaxonBean;\nimport org.heal.module.metadata.RequirementBean;\nimport org.heal.module.metadata.RelationBean;\nimport org.heal.module.metadata.MetametadataIdentifierBean;\nimport org.heal.module.metadata.MetametadataContributorBean;\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.servlet.Action;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Iterator;\n\n/**\n * An {@link org.heal.servlet.Action Action} used to save metadata\n * records.\n */\npublic class SaveMetadataAction implements Action {\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin() {\n        return true;\n    }\n}\n\n/**\n * An {@link org.heal.servlet.Action Action} used to save metadata\n * records.\n */\npublic class SaveMetadataAction implements Action {\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin() {\n        return true;\n    }\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "SaveMetadataAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/SaveMetadataAction.java",
    "test_prompt": "// SaveMetadataActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.module.metadata.ContextURLBean;\nimport org.heal.module.metadata.CopyrightHolderBean;\nimport org.heal.module.metadata.ContributorBean;\nimport org.heal.module.metadata.TaxonPathBean;\nimport org.heal.module.metadata.TaxonBean;\nimport org.heal.module.metadata.RequirementBean;\nimport org.heal.module.metadata.RelationBean;\nimport org.heal.module.metadata.MetametadataIdentifierBean;\nimport org.heal.module.metadata.MetametadataContributorBean;\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.servlet.Action;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SaveMetadataAction}.\n* It contains ten unit test cases for the {@link SaveMetadataAction#actionRequiresLogin()} method.\n*/\nclass SaveMetadataActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CreateMetadataAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.module.metadata.TaxonBean;\nimport org.heal.module.metadata.TaxonPathBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.sql.SQLException;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * An {@link Action} which creates a new metadata record to edit,\n * puts it into the session, and then directs the user to the editing\n * page.\n */\npublic class CreateMetadataAction implements Action {\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin() {\n        return true;\n    }\n}\n\n/**\n * An {@link Action} which creates a new metadata record to edit,\n * puts it into the session, and then directs the user to the editing\n * page.\n */\npublic class CreateMetadataAction implements Action {\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin() {\n        return true;\n    }\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "CreateMetadataAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/CreateMetadataAction.java",
    "test_prompt": "// CreateMetadataActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.module.metadata.TaxonBean;\nimport org.heal.module.metadata.TaxonPathBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.sql.SQLException;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CreateMetadataAction}.\n* It contains ten unit test cases for the {@link CreateMetadataAction#actionRequiresLogin()} method.\n*/\nclass CreateMetadataActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ModifyCatalogQueueEntryAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.module.catalog.QueuedRecordBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.module.metadata.ShortMetadataBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport org.heal.util.FileLocator;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.nio.channels.FileChannel;\nimport java.sql.SQLException;\n\n/**\n * An {@link org.heal.servlet.Action Action} which is called in order to edit a metadata item which is in\n * the catalog queue.\n *\n * @author Brad Schaefer (\u003cA HREF\u003d\"mailto:schaefer@lib.med.utah.edu\"\u003eschaefer@lib.med.utah.edu\u003c/A\u003e)\n * @version 1.0\n */\npublic class ModifyCatalogQueueEntryAction implements Action {\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin() {\n        return true;\n    }\n}\n\n/**\n * An {@link org.heal.servlet.Action Action} which is called in order to edit a metadata item which is in\n * the catalog queue.\n *\n * @author Brad Schaefer (\u003cA HREF\u003d\"mailto:schaefer@lib.med.utah.edu\"\u003eschaefer@lib.med.utah.edu\u003c/A\u003e)\n * @version 1.0\n */\npublic class ModifyCatalogQueueEntryAction implements Action {\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin() {\n        return true;\n    }\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "ModifyCatalogQueueEntryAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/ModifyCatalogQueueEntryAction.java",
    "test_prompt": "// ModifyCatalogQueueEntryActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.module.catalog.QueuedRecordBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.module.metadata.ShortMetadataBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport org.heal.util.FileLocator;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.nio.channels.FileChannel;\nimport java.sql.SQLException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModifyCatalogQueueEntryAction}.\n* It contains ten unit test cases for the {@link ModifyCatalogQueueEntryAction#actionRequiresLogin()} method.\n*/\nclass ModifyCatalogQueueEntryActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// RelationRecordModifier.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.RelationBean;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.List;\n\n/**\n * Saves changes to a {@link RelationBean} and acts as\n * an {@link Action} which is called to edit a Relation.  If\n * there isn\u0027t an existing Relation which can be found to edit,\n * we assume that a new Relation should be edited.\n */\npublic class RelationRecordModifier implements Action, MetadataModifier {\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin() {\n        return true;\n    }\n}\n\n/**\n * Saves changes to a {@link RelationBean} and acts as\n * an {@link Action} which is called to edit a Relation.  If\n * there isn\u0027t an existing Relation which can be found to edit,\n * we assume that a new Relation should be edited.\n */\npublic class RelationRecordModifier implements Action, MetadataModifier {\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin() {\n        return true;\n    }\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "RelationRecordModifier",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/RelationRecordModifier.java",
    "test_prompt": "// RelationRecordModifierTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.RelationBean;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RelationRecordModifier}.\n* It contains ten unit test cases for the {@link RelationRecordModifier#actionRequiresLogin()} method.\n*/\nclass RelationRecordModifierTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CancelEditMetadataAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\n\n/**\n * A simple {@link Action} which clears the session variable used\n * for editing metadata.\n */\npublic class CancelEditMetadataAction implements Action {\n\n    /**\n     * @return \u003ccode\u003efalse\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin() {\n        return false;\n    }\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "CancelEditMetadataAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/CancelEditMetadataAction.java",
    "test_prompt": "// CancelEditMetadataActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CancelEditMetadataAction}.\n* It contains ten unit test cases for the {@link CancelEditMetadataAction#actionRequiresLogin()} method.\n*/\nclass CancelEditMetadataActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// EditControlledVocabularyAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.TaxonBean;\nimport org.heal.module.metadata.TaxonPathBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\n\n/**\n * An {@link Action} which is called to edit a Controlled Vocabulary item.  If\n * there isn\u0027t an existing Controlled Vocabulary item which can be found to edit,\n * we assume that a new Controlled Vocabulary entry should be edited.\n */\npublic class EditControlledVocabularyAction implements Action {\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin() {\n        return true;\n    }\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "EditControlledVocabularyAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/EditControlledVocabularyAction.java",
    "test_prompt": "// EditControlledVocabularyActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.TaxonBean;\nimport org.heal.module.metadata.TaxonPathBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EditControlledVocabularyAction}.\n* It contains ten unit test cases for the {@link EditControlledVocabularyAction#actionRequiresLogin()} method.\n*/\nclass EditControlledVocabularyActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// MetadataRecordModifier.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.ContextURLBean;\nimport org.heal.module.metadata.ContributorBean;\nimport org.heal.module.metadata.CopyrightBean;\nimport org.heal.module.metadata.CopyrightHolderBean;\nimport org.heal.module.metadata.CopyrightTextBean;\nimport org.heal.module.metadata.DiseaseDiagnosisBean;\nimport org.heal.module.metadata.FormatBean;\nimport org.heal.module.metadata.KeywordBean;\nimport org.heal.module.metadata.RelationBean;\nimport org.heal.module.metadata.RequirementBean;\nimport org.heal.module.metadata.TargetUserGroupBean;\nimport org.heal.module.metadata.TaxonBean;\nimport org.heal.module.metadata.TaxonPathBean;\nimport org.heal.module.metadata.ThumbnailBean;\nimport org.heal.module.metadata.MetametadataIdentifierBean;\nimport org.heal.module.metadata.MetametadataContributorBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.DateTools;\nimport javax.servlet.ServletRequest;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.SortedSet;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\n\n/**\n * \u003cp\u003eA {@link MetadataModifier} which fills the basic metadata information\n * from a \u003ccode\u003eServletRequest\u003c/code\u003e into a {@link CompleteMetadataBean}.\u003c/p\u003e\n */\npublic class MetadataRecordModifier implements MetadataModifier {\n\n    /**\n     * @param request Used to get the parameter \u003ccode\u003e\"nextAction\"\u003c/code\u003e, which\n     * \t\tdetermines what the next {@link Action} to take will be.  If no\n     * \t\t\u003ccode\u003e\"nextAction\"\u003c/code\u003e exists, a valid {@link Action} will still\n     * \t\tbe returned.\n     * @return The next {@link Action} to take after saving the metadata from\n     * \t\tthe form.\n     */\n    public Action getNextAction(ServletRequest request) {\n        Action ret;\n        String nextActionKey \u003d request.getParameter(\"nextAction\");\n        if (nextActionMap.containsKey(nextActionKey)) {\n            ret \u003d (Action) nextActionMap.get(nextActionKey);\n        } else {\n            ret \u003d NEXT_ACTION_DEFAULT;\n        }\n        return ret;\n    }\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "MetadataRecordModifier",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/MetadataRecordModifier.java",
    "test_prompt": "// MetadataRecordModifierTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.ContextURLBean;\nimport org.heal.module.metadata.ContributorBean;\nimport org.heal.module.metadata.CopyrightBean;\nimport org.heal.module.metadata.CopyrightHolderBean;\nimport org.heal.module.metadata.CopyrightTextBean;\nimport org.heal.module.metadata.DiseaseDiagnosisBean;\nimport org.heal.module.metadata.FormatBean;\nimport org.heal.module.metadata.KeywordBean;\nimport org.heal.module.metadata.RelationBean;\nimport org.heal.module.metadata.RequirementBean;\nimport org.heal.module.metadata.TargetUserGroupBean;\nimport org.heal.module.metadata.TaxonBean;\nimport org.heal.module.metadata.TaxonPathBean;\nimport org.heal.module.metadata.ThumbnailBean;\nimport org.heal.module.metadata.MetametadataIdentifierBean;\nimport org.heal.module.metadata.MetametadataContributorBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.DateTools;\nimport javax.servlet.ServletRequest;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.SortedSet;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MetadataRecordModifier}.\n* It contains ten unit test cases for the {@link MetadataRecordModifier#getNextAction(ServletRequest)} method.\n*/\nclass MetadataRecordModifierTest {",
    "method_signature": "getNextAction(ServletRequest)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// EditMetadataAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.module.metadata.TargetUserGroupBean;\nimport org.heal.module.metadata.ContributorBean;\nimport org.heal.module.metadata.CopyrightHolderBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport org.heal.util.VCardBean;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\n\n/**\n * An {@link org.heal.servlet.Action Action} used to edit metadata\n * records.\n *\n * @author Brad Schaefer (\u003cA HREF\u003d\"mailto:schaefer@lib.med.utah.edu\"\u003eschaefer@lib.med.utah.edu\u003c/A\u003e)\n * @version 1.0\n */\npublic class EditMetadataAction implements Action {\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin() {\n        return true;\n    }\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "EditMetadataAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/EditMetadataAction.java",
    "test_prompt": "// EditMetadataActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.module.metadata.TargetUserGroupBean;\nimport org.heal.module.metadata.ContributorBean;\nimport org.heal.module.metadata.CopyrightHolderBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport org.heal.util.VCardBean;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EditMetadataAction}.\n* It contains ten unit test cases for the {@link EditMetadataAction#actionRequiresLogin()} method.\n*/\nclass EditMetadataActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// EditContributorAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.ContributorBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\n\n/**\n * An {@link Action} which is called to edit a Contributor.  If\n * there isn\u0027t an existing Contributor which can be found to edit,\n * we assume that a new Contributor should be edited.\n */\npublic class EditContributorAction implements Action {\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin() {\n        return true;\n    }\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "EditContributorAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/EditContributorAction.java",
    "test_prompt": "// EditContributorActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.ContributorBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EditContributorAction}.\n* It contains ten unit test cases for the {@link EditContributorAction#actionRequiresLogin()} method.\n*/\nclass EditContributorActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ShowCatalogQueueAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.List;\n\n/**\n * An {@link org.heal.servlet.Action} which fetches the information needed to\n * display the catalog queue.\n *\n * @author Brad Schaefer (\u003cA HREF\u003d\"mailto:schaefer@lib.med.utah.edu\"\u003eschaefer@lib.med.utah.edu\u003c/A\u003e)\n */\npublic class ShowCatalogQueueAction implements Action {\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin() {\n        return true;\n    }\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "ShowCatalogQueueAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/ShowCatalogQueueAction.java",
    "test_prompt": "// ShowCatalogQueueActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ShowCatalogQueueAction}.\n* It contains ten unit test cases for the {@link ShowCatalogQueueAction#actionRequiresLogin()} method.\n*/\nclass ShowCatalogQueueActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// EditCopyrightHolderAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.CopyrightHolderBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\n\n/**\n * An {@link Action} which is called to edit a Copyright Holder.  If\n * there isn\u0027t an existing Copyright Holder which can be found to edit,\n * we assume that a new Copyright Holder should be edited.\n */\npublic class EditCopyrightHolderAction implements Action {\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin() {\n        return true;\n    }\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "EditCopyrightHolderAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/EditCopyrightHolderAction.java",
    "test_prompt": "// EditCopyrightHolderActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.CopyrightHolderBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EditCopyrightHolderAction}.\n* It contains ten unit test cases for the {@link EditCopyrightHolderAction#actionRequiresLogin()} method.\n*/\nclass EditCopyrightHolderActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// AlphanumericFileRenamePolicy.java\npackage org.heal.servlet.upload;\n\nimport com.oreilly.servlet.multipart.DefaultFileRenamePolicy;\nimport java.io.File;\n\n/**\n * A FileRenamePolicy that strips non-alphanumeric characters.\n */\npublic class AlphanumericFileRenamePolicy extends DefaultFileRenamePolicy {\n\n    /**\n     * Eliminates non-alphanumeric characters from filenames.  Exceptions\n     * include \u003ccode\u003e\u0027 \u0027\u003c/code\u003e, \u003ccode\u003e\u0027.\u0027\u003c/code\u003e and \u003ccode\u003e\u0027_\u0027\u003c/code\u003e\n     *\n     * @param original Original file reference.\n     * @return File reference stripped of non-alphanumeric characters.\n     */\n    public File rename(File original) {\n        File ret \u003d new File(stripSpecialCharacters(original.getPath()));\n        return super.rename(ret);\n    }\n}\n\n/**\n * A FileRenamePolicy that strips non-alphanumeric characters.\n */\npublic class AlphanumericFileRenamePolicy extends DefaultFileRenamePolicy {\n\n    /**\n     * Eliminates non-alphanumeric characters from filenames.  Exceptions\n     * include \u003ccode\u003e\u0027 \u0027\u003c/code\u003e, \u003ccode\u003e\u0027.\u0027\u003c/code\u003e and \u003ccode\u003e\u0027_\u0027\u003c/code\u003e\n     *\n     * @param original Original file reference.\n     * @return File reference stripped of non-alphanumeric characters.\n     */\n    public File rename(File original) {\n        File ret \u003d new File(stripSpecialCharacters(original.getPath()));\n        return super.rename(ret);\n    }\n}\n",
    "package": "org.heal.servlet.upload",
    "classname": "AlphanumericFileRenamePolicy",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/upload/AlphanumericFileRenamePolicy.java",
    "test_prompt": "// AlphanumericFileRenamePolicyTest.java\npackage org.heal.servlet.upload;\n\nimport com.oreilly.servlet.multipart.DefaultFileRenamePolicy;\nimport java.io.File;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AlphanumericFileRenamePolicy}.\n* It contains ten unit test cases for the {@link AlphanumericFileRenamePolicy#rename(File)} method.\n*/\nclass AlphanumericFileRenamePolicyTest {",
    "method_signature": "rename(File)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// DateTools.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n/**\n * A general utility class for dealing with dates.\n */\npublic class DateTools {\n\n    /**\n     * @param date A {@link Date} to format.\n     * @return A String representation of the date parameter in\n     * \t\tthe {@link #DEFAULT_DATE_FORMAT default format}.\n     */\n    public static String format(Date date) {\n        if (null \u003d\u003d date) {\n            return null;\n        }\n        SimpleDateFormat formatter \u003d new SimpleDateFormat(DEFAULT_DATE_FORMAT);\n        return formatter.format(date);\n    }\n}\n",
    "package": "org.heal.util",
    "classname": "DateTools",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/util/DateTools_0Test.java",
    "test_prompt": "// DateTools_0Test.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DateTools}.\n* It contains ten unit test cases for the {@link DateTools#format(Date)} method.\n*/\nclass DateTools_0Test {",
    "method_signature": "format(Date)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// DateTools.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n/**\n * A general utility class for dealing with dates.\n */\npublic class DateTools {\n\n    /**\n     * @param date A {@link Date} to format.\n     * @param format A format (corresponding to {@link SimpleDateFormat}\u0027s syntax)\n     * \t\tto convert the date to.\n     * @return A String representation of the date parameter in the\n     * \t\tspecified format, or null if the given date is null.\n     */\n    public static String format(Date date, String format) {\n        if (null \u003d\u003d date) {\n            return null;\n        }\n        SimpleDateFormat formatter \u003d new SimpleDateFormat(format);\n        return formatter.format(date);\n    }\n}\n",
    "package": "org.heal.util",
    "classname": "DateTools",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/util/DateTools_1Test.java",
    "test_prompt": "// DateTools_1Test.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DateTools}.\n* It contains ten unit test cases for the {@link DateTools#format(Date, String)} method.\n*/\nclass DateTools_1Test {",
    "method_signature": "format(Date, String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// DateTools.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n/**\n * A general utility class for dealing with dates.\n */\npublic class DateTools {\n\n    /**\n     * @param dateString A String to parse into a {@link Date} object.\n     * @return A {@link Date} representation of the String when possible,\n     * \t\tor \u003ccode\u003enull\u003c/code\u003e if the date cannot be parsed.\n     */\n    public static Date parse(String dateString) {\n        Date ret \u003d null;\n        if (null !\u003d dateString) {\n            boolean match \u003d false;\n            SimpleDateFormat formatter \u003d new SimpleDateFormat();\n            formatter.setLenient(false);\n            for (int i \u003d 0; i \u003c POSSIBLE_DATE_FORMATS.length \u0026\u0026 !match; ++i) {\n                formatter.applyPattern(POSSIBLE_DATE_FORMATS[i]);\n                try {\n                    ret \u003d formatter.parse(dateString);\n                    match \u003d true;\n                } catch (ParseException e) {\n                    // do nothing\n                }\n            }\n        }\n        return ret;\n    }\n}\n",
    "package": "org.heal.util",
    "classname": "DateTools",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/util/DateTools_2Test.java",
    "test_prompt": "// DateTools_2Test.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DateTools}.\n* It contains ten unit test cases for the {@link DateTools#parse(String)} method.\n*/\nclass DateTools_2Test {",
    "method_signature": "parse(String)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// DateTools.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n/**\n * A general utility class for dealing with dates.\n */\npublic class DateTools {\n\n    /**\n     * @param dateString A String to parse into a {@link Date} object.\n     * @param format A format to use to parse the date parameter with.\n     * @return A {@link Date} representation of the String when possible,\n     * \t\tor \u003ccode\u003enull\u003c/code\u003e if the date cannot be parsed with the\n     * \t\tgiven format.\n     */\n    public static Date parse(String dateString, String format) {\n        Date ret \u003d null;\n        if (null !\u003d dateString) {\n            SimpleDateFormat formatter \u003d new SimpleDateFormat(format);\n            formatter.setLenient(false);\n            try {\n                ret \u003d formatter.parse(dateString);\n            } catch (ParseException e) {\n                // do nothing\n            }\n        }\n        return ret;\n    }\n}\n",
    "package": "org.heal.util",
    "classname": "DateTools",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/util/DateTools_3Test.java",
    "test_prompt": "// DateTools_3Test.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DateTools}.\n* It contains ten unit test cases for the {@link DateTools#parse(String, String)} method.\n*/\nclass DateTools_3Test {",
    "method_signature": "parse(String, String)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// DateTools.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n/**\n * A general utility class for dealing with dates.\n */\npublic class DateTools {\n\n    /**\n     * @param dateString A String that may or may not represent a\n     * \t\t{@link Date} that can be parsed.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if a {@link Date} can be parsed from\n     * \t\tthe String, or \u003ccode\u003efalse\u003c/code\u003e otherwise.\n     * @see #parse(String dateString)\n     */\n    public static boolean isValidDate(String dateString) {\n        boolean match \u003d false;\n        if (null !\u003d dateString) {\n            SimpleDateFormat formatter \u003d new SimpleDateFormat();\n            formatter.setLenient(false);\n            for (int i \u003d 0; i \u003c POSSIBLE_DATE_FORMATS.length \u0026\u0026 !match; ++i) {\n                formatter.applyPattern(POSSIBLE_DATE_FORMATS[i]);\n                try {\n                    formatter.parse(dateString);\n                    match \u003d true;\n                } catch (ParseException e) {\n                    // do nothing\n                }\n            }\n        }\n        return match;\n    }\n}\n",
    "package": "org.heal.util",
    "classname": "DateTools",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/util/DateTools_4Test.java",
    "test_prompt": "// DateTools_4Test.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DateTools}.\n* It contains ten unit test cases for the {@link DateTools#isValidDate(String)} method.\n*/\nclass DateTools_4Test {",
    "method_signature": "isValidDate(String)",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// DateTools.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n/**\n * A general utility class for dealing with dates.\n */\npublic class DateTools {\n\n    /**\n     * @param dateString A String that may or may not represent a\n     * \t\t{@link Date} that can be parsed with the given format.\n     * @param format A format to use to check if the String can\n     * \t\tbe parsed into a {@link Date}.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if a {@link Date} can be parsed from\n     * \t\tthe String in the given format, or \u003ccode\u003efalse\u003c/code\u003e\n     * \t\totherwise.\n     * @see #parse(String dateString, String format)\n     */\n    public static boolean isValidDate(String dateString, String format) {\n        boolean match \u003d false;\n        SimpleDateFormat formatter \u003d new SimpleDateFormat(format);\n        formatter.setLenient(false);\n        try {\n            formatter.parse(dateString);\n            match \u003d true;\n        } catch (ParseException e) {\n            // do nothing\n        }\n        return match;\n    }\n}\n",
    "package": "org.heal.util",
    "classname": "DateTools",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/util/DateTools_5Test.java",
    "test_prompt": "// DateTools_5Test.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DateTools}.\n* It contains ten unit test cases for the {@link DateTools#isValidDate(String, String)} method.\n*/\nclass DateTools_5Test {",
    "method_signature": "isValidDate(String, String)",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// QueueDAO.java\npackage org.heal.module.catalog;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.util.CommonDAO;\nimport javax.sql.DataSource;\nimport java.io.Serializable;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n/**\n * A DAO for managing queues stored in the database\n */\npublic class QueueDAO implements Serializable {\n\n    /**\n     * @param type The type of QueuedRecordBeans to get.\n     * @return A List of QueuedRecordBeans.\n     */\n    public List\u003cQueuedRecordBean\u003e getQueueByType(final String type) {\n        List\u003cQueuedRecordBean\u003e result \u003d null;\n        Connection conn \u003d null;\n        try {\n            conn \u003d dataSource.getConnection();\n            result \u003d getQueue(type, conn);\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (null !\u003d conn) {\n                try {\n                    conn.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "org.heal.module.catalog",
    "classname": "QueueDAO",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/module/catalog/QueueDAO_0Test.java",
    "test_prompt": "// QueueDAO_0Test.java\npackage org.heal.module.catalog;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.util.CommonDAO;\nimport javax.sql.DataSource;\nimport java.io.Serializable;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QueueDAO}.\n* It contains ten unit test cases for the {@link QueueDAO#getQueueByType(String)} method.\n*/\nclass QueueDAO_0Test {",
    "method_signature": "getQueueByType(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// QueueDAO.java\npackage org.heal.module.catalog;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.util.CommonDAO;\nimport javax.sql.DataSource;\nimport java.io.Serializable;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n/**\n * A DAO for managing queues stored in the database\n */\npublic class QueueDAO implements Serializable {\n\n    /**\n     * Saves a {@link QueuedRecordBean} to the database.\n     *\n     * @param queuedRecord A non-null QueuedRecordBean to save.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the save is successful, false otherwise.\n     */\n    public boolean saveQueuedRecord(final QueuedRecordBean queuedRecord) {\n        boolean result \u003d false;\n        if (null \u003d\u003d queuedRecord) {\n            throw new IllegalArgumentException(\"queuedRecord argument must be non-null\");\n        }\n        if (null \u003d\u003d queuedRecord.getType()) {\n            throw new IllegalArgumentException(\"Cannot save a QueuedRecordBean without a type\");\n        }\n        if (null \u003d\u003d queuedRecord.getShortMetadata() || null \u003d\u003d queuedRecord.getShortMetadata().getMetadataId()) {\n            throw new IllegalArgumentException(\"Cannot save a queued record without a metadataId\");\n        }\n        Connection conn \u003d null;\n        try {\n            conn \u003d dataSource.getConnection();\n            saveQueuedRecord(queuedRecord, conn);\n            result \u003d true;\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            if (null !\u003d conn) {\n                try {\n                    conn.close();\n                } catch (SQLException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return result;\n    }\n}\n",
    "package": "org.heal.module.catalog",
    "classname": "QueueDAO",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/module/catalog/QueueDAO_1Test.java",
    "test_prompt": "// QueueDAO_1Test.java\npackage org.heal.module.catalog;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.util.CommonDAO;\nimport javax.sql.DataSource;\nimport java.io.Serializable;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QueueDAO}.\n* It contains ten unit test cases for the {@link QueueDAO#saveQueuedRecord(QueuedRecordBean)} method.\n*/\nclass QueueDAO_1Test {",
    "method_signature": "saveQueuedRecord(QueuedRecordBean)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// ParameterBean.java\npackage org.heal.module.search;\n\nimport java.util.*;\n\npublic class ParameterBean {\n\n    /**\n     * Accessor method, returns the searchParameter size\n     *\n     * @return int\n     */\n    public int size() {\n        return searchParameters.size();\n    }\n}\n",
    "package": "org.heal.module.search",
    "classname": "ParameterBean",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/module/search/ParameterBean.java",
    "test_prompt": "// ParameterBeanTest.java\npackage org.heal.module.search;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ParameterBean}.\n* It contains ten unit test cases for the {@link ParameterBean#size()} method.\n*/\nclass ParameterBeanTest {",
    "method_signature": "size()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// DownloadQueueBean.java\npackage org.heal.module.download;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.TreeSet;\n\n/**\n * Stores a list of contentIds and a package file location and url.\n *\n * @author Seth Wright\n * @version 0.1\n */\npublic class DownloadQueueBean implements Serializable {\n\n    /**\n     * Removes all metadata id from the list of content to include in the\n     * package generated for this queue.\n     */\n    public boolean removeAllFromQueue() {\n        packageModifiedSinceFileCreated \u003d true;\n        contentSet.clear();\n        return true;\n    }\n}\n",
    "package": "org.heal.module.download",
    "classname": "DownloadQueueBean",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/module/download/DownloadQueueBean_0Test.java",
    "test_prompt": "// DownloadQueueBean_0Test.java\npackage org.heal.module.download;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.TreeSet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DownloadQueueBean}.\n* It contains ten unit test cases for the {@link DownloadQueueBean#removeAllFromQueue()} method.\n*/\nclass DownloadQueueBean_0Test {",
    "method_signature": "removeAllFromQueue()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// DownloadQueueBean.java\npackage org.heal.module.download;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.TreeSet;\n\n/**\n * Stores a list of contentIds and a package file location and url.\n *\n * @author Seth Wright\n * @version 0.1\n */\npublic class DownloadQueueBean implements Serializable {\n\n    /**\n     * Deletes all package file settings (last modified, location, url)\n     * but leaves the queue of id\u0027s intact.\n     * Returns true on success.\n     */\n    public boolean clearPackageFileSettings() {\n        packageFileLocation \u003d null;\n        packageURL \u003d null;\n        packageModifiedSinceFileCreated \u003d true;\n        packageFormat \u003d -1;\n        return true;\n    }\n}\n",
    "package": "org.heal.module.download",
    "classname": "DownloadQueueBean",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/module/download/DownloadQueueBean_1Test.java",
    "test_prompt": "// DownloadQueueBean_1Test.java\npackage org.heal.module.download;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.TreeSet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DownloadQueueBean}.\n* It contains ten unit test cases for the {@link DownloadQueueBean#clearPackageFileSettings()} method.\n*/\nclass DownloadQueueBean_1Test {",
    "method_signature": "clearPackageFileSettings()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// DownloadFolderTag.java\npackage org.heal.tag.download;\n\nimport org.heal.module.download.DownloadQueueBean;\nimport org.heal.module.metadata.ShortMetadataBean;\nimport org.heal.util.FileLocator;\nimport javax.servlet.jsp.tagext.TagSupport;\n\n/**\n * A tag which is basically acts as a container for attributes which\n * nested tags will utilize.\n *\n * @version 1.0\n * @author Brad Schaefer (\u003cA HREF\u003d\"mailto:schaefer@lib.med.utah.edu\"\u003eschaefer@lib.med.utah.edu\u003c/A\u003e)\n * @see org.heal.tag.download.DownloadFolderActionTag\n */\npublic class DownloadFolderTag extends TagSupport {\n\n    /**\n     * Parses the attributes so as to initialize the\n     * {@link #getDownloadFolderType() download folder type} for child tags\n     * to use.\n     *\n     * @return Always returns \u003ccode\u003eTagSupport.EVAL_BODY_INCLUDE\u003c/code\u003e\n     */\n    public int doStartTag() {\n        FileLocator locator \u003d (FileLocator) pageContext.getServletContext().getAttribute(\"healFileLocator\");\n        if (\"web page\".equals(shortMetadata.getFormat().toLowerCase()) || !shortMetadata.getLocation().toLowerCase().startsWith(locator.getServerBaseURL())) {\n            if (\"image\".equals(shortMetadata.getFormat().toLowerCase())) {\n                downloadFolderType \u003d REMOTE_IMAGE;\n            } else {\n                downloadFolderType \u003d UNAVAILABLE;\n            }\n        } else if (downloadQueue.isQueuedAlready(shortMetadata.getMetadataId())) {\n            downloadFolderType \u003d REMOVE;\n        } else {\n            downloadFolderType \u003d ADD;\n        }\n        return TagSupport.EVAL_BODY_INCLUDE;\n    }\n}\n",
    "package": "org.heal.tag.download",
    "classname": "DownloadFolderTag",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/tag/download/DownloadFolderTag_0Test.java",
    "test_prompt": "// DownloadFolderTag_0Test.java\npackage org.heal.tag.download;\n\nimport org.heal.module.download.DownloadQueueBean;\nimport org.heal.module.metadata.ShortMetadataBean;\nimport org.heal.util.FileLocator;\nimport javax.servlet.jsp.tagext.TagSupport;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DownloadFolderTag}.\n* It contains ten unit test cases for the {@link DownloadFolderTag#doStartTag()} method.\n*/\nclass DownloadFolderTag_0Test {",
    "method_signature": "doStartTag()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// DownloadFolderTag.java\npackage org.heal.tag.download;\n\nimport org.heal.module.download.DownloadQueueBean;\nimport org.heal.module.metadata.ShortMetadataBean;\nimport org.heal.util.FileLocator;\nimport javax.servlet.jsp.tagext.TagSupport;\n\n/**\n * A tag which is basically acts as a container for attributes which\n * nested tags will utilize.\n *\n * @version 1.0\n * @author Brad Schaefer (\u003cA HREF\u003d\"mailto:schaefer@lib.med.utah.edu\"\u003eschaefer@lib.med.utah.edu\u003c/A\u003e)\n * @see org.heal.tag.download.DownloadFolderActionTag\n */\npublic class DownloadFolderTag extends TagSupport {\n\n    /**\n     * Resets the internal state of the tag.\n     *\n     * @return Always returns \u003ccode\u003eTagSupport.EVAL_PAGE\u003c/code\u003e\n     */\n    public int doEndTag() {\n        // In case the servlet container re-uses this object\n        resetTag();\n        return EVAL_PAGE;\n    }\n}\n",
    "package": "org.heal.tag.download",
    "classname": "DownloadFolderTag",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/tag/download/DownloadFolderTag_1Test.java",
    "test_prompt": "// DownloadFolderTag_1Test.java\npackage org.heal.tag.download;\n\nimport org.heal.module.download.DownloadQueueBean;\nimport org.heal.module.metadata.ShortMetadataBean;\nimport org.heal.util.FileLocator;\nimport javax.servlet.jsp.tagext.TagSupport;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DownloadFolderTag}.\n* It contains ten unit test cases for the {@link DownloadFolderTag#doEndTag()} method.\n*/\nclass DownloadFolderTag_1Test {",
    "method_signature": "doEndTag()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// SearchResult.java\npackage org.merlot.fedsearch.type;\n\npublic class SearchResult implements java.io.Serializable {\n\n    /**\n     * Return type metadata object\n     */\n    public static org.apache.axis.description.TypeDesc getTypeDesc() {\n        return typeDesc;\n    }\n}\n",
    "package": "org.merlot.fedsearch.type",
    "classname": "SearchResult",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/merlot/fedsearch/type/SearchResult.java",
    "test_prompt": "// SearchResultTest.java\npackage org.merlot.fedsearch.type;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SearchResult}.\n* It contains ten unit test cases for the {@link SearchResult#getTypeDesc()} method.\n*/\nclass SearchResultTest {",
    "method_signature": "getTypeDesc()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SearchResultElement.java\npackage org.merlot.fedsearch.type;\n\npublic class SearchResultElement implements java.io.Serializable {\n\n    /**\n     * Return type metadata object\n     */\n    public static org.apache.axis.description.TypeDesc getTypeDesc() {\n        return typeDesc;\n    }\n}\n",
    "package": "org.merlot.fedsearch.type",
    "classname": "SearchResultElement",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/merlot/fedsearch/type/SearchResultElement.java",
    "test_prompt": "// SearchResultElementTest.java\npackage org.merlot.fedsearch.type;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SearchResultElement}.\n* It contains ten unit test cases for the {@link SearchResultElement#getTypeDesc()} method.\n*/\nclass SearchResultElementTest {",
    "method_signature": "getTypeDesc()",
    "suffix": ""
  }
]