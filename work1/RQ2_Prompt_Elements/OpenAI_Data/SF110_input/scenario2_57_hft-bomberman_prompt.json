[
  {
    "numberTests": "ten",
    "original_code": "// ExplosionBounds.java\npackage server;\n\nimport java.awt.Point;\n\n/**\n * This class is used by the server to define the bounds of a bomb explosion.\n * It contains four integer fields indicating the min/max pixel value\n * in the given direction that is affected by the explosion. It further offers\n * a method to test if a given point lies within the defined bounds.\n *\n * @author Steffen\n */\npublic class ExplosionBounds {\n\n    /**\n     * Checks whether the given point lies within the bounds of the explosion.\n     *\n     * @param p The Point to be checked.\n     * @return True if p lies within the bounds, false if not.\n     */\n    public boolean contain(Point p) {\n        if (up \u003c\u003d p.y \u0026\u0026 down \u003e\u003d p.y \u0026\u0026 right \u003e\u003d p.x \u0026\u0026 left \u003c\u003d p.x) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n",
    "package": "server",
    "classname": "ExplosionBounds",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/server/ExplosionBounds.java",
    "test_prompt": "// ExplosionBoundsTest.java\npackage server;\n\nimport java.awt.Point;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExplosionBounds}.\n* It contains ten unit test cases for the {@link ExplosionBounds#contain(Point)} method.\n*/\nclass ExplosionBoundsTest {",
    "method_signature": "contain(Point)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// BomberServer.java\npackage server;\n\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Vector;\nimport javax.swing.ImageIcon;\nimport messages.Message;\nimport messages.global.GlobalServerMsg;\nimport messages.global.SessionDetailsMsg;\nimport messages.global.SessionListMsg;\nimport org.apache.log4j.Logger;\nimport org.hsqldb.Server;\nimport org.hsqldb.jdbc.jdbcDataSource;\nimport common.Constants;\n\n/**\n * This is the main server class. It is responsible for accepting connections\n * from clients and starting new games/session.\n *\n * @author Steffen, Bj�rn, Daniel\n */\npublic class BomberServer {\n\n    /**\n     * Static factory method.\n     *\n     * @return The BomberServer Singleton\n     */\n    public static BomberServer getInstance() {\n        if (bomberServer \u003d\u003d null) {\n            bomberServer \u003d new BomberServer();\n        }\n        return bomberServer;\n    }\n}\n",
    "package": "server",
    "classname": "BomberServer",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/server/BomberServer.java",
    "test_prompt": "// BomberServerTest.java\npackage server;\n\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Vector;\nimport javax.swing.ImageIcon;\nimport messages.Message;\nimport messages.global.GlobalServerMsg;\nimport messages.global.SessionDetailsMsg;\nimport messages.global.SessionListMsg;\nimport org.apache.log4j.Logger;\nimport org.hsqldb.Server;\nimport org.hsqldb.jdbc.jdbcDataSource;\nimport common.Constants;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BomberServer}.\n* It contains ten unit test cases for the {@link BomberServer#getInstance()} method.\n*/\nclass BomberServerTest {",
    "method_signature": "getInstance()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ServerBomb.java\npackage server;\n\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.util.Collection;\nimport java.util.Vector;\nimport messages.round.BombExplodedMsg;\nimport org.apache.log4j.Logger;\nimport common.Bomb;\nimport common.Constants;\nimport common.GameObject;\nimport common.Player;\nimport common.PowerUp;\nimport common.Tile;\nimport db.DBException;\nimport db.DBGameUser;\nimport db.DBServiceFactory;\n\n/**\n * The Bomb Object of the Server. This Bomb ticks some times and then exploded.\n * Then it detects the player and the tile hits.\n *\n * @author Bj�rn, Steffen, Daniel\n */\npublic class ServerBomb extends Bomb {\n\n    /**\n     * handles the tick of the bomb\n     *\n     * @return\n     */\n    public boolean tick() {\n        this.tickFrames--;\n        if (tickFrames \u003d\u003d 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n",
    "package": "server",
    "classname": "ServerBomb",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/server/ServerBomb.java",
    "test_prompt": "// ServerBombTest.java\npackage server;\n\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.util.Collection;\nimport java.util.Vector;\nimport messages.round.BombExplodedMsg;\nimport org.apache.log4j.Logger;\nimport common.Bomb;\nimport common.Constants;\nimport common.GameObject;\nimport common.Player;\nimport common.PowerUp;\nimport common.Tile;\nimport db.DBException;\nimport db.DBGameUser;\nimport db.DBServiceFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ServerBomb}.\n* It contains ten unit test cases for the {@link ServerBomb#tick()} method.\n*/\nclass ServerBombTest {",
    "method_signature": "tick()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// StopServer.java\npackage server;\n\nimport java.io.IOException;\nimport java.io.ObjectOutputStream;\nimport java.net.Socket;\nimport messages.Message;\nimport messages.global.StopServerMsg;\n\n/**\n * Sends a Message to the Server, that he should closed\n *\n * @author Bj�rn\n */\npublic class StopServer {\n\n    /**\n     * Connect to the Server\n     */\n    public boolean connectToSrv() {\n        try {\n            //System.out.println(\"Connecting...\");\n            System.out.println(\"Establishing a connection \");\n            server \u003d new Socket(serverName, serverPort);\n            out \u003d new ObjectOutputStream(server.getOutputStream());\n            System.out.println(\"connected to \" + serverName);\n            return true;\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            // e.printStackTrace();\n            System.out.println(\"Connection failed\");\n            return false;\n        }\n    }\n}\n",
    "package": "server",
    "classname": "StopServer",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/server/StopServer.java",
    "test_prompt": "// StopServerTest.java\npackage server;\n\nimport java.io.IOException;\nimport java.io.ObjectOutputStream;\nimport java.net.Socket;\nimport messages.Message;\nimport messages.global.StopServerMsg;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StopServer}.\n* It contains ten unit test cases for the {@link StopServer#connectToSrv()} method.\n*/\nclass StopServerTest {",
    "method_signature": "connectToSrv()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Map.java\npackage common;\n\nimport java.awt.Point;\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.Vector;\n\n/**\n * Map-Class with all information needed for map use of iterators tile-iterator:\n * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :\n * map.powerupiterator)\n *\n * @author christian\n */\npublic class Map implements Iterable\u003cTile\u003e, Serializable {\n\n    /**\n     * return MapTile object at Index x, y\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     * @return MapTile object\n     */\n    public Tile getTileByIndex(int x, int y) {\n        return (Tile) MapGrid[x][y];\n    }\n}\n",
    "package": "common",
    "classname": "Map",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/Map_0Test.java",
    "test_prompt": "// Map_0Test.java\npackage common;\n\nimport java.awt.Point;\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Map}.\n* It contains ten unit test cases for the {@link Map#getTileByIndex(int, int)} method.\n*/\nclass Map_0Test {",
    "method_signature": "getTileByIndex(int, int)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Map.java\npackage common;\n\nimport java.awt.Point;\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.Vector;\n\n/**\n * Map-Class with all information needed for map use of iterators tile-iterator:\n * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :\n * map.powerupiterator)\n *\n * @author christian\n */\npublic class Map implements Iterable\u003cTile\u003e, Serializable {\n\n    /**\n     * return MapTile object at Position x, y\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     * @return MapTile object\n     */\n    public Tile getTile(int x, int y) {\n        return (Tile) MapGrid[(int) Math.floor((double) x / Constants.TILE_BORDER)][(int) Math.floor((double) y / Constants.TILE_BORDER)];\n    }\n}\n",
    "package": "common",
    "classname": "Map",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/Map_1Test.java",
    "test_prompt": "// Map_1Test.java\npackage common;\n\nimport java.awt.Point;\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Map}.\n* It contains ten unit test cases for the {@link Map#getTile(int, int)} method.\n*/\nclass Map_1Test {",
    "method_signature": "getTile(int, int)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// Map.java\npackage common;\n\nimport java.awt.Point;\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.Vector;\n\n/**\n * Map-Class with all information needed for map use of iterators tile-iterator:\n * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :\n * map.powerupiterator)\n *\n * @author christian\n */\npublic class Map implements Iterable\u003cTile\u003e, Serializable {\n\n    /**\n     * gets start-point-coordinates of player no. if not set, return coordinates\n     * of field 1/1\n     *\n     * @param playerNo -\n     *            number of player\n     * @return Point with coordinates\n     */\n    public Point getStartPoint(int playerNo) {\n        // startpoint for player is not set, default 1/1\n        if (playerNo \u003e StartPoint.length) {\n            return new Point(1 * Constants.TILE_BORDER + Constants.TILE_BORDER / 2, // field\n            1 * Constants.TILE_BORDER + Constants.TILE_BORDER / 2);\n            // 1/1\n        } else {\n            Point retPoint \u003d StartPoint[(playerNo - 1)];\n            retPoint.x \u003d retPoint.x * Constants.TILE_BORDER + 20;\n            retPoint.y \u003d retPoint.y * Constants.TILE_BORDER + 20;\n            return retPoint;\n        }\n    }\n}\n",
    "package": "common",
    "classname": "Map",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/Map_2Test.java",
    "test_prompt": "// Map_2Test.java\npackage common;\n\nimport java.awt.Point;\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Map}.\n* It contains ten unit test cases for the {@link Map#getStartPoint(int)} method.\n*/\nclass Map_2Test {",
    "method_signature": "getStartPoint(int)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// ResourceService.java\npackage common;\n\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\n\n/**\n * This is an utility class that offers functionality to load resources that are\n * located in the classpath. This is used to load resources like images and sound files\n * from the client jar file.\n *\n * @author andi\n */\npublic class ResourceService {\n\n    /**\n     * Loads the {@link Image} that is located at the specified path.\n     *\n     * @param path The location of the image within the classpath.\n     * @return The loaded {@link Image} or null if there was an IOException while trying\n     * to read the image from a stream.\n     */\n    public static Image getImage(String path) {\n        BufferedImage image;\n        try {\n            image \u003d ImageIO.read(getInputStream(path));\n        } catch (IOException e) {\n            image \u003d null;\n        }\n        return image;\n    }\n}\n",
    "package": "common",
    "classname": "ResourceService",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/ResourceService_0Test.java",
    "test_prompt": "// ResourceService_0Test.java\npackage common;\n\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ResourceService}.\n* It contains ten unit test cases for the {@link ResourceService#getImage(String)} method.\n*/\nclass ResourceService_0Test {",
    "method_signature": "getImage(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// ResourceService.java\npackage common;\n\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\n\n/**\n * This is an utility class that offers functionality to load resources that are\n * located in the classpath. This is used to load resources like images and sound files\n * from the client jar file.\n *\n * @author andi\n */\npublic class ResourceService {\n\n    /**\n     * Loads the {@link ImageIcon} that is located at the specified path.\n     *\n     * @param path The location of the image within the classpath.\n     * @return The loaded {@link ImageIcon}\n     */\n    public static ImageIcon getImageIcon(String path) {\n        return new ImageIcon(getImage(path));\n    }\n}\n",
    "package": "common",
    "classname": "ResourceService",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/ResourceService_1Test.java",
    "test_prompt": "// ResourceService_1Test.java\npackage common;\n\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ResourceService}.\n* It contains ten unit test cases for the {@link ResourceService#getImageIcon(String)} method.\n*/\nclass ResourceService_1Test {",
    "method_signature": "getImageIcon(String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// ResourceService.java\npackage common;\n\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\n\n/**\n * This is an utility class that offers functionality to load resources that are\n * located in the classpath. This is used to load resources like images and sound files\n * from the client jar file.\n *\n * @author andi\n */\npublic class ResourceService {\n\n    /**\n     * Creates a connection to the resource that is located at the specified\n     * path via an {@link InputStream}.\n     *\n     * @param path The location of the resource within the classpath.\n     * @return The {@link InputStream} that points the requested resource.\n     */\n    public static InputStream getInputStream(String path) {\n        InputStream resourceAsStream \u003d ResourceService.class.getResourceAsStream(path);\n        if (resourceAsStream \u003d\u003d null) {\n            throw new IllegalArgumentException(\"No such resource: \" + path);\n        }\n        return resourceAsStream;\n    }\n}\n",
    "package": "common",
    "classname": "ResourceService",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/ResourceService_2Test.java",
    "test_prompt": "// ResourceService_2Test.java\npackage common;\n\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ResourceService}.\n* It contains ten unit test cases for the {@link ResourceService#getInputStream(String)} method.\n*/\nclass ResourceService_2Test {",
    "method_signature": "getInputStream(String)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// MapPreview.java\npackage common;\n\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.Point;\nimport java.awt.geom.AffineTransform;\nimport java.awt.image.AffineTransformOp;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Vector;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\nimport org.apache.log4j.Logger;\n\n/**\n * create a ImageIcon Map Preview of a map object\n *\n * usage example: MapPreview mp \u003d new MapPreview(map); mp.setImageSet(\"desert\");\n * (optional) ImageIcon ii \u003d mp.getMapPreview(150); !!\n *\n * @author christian\n */\npublic class MapPreview {\n\n    /**\n     * returns preview of current map\n     *\n     * @param previewWidth -\n     *            Width of preview. Proportions are constrained\n     * @return BufferedImage with map preview\n     */\n    public ImageIcon getMapPreview(int previewWidth) {\n        // check if file is available, file name is identical to\n        // xml file with appended .png\n        File checkFile \u003d new File(mapFile + \"_\" + mapImageSet + \".png\");\n        if (checkFile.exists()) {\n            logger.info(\"Loading map preview: \" + checkFile.getName());\n            BufferedImage mapPreview;\n            try {\n                mapPreview \u003d ImageIO.read(new File(mapFile + \"_\" + mapImageSet + \".png\"));\n                mapPreviewIcon \u003d new ImageIcon();\n                mapPreviewIcon.setImage((Image) mapPreview);\n            } catch (IOException e) {\n                logger.error(e);\n            }\n        } else {\n            // image not found, create it\n            logger.info(\"Creating map preview: \" + checkFile.getName());\n            // preload images\n            TILE_WALL_IMAGE \u003d LoadImage(\"wall\");\n            TILE_STONE_IMAGE \u003d LoadImage(\"stone\");\n            mapPreviewIcon \u003d new ImageIcon();\n            mapPreview \u003d new BufferedImage(mapArea.x * Constants.TILE_BORDER, mapArea.y * Constants.TILE_BORDER, BufferedImage.TYPE_INT_RGB);\n            // draw map to BufferedImage\n            drawMap();\n            try {\n                ImageIO.write(scale(mapPreview, previewWidth), \"png\", checkFile);\n            } catch (Exception e) {\n                logger.error(\"Caught in getMapPreview(): \" + e);\n            }\n            // return / resize and return\n            if (previewWidth \u003d\u003d (mapArea.x * Constants.TILE_BORDER)) {\n                mapPreviewIcon.setImage((Image) mapPreview);\n            } else {\n                mapPreviewIcon.setImage((Image) scale(mapPreview, previewWidth));\n            }\n        }\n        return mapPreviewIcon;\n    }\n}\n",
    "package": "common",
    "classname": "MapPreview",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/MapPreview.java",
    "test_prompt": "// MapPreviewTest.java\npackage common;\n\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.Point;\nimport java.awt.geom.AffineTransform;\nimport java.awt.image.AffineTransformOp;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Vector;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\nimport org.apache.log4j.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapPreview}.\n* It contains ten unit test cases for the {@link MapPreview#getMapPreview(int)} method.\n*/\nclass MapPreviewTest {",
    "method_signature": "getMapPreview(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// XmlFunctions.java\npackage common;\n\nimport java.io.File;\nimport java.io.IOException;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathExpression;\nimport javax.xml.xpath.XPathExpressionException;\nimport javax.xml.xpath.XPathFactory;\nimport org.apache.log4j.Logger;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\n\n/**\n * basic functions for reading and writing xml files\n *\n * @author christian\n */\npublic class XmlFunctions {\n\n    /**\n     * returns value of specific xml element\n     *\n     * @param XmlPath -\n     *            element path (XPath)\n     * @return String with value of element\n     */\n    public String getXmlValue(String XmlPath) {\n        Node node \u003d findXmlNode(XmlPath);\n        return node.getTextContent();\n    }\n}\n",
    "package": "common",
    "classname": "XmlFunctions",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/XmlFunctions_0Test.java",
    "test_prompt": "// XmlFunctions_0Test.java\npackage common;\n\nimport java.io.File;\nimport java.io.IOException;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathExpression;\nimport javax.xml.xpath.XPathExpressionException;\nimport javax.xml.xpath.XPathFactory;\nimport org.apache.log4j.Logger;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlFunctions}.\n* It contains ten unit test cases for the {@link XmlFunctions#getXmlValue(String)} method.\n*/\nclass XmlFunctions_0Test {",
    "method_signature": "getXmlValue(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// XmlFunctions.java\npackage common;\n\nimport java.io.File;\nimport java.io.IOException;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathExpression;\nimport javax.xml.xpath.XPathExpressionException;\nimport javax.xml.xpath.XPathFactory;\nimport org.apache.log4j.Logger;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\n\n/**\n * basic functions for reading and writing xml files\n *\n * @author christian\n */\npublic class XmlFunctions {\n\n    /**\n     * returns a list of nodes matching to the element name\n     *\n     * @param NodeName -\n     *            name of element(s)\n     * @return NodeList with found nodes\n     */\n    public NodeList findXmlNodes(String NodeName) {\n        try {\n            XPath xpath \u003d XPathFactory.newInstance().newXPath();\n            XPathExpression expr \u003d xpath.compile(NodeName);\n            Object result \u003d expr.evaluate(xml, XPathConstants.NODESET);\n            return (NodeList) result;\n        } catch (XPathExpressionException ex) {\n            logger.error(ex);\n        }\n        return null;\n    }\n}\n",
    "package": "common",
    "classname": "XmlFunctions",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/XmlFunctions_1Test.java",
    "test_prompt": "// XmlFunctions_1Test.java\npackage common;\n\nimport java.io.File;\nimport java.io.IOException;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathExpression;\nimport javax.xml.xpath.XPathExpressionException;\nimport javax.xml.xpath.XPathFactory;\nimport org.apache.log4j.Logger;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlFunctions}.\n* It contains ten unit test cases for the {@link XmlFunctions#findXmlNodes(String)} method.\n*/\nclass XmlFunctions_1Test {",
    "method_signature": "findXmlNodes(String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// MapReader.java\npackage common;\n\nimport org.apache.log4j.Logger;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport java.awt.Point;\nimport javax.xml.xpath.*;\nimport java.util.Date;\n\n/**\n * Loads a XML-file and write read properties, tiles and start points to\n * map-object\n *\n * @author christian\n */\npublic class MapReader {\n\n    /**\n     * Returns a specific value in a group of nodes using XPath expressions\n     *\n     * @param node -\n     *            node(set) in which value should be searched\n     * @param XMLPath -\n     *            XPath expression\n     * @return String - found value\n     */\n    public String getXMLValue(Node node, String XMLPath) {\n        try {\n            // todo: exception wenn feld leer\n            XPath xpath \u003d XPathFactory.newInstance().newXPath();\n            XPathExpression expr \u003d xpath.compile(XMLPath);\n            Object result \u003d expr.evaluate(node, XPathConstants.NODE);\n            Node foundNode \u003d (Node) result;\n            return foundNode.getNodeValue();\n        } catch (XPathExpressionException ex) {\n            logger.error(ex);\n        }\n        return new String();\n    }\n}\n",
    "package": "common",
    "classname": "MapReader",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/MapReader.java",
    "test_prompt": "// MapReaderTest.java\npackage common;\n\nimport org.apache.log4j.Logger;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport java.awt.Point;\nimport javax.xml.xpath.*;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapReader}.\n* It contains ten unit test cases for the {@link MapReader#getXMLValue(Node, String)} method.\n*/\nclass MapReaderTest {",
    "method_signature": "getXMLValue(Node, String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// MapFilesLister.java\npackage common;\n\nimport java.io.File;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Vector;\nimport org.apache.log4j.Logger;\nimport messages.global.MapInfo;\n\n/**\n * class for listing maps and returning map information\n *\n * @author christian\n */\npublic class MapFilesLister {\n\n    /**\n     * reads directory and returns a list of found xml-files\n     *\n     * @param dir -\n     *            directory to be searched in\n     * @return Vector\u003cFile\u003e\n     */\n    public Vector\u003cFile\u003e ListMaps(String dir) {\n        // open map folder\n        logger.info(\"Read map directory: \" + dir + \"...\");\n        File mapDir \u003d new File(dir);\n        File[] mapDirFiles \u003d mapDir.listFiles();\n        Vector\u003cFile\u003e foundFiles \u003d new Vector\u003cFile\u003e();\n        // open directories in map folder\n        for (int i \u003d 0; i \u003c mapDirFiles.length; i++) {\n            if (mapDirFiles[i].isFile() \u0026\u0026 mapDirFiles[i].toString().endsWith(\".xml\")) {\n                logger.info(\"XML: \" + mapDirFiles[i]);\n                foundFiles.add(mapDirFiles[i]);\n            }\n        }\n        return foundFiles;\n    }\n}\n",
    "package": "common",
    "classname": "MapFilesLister",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/MapFilesLister.java",
    "test_prompt": "// MapFilesListerTest.java\npackage common;\n\nimport java.io.File;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Vector;\nimport org.apache.log4j.Logger;\nimport messages.global.MapInfo;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapFilesLister}.\n* It contains ten unit test cases for the {@link MapFilesLister#ListMaps(String)} method.\n*/\nclass MapFilesListerTest {",
    "method_signature": "ListMaps(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// GameModel.java\npackage common;\n\nimport java.awt.Point;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Vector;\nimport java.util.Map.Entry;\nimport messages.round.RoundTimeOverMsg;\nimport org.apache.log4j.Logger;\n\n/**\n * @author Steffen, Andi, Bj�rn\n */\npublic class GameModel {\n\n    /**\n     * Checks if the game is over and if yes returns the gameObjectId of the\n     * winner.\n     *\n     * @return -1 if game still running, 0 in case of a tie, gameObjectId of the\n     *         winner in all other cases\n     */\n    public int checkForWinner() {\n        if (players.size() \u003c 2) {\n            // 0 means it\u0027s a tie (all remaining players got\n            int winnerId \u003d 0;\n            // killed by the same bomb)\n            if (players.size() \u003d\u003d 1) {\n                // only the winner is left\n                winnerId \u003d players.get(0).getId();\n            }\n            return winnerId;\n        } else {\n            // game still running\n            return -1;\n        }\n    }\n}\n",
    "package": "common",
    "classname": "GameModel",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/GameModel.java",
    "test_prompt": "// GameModelTest.java\npackage common;\n\nimport java.awt.Point;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Vector;\nimport java.util.Map.Entry;\nimport messages.round.RoundTimeOverMsg;\nimport org.apache.log4j.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GameModel}.\n* It contains ten unit test cases for the {@link GameModel#checkForWinner()} method.\n*/\nclass GameModelTest {",
    "method_signature": "checkForWinner()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ClientProperties.java\npackage client;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.apache.log4j.Logger;\nimport common.Constants;\nimport common.XmlFunctions;\n\n/**\n * reads and writes properties to xml-file\n * properties file is saved to user directory\n *\n * @author christian\n */\npublic class ClientProperties {\n\n    /**\n     * get property value by element-name returns empty string if fileError is\n     * true\n     *\n     * @param element -\n     *            Name of element\n     * @return String - value\n     */\n    public String getProperty(String element) {\n        if (!fileError) {\n            String XmlPath \u003d \"//\" + element;\n            return xmlFunctions.getXmlValue(XmlPath);\n        } else {\n            return new String(\"\");\n        }\n    }\n}\n",
    "package": "client",
    "classname": "ClientProperties",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/ClientProperties_0Test.java",
    "test_prompt": "// ClientProperties_0Test.java\npackage client;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.apache.log4j.Logger;\nimport common.Constants;\nimport common.XmlFunctions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientProperties}.\n* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.\n*/\nclass ClientProperties_0Test {",
    "method_signature": "getProperty(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClientProperties.java\npackage client;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.apache.log4j.Logger;\nimport common.Constants;\nimport common.XmlFunctions;\n\n/**\n * reads and writes properties to xml-file\n * properties file is saved to user directory\n *\n * @author christian\n */\npublic class ClientProperties {\n\n    /**\n     * copies a file from a to b\n     * used InputStream as provided from ResourceService class as\n     * source and File as destination\n     *\n     * @param sourceFile -\n     *            InputStream - File which should be copied\n     * @param destFile -\n     *            destination where file should be copied to\n     * @return boolean - true if successfully copied, otherwise false\n     */\n    public static boolean fileCopy(InputStream sourceFile, File destFile) {\n        try {\n            InputStream in \u003d sourceFile;\n            FileOutputStream out \u003d new FileOutputStream(destFile);\n            byte[] buf \u003d new byte[4096];\n            int len;\n            while ((len \u003d in.read(buf)) \u003e 0) out.write(buf, 0, len);\n            out.close();\n            in.close();\n        } catch (IOException e) {\n            return false;\n        }\n        return true;\n    }\n}\n",
    "package": "client",
    "classname": "ClientProperties",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/ClientProperties_1Test.java",
    "test_prompt": "// ClientProperties_1Test.java\npackage client;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.apache.log4j.Logger;\nimport common.Constants;\nimport common.XmlFunctions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientProperties}.\n* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.\n*/\nclass ClientProperties_1Test {",
    "method_signature": "fileCopy(InputStream, File)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClientPlayer.java\npackage client;\n\nimport java.awt.Point;\nimport org.apache.log4j.Logger;\nimport sound.SoundPlayer;\nimport common.Actor;\nimport common.Constants;\nimport common.Player;\n\n/**\n * The client specific implemetation of a Player. This implementation will\n * notify any number of registered observers about changes to their state.\n *\n * @author Andi, Bj�rn\n */\npublic class ClientPlayer extends Player {\n\n    /**\n     * Returns weather the player can bowl bombs\n     *\n     * @return boolean can bowl bombs\n     */\n    public boolean canBowlBombs() {\n        return bowlBombs;\n    }\n}\n",
    "package": "client",
    "classname": "ClientPlayer",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/ClientPlayer.java",
    "test_prompt": "// ClientPlayerTest.java\npackage client;\n\nimport java.awt.Point;\nimport org.apache.log4j.Logger;\nimport sound.SoundPlayer;\nimport common.Actor;\nimport common.Constants;\nimport common.Player;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientPlayer}.\n* It contains ten unit test cases for the {@link ClientPlayer#canBowlBombs()} method.\n*/\nclass ClientPlayerTest {",
    "method_signature": "canBowlBombs()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ClientGameRound.java\npackage client;\n\nimport java.awt.Point;\nimport java.util.HashMap;\nimport java.util.Observable;\nimport java.util.Observer;\nimport java.util.Vector;\nimport org.apache.log4j.Logger;\nimport client.controller.LocalControl;\nimport client.gui.StartFrame;\nimport client.network.ForwardingObserver;\nimport client.view.BombView;\nimport client.view.GameCanvas;\nimport client.view.GameView;\nimport client.view.GfxFactory;\nimport client.view.OffGamePainter;\nimport client.view.PlayerView;\nimport client.view.PowerUpView;\nimport client.view.StatusView;\nimport client.view.TileView;\nimport common.Bomb;\nimport common.Constants;\nimport common.GameModel;\nimport common.GameObject;\nimport common.GameRound;\nimport common.Map;\nimport common.Player;\nimport common.PowerUp;\nimport common.Tile;\n\n/**\n * Represents a game on the client side. This class serves as a connection\n * between the model, view and game loop.\n *\n * @author Andi, Bj�rn\n */\npublic class ClientGameRound extends GameRound implements Observer {\n\n    /**\n     * Searches and returns a GameObject by its id.\n     *\n     * @param id The id of the GameObject that should be returned.\n     * @return The matching GameObject or null if the id is unknown.\n     */\n    public GameObject getGameObjectById(int id) {\n        return model.getGameObjectById(id);\n    }\n}\n",
    "package": "client",
    "classname": "ClientGameRound",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/ClientGameRound.java",
    "test_prompt": "// ClientGameRoundTest.java\npackage client;\n\nimport java.awt.Point;\nimport java.util.HashMap;\nimport java.util.Observable;\nimport java.util.Observer;\nimport java.util.Vector;\nimport org.apache.log4j.Logger;\nimport client.controller.LocalControl;\nimport client.gui.StartFrame;\nimport client.network.ForwardingObserver;\nimport client.view.BombView;\nimport client.view.GameCanvas;\nimport client.view.GameView;\nimport client.view.GfxFactory;\nimport client.view.OffGamePainter;\nimport client.view.PlayerView;\nimport client.view.PowerUpView;\nimport client.view.StatusView;\nimport client.view.TileView;\nimport common.Bomb;\nimport common.Constants;\nimport common.GameModel;\nimport common.GameObject;\nimport common.GameRound;\nimport common.Map;\nimport common.Player;\nimport common.PowerUp;\nimport common.Tile;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientGameRound}.\n* It contains ten unit test cases for the {@link ClientGameRound#getGameObjectById(int)} method.\n*/\nclass ClientGameRoundTest {",
    "method_signature": "getGameObjectById(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// BomberClient.java\npackage client;\n\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\nimport javax.swing.ImageIcon;\nimport messages.Message;\nimport messages.global.InfoRequestMsg;\nimport messages.global.JoinSessionMsg;\nimport messages.global.MapInfo;\nimport messages.global.SessionDetailsMsg;\nimport messages.round.ClientQuitRunningSessionMsg;\nimport org.apache.log4j.Logger;\nimport client.gui.StartFrame;\nimport client.network.ClientMsgReceiver;\nimport client.network.ClientMsgSender;\n\n/**\n * This is central client class. It is responsible for globally scoped messages\n * and the creation of sessions.\n *\n * @author andi\n */\npublic class BomberClient extends Observable {\n\n    /**\n     * Returns the singleton.\n     *\n     * @return The only BomberClient instance.\n     */\n    public static BomberClient getInstance() {\n        if (instance \u003d\u003d null) {\n            logger.info(\"Creating BomberClient singleton instance\");\n            instance \u003d new BomberClient(\"client\");\n        }\n        return instance;\n    }\n}\n",
    "package": "client",
    "classname": "BomberClient",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/BomberClient_0Test.java",
    "test_prompt": "// BomberClient_0Test.java\npackage client;\n\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\nimport javax.swing.ImageIcon;\nimport messages.Message;\nimport messages.global.InfoRequestMsg;\nimport messages.global.JoinSessionMsg;\nimport messages.global.MapInfo;\nimport messages.global.SessionDetailsMsg;\nimport messages.round.ClientQuitRunningSessionMsg;\nimport org.apache.log4j.Logger;\nimport client.gui.StartFrame;\nimport client.network.ClientMsgReceiver;\nimport client.network.ClientMsgSender;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BomberClient}.\n* It contains ten unit test cases for the {@link BomberClient#getInstance()} method.\n*/\nclass BomberClient_0Test {",
    "method_signature": "getInstance()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// BomberClient.java\npackage client;\n\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\nimport javax.swing.ImageIcon;\nimport messages.Message;\nimport messages.global.InfoRequestMsg;\nimport messages.global.JoinSessionMsg;\nimport messages.global.MapInfo;\nimport messages.global.SessionDetailsMsg;\nimport messages.round.ClientQuitRunningSessionMsg;\nimport org.apache.log4j.Logger;\nimport client.gui.StartFrame;\nimport client.network.ClientMsgReceiver;\nimport client.network.ClientMsgSender;\n\n/**\n * This is central client class. It is responsible for globally scoped messages\n * and the creation of sessions.\n *\n * @author andi\n */\npublic class BomberClient extends Observable {\n\n    /**\n     * Tries to connect to the server.\n     *\n     * @throws RuntimeException Thrown when the connection attempt was not successful.\n     */\n    public boolean connectToSrv() {\n        try {\n            //System.out.println(\"Connecting...\");\n            logger.info(\"Establishing a connection \");\n            server \u003d new Socket(serverName, serverPort);\n            msgSender \u003d new ClientMsgSender(server);\n            msgSender.start();\n            msgReceiver \u003d new ClientMsgReceiver(server, BomberClient.this);\n            msgReceiver.start();\n            msgSender.sendMsg(new InfoRequestMsg(InfoRequestMsg.GET_SESSION_LIST));\n            logger.info(\"connected to \" + serverName);\n            return true;\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            // e.printStackTrace();\n            logger.info(\"Connection failed\");\n            return false;\n        }\n    }\n}\n",
    "package": "client",
    "classname": "BomberClient",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/BomberClient_1Test.java",
    "test_prompt": "// BomberClient_1Test.java\npackage client;\n\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\nimport javax.swing.ImageIcon;\nimport messages.Message;\nimport messages.global.InfoRequestMsg;\nimport messages.global.JoinSessionMsg;\nimport messages.global.MapInfo;\nimport messages.global.SessionDetailsMsg;\nimport messages.round.ClientQuitRunningSessionMsg;\nimport org.apache.log4j.Logger;\nimport client.gui.StartFrame;\nimport client.network.ClientMsgReceiver;\nimport client.network.ClientMsgSender;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BomberClient}.\n* It contains ten unit test cases for the {@link BomberClient#connectToSrv()} method.\n*/\nclass BomberClient_1Test {",
    "method_signature": "connectToSrv()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// GfxFactory.java\npackage client.view;\n\nimport java.awt.Image;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport javax.imageio.ImageIO;\nimport org.apache.log4j.Logger;\nimport common.ResourceService;\n\n/**\n * @author Andreas Glauner\n * @autor Adam Kozielski\n */\npublic class GfxFactory {\n\n    /**\n     * Power up image loading\n     *\n     * @param type A String value describing the type of powerUp\n     *  *\n     */\n    public Image getPowerUpImage(String type) {\n        if (!powerUpImageCache.keySet().contains(type)) {\n            String path \u003d \"/gfx/powerUps/\" + type + \".png\";\n            powerUpImageCache.put(type, loadImage(path));\n        }\n        return powerUpImageCache.get(type);\n    }\n}\n",
    "package": "client.view",
    "classname": "GfxFactory",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/view/GfxFactory.java",
    "test_prompt": "// GfxFactoryTest.java\npackage client.view;\n\nimport java.awt.Image;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport javax.imageio.ImageIO;\nimport org.apache.log4j.Logger;\nimport common.ResourceService;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GfxFactory}.\n* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.\n*/\nclass GfxFactoryTest {",
    "method_signature": "getPowerUpImage(String)",
    "suffix": ""
  }
]