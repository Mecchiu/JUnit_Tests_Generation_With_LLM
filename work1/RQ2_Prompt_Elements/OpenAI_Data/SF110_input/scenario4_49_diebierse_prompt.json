[
  {
    "numberTests": "ten",
    "original_code": "// Drink.java\npackage bierse.model;\n\nimport java.awt.event.KeyEvent;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport bierse.view.MyKeyMap;\n\n/**\n * @author Rainer Friesen\n */\npublic class Drink {\n\n    public static final String DRINKS_FOLDER \u003d Model.CONFIG_FOLDER + \"drinks/\";\n\n    public static final String NEW_DRINK_NAME \u003d \"Neues Getr�nk\";\n\n    /**\n     * Name of the drink\n     */\n    private String name;\n\n    /**\n     * Minimum price(Cent) for what the drink is sold.\n     */\n    private int minPrice \u003d 70;\n\n    /**\n     * Maximum price(Cent) for what the drink is sold,\n     */\n    private int maxPrice \u003d 130;\n\n    /**\n     * Current price(Cent) of the drink.\n     */\n    private int currentPrice \u003d 0;\n\n    /**\n     * Start price for this drink\n     */\n    private int startPrice \u003d 100;\n\n    /**\n     * Amount of drinks sold in the last iteration\n     */\n    private int lastSold \u003d 0;\n\n    /**\n     * The total amount of drinks sold\n     */\n    private int totalSold \u003d 0;\n\n    /**\n     * The average amount of drinks sold in an iteration. Used to calculate the new price.\n     */\n    private float averageAmount \u003d 0;\n\n    /**\n     * The average price in cent\n     */\n    private float averagePrice \u003d 0;\n\n    /**\n     * The average price (Cent) for what the drink is sold\n     */\n    private float averageSoldPrice \u003d 0;\n\n    /**\n     * The maximum difference between two prices in one iteration\n     */\n    private int maxStep \u003d 20;\n\n    /**\n     * The target amount of drinks to keep the price stable\n     */\n    private int targetAmount \u003d 20;\n\n    /**\n     * The delta to calculate the step width. If the targetAmount - delta is not reached\n     * the price is decreased by the maximum step. If the targetAmount + delta is reached\n     * the price is increased by the maximum step.\n     */\n    private int deltaAmount \u003d 15;\n\n    /**\n     * Show if the drink is used currently\n     */\n    private boolean used \u003d true;\n\n    /**\n     * Key used to indicate the sell of a drink\n     */\n    private int key \u003d KeyEvent.VK_F1;\n\n    /**\n     * Show if the price is lower (-1), equal(0) or higher(1) than during the last iteration\n     */\n    private int trend \u003d 0;\n\n    /**\n     * Keep the price and do no new calculation\n     */\n    private boolean keepPrice \u003d false;\n\n    /**\n     * Set the new price directly without calculating\n     */\n    private int directPrice \u003d 0;\n\n    /**\n     * Model that uses the drink\n     */\n    Model model;\n\n    /**\n     * *******************************************************************************************************************************************\n     *  Constructor\n     * *******************************************************************************************************************************************\n     */\n    public Drink(String name, Model model) {\n    }\n\n    public Drink(String name, Model model, int startPrice) {\n    }\n\n    /**\n     * Sell the amount of drinks\n     *\n     * @param amount Amount of drinks sold\n     */\n    public synchronized void sell(int amount);\n\n    public void setDirectPrice(int directPrice);\n\n    /**\n     * Recalculate the current price for this drink\n     */\n    public int recalculate();\n\n    /**\n     * Save the drink description to a XML file\n     */\n    public File save();\n\n    /**\n     * Load the description from a XML file\n     */\n    public void load();\n\n    public String toString();\n\n    public static String getDataHeaderString();\n\n    public String getDataString();\n\n    public int getMinPrice();\n\n    public void setMinPrice(int minPrice);\n\n    public int getMaxPrice();\n\n    public void setMaxPrice(int maxPrice);\n\n    public int getCurrentPrice();\n\n    public void setCurrentPrice(int currentPrice);\n\n    public int getLastSold();\n\n    public void setLastSold(int lastSold);\n\n    public int getTotalSold();\n\n    public void setTotalSold(int totalSold);\n\n    public float getAverageAmount();\n\n    public void setAverageAmount(float averageAmount);\n\n    public float getAveragePrice();\n\n    public void setAveragePrice(float averagePrice);\n\n    public float getAverageSoldPrice();\n\n    public void setAverageSoldPrice(float averageSoldPrice);\n\n    public int getMaxStep();\n\n    public void setMaxStep(int maxStep);\n\n    public int getTargetAmount();\n\n    public void setTargetAmount(int targetAmount);\n\n    public int getDeltaAmount();\n\n    public void setDeltaAmount(int deltaAmount);\n\n    public String getName();\n\n    public void setName(String name);\n\n    public int getStartPrice();\n\n    public void setStartPrice(int startPrice);\n\n    public boolean isUsed();\n\n    public void setUsed(boolean used);\n\n    public int getKey();\n\n    public void setKey(int key);\n\n    public int getTrend();\n\n    public boolean isKeepPrice();\n\n    public void setKeepPrice(boolean keepPrice);\n\n    public int getDirectPrice();\n\n    @Override\n    public boolean equals(Object obj);\n}\n",
    "package": "bierse.model",
    "classname": "Drink",
    "id": "/EvoSuiteBenchmark/original/49_diebierse/src/main/java/bierse/model/Drink_0Test.java",
    "test_prompt": "// Drink_0Test.java\npackage bierse.model;\n\nimport java.awt.event.KeyEvent;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport bierse.view.MyKeyMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Drink}.\n* It contains ten unit test cases for the {@link Drink#recalculate()} method.\n*/\nclass Drink_0Test {",
    "method_signature": "recalculate()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Drink.java\npackage bierse.model;\n\nimport java.awt.event.KeyEvent;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport bierse.view.MyKeyMap;\n\n/**\n * @author Rainer Friesen\n */\npublic class Drink {\n\n    public static final String DRINKS_FOLDER \u003d Model.CONFIG_FOLDER + \"drinks/\";\n\n    public static final String NEW_DRINK_NAME \u003d \"Neues Getr�nk\";\n\n    /**\n     * Name of the drink\n     */\n    private String name;\n\n    /**\n     * Minimum price(Cent) for what the drink is sold.\n     */\n    private int minPrice \u003d 70;\n\n    /**\n     * Maximum price(Cent) for what the drink is sold,\n     */\n    private int maxPrice \u003d 130;\n\n    /**\n     * Current price(Cent) of the drink.\n     */\n    private int currentPrice \u003d 0;\n\n    /**\n     * Start price for this drink\n     */\n    private int startPrice \u003d 100;\n\n    /**\n     * Amount of drinks sold in the last iteration\n     */\n    private int lastSold \u003d 0;\n\n    /**\n     * The total amount of drinks sold\n     */\n    private int totalSold \u003d 0;\n\n    /**\n     * The average amount of drinks sold in an iteration. Used to calculate the new price.\n     */\n    private float averageAmount \u003d 0;\n\n    /**\n     * The average price in cent\n     */\n    private float averagePrice \u003d 0;\n\n    /**\n     * The average price (Cent) for what the drink is sold\n     */\n    private float averageSoldPrice \u003d 0;\n\n    /**\n     * The maximum difference between two prices in one iteration\n     */\n    private int maxStep \u003d 20;\n\n    /**\n     * The target amount of drinks to keep the price stable\n     */\n    private int targetAmount \u003d 20;\n\n    /**\n     * The delta to calculate the step width. If the targetAmount - delta is not reached\n     * the price is decreased by the maximum step. If the targetAmount + delta is reached\n     * the price is increased by the maximum step.\n     */\n    private int deltaAmount \u003d 15;\n\n    /**\n     * Show if the drink is used currently\n     */\n    private boolean used \u003d true;\n\n    /**\n     * Key used to indicate the sell of a drink\n     */\n    private int key \u003d KeyEvent.VK_F1;\n\n    /**\n     * Show if the price is lower (-1), equal(0) or higher(1) than during the last iteration\n     */\n    private int trend \u003d 0;\n\n    /**\n     * Keep the price and do no new calculation\n     */\n    private boolean keepPrice \u003d false;\n\n    /**\n     * Set the new price directly without calculating\n     */\n    private int directPrice \u003d 0;\n\n    /**\n     * Model that uses the drink\n     */\n    Model model;\n\n    /**\n     * *******************************************************************************************************************************************\n     *  Constructor\n     * *******************************************************************************************************************************************\n     */\n    public Drink(String name, Model model) {\n    }\n\n    public Drink(String name, Model model, int startPrice) {\n    }\n\n    /**\n     * Sell the amount of drinks\n     *\n     * @param amount Amount of drinks sold\n     */\n    public synchronized void sell(int amount);\n\n    public void setDirectPrice(int directPrice);\n\n    /**\n     * Recalculate the current price for this drink\n     */\n    public int recalculate();\n\n    /**\n     * Save the drink description to a XML file\n     */\n    public File save();\n\n    /**\n     * Load the description from a XML file\n     */\n    public void load();\n\n    public String toString();\n\n    public static String getDataHeaderString();\n\n    public String getDataString();\n\n    public int getMinPrice();\n\n    public void setMinPrice(int minPrice);\n\n    public int getMaxPrice();\n\n    public void setMaxPrice(int maxPrice);\n\n    public int getCurrentPrice();\n\n    public void setCurrentPrice(int currentPrice);\n\n    public int getLastSold();\n\n    public void setLastSold(int lastSold);\n\n    public int getTotalSold();\n\n    public void setTotalSold(int totalSold);\n\n    public float getAverageAmount();\n\n    public void setAverageAmount(float averageAmount);\n\n    public float getAveragePrice();\n\n    public void setAveragePrice(float averagePrice);\n\n    public float getAverageSoldPrice();\n\n    public void setAverageSoldPrice(float averageSoldPrice);\n\n    public int getMaxStep();\n\n    public void setMaxStep(int maxStep);\n\n    public int getTargetAmount();\n\n    public void setTargetAmount(int targetAmount);\n\n    public int getDeltaAmount();\n\n    public void setDeltaAmount(int deltaAmount);\n\n    public String getName();\n\n    public void setName(String name);\n\n    public int getStartPrice();\n\n    public void setStartPrice(int startPrice);\n\n    public boolean isUsed();\n\n    public void setUsed(boolean used);\n\n    public int getKey();\n\n    public void setKey(int key);\n\n    public int getTrend();\n\n    public boolean isKeepPrice();\n\n    public void setKeepPrice(boolean keepPrice);\n\n    public int getDirectPrice();\n\n    @Override\n    public boolean equals(Object obj);\n}\n",
    "package": "bierse.model",
    "classname": "Drink",
    "id": "/EvoSuiteBenchmark/original/49_diebierse/src/main/java/bierse/model/Drink_1Test.java",
    "test_prompt": "// Drink_1Test.java\npackage bierse.model;\n\nimport java.awt.event.KeyEvent;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileWriter;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport bierse.view.MyKeyMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Drink}.\n* It contains ten unit test cases for the {@link Drink#save()} method.\n*/\nclass Drink_1Test {",
    "method_signature": "save()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// Settings.java\npackage bierse.model;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\n\npublic class Settings {\n\n    private static final String DOM_SETTINGS_ROOT \u003d \"settings\";\n\n    private static final String DOM_TIME_INTERVAL \u003d \"timeInterval\";\n\n    private static final String DOM_PRICE_STEPS \u003d \"priceSteps\";\n\n    private static final String DOM_CURRENCY \u003d \"currency\";\n\n    private static final String DOM_BACKGROUND_IMG \u003d \"backgound\";\n\n    private static final String DOM_STANDARD_LOGIC \u003d \"standardLogic\";\n\n    private static final String DOM_MESSAGE \u003d \"message\";\n\n    private static final String DOM_MESSAGE_SPEED \u003d \"messageSpeed\";\n\n    private static final String DOM_YES \u003d \"y\";\n\n    private static final String DOM_NO \u003d \"n\";\n\n    public static final String SETTINGS_FOLDER \u003d Model.CONFIG_FOLDER + \"settings/\";\n\n    /**\n     * Time interval(seconds) in which the current prices are recalculated.\n     */\n    private int timeInterval \u003d 10;\n\n    /**\n     * The steps that are available for the prices, e.g. 10, 20 or 50 cents\n     */\n    private int priceSteps \u003d 10;\n\n    /**\n     * The currency symbol used\n     */\n    private java.lang.String currency \u003d \"�\";\n\n    private boolean standardLogic \u003d true;\n\n    private String backgroundImagePath \u003d null;\n\n    private String message \u003d \"Das ist eine Standard-Nachrichtf�r das Laufband!\";\n\n    private int messageSpeed \u003d 10;\n\n    /**\n     * Model that uses these settings\n     */\n    private Model model;\n\n    public Settings(Model m) {\n    }\n\n    /**\n     * Save the settings\n     */\n    public File save();\n\n    /**\n     * Load the settings\n     */\n    public void load();\n\n    public int getTimeInterval();\n\n    public void setTimeInterval(int timeInterval);\n\n    public int getPriceSteps();\n\n    public void setPriceSteps(int priceSteps);\n\n    public java.lang.String getCurrency();\n\n    public void setCurrency(java.lang.String currency);\n\n    public boolean isStandardLogic();\n\n    public void setStandardLogic(boolean standardLogic);\n\n    public String getBackgroundImagePath();\n\n    public void setBackgroundImagePath(String backgroundImagePath);\n\n    public String getMessage();\n\n    public void setMessage(String message);\n\n    public int getMessageSpeed();\n\n    public void setMessageSpeed(int messageSpeed);\n}\n",
    "package": "bierse.model",
    "classname": "Settings",
    "id": "/EvoSuiteBenchmark/original/49_diebierse/src/main/java/bierse/model/Settings.java",
    "test_prompt": "// SettingsTest.java\npackage bierse.model;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Settings}.\n* It contains ten unit test cases for the {@link Settings#save()} method.\n*/\nclass SettingsTest {",
    "method_signature": "save()",
    "suffix": ""
  }
]