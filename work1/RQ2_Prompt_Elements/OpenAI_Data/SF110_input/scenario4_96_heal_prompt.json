[
  {
    "numberTests": "ten",
    "original_code": "// ModifyApprovalQueueEntryAction.java\npackage org.heal.servlet.approver;\n\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.module.catalog.QueuedRecordBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n/**\n * Modifies an approval queue entry.\n *\n * @author Brad Schaefer (\u003cA HREF\u003d\"mailto:schaefer@lib.med.utah.edu\"\u003eschaefer@lib.med.utah.edu\u003c/A\u003e)\n */\npublic class ModifyApprovalQueueEntryAction implements Action {\n\n    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin();\n}\n",
    "package": "org.heal.servlet.approver",
    "classname": "ModifyApprovalQueueEntryAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/approver/ModifyApprovalQueueEntryAction.java",
    "test_prompt": "// ModifyApprovalQueueEntryActionTest.java\npackage org.heal.servlet.approver;\n\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.module.catalog.QueuedRecordBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModifyApprovalQueueEntryAction}.\n* It contains ten unit test cases for the {@link ModifyApprovalQueueEntryAction#actionRequiresLogin()} method.\n*/\nclass ModifyApprovalQueueEntryActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ShowApprovalQueueAction.java\npackage org.heal.servlet.approver;\n\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.List;\n\n/**\n * An {@link org.heal.servlet.Action} which fetches the information needed to\n * display the approval queue.\n *\n * @author Brad Schaefer (\u003cA HREF\u003d\"mailto:schaefer@lib.med.utah.edu\"\u003eschaefer@lib.med.utah.edu\u003c/A\u003e)\n */\npublic class ShowApprovalQueueAction implements Action {\n\n    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin();\n}\n",
    "package": "org.heal.servlet.approver",
    "classname": "ShowApprovalQueueAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/approver/ShowApprovalQueueAction.java",
    "test_prompt": "// ShowApprovalQueueActionTest.java\npackage org.heal.servlet.approver;\n\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ShowApprovalQueueAction}.\n* It contains ten unit test cases for the {@link ShowApprovalQueueAction#actionRequiresLogin()} method.\n*/\nclass ShowApprovalQueueActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// EditContextURLAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.ContextURLBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\n\n/**\n * An {@link Action} which is called to edit a Context URL.  If\n * there isn\u0027t an existing Context URL which can be found to edit,\n * we assume that a new Context URL should be edited.\n */\npublic class EditContextURLAction implements Action {\n\n    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin();\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "EditContextURLAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/EditContextURLAction.java",
    "test_prompt": "// EditContextURLActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.ContextURLBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EditContextURLAction}.\n* It contains ten unit test cases for the {@link EditContextURLAction#actionRequiresLogin()} method.\n*/\nclass EditContextURLActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ModifyMetadataAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * \u003cp\u003eAn {@link Action} that saves the metadata from a form into\n * the session\u0027s {@link CompleteMetadataBean} by mapping {@link MetadataModifier}s\n * to forms.  The {@link MetadataModifier} which matches the form determines\n * the next {@link Action} to execute.\u003c/p\u003e\n *\n * \u003cp\u003eThe mapping is currently defined as:\u003c/p\u003e\n *\n * \u003cul\u003e\u003cli\u003e\u0027metadata\u0027 : {@link MetadataRecordModifier}\n * \u003cli\u003e\u0027contextURL\u0027 : {@link ContextURLRecordModifier}\n * \u003cli\u003e\u0027contributor\u0027 : {@link ContributorRecordModifier}\n * \u003cli\u003e\u0027copyrightHolder\u0027 : {@link CopyrightHolderRecordModifier}\n * \u003cli\u003e\u0027controlledVocabulary\u0027 : {@link ControlledVocabularyRecordModifier}\n * \u003cli\u003e\u0027requirement\u0027 : {@link RequirementRecordModifier}\n * \u003c/ul\u003e\n */\npublic class ModifyMetadataAction implements Action {\n\n    private final Map modifierMap;\n\n    public ModifyMetadataAction() {\n    }\n\n    /**\n     * \u003cp\u003eThis perform method uses the \u003ccode\u003e\"type\"\u003c/code\u003e parameter to save the\n     * metadata modifications from the \u003ccode\u003erequest\u003c/code\u003e in the\n     * {@link CompleteMetadataBean} that is in the session.  If the type or\n     * \u003ccode\u003eCompleteMetadataBean\u003c/code\u003e doesn\u0027t exist, the \u003ccode\u003eresponse\u003c/code\u003e is\n     * redirected to an error page.\u003c/o\u003e\n     *\n     * \u003cp\u003eWhen a valid type and a \u003ccode\u003eCompleteMetadataBean\u003c/code\u003e is available\n     * in the session, this method uses the appropriate {@link MetadataModifier}\n     * to save the motifications to the metadata and to perform the subsequent\n     * {@link Action}.\u003c/p\u003e\n     */\n    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin();\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "ModifyMetadataAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/ModifyMetadataAction.java",
    "test_prompt": "// ModifyMetadataActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModifyMetadataAction}.\n* It contains ten unit test cases for the {@link ModifyMetadataAction#actionRequiresLogin()} method.\n*/\nclass ModifyMetadataActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SaveMetadataAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.module.metadata.ContextURLBean;\nimport org.heal.module.metadata.CopyrightHolderBean;\nimport org.heal.module.metadata.ContributorBean;\nimport org.heal.module.metadata.TaxonPathBean;\nimport org.heal.module.metadata.TaxonBean;\nimport org.heal.module.metadata.RequirementBean;\nimport org.heal.module.metadata.RelationBean;\nimport org.heal.module.metadata.MetametadataIdentifierBean;\nimport org.heal.module.metadata.MetametadataContributorBean;\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.servlet.Action;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Iterator;\n\n/**\n * An {@link org.heal.servlet.Action Action} used to save metadata\n * records.\n */\npublic class SaveMetadataAction implements Action {\n\n    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;\n\n    /**\n     * Since we have been using negative numbers to give unique id\u0027s to\n     * complicated metadata information, this method will turn all those\n     * negative ids back to \u003ccode\u003enull\u003c/code\u003e values so that the metadata\n     * gets saved correctly.\n     *\n     * @param cmb The {@link CompleteMetadataBean} to scrub.\n     */\n    private void scrubMetadata(CompleteMetadataBean cmb);\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin();\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "SaveMetadataAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/SaveMetadataAction.java",
    "test_prompt": "// SaveMetadataActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.module.metadata.ContextURLBean;\nimport org.heal.module.metadata.CopyrightHolderBean;\nimport org.heal.module.metadata.ContributorBean;\nimport org.heal.module.metadata.TaxonPathBean;\nimport org.heal.module.metadata.TaxonBean;\nimport org.heal.module.metadata.RequirementBean;\nimport org.heal.module.metadata.RelationBean;\nimport org.heal.module.metadata.MetametadataIdentifierBean;\nimport org.heal.module.metadata.MetametadataContributorBean;\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.servlet.Action;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SaveMetadataAction}.\n* It contains ten unit test cases for the {@link SaveMetadataAction#actionRequiresLogin()} method.\n*/\nclass SaveMetadataActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CreateMetadataAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.module.metadata.TaxonBean;\nimport org.heal.module.metadata.TaxonPathBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.sql.SQLException;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * An {@link Action} which creates a new metadata record to edit,\n * puts it into the session, and then directs the user to the editing\n * page.\n */\npublic class CreateMetadataAction implements Action {\n\n    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;\n\n    /**\n     * Since this {@link Action} creates \u003cem\u003enew\u003c/em\u003e metadata records, we\n     * must clear the ids from an existing {@link CompleteMetadataBean} that\n     * this new record is based on.\n     *\n     * @param cmb\n     */\n    private static void clearIds(CompleteMetadataBean cmb) throws ServletException;\n\n    private static void clearIdsFromList(List objects) throws ServletException;\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin();\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "CreateMetadataAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/CreateMetadataAction.java",
    "test_prompt": "// CreateMetadataActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.module.metadata.TaxonBean;\nimport org.heal.module.metadata.TaxonPathBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.sql.SQLException;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CreateMetadataAction}.\n* It contains ten unit test cases for the {@link CreateMetadataAction#actionRequiresLogin()} method.\n*/\nclass CreateMetadataActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ModifyCatalogQueueEntryAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.module.catalog.QueuedRecordBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.module.metadata.ShortMetadataBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport org.heal.util.FileLocator;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.nio.channels.FileChannel;\nimport java.sql.SQLException;\n\n/**\n * An {@link org.heal.servlet.Action Action} which is called in order to edit a metadata item which is in\n * the catalog queue.\n *\n * @author Brad Schaefer (\u003cA HREF\u003d\"mailto:schaefer@lib.med.utah.edu\"\u003eschaefer@lib.med.utah.edu\u003c/A\u003e)\n * @version 1.0\n */\npublic class ModifyCatalogQueueEntryAction implements Action {\n\n    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;\n\n    /**\n     * Copies a file from a sourceLocation to a destinationLocation.\n     *\n     * @param sourceLocation\n     * @param destinationLocation\n     */\n    private static void copyFile(String sourceLocation, String destinationLocation);\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin();\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "ModifyCatalogQueueEntryAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/ModifyCatalogQueueEntryAction.java",
    "test_prompt": "// ModifyCatalogQueueEntryActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.module.catalog.QueuedRecordBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.module.metadata.ShortMetadataBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport org.heal.util.FileLocator;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.nio.channels.FileChannel;\nimport java.sql.SQLException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModifyCatalogQueueEntryAction}.\n* It contains ten unit test cases for the {@link ModifyCatalogQueueEntryAction#actionRequiresLogin()} method.\n*/\nclass ModifyCatalogQueueEntryActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// RelationRecordModifier.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.RelationBean;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.List;\n\n/**\n * Saves changes to a {@link RelationBean} and acts as\n * an {@link Action} which is called to edit a Relation.  If\n * there isn\u0027t an existing Relation which can be found to edit,\n * we assume that a new Relation should be edited.\n */\npublic class RelationRecordModifier implements Action, MetadataModifier {\n\n    private static Action NEXT_ACTION \u003d new EditMetadataAction();\n\n    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin();\n\n    public void updateMetadata(CompleteMetadataBean cmb, ServletRequest request);\n\n    public Action getNextAction(ServletRequest request);\n\n    private RelationBean findRelationBean(final List relations, final String relationId);\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "RelationRecordModifier",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/RelationRecordModifier.java",
    "test_prompt": "// RelationRecordModifierTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.RelationBean;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link RelationRecordModifier}.\n* It contains ten unit test cases for the {@link RelationRecordModifier#actionRequiresLogin()} method.\n*/\nclass RelationRecordModifierTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// CancelEditMetadataAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\n\n/**\n * A simple {@link Action} which clears the session variable used\n * for editing metadata.\n */\npublic class CancelEditMetadataAction implements Action {\n\n    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;\n\n    /**\n     * @return \u003ccode\u003efalse\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin();\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "CancelEditMetadataAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/CancelEditMetadataAction.java",
    "test_prompt": "// CancelEditMetadataActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link CancelEditMetadataAction}.\n* It contains ten unit test cases for the {@link CancelEditMetadataAction#actionRequiresLogin()} method.\n*/\nclass CancelEditMetadataActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// EditControlledVocabularyAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.TaxonBean;\nimport org.heal.module.metadata.TaxonPathBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\n\n/**\n * An {@link Action} which is called to edit a Controlled Vocabulary item.  If\n * there isn\u0027t an existing Controlled Vocabulary item which can be found to edit,\n * we assume that a new Controlled Vocabulary entry should be edited.\n */\npublic class EditControlledVocabularyAction implements Action {\n\n    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin();\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "EditControlledVocabularyAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/EditControlledVocabularyAction.java",
    "test_prompt": "// EditControlledVocabularyActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.TaxonBean;\nimport org.heal.module.metadata.TaxonPathBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EditControlledVocabularyAction}.\n* It contains ten unit test cases for the {@link EditControlledVocabularyAction#actionRequiresLogin()} method.\n*/\nclass EditControlledVocabularyActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// MetadataRecordModifier.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.ContextURLBean;\nimport org.heal.module.metadata.ContributorBean;\nimport org.heal.module.metadata.CopyrightBean;\nimport org.heal.module.metadata.CopyrightHolderBean;\nimport org.heal.module.metadata.CopyrightTextBean;\nimport org.heal.module.metadata.DiseaseDiagnosisBean;\nimport org.heal.module.metadata.FormatBean;\nimport org.heal.module.metadata.KeywordBean;\nimport org.heal.module.metadata.RelationBean;\nimport org.heal.module.metadata.RequirementBean;\nimport org.heal.module.metadata.TargetUserGroupBean;\nimport org.heal.module.metadata.TaxonBean;\nimport org.heal.module.metadata.TaxonPathBean;\nimport org.heal.module.metadata.ThumbnailBean;\nimport org.heal.module.metadata.MetametadataIdentifierBean;\nimport org.heal.module.metadata.MetametadataContributorBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.DateTools;\nimport javax.servlet.ServletRequest;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.SortedSet;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\n\n/**\n * \u003cp\u003eA {@link MetadataModifier} which fills the basic metadata information\n * from a \u003ccode\u003eServletRequest\u003c/code\u003e into a {@link CompleteMetadataBean}.\u003c/p\u003e\n */\npublic class MetadataRecordModifier implements MetadataModifier {\n\n    private static final Map nextActionMap;\n\n    private static final Action NEXT_ACTION_DEFAULT \u003d new EditMetadataAction();\n\n    static {\n    }\n\n    public MetadataRecordModifier() {\n    }\n\n    public void updateMetadata(CompleteMetadataBean cmb, ServletRequest request);\n\n    /**\n     * @param request Used to get the parameter \u003ccode\u003e\"nextAction\"\u003c/code\u003e, which\n     * \t\tdetermines what the next {@link Action} to take will be.  If no\n     * \t\t\u003ccode\u003e\"nextAction\"\u003c/code\u003e exists, a valid {@link Action} will still\n     * \t\tbe returned.\n     * @return The next {@link Action} to take after saving the metadata from\n     * \t\tthe form.\n     */\n    public Action getNextAction(ServletRequest request);\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "MetadataRecordModifier",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/MetadataRecordModifier.java",
    "test_prompt": "// MetadataRecordModifierTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.ContextURLBean;\nimport org.heal.module.metadata.ContributorBean;\nimport org.heal.module.metadata.CopyrightBean;\nimport org.heal.module.metadata.CopyrightHolderBean;\nimport org.heal.module.metadata.CopyrightTextBean;\nimport org.heal.module.metadata.DiseaseDiagnosisBean;\nimport org.heal.module.metadata.FormatBean;\nimport org.heal.module.metadata.KeywordBean;\nimport org.heal.module.metadata.RelationBean;\nimport org.heal.module.metadata.RequirementBean;\nimport org.heal.module.metadata.TargetUserGroupBean;\nimport org.heal.module.metadata.TaxonBean;\nimport org.heal.module.metadata.TaxonPathBean;\nimport org.heal.module.metadata.ThumbnailBean;\nimport org.heal.module.metadata.MetametadataIdentifierBean;\nimport org.heal.module.metadata.MetametadataContributorBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.DateTools;\nimport javax.servlet.ServletRequest;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.SortedSet;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MetadataRecordModifier}.\n* It contains ten unit test cases for the {@link MetadataRecordModifier#getNextAction(ServletRequest)} method.\n*/\nclass MetadataRecordModifierTest {",
    "method_signature": "getNextAction(ServletRequest)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// EditMetadataAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.module.metadata.TargetUserGroupBean;\nimport org.heal.module.metadata.ContributorBean;\nimport org.heal.module.metadata.CopyrightHolderBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport org.heal.util.VCardBean;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\n\n/**\n * An {@link org.heal.servlet.Action Action} used to edit metadata\n * records.\n *\n * @author Brad Schaefer (\u003cA HREF\u003d\"mailto:schaefer@lib.med.utah.edu\"\u003eschaefer@lib.med.utah.edu\u003c/A\u003e)\n * @version 1.0\n */\npublic class EditMetadataAction implements Action {\n\n    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin();\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "EditMetadataAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/EditMetadataAction.java",
    "test_prompt": "// EditMetadataActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.module.metadata.TargetUserGroupBean;\nimport org.heal.module.metadata.ContributorBean;\nimport org.heal.module.metadata.CopyrightHolderBean;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport org.heal.util.VCardBean;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EditMetadataAction}.\n* It contains ten unit test cases for the {@link EditMetadataAction#actionRequiresLogin()} method.\n*/\nclass EditMetadataActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// EditContributorAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.ContributorBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\n\n/**\n * An {@link Action} which is called to edit a Contributor.  If\n * there isn\u0027t an existing Contributor which can be found to edit,\n * we assume that a new Contributor should be edited.\n */\npublic class EditContributorAction implements Action {\n\n    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin();\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "EditContributorAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/EditContributorAction.java",
    "test_prompt": "// EditContributorActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.ContributorBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EditContributorAction}.\n* It contains ten unit test cases for the {@link EditContributorAction#actionRequiresLogin()} method.\n*/\nclass EditContributorActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ShowCatalogQueueAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.List;\n\n/**\n * An {@link org.heal.servlet.Action} which fetches the information needed to\n * display the catalog queue.\n *\n * @author Brad Schaefer (\u003cA HREF\u003d\"mailto:schaefer@lib.med.utah.edu\"\u003eschaefer@lib.med.utah.edu\u003c/A\u003e)\n */\npublic class ShowCatalogQueueAction implements Action {\n\n    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin();\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "ShowCatalogQueueAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/ShowCatalogQueueAction.java",
    "test_prompt": "// ShowCatalogQueueActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.module.catalog.QueueDAO;\nimport org.heal.servlet.Action;\nimport org.heal.util.AuthenticationTools;\nimport javax.servlet.RequestDispatcher;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ShowCatalogQueueAction}.\n* It contains ten unit test cases for the {@link ShowCatalogQueueAction#actionRequiresLogin()} method.\n*/\nclass ShowCatalogQueueActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// EditCopyrightHolderAction.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.CopyrightHolderBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\n\n/**\n * An {@link Action} which is called to edit a Copyright Holder.  If\n * there isn\u0027t an existing Copyright Holder which can be found to edit,\n * we assume that a new Copyright Holder should be edited.\n */\npublic class EditCopyrightHolderAction implements Action {\n\n    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e\n     */\n    public boolean actionRequiresLogin();\n}\n",
    "package": "org.heal.servlet.cataloger",
    "classname": "EditCopyrightHolderAction",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/EditCopyrightHolderAction.java",
    "test_prompt": "// EditCopyrightHolderActionTest.java\npackage org.heal.servlet.cataloger;\n\nimport org.heal.servlet.Action;\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.CopyrightHolderBean;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\nimport javax.servlet.RequestDispatcher;\nimport java.io.IOException;\nimport java.util.Iterator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link EditCopyrightHolderAction}.\n* It contains ten unit test cases for the {@link EditCopyrightHolderAction#actionRequiresLogin()} method.\n*/\nclass EditCopyrightHolderActionTest {",
    "method_signature": "actionRequiresLogin()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// AlphanumericFileRenamePolicy.java\npackage org.heal.servlet.upload;\n\nimport com.oreilly.servlet.multipart.DefaultFileRenamePolicy;\nimport java.io.File;\n\n/**\n * A FileRenamePolicy that strips non-alphanumeric characters.\n */\npublic class AlphanumericFileRenamePolicy extends DefaultFileRenamePolicy {\n\n    /**\n     * Eliminates non-alphanumeric characters from filenames.  Exceptions\n     * include \u003ccode\u003e\u0027 \u0027\u003c/code\u003e, \u003ccode\u003e\u0027.\u0027\u003c/code\u003e and \u003ccode\u003e\u0027_\u0027\u003c/code\u003e\n     *\n     * @param original Original file reference.\n     * @return File reference stripped of non-alphanumeric characters.\n     */\n    public File rename(File original);\n\n    String stripSpecialCharacters(String filename);\n}\n",
    "package": "org.heal.servlet.upload",
    "classname": "AlphanumericFileRenamePolicy",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/upload/AlphanumericFileRenamePolicy.java",
    "test_prompt": "// AlphanumericFileRenamePolicyTest.java\npackage org.heal.servlet.upload;\n\nimport com.oreilly.servlet.multipart.DefaultFileRenamePolicy;\nimport java.io.File;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link AlphanumericFileRenamePolicy}.\n* It contains ten unit test cases for the {@link AlphanumericFileRenamePolicy#rename(File)} method.\n*/\nclass AlphanumericFileRenamePolicyTest {",
    "method_signature": "rename(File)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// DateTools.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n/**\n * A general utility class for dealing with dates.\n */\npublic class DateTools {\n\n    public static final String DEFAULT_DATE_FORMAT \u003d new String(\"yyyy-MM-dd\");\n\n    public static final String LONG_DATE_FORMAT \u003d new String(\"yyyy-MM-dd HH:mm:ss\");\n\n    private static final String[] POSSIBLE_DATE_FORMATS \u003d new String[] { DEFAULT_DATE_FORMAT, LONG_DATE_FORMAT, \"MM/dd/yyyy\", \"MM-dd-yyyy\", \"yyyy\" };\n\n    private DateTools() {\n    }\n\n    /**\n     * @param date A {@link Date} to format.\n     * @return A String representation of the date parameter in\n     * \t\tthe {@link #DEFAULT_DATE_FORMAT default format}.\n     */\n    public static String format(Date date);\n\n    /**\n     * @param date A {@link Date} to format.\n     * @param format A format (corresponding to {@link SimpleDateFormat}\u0027s syntax)\n     * \t\tto convert the date to.\n     * @return A String representation of the date parameter in the\n     * \t\tspecified format, or null if the given date is null.\n     */\n    public static String format(Date date, String format);\n\n    /**\n     * @param dateString A String to parse into a {@link Date} object.\n     * @return A {@link Date} representation of the String when possible,\n     * \t\tor \u003ccode\u003enull\u003c/code\u003e if the date cannot be parsed.\n     */\n    public static Date parse(String dateString);\n\n    /**\n     * @param dateString A String to parse into a {@link Date} object.\n     * @param format A format to use to parse the date parameter with.\n     * @return A {@link Date} representation of the String when possible,\n     * \t\tor \u003ccode\u003enull\u003c/code\u003e if the date cannot be parsed with the\n     * \t\tgiven format.\n     */\n    public static Date parse(String dateString, String format);\n\n    /**\n     * @param dateString A String that may or may not represent a\n     * \t\t{@link Date} that can be parsed.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if a {@link Date} can be parsed from\n     * \t\tthe String, or \u003ccode\u003efalse\u003c/code\u003e otherwise.\n     * @see #parse(String dateString)\n     */\n    public static boolean isValidDate(String dateString);\n\n    /**\n     * @param dateString A String that may or may not represent a\n     * \t\t{@link Date} that can be parsed with the given format.\n     * @param format A format to use to check if the String can\n     * \t\tbe parsed into a {@link Date}.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if a {@link Date} can be parsed from\n     * \t\tthe String in the given format, or \u003ccode\u003efalse\u003c/code\u003e\n     * \t\totherwise.\n     * @see #parse(String dateString, String format)\n     */\n    public static boolean isValidDate(String dateString, String format);\n}\n",
    "package": "org.heal.util",
    "classname": "DateTools",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/util/DateTools_0Test.java",
    "test_prompt": "// DateTools_0Test.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DateTools}.\n* It contains ten unit test cases for the {@link DateTools#format(Date)} method.\n*/\nclass DateTools_0Test {",
    "method_signature": "format(Date)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// DateTools.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n/**\n * A general utility class for dealing with dates.\n */\npublic class DateTools {\n\n    public static final String DEFAULT_DATE_FORMAT \u003d new String(\"yyyy-MM-dd\");\n\n    public static final String LONG_DATE_FORMAT \u003d new String(\"yyyy-MM-dd HH:mm:ss\");\n\n    private static final String[] POSSIBLE_DATE_FORMATS \u003d new String[] { DEFAULT_DATE_FORMAT, LONG_DATE_FORMAT, \"MM/dd/yyyy\", \"MM-dd-yyyy\", \"yyyy\" };\n\n    private DateTools() {\n    }\n\n    /**\n     * @param date A {@link Date} to format.\n     * @return A String representation of the date parameter in\n     * \t\tthe {@link #DEFAULT_DATE_FORMAT default format}.\n     */\n    public static String format(Date date);\n\n    /**\n     * @param date A {@link Date} to format.\n     * @param format A format (corresponding to {@link SimpleDateFormat}\u0027s syntax)\n     * \t\tto convert the date to.\n     * @return A String representation of the date parameter in the\n     * \t\tspecified format, or null if the given date is null.\n     */\n    public static String format(Date date, String format);\n\n    /**\n     * @param dateString A String to parse into a {@link Date} object.\n     * @return A {@link Date} representation of the String when possible,\n     * \t\tor \u003ccode\u003enull\u003c/code\u003e if the date cannot be parsed.\n     */\n    public static Date parse(String dateString);\n\n    /**\n     * @param dateString A String to parse into a {@link Date} object.\n     * @param format A format to use to parse the date parameter with.\n     * @return A {@link Date} representation of the String when possible,\n     * \t\tor \u003ccode\u003enull\u003c/code\u003e if the date cannot be parsed with the\n     * \t\tgiven format.\n     */\n    public static Date parse(String dateString, String format);\n\n    /**\n     * @param dateString A String that may or may not represent a\n     * \t\t{@link Date} that can be parsed.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if a {@link Date} can be parsed from\n     * \t\tthe String, or \u003ccode\u003efalse\u003c/code\u003e otherwise.\n     * @see #parse(String dateString)\n     */\n    public static boolean isValidDate(String dateString);\n\n    /**\n     * @param dateString A String that may or may not represent a\n     * \t\t{@link Date} that can be parsed with the given format.\n     * @param format A format to use to check if the String can\n     * \t\tbe parsed into a {@link Date}.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if a {@link Date} can be parsed from\n     * \t\tthe String in the given format, or \u003ccode\u003efalse\u003c/code\u003e\n     * \t\totherwise.\n     * @see #parse(String dateString, String format)\n     */\n    public static boolean isValidDate(String dateString, String format);\n}\n",
    "package": "org.heal.util",
    "classname": "DateTools",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/util/DateTools_1Test.java",
    "test_prompt": "// DateTools_1Test.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DateTools}.\n* It contains ten unit test cases for the {@link DateTools#format(Date, String)} method.\n*/\nclass DateTools_1Test {",
    "method_signature": "format(Date, String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// DateTools.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n/**\n * A general utility class for dealing with dates.\n */\npublic class DateTools {\n\n    public static final String DEFAULT_DATE_FORMAT \u003d new String(\"yyyy-MM-dd\");\n\n    public static final String LONG_DATE_FORMAT \u003d new String(\"yyyy-MM-dd HH:mm:ss\");\n\n    private static final String[] POSSIBLE_DATE_FORMATS \u003d new String[] { DEFAULT_DATE_FORMAT, LONG_DATE_FORMAT, \"MM/dd/yyyy\", \"MM-dd-yyyy\", \"yyyy\" };\n\n    private DateTools() {\n    }\n\n    /**\n     * @param date A {@link Date} to format.\n     * @return A String representation of the date parameter in\n     * \t\tthe {@link #DEFAULT_DATE_FORMAT default format}.\n     */\n    public static String format(Date date);\n\n    /**\n     * @param date A {@link Date} to format.\n     * @param format A format (corresponding to {@link SimpleDateFormat}\u0027s syntax)\n     * \t\tto convert the date to.\n     * @return A String representation of the date parameter in the\n     * \t\tspecified format, or null if the given date is null.\n     */\n    public static String format(Date date, String format);\n\n    /**\n     * @param dateString A String to parse into a {@link Date} object.\n     * @return A {@link Date} representation of the String when possible,\n     * \t\tor \u003ccode\u003enull\u003c/code\u003e if the date cannot be parsed.\n     */\n    public static Date parse(String dateString);\n\n    /**\n     * @param dateString A String to parse into a {@link Date} object.\n     * @param format A format to use to parse the date parameter with.\n     * @return A {@link Date} representation of the String when possible,\n     * \t\tor \u003ccode\u003enull\u003c/code\u003e if the date cannot be parsed with the\n     * \t\tgiven format.\n     */\n    public static Date parse(String dateString, String format);\n\n    /**\n     * @param dateString A String that may or may not represent a\n     * \t\t{@link Date} that can be parsed.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if a {@link Date} can be parsed from\n     * \t\tthe String, or \u003ccode\u003efalse\u003c/code\u003e otherwise.\n     * @see #parse(String dateString)\n     */\n    public static boolean isValidDate(String dateString);\n\n    /**\n     * @param dateString A String that may or may not represent a\n     * \t\t{@link Date} that can be parsed with the given format.\n     * @param format A format to use to check if the String can\n     * \t\tbe parsed into a {@link Date}.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if a {@link Date} can be parsed from\n     * \t\tthe String in the given format, or \u003ccode\u003efalse\u003c/code\u003e\n     * \t\totherwise.\n     * @see #parse(String dateString, String format)\n     */\n    public static boolean isValidDate(String dateString, String format);\n}\n",
    "package": "org.heal.util",
    "classname": "DateTools",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/util/DateTools_2Test.java",
    "test_prompt": "// DateTools_2Test.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DateTools}.\n* It contains ten unit test cases for the {@link DateTools#parse(String)} method.\n*/\nclass DateTools_2Test {",
    "method_signature": "parse(String)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// DateTools.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n/**\n * A general utility class for dealing with dates.\n */\npublic class DateTools {\n\n    public static final String DEFAULT_DATE_FORMAT \u003d new String(\"yyyy-MM-dd\");\n\n    public static final String LONG_DATE_FORMAT \u003d new String(\"yyyy-MM-dd HH:mm:ss\");\n\n    private static final String[] POSSIBLE_DATE_FORMATS \u003d new String[] { DEFAULT_DATE_FORMAT, LONG_DATE_FORMAT, \"MM/dd/yyyy\", \"MM-dd-yyyy\", \"yyyy\" };\n\n    private DateTools() {\n    }\n\n    /**\n     * @param date A {@link Date} to format.\n     * @return A String representation of the date parameter in\n     * \t\tthe {@link #DEFAULT_DATE_FORMAT default format}.\n     */\n    public static String format(Date date);\n\n    /**\n     * @param date A {@link Date} to format.\n     * @param format A format (corresponding to {@link SimpleDateFormat}\u0027s syntax)\n     * \t\tto convert the date to.\n     * @return A String representation of the date parameter in the\n     * \t\tspecified format, or null if the given date is null.\n     */\n    public static String format(Date date, String format);\n\n    /**\n     * @param dateString A String to parse into a {@link Date} object.\n     * @return A {@link Date} representation of the String when possible,\n     * \t\tor \u003ccode\u003enull\u003c/code\u003e if the date cannot be parsed.\n     */\n    public static Date parse(String dateString);\n\n    /**\n     * @param dateString A String to parse into a {@link Date} object.\n     * @param format A format to use to parse the date parameter with.\n     * @return A {@link Date} representation of the String when possible,\n     * \t\tor \u003ccode\u003enull\u003c/code\u003e if the date cannot be parsed with the\n     * \t\tgiven format.\n     */\n    public static Date parse(String dateString, String format);\n\n    /**\n     * @param dateString A String that may or may not represent a\n     * \t\t{@link Date} that can be parsed.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if a {@link Date} can be parsed from\n     * \t\tthe String, or \u003ccode\u003efalse\u003c/code\u003e otherwise.\n     * @see #parse(String dateString)\n     */\n    public static boolean isValidDate(String dateString);\n\n    /**\n     * @param dateString A String that may or may not represent a\n     * \t\t{@link Date} that can be parsed with the given format.\n     * @param format A format to use to check if the String can\n     * \t\tbe parsed into a {@link Date}.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if a {@link Date} can be parsed from\n     * \t\tthe String in the given format, or \u003ccode\u003efalse\u003c/code\u003e\n     * \t\totherwise.\n     * @see #parse(String dateString, String format)\n     */\n    public static boolean isValidDate(String dateString, String format);\n}\n",
    "package": "org.heal.util",
    "classname": "DateTools",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/util/DateTools_3Test.java",
    "test_prompt": "// DateTools_3Test.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DateTools}.\n* It contains ten unit test cases for the {@link DateTools#parse(String, String)} method.\n*/\nclass DateTools_3Test {",
    "method_signature": "parse(String, String)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// DateTools.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n/**\n * A general utility class for dealing with dates.\n */\npublic class DateTools {\n\n    public static final String DEFAULT_DATE_FORMAT \u003d new String(\"yyyy-MM-dd\");\n\n    public static final String LONG_DATE_FORMAT \u003d new String(\"yyyy-MM-dd HH:mm:ss\");\n\n    private static final String[] POSSIBLE_DATE_FORMATS \u003d new String[] { DEFAULT_DATE_FORMAT, LONG_DATE_FORMAT, \"MM/dd/yyyy\", \"MM-dd-yyyy\", \"yyyy\" };\n\n    private DateTools() {\n    }\n\n    /**\n     * @param date A {@link Date} to format.\n     * @return A String representation of the date parameter in\n     * \t\tthe {@link #DEFAULT_DATE_FORMAT default format}.\n     */\n    public static String format(Date date);\n\n    /**\n     * @param date A {@link Date} to format.\n     * @param format A format (corresponding to {@link SimpleDateFormat}\u0027s syntax)\n     * \t\tto convert the date to.\n     * @return A String representation of the date parameter in the\n     * \t\tspecified format, or null if the given date is null.\n     */\n    public static String format(Date date, String format);\n\n    /**\n     * @param dateString A String to parse into a {@link Date} object.\n     * @return A {@link Date} representation of the String when possible,\n     * \t\tor \u003ccode\u003enull\u003c/code\u003e if the date cannot be parsed.\n     */\n    public static Date parse(String dateString);\n\n    /**\n     * @param dateString A String to parse into a {@link Date} object.\n     * @param format A format to use to parse the date parameter with.\n     * @return A {@link Date} representation of the String when possible,\n     * \t\tor \u003ccode\u003enull\u003c/code\u003e if the date cannot be parsed with the\n     * \t\tgiven format.\n     */\n    public static Date parse(String dateString, String format);\n\n    /**\n     * @param dateString A String that may or may not represent a\n     * \t\t{@link Date} that can be parsed.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if a {@link Date} can be parsed from\n     * \t\tthe String, or \u003ccode\u003efalse\u003c/code\u003e otherwise.\n     * @see #parse(String dateString)\n     */\n    public static boolean isValidDate(String dateString);\n\n    /**\n     * @param dateString A String that may or may not represent a\n     * \t\t{@link Date} that can be parsed with the given format.\n     * @param format A format to use to check if the String can\n     * \t\tbe parsed into a {@link Date}.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if a {@link Date} can be parsed from\n     * \t\tthe String in the given format, or \u003ccode\u003efalse\u003c/code\u003e\n     * \t\totherwise.\n     * @see #parse(String dateString, String format)\n     */\n    public static boolean isValidDate(String dateString, String format);\n}\n",
    "package": "org.heal.util",
    "classname": "DateTools",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/util/DateTools_4Test.java",
    "test_prompt": "// DateTools_4Test.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DateTools}.\n* It contains ten unit test cases for the {@link DateTools#isValidDate(String)} method.\n*/\nclass DateTools_4Test {",
    "method_signature": "isValidDate(String)",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// DateTools.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n/**\n * A general utility class for dealing with dates.\n */\npublic class DateTools {\n\n    public static final String DEFAULT_DATE_FORMAT \u003d new String(\"yyyy-MM-dd\");\n\n    public static final String LONG_DATE_FORMAT \u003d new String(\"yyyy-MM-dd HH:mm:ss\");\n\n    private static final String[] POSSIBLE_DATE_FORMATS \u003d new String[] { DEFAULT_DATE_FORMAT, LONG_DATE_FORMAT, \"MM/dd/yyyy\", \"MM-dd-yyyy\", \"yyyy\" };\n\n    private DateTools() {\n    }\n\n    /**\n     * @param date A {@link Date} to format.\n     * @return A String representation of the date parameter in\n     * \t\tthe {@link #DEFAULT_DATE_FORMAT default format}.\n     */\n    public static String format(Date date);\n\n    /**\n     * @param date A {@link Date} to format.\n     * @param format A format (corresponding to {@link SimpleDateFormat}\u0027s syntax)\n     * \t\tto convert the date to.\n     * @return A String representation of the date parameter in the\n     * \t\tspecified format, or null if the given date is null.\n     */\n    public static String format(Date date, String format);\n\n    /**\n     * @param dateString A String to parse into a {@link Date} object.\n     * @return A {@link Date} representation of the String when possible,\n     * \t\tor \u003ccode\u003enull\u003c/code\u003e if the date cannot be parsed.\n     */\n    public static Date parse(String dateString);\n\n    /**\n     * @param dateString A String to parse into a {@link Date} object.\n     * @param format A format to use to parse the date parameter with.\n     * @return A {@link Date} representation of the String when possible,\n     * \t\tor \u003ccode\u003enull\u003c/code\u003e if the date cannot be parsed with the\n     * \t\tgiven format.\n     */\n    public static Date parse(String dateString, String format);\n\n    /**\n     * @param dateString A String that may or may not represent a\n     * \t\t{@link Date} that can be parsed.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if a {@link Date} can be parsed from\n     * \t\tthe String, or \u003ccode\u003efalse\u003c/code\u003e otherwise.\n     * @see #parse(String dateString)\n     */\n    public static boolean isValidDate(String dateString);\n\n    /**\n     * @param dateString A String that may or may not represent a\n     * \t\t{@link Date} that can be parsed with the given format.\n     * @param format A format to use to check if the String can\n     * \t\tbe parsed into a {@link Date}.\n     * @return \u003ccode\u003etrue\u003c/code\u003e if a {@link Date} can be parsed from\n     * \t\tthe String in the given format, or \u003ccode\u003efalse\u003c/code\u003e\n     * \t\totherwise.\n     * @see #parse(String dateString, String format)\n     */\n    public static boolean isValidDate(String dateString, String format);\n}\n",
    "package": "org.heal.util",
    "classname": "DateTools",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/util/DateTools_5Test.java",
    "test_prompt": "// DateTools_5Test.java\npackage org.heal.util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DateTools}.\n* It contains ten unit test cases for the {@link DateTools#isValidDate(String, String)} method.\n*/\nclass DateTools_5Test {",
    "method_signature": "isValidDate(String, String)",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// QueueDAO.java\npackage org.heal.module.catalog;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.util.CommonDAO;\nimport javax.sql.DataSource;\nimport java.io.Serializable;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n/**\n * A DAO for managing queues stored in the database\n */\npublic class QueueDAO implements Serializable {\n\n    public QueueDAO() {\n    }\n\n    public static final String TYPE_APPROVAL \u003d new String(\"approval\");\n\n    public static final String TYPE_CATALOG \u003d new String(\"catalog\");\n\n    private DataSource dataSource;\n\n    private CommonDAO cd \u003d new CommonDAO();\n\n    private MetadataDAO md \u003d new MetadataDAO();\n\n    private static final String SELECT_QUEUE_BY_TYPE \u003d \"SELECT QueuedRecordId,\" + \" MetadataId, Status, Comments FROM QueuedRecords WHERE Type LIKE ?\";\n\n    private static final String INSERT_QUEUE_ENTRY \u003d \"INSERT INTO QueuedRecords\" + \" (Type, MetadataId, Status, Comments) VALUES (?, ?, ?, ?)\";\n\n    private static final String UPDATE_QUEUE_ENTRY \u003d \"UPDATE QueuedRecords\" + \" SET Type \u003d ?, MetadataId \u003d ?, Status \u003d ?, Comments \u003d ? WHERE\" + \" QueuedRecordId \u003d ?\";\n\n    private static final String DELETE_QUEUE_ENTRY \u003d \"DELETE FROM QueuedRecords\" + \" WHERE QueuedRecordId \u003d ?\";\n\n    public void setDataSource(final DataSource dataSource);\n\n    /**\n     * @param type The type of QueuedRecordBeans to get.\n     *\n     * @return A List of QueuedRecordBeans.\n     */\n    public List\u003cQueuedRecordBean\u003e getQueueByType(final String type);\n\n    /**\n     * @return The List of QueuedRecordBeans representing the catalog queue.\n     */\n    public List\u003cQueuedRecordBean\u003e getCatalogQueue();\n\n    /**\n     * @return The List of QueuedRecordBeans representing the approval queue.\n     */\n    public List\u003cQueuedRecordBean\u003e getApprovalQueue();\n\n    public List\u003cQueuedRecordBean\u003e getQueue(final String type, final Connection conn) throws SQLException;\n\n    /**\n     * Saves a {@link QueuedRecordBean} to the database.\n     *\n     * @param queuedRecord A non-null QueuedRecordBean to save.\n     *\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the save is successful, false otherwise.\n     */\n    public boolean saveQueuedRecord(final QueuedRecordBean queuedRecord);\n\n    public void saveQueuedRecord(final QueuedRecordBean queuedRecord, final Connection conn) throws SQLException;\n\n    public boolean enqueue(final String type, final String metadataId);\n\n    public boolean dequeue(final String queuedRecordId);\n\n    public void dequeue(final String queuedRecordId, final Connection conn) throws SQLException;\n\n    public boolean markRecordApproved(final String metadataId);\n\n    public boolean markRecordCataloged(final String metadataId);\n\n    public boolean rejectRecord(final String metadataId);\n}\n",
    "package": "org.heal.module.catalog",
    "classname": "QueueDAO",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/module/catalog/QueueDAO_0Test.java",
    "test_prompt": "// QueueDAO_0Test.java\npackage org.heal.module.catalog;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.util.CommonDAO;\nimport javax.sql.DataSource;\nimport java.io.Serializable;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QueueDAO}.\n* It contains ten unit test cases for the {@link QueueDAO#getQueueByType(String)} method.\n*/\nclass QueueDAO_0Test {",
    "method_signature": "getQueueByType(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// QueueDAO.java\npackage org.heal.module.catalog;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.util.CommonDAO;\nimport javax.sql.DataSource;\nimport java.io.Serializable;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n/**\n * A DAO for managing queues stored in the database\n */\npublic class QueueDAO implements Serializable {\n\n    public QueueDAO() {\n    }\n\n    public static final String TYPE_APPROVAL \u003d new String(\"approval\");\n\n    public static final String TYPE_CATALOG \u003d new String(\"catalog\");\n\n    private DataSource dataSource;\n\n    private CommonDAO cd \u003d new CommonDAO();\n\n    private MetadataDAO md \u003d new MetadataDAO();\n\n    private static final String SELECT_QUEUE_BY_TYPE \u003d \"SELECT QueuedRecordId,\" + \" MetadataId, Status, Comments FROM QueuedRecords WHERE Type LIKE ?\";\n\n    private static final String INSERT_QUEUE_ENTRY \u003d \"INSERT INTO QueuedRecords\" + \" (Type, MetadataId, Status, Comments) VALUES (?, ?, ?, ?)\";\n\n    private static final String UPDATE_QUEUE_ENTRY \u003d \"UPDATE QueuedRecords\" + \" SET Type \u003d ?, MetadataId \u003d ?, Status \u003d ?, Comments \u003d ? WHERE\" + \" QueuedRecordId \u003d ?\";\n\n    private static final String DELETE_QUEUE_ENTRY \u003d \"DELETE FROM QueuedRecords\" + \" WHERE QueuedRecordId \u003d ?\";\n\n    public void setDataSource(final DataSource dataSource);\n\n    /**\n     * @param type The type of QueuedRecordBeans to get.\n     *\n     * @return A List of QueuedRecordBeans.\n     */\n    public List\u003cQueuedRecordBean\u003e getQueueByType(final String type);\n\n    /**\n     * @return The List of QueuedRecordBeans representing the catalog queue.\n     */\n    public List\u003cQueuedRecordBean\u003e getCatalogQueue();\n\n    /**\n     * @return The List of QueuedRecordBeans representing the approval queue.\n     */\n    public List\u003cQueuedRecordBean\u003e getApprovalQueue();\n\n    public List\u003cQueuedRecordBean\u003e getQueue(final String type, final Connection conn) throws SQLException;\n\n    /**\n     * Saves a {@link QueuedRecordBean} to the database.\n     *\n     * @param queuedRecord A non-null QueuedRecordBean to save.\n     *\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the save is successful, false otherwise.\n     */\n    public boolean saveQueuedRecord(final QueuedRecordBean queuedRecord);\n\n    public void saveQueuedRecord(final QueuedRecordBean queuedRecord, final Connection conn) throws SQLException;\n\n    public boolean enqueue(final String type, final String metadataId);\n\n    public boolean dequeue(final String queuedRecordId);\n\n    public void dequeue(final String queuedRecordId, final Connection conn) throws SQLException;\n\n    public boolean markRecordApproved(final String metadataId);\n\n    public boolean markRecordCataloged(final String metadataId);\n\n    public boolean rejectRecord(final String metadataId);\n}\n",
    "package": "org.heal.module.catalog",
    "classname": "QueueDAO",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/module/catalog/QueueDAO_1Test.java",
    "test_prompt": "// QueueDAO_1Test.java\npackage org.heal.module.catalog;\n\nimport org.heal.module.metadata.CompleteMetadataBean;\nimport org.heal.module.metadata.MetadataDAO;\nimport org.heal.util.CommonDAO;\nimport javax.sql.DataSource;\nimport java.io.Serializable;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QueueDAO}.\n* It contains ten unit test cases for the {@link QueueDAO#saveQueuedRecord(QueuedRecordBean)} method.\n*/\nclass QueueDAO_1Test {",
    "method_signature": "saveQueuedRecord(QueuedRecordBean)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// ParameterBean.java\npackage org.heal.module.search;\n\nimport java.util.*;\n\npublic class ParameterBean {\n\n    private ArrayList searchParameters \u003d null;\n\n    private ArrayList tableList \u003d null;\n\n    private String[] filterArray \u003d null;\n\n    private String[] sourceCollection \u003d null;\n\n    private String[] publicationNames \u003d null;\n\n    private String[] publicationIds \u003d null;\n\n    private String rights \u003d null;\n\n    private String[] primaryArray \u003d null;\n\n    private boolean hidden \u003d false;\n\n    private String[] imaging \u003d null;\n\n    private String[] disease \u003d null;\n\n    /**\n     * Constructor\n     */\n    public ParameterBean() {\n    }\n\n    /**\n     * New constructor\n     */\n    public ParameterBean(String keywordString) {\n    }\n\n    /**\n     * Accessor method, returns the parameterNode at specified position\n     *\n     * @param position\n     *\n     * @return ParameterNode\n     */\n    public ParameterNode getParameters(int position);\n\n    /**\n     * Accessor method, returns the searchParameter size\n     *\n     * @return int\n     */\n    public int size();\n\n    /**\n     * return the filterArray\n     *\n     * @return\n     */\n    public String[] getFilterArray();\n\n    /**\n     * return the diseasePrecess array\n     * @return disease\n     */\n    public String[] getDisease();\n\n    /**\n     * return the imaging technique Array\n     * @return imaging\n     */\n    public String[] getImaging();\n\n    /**\n     * return the Source collection Array\n     *\n     * @return sourceCollection\n     */\n    public String[] getSourceCollection();\n\n    /**\n     * return the usage rights array\n     *\n     * @return rights\n     */\n    public String getUsageRight();\n\n    /**\n     * return the primary audience Array\n     *\n     * @return primary\n     */\n    public String[] getPrimaryArray();\n\n    /**\n     * Return the value for hidden\n     *\n     * @return\n     */\n    public boolean getHidden();\n\n    /**\n     * Adds parameterNode into the ArrayList\n     *\n     * @param input\n     */\n    public void addParameters(ParameterNode input);\n\n    /**\n     * Adds filter array into the parameterBean\n     *\n     * @param filter\n     */\n    public void setFilterArray(String[] filter);\n\n    /**\n     * Adds source collection array into the parameterBean\n     *\n     * @param source\n     */\n    public void setSourceCollection(String[] source);\n\n    /**\n     * Adds usage rights array into the parameterBean\n     *\n     * @param rts\n     */\n    public void setUsageRights(String rts);\n\n    /**\n     * Adds primary audience array into the parameterBean\n     *\n     * @param primary\n     */\n    public void setPrimaryArray(String[] primary);\n\n    /**\n     * Adds imaging technique array into the parameterBean\n     * @param source\n     */\n    public void setImaging(String[] imgs);\n\n    /**\n     * Adds disease precess array into the parameterBean\n     * @param rts\n     */\n    public void setDisease(String[] dis);\n\n    /**\n     * sets the value for hidden\n     *\n     * @param value\n     */\n    public void setHidden(boolean value);\n\n    /**\n     * This is a wrapper that calls for functions to parse the table name.\n     * If the tableList is empty, it calls for function to create the tableList,\n     * else it returns the tableList as ArrayList.\n     *\n     * @return ArrayList of tableName\n     */\n    public ArrayList getTableList();\n\n    /**\n     * Checks if the table name already exists in the tableList. If not, adds the\n     * table name into the tableList.\n     *\n     * @param table\n     *\n     * @return boolean\n     */\n    private boolean tableNotFound(String table);\n\n    /**\n     * main function to create the tableList. Parses through the searchParameter\n     * one by one and checks for the table name.\n     */\n    private void makeTableList();\n\n    public void setPublicationNames(String[] names);\n\n    public String[] getPublicationNames();\n\n    public void setPublicationIds(String[] publicationIds);\n\n    public String[] getPublicationIds();\n\n    public ParameterBean makeParameterBean(String keywordString);\n}\n",
    "package": "org.heal.module.search",
    "classname": "ParameterBean",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/module/search/ParameterBean.java",
    "test_prompt": "// ParameterBeanTest.java\npackage org.heal.module.search;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ParameterBean}.\n* It contains ten unit test cases for the {@link ParameterBean#size()} method.\n*/\nclass ParameterBeanTest {",
    "method_signature": "size()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// DownloadQueueBean.java\npackage org.heal.module.download;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.TreeSet;\n\n/**\n * Stores a list of contentIds and a package file location and url.\n *\n * @author Seth Wright\n * @version 0.1\n */\npublic class DownloadQueueBean implements Serializable {\n\n    TreeSet contentSet \u003d new TreeSet();\n\n    String packageFileLocation \u003d null;\n\n    String packageURL \u003d null;\n\n    boolean packageModifiedSinceFileCreated \u003d true;\n\n    int packageFormat \u003d -1;\n\n    /**\n     * Get a collection of content Ids.\n     */\n    public Collection getContentIds();\n\n    /**\n     * Returns true if the package has not been modified,\n     * the package file location is not null, the\n     * package URL is set, and the format of the\n     * package is the same as that provided and\n     * the package file exists on disk.\n     */\n    public boolean isPackageFileUpToDate(int format);\n\n    /**\n     * Returns the format for the package associated with this queue.\n     * The value will be one of the static values defined in\n     * DownloadServicesBean (ZIPFORMAT, GZIPFORMAT), or -1 if there\n     * is no package associated with this queue.\n     */\n    public int getPackageFormat();\n\n    /**\n     * Sets the format for the package associated with this queue.\n     * This value should be one of the static values defined in\n     * DownloadServicesBean (ZIPFORMAT, GZIPFORMAT), or -1 if there\n     * is no package associated with this queue.\n     */\n    public void setPackageFormat(int newPackageFormat);\n\n    /**\n     * Returns the file path to be used to access the package for this queue.\n     */\n    public String getPackageFileLocation();\n\n    public void setPackageFileLocation(String newPackageFileLocation);\n\n    /**\n     * Returns the URL to be used to access the package for this queue.\n     */\n    public String getPackageURL();\n\n    /**\n     * Sets the url used to access this package file.\n     */\n    public void setPackageURL(String newPackageURL);\n\n    /**\n     * call this method right after the package file is created.\n     * This is used to track whether or not the queue has been modified\n     * since the last time the associated file was created.\n     */\n    public void setPackageFileCreated();\n\n    /**\n     * Checks whether or not the queue has changed since the last time\n     * the package was generated.  If the queue has had metadata entries\n     * added or removed since the last time the package has been\n     * generated or the package has not yet been generated yet, then this\n     * method will return true\n     * otherwise, it will return false\n     */\n    public boolean isPackageModified();\n\n    /**\n     * Adds a metadata id to the list of content to include in the package\n     * generated for this queue.\n     */\n    public boolean addToQueue(String contentId);\n\n    /**\n     * Removes a metadata id from the list of content to include in the package\n     * generated for this queue.\n     */\n    public boolean removeFromQueue(String contentId);\n\n    /**\n     * Removes all metadata id from the list of content to include in the\n     * package generated for this queue.\n     */\n    public boolean removeAllFromQueue();\n\n    /**\n     * Deletes all package file settings (last modified, location, url)\n     * but leaves the queue of id\u0027s intact.\n     * Returns true on success.\n     */\n    public boolean clearPackageFileSettings();\n\n    /**\n     * Returns true if the specified metadataId is already in the queue.\n     * Otherwise, it returns false.\n     */\n    public boolean isQueuedAlready(String contentId);\n\n    /**\n     * Returns the number of items queued for download.\n     */\n    public int getNumEntries();\n}\n",
    "package": "org.heal.module.download",
    "classname": "DownloadQueueBean",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/module/download/DownloadQueueBean_0Test.java",
    "test_prompt": "// DownloadQueueBean_0Test.java\npackage org.heal.module.download;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.TreeSet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DownloadQueueBean}.\n* It contains ten unit test cases for the {@link DownloadQueueBean#removeAllFromQueue()} method.\n*/\nclass DownloadQueueBean_0Test {",
    "method_signature": "removeAllFromQueue()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// DownloadQueueBean.java\npackage org.heal.module.download;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.TreeSet;\n\n/**\n * Stores a list of contentIds and a package file location and url.\n *\n * @author Seth Wright\n * @version 0.1\n */\npublic class DownloadQueueBean implements Serializable {\n\n    TreeSet contentSet \u003d new TreeSet();\n\n    String packageFileLocation \u003d null;\n\n    String packageURL \u003d null;\n\n    boolean packageModifiedSinceFileCreated \u003d true;\n\n    int packageFormat \u003d -1;\n\n    /**\n     * Get a collection of content Ids.\n     */\n    public Collection getContentIds();\n\n    /**\n     * Returns true if the package has not been modified,\n     * the package file location is not null, the\n     * package URL is set, and the format of the\n     * package is the same as that provided and\n     * the package file exists on disk.\n     */\n    public boolean isPackageFileUpToDate(int format);\n\n    /**\n     * Returns the format for the package associated with this queue.\n     * The value will be one of the static values defined in\n     * DownloadServicesBean (ZIPFORMAT, GZIPFORMAT), or -1 if there\n     * is no package associated with this queue.\n     */\n    public int getPackageFormat();\n\n    /**\n     * Sets the format for the package associated with this queue.\n     * This value should be one of the static values defined in\n     * DownloadServicesBean (ZIPFORMAT, GZIPFORMAT), or -1 if there\n     * is no package associated with this queue.\n     */\n    public void setPackageFormat(int newPackageFormat);\n\n    /**\n     * Returns the file path to be used to access the package for this queue.\n     */\n    public String getPackageFileLocation();\n\n    public void setPackageFileLocation(String newPackageFileLocation);\n\n    /**\n     * Returns the URL to be used to access the package for this queue.\n     */\n    public String getPackageURL();\n\n    /**\n     * Sets the url used to access this package file.\n     */\n    public void setPackageURL(String newPackageURL);\n\n    /**\n     * call this method right after the package file is created.\n     * This is used to track whether or not the queue has been modified\n     * since the last time the associated file was created.\n     */\n    public void setPackageFileCreated();\n\n    /**\n     * Checks whether or not the queue has changed since the last time\n     * the package was generated.  If the queue has had metadata entries\n     * added or removed since the last time the package has been\n     * generated or the package has not yet been generated yet, then this\n     * method will return true\n     * otherwise, it will return false\n     */\n    public boolean isPackageModified();\n\n    /**\n     * Adds a metadata id to the list of content to include in the package\n     * generated for this queue.\n     */\n    public boolean addToQueue(String contentId);\n\n    /**\n     * Removes a metadata id from the list of content to include in the package\n     * generated for this queue.\n     */\n    public boolean removeFromQueue(String contentId);\n\n    /**\n     * Removes all metadata id from the list of content to include in the\n     * package generated for this queue.\n     */\n    public boolean removeAllFromQueue();\n\n    /**\n     * Deletes all package file settings (last modified, location, url)\n     * but leaves the queue of id\u0027s intact.\n     * Returns true on success.\n     */\n    public boolean clearPackageFileSettings();\n\n    /**\n     * Returns true if the specified metadataId is already in the queue.\n     * Otherwise, it returns false.\n     */\n    public boolean isQueuedAlready(String contentId);\n\n    /**\n     * Returns the number of items queued for download.\n     */\n    public int getNumEntries();\n}\n",
    "package": "org.heal.module.download",
    "classname": "DownloadQueueBean",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/module/download/DownloadQueueBean_1Test.java",
    "test_prompt": "// DownloadQueueBean_1Test.java\npackage org.heal.module.download;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport java.util.Collection;\nimport java.util.TreeSet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DownloadQueueBean}.\n* It contains ten unit test cases for the {@link DownloadQueueBean#clearPackageFileSettings()} method.\n*/\nclass DownloadQueueBean_1Test {",
    "method_signature": "clearPackageFileSettings()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// DownloadFolderTag.java\npackage org.heal.tag.download;\n\nimport org.heal.module.download.DownloadQueueBean;\nimport org.heal.module.metadata.ShortMetadataBean;\nimport org.heal.util.FileLocator;\nimport javax.servlet.jsp.tagext.TagSupport;\n\n/**\n * A tag which is basically acts as a container for attributes which\n * nested tags will utilize.\n *\n * @version 1.0\n * @author Brad Schaefer (\u003cA HREF\u003d\"mailto:schaefer@lib.med.utah.edu\"\u003eschaefer@lib.med.utah.edu\u003c/A\u003e)\n * @see org.heal.tag.download.DownloadFolderActionTag\n */\npublic class DownloadFolderTag extends TagSupport {\n\n    public static final int UNKNOWN \u003d -1;\n\n    public static final int UNAVAILABLE \u003d 0;\n\n    public static final int ADD \u003d 1;\n\n    public static final int REMOVE \u003d 2;\n\n    public static final int REMOTE_IMAGE \u003d 3;\n\n    private DownloadQueueBean downloadQueue \u003d null;\n\n    private ShortMetadataBean shortMetadata \u003d null;\n\n    private int downloadFolderType \u003d UNAVAILABLE;\n\n    public void setDownloadQueue(DownloadQueueBean downloadQueue);\n\n    public void setShortMetadata(ShortMetadataBean shortMetadata);\n\n    /**\n     * This is perhaps poorly named, but this will return an\n     * integer representing whether or not a metadata record may\n     * be added to the download folder, removed from the download folder,\n     * or if the download folder is unavailable for the metadata record.\n     *\n     * @return {@link #UNAVAILABLE DownloadFolderTag.UNAVAILABLE} or\n     * {@link #ADD DownloadFolderTag.ADD} or {@link #REMOVE DownloadFolderTag.REMOVE} or\n     * {@link #REMOTE_IMAGE DownloadFolderTag.REMOTE_IMAGE}.\n     */\n    public int getDownloadFolderType();\n\n    /**\n     * Parses the attributes so as to initialize the\n     * {@link #getDownloadFolderType() download folder type} for child tags\n     * to use.\n     *\n     * @return Always returns \u003ccode\u003eTagSupport.EVAL_BODY_INCLUDE\u003c/code\u003e\n     */\n    public int doStartTag();\n\n    /**\n     * Resets the internal state of the tag.\n     *\n     * @return Always returns \u003ccode\u003eTagSupport.EVAL_PAGE\u003c/code\u003e\n     */\n    public int doEndTag();\n\n    /**\n     * Resets the tag to its initial state.\n     */\n    private void resetTag();\n}\n",
    "package": "org.heal.tag.download",
    "classname": "DownloadFolderTag",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/tag/download/DownloadFolderTag_0Test.java",
    "test_prompt": "// DownloadFolderTag_0Test.java\npackage org.heal.tag.download;\n\nimport org.heal.module.download.DownloadQueueBean;\nimport org.heal.module.metadata.ShortMetadataBean;\nimport org.heal.util.FileLocator;\nimport javax.servlet.jsp.tagext.TagSupport;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DownloadFolderTag}.\n* It contains ten unit test cases for the {@link DownloadFolderTag#doStartTag()} method.\n*/\nclass DownloadFolderTag_0Test {",
    "method_signature": "doStartTag()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// DownloadFolderTag.java\npackage org.heal.tag.download;\n\nimport org.heal.module.download.DownloadQueueBean;\nimport org.heal.module.metadata.ShortMetadataBean;\nimport org.heal.util.FileLocator;\nimport javax.servlet.jsp.tagext.TagSupport;\n\n/**\n * A tag which is basically acts as a container for attributes which\n * nested tags will utilize.\n *\n * @version 1.0\n * @author Brad Schaefer (\u003cA HREF\u003d\"mailto:schaefer@lib.med.utah.edu\"\u003eschaefer@lib.med.utah.edu\u003c/A\u003e)\n * @see org.heal.tag.download.DownloadFolderActionTag\n */\npublic class DownloadFolderTag extends TagSupport {\n\n    public static final int UNKNOWN \u003d -1;\n\n    public static final int UNAVAILABLE \u003d 0;\n\n    public static final int ADD \u003d 1;\n\n    public static final int REMOVE \u003d 2;\n\n    public static final int REMOTE_IMAGE \u003d 3;\n\n    private DownloadQueueBean downloadQueue \u003d null;\n\n    private ShortMetadataBean shortMetadata \u003d null;\n\n    private int downloadFolderType \u003d UNAVAILABLE;\n\n    public void setDownloadQueue(DownloadQueueBean downloadQueue);\n\n    public void setShortMetadata(ShortMetadataBean shortMetadata);\n\n    /**\n     * This is perhaps poorly named, but this will return an\n     * integer representing whether or not a metadata record may\n     * be added to the download folder, removed from the download folder,\n     * or if the download folder is unavailable for the metadata record.\n     *\n     * @return {@link #UNAVAILABLE DownloadFolderTag.UNAVAILABLE} or\n     * {@link #ADD DownloadFolderTag.ADD} or {@link #REMOVE DownloadFolderTag.REMOVE} or\n     * {@link #REMOTE_IMAGE DownloadFolderTag.REMOTE_IMAGE}.\n     */\n    public int getDownloadFolderType();\n\n    /**\n     * Parses the attributes so as to initialize the\n     * {@link #getDownloadFolderType() download folder type} for child tags\n     * to use.\n     *\n     * @return Always returns \u003ccode\u003eTagSupport.EVAL_BODY_INCLUDE\u003c/code\u003e\n     */\n    public int doStartTag();\n\n    /**\n     * Resets the internal state of the tag.\n     *\n     * @return Always returns \u003ccode\u003eTagSupport.EVAL_PAGE\u003c/code\u003e\n     */\n    public int doEndTag();\n\n    /**\n     * Resets the tag to its initial state.\n     */\n    private void resetTag();\n}\n",
    "package": "org.heal.tag.download",
    "classname": "DownloadFolderTag",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/tag/download/DownloadFolderTag_1Test.java",
    "test_prompt": "// DownloadFolderTag_1Test.java\npackage org.heal.tag.download;\n\nimport org.heal.module.download.DownloadQueueBean;\nimport org.heal.module.metadata.ShortMetadataBean;\nimport org.heal.util.FileLocator;\nimport javax.servlet.jsp.tagext.TagSupport;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DownloadFolderTag}.\n* It contains ten unit test cases for the {@link DownloadFolderTag#doEndTag()} method.\n*/\nclass DownloadFolderTag_1Test {",
    "method_signature": "doEndTag()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// SearchResult.java\npackage org.merlot.fedsearch.type;\n\npublic class SearchResult implements java.io.Serializable {\n\n    private java.lang.String category;\n\n    private java.lang.String comments;\n\n    private int endIndex;\n\n    private java.lang.String query;\n\n    private org.merlot.fedsearch.type.SearchResultElement[] resultElements;\n\n    private float searchTime;\n\n    private int startIndex;\n\n    private int totalResultsCount;\n\n    public SearchResult() {\n    }\n\n    public SearchResult(java.lang.String category, java.lang.String comments, int endIndex, java.lang.String query, org.merlot.fedsearch.type.SearchResultElement[] resultElements, float searchTime, int startIndex, int totalResultsCount) {\n    }\n\n    /**\n     * Gets the category value for this SearchResult.\n     *\n     * @return category\n     */\n    public java.lang.String getCategory();\n\n    /**\n     * Sets the category value for this SearchResult.\n     *\n     * @param category\n     */\n    public void setCategory(java.lang.String category);\n\n    /**\n     * Gets the comments value for this SearchResult.\n     *\n     * @return comments\n     */\n    public java.lang.String getComments();\n\n    /**\n     * Sets the comments value for this SearchResult.\n     *\n     * @param comments\n     */\n    public void setComments(java.lang.String comments);\n\n    /**\n     * Gets the endIndex value for this SearchResult.\n     *\n     * @return endIndex\n     */\n    public int getEndIndex();\n\n    /**\n     * Sets the endIndex value for this SearchResult.\n     *\n     * @param endIndex\n     */\n    public void setEndIndex(int endIndex);\n\n    /**\n     * Gets the query value for this SearchResult.\n     *\n     * @return query\n     */\n    public java.lang.String getQuery();\n\n    /**\n     * Sets the query value for this SearchResult.\n     *\n     * @param query\n     */\n    public void setQuery(java.lang.String query);\n\n    /**\n     * Gets the resultElements value for this SearchResult.\n     *\n     * @return resultElements\n     */\n    public org.merlot.fedsearch.type.SearchResultElement[] getResultElements();\n\n    /**\n     * Sets the resultElements value for this SearchResult.\n     *\n     * @param resultElements\n     */\n    public void setResultElements(org.merlot.fedsearch.type.SearchResultElement[] resultElements);\n\n    /**\n     * Gets the searchTime value for this SearchResult.\n     *\n     * @return searchTime\n     */\n    public float getSearchTime();\n\n    /**\n     * Sets the searchTime value for this SearchResult.\n     *\n     * @param searchTime\n     */\n    public void setSearchTime(float searchTime);\n\n    /**\n     * Gets the startIndex value for this SearchResult.\n     *\n     * @return startIndex\n     */\n    public int getStartIndex();\n\n    /**\n     * Sets the startIndex value for this SearchResult.\n     *\n     * @param startIndex\n     */\n    public void setStartIndex(int startIndex);\n\n    /**\n     * Gets the totalResultsCount value for this SearchResult.\n     *\n     * @return totalResultsCount\n     */\n    public int getTotalResultsCount();\n\n    /**\n     * Sets the totalResultsCount value for this SearchResult.\n     *\n     * @param totalResultsCount\n     */\n    public void setTotalResultsCount(int totalResultsCount);\n\n    private java.lang.Object __equalsCalc \u003d null;\n\n    public synchronized boolean equals(java.lang.Object obj);\n\n    private boolean __hashCodeCalc \u003d false;\n\n    public synchronized int hashCode();\n\n    // Type metadata\n    private static org.apache.axis.description.TypeDesc typeDesc \u003d new org.apache.axis.description.TypeDesc(SearchResult.class, true);\n\n    static {\n    }\n\n    /**\n     * Return type metadata object\n     */\n    public static org.apache.axis.description.TypeDesc getTypeDesc();\n\n    /**\n     * Get Custom Serializer\n     */\n    public static org.apache.axis.encoding.Serializer getSerializer(java.lang.String mechType, java.lang.Class _javaType, javax.xml.namespace.QName _xmlType);\n\n    /**\n     * Get Custom Deserializer\n     */\n    public static org.apache.axis.encoding.Deserializer getDeserializer(java.lang.String mechType, java.lang.Class _javaType, javax.xml.namespace.QName _xmlType);\n}\n",
    "package": "org.merlot.fedsearch.type",
    "classname": "SearchResult",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/merlot/fedsearch/type/SearchResult.java",
    "test_prompt": "// SearchResultTest.java\npackage org.merlot.fedsearch.type;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SearchResult}.\n* It contains ten unit test cases for the {@link SearchResult#getTypeDesc()} method.\n*/\nclass SearchResultTest {",
    "method_signature": "getTypeDesc()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// SearchResultElement.java\npackage org.merlot.fedsearch.type;\n\npublic class SearchResultElement implements java.io.Serializable {\n\n    private java.lang.String URL;\n\n    private java.lang.String assignmentsURL;\n\n    private java.lang.String authorName;\n\n    private int avgComments;\n\n    private int avgPeerReviews;\n\n    private java.lang.String award;\n\n    private java.lang.String commentsURL;\n\n    private java.lang.String creationDate;\n\n    private java.lang.String description;\n\n    private java.lang.String detailURL;\n\n    private java.lang.String itemType;\n\n    private int numAssignments;\n\n    private int numComments;\n\n    private int numPeerReviews;\n\n    private java.lang.String peerReviewsURL;\n\n    private int relevanceRanking;\n\n    private java.lang.String title;\n\n    public SearchResultElement() {\n    }\n\n    public SearchResultElement(java.lang.String URL, java.lang.String assignmentsURL, java.lang.String authorName, int avgComments, int avgPeerReviews, java.lang.String award, java.lang.String commentsURL, java.lang.String creationDate, java.lang.String description, java.lang.String detailURL, java.lang.String itemType, int numAssignments, int numComments, int numPeerReviews, java.lang.String peerReviewsURL, int relevanceRanking, java.lang.String title) {\n    }\n\n    /**\n     * Gets the URL value for this SearchResultElement.\n     *\n     * @return URL\n     */\n    public java.lang.String getURL();\n\n    /**\n     * Sets the URL value for this SearchResultElement.\n     *\n     * @param URL\n     */\n    public void setURL(java.lang.String URL);\n\n    /**\n     * Gets the assignmentsURL value for this SearchResultElement.\n     *\n     * @return assignmentsURL\n     */\n    public java.lang.String getAssignmentsURL();\n\n    /**\n     * Sets the assignmentsURL value for this SearchResultElement.\n     *\n     * @param assignmentsURL\n     */\n    public void setAssignmentsURL(java.lang.String assignmentsURL);\n\n    /**\n     * Gets the authorName value for this SearchResultElement.\n     *\n     * @return authorName\n     */\n    public java.lang.String getAuthorName();\n\n    /**\n     * Sets the authorName value for this SearchResultElement.\n     *\n     * @param authorName\n     */\n    public void setAuthorName(java.lang.String authorName);\n\n    /**\n     * Gets the avgComments value for this SearchResultElement.\n     *\n     * @return avgComments\n     */\n    public int getAvgComments();\n\n    /**\n     * Sets the avgComments value for this SearchResultElement.\n     *\n     * @param avgComments\n     */\n    public void setAvgComments(int avgComments);\n\n    /**\n     * Gets the avgPeerReviews value for this SearchResultElement.\n     *\n     * @return avgPeerReviews\n     */\n    public int getAvgPeerReviews();\n\n    /**\n     * Sets the avgPeerReviews value for this SearchResultElement.\n     *\n     * @param avgPeerReviews\n     */\n    public void setAvgPeerReviews(int avgPeerReviews);\n\n    /**\n     * Gets the award value for this SearchResultElement.\n     *\n     * @return award\n     */\n    public java.lang.String getAward();\n\n    /**\n     * Sets the award value for this SearchResultElement.\n     *\n     * @param award\n     */\n    public void setAward(java.lang.String award);\n\n    /**\n     * Gets the commentsURL value for this SearchResultElement.\n     *\n     * @return commentsURL\n     */\n    public java.lang.String getCommentsURL();\n\n    /**\n     * Sets the commentsURL value for this SearchResultElement.\n     *\n     * @param commentsURL\n     */\n    public void setCommentsURL(java.lang.String commentsURL);\n\n    /**\n     * Gets the creationDate value for this SearchResultElement.\n     *\n     * @return creationDate\n     */\n    public java.lang.String getCreationDate();\n\n    /**\n     * Sets the creationDate value for this SearchResultElement.\n     *\n     * @param creationDate\n     */\n    public void setCreationDate(java.lang.String creationDate);\n\n    /**\n     * Gets the description value for this SearchResultElement.\n     *\n     * @return description\n     */\n    public java.lang.String getDescription();\n\n    /**\n     * Sets the description value for this SearchResultElement.\n     *\n     * @param description\n     */\n    public void setDescription(java.lang.String description);\n\n    /**\n     * Gets the detailURL value for this SearchResultElement.\n     *\n     * @return detailURL\n     */\n    public java.lang.String getDetailURL();\n\n    /**\n     * Sets the detailURL value for this SearchResultElement.\n     *\n     * @param detailURL\n     */\n    public void setDetailURL(java.lang.String detailURL);\n\n    /**\n     * Gets the itemType value for this SearchResultElement.\n     *\n     * @return itemType\n     */\n    public java.lang.String getItemType();\n\n    /**\n     * Sets the itemType value for this SearchResultElement.\n     *\n     * @param itemType\n     */\n    public void setItemType(java.lang.String itemType);\n\n    /**\n     * Gets the numAssignments value for this SearchResultElement.\n     *\n     * @return numAssignments\n     */\n    public int getNumAssignments();\n\n    /**\n     * Sets the numAssignments value for this SearchResultElement.\n     *\n     * @param numAssignments\n     */\n    public void setNumAssignments(int numAssignments);\n\n    /**\n     * Gets the numComments value for this SearchResultElement.\n     *\n     * @return numComments\n     */\n    public int getNumComments();\n\n    /**\n     * Sets the numComments value for this SearchResultElement.\n     *\n     * @param numComments\n     */\n    public void setNumComments(int numComments);\n\n    /**\n     * Gets the numPeerReviews value for this SearchResultElement.\n     *\n     * @return numPeerReviews\n     */\n    public int getNumPeerReviews();\n\n    /**\n     * Sets the numPeerReviews value for this SearchResultElement.\n     *\n     * @param numPeerReviews\n     */\n    public void setNumPeerReviews(int numPeerReviews);\n\n    /**\n     * Gets the peerReviewsURL value for this SearchResultElement.\n     *\n     * @return peerReviewsURL\n     */\n    public java.lang.String getPeerReviewsURL();\n\n    /**\n     * Sets the peerReviewsURL value for this SearchResultElement.\n     *\n     * @param peerReviewsURL\n     */\n    public void setPeerReviewsURL(java.lang.String peerReviewsURL);\n\n    /**\n     * Gets the relevanceRanking value for this SearchResultElement.\n     *\n     * @return relevanceRanking\n     */\n    public int getRelevanceRanking();\n\n    /**\n     * Sets the relevanceRanking value for this SearchResultElement.\n     *\n     * @param relevanceRanking\n     */\n    public void setRelevanceRanking(int relevanceRanking);\n\n    /**\n     * Gets the title value for this SearchResultElement.\n     *\n     * @return title\n     */\n    public java.lang.String getTitle();\n\n    /**\n     * Sets the title value for this SearchResultElement.\n     *\n     * @param title\n     */\n    public void setTitle(java.lang.String title);\n\n    private java.lang.Object __equalsCalc \u003d null;\n\n    public synchronized boolean equals(java.lang.Object obj);\n\n    private boolean __hashCodeCalc \u003d false;\n\n    public synchronized int hashCode();\n\n    // Type metadata\n    private static org.apache.axis.description.TypeDesc typeDesc \u003d new org.apache.axis.description.TypeDesc(SearchResultElement.class, true);\n\n    static {\n    }\n\n    /**\n     * Return type metadata object\n     */\n    public static org.apache.axis.description.TypeDesc getTypeDesc();\n\n    /**\n     * Get Custom Serializer\n     */\n    public static org.apache.axis.encoding.Serializer getSerializer(java.lang.String mechType, java.lang.Class _javaType, javax.xml.namespace.QName _xmlType);\n\n    /**\n     * Get Custom Deserializer\n     */\n    public static org.apache.axis.encoding.Deserializer getDeserializer(java.lang.String mechType, java.lang.Class _javaType, javax.xml.namespace.QName _xmlType);\n}\n",
    "package": "org.merlot.fedsearch.type",
    "classname": "SearchResultElement",
    "id": "/EvoSuiteBenchmark/original/96_heal/src/main/java/org/merlot/fedsearch/type/SearchResultElement.java",
    "test_prompt": "// SearchResultElementTest.java\npackage org.merlot.fedsearch.type;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SearchResultElement}.\n* It contains ten unit test cases for the {@link SearchResultElement#getTypeDesc()} method.\n*/\nclass SearchResultElementTest {",
    "method_signature": "getTypeDesc()",
    "suffix": ""
  }
]