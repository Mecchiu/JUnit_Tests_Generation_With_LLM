[
  {
    "numberTests": "ten",
    "original_code": "// Burn.java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\n/**\n * @author Shane Santner\n * This class burns the DVD file structure previously created by\n * dvd-author to a DVD disc.\n */\npublic class Burn {\n\n    /**\n     * Optionally burn to DVD when complete and no errors, uses growisofs\n     *\n     * @param DVD_GUI This is the GUI object used to control the form\n     * return   A boolean to determine if an error occurred in the function\n     */\n    public boolean BurnToDVD(GUI DVD_GUI);\n}\n",
    "package": "",
    "classname": "Burn",
    "id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Burn.java",
    "test_prompt": "// BurnTest.java\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Burn}.\n* It contains ten unit test cases for the {@link Burn#BurnToDVD(GUI)} method.\n*/\nclass BurnTest {",
    "method_signature": "BurnToDVD(GUI)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Menu.java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileNotFoundException;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.FilenameFilter;\nimport java.util.StringTokenizer;\n\n/**\n * @author Shane Santner\n * This class creates a background menu for a DVD.  The user\n * can specify a background picture and audio to use for the\n * menu, or a default background can also be used.  The user\n * also has the option of specifying unique titles for each\n * chapter of the DVD.  If nothing is specified then the title\n * of the DVD will be used followed by an underscore and increasing\n * integer for each video clip.\n *\n * TODO - Can I use streams on dvd-menu?  Really need to standardize\n *        how I use streams across the board for all classes.\n */\npublic class Menu implements Runnable {\n\n    /**\n     * Used to instantiate a new thread and to perform error checking.\n     *\n     * @return A boolean to determine if an error occurred in the function\n     */\n    public boolean init();\n}\n",
    "package": "",
    "classname": "Menu",
    "id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Menu_0Test.java",
    "test_prompt": "// Menu_0Test.java\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileNotFoundException;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.FilenameFilter;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Menu}.\n* It contains ten unit test cases for the {@link Menu#init()} method.\n*/\nclass Menu_0Test {",
    "method_signature": "init()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Menu.java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileNotFoundException;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.FilenameFilter;\nimport java.util.StringTokenizer;\n\n/**\n * @author Shane Santner\n * This class creates a background menu for a DVD.  The user\n * can specify a background picture and audio to use for the\n * menu, or a default background can also be used.  The user\n * also has the option of specifying unique titles for each\n * chapter of the DVD.  If nothing is specified then the title\n * of the DVD will be used followed by an underscore and increasing\n * integer for each video clip.\n *\n * TODO - Can I use streams on dvd-menu?  Really need to standardize\n *        how I use streams across the board for all classes.\n */\npublic class Menu implements Runnable {\n\n    /**\n     * Creates the xml file to pass to dvdauthor\n     *\n     * @param m_GUI This is the GUI object used to control the form\n     */\n    public boolean createXML();\n}\n",
    "package": "",
    "classname": "Menu",
    "id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Menu_1Test.java",
    "test_prompt": "// Menu_1Test.java\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileNotFoundException;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.FilenameFilter;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Menu}.\n* It contains ten unit test cases for the {@link Menu#createXML()} method.\n*/\nclass Menu_1Test {",
    "method_signature": "createXML()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// Author.java\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.util.NoSuchElementException;\nimport java.util.StringTokenizer;\nimport java.lang.NullPointerException;\nimport java.lang.IllegalArgumentException;\n\n/**\n * @author Shane Santner\n * This class create the DVD filesystem that will be burned\n * to disc.\n *\n * TODO - Need to handle input, output and error streams\n *        more appropriatly.\n */\npublic class Author {\n\n    /**\n     * Create a DVD filestructure necessary to play in dvd player using dvdauthor\n     *\n     * @param DVD_GUI This is the GUI object used to control the form\n     * @return A boolean to determine if an error occurred in the function\n     */\n    public boolean CreateDVDFileStructure(GUI DVD_GUI);\n}\n",
    "package": "",
    "classname": "Author",
    "id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Author.java",
    "test_prompt": "// AuthorTest.java\n\n\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.util.NoSuchElementException;\nimport java.util.StringTokenizer;\nimport java.lang.NullPointerException;\nimport java.lang.IllegalArgumentException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Author}.\n* It contains ten unit test cases for the {@link Author#CreateDVDFileStructure(GUI)} method.\n*/\nclass AuthorTest {",
    "method_signature": "CreateDVDFileStructure(GUI)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Capture.java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.StringTokenizer;\nimport javax.swing.JOptionPane;\n\n/**\n * @author Shane Santner\n * The Capture class utilizes dvgrab to capture audio and video\n * data from a dv camcorder.  It captures for the amount of time\n * specified by the user.\n *\n * TODO - Is there a way to get the camcorder time from dvgrab?\n *        This would be a more accurate way of determining when\n *        to stop the camcorder.  Also need to handle input, output\n *        and error streams more appropriatly.\n */\npublic class Capture implements Runnable {\n\n    /**\n     * Used to instantiate a new thread and to perform error checking.\n     *\n     * @return A boolean to determine if an error occurred in the function\n     */\n    public boolean init();\n}\n",
    "package": "",
    "classname": "Capture",
    "id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Capture.java",
    "test_prompt": "// CaptureTest.java\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.StringTokenizer;\nimport javax.swing.JOptionPane;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Capture}.\n* It contains ten unit test cases for the {@link Capture#init()} method.\n*/\nclass CaptureTest {",
    "method_signature": "init()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// GUI.java\n//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileFilter;\nimport java.awt.Color;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport java.util.StringTokenizer;\n\n/**\n * @author Shane Santner\n * This class provides the GUI for dvd-homevideo.\n */\npublic class GUI extends javax.swing.JFrame {\n\n    /**\n     * On startup, checks to ensure that the raw1394 module is loaded.\n     * This module is only needed to capture audio and video from the\n     * dv camcorder.\n     * return   A boolean indicating if the module is present\n     */\n    public boolean checkForModules();\n}\n",
    "package": "",
    "classname": "GUI",
    "id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/GUI_0Test.java",
    "test_prompt": "// GUI_0Test.java\n\n\n//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileFilter;\nimport java.awt.Color;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GUI}.\n* It contains ten unit test cases for the {@link GUI#checkForModules()} method.\n*/\nclass GUI_0Test {",
    "method_signature": "checkForModules()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// GUI.java\n//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileFilter;\nimport java.awt.Color;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport java.util.StringTokenizer;\n\n/**\n * @author Shane Santner\n * This class provides the GUI for dvd-homevideo.\n */\npublic class GUI extends javax.swing.JFrame {\n\n    /**\n     * Displays a message box with the supplied text and yes/no options\n     *\n     * @param message The message to display in the box\n     */\n    public int MessageBox(String message);\n}\n",
    "package": "",
    "classname": "GUI",
    "id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/GUI_1Test.java",
    "test_prompt": "// GUI_1Test.java\n\n\n//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileFilter;\nimport java.awt.Color;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GUI}.\n* It contains ten unit test cases for the {@link GUI#MessageBox(String)} method.\n*/\nclass GUI_1Test {",
    "method_signature": "MessageBox(String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// GUI.java\n//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileFilter;\nimport java.awt.Color;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport java.util.StringTokenizer;\n\n/**\n * @author Shane Santner\n * This class provides the GUI for dvd-homevideo.\n */\npublic class GUI extends javax.swing.JFrame {\n\n    /**\n     * Check dvd-homevideo for runtime errors\n     *\n     * @param fileName This is a log file to parse through, looking for\n     *                      the keyword \"Error\"\n     * @return A boolean indicating if an error was found\n     */\n    public boolean ErrorCheck(String fileName);\n}\n",
    "package": "",
    "classname": "GUI",
    "id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/GUI_2Test.java",
    "test_prompt": "// GUI_2Test.java\n\n\n//import com.sun.corba.se.impl.protocol.giopmsgheaders.Message;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.FileFilter;\nimport java.awt.Color;\nimport javax.swing.JFileChooser;\nimport javax.swing.JOptionPane;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GUI}.\n* It contains ten unit test cases for the {@link GUI#ErrorCheck(String)} method.\n*/\nclass GUI_2Test {",
    "method_signature": "ErrorCheck(String)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// Convert.java\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.lang.StringIndexOutOfBoundsException;\nimport java.util.StringTokenizer;\n\n/**\n * @author Shane Santner\n * This class is used to transcode the video captured\n * from the digital camcorder into mpeg4, the DVD compatible\n * format.  It explicitly calls the transcode command\n * after meticulously preparing the options that can be passed\n * to transcode.\n *\n * TODO - Break mplex out into its own class.\n *        Figure out how to calculate remaining time even if\n *        video was not captured from the camcorder during the\n *        current session.\n *        Need to handle input, output and error streams\n *        more appropriatly.\n */\npublic class Convert implements Runnable {\n\n    /**\n     * Used to instantiate a new thread and to perform error checking.\n     *\n     * @return A boolean to determine if an error occurred in the function\n     */\n    public boolean init();\n}\n",
    "package": "",
    "classname": "Convert",
    "id": "/EvoSuiteBenchmark/original/47_dvd-homevideo/src/main/java/Convert.java",
    "test_prompt": "// ConvertTest.java\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.InputStreamReader;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.lang.StringIndexOutOfBoundsException;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Convert}.\n* It contains ten unit test cases for the {@link Convert#init()} method.\n*/\nclass ConvertTest {",
    "method_signature": "init()",
    "suffix": ""
  }
]