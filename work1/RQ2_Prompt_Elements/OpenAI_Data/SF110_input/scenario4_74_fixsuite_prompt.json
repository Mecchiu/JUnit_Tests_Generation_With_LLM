[
  {
    "numberTests": "ten",
    "original_code": "// FieldInfo.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\n\n/**\n * Represents a Field as defined by the FIX specification.\n *\n * @author jramoyo\n */\npublic class FieldInfo implements FixInfo {\n\n    private int tagNumber;\n\n    private String name;\n\n    private String dataType;\n\n    private String description;\n\n    private String abbreviation;\n\n    private String overrideXmlName;\n\n    private String baseCategory;\n\n    private String baseCategoryXmlName;\n\n    private String unionDataType;\n\n    private String usesEnumFromTag;\n\n    private String comments;\n\n    private int length;\n\n    private boolean isNotRequiredXml;\n\n    private String deprecatingVersion;\n\n    private List\u003cComponentInfo\u003e requiringComponents;\n\n    private TreeMap\u003cString, ValueInfo\u003e validValues;\n\n    /**\n     * Returns the tagNumber\n     *\n     * @return the tagNumber\n     */\n    public int getTagNumber();\n\n    /**\n     * Modifies the tagNumber\n     *\n     * @param tagNumber - the tagNumber to set\n     */\n    public void setTagNumber(int tagNumber);\n\n    /**\n     * Returns the fieldName\n     *\n     * @return the fieldName\n     */\n    public String getName();\n\n    /**\n     * Modifies the fieldName\n     *\n     * @param name - the fieldName to set\n     */\n    public void setName(String name);\n\n    /**\n     * Returns the dataType\n     *\n     * @return the dataType\n     */\n    public String getDataType();\n\n    /**\n     * Modifies the dataType\n     *\n     * @param dataType - the dataType to set\n     */\n    public void setDataType(String dataType);\n\n    /**\n     * Returns the description\n     *\n     * @return the description\n     */\n    public String getDescription();\n\n    /**\n     * Modifies the description\n     *\n     * @param description - the description to set\n     */\n    public void setDescription(String description);\n\n    /**\n     * Returns the comments\n     *\n     * @return the comments\n     */\n    public String getComments();\n\n    /**\n     * Modifies the comments\n     *\n     * @param comments - the comments to set\n     */\n    public void setComments(String comments);\n\n    /**\n     * Returns the abbreviation\n     *\n     * @return the abbreviation\n     */\n    public String getAbbreviation();\n\n    /**\n     * Modifies the abbreviation\n     *\n     * @param abbreviation - the abbreviation to set\n     */\n    public void setAbbreviation(String abbreviation);\n\n    /**\n     * Returns the overrideXmlName\n     *\n     * @return the overrideXmlName\n     */\n    public String getOverrideXmlName();\n\n    /**\n     * Modifies the overrideXmlName\n     *\n     * @param overrideXmlName - the overrideXmlName to set\n     */\n    public void setOverrideXmlName(String overrideXmlName);\n\n    /**\n     * Returns the baseCategory\n     *\n     * @return the baseCategory\n     */\n    public String getBaseCategory();\n\n    /**\n     * Modifies the baseCategory\n     *\n     * @param baseCategory - the baseCategory to set\n     */\n    public void setBaseCategory(String baseCategory);\n\n    /**\n     * Returns the baseCategoryXmlName\n     *\n     * @return the baseCategoryXmlName\n     */\n    public String getBaseCategoryXmlName();\n\n    /**\n     * Modifies the baseCategoryXmlName\n     *\n     * @param baseCategoryXmlName - the baseCategoryXmlName to set\n     */\n    public void setBaseCategoryXmlName(String baseCategoryXmlName);\n\n    /**\n     * Returns the unionDataType\n     *\n     * @return the unionDataType\n     */\n    public String getUnionDataType();\n\n    /**\n     * Modifies the unionDataType\n     *\n     * @param unionDataType - the unionDataType to set\n     */\n    public void setUnionDataType(String unionDataType);\n\n    /**\n     * Returns the usesEnumFromTag\n     *\n     * @return the usesEnumFromTag\n     */\n    public String getUsesEnumFromTag();\n\n    /**\n     * Modifies the usesEnumFromTag\n     *\n     * @param usesEnumFromTag - the usesEnumFromTag to set\n     */\n    public void setUsesEnumFromTag(String usesEnumFromTag);\n\n    /**\n     * Returns the length\n     *\n     * @return the length\n     */\n    public int getLength();\n\n    /**\n     * Modifies the length\n     *\n     * @param length - the length to set\n     */\n    public void setLength(int length);\n\n    /**\n     * Returns the isNotRequiredXml\n     *\n     * @return the isNotRequiredXml\n     */\n    public boolean isNotRequiredXml();\n\n    /**\n     * Modifies the isNotRequiredXml\n     *\n     * @param isNotRequiredXml - the isNotRequiredXml to set\n     */\n    public void setNotRequiredXml(boolean isNotRequiredXml);\n\n    /**\n     * Returns the deprecatingVersion\n     *\n     * @return the deprecatingVersion\n     */\n    public String getDeprecatingVersion();\n\n    /**\n     * Modifies the deprecatingVersion\n     *\n     * @param deprecatingVersion - the deprecatingVersion to set\n     */\n    public void setDeprecatingVersion(String deprecatingVersion);\n\n    /**\n     * Returns the requiringComponents\n     *\n     * @return the requiringComponents\n     */\n    public List\u003cComponentInfo\u003e getRequiringComponents();\n\n    /**\n     * Add a requiringComponent\n     *\n     * @param component - a requiringComponent\n     */\n    public void addRequiringComponent(ComponentInfo component);\n\n    /**\n     * Modifies the requiringComponents\n     *\n     * @param requiringComponents - the requiringComponent to set\n     */\n    protected void setRequiringComponents(List\u003cComponentInfo\u003e requiringComponents);\n\n    /**\n     * Returns whether this field is required in the specified component\n     *\n     * @param component - a component\n     * @return whether this field is required in the specified component\n     */\n    public boolean isRequiredInComponent(ComponentInfo component);\n\n    /**\n     * Returns the validValues\n     *\n     * @return the validValues\n     */\n    public List\u003cValueInfo\u003e getValidValues();\n\n    /**\n     * Adds a value\n     *\n     * @param value - a value\n     */\n    public void addValidValue(ValueInfo value);\n\n    /**\n     * Returns whether a given value is valid\n     *\n     * @param value - a value\n     * @return whether a given value is valid\n     */\n    public boolean isValidValue(String value);\n\n    /**\n     * Modifies the validValues\n     *\n     * @param validValues - the validValues to set\n     */\n    protected void setValidValues(TreeMap\u003cString, ValueInfo\u003e validValues);\n\n    /**\n     * Returns the validValues Map\n     *\n     * @return the validValues Map\n     */\n    protected TreeMap\u003cString, ValueInfo\u003e getValidValuesMap();\n}\n",
    "package": "org.fixsuite.message.info",
    "classname": "FieldInfo",
    "id": "/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/FieldInfo_0Test.java",
    "test_prompt": "// FieldInfo_0Test.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FieldInfo}.\n* It contains ten unit test cases for the {@link FieldInfo#isRequiredInComponent(ComponentInfo)} method.\n*/\nclass FieldInfo_0Test {",
    "method_signature": "isRequiredInComponent(ComponentInfo)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// FieldInfo.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\n\n/**\n * Represents a Field as defined by the FIX specification.\n *\n * @author jramoyo\n */\npublic class FieldInfo implements FixInfo {\n\n    private int tagNumber;\n\n    private String name;\n\n    private String dataType;\n\n    private String description;\n\n    private String abbreviation;\n\n    private String overrideXmlName;\n\n    private String baseCategory;\n\n    private String baseCategoryXmlName;\n\n    private String unionDataType;\n\n    private String usesEnumFromTag;\n\n    private String comments;\n\n    private int length;\n\n    private boolean isNotRequiredXml;\n\n    private String deprecatingVersion;\n\n    private List\u003cComponentInfo\u003e requiringComponents;\n\n    private TreeMap\u003cString, ValueInfo\u003e validValues;\n\n    /**\n     * Returns the tagNumber\n     *\n     * @return the tagNumber\n     */\n    public int getTagNumber();\n\n    /**\n     * Modifies the tagNumber\n     *\n     * @param tagNumber - the tagNumber to set\n     */\n    public void setTagNumber(int tagNumber);\n\n    /**\n     * Returns the fieldName\n     *\n     * @return the fieldName\n     */\n    public String getName();\n\n    /**\n     * Modifies the fieldName\n     *\n     * @param name - the fieldName to set\n     */\n    public void setName(String name);\n\n    /**\n     * Returns the dataType\n     *\n     * @return the dataType\n     */\n    public String getDataType();\n\n    /**\n     * Modifies the dataType\n     *\n     * @param dataType - the dataType to set\n     */\n    public void setDataType(String dataType);\n\n    /**\n     * Returns the description\n     *\n     * @return the description\n     */\n    public String getDescription();\n\n    /**\n     * Modifies the description\n     *\n     * @param description - the description to set\n     */\n    public void setDescription(String description);\n\n    /**\n     * Returns the comments\n     *\n     * @return the comments\n     */\n    public String getComments();\n\n    /**\n     * Modifies the comments\n     *\n     * @param comments - the comments to set\n     */\n    public void setComments(String comments);\n\n    /**\n     * Returns the abbreviation\n     *\n     * @return the abbreviation\n     */\n    public String getAbbreviation();\n\n    /**\n     * Modifies the abbreviation\n     *\n     * @param abbreviation - the abbreviation to set\n     */\n    public void setAbbreviation(String abbreviation);\n\n    /**\n     * Returns the overrideXmlName\n     *\n     * @return the overrideXmlName\n     */\n    public String getOverrideXmlName();\n\n    /**\n     * Modifies the overrideXmlName\n     *\n     * @param overrideXmlName - the overrideXmlName to set\n     */\n    public void setOverrideXmlName(String overrideXmlName);\n\n    /**\n     * Returns the baseCategory\n     *\n     * @return the baseCategory\n     */\n    public String getBaseCategory();\n\n    /**\n     * Modifies the baseCategory\n     *\n     * @param baseCategory - the baseCategory to set\n     */\n    public void setBaseCategory(String baseCategory);\n\n    /**\n     * Returns the baseCategoryXmlName\n     *\n     * @return the baseCategoryXmlName\n     */\n    public String getBaseCategoryXmlName();\n\n    /**\n     * Modifies the baseCategoryXmlName\n     *\n     * @param baseCategoryXmlName - the baseCategoryXmlName to set\n     */\n    public void setBaseCategoryXmlName(String baseCategoryXmlName);\n\n    /**\n     * Returns the unionDataType\n     *\n     * @return the unionDataType\n     */\n    public String getUnionDataType();\n\n    /**\n     * Modifies the unionDataType\n     *\n     * @param unionDataType - the unionDataType to set\n     */\n    public void setUnionDataType(String unionDataType);\n\n    /**\n     * Returns the usesEnumFromTag\n     *\n     * @return the usesEnumFromTag\n     */\n    public String getUsesEnumFromTag();\n\n    /**\n     * Modifies the usesEnumFromTag\n     *\n     * @param usesEnumFromTag - the usesEnumFromTag to set\n     */\n    public void setUsesEnumFromTag(String usesEnumFromTag);\n\n    /**\n     * Returns the length\n     *\n     * @return the length\n     */\n    public int getLength();\n\n    /**\n     * Modifies the length\n     *\n     * @param length - the length to set\n     */\n    public void setLength(int length);\n\n    /**\n     * Returns the isNotRequiredXml\n     *\n     * @return the isNotRequiredXml\n     */\n    public boolean isNotRequiredXml();\n\n    /**\n     * Modifies the isNotRequiredXml\n     *\n     * @param isNotRequiredXml - the isNotRequiredXml to set\n     */\n    public void setNotRequiredXml(boolean isNotRequiredXml);\n\n    /**\n     * Returns the deprecatingVersion\n     *\n     * @return the deprecatingVersion\n     */\n    public String getDeprecatingVersion();\n\n    /**\n     * Modifies the deprecatingVersion\n     *\n     * @param deprecatingVersion - the deprecatingVersion to set\n     */\n    public void setDeprecatingVersion(String deprecatingVersion);\n\n    /**\n     * Returns the requiringComponents\n     *\n     * @return the requiringComponents\n     */\n    public List\u003cComponentInfo\u003e getRequiringComponents();\n\n    /**\n     * Add a requiringComponent\n     *\n     * @param component - a requiringComponent\n     */\n    public void addRequiringComponent(ComponentInfo component);\n\n    /**\n     * Modifies the requiringComponents\n     *\n     * @param requiringComponents - the requiringComponent to set\n     */\n    protected void setRequiringComponents(List\u003cComponentInfo\u003e requiringComponents);\n\n    /**\n     * Returns whether this field is required in the specified component\n     *\n     * @param component - a component\n     * @return whether this field is required in the specified component\n     */\n    public boolean isRequiredInComponent(ComponentInfo component);\n\n    /**\n     * Returns the validValues\n     *\n     * @return the validValues\n     */\n    public List\u003cValueInfo\u003e getValidValues();\n\n    /**\n     * Adds a value\n     *\n     * @param value - a value\n     */\n    public void addValidValue(ValueInfo value);\n\n    /**\n     * Returns whether a given value is valid\n     *\n     * @param value - a value\n     * @return whether a given value is valid\n     */\n    public boolean isValidValue(String value);\n\n    /**\n     * Modifies the validValues\n     *\n     * @param validValues - the validValues to set\n     */\n    protected void setValidValues(TreeMap\u003cString, ValueInfo\u003e validValues);\n\n    /**\n     * Returns the validValues Map\n     *\n     * @return the validValues Map\n     */\n    protected TreeMap\u003cString, ValueInfo\u003e getValidValuesMap();\n}\n",
    "package": "org.fixsuite.message.info",
    "classname": "FieldInfo",
    "id": "/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/FieldInfo_1Test.java",
    "test_prompt": "// FieldInfo_1Test.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FieldInfo}.\n* It contains ten unit test cases for the {@link FieldInfo#isValidValue(String)} method.\n*/\nclass FieldInfo_1Test {",
    "method_signature": "isValidValue(String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// DictionaryInfo.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\n\n/**\n * Represents a FIX version specification. DictionaryInfo acts as a central\n * storage for all items defined in a version.\n *\n * @author jramoyo\n */\npublic class DictionaryInfo {\n\n    private String version;\n\n    private int loadCount;\n\n    // Default collection\n    private TreeMap\u003cString, MessageInfo\u003e messagesByName;\n\n    private TreeMap\u003cInteger, MessageInfo\u003e messagesById;\n\n    // Default collection\n    private TreeMap\u003cInteger, FieldInfo\u003e fieldsByTagNumber;\n\n    private TreeMap\u003cString, FieldInfo\u003e fieldsByName;\n\n    // Default collection\n    private TreeMap\u003cString, ComponentInfo\u003e componentsByName;\n\n    private TreeMap\u003cInteger, ComponentInfo\u003e componentsById;\n\n    /**\n     * Creates a new DictionaryInfo\n     *\n     * @param version - a version\n     */\n    public DictionaryInfo(String version) {\n    }\n\n    /**\n     * Returns the fields\n     *\n     * @return the fields\n     */\n    public List\u003cFieldInfo\u003e getFields();\n\n    /**\n     * Returns a field given a tagNumber\n     *\n     * @param tagNumber - a tagNumber\n     * @return a field given a tagNumber\n     */\n    public FieldInfo getField(int tagNumber);\n\n    /**\n     * Returns a field given a name\n     *\n     * @param name - a name\n     * @return a field given a name\n     */\n    public FieldInfo getField(String name);\n\n    /**\n     * Adds a field\n     *\n     * @param field - a field\n     */\n    public void addField(FieldInfo field);\n\n    /**\n     * Returns the components\n     *\n     * @return the components\n     */\n    public List\u003cComponentInfo\u003e getComponents();\n\n    /**\n     * Returns a component given an id\n     *\n     * @param id - an id\n     * @return a component given an id\n     */\n    public ComponentInfo getComponent(int id);\n\n    /**\n     * Returns a component given a name\n     *\n     * @param name - a name\n     * @return a component given a name\n     */\n    public ComponentInfo getComponent(String name);\n\n    /**\n     * Adds a component\n     *\n     * @param component\n     */\n    public void addComponent(ComponentInfo component);\n\n    /**\n     * Replace the field by a group. This is used by FPL parsers which cannot\n     * tell if a field is a group just from Fields.xml\n     *\n     * @param field - a field\n     * @param group - a group\n     */\n    public void replaceAsGroup(FieldInfo field, GroupInfo group);\n\n    /**\n     * Returns a message given an id\n     *\n     * @param id - an id\n     * @return a message given an id\n     */\n    public MessageInfo getMessage(int id);\n\n    /**\n     * Returns a message given a name\n     *\n     * @param name - a name\n     * @return a message given a name\n     */\n    public MessageInfo getMessage(String name);\n\n    public List\u003cMessageInfo\u003e getMessages();\n\n    /**\n     * Adds a message\n     *\n     * @param message - a message\n     */\n    public void addMessage(MessageInfo message);\n\n    /**\n     * Returns the version\n     *\n     * @return the version\n     */\n    public String getVersion();\n\n    /**\n     * Modifies the version\n     *\n     * @param version - the version to set\n     */\n    public void setVersion(String version);\n\n    /**\n     * Increments the loadCount\n     */\n    public void incrementLoadCount();\n\n    /**\n     * Returns whether the dictionary is loaded\n     *\n     * @return whether the dictionary is loaded\n     */\n    public boolean isLoaded();\n}\n",
    "package": "org.fixsuite.message.info",
    "classname": "DictionaryInfo",
    "id": "/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_0Test.java",
    "test_prompt": "// DictionaryInfo_0Test.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DictionaryInfo}.\n* It contains ten unit test cases for the {@link DictionaryInfo#getField(int)} method.\n*/\nclass DictionaryInfo_0Test {",
    "method_signature": "getField(int)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// DictionaryInfo.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\n\n/**\n * Represents a FIX version specification. DictionaryInfo acts as a central\n * storage for all items defined in a version.\n *\n * @author jramoyo\n */\npublic class DictionaryInfo {\n\n    private String version;\n\n    private int loadCount;\n\n    // Default collection\n    private TreeMap\u003cString, MessageInfo\u003e messagesByName;\n\n    private TreeMap\u003cInteger, MessageInfo\u003e messagesById;\n\n    // Default collection\n    private TreeMap\u003cInteger, FieldInfo\u003e fieldsByTagNumber;\n\n    private TreeMap\u003cString, FieldInfo\u003e fieldsByName;\n\n    // Default collection\n    private TreeMap\u003cString, ComponentInfo\u003e componentsByName;\n\n    private TreeMap\u003cInteger, ComponentInfo\u003e componentsById;\n\n    /**\n     * Creates a new DictionaryInfo\n     *\n     * @param version - a version\n     */\n    public DictionaryInfo(String version) {\n    }\n\n    /**\n     * Returns the fields\n     *\n     * @return the fields\n     */\n    public List\u003cFieldInfo\u003e getFields();\n\n    /**\n     * Returns a field given a tagNumber\n     *\n     * @param tagNumber - a tagNumber\n     * @return a field given a tagNumber\n     */\n    public FieldInfo getField(int tagNumber);\n\n    /**\n     * Returns a field given a name\n     *\n     * @param name - a name\n     * @return a field given a name\n     */\n    public FieldInfo getField(String name);\n\n    /**\n     * Adds a field\n     *\n     * @param field - a field\n     */\n    public void addField(FieldInfo field);\n\n    /**\n     * Returns the components\n     *\n     * @return the components\n     */\n    public List\u003cComponentInfo\u003e getComponents();\n\n    /**\n     * Returns a component given an id\n     *\n     * @param id - an id\n     * @return a component given an id\n     */\n    public ComponentInfo getComponent(int id);\n\n    /**\n     * Returns a component given a name\n     *\n     * @param name - a name\n     * @return a component given a name\n     */\n    public ComponentInfo getComponent(String name);\n\n    /**\n     * Adds a component\n     *\n     * @param component\n     */\n    public void addComponent(ComponentInfo component);\n\n    /**\n     * Replace the field by a group. This is used by FPL parsers which cannot\n     * tell if a field is a group just from Fields.xml\n     *\n     * @param field - a field\n     * @param group - a group\n     */\n    public void replaceAsGroup(FieldInfo field, GroupInfo group);\n\n    /**\n     * Returns a message given an id\n     *\n     * @param id - an id\n     * @return a message given an id\n     */\n    public MessageInfo getMessage(int id);\n\n    /**\n     * Returns a message given a name\n     *\n     * @param name - a name\n     * @return a message given a name\n     */\n    public MessageInfo getMessage(String name);\n\n    public List\u003cMessageInfo\u003e getMessages();\n\n    /**\n     * Adds a message\n     *\n     * @param message - a message\n     */\n    public void addMessage(MessageInfo message);\n\n    /**\n     * Returns the version\n     *\n     * @return the version\n     */\n    public String getVersion();\n\n    /**\n     * Modifies the version\n     *\n     * @param version - the version to set\n     */\n    public void setVersion(String version);\n\n    /**\n     * Increments the loadCount\n     */\n    public void incrementLoadCount();\n\n    /**\n     * Returns whether the dictionary is loaded\n     *\n     * @return whether the dictionary is loaded\n     */\n    public boolean isLoaded();\n}\n",
    "package": "org.fixsuite.message.info",
    "classname": "DictionaryInfo",
    "id": "/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_1Test.java",
    "test_prompt": "// DictionaryInfo_1Test.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DictionaryInfo}.\n* It contains ten unit test cases for the {@link DictionaryInfo#getField(String)} method.\n*/\nclass DictionaryInfo_1Test {",
    "method_signature": "getField(String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// DictionaryInfo.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\n\n/**\n * Represents a FIX version specification. DictionaryInfo acts as a central\n * storage for all items defined in a version.\n *\n * @author jramoyo\n */\npublic class DictionaryInfo {\n\n    private String version;\n\n    private int loadCount;\n\n    // Default collection\n    private TreeMap\u003cString, MessageInfo\u003e messagesByName;\n\n    private TreeMap\u003cInteger, MessageInfo\u003e messagesById;\n\n    // Default collection\n    private TreeMap\u003cInteger, FieldInfo\u003e fieldsByTagNumber;\n\n    private TreeMap\u003cString, FieldInfo\u003e fieldsByName;\n\n    // Default collection\n    private TreeMap\u003cString, ComponentInfo\u003e componentsByName;\n\n    private TreeMap\u003cInteger, ComponentInfo\u003e componentsById;\n\n    /**\n     * Creates a new DictionaryInfo\n     *\n     * @param version - a version\n     */\n    public DictionaryInfo(String version) {\n    }\n\n    /**\n     * Returns the fields\n     *\n     * @return the fields\n     */\n    public List\u003cFieldInfo\u003e getFields();\n\n    /**\n     * Returns a field given a tagNumber\n     *\n     * @param tagNumber - a tagNumber\n     * @return a field given a tagNumber\n     */\n    public FieldInfo getField(int tagNumber);\n\n    /**\n     * Returns a field given a name\n     *\n     * @param name - a name\n     * @return a field given a name\n     */\n    public FieldInfo getField(String name);\n\n    /**\n     * Adds a field\n     *\n     * @param field - a field\n     */\n    public void addField(FieldInfo field);\n\n    /**\n     * Returns the components\n     *\n     * @return the components\n     */\n    public List\u003cComponentInfo\u003e getComponents();\n\n    /**\n     * Returns a component given an id\n     *\n     * @param id - an id\n     * @return a component given an id\n     */\n    public ComponentInfo getComponent(int id);\n\n    /**\n     * Returns a component given a name\n     *\n     * @param name - a name\n     * @return a component given a name\n     */\n    public ComponentInfo getComponent(String name);\n\n    /**\n     * Adds a component\n     *\n     * @param component\n     */\n    public void addComponent(ComponentInfo component);\n\n    /**\n     * Replace the field by a group. This is used by FPL parsers which cannot\n     * tell if a field is a group just from Fields.xml\n     *\n     * @param field - a field\n     * @param group - a group\n     */\n    public void replaceAsGroup(FieldInfo field, GroupInfo group);\n\n    /**\n     * Returns a message given an id\n     *\n     * @param id - an id\n     * @return a message given an id\n     */\n    public MessageInfo getMessage(int id);\n\n    /**\n     * Returns a message given a name\n     *\n     * @param name - a name\n     * @return a message given a name\n     */\n    public MessageInfo getMessage(String name);\n\n    public List\u003cMessageInfo\u003e getMessages();\n\n    /**\n     * Adds a message\n     *\n     * @param message - a message\n     */\n    public void addMessage(MessageInfo message);\n\n    /**\n     * Returns the version\n     *\n     * @return the version\n     */\n    public String getVersion();\n\n    /**\n     * Modifies the version\n     *\n     * @param version - the version to set\n     */\n    public void setVersion(String version);\n\n    /**\n     * Increments the loadCount\n     */\n    public void incrementLoadCount();\n\n    /**\n     * Returns whether the dictionary is loaded\n     *\n     * @return whether the dictionary is loaded\n     */\n    public boolean isLoaded();\n}\n",
    "package": "org.fixsuite.message.info",
    "classname": "DictionaryInfo",
    "id": "/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_2Test.java",
    "test_prompt": "// DictionaryInfo_2Test.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DictionaryInfo}.\n* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(int)} method.\n*/\nclass DictionaryInfo_2Test {",
    "method_signature": "getComponent(int)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// DictionaryInfo.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\n\n/**\n * Represents a FIX version specification. DictionaryInfo acts as a central\n * storage for all items defined in a version.\n *\n * @author jramoyo\n */\npublic class DictionaryInfo {\n\n    private String version;\n\n    private int loadCount;\n\n    // Default collection\n    private TreeMap\u003cString, MessageInfo\u003e messagesByName;\n\n    private TreeMap\u003cInteger, MessageInfo\u003e messagesById;\n\n    // Default collection\n    private TreeMap\u003cInteger, FieldInfo\u003e fieldsByTagNumber;\n\n    private TreeMap\u003cString, FieldInfo\u003e fieldsByName;\n\n    // Default collection\n    private TreeMap\u003cString, ComponentInfo\u003e componentsByName;\n\n    private TreeMap\u003cInteger, ComponentInfo\u003e componentsById;\n\n    /**\n     * Creates a new DictionaryInfo\n     *\n     * @param version - a version\n     */\n    public DictionaryInfo(String version) {\n    }\n\n    /**\n     * Returns the fields\n     *\n     * @return the fields\n     */\n    public List\u003cFieldInfo\u003e getFields();\n\n    /**\n     * Returns a field given a tagNumber\n     *\n     * @param tagNumber - a tagNumber\n     * @return a field given a tagNumber\n     */\n    public FieldInfo getField(int tagNumber);\n\n    /**\n     * Returns a field given a name\n     *\n     * @param name - a name\n     * @return a field given a name\n     */\n    public FieldInfo getField(String name);\n\n    /**\n     * Adds a field\n     *\n     * @param field - a field\n     */\n    public void addField(FieldInfo field);\n\n    /**\n     * Returns the components\n     *\n     * @return the components\n     */\n    public List\u003cComponentInfo\u003e getComponents();\n\n    /**\n     * Returns a component given an id\n     *\n     * @param id - an id\n     * @return a component given an id\n     */\n    public ComponentInfo getComponent(int id);\n\n    /**\n     * Returns a component given a name\n     *\n     * @param name - a name\n     * @return a component given a name\n     */\n    public ComponentInfo getComponent(String name);\n\n    /**\n     * Adds a component\n     *\n     * @param component\n     */\n    public void addComponent(ComponentInfo component);\n\n    /**\n     * Replace the field by a group. This is used by FPL parsers which cannot\n     * tell if a field is a group just from Fields.xml\n     *\n     * @param field - a field\n     * @param group - a group\n     */\n    public void replaceAsGroup(FieldInfo field, GroupInfo group);\n\n    /**\n     * Returns a message given an id\n     *\n     * @param id - an id\n     * @return a message given an id\n     */\n    public MessageInfo getMessage(int id);\n\n    /**\n     * Returns a message given a name\n     *\n     * @param name - a name\n     * @return a message given a name\n     */\n    public MessageInfo getMessage(String name);\n\n    public List\u003cMessageInfo\u003e getMessages();\n\n    /**\n     * Adds a message\n     *\n     * @param message - a message\n     */\n    public void addMessage(MessageInfo message);\n\n    /**\n     * Returns the version\n     *\n     * @return the version\n     */\n    public String getVersion();\n\n    /**\n     * Modifies the version\n     *\n     * @param version - the version to set\n     */\n    public void setVersion(String version);\n\n    /**\n     * Increments the loadCount\n     */\n    public void incrementLoadCount();\n\n    /**\n     * Returns whether the dictionary is loaded\n     *\n     * @return whether the dictionary is loaded\n     */\n    public boolean isLoaded();\n}\n",
    "package": "org.fixsuite.message.info",
    "classname": "DictionaryInfo",
    "id": "/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_3Test.java",
    "test_prompt": "// DictionaryInfo_3Test.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DictionaryInfo}.\n* It contains ten unit test cases for the {@link DictionaryInfo#getComponent(String)} method.\n*/\nclass DictionaryInfo_3Test {",
    "method_signature": "getComponent(String)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// DictionaryInfo.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\n\n/**\n * Represents a FIX version specification. DictionaryInfo acts as a central\n * storage for all items defined in a version.\n *\n * @author jramoyo\n */\npublic class DictionaryInfo {\n\n    private String version;\n\n    private int loadCount;\n\n    // Default collection\n    private TreeMap\u003cString, MessageInfo\u003e messagesByName;\n\n    private TreeMap\u003cInteger, MessageInfo\u003e messagesById;\n\n    // Default collection\n    private TreeMap\u003cInteger, FieldInfo\u003e fieldsByTagNumber;\n\n    private TreeMap\u003cString, FieldInfo\u003e fieldsByName;\n\n    // Default collection\n    private TreeMap\u003cString, ComponentInfo\u003e componentsByName;\n\n    private TreeMap\u003cInteger, ComponentInfo\u003e componentsById;\n\n    /**\n     * Creates a new DictionaryInfo\n     *\n     * @param version - a version\n     */\n    public DictionaryInfo(String version) {\n    }\n\n    /**\n     * Returns the fields\n     *\n     * @return the fields\n     */\n    public List\u003cFieldInfo\u003e getFields();\n\n    /**\n     * Returns a field given a tagNumber\n     *\n     * @param tagNumber - a tagNumber\n     * @return a field given a tagNumber\n     */\n    public FieldInfo getField(int tagNumber);\n\n    /**\n     * Returns a field given a name\n     *\n     * @param name - a name\n     * @return a field given a name\n     */\n    public FieldInfo getField(String name);\n\n    /**\n     * Adds a field\n     *\n     * @param field - a field\n     */\n    public void addField(FieldInfo field);\n\n    /**\n     * Returns the components\n     *\n     * @return the components\n     */\n    public List\u003cComponentInfo\u003e getComponents();\n\n    /**\n     * Returns a component given an id\n     *\n     * @param id - an id\n     * @return a component given an id\n     */\n    public ComponentInfo getComponent(int id);\n\n    /**\n     * Returns a component given a name\n     *\n     * @param name - a name\n     * @return a component given a name\n     */\n    public ComponentInfo getComponent(String name);\n\n    /**\n     * Adds a component\n     *\n     * @param component\n     */\n    public void addComponent(ComponentInfo component);\n\n    /**\n     * Replace the field by a group. This is used by FPL parsers which cannot\n     * tell if a field is a group just from Fields.xml\n     *\n     * @param field - a field\n     * @param group - a group\n     */\n    public void replaceAsGroup(FieldInfo field, GroupInfo group);\n\n    /**\n     * Returns a message given an id\n     *\n     * @param id - an id\n     * @return a message given an id\n     */\n    public MessageInfo getMessage(int id);\n\n    /**\n     * Returns a message given a name\n     *\n     * @param name - a name\n     * @return a message given a name\n     */\n    public MessageInfo getMessage(String name);\n\n    public List\u003cMessageInfo\u003e getMessages();\n\n    /**\n     * Adds a message\n     *\n     * @param message - a message\n     */\n    public void addMessage(MessageInfo message);\n\n    /**\n     * Returns the version\n     *\n     * @return the version\n     */\n    public String getVersion();\n\n    /**\n     * Modifies the version\n     *\n     * @param version - the version to set\n     */\n    public void setVersion(String version);\n\n    /**\n     * Increments the loadCount\n     */\n    public void incrementLoadCount();\n\n    /**\n     * Returns whether the dictionary is loaded\n     *\n     * @return whether the dictionary is loaded\n     */\n    public boolean isLoaded();\n}\n",
    "package": "org.fixsuite.message.info",
    "classname": "DictionaryInfo",
    "id": "/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_4Test.java",
    "test_prompt": "// DictionaryInfo_4Test.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DictionaryInfo}.\n* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(int)} method.\n*/\nclass DictionaryInfo_4Test {",
    "method_signature": "getMessage(int)",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// DictionaryInfo.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\n\n/**\n * Represents a FIX version specification. DictionaryInfo acts as a central\n * storage for all items defined in a version.\n *\n * @author jramoyo\n */\npublic class DictionaryInfo {\n\n    private String version;\n\n    private int loadCount;\n\n    // Default collection\n    private TreeMap\u003cString, MessageInfo\u003e messagesByName;\n\n    private TreeMap\u003cInteger, MessageInfo\u003e messagesById;\n\n    // Default collection\n    private TreeMap\u003cInteger, FieldInfo\u003e fieldsByTagNumber;\n\n    private TreeMap\u003cString, FieldInfo\u003e fieldsByName;\n\n    // Default collection\n    private TreeMap\u003cString, ComponentInfo\u003e componentsByName;\n\n    private TreeMap\u003cInteger, ComponentInfo\u003e componentsById;\n\n    /**\n     * Creates a new DictionaryInfo\n     *\n     * @param version - a version\n     */\n    public DictionaryInfo(String version) {\n    }\n\n    /**\n     * Returns the fields\n     *\n     * @return the fields\n     */\n    public List\u003cFieldInfo\u003e getFields();\n\n    /**\n     * Returns a field given a tagNumber\n     *\n     * @param tagNumber - a tagNumber\n     * @return a field given a tagNumber\n     */\n    public FieldInfo getField(int tagNumber);\n\n    /**\n     * Returns a field given a name\n     *\n     * @param name - a name\n     * @return a field given a name\n     */\n    public FieldInfo getField(String name);\n\n    /**\n     * Adds a field\n     *\n     * @param field - a field\n     */\n    public void addField(FieldInfo field);\n\n    /**\n     * Returns the components\n     *\n     * @return the components\n     */\n    public List\u003cComponentInfo\u003e getComponents();\n\n    /**\n     * Returns a component given an id\n     *\n     * @param id - an id\n     * @return a component given an id\n     */\n    public ComponentInfo getComponent(int id);\n\n    /**\n     * Returns a component given a name\n     *\n     * @param name - a name\n     * @return a component given a name\n     */\n    public ComponentInfo getComponent(String name);\n\n    /**\n     * Adds a component\n     *\n     * @param component\n     */\n    public void addComponent(ComponentInfo component);\n\n    /**\n     * Replace the field by a group. This is used by FPL parsers which cannot\n     * tell if a field is a group just from Fields.xml\n     *\n     * @param field - a field\n     * @param group - a group\n     */\n    public void replaceAsGroup(FieldInfo field, GroupInfo group);\n\n    /**\n     * Returns a message given an id\n     *\n     * @param id - an id\n     * @return a message given an id\n     */\n    public MessageInfo getMessage(int id);\n\n    /**\n     * Returns a message given a name\n     *\n     * @param name - a name\n     * @return a message given a name\n     */\n    public MessageInfo getMessage(String name);\n\n    public List\u003cMessageInfo\u003e getMessages();\n\n    /**\n     * Adds a message\n     *\n     * @param message - a message\n     */\n    public void addMessage(MessageInfo message);\n\n    /**\n     * Returns the version\n     *\n     * @return the version\n     */\n    public String getVersion();\n\n    /**\n     * Modifies the version\n     *\n     * @param version - the version to set\n     */\n    public void setVersion(String version);\n\n    /**\n     * Increments the loadCount\n     */\n    public void incrementLoadCount();\n\n    /**\n     * Returns whether the dictionary is loaded\n     *\n     * @return whether the dictionary is loaded\n     */\n    public boolean isLoaded();\n}\n",
    "package": "org.fixsuite.message.info",
    "classname": "DictionaryInfo",
    "id": "/EvoSuiteBenchmark/original/74_fixsuite/src/main/java/org/fixsuite/message/info/DictionaryInfo_5Test.java",
    "test_prompt": "// DictionaryInfo_5Test.java\npackage org.fixsuite.message.info;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DictionaryInfo}.\n* It contains ten unit test cases for the {@link DictionaryInfo#getMessage(String)} method.\n*/\nclass DictionaryInfo_5Test {",
    "method_signature": "getMessage(String)",
    "suffix": "5"
  }
]