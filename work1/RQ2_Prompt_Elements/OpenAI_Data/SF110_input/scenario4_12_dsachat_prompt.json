[
  {
    "numberTests": "ten",
    "original_code": "// InternalGmHeroFrame.java\npackage dsachat.gm.gui;\n\nimport java.awt.Dimension;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.util.Vector;\nimport javax.swing.ButtonGroup;\nimport javax.swing.JButton;\nimport javax.swing.JComboBox;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JRadioButton;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSpinner;\nimport javax.swing.JTree;\nimport javax.swing.SpinnerModel;\nimport javax.swing.SpinnerNumberModel;\nimport javax.swing.event.TreeSelectionEvent;\nimport javax.swing.event.TreeSelectionListener;\nimport javax.swing.tree.TreePath;\nimport javax.swing.tree.TreeSelectionModel;\nimport dsachat.share.hero.Hero;\nimport dsachat.share.hero.Weapon;\n\n/**\n * this displays the heros or the enemies\n * it can send challenges or challenge requests.\n *\n * @author bernshausen\n */\npublic class InternalGmHeroFrame extends JInternalFrame implements TreeSelectionListener {\n\n    /**\n     */\n    private static final long serialVersionUID \u003d -8647088721012280920L;\n\n    private GmFrame parent;\n\n    private JTree tree;\n\n    private JButton btnExec;\n\n    private JSpinner spnMod;\n\n    private MultiHeroTreeModel model;\n\n    private JComboBox cmbUsers;\n\n    private JRadioButton radAttack;\n\n    private JRadioButton radDefense;\n\n    private String frameName;\n\n    /**\n     * set up a new window\n     * @param parent the parent component and action listener\n     * @param heros the data to display in tree\n     * @param name the name and caption of this frame\n     */\n    public InternalGmHeroFrame(GmFrame parent, Vector\u003cHero\u003e heros, String name) {\n    }\n\n    /**\n     * create the components that can be viewed and used\n     */\n    private void createGUI();\n\n    /**\n     * get the selected path from the tree\n     * @return the selected tree path\n     */\n    public TreePath getSelectedPath();\n\n    /**\n     * get the name of the receiver for a challenge request or the\n     * result of a challenge\n     * @return the receiver\n     */\n    public String getReceiver();\n\n    /**\n     * get the difficulty for the challenge\n     * @return the difficulty\n     */\n    public int getMod();\n\n    /**\n     * enable the execution button\n     */\n    public void enableButton();\n\n    /**\n     * update the combobox for sending data to\n     * when a user connects or disconnects\n     * @param userlist\n     */\n    public void updateUsers(String[] userlist);\n\n    /**\n     * the game master should not use silent mode.\n     * He has to know all results\n     * @return false\n     */\n    public boolean silent();\n\n    public void valueChanged(TreeSelectionEvent e);\n\n    /**\n     * Update the view of this tree\n     * @param h the new data\n     */\n    public void updateHero(Vector\u003cHero\u003e h);\n\n    /**\n     * get the frame name (Heros|Enemies)\n     * @return the type of the loaded heros\n     */\n    public String getFrameName();\n\n    /**\n     * return if this challenge is a attack or defense\n     * @return true if it is an attack\n     */\n    public boolean isAttack();\n\n    /**\n     * get the data of tree\n     * @return the heros stored in the tree\n     */\n    public Vector\u003cHero\u003e getData();\n}\n",
    "package": "dsachat.gm.gui",
    "classname": "InternalGmHeroFrame",
    "id": "/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/gm/gui/InternalGmHeroFrame.java",
    "test_prompt": "// InternalGmHeroFrameTest.java\npackage dsachat.gm.gui;\n\nimport java.awt.Dimension;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\nimport java.util.Vector;\nimport javax.swing.ButtonGroup;\nimport javax.swing.JButton;\nimport javax.swing.JComboBox;\nimport javax.swing.JInternalFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JRadioButton;\nimport javax.swing.JScrollPane;\nimport javax.swing.JSpinner;\nimport javax.swing.JTree;\nimport javax.swing.SpinnerModel;\nimport javax.swing.SpinnerNumberModel;\nimport javax.swing.event.TreeSelectionEvent;\nimport javax.swing.event.TreeSelectionListener;\nimport javax.swing.tree.TreePath;\nimport javax.swing.tree.TreeSelectionModel;\nimport dsachat.share.hero.Hero;\nimport dsachat.share.hero.Weapon;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link InternalGmHeroFrame}.\n* It contains ten unit test cases for the {@link InternalGmHeroFrame#silent()} method.\n*/\nclass InternalGmHeroFrameTest {",
    "method_signature": "silent()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Challenge.java\npackage dsachat.share;\n\nimport java.io.Serializable;\nimport java.util.Vector;\nimport dsachat.share.hero.Hero;\nimport dsachat.share.hero.Talent;\nimport dsachat.share.hero.Weapon;\n\n/**\n * This class represents a challenge.\u003cbr\u003e\n * It is created by a client and sent to the server which executes the internal task.\n * \u003cbr\u003e\n * A challenge can be a talent, spell, attribute or weapon.\n *\n * @author bernshausen\n */\npublic class Challenge implements Serializable {\n\n    private static final long serialVersionUID \u003d 6777899032409172338L;\n\n    private Talent t \u003d null;\n\n    private int attrib1;\n\n    private int attrib2;\n\n    private int attrib3;\n\n    private int mod;\n\n    private String to;\n\n    private boolean silent;\n\n    private String attrib \u003d null;\n\n    private int attrValue;\n\n    private Weapon w \u003d null;\n\n    private boolean attack \u003d false;\n\n    private int dmgkk;\n\n    /**\n     * generate new challenge for spells and talents\n     * @param tal the talents or spells name\n     * @param modification difficulty\n     * @param h the hero to get the parameters\n     * @param silent response to sender?\n     * @param response the receiver of the results\n     */\n    public Challenge(String tal, int modification, Hero h, boolean silent, String response) {\n    }\n\n    /**\n     * create new attribute challenge\n     * @param attrShortcut the shortcut for the attribute\n     * @param h the hero to get the value\n     * @param modification the difficulty\n     * @param silent response to sender?\n     * @param response the receiver\n     */\n    public Challenge(String attrShortcut, Hero h, int modification, boolean silent, String response) {\n    }\n\n    /**\n     * create a new challenge for a fight\n     * @param w the weapon\n     * @param attack is attack? else defense\n     * @param h the hero\n     * @param modification difficulty\n     * @param silent response to sender?\n     * @param response the receiver\n     */\n    public Challenge(Weapon w, boolean attack, Hero h, int modification, boolean silent, String response) {\n    }\n\n    /**\n     * get the named talent from hero\n     * @param tal the name\n     * @param h the hero\n     * @return the talent (or spell)\n     */\n    private Talent getTalent(String tal, Hero h);\n\n    /**\n     * Set the attributes for a talent (spell) challenge\n     * @param h the hero to get the values from\n     */\n    private void getAttrib(Hero h);\n\n    /**\n     * return the value of the attribute\n     * @param h the hero\n     * @param attr the shortcut of the attribute\n     * @return the attributes value\n     */\n    private int getAttribFromHero(Hero h, String attr);\n\n    /**\n     * execute this challenge\n     * differ between talents, attributes or fight\n     * @return the result as string\n     */\n    public String roll();\n\n    /**\n     * roll the attack or defense with the given weapon\n     * @return the results as string\n     */\n    private String rollFight();\n\n    /**\n     * execute talent challenge\n     * @return results as string\n     */\n    private String rollTalent();\n\n    /**\n     * execute attribute challenge\n     * @return result as string\n     */\n    private String rollAttr();\n\n    /**\n     * represents this challenge\n     */\n    public String toString();\n\n    /**\n     * roll a dice with variable sides\n     * @param sides the sides this dice should have\n     * @return a random number n between 1\u003c\u003dn\u003c\u003dsides\n     */\n    public static int dice(int sides);\n\n    /**\n     * return the receiver of the results\n     * @return the receiver\n     */\n    public String getTo();\n\n    /**\n     * return the silent mode\n     * @return the silent value\n     */\n    public boolean isSilent();\n}\n",
    "package": "dsachat.share",
    "classname": "Challenge",
    "id": "/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/share/Challenge_0Test.java",
    "test_prompt": "// Challenge_0Test.java\npackage dsachat.share;\n\nimport java.io.Serializable;\nimport java.util.Vector;\nimport dsachat.share.hero.Hero;\nimport dsachat.share.hero.Talent;\nimport dsachat.share.hero.Weapon;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Challenge}.\n* It contains ten unit test cases for the {@link Challenge#roll()} method.\n*/\nclass Challenge_0Test {",
    "method_signature": "roll()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Challenge.java\npackage dsachat.share;\n\nimport java.io.Serializable;\nimport java.util.Vector;\nimport dsachat.share.hero.Hero;\nimport dsachat.share.hero.Talent;\nimport dsachat.share.hero.Weapon;\n\n/**\n * This class represents a challenge.\u003cbr\u003e\n * It is created by a client and sent to the server which executes the internal task.\n * \u003cbr\u003e\n * A challenge can be a talent, spell, attribute or weapon.\n *\n * @author bernshausen\n */\npublic class Challenge implements Serializable {\n\n    private static final long serialVersionUID \u003d 6777899032409172338L;\n\n    private Talent t \u003d null;\n\n    private int attrib1;\n\n    private int attrib2;\n\n    private int attrib3;\n\n    private int mod;\n\n    private String to;\n\n    private boolean silent;\n\n    private String attrib \u003d null;\n\n    private int attrValue;\n\n    private Weapon w \u003d null;\n\n    private boolean attack \u003d false;\n\n    private int dmgkk;\n\n    /**\n     * generate new challenge for spells and talents\n     * @param tal the talents or spells name\n     * @param modification difficulty\n     * @param h the hero to get the parameters\n     * @param silent response to sender?\n     * @param response the receiver of the results\n     */\n    public Challenge(String tal, int modification, Hero h, boolean silent, String response) {\n    }\n\n    /**\n     * create new attribute challenge\n     * @param attrShortcut the shortcut for the attribute\n     * @param h the hero to get the value\n     * @param modification the difficulty\n     * @param silent response to sender?\n     * @param response the receiver\n     */\n    public Challenge(String attrShortcut, Hero h, int modification, boolean silent, String response) {\n    }\n\n    /**\n     * create a new challenge for a fight\n     * @param w the weapon\n     * @param attack is attack? else defense\n     * @param h the hero\n     * @param modification difficulty\n     * @param silent response to sender?\n     * @param response the receiver\n     */\n    public Challenge(Weapon w, boolean attack, Hero h, int modification, boolean silent, String response) {\n    }\n\n    /**\n     * get the named talent from hero\n     * @param tal the name\n     * @param h the hero\n     * @return the talent (or spell)\n     */\n    private Talent getTalent(String tal, Hero h);\n\n    /**\n     * Set the attributes for a talent (spell) challenge\n     * @param h the hero to get the values from\n     */\n    private void getAttrib(Hero h);\n\n    /**\n     * return the value of the attribute\n     * @param h the hero\n     * @param attr the shortcut of the attribute\n     * @return the attributes value\n     */\n    private int getAttribFromHero(Hero h, String attr);\n\n    /**\n     * execute this challenge\n     * differ between talents, attributes or fight\n     * @return the result as string\n     */\n    public String roll();\n\n    /**\n     * roll the attack or defense with the given weapon\n     * @return the results as string\n     */\n    private String rollFight();\n\n    /**\n     * execute talent challenge\n     * @return results as string\n     */\n    private String rollTalent();\n\n    /**\n     * execute attribute challenge\n     * @return result as string\n     */\n    private String rollAttr();\n\n    /**\n     * represents this challenge\n     */\n    public String toString();\n\n    /**\n     * roll a dice with variable sides\n     * @param sides the sides this dice should have\n     * @return a random number n between 1\u003c\u003dn\u003c\u003dsides\n     */\n    public static int dice(int sides);\n\n    /**\n     * return the receiver of the results\n     * @return the receiver\n     */\n    public String getTo();\n\n    /**\n     * return the silent mode\n     * @return the silent value\n     */\n    public boolean isSilent();\n}\n",
    "package": "dsachat.share",
    "classname": "Challenge",
    "id": "/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/share/Challenge_1Test.java",
    "test_prompt": "// Challenge_1Test.java\npackage dsachat.share;\n\nimport java.io.Serializable;\nimport java.util.Vector;\nimport dsachat.share.hero.Hero;\nimport dsachat.share.hero.Talent;\nimport dsachat.share.hero.Weapon;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Challenge}.\n* It contains ten unit test cases for the {@link Challenge#dice(int)} method.\n*/\nclass Challenge_1Test {",
    "method_signature": "dice(int)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// Hero.java\npackage dsachat.share.hero;\n\nimport java.io.Serializable;\nimport java.util.Iterator;\nimport java.util.Vector;\nimport org.dom4j.Document;\nimport org.dom4j.Element;\n\n/**\n * a Hero describes all attributes, talents, spells and weapons of an hero.\n *\n * @author bernshausen\n */\npublic class Hero implements Serializable {\n\n    /**\n     */\n    private static final long serialVersionUID \u003d 4235381890809856112L;\n\n    private Vector\u003cAttribute\u003e attributes;\n\n    Vector\u003cTalent\u003e talents;\n\n    Vector\u003cFightValue\u003e fightvalues;\n\n    Vector\u003cSpecial\u003e specials;\n\n    private String name;\n\n    private int INI;\n\n    private int currINI \u003d 0;\n\n    private int currLEP \u003d 0;\n\n    private int currAUP \u003d 0;\n\n    private int currASP \u003d 0;\n\n    private int currKAP \u003d 0;\n\n    private Weapon selectedWeapon \u003d null;\n\n    //\tprivate Armor head;\n    private boolean priest \u003d false;\n\n    private boolean magican \u003d false;\n\n    /**\n     * create a new hero from a xml file\n     * @param xml the file this hero was stored by helden-software\n     */\n    public Hero(Document xml) {\n    }\n\n    /**\n     * iteration over the document starting at root-element\n     * get all necessary data from the file\n     */\n    @SuppressWarnings(\"unchecked\")\n    private void iter(Element e);\n\n    /**\n     * search the fight value for a given name\n     * @param parentName the name of the fight value\n     * @return the object\n     */\n    private FightValue searchFV(String parentName);\n\n    public String attack(String special, int mod);\n\n    public String defense(String special, int mod);\n\n    public String cast(String spell, int mod);\n\n    public String use(String talent, int mod);\n\n    /**\n     * a hero is only described by his name\n     */\n    public String toString();\n\n    /**\n     * return the name of this hero\n     * @return the name\n     */\n    public String getName();\n\n    /**\n     * get the initiative\n     * @return\n     */\n    public int getINI();\n\n    /**\n     * get all talents of this hero\n     * @return the talents\n     */\n    public Vector\u003cTalent\u003e getTalents();\n\n    /**\n     * return the value of the attribute described by the shortcut\n     * @param shortcut the shortcut of the attribute\n     * @return the value\n     */\n    public int getAttrValue(String shortcut);\n\n    /**\n     * get all attributes of this hero\n     * @return the attributes\n     */\n    public Vector\u003cAttribute\u003e getAttributes();\n\n    /**\n     * get all fight values of this hero\n     * @return the fight values\n     */\n    public Vector\u003cFightValue\u003e getFightvalues();\n\n    public Vector\u003cSpecial\u003e getSpecials();\n\n    public int getCurrINI();\n\n    public int getCurrLEP();\n\n    public int getCurrAUP();\n\n    public int getCurrASP();\n\n    public int getCurrKAP();\n\n    public Weapon getSelectedWeapon();\n\n    public void setSelectedWeapon(Weapon selectedWeapon);\n\n    public void setCurrINI(int currINI);\n\n    public boolean isPriest();\n\n    public boolean isMagican();\n}\n",
    "package": "dsachat.share.hero",
    "classname": "Hero",
    "id": "/EvoSuiteBenchmark/original/12_dsachat/src/main/java/dsachat/share/hero/Hero.java",
    "test_prompt": "// HeroTest.java\npackage dsachat.share.hero;\n\nimport java.io.Serializable;\nimport java.util.Iterator;\nimport java.util.Vector;\nimport org.dom4j.Document;\nimport org.dom4j.Element;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Hero}.\n* It contains ten unit test cases for the {@link Hero#getAttrValue(String)} method.\n*/\nclass HeroTest {",
    "method_signature": "getAttrValue(String)",
    "suffix": ""
  }
]