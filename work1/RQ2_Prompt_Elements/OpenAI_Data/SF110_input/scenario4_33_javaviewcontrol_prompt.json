[
  {
    "numberTests": "ten",
    "original_code": "// SimpleCharStream.java\n/* JavaCCOptions:STATIC\u003dfalse,SUPPORT_CLASS_VISIBILITY_PUBLIC\u003dtrue */\npackage com.pmdesigns.jvc.tools;\n\npublic class SimpleCharStream {\n\n    /**\n     * Whether parser is static.\n     */\n    public static final boolean staticFlag \u003d false;\n\n    int bufsize;\n\n    int available;\n\n    int tokenBegin;\n\n    /**\n     * Position in buffer.\n     */\n    public int bufpos \u003d -1;\n\n    protected int[] bufline;\n\n    protected int[] bufcolumn;\n\n    protected int column \u003d 0;\n\n    protected int line \u003d 1;\n\n    protected boolean prevCharIsCR \u003d false;\n\n    protected boolean prevCharIsLF \u003d false;\n\n    protected java.io.Reader inputStream;\n\n    protected char[] buffer;\n\n    protected int maxNextCharInd \u003d 0;\n\n    protected int inBuf \u003d 0;\n\n    protected int tabSize \u003d 8;\n\n    protected void setTabSize(int i);\n\n    protected int getTabSize(int i);\n\n    protected void ExpandBuff(boolean wrapAround);\n\n    protected void FillBuff() throws java.io.IOException;\n\n    /**\n     * Start.\n     */\n    public char BeginToken() throws java.io.IOException;\n\n    protected void UpdateLineColumn(char c);\n\n    /**\n     * Read a character.\n     */\n    public char readChar() throws java.io.IOException;\n\n    public int getColumn();\n\n    public int getLine();\n\n    /**\n     * Get token end column number.\n     */\n    public int getEndColumn();\n\n    /**\n     * Get token end line number.\n     */\n    public int getEndLine();\n\n    /**\n     * Get token beginning column number.\n     */\n    public int getBeginColumn();\n\n    /**\n     * Get token beginning line number.\n     */\n    public int getBeginLine();\n\n    /**\n     * Backup a number of characters.\n     */\n    public void backup(int amount);\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.Reader dstream, int startline, int startcolumn) {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.Reader dstream) {\n    }\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize);\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.Reader dstream, int startline, int startcolumn);\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.Reader dstream);\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn) {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.InputStream dstream) {\n    }\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException;\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize);\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException;\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.InputStream dstream);\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException;\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.InputStream dstream, int startline, int startcolumn);\n\n    /**\n     * Get token literal value.\n     */\n    public String GetImage();\n\n    /**\n     * Get the suffix.\n     */\n    public char[] GetSuffix(int len);\n\n    /**\n     * Reset buffer when finished.\n     */\n    public void Done();\n\n    /**\n     * Method to adjust line and column numbers for the start of a token.\n     */\n    public void adjustBeginLineColumn(int newLine, int newCol);\n}\n",
    "package": "com.pmdesigns.jvc.tools",
    "classname": "SimpleCharStream",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/SimpleCharStream_0Test.java",
    "test_prompt": "// SimpleCharStream_0Test.java\n/* JavaCCOptions:STATIC\u003dfalse,SUPPORT_CLASS_VISIBILITY_PUBLIC\u003dtrue */\npackage com.pmdesigns.jvc.tools;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleCharStream}.\n* It contains ten unit test cases for the {@link SimpleCharStream#BeginToken()} method.\n*/\nclass SimpleCharStream_0Test {",
    "method_signature": "BeginToken()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// SimpleCharStream.java\n/* JavaCCOptions:STATIC\u003dfalse,SUPPORT_CLASS_VISIBILITY_PUBLIC\u003dtrue */\npackage com.pmdesigns.jvc.tools;\n\npublic class SimpleCharStream {\n\n    /**\n     * Whether parser is static.\n     */\n    public static final boolean staticFlag \u003d false;\n\n    int bufsize;\n\n    int available;\n\n    int tokenBegin;\n\n    /**\n     * Position in buffer.\n     */\n    public int bufpos \u003d -1;\n\n    protected int[] bufline;\n\n    protected int[] bufcolumn;\n\n    protected int column \u003d 0;\n\n    protected int line \u003d 1;\n\n    protected boolean prevCharIsCR \u003d false;\n\n    protected boolean prevCharIsLF \u003d false;\n\n    protected java.io.Reader inputStream;\n\n    protected char[] buffer;\n\n    protected int maxNextCharInd \u003d 0;\n\n    protected int inBuf \u003d 0;\n\n    protected int tabSize \u003d 8;\n\n    protected void setTabSize(int i);\n\n    protected int getTabSize(int i);\n\n    protected void ExpandBuff(boolean wrapAround);\n\n    protected void FillBuff() throws java.io.IOException;\n\n    /**\n     * Start.\n     */\n    public char BeginToken() throws java.io.IOException;\n\n    protected void UpdateLineColumn(char c);\n\n    /**\n     * Read a character.\n     */\n    public char readChar() throws java.io.IOException;\n\n    public int getColumn();\n\n    public int getLine();\n\n    /**\n     * Get token end column number.\n     */\n    public int getEndColumn();\n\n    /**\n     * Get token end line number.\n     */\n    public int getEndLine();\n\n    /**\n     * Get token beginning column number.\n     */\n    public int getBeginColumn();\n\n    /**\n     * Get token beginning line number.\n     */\n    public int getBeginLine();\n\n    /**\n     * Backup a number of characters.\n     */\n    public void backup(int amount);\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.Reader dstream, int startline, int startcolumn) {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.Reader dstream) {\n    }\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize);\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.Reader dstream, int startline, int startcolumn);\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.Reader dstream);\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn) {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.InputStream dstream) {\n    }\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException;\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize);\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException;\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.InputStream dstream);\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException;\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.InputStream dstream, int startline, int startcolumn);\n\n    /**\n     * Get token literal value.\n     */\n    public String GetImage();\n\n    /**\n     * Get the suffix.\n     */\n    public char[] GetSuffix(int len);\n\n    /**\n     * Reset buffer when finished.\n     */\n    public void Done();\n\n    /**\n     * Method to adjust line and column numbers for the start of a token.\n     */\n    public void adjustBeginLineColumn(int newLine, int newCol);\n}\n",
    "package": "com.pmdesigns.jvc.tools",
    "classname": "SimpleCharStream",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/SimpleCharStream_1Test.java",
    "test_prompt": "// SimpleCharStream_1Test.java\n/* JavaCCOptions:STATIC\u003dfalse,SUPPORT_CLASS_VISIBILITY_PUBLIC\u003dtrue */\npackage com.pmdesigns.jvc.tools;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleCharStream}.\n* It contains ten unit test cases for the {@link SimpleCharStream#readChar()} method.\n*/\nclass SimpleCharStream_1Test {",
    "method_signature": "readChar()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// SimpleCharStream.java\n/* JavaCCOptions:STATIC\u003dfalse,SUPPORT_CLASS_VISIBILITY_PUBLIC\u003dtrue */\npackage com.pmdesigns.jvc.tools;\n\npublic class SimpleCharStream {\n\n    /**\n     * Whether parser is static.\n     */\n    public static final boolean staticFlag \u003d false;\n\n    int bufsize;\n\n    int available;\n\n    int tokenBegin;\n\n    /**\n     * Position in buffer.\n     */\n    public int bufpos \u003d -1;\n\n    protected int[] bufline;\n\n    protected int[] bufcolumn;\n\n    protected int column \u003d 0;\n\n    protected int line \u003d 1;\n\n    protected boolean prevCharIsCR \u003d false;\n\n    protected boolean prevCharIsLF \u003d false;\n\n    protected java.io.Reader inputStream;\n\n    protected char[] buffer;\n\n    protected int maxNextCharInd \u003d 0;\n\n    protected int inBuf \u003d 0;\n\n    protected int tabSize \u003d 8;\n\n    protected void setTabSize(int i);\n\n    protected int getTabSize(int i);\n\n    protected void ExpandBuff(boolean wrapAround);\n\n    protected void FillBuff() throws java.io.IOException;\n\n    /**\n     * Start.\n     */\n    public char BeginToken() throws java.io.IOException;\n\n    protected void UpdateLineColumn(char c);\n\n    /**\n     * Read a character.\n     */\n    public char readChar() throws java.io.IOException;\n\n    public int getColumn();\n\n    public int getLine();\n\n    /**\n     * Get token end column number.\n     */\n    public int getEndColumn();\n\n    /**\n     * Get token end line number.\n     */\n    public int getEndLine();\n\n    /**\n     * Get token beginning column number.\n     */\n    public int getBeginColumn();\n\n    /**\n     * Get token beginning line number.\n     */\n    public int getBeginLine();\n\n    /**\n     * Backup a number of characters.\n     */\n    public void backup(int amount);\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.Reader dstream, int startline, int startcolumn, int buffersize) {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.Reader dstream, int startline, int startcolumn) {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.Reader dstream) {\n    }\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize);\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.Reader dstream, int startline, int startcolumn);\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.Reader dstream);\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn, int buffersize) {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.InputStream dstream, int startline, int startcolumn) {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException {\n    }\n\n    /**\n     * Constructor.\n     */\n    public SimpleCharStream(java.io.InputStream dstream) {\n    }\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException;\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize);\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException;\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.InputStream dstream);\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn) throws java.io.UnsupportedEncodingException;\n\n    /**\n     * Reinitialise.\n     */\n    public void ReInit(java.io.InputStream dstream, int startline, int startcolumn);\n\n    /**\n     * Get token literal value.\n     */\n    public String GetImage();\n\n    /**\n     * Get the suffix.\n     */\n    public char[] GetSuffix(int len);\n\n    /**\n     * Reset buffer when finished.\n     */\n    public void Done();\n\n    /**\n     * Method to adjust line and column numbers for the start of a token.\n     */\n    public void adjustBeginLineColumn(int newLine, int newCol);\n}\n",
    "package": "com.pmdesigns.jvc.tools",
    "classname": "SimpleCharStream",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/SimpleCharStream_2Test.java",
    "test_prompt": "// SimpleCharStream_2Test.java\n/* JavaCCOptions:STATIC\u003dfalse,SUPPORT_CLASS_VISIBILITY_PUBLIC\u003dtrue */\npackage com.pmdesigns.jvc.tools;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleCharStream}.\n* It contains ten unit test cases for the {@link SimpleCharStream#GetImage()} method.\n*/\nclass SimpleCharStream_2Test {",
    "method_signature": "GetImage()",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// Base64Coder.java\npackage com.pmdesigns.jvc.tools;\n\npublic class Base64Coder {\n\n    // Mapping table from 6-bit nibbles to Base64 characters.\n    private static char[] map1 \u003d new char[64];\n\n    static {\n    }\n\n    // Mapping table from Base64 characters to 6-bit nibbles.\n    private static byte[] map2 \u003d new byte[128];\n\n    static {\n    }\n\n    /**\n     * Encodes a string into Base64 format.\n     * No blanks or line breaks are inserted.\n     * @param s  a String to be encoded.\n     * @return   A String with the Base64 encoded data.\n     */\n    public static String encodeString(String s);\n\n    /**\n     * Encodes a byte array into Base64 format.\n     * No blanks or line breaks are inserted.\n     * @param in  an array containing the data bytes to be encoded.\n     * @return    A character array with the Base64 encoded data.\n     */\n    public static char[] encode(byte[] in);\n\n    /**\n     * Encodes a byte array into Base64 format.\n     * No blanks or line breaks are inserted.\n     * @param in   an array containing the data bytes to be encoded.\n     * @param iLen number of bytes to process in \u003ccode\u003ein\u003c/code\u003e.\n     * @return     A character array with the Base64 encoded data.\n     */\n    public static char[] encode(byte[] in, int iLen);\n\n    /**\n     * Decodes a string from Base64 format.\n     * @param s  a Base64 String to be decoded.\n     * @return   A String containing the decoded data.\n     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.\n     */\n    public static String decodeString(String s);\n\n    /**\n     * Decodes a byte array from Base64 format.\n     * @param s  a Base64 String to be decoded.\n     * @return   An array containing the decoded data bytes.\n     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.\n     */\n    public static byte[] decode(String s);\n\n    /**\n     * Decodes a byte array from Base64 format.\n     * No blanks or line breaks are allowed within the Base64 encoded data.\n     * @param in  a character array containing the Base64 encoded data.\n     * @return    An array containing the decoded data bytes.\n     * @throws    IllegalArgumentException if the input is not valid Base64 encoded data.\n     */\n    public static byte[] decode(char[] in);\n\n    // Dummy constructor.\n    private Base64Coder() {\n    }\n}\n",
    "package": "com.pmdesigns.jvc.tools",
    "classname": "Base64Coder",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_0Test.java",
    "test_prompt": "// Base64Coder_0Test.java\npackage com.pmdesigns.jvc.tools;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Base64Coder}.\n* It contains ten unit test cases for the {@link Base64Coder#encodeString(String)} method.\n*/\nclass Base64Coder_0Test {",
    "method_signature": "encodeString(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Base64Coder.java\npackage com.pmdesigns.jvc.tools;\n\npublic class Base64Coder {\n\n    // Mapping table from 6-bit nibbles to Base64 characters.\n    private static char[] map1 \u003d new char[64];\n\n    static {\n    }\n\n    // Mapping table from Base64 characters to 6-bit nibbles.\n    private static byte[] map2 \u003d new byte[128];\n\n    static {\n    }\n\n    /**\n     * Encodes a string into Base64 format.\n     * No blanks or line breaks are inserted.\n     * @param s  a String to be encoded.\n     * @return   A String with the Base64 encoded data.\n     */\n    public static String encodeString(String s);\n\n    /**\n     * Encodes a byte array into Base64 format.\n     * No blanks or line breaks are inserted.\n     * @param in  an array containing the data bytes to be encoded.\n     * @return    A character array with the Base64 encoded data.\n     */\n    public static char[] encode(byte[] in);\n\n    /**\n     * Encodes a byte array into Base64 format.\n     * No blanks or line breaks are inserted.\n     * @param in   an array containing the data bytes to be encoded.\n     * @param iLen number of bytes to process in \u003ccode\u003ein\u003c/code\u003e.\n     * @return     A character array with the Base64 encoded data.\n     */\n    public static char[] encode(byte[] in, int iLen);\n\n    /**\n     * Decodes a string from Base64 format.\n     * @param s  a Base64 String to be decoded.\n     * @return   A String containing the decoded data.\n     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.\n     */\n    public static String decodeString(String s);\n\n    /**\n     * Decodes a byte array from Base64 format.\n     * @param s  a Base64 String to be decoded.\n     * @return   An array containing the decoded data bytes.\n     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.\n     */\n    public static byte[] decode(String s);\n\n    /**\n     * Decodes a byte array from Base64 format.\n     * No blanks or line breaks are allowed within the Base64 encoded data.\n     * @param in  a character array containing the Base64 encoded data.\n     * @return    An array containing the decoded data bytes.\n     * @throws    IllegalArgumentException if the input is not valid Base64 encoded data.\n     */\n    public static byte[] decode(char[] in);\n\n    // Dummy constructor.\n    private Base64Coder() {\n    }\n}\n",
    "package": "com.pmdesigns.jvc.tools",
    "classname": "Base64Coder",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_1Test.java",
    "test_prompt": "// Base64Coder_1Test.java\npackage com.pmdesigns.jvc.tools;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Base64Coder}.\n* It contains ten unit test cases for the {@link Base64Coder#encode(byte[])} method.\n*/\nclass Base64Coder_1Test {",
    "method_signature": "encode(byte[])",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// Base64Coder.java\npackage com.pmdesigns.jvc.tools;\n\npublic class Base64Coder {\n\n    // Mapping table from 6-bit nibbles to Base64 characters.\n    private static char[] map1 \u003d new char[64];\n\n    static {\n    }\n\n    // Mapping table from Base64 characters to 6-bit nibbles.\n    private static byte[] map2 \u003d new byte[128];\n\n    static {\n    }\n\n    /**\n     * Encodes a string into Base64 format.\n     * No blanks or line breaks are inserted.\n     * @param s  a String to be encoded.\n     * @return   A String with the Base64 encoded data.\n     */\n    public static String encodeString(String s);\n\n    /**\n     * Encodes a byte array into Base64 format.\n     * No blanks or line breaks are inserted.\n     * @param in  an array containing the data bytes to be encoded.\n     * @return    A character array with the Base64 encoded data.\n     */\n    public static char[] encode(byte[] in);\n\n    /**\n     * Encodes a byte array into Base64 format.\n     * No blanks or line breaks are inserted.\n     * @param in   an array containing the data bytes to be encoded.\n     * @param iLen number of bytes to process in \u003ccode\u003ein\u003c/code\u003e.\n     * @return     A character array with the Base64 encoded data.\n     */\n    public static char[] encode(byte[] in, int iLen);\n\n    /**\n     * Decodes a string from Base64 format.\n     * @param s  a Base64 String to be decoded.\n     * @return   A String containing the decoded data.\n     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.\n     */\n    public static String decodeString(String s);\n\n    /**\n     * Decodes a byte array from Base64 format.\n     * @param s  a Base64 String to be decoded.\n     * @return   An array containing the decoded data bytes.\n     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.\n     */\n    public static byte[] decode(String s);\n\n    /**\n     * Decodes a byte array from Base64 format.\n     * No blanks or line breaks are allowed within the Base64 encoded data.\n     * @param in  a character array containing the Base64 encoded data.\n     * @return    An array containing the decoded data bytes.\n     * @throws    IllegalArgumentException if the input is not valid Base64 encoded data.\n     */\n    public static byte[] decode(char[] in);\n\n    // Dummy constructor.\n    private Base64Coder() {\n    }\n}\n",
    "package": "com.pmdesigns.jvc.tools",
    "classname": "Base64Coder",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_2Test.java",
    "test_prompt": "// Base64Coder_2Test.java\npackage com.pmdesigns.jvc.tools;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Base64Coder}.\n* It contains ten unit test cases for the {@link Base64Coder#encode(byte[], int)} method.\n*/\nclass Base64Coder_2Test {",
    "method_signature": "encode(byte[], int)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// Base64Coder.java\npackage com.pmdesigns.jvc.tools;\n\npublic class Base64Coder {\n\n    // Mapping table from 6-bit nibbles to Base64 characters.\n    private static char[] map1 \u003d new char[64];\n\n    static {\n    }\n\n    // Mapping table from Base64 characters to 6-bit nibbles.\n    private static byte[] map2 \u003d new byte[128];\n\n    static {\n    }\n\n    /**\n     * Encodes a string into Base64 format.\n     * No blanks or line breaks are inserted.\n     * @param s  a String to be encoded.\n     * @return   A String with the Base64 encoded data.\n     */\n    public static String encodeString(String s);\n\n    /**\n     * Encodes a byte array into Base64 format.\n     * No blanks or line breaks are inserted.\n     * @param in  an array containing the data bytes to be encoded.\n     * @return    A character array with the Base64 encoded data.\n     */\n    public static char[] encode(byte[] in);\n\n    /**\n     * Encodes a byte array into Base64 format.\n     * No blanks or line breaks are inserted.\n     * @param in   an array containing the data bytes to be encoded.\n     * @param iLen number of bytes to process in \u003ccode\u003ein\u003c/code\u003e.\n     * @return     A character array with the Base64 encoded data.\n     */\n    public static char[] encode(byte[] in, int iLen);\n\n    /**\n     * Decodes a string from Base64 format.\n     * @param s  a Base64 String to be decoded.\n     * @return   A String containing the decoded data.\n     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.\n     */\n    public static String decodeString(String s);\n\n    /**\n     * Decodes a byte array from Base64 format.\n     * @param s  a Base64 String to be decoded.\n     * @return   An array containing the decoded data bytes.\n     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.\n     */\n    public static byte[] decode(String s);\n\n    /**\n     * Decodes a byte array from Base64 format.\n     * No blanks or line breaks are allowed within the Base64 encoded data.\n     * @param in  a character array containing the Base64 encoded data.\n     * @return    An array containing the decoded data bytes.\n     * @throws    IllegalArgumentException if the input is not valid Base64 encoded data.\n     */\n    public static byte[] decode(char[] in);\n\n    // Dummy constructor.\n    private Base64Coder() {\n    }\n}\n",
    "package": "com.pmdesigns.jvc.tools",
    "classname": "Base64Coder",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_3Test.java",
    "test_prompt": "// Base64Coder_3Test.java\npackage com.pmdesigns.jvc.tools;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Base64Coder}.\n* It contains ten unit test cases for the {@link Base64Coder#decodeString(String)} method.\n*/\nclass Base64Coder_3Test {",
    "method_signature": "decodeString(String)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// Base64Coder.java\npackage com.pmdesigns.jvc.tools;\n\npublic class Base64Coder {\n\n    // Mapping table from 6-bit nibbles to Base64 characters.\n    private static char[] map1 \u003d new char[64];\n\n    static {\n    }\n\n    // Mapping table from Base64 characters to 6-bit nibbles.\n    private static byte[] map2 \u003d new byte[128];\n\n    static {\n    }\n\n    /**\n     * Encodes a string into Base64 format.\n     * No blanks or line breaks are inserted.\n     * @param s  a String to be encoded.\n     * @return   A String with the Base64 encoded data.\n     */\n    public static String encodeString(String s);\n\n    /**\n     * Encodes a byte array into Base64 format.\n     * No blanks or line breaks are inserted.\n     * @param in  an array containing the data bytes to be encoded.\n     * @return    A character array with the Base64 encoded data.\n     */\n    public static char[] encode(byte[] in);\n\n    /**\n     * Encodes a byte array into Base64 format.\n     * No blanks or line breaks are inserted.\n     * @param in   an array containing the data bytes to be encoded.\n     * @param iLen number of bytes to process in \u003ccode\u003ein\u003c/code\u003e.\n     * @return     A character array with the Base64 encoded data.\n     */\n    public static char[] encode(byte[] in, int iLen);\n\n    /**\n     * Decodes a string from Base64 format.\n     * @param s  a Base64 String to be decoded.\n     * @return   A String containing the decoded data.\n     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.\n     */\n    public static String decodeString(String s);\n\n    /**\n     * Decodes a byte array from Base64 format.\n     * @param s  a Base64 String to be decoded.\n     * @return   An array containing the decoded data bytes.\n     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.\n     */\n    public static byte[] decode(String s);\n\n    /**\n     * Decodes a byte array from Base64 format.\n     * No blanks or line breaks are allowed within the Base64 encoded data.\n     * @param in  a character array containing the Base64 encoded data.\n     * @return    An array containing the decoded data bytes.\n     * @throws    IllegalArgumentException if the input is not valid Base64 encoded data.\n     */\n    public static byte[] decode(char[] in);\n\n    // Dummy constructor.\n    private Base64Coder() {\n    }\n}\n",
    "package": "com.pmdesigns.jvc.tools",
    "classname": "Base64Coder",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_4Test.java",
    "test_prompt": "// Base64Coder_4Test.java\npackage com.pmdesigns.jvc.tools;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Base64Coder}.\n* It contains ten unit test cases for the {@link Base64Coder#decode(String)} method.\n*/\nclass Base64Coder_4Test {",
    "method_signature": "decode(String)",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// Base64Coder.java\npackage com.pmdesigns.jvc.tools;\n\npublic class Base64Coder {\n\n    // Mapping table from 6-bit nibbles to Base64 characters.\n    private static char[] map1 \u003d new char[64];\n\n    static {\n    }\n\n    // Mapping table from Base64 characters to 6-bit nibbles.\n    private static byte[] map2 \u003d new byte[128];\n\n    static {\n    }\n\n    /**\n     * Encodes a string into Base64 format.\n     * No blanks or line breaks are inserted.\n     * @param s  a String to be encoded.\n     * @return   A String with the Base64 encoded data.\n     */\n    public static String encodeString(String s);\n\n    /**\n     * Encodes a byte array into Base64 format.\n     * No blanks or line breaks are inserted.\n     * @param in  an array containing the data bytes to be encoded.\n     * @return    A character array with the Base64 encoded data.\n     */\n    public static char[] encode(byte[] in);\n\n    /**\n     * Encodes a byte array into Base64 format.\n     * No blanks or line breaks are inserted.\n     * @param in   an array containing the data bytes to be encoded.\n     * @param iLen number of bytes to process in \u003ccode\u003ein\u003c/code\u003e.\n     * @return     A character array with the Base64 encoded data.\n     */\n    public static char[] encode(byte[] in, int iLen);\n\n    /**\n     * Decodes a string from Base64 format.\n     * @param s  a Base64 String to be decoded.\n     * @return   A String containing the decoded data.\n     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.\n     */\n    public static String decodeString(String s);\n\n    /**\n     * Decodes a byte array from Base64 format.\n     * @param s  a Base64 String to be decoded.\n     * @return   An array containing the decoded data bytes.\n     * @throws   IllegalArgumentException if the input is not valid Base64 encoded data.\n     */\n    public static byte[] decode(String s);\n\n    /**\n     * Decodes a byte array from Base64 format.\n     * No blanks or line breaks are allowed within the Base64 encoded data.\n     * @param in  a character array containing the Base64 encoded data.\n     * @return    An array containing the decoded data bytes.\n     * @throws    IllegalArgumentException if the input is not valid Base64 encoded data.\n     */\n    public static byte[] decode(char[] in);\n\n    // Dummy constructor.\n    private Base64Coder() {\n    }\n}\n",
    "package": "com.pmdesigns.jvc.tools",
    "classname": "Base64Coder",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/tools/Base64Coder_5Test.java",
    "test_prompt": "// Base64Coder_5Test.java\npackage com.pmdesigns.jvc.tools;\n\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Base64Coder}.\n* It contains ten unit test cases for the {@link Base64Coder#decode(char[])} method.\n*/\nclass Base64Coder_5Test {",
    "method_signature": "decode(char[])",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    /**\n     * The actual HttpServletRequest object\n     */\n    public final HttpServletRequest request;\n\n    /**\n     * The actual HttpServletResponse object\n     */\n    public final HttpServletResponse response;\n\n    /**\n     * The HttpServlet object (actually this is a JVCDispatcher)\n     */\n    public final HttpServlet servlet;\n\n    /**\n     * The controller is the servlet path up to the action.\n     */\n    public final String controller;\n\n    /**\n     * The action is the last part of the servlet path (before any query arguments)\n     */\n    public final String action;\n\n    /**\n     * Tells if this request has multipart content (ie file upload)\n     */\n    public final boolean hasMultipartContent;\n\n    /**\n     * Parameter value indicating that the real parameter value is binary (and should be\n     * accessed via the getAttribute() method.\n     */\n    public static final String BINARY_VALUE \u003d \"BINARY_VALUE\";\n\n    /**\n     * The \u0027flash\u0027 map for holding temporary key/value strings.\n     */\n    public final Map\u003cString, String\u003e flash;\n\n    /**\n     * Holds cached page generator fragments\n     */\n    private static Map\u003cString, String\u003e cacheMap;\n\n    /**\n     * Constructor for JVCRequestContext which is used to hold http request and response iformation\n     * @param request\n     * @param response\n     * @param servlet\n     * @param flash\n     * @param controller\n     * @param action\n     */\n    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map\u003cString, String\u003e flash, String controller, String action) throws Exception {\n    }\n\n    /**\n     * Convenience method\n     * @return true if the request is secure\n     */\n    public boolean isSecure();\n\n    /**\n     * Convenience method\n     * @return the request scheme, ie. http, https\n     */\n    public String getScheme();\n\n    /**\n     * Convenience method\n     * @return the request method, ie. GET, POST\n     */\n    public String getMethod();\n\n    /**\n     * Convenience method\n     * @return the server name for this request\n     */\n    public String getServerName();\n\n    /**\n     * Convenience method\n     * @return the server port for this request\n     */\n    public int getServerPort();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getServletPath\n     * @see #getQueryString\n     * @return the context path part of the url path\n     */\n    public String getContextPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getQueryString\n     * @return the servlet path part of the url path\n     */\n    public String getServletPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getServletPath\n     * @return the query string part of the url path\n     */\n    public String getQueryString();\n\n    /**\n     * Convenience method\n     * @param name    which parameter to get\n     * @return the parameter value or null if there is no parameter corresponding to the indicated key\n     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,\n     * which can be retrieved as a byte array via the getAttribute method.\n     * @see #getParamMap\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public String getParam(String name);\n\n    /**\n     * Convenience method which gathers all parameters of the\n     * form \u0027\u003cname\u003e[\u003ckey\u003e]\u0027 and return then in a map where the\n     * keys are the \u003ckey\u003e strings and the values are the\n     * corresponding parameter values.\n     * \u003cpre\u003e\n     * For example, if there are parameters:\n     *   \u0027foo[bar1]\u0027 \u003d \u0027baz1\u0027\n     *   \u0027foo[bar2]\u0027 \u003d \u0027baz2\u0027\n     * then getParamMap(\u0027foo\u0027) will returned the map:\n     *   map[\u0027bar1\u0027] \u003d \u0027baz1\u0027\n     *   map[\u0027bar2\u0027] \u003d \u0027baz2\u0027\n     * \u003c/pre\u003e\n     * @param name  the prefix to be used to select parameters\n     * @return a map of all paramters of the form \u0027name[\u003ckey\u003e]\u0027\n     * where the \u003ckey\u003e strings are the keys of the map and the\n     * values are the corresponding parameter values.\n     * @see #getParam\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public Map\u003cString, String\u003e getParamMap(String name);\n\n    /**\n     * Convenience method. Use this if you expect a parameter name\n     * to map to multiple values.\n     * @param name    the name of the parameter(s) to get\n     * @return an array of paramter values corresponding to the indicated name\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamNames\n     */\n    public String[] getParamValues(String name);\n\n    /**\n     * Convenience method to get all the parameter names.\n     * @return an array of all parameter names\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamValues\n     */\n    public String[] getParamNames();\n\n    /**\n     * Convenience method\n     * @param name    which attribute to get\n     * @return the attribute value or null if there is no attribute corresponding to the indicated key.\n     * If the attribute corresponds to a file upload field then the return value will be a byte array\n     */\n    public Object getAttribute(String name);\n\n    /**\n     * Convenience method\n     * @param name    name of attribute to be set\n     * @param value   value of attribute to be set\n     */\n    public void setAttribute(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name    the name of the attribute to retrieve\n     * @return the attribute associated with the indicated name or null\n     * @see #setSessionAttr\n     * @see #getSessionAttrNames\n     */\n    public Object getSessionAttr(String name);\n\n    /**\n     * Convenience method\n     * @return all the session attribute names.\n     * @see #getSessionAttr\n     * @see #setSessionAttr\n     * @see #removeSessionAttr\n     */\n    public String[] getSessionAttrNames();\n\n    /**\n     * Convenience method\n     * @param name  the key to store the indicated value\n     * @param value  the object to be stored\n     * @see #getSessionAttr\n     * @see #removeSessionAttr\n     */\n    public void setSessionAttr(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name  the key of\n     * @see #setSessionAttr\n     */\n    public void removeSessionAttr(String name);\n\n    /**\n     * Convenience method to get cookie by name\n     * @param name  the name of the cookie to get\n     * @return the cookie with the indicated name, or null\n     * @see #setCookie\n     * @see #getCookieNames\n     */\n    public Cookie getCookie(String name);\n\n    /**\n     * Convenience method to get all the cookie names.\n     * @return an array of the names of all the cookies in the request, possibly empty\n     * @see #getCookie\n     * @see #setCookie\n     */\n    public String[] getCookieNames();\n\n    /**\n     * Convenience method\n     * @param cookie   the cookie to be added to the response\n     * @see #getCookie\n     * @see #getCookieNames\n     */\n    public void setCookie(Cookie cookie);\n\n    /**\n     * Cause a non-standard response (ie. redirect) to be returned.\n     * @param httpCode   the http response code to be returned\n     * @param arg    an argument or message to be returned (depends on response code)\n     * @see #redirect\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void nonStandardResponse(int httpCode, String arg);\n\n    /**\n     * Cause a redirect response to be returned\n     * @param path  where to redirect to. If the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #nonStandardResponse\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void redirect(String path);\n\n    /**\n     * Cause a binary response to be returned\n     * @param in input stream containing binary data to be sent\n     * @throws BinaryResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the BinaryResponseException.\n     */\n    public void sendBinaryResponse(InputStream in);\n\n    /**\n     * Convenience method to prepend the context path onto a servlet path\n     * @param path    a servlet path\n     * @return the context path plus the indicated path\n     */\n    public String absPath(String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @param options    extra html options to add to the anchor tag\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path, String options);\n\n    /**\n     * Convenience method to check if this request is a POST\n     */\n    public boolean isPost();\n\n    /**\n     * Convenience method to check if this request is a GET\n     */\n    public boolean isGet();\n\n    /**\n     * Convenience method to retrieve a value from the flash\n     * @param key  the key to use to lookup a flash value\n     * @return the flash value associated with the indicated key or null\n     * @see #setFlash\n     */\n    public String getFlash(String key);\n\n    /**\n     * Convenience method to add a value to the flash\n     * @param key  the key to use to associate with the flash value\n     * @param val  the value to store\n     * @see #getFlash\n     */\n    public void setFlash(String key, String val);\n\n    /**\n     * Internal method used to retrieve a cached block\n     * @see #setCachedBlock\n     */\n    public static String getCachedBlock(String key);\n\n    /**\n     * Internal method used to store a cached block\n     * @see #getCachedBlock\n     */\n    public static void setCachedBlock(String key, String val);\n\n    /**\n     * For debugging\n     * @return a string representation of this request context\n     */\n    public String toString();\n\n    public String toString(String sep);\n\n    /**\n     * Copy an input stream to an output stream.\n     */\n    private byte[] readStream(InputStream in) throws IOException;\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_0Test.java",
    "test_prompt": "// JVCRequestContext_0Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#getParam(String)} method.\n*/\nclass JVCRequestContext_0Test {",
    "method_signature": "getParam(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    /**\n     * The actual HttpServletRequest object\n     */\n    public final HttpServletRequest request;\n\n    /**\n     * The actual HttpServletResponse object\n     */\n    public final HttpServletResponse response;\n\n    /**\n     * The HttpServlet object (actually this is a JVCDispatcher)\n     */\n    public final HttpServlet servlet;\n\n    /**\n     * The controller is the servlet path up to the action.\n     */\n    public final String controller;\n\n    /**\n     * The action is the last part of the servlet path (before any query arguments)\n     */\n    public final String action;\n\n    /**\n     * Tells if this request has multipart content (ie file upload)\n     */\n    public final boolean hasMultipartContent;\n\n    /**\n     * Parameter value indicating that the real parameter value is binary (and should be\n     * accessed via the getAttribute() method.\n     */\n    public static final String BINARY_VALUE \u003d \"BINARY_VALUE\";\n\n    /**\n     * The \u0027flash\u0027 map for holding temporary key/value strings.\n     */\n    public final Map\u003cString, String\u003e flash;\n\n    /**\n     * Holds cached page generator fragments\n     */\n    private static Map\u003cString, String\u003e cacheMap;\n\n    /**\n     * Constructor for JVCRequestContext which is used to hold http request and response iformation\n     * @param request\n     * @param response\n     * @param servlet\n     * @param flash\n     * @param controller\n     * @param action\n     */\n    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map\u003cString, String\u003e flash, String controller, String action) throws Exception {\n    }\n\n    /**\n     * Convenience method\n     * @return true if the request is secure\n     */\n    public boolean isSecure();\n\n    /**\n     * Convenience method\n     * @return the request scheme, ie. http, https\n     */\n    public String getScheme();\n\n    /**\n     * Convenience method\n     * @return the request method, ie. GET, POST\n     */\n    public String getMethod();\n\n    /**\n     * Convenience method\n     * @return the server name for this request\n     */\n    public String getServerName();\n\n    /**\n     * Convenience method\n     * @return the server port for this request\n     */\n    public int getServerPort();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getServletPath\n     * @see #getQueryString\n     * @return the context path part of the url path\n     */\n    public String getContextPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getQueryString\n     * @return the servlet path part of the url path\n     */\n    public String getServletPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getServletPath\n     * @return the query string part of the url path\n     */\n    public String getQueryString();\n\n    /**\n     * Convenience method\n     * @param name    which parameter to get\n     * @return the parameter value or null if there is no parameter corresponding to the indicated key\n     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,\n     * which can be retrieved as a byte array via the getAttribute method.\n     * @see #getParamMap\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public String getParam(String name);\n\n    /**\n     * Convenience method which gathers all parameters of the\n     * form \u0027\u003cname\u003e[\u003ckey\u003e]\u0027 and return then in a map where the\n     * keys are the \u003ckey\u003e strings and the values are the\n     * corresponding parameter values.\n     * \u003cpre\u003e\n     * For example, if there are parameters:\n     *   \u0027foo[bar1]\u0027 \u003d \u0027baz1\u0027\n     *   \u0027foo[bar2]\u0027 \u003d \u0027baz2\u0027\n     * then getParamMap(\u0027foo\u0027) will returned the map:\n     *   map[\u0027bar1\u0027] \u003d \u0027baz1\u0027\n     *   map[\u0027bar2\u0027] \u003d \u0027baz2\u0027\n     * \u003c/pre\u003e\n     * @param name  the prefix to be used to select parameters\n     * @return a map of all paramters of the form \u0027name[\u003ckey\u003e]\u0027\n     * where the \u003ckey\u003e strings are the keys of the map and the\n     * values are the corresponding parameter values.\n     * @see #getParam\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public Map\u003cString, String\u003e getParamMap(String name);\n\n    /**\n     * Convenience method. Use this if you expect a parameter name\n     * to map to multiple values.\n     * @param name    the name of the parameter(s) to get\n     * @return an array of paramter values corresponding to the indicated name\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamNames\n     */\n    public String[] getParamValues(String name);\n\n    /**\n     * Convenience method to get all the parameter names.\n     * @return an array of all parameter names\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamValues\n     */\n    public String[] getParamNames();\n\n    /**\n     * Convenience method\n     * @param name    which attribute to get\n     * @return the attribute value or null if there is no attribute corresponding to the indicated key.\n     * If the attribute corresponds to a file upload field then the return value will be a byte array\n     */\n    public Object getAttribute(String name);\n\n    /**\n     * Convenience method\n     * @param name    name of attribute to be set\n     * @param value   value of attribute to be set\n     */\n    public void setAttribute(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name    the name of the attribute to retrieve\n     * @return the attribute associated with the indicated name or null\n     * @see #setSessionAttr\n     * @see #getSessionAttrNames\n     */\n    public Object getSessionAttr(String name);\n\n    /**\n     * Convenience method\n     * @return all the session attribute names.\n     * @see #getSessionAttr\n     * @see #setSessionAttr\n     * @see #removeSessionAttr\n     */\n    public String[] getSessionAttrNames();\n\n    /**\n     * Convenience method\n     * @param name  the key to store the indicated value\n     * @param value  the object to be stored\n     * @see #getSessionAttr\n     * @see #removeSessionAttr\n     */\n    public void setSessionAttr(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name  the key of\n     * @see #setSessionAttr\n     */\n    public void removeSessionAttr(String name);\n\n    /**\n     * Convenience method to get cookie by name\n     * @param name  the name of the cookie to get\n     * @return the cookie with the indicated name, or null\n     * @see #setCookie\n     * @see #getCookieNames\n     */\n    public Cookie getCookie(String name);\n\n    /**\n     * Convenience method to get all the cookie names.\n     * @return an array of the names of all the cookies in the request, possibly empty\n     * @see #getCookie\n     * @see #setCookie\n     */\n    public String[] getCookieNames();\n\n    /**\n     * Convenience method\n     * @param cookie   the cookie to be added to the response\n     * @see #getCookie\n     * @see #getCookieNames\n     */\n    public void setCookie(Cookie cookie);\n\n    /**\n     * Cause a non-standard response (ie. redirect) to be returned.\n     * @param httpCode   the http response code to be returned\n     * @param arg    an argument or message to be returned (depends on response code)\n     * @see #redirect\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void nonStandardResponse(int httpCode, String arg);\n\n    /**\n     * Cause a redirect response to be returned\n     * @param path  where to redirect to. If the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #nonStandardResponse\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void redirect(String path);\n\n    /**\n     * Cause a binary response to be returned\n     * @param in input stream containing binary data to be sent\n     * @throws BinaryResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the BinaryResponseException.\n     */\n    public void sendBinaryResponse(InputStream in);\n\n    /**\n     * Convenience method to prepend the context path onto a servlet path\n     * @param path    a servlet path\n     * @return the context path plus the indicated path\n     */\n    public String absPath(String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @param options    extra html options to add to the anchor tag\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path, String options);\n\n    /**\n     * Convenience method to check if this request is a POST\n     */\n    public boolean isPost();\n\n    /**\n     * Convenience method to check if this request is a GET\n     */\n    public boolean isGet();\n\n    /**\n     * Convenience method to retrieve a value from the flash\n     * @param key  the key to use to lookup a flash value\n     * @return the flash value associated with the indicated key or null\n     * @see #setFlash\n     */\n    public String getFlash(String key);\n\n    /**\n     * Convenience method to add a value to the flash\n     * @param key  the key to use to associate with the flash value\n     * @param val  the value to store\n     * @see #getFlash\n     */\n    public void setFlash(String key, String val);\n\n    /**\n     * Internal method used to retrieve a cached block\n     * @see #setCachedBlock\n     */\n    public static String getCachedBlock(String key);\n\n    /**\n     * Internal method used to store a cached block\n     * @see #getCachedBlock\n     */\n    public static void setCachedBlock(String key, String val);\n\n    /**\n     * For debugging\n     * @return a string representation of this request context\n     */\n    public String toString();\n\n    public String toString(String sep);\n\n    /**\n     * Copy an input stream to an output stream.\n     */\n    private byte[] readStream(InputStream in) throws IOException;\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_1Test.java",
    "test_prompt": "// JVCRequestContext_1Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#getParamMap(String)} method.\n*/\nclass JVCRequestContext_1Test {",
    "method_signature": "getParamMap(String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    /**\n     * The actual HttpServletRequest object\n     */\n    public final HttpServletRequest request;\n\n    /**\n     * The actual HttpServletResponse object\n     */\n    public final HttpServletResponse response;\n\n    /**\n     * The HttpServlet object (actually this is a JVCDispatcher)\n     */\n    public final HttpServlet servlet;\n\n    /**\n     * The controller is the servlet path up to the action.\n     */\n    public final String controller;\n\n    /**\n     * The action is the last part of the servlet path (before any query arguments)\n     */\n    public final String action;\n\n    /**\n     * Tells if this request has multipart content (ie file upload)\n     */\n    public final boolean hasMultipartContent;\n\n    /**\n     * Parameter value indicating that the real parameter value is binary (and should be\n     * accessed via the getAttribute() method.\n     */\n    public static final String BINARY_VALUE \u003d \"BINARY_VALUE\";\n\n    /**\n     * The \u0027flash\u0027 map for holding temporary key/value strings.\n     */\n    public final Map\u003cString, String\u003e flash;\n\n    /**\n     * Holds cached page generator fragments\n     */\n    private static Map\u003cString, String\u003e cacheMap;\n\n    /**\n     * Constructor for JVCRequestContext which is used to hold http request and response iformation\n     * @param request\n     * @param response\n     * @param servlet\n     * @param flash\n     * @param controller\n     * @param action\n     */\n    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map\u003cString, String\u003e flash, String controller, String action) throws Exception {\n    }\n\n    /**\n     * Convenience method\n     * @return true if the request is secure\n     */\n    public boolean isSecure();\n\n    /**\n     * Convenience method\n     * @return the request scheme, ie. http, https\n     */\n    public String getScheme();\n\n    /**\n     * Convenience method\n     * @return the request method, ie. GET, POST\n     */\n    public String getMethod();\n\n    /**\n     * Convenience method\n     * @return the server name for this request\n     */\n    public String getServerName();\n\n    /**\n     * Convenience method\n     * @return the server port for this request\n     */\n    public int getServerPort();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getServletPath\n     * @see #getQueryString\n     * @return the context path part of the url path\n     */\n    public String getContextPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getQueryString\n     * @return the servlet path part of the url path\n     */\n    public String getServletPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getServletPath\n     * @return the query string part of the url path\n     */\n    public String getQueryString();\n\n    /**\n     * Convenience method\n     * @param name    which parameter to get\n     * @return the parameter value or null if there is no parameter corresponding to the indicated key\n     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,\n     * which can be retrieved as a byte array via the getAttribute method.\n     * @see #getParamMap\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public String getParam(String name);\n\n    /**\n     * Convenience method which gathers all parameters of the\n     * form \u0027\u003cname\u003e[\u003ckey\u003e]\u0027 and return then in a map where the\n     * keys are the \u003ckey\u003e strings and the values are the\n     * corresponding parameter values.\n     * \u003cpre\u003e\n     * For example, if there are parameters:\n     *   \u0027foo[bar1]\u0027 \u003d \u0027baz1\u0027\n     *   \u0027foo[bar2]\u0027 \u003d \u0027baz2\u0027\n     * then getParamMap(\u0027foo\u0027) will returned the map:\n     *   map[\u0027bar1\u0027] \u003d \u0027baz1\u0027\n     *   map[\u0027bar2\u0027] \u003d \u0027baz2\u0027\n     * \u003c/pre\u003e\n     * @param name  the prefix to be used to select parameters\n     * @return a map of all paramters of the form \u0027name[\u003ckey\u003e]\u0027\n     * where the \u003ckey\u003e strings are the keys of the map and the\n     * values are the corresponding parameter values.\n     * @see #getParam\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public Map\u003cString, String\u003e getParamMap(String name);\n\n    /**\n     * Convenience method. Use this if you expect a parameter name\n     * to map to multiple values.\n     * @param name    the name of the parameter(s) to get\n     * @return an array of paramter values corresponding to the indicated name\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamNames\n     */\n    public String[] getParamValues(String name);\n\n    /**\n     * Convenience method to get all the parameter names.\n     * @return an array of all parameter names\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamValues\n     */\n    public String[] getParamNames();\n\n    /**\n     * Convenience method\n     * @param name    which attribute to get\n     * @return the attribute value or null if there is no attribute corresponding to the indicated key.\n     * If the attribute corresponds to a file upload field then the return value will be a byte array\n     */\n    public Object getAttribute(String name);\n\n    /**\n     * Convenience method\n     * @param name    name of attribute to be set\n     * @param value   value of attribute to be set\n     */\n    public void setAttribute(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name    the name of the attribute to retrieve\n     * @return the attribute associated with the indicated name or null\n     * @see #setSessionAttr\n     * @see #getSessionAttrNames\n     */\n    public Object getSessionAttr(String name);\n\n    /**\n     * Convenience method\n     * @return all the session attribute names.\n     * @see #getSessionAttr\n     * @see #setSessionAttr\n     * @see #removeSessionAttr\n     */\n    public String[] getSessionAttrNames();\n\n    /**\n     * Convenience method\n     * @param name  the key to store the indicated value\n     * @param value  the object to be stored\n     * @see #getSessionAttr\n     * @see #removeSessionAttr\n     */\n    public void setSessionAttr(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name  the key of\n     * @see #setSessionAttr\n     */\n    public void removeSessionAttr(String name);\n\n    /**\n     * Convenience method to get cookie by name\n     * @param name  the name of the cookie to get\n     * @return the cookie with the indicated name, or null\n     * @see #setCookie\n     * @see #getCookieNames\n     */\n    public Cookie getCookie(String name);\n\n    /**\n     * Convenience method to get all the cookie names.\n     * @return an array of the names of all the cookies in the request, possibly empty\n     * @see #getCookie\n     * @see #setCookie\n     */\n    public String[] getCookieNames();\n\n    /**\n     * Convenience method\n     * @param cookie   the cookie to be added to the response\n     * @see #getCookie\n     * @see #getCookieNames\n     */\n    public void setCookie(Cookie cookie);\n\n    /**\n     * Cause a non-standard response (ie. redirect) to be returned.\n     * @param httpCode   the http response code to be returned\n     * @param arg    an argument or message to be returned (depends on response code)\n     * @see #redirect\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void nonStandardResponse(int httpCode, String arg);\n\n    /**\n     * Cause a redirect response to be returned\n     * @param path  where to redirect to. If the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #nonStandardResponse\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void redirect(String path);\n\n    /**\n     * Cause a binary response to be returned\n     * @param in input stream containing binary data to be sent\n     * @throws BinaryResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the BinaryResponseException.\n     */\n    public void sendBinaryResponse(InputStream in);\n\n    /**\n     * Convenience method to prepend the context path onto a servlet path\n     * @param path    a servlet path\n     * @return the context path plus the indicated path\n     */\n    public String absPath(String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @param options    extra html options to add to the anchor tag\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path, String options);\n\n    /**\n     * Convenience method to check if this request is a POST\n     */\n    public boolean isPost();\n\n    /**\n     * Convenience method to check if this request is a GET\n     */\n    public boolean isGet();\n\n    /**\n     * Convenience method to retrieve a value from the flash\n     * @param key  the key to use to lookup a flash value\n     * @return the flash value associated with the indicated key or null\n     * @see #setFlash\n     */\n    public String getFlash(String key);\n\n    /**\n     * Convenience method to add a value to the flash\n     * @param key  the key to use to associate with the flash value\n     * @param val  the value to store\n     * @see #getFlash\n     */\n    public void setFlash(String key, String val);\n\n    /**\n     * Internal method used to retrieve a cached block\n     * @see #setCachedBlock\n     */\n    public static String getCachedBlock(String key);\n\n    /**\n     * Internal method used to store a cached block\n     * @see #getCachedBlock\n     */\n    public static void setCachedBlock(String key, String val);\n\n    /**\n     * For debugging\n     * @return a string representation of this request context\n     */\n    public String toString();\n\n    public String toString(String sep);\n\n    /**\n     * Copy an input stream to an output stream.\n     */\n    private byte[] readStream(InputStream in) throws IOException;\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_2Test.java",
    "test_prompt": "// JVCRequestContext_2Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#getParamValues(String)} method.\n*/\nclass JVCRequestContext_2Test {",
    "method_signature": "getParamValues(String)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    /**\n     * The actual HttpServletRequest object\n     */\n    public final HttpServletRequest request;\n\n    /**\n     * The actual HttpServletResponse object\n     */\n    public final HttpServletResponse response;\n\n    /**\n     * The HttpServlet object (actually this is a JVCDispatcher)\n     */\n    public final HttpServlet servlet;\n\n    /**\n     * The controller is the servlet path up to the action.\n     */\n    public final String controller;\n\n    /**\n     * The action is the last part of the servlet path (before any query arguments)\n     */\n    public final String action;\n\n    /**\n     * Tells if this request has multipart content (ie file upload)\n     */\n    public final boolean hasMultipartContent;\n\n    /**\n     * Parameter value indicating that the real parameter value is binary (and should be\n     * accessed via the getAttribute() method.\n     */\n    public static final String BINARY_VALUE \u003d \"BINARY_VALUE\";\n\n    /**\n     * The \u0027flash\u0027 map for holding temporary key/value strings.\n     */\n    public final Map\u003cString, String\u003e flash;\n\n    /**\n     * Holds cached page generator fragments\n     */\n    private static Map\u003cString, String\u003e cacheMap;\n\n    /**\n     * Constructor for JVCRequestContext which is used to hold http request and response iformation\n     * @param request\n     * @param response\n     * @param servlet\n     * @param flash\n     * @param controller\n     * @param action\n     */\n    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map\u003cString, String\u003e flash, String controller, String action) throws Exception {\n    }\n\n    /**\n     * Convenience method\n     * @return true if the request is secure\n     */\n    public boolean isSecure();\n\n    /**\n     * Convenience method\n     * @return the request scheme, ie. http, https\n     */\n    public String getScheme();\n\n    /**\n     * Convenience method\n     * @return the request method, ie. GET, POST\n     */\n    public String getMethod();\n\n    /**\n     * Convenience method\n     * @return the server name for this request\n     */\n    public String getServerName();\n\n    /**\n     * Convenience method\n     * @return the server port for this request\n     */\n    public int getServerPort();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getServletPath\n     * @see #getQueryString\n     * @return the context path part of the url path\n     */\n    public String getContextPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getQueryString\n     * @return the servlet path part of the url path\n     */\n    public String getServletPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getServletPath\n     * @return the query string part of the url path\n     */\n    public String getQueryString();\n\n    /**\n     * Convenience method\n     * @param name    which parameter to get\n     * @return the parameter value or null if there is no parameter corresponding to the indicated key\n     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,\n     * which can be retrieved as a byte array via the getAttribute method.\n     * @see #getParamMap\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public String getParam(String name);\n\n    /**\n     * Convenience method which gathers all parameters of the\n     * form \u0027\u003cname\u003e[\u003ckey\u003e]\u0027 and return then in a map where the\n     * keys are the \u003ckey\u003e strings and the values are the\n     * corresponding parameter values.\n     * \u003cpre\u003e\n     * For example, if there are parameters:\n     *   \u0027foo[bar1]\u0027 \u003d \u0027baz1\u0027\n     *   \u0027foo[bar2]\u0027 \u003d \u0027baz2\u0027\n     * then getParamMap(\u0027foo\u0027) will returned the map:\n     *   map[\u0027bar1\u0027] \u003d \u0027baz1\u0027\n     *   map[\u0027bar2\u0027] \u003d \u0027baz2\u0027\n     * \u003c/pre\u003e\n     * @param name  the prefix to be used to select parameters\n     * @return a map of all paramters of the form \u0027name[\u003ckey\u003e]\u0027\n     * where the \u003ckey\u003e strings are the keys of the map and the\n     * values are the corresponding parameter values.\n     * @see #getParam\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public Map\u003cString, String\u003e getParamMap(String name);\n\n    /**\n     * Convenience method. Use this if you expect a parameter name\n     * to map to multiple values.\n     * @param name    the name of the parameter(s) to get\n     * @return an array of paramter values corresponding to the indicated name\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamNames\n     */\n    public String[] getParamValues(String name);\n\n    /**\n     * Convenience method to get all the parameter names.\n     * @return an array of all parameter names\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamValues\n     */\n    public String[] getParamNames();\n\n    /**\n     * Convenience method\n     * @param name    which attribute to get\n     * @return the attribute value or null if there is no attribute corresponding to the indicated key.\n     * If the attribute corresponds to a file upload field then the return value will be a byte array\n     */\n    public Object getAttribute(String name);\n\n    /**\n     * Convenience method\n     * @param name    name of attribute to be set\n     * @param value   value of attribute to be set\n     */\n    public void setAttribute(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name    the name of the attribute to retrieve\n     * @return the attribute associated with the indicated name or null\n     * @see #setSessionAttr\n     * @see #getSessionAttrNames\n     */\n    public Object getSessionAttr(String name);\n\n    /**\n     * Convenience method\n     * @return all the session attribute names.\n     * @see #getSessionAttr\n     * @see #setSessionAttr\n     * @see #removeSessionAttr\n     */\n    public String[] getSessionAttrNames();\n\n    /**\n     * Convenience method\n     * @param name  the key to store the indicated value\n     * @param value  the object to be stored\n     * @see #getSessionAttr\n     * @see #removeSessionAttr\n     */\n    public void setSessionAttr(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name  the key of\n     * @see #setSessionAttr\n     */\n    public void removeSessionAttr(String name);\n\n    /**\n     * Convenience method to get cookie by name\n     * @param name  the name of the cookie to get\n     * @return the cookie with the indicated name, or null\n     * @see #setCookie\n     * @see #getCookieNames\n     */\n    public Cookie getCookie(String name);\n\n    /**\n     * Convenience method to get all the cookie names.\n     * @return an array of the names of all the cookies in the request, possibly empty\n     * @see #getCookie\n     * @see #setCookie\n     */\n    public String[] getCookieNames();\n\n    /**\n     * Convenience method\n     * @param cookie   the cookie to be added to the response\n     * @see #getCookie\n     * @see #getCookieNames\n     */\n    public void setCookie(Cookie cookie);\n\n    /**\n     * Cause a non-standard response (ie. redirect) to be returned.\n     * @param httpCode   the http response code to be returned\n     * @param arg    an argument or message to be returned (depends on response code)\n     * @see #redirect\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void nonStandardResponse(int httpCode, String arg);\n\n    /**\n     * Cause a redirect response to be returned\n     * @param path  where to redirect to. If the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #nonStandardResponse\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void redirect(String path);\n\n    /**\n     * Cause a binary response to be returned\n     * @param in input stream containing binary data to be sent\n     * @throws BinaryResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the BinaryResponseException.\n     */\n    public void sendBinaryResponse(InputStream in);\n\n    /**\n     * Convenience method to prepend the context path onto a servlet path\n     * @param path    a servlet path\n     * @return the context path plus the indicated path\n     */\n    public String absPath(String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @param options    extra html options to add to the anchor tag\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path, String options);\n\n    /**\n     * Convenience method to check if this request is a POST\n     */\n    public boolean isPost();\n\n    /**\n     * Convenience method to check if this request is a GET\n     */\n    public boolean isGet();\n\n    /**\n     * Convenience method to retrieve a value from the flash\n     * @param key  the key to use to lookup a flash value\n     * @return the flash value associated with the indicated key or null\n     * @see #setFlash\n     */\n    public String getFlash(String key);\n\n    /**\n     * Convenience method to add a value to the flash\n     * @param key  the key to use to associate with the flash value\n     * @param val  the value to store\n     * @see #getFlash\n     */\n    public void setFlash(String key, String val);\n\n    /**\n     * Internal method used to retrieve a cached block\n     * @see #setCachedBlock\n     */\n    public static String getCachedBlock(String key);\n\n    /**\n     * Internal method used to store a cached block\n     * @see #getCachedBlock\n     */\n    public static void setCachedBlock(String key, String val);\n\n    /**\n     * For debugging\n     * @return a string representation of this request context\n     */\n    public String toString();\n\n    public String toString(String sep);\n\n    /**\n     * Copy an input stream to an output stream.\n     */\n    private byte[] readStream(InputStream in) throws IOException;\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_3Test.java",
    "test_prompt": "// JVCRequestContext_3Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#getAttribute(String)} method.\n*/\nclass JVCRequestContext_3Test {",
    "method_signature": "getAttribute(String)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    /**\n     * The actual HttpServletRequest object\n     */\n    public final HttpServletRequest request;\n\n    /**\n     * The actual HttpServletResponse object\n     */\n    public final HttpServletResponse response;\n\n    /**\n     * The HttpServlet object (actually this is a JVCDispatcher)\n     */\n    public final HttpServlet servlet;\n\n    /**\n     * The controller is the servlet path up to the action.\n     */\n    public final String controller;\n\n    /**\n     * The action is the last part of the servlet path (before any query arguments)\n     */\n    public final String action;\n\n    /**\n     * Tells if this request has multipart content (ie file upload)\n     */\n    public final boolean hasMultipartContent;\n\n    /**\n     * Parameter value indicating that the real parameter value is binary (and should be\n     * accessed via the getAttribute() method.\n     */\n    public static final String BINARY_VALUE \u003d \"BINARY_VALUE\";\n\n    /**\n     * The \u0027flash\u0027 map for holding temporary key/value strings.\n     */\n    public final Map\u003cString, String\u003e flash;\n\n    /**\n     * Holds cached page generator fragments\n     */\n    private static Map\u003cString, String\u003e cacheMap;\n\n    /**\n     * Constructor for JVCRequestContext which is used to hold http request and response iformation\n     * @param request\n     * @param response\n     * @param servlet\n     * @param flash\n     * @param controller\n     * @param action\n     */\n    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map\u003cString, String\u003e flash, String controller, String action) throws Exception {\n    }\n\n    /**\n     * Convenience method\n     * @return true if the request is secure\n     */\n    public boolean isSecure();\n\n    /**\n     * Convenience method\n     * @return the request scheme, ie. http, https\n     */\n    public String getScheme();\n\n    /**\n     * Convenience method\n     * @return the request method, ie. GET, POST\n     */\n    public String getMethod();\n\n    /**\n     * Convenience method\n     * @return the server name for this request\n     */\n    public String getServerName();\n\n    /**\n     * Convenience method\n     * @return the server port for this request\n     */\n    public int getServerPort();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getServletPath\n     * @see #getQueryString\n     * @return the context path part of the url path\n     */\n    public String getContextPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getQueryString\n     * @return the servlet path part of the url path\n     */\n    public String getServletPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getServletPath\n     * @return the query string part of the url path\n     */\n    public String getQueryString();\n\n    /**\n     * Convenience method\n     * @param name    which parameter to get\n     * @return the parameter value or null if there is no parameter corresponding to the indicated key\n     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,\n     * which can be retrieved as a byte array via the getAttribute method.\n     * @see #getParamMap\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public String getParam(String name);\n\n    /**\n     * Convenience method which gathers all parameters of the\n     * form \u0027\u003cname\u003e[\u003ckey\u003e]\u0027 and return then in a map where the\n     * keys are the \u003ckey\u003e strings and the values are the\n     * corresponding parameter values.\n     * \u003cpre\u003e\n     * For example, if there are parameters:\n     *   \u0027foo[bar1]\u0027 \u003d \u0027baz1\u0027\n     *   \u0027foo[bar2]\u0027 \u003d \u0027baz2\u0027\n     * then getParamMap(\u0027foo\u0027) will returned the map:\n     *   map[\u0027bar1\u0027] \u003d \u0027baz1\u0027\n     *   map[\u0027bar2\u0027] \u003d \u0027baz2\u0027\n     * \u003c/pre\u003e\n     * @param name  the prefix to be used to select parameters\n     * @return a map of all paramters of the form \u0027name[\u003ckey\u003e]\u0027\n     * where the \u003ckey\u003e strings are the keys of the map and the\n     * values are the corresponding parameter values.\n     * @see #getParam\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public Map\u003cString, String\u003e getParamMap(String name);\n\n    /**\n     * Convenience method. Use this if you expect a parameter name\n     * to map to multiple values.\n     * @param name    the name of the parameter(s) to get\n     * @return an array of paramter values corresponding to the indicated name\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamNames\n     */\n    public String[] getParamValues(String name);\n\n    /**\n     * Convenience method to get all the parameter names.\n     * @return an array of all parameter names\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamValues\n     */\n    public String[] getParamNames();\n\n    /**\n     * Convenience method\n     * @param name    which attribute to get\n     * @return the attribute value or null if there is no attribute corresponding to the indicated key.\n     * If the attribute corresponds to a file upload field then the return value will be a byte array\n     */\n    public Object getAttribute(String name);\n\n    /**\n     * Convenience method\n     * @param name    name of attribute to be set\n     * @param value   value of attribute to be set\n     */\n    public void setAttribute(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name    the name of the attribute to retrieve\n     * @return the attribute associated with the indicated name or null\n     * @see #setSessionAttr\n     * @see #getSessionAttrNames\n     */\n    public Object getSessionAttr(String name);\n\n    /**\n     * Convenience method\n     * @return all the session attribute names.\n     * @see #getSessionAttr\n     * @see #setSessionAttr\n     * @see #removeSessionAttr\n     */\n    public String[] getSessionAttrNames();\n\n    /**\n     * Convenience method\n     * @param name  the key to store the indicated value\n     * @param value  the object to be stored\n     * @see #getSessionAttr\n     * @see #removeSessionAttr\n     */\n    public void setSessionAttr(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name  the key of\n     * @see #setSessionAttr\n     */\n    public void removeSessionAttr(String name);\n\n    /**\n     * Convenience method to get cookie by name\n     * @param name  the name of the cookie to get\n     * @return the cookie with the indicated name, or null\n     * @see #setCookie\n     * @see #getCookieNames\n     */\n    public Cookie getCookie(String name);\n\n    /**\n     * Convenience method to get all the cookie names.\n     * @return an array of the names of all the cookies in the request, possibly empty\n     * @see #getCookie\n     * @see #setCookie\n     */\n    public String[] getCookieNames();\n\n    /**\n     * Convenience method\n     * @param cookie   the cookie to be added to the response\n     * @see #getCookie\n     * @see #getCookieNames\n     */\n    public void setCookie(Cookie cookie);\n\n    /**\n     * Cause a non-standard response (ie. redirect) to be returned.\n     * @param httpCode   the http response code to be returned\n     * @param arg    an argument or message to be returned (depends on response code)\n     * @see #redirect\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void nonStandardResponse(int httpCode, String arg);\n\n    /**\n     * Cause a redirect response to be returned\n     * @param path  where to redirect to. If the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #nonStandardResponse\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void redirect(String path);\n\n    /**\n     * Cause a binary response to be returned\n     * @param in input stream containing binary data to be sent\n     * @throws BinaryResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the BinaryResponseException.\n     */\n    public void sendBinaryResponse(InputStream in);\n\n    /**\n     * Convenience method to prepend the context path onto a servlet path\n     * @param path    a servlet path\n     * @return the context path plus the indicated path\n     */\n    public String absPath(String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @param options    extra html options to add to the anchor tag\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path, String options);\n\n    /**\n     * Convenience method to check if this request is a POST\n     */\n    public boolean isPost();\n\n    /**\n     * Convenience method to check if this request is a GET\n     */\n    public boolean isGet();\n\n    /**\n     * Convenience method to retrieve a value from the flash\n     * @param key  the key to use to lookup a flash value\n     * @return the flash value associated with the indicated key or null\n     * @see #setFlash\n     */\n    public String getFlash(String key);\n\n    /**\n     * Convenience method to add a value to the flash\n     * @param key  the key to use to associate with the flash value\n     * @param val  the value to store\n     * @see #getFlash\n     */\n    public void setFlash(String key, String val);\n\n    /**\n     * Internal method used to retrieve a cached block\n     * @see #setCachedBlock\n     */\n    public static String getCachedBlock(String key);\n\n    /**\n     * Internal method used to store a cached block\n     * @see #getCachedBlock\n     */\n    public static void setCachedBlock(String key, String val);\n\n    /**\n     * For debugging\n     * @return a string representation of this request context\n     */\n    public String toString();\n\n    public String toString(String sep);\n\n    /**\n     * Copy an input stream to an output stream.\n     */\n    private byte[] readStream(InputStream in) throws IOException;\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_4Test.java",
    "test_prompt": "// JVCRequestContext_4Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#getSessionAttr(String)} method.\n*/\nclass JVCRequestContext_4Test {",
    "method_signature": "getSessionAttr(String)",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    /**\n     * The actual HttpServletRequest object\n     */\n    public final HttpServletRequest request;\n\n    /**\n     * The actual HttpServletResponse object\n     */\n    public final HttpServletResponse response;\n\n    /**\n     * The HttpServlet object (actually this is a JVCDispatcher)\n     */\n    public final HttpServlet servlet;\n\n    /**\n     * The controller is the servlet path up to the action.\n     */\n    public final String controller;\n\n    /**\n     * The action is the last part of the servlet path (before any query arguments)\n     */\n    public final String action;\n\n    /**\n     * Tells if this request has multipart content (ie file upload)\n     */\n    public final boolean hasMultipartContent;\n\n    /**\n     * Parameter value indicating that the real parameter value is binary (and should be\n     * accessed via the getAttribute() method.\n     */\n    public static final String BINARY_VALUE \u003d \"BINARY_VALUE\";\n\n    /**\n     * The \u0027flash\u0027 map for holding temporary key/value strings.\n     */\n    public final Map\u003cString, String\u003e flash;\n\n    /**\n     * Holds cached page generator fragments\n     */\n    private static Map\u003cString, String\u003e cacheMap;\n\n    /**\n     * Constructor for JVCRequestContext which is used to hold http request and response iformation\n     * @param request\n     * @param response\n     * @param servlet\n     * @param flash\n     * @param controller\n     * @param action\n     */\n    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map\u003cString, String\u003e flash, String controller, String action) throws Exception {\n    }\n\n    /**\n     * Convenience method\n     * @return true if the request is secure\n     */\n    public boolean isSecure();\n\n    /**\n     * Convenience method\n     * @return the request scheme, ie. http, https\n     */\n    public String getScheme();\n\n    /**\n     * Convenience method\n     * @return the request method, ie. GET, POST\n     */\n    public String getMethod();\n\n    /**\n     * Convenience method\n     * @return the server name for this request\n     */\n    public String getServerName();\n\n    /**\n     * Convenience method\n     * @return the server port for this request\n     */\n    public int getServerPort();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getServletPath\n     * @see #getQueryString\n     * @return the context path part of the url path\n     */\n    public String getContextPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getQueryString\n     * @return the servlet path part of the url path\n     */\n    public String getServletPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getServletPath\n     * @return the query string part of the url path\n     */\n    public String getQueryString();\n\n    /**\n     * Convenience method\n     * @param name    which parameter to get\n     * @return the parameter value or null if there is no parameter corresponding to the indicated key\n     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,\n     * which can be retrieved as a byte array via the getAttribute method.\n     * @see #getParamMap\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public String getParam(String name);\n\n    /**\n     * Convenience method which gathers all parameters of the\n     * form \u0027\u003cname\u003e[\u003ckey\u003e]\u0027 and return then in a map where the\n     * keys are the \u003ckey\u003e strings and the values are the\n     * corresponding parameter values.\n     * \u003cpre\u003e\n     * For example, if there are parameters:\n     *   \u0027foo[bar1]\u0027 \u003d \u0027baz1\u0027\n     *   \u0027foo[bar2]\u0027 \u003d \u0027baz2\u0027\n     * then getParamMap(\u0027foo\u0027) will returned the map:\n     *   map[\u0027bar1\u0027] \u003d \u0027baz1\u0027\n     *   map[\u0027bar2\u0027] \u003d \u0027baz2\u0027\n     * \u003c/pre\u003e\n     * @param name  the prefix to be used to select parameters\n     * @return a map of all paramters of the form \u0027name[\u003ckey\u003e]\u0027\n     * where the \u003ckey\u003e strings are the keys of the map and the\n     * values are the corresponding parameter values.\n     * @see #getParam\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public Map\u003cString, String\u003e getParamMap(String name);\n\n    /**\n     * Convenience method. Use this if you expect a parameter name\n     * to map to multiple values.\n     * @param name    the name of the parameter(s) to get\n     * @return an array of paramter values corresponding to the indicated name\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamNames\n     */\n    public String[] getParamValues(String name);\n\n    /**\n     * Convenience method to get all the parameter names.\n     * @return an array of all parameter names\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamValues\n     */\n    public String[] getParamNames();\n\n    /**\n     * Convenience method\n     * @param name    which attribute to get\n     * @return the attribute value or null if there is no attribute corresponding to the indicated key.\n     * If the attribute corresponds to a file upload field then the return value will be a byte array\n     */\n    public Object getAttribute(String name);\n\n    /**\n     * Convenience method\n     * @param name    name of attribute to be set\n     * @param value   value of attribute to be set\n     */\n    public void setAttribute(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name    the name of the attribute to retrieve\n     * @return the attribute associated with the indicated name or null\n     * @see #setSessionAttr\n     * @see #getSessionAttrNames\n     */\n    public Object getSessionAttr(String name);\n\n    /**\n     * Convenience method\n     * @return all the session attribute names.\n     * @see #getSessionAttr\n     * @see #setSessionAttr\n     * @see #removeSessionAttr\n     */\n    public String[] getSessionAttrNames();\n\n    /**\n     * Convenience method\n     * @param name  the key to store the indicated value\n     * @param value  the object to be stored\n     * @see #getSessionAttr\n     * @see #removeSessionAttr\n     */\n    public void setSessionAttr(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name  the key of\n     * @see #setSessionAttr\n     */\n    public void removeSessionAttr(String name);\n\n    /**\n     * Convenience method to get cookie by name\n     * @param name  the name of the cookie to get\n     * @return the cookie with the indicated name, or null\n     * @see #setCookie\n     * @see #getCookieNames\n     */\n    public Cookie getCookie(String name);\n\n    /**\n     * Convenience method to get all the cookie names.\n     * @return an array of the names of all the cookies in the request, possibly empty\n     * @see #getCookie\n     * @see #setCookie\n     */\n    public String[] getCookieNames();\n\n    /**\n     * Convenience method\n     * @param cookie   the cookie to be added to the response\n     * @see #getCookie\n     * @see #getCookieNames\n     */\n    public void setCookie(Cookie cookie);\n\n    /**\n     * Cause a non-standard response (ie. redirect) to be returned.\n     * @param httpCode   the http response code to be returned\n     * @param arg    an argument or message to be returned (depends on response code)\n     * @see #redirect\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void nonStandardResponse(int httpCode, String arg);\n\n    /**\n     * Cause a redirect response to be returned\n     * @param path  where to redirect to. If the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #nonStandardResponse\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void redirect(String path);\n\n    /**\n     * Cause a binary response to be returned\n     * @param in input stream containing binary data to be sent\n     * @throws BinaryResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the BinaryResponseException.\n     */\n    public void sendBinaryResponse(InputStream in);\n\n    /**\n     * Convenience method to prepend the context path onto a servlet path\n     * @param path    a servlet path\n     * @return the context path plus the indicated path\n     */\n    public String absPath(String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @param options    extra html options to add to the anchor tag\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path, String options);\n\n    /**\n     * Convenience method to check if this request is a POST\n     */\n    public boolean isPost();\n\n    /**\n     * Convenience method to check if this request is a GET\n     */\n    public boolean isGet();\n\n    /**\n     * Convenience method to retrieve a value from the flash\n     * @param key  the key to use to lookup a flash value\n     * @return the flash value associated with the indicated key or null\n     * @see #setFlash\n     */\n    public String getFlash(String key);\n\n    /**\n     * Convenience method to add a value to the flash\n     * @param key  the key to use to associate with the flash value\n     * @param val  the value to store\n     * @see #getFlash\n     */\n    public void setFlash(String key, String val);\n\n    /**\n     * Internal method used to retrieve a cached block\n     * @see #setCachedBlock\n     */\n    public static String getCachedBlock(String key);\n\n    /**\n     * Internal method used to store a cached block\n     * @see #getCachedBlock\n     */\n    public static void setCachedBlock(String key, String val);\n\n    /**\n     * For debugging\n     * @return a string representation of this request context\n     */\n    public String toString();\n\n    public String toString(String sep);\n\n    /**\n     * Copy an input stream to an output stream.\n     */\n    private byte[] readStream(InputStream in) throws IOException;\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_5Test.java",
    "test_prompt": "// JVCRequestContext_5Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#getCookie(String)} method.\n*/\nclass JVCRequestContext_5Test {",
    "method_signature": "getCookie(String)",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    /**\n     * The actual HttpServletRequest object\n     */\n    public final HttpServletRequest request;\n\n    /**\n     * The actual HttpServletResponse object\n     */\n    public final HttpServletResponse response;\n\n    /**\n     * The HttpServlet object (actually this is a JVCDispatcher)\n     */\n    public final HttpServlet servlet;\n\n    /**\n     * The controller is the servlet path up to the action.\n     */\n    public final String controller;\n\n    /**\n     * The action is the last part of the servlet path (before any query arguments)\n     */\n    public final String action;\n\n    /**\n     * Tells if this request has multipart content (ie file upload)\n     */\n    public final boolean hasMultipartContent;\n\n    /**\n     * Parameter value indicating that the real parameter value is binary (and should be\n     * accessed via the getAttribute() method.\n     */\n    public static final String BINARY_VALUE \u003d \"BINARY_VALUE\";\n\n    /**\n     * The \u0027flash\u0027 map for holding temporary key/value strings.\n     */\n    public final Map\u003cString, String\u003e flash;\n\n    /**\n     * Holds cached page generator fragments\n     */\n    private static Map\u003cString, String\u003e cacheMap;\n\n    /**\n     * Constructor for JVCRequestContext which is used to hold http request and response iformation\n     * @param request\n     * @param response\n     * @param servlet\n     * @param flash\n     * @param controller\n     * @param action\n     */\n    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map\u003cString, String\u003e flash, String controller, String action) throws Exception {\n    }\n\n    /**\n     * Convenience method\n     * @return true if the request is secure\n     */\n    public boolean isSecure();\n\n    /**\n     * Convenience method\n     * @return the request scheme, ie. http, https\n     */\n    public String getScheme();\n\n    /**\n     * Convenience method\n     * @return the request method, ie. GET, POST\n     */\n    public String getMethod();\n\n    /**\n     * Convenience method\n     * @return the server name for this request\n     */\n    public String getServerName();\n\n    /**\n     * Convenience method\n     * @return the server port for this request\n     */\n    public int getServerPort();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getServletPath\n     * @see #getQueryString\n     * @return the context path part of the url path\n     */\n    public String getContextPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getQueryString\n     * @return the servlet path part of the url path\n     */\n    public String getServletPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getServletPath\n     * @return the query string part of the url path\n     */\n    public String getQueryString();\n\n    /**\n     * Convenience method\n     * @param name    which parameter to get\n     * @return the parameter value or null if there is no parameter corresponding to the indicated key\n     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,\n     * which can be retrieved as a byte array via the getAttribute method.\n     * @see #getParamMap\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public String getParam(String name);\n\n    /**\n     * Convenience method which gathers all parameters of the\n     * form \u0027\u003cname\u003e[\u003ckey\u003e]\u0027 and return then in a map where the\n     * keys are the \u003ckey\u003e strings and the values are the\n     * corresponding parameter values.\n     * \u003cpre\u003e\n     * For example, if there are parameters:\n     *   \u0027foo[bar1]\u0027 \u003d \u0027baz1\u0027\n     *   \u0027foo[bar2]\u0027 \u003d \u0027baz2\u0027\n     * then getParamMap(\u0027foo\u0027) will returned the map:\n     *   map[\u0027bar1\u0027] \u003d \u0027baz1\u0027\n     *   map[\u0027bar2\u0027] \u003d \u0027baz2\u0027\n     * \u003c/pre\u003e\n     * @param name  the prefix to be used to select parameters\n     * @return a map of all paramters of the form \u0027name[\u003ckey\u003e]\u0027\n     * where the \u003ckey\u003e strings are the keys of the map and the\n     * values are the corresponding parameter values.\n     * @see #getParam\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public Map\u003cString, String\u003e getParamMap(String name);\n\n    /**\n     * Convenience method. Use this if you expect a parameter name\n     * to map to multiple values.\n     * @param name    the name of the parameter(s) to get\n     * @return an array of paramter values corresponding to the indicated name\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamNames\n     */\n    public String[] getParamValues(String name);\n\n    /**\n     * Convenience method to get all the parameter names.\n     * @return an array of all parameter names\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamValues\n     */\n    public String[] getParamNames();\n\n    /**\n     * Convenience method\n     * @param name    which attribute to get\n     * @return the attribute value or null if there is no attribute corresponding to the indicated key.\n     * If the attribute corresponds to a file upload field then the return value will be a byte array\n     */\n    public Object getAttribute(String name);\n\n    /**\n     * Convenience method\n     * @param name    name of attribute to be set\n     * @param value   value of attribute to be set\n     */\n    public void setAttribute(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name    the name of the attribute to retrieve\n     * @return the attribute associated with the indicated name or null\n     * @see #setSessionAttr\n     * @see #getSessionAttrNames\n     */\n    public Object getSessionAttr(String name);\n\n    /**\n     * Convenience method\n     * @return all the session attribute names.\n     * @see #getSessionAttr\n     * @see #setSessionAttr\n     * @see #removeSessionAttr\n     */\n    public String[] getSessionAttrNames();\n\n    /**\n     * Convenience method\n     * @param name  the key to store the indicated value\n     * @param value  the object to be stored\n     * @see #getSessionAttr\n     * @see #removeSessionAttr\n     */\n    public void setSessionAttr(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name  the key of\n     * @see #setSessionAttr\n     */\n    public void removeSessionAttr(String name);\n\n    /**\n     * Convenience method to get cookie by name\n     * @param name  the name of the cookie to get\n     * @return the cookie with the indicated name, or null\n     * @see #setCookie\n     * @see #getCookieNames\n     */\n    public Cookie getCookie(String name);\n\n    /**\n     * Convenience method to get all the cookie names.\n     * @return an array of the names of all the cookies in the request, possibly empty\n     * @see #getCookie\n     * @see #setCookie\n     */\n    public String[] getCookieNames();\n\n    /**\n     * Convenience method\n     * @param cookie   the cookie to be added to the response\n     * @see #getCookie\n     * @see #getCookieNames\n     */\n    public void setCookie(Cookie cookie);\n\n    /**\n     * Cause a non-standard response (ie. redirect) to be returned.\n     * @param httpCode   the http response code to be returned\n     * @param arg    an argument or message to be returned (depends on response code)\n     * @see #redirect\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void nonStandardResponse(int httpCode, String arg);\n\n    /**\n     * Cause a redirect response to be returned\n     * @param path  where to redirect to. If the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #nonStandardResponse\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void redirect(String path);\n\n    /**\n     * Cause a binary response to be returned\n     * @param in input stream containing binary data to be sent\n     * @throws BinaryResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the BinaryResponseException.\n     */\n    public void sendBinaryResponse(InputStream in);\n\n    /**\n     * Convenience method to prepend the context path onto a servlet path\n     * @param path    a servlet path\n     * @return the context path plus the indicated path\n     */\n    public String absPath(String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @param options    extra html options to add to the anchor tag\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path, String options);\n\n    /**\n     * Convenience method to check if this request is a POST\n     */\n    public boolean isPost();\n\n    /**\n     * Convenience method to check if this request is a GET\n     */\n    public boolean isGet();\n\n    /**\n     * Convenience method to retrieve a value from the flash\n     * @param key  the key to use to lookup a flash value\n     * @return the flash value associated with the indicated key or null\n     * @see #setFlash\n     */\n    public String getFlash(String key);\n\n    /**\n     * Convenience method to add a value to the flash\n     * @param key  the key to use to associate with the flash value\n     * @param val  the value to store\n     * @see #getFlash\n     */\n    public void setFlash(String key, String val);\n\n    /**\n     * Internal method used to retrieve a cached block\n     * @see #setCachedBlock\n     */\n    public static String getCachedBlock(String key);\n\n    /**\n     * Internal method used to store a cached block\n     * @see #getCachedBlock\n     */\n    public static void setCachedBlock(String key, String val);\n\n    /**\n     * For debugging\n     * @return a string representation of this request context\n     */\n    public String toString();\n\n    public String toString(String sep);\n\n    /**\n     * Copy an input stream to an output stream.\n     */\n    private byte[] readStream(InputStream in) throws IOException;\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_6Test.java",
    "test_prompt": "// JVCRequestContext_6Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#absPath(String)} method.\n*/\nclass JVCRequestContext_6Test {",
    "method_signature": "absPath(String)",
    "suffix": "6"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    /**\n     * The actual HttpServletRequest object\n     */\n    public final HttpServletRequest request;\n\n    /**\n     * The actual HttpServletResponse object\n     */\n    public final HttpServletResponse response;\n\n    /**\n     * The HttpServlet object (actually this is a JVCDispatcher)\n     */\n    public final HttpServlet servlet;\n\n    /**\n     * The controller is the servlet path up to the action.\n     */\n    public final String controller;\n\n    /**\n     * The action is the last part of the servlet path (before any query arguments)\n     */\n    public final String action;\n\n    /**\n     * Tells if this request has multipart content (ie file upload)\n     */\n    public final boolean hasMultipartContent;\n\n    /**\n     * Parameter value indicating that the real parameter value is binary (and should be\n     * accessed via the getAttribute() method.\n     */\n    public static final String BINARY_VALUE \u003d \"BINARY_VALUE\";\n\n    /**\n     * The \u0027flash\u0027 map for holding temporary key/value strings.\n     */\n    public final Map\u003cString, String\u003e flash;\n\n    /**\n     * Holds cached page generator fragments\n     */\n    private static Map\u003cString, String\u003e cacheMap;\n\n    /**\n     * Constructor for JVCRequestContext which is used to hold http request and response iformation\n     * @param request\n     * @param response\n     * @param servlet\n     * @param flash\n     * @param controller\n     * @param action\n     */\n    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map\u003cString, String\u003e flash, String controller, String action) throws Exception {\n    }\n\n    /**\n     * Convenience method\n     * @return true if the request is secure\n     */\n    public boolean isSecure();\n\n    /**\n     * Convenience method\n     * @return the request scheme, ie. http, https\n     */\n    public String getScheme();\n\n    /**\n     * Convenience method\n     * @return the request method, ie. GET, POST\n     */\n    public String getMethod();\n\n    /**\n     * Convenience method\n     * @return the server name for this request\n     */\n    public String getServerName();\n\n    /**\n     * Convenience method\n     * @return the server port for this request\n     */\n    public int getServerPort();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getServletPath\n     * @see #getQueryString\n     * @return the context path part of the url path\n     */\n    public String getContextPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getQueryString\n     * @return the servlet path part of the url path\n     */\n    public String getServletPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getServletPath\n     * @return the query string part of the url path\n     */\n    public String getQueryString();\n\n    /**\n     * Convenience method\n     * @param name    which parameter to get\n     * @return the parameter value or null if there is no parameter corresponding to the indicated key\n     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,\n     * which can be retrieved as a byte array via the getAttribute method.\n     * @see #getParamMap\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public String getParam(String name);\n\n    /**\n     * Convenience method which gathers all parameters of the\n     * form \u0027\u003cname\u003e[\u003ckey\u003e]\u0027 and return then in a map where the\n     * keys are the \u003ckey\u003e strings and the values are the\n     * corresponding parameter values.\n     * \u003cpre\u003e\n     * For example, if there are parameters:\n     *   \u0027foo[bar1]\u0027 \u003d \u0027baz1\u0027\n     *   \u0027foo[bar2]\u0027 \u003d \u0027baz2\u0027\n     * then getParamMap(\u0027foo\u0027) will returned the map:\n     *   map[\u0027bar1\u0027] \u003d \u0027baz1\u0027\n     *   map[\u0027bar2\u0027] \u003d \u0027baz2\u0027\n     * \u003c/pre\u003e\n     * @param name  the prefix to be used to select parameters\n     * @return a map of all paramters of the form \u0027name[\u003ckey\u003e]\u0027\n     * where the \u003ckey\u003e strings are the keys of the map and the\n     * values are the corresponding parameter values.\n     * @see #getParam\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public Map\u003cString, String\u003e getParamMap(String name);\n\n    /**\n     * Convenience method. Use this if you expect a parameter name\n     * to map to multiple values.\n     * @param name    the name of the parameter(s) to get\n     * @return an array of paramter values corresponding to the indicated name\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamNames\n     */\n    public String[] getParamValues(String name);\n\n    /**\n     * Convenience method to get all the parameter names.\n     * @return an array of all parameter names\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamValues\n     */\n    public String[] getParamNames();\n\n    /**\n     * Convenience method\n     * @param name    which attribute to get\n     * @return the attribute value or null if there is no attribute corresponding to the indicated key.\n     * If the attribute corresponds to a file upload field then the return value will be a byte array\n     */\n    public Object getAttribute(String name);\n\n    /**\n     * Convenience method\n     * @param name    name of attribute to be set\n     * @param value   value of attribute to be set\n     */\n    public void setAttribute(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name    the name of the attribute to retrieve\n     * @return the attribute associated with the indicated name or null\n     * @see #setSessionAttr\n     * @see #getSessionAttrNames\n     */\n    public Object getSessionAttr(String name);\n\n    /**\n     * Convenience method\n     * @return all the session attribute names.\n     * @see #getSessionAttr\n     * @see #setSessionAttr\n     * @see #removeSessionAttr\n     */\n    public String[] getSessionAttrNames();\n\n    /**\n     * Convenience method\n     * @param name  the key to store the indicated value\n     * @param value  the object to be stored\n     * @see #getSessionAttr\n     * @see #removeSessionAttr\n     */\n    public void setSessionAttr(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name  the key of\n     * @see #setSessionAttr\n     */\n    public void removeSessionAttr(String name);\n\n    /**\n     * Convenience method to get cookie by name\n     * @param name  the name of the cookie to get\n     * @return the cookie with the indicated name, or null\n     * @see #setCookie\n     * @see #getCookieNames\n     */\n    public Cookie getCookie(String name);\n\n    /**\n     * Convenience method to get all the cookie names.\n     * @return an array of the names of all the cookies in the request, possibly empty\n     * @see #getCookie\n     * @see #setCookie\n     */\n    public String[] getCookieNames();\n\n    /**\n     * Convenience method\n     * @param cookie   the cookie to be added to the response\n     * @see #getCookie\n     * @see #getCookieNames\n     */\n    public void setCookie(Cookie cookie);\n\n    /**\n     * Cause a non-standard response (ie. redirect) to be returned.\n     * @param httpCode   the http response code to be returned\n     * @param arg    an argument or message to be returned (depends on response code)\n     * @see #redirect\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void nonStandardResponse(int httpCode, String arg);\n\n    /**\n     * Cause a redirect response to be returned\n     * @param path  where to redirect to. If the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #nonStandardResponse\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void redirect(String path);\n\n    /**\n     * Cause a binary response to be returned\n     * @param in input stream containing binary data to be sent\n     * @throws BinaryResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the BinaryResponseException.\n     */\n    public void sendBinaryResponse(InputStream in);\n\n    /**\n     * Convenience method to prepend the context path onto a servlet path\n     * @param path    a servlet path\n     * @return the context path plus the indicated path\n     */\n    public String absPath(String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @param options    extra html options to add to the anchor tag\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path, String options);\n\n    /**\n     * Convenience method to check if this request is a POST\n     */\n    public boolean isPost();\n\n    /**\n     * Convenience method to check if this request is a GET\n     */\n    public boolean isGet();\n\n    /**\n     * Convenience method to retrieve a value from the flash\n     * @param key  the key to use to lookup a flash value\n     * @return the flash value associated with the indicated key or null\n     * @see #setFlash\n     */\n    public String getFlash(String key);\n\n    /**\n     * Convenience method to add a value to the flash\n     * @param key  the key to use to associate with the flash value\n     * @param val  the value to store\n     * @see #getFlash\n     */\n    public void setFlash(String key, String val);\n\n    /**\n     * Internal method used to retrieve a cached block\n     * @see #setCachedBlock\n     */\n    public static String getCachedBlock(String key);\n\n    /**\n     * Internal method used to store a cached block\n     * @see #getCachedBlock\n     */\n    public static void setCachedBlock(String key, String val);\n\n    /**\n     * For debugging\n     * @return a string representation of this request context\n     */\n    public String toString();\n\n    public String toString(String sep);\n\n    /**\n     * Copy an input stream to an output stream.\n     */\n    private byte[] readStream(InputStream in) throws IOException;\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_7Test.java",
    "test_prompt": "// JVCRequestContext_7Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#makeLink(String, String)} method.\n*/\nclass JVCRequestContext_7Test {",
    "method_signature": "makeLink(String, String)",
    "suffix": "7"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    /**\n     * The actual HttpServletRequest object\n     */\n    public final HttpServletRequest request;\n\n    /**\n     * The actual HttpServletResponse object\n     */\n    public final HttpServletResponse response;\n\n    /**\n     * The HttpServlet object (actually this is a JVCDispatcher)\n     */\n    public final HttpServlet servlet;\n\n    /**\n     * The controller is the servlet path up to the action.\n     */\n    public final String controller;\n\n    /**\n     * The action is the last part of the servlet path (before any query arguments)\n     */\n    public final String action;\n\n    /**\n     * Tells if this request has multipart content (ie file upload)\n     */\n    public final boolean hasMultipartContent;\n\n    /**\n     * Parameter value indicating that the real parameter value is binary (and should be\n     * accessed via the getAttribute() method.\n     */\n    public static final String BINARY_VALUE \u003d \"BINARY_VALUE\";\n\n    /**\n     * The \u0027flash\u0027 map for holding temporary key/value strings.\n     */\n    public final Map\u003cString, String\u003e flash;\n\n    /**\n     * Holds cached page generator fragments\n     */\n    private static Map\u003cString, String\u003e cacheMap;\n\n    /**\n     * Constructor for JVCRequestContext which is used to hold http request and response iformation\n     * @param request\n     * @param response\n     * @param servlet\n     * @param flash\n     * @param controller\n     * @param action\n     */\n    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map\u003cString, String\u003e flash, String controller, String action) throws Exception {\n    }\n\n    /**\n     * Convenience method\n     * @return true if the request is secure\n     */\n    public boolean isSecure();\n\n    /**\n     * Convenience method\n     * @return the request scheme, ie. http, https\n     */\n    public String getScheme();\n\n    /**\n     * Convenience method\n     * @return the request method, ie. GET, POST\n     */\n    public String getMethod();\n\n    /**\n     * Convenience method\n     * @return the server name for this request\n     */\n    public String getServerName();\n\n    /**\n     * Convenience method\n     * @return the server port for this request\n     */\n    public int getServerPort();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getServletPath\n     * @see #getQueryString\n     * @return the context path part of the url path\n     */\n    public String getContextPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getQueryString\n     * @return the servlet path part of the url path\n     */\n    public String getServletPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getServletPath\n     * @return the query string part of the url path\n     */\n    public String getQueryString();\n\n    /**\n     * Convenience method\n     * @param name    which parameter to get\n     * @return the parameter value or null if there is no parameter corresponding to the indicated key\n     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,\n     * which can be retrieved as a byte array via the getAttribute method.\n     * @see #getParamMap\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public String getParam(String name);\n\n    /**\n     * Convenience method which gathers all parameters of the\n     * form \u0027\u003cname\u003e[\u003ckey\u003e]\u0027 and return then in a map where the\n     * keys are the \u003ckey\u003e strings and the values are the\n     * corresponding parameter values.\n     * \u003cpre\u003e\n     * For example, if there are parameters:\n     *   \u0027foo[bar1]\u0027 \u003d \u0027baz1\u0027\n     *   \u0027foo[bar2]\u0027 \u003d \u0027baz2\u0027\n     * then getParamMap(\u0027foo\u0027) will returned the map:\n     *   map[\u0027bar1\u0027] \u003d \u0027baz1\u0027\n     *   map[\u0027bar2\u0027] \u003d \u0027baz2\u0027\n     * \u003c/pre\u003e\n     * @param name  the prefix to be used to select parameters\n     * @return a map of all paramters of the form \u0027name[\u003ckey\u003e]\u0027\n     * where the \u003ckey\u003e strings are the keys of the map and the\n     * values are the corresponding parameter values.\n     * @see #getParam\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public Map\u003cString, String\u003e getParamMap(String name);\n\n    /**\n     * Convenience method. Use this if you expect a parameter name\n     * to map to multiple values.\n     * @param name    the name of the parameter(s) to get\n     * @return an array of paramter values corresponding to the indicated name\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamNames\n     */\n    public String[] getParamValues(String name);\n\n    /**\n     * Convenience method to get all the parameter names.\n     * @return an array of all parameter names\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamValues\n     */\n    public String[] getParamNames();\n\n    /**\n     * Convenience method\n     * @param name    which attribute to get\n     * @return the attribute value or null if there is no attribute corresponding to the indicated key.\n     * If the attribute corresponds to a file upload field then the return value will be a byte array\n     */\n    public Object getAttribute(String name);\n\n    /**\n     * Convenience method\n     * @param name    name of attribute to be set\n     * @param value   value of attribute to be set\n     */\n    public void setAttribute(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name    the name of the attribute to retrieve\n     * @return the attribute associated with the indicated name or null\n     * @see #setSessionAttr\n     * @see #getSessionAttrNames\n     */\n    public Object getSessionAttr(String name);\n\n    /**\n     * Convenience method\n     * @return all the session attribute names.\n     * @see #getSessionAttr\n     * @see #setSessionAttr\n     * @see #removeSessionAttr\n     */\n    public String[] getSessionAttrNames();\n\n    /**\n     * Convenience method\n     * @param name  the key to store the indicated value\n     * @param value  the object to be stored\n     * @see #getSessionAttr\n     * @see #removeSessionAttr\n     */\n    public void setSessionAttr(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name  the key of\n     * @see #setSessionAttr\n     */\n    public void removeSessionAttr(String name);\n\n    /**\n     * Convenience method to get cookie by name\n     * @param name  the name of the cookie to get\n     * @return the cookie with the indicated name, or null\n     * @see #setCookie\n     * @see #getCookieNames\n     */\n    public Cookie getCookie(String name);\n\n    /**\n     * Convenience method to get all the cookie names.\n     * @return an array of the names of all the cookies in the request, possibly empty\n     * @see #getCookie\n     * @see #setCookie\n     */\n    public String[] getCookieNames();\n\n    /**\n     * Convenience method\n     * @param cookie   the cookie to be added to the response\n     * @see #getCookie\n     * @see #getCookieNames\n     */\n    public void setCookie(Cookie cookie);\n\n    /**\n     * Cause a non-standard response (ie. redirect) to be returned.\n     * @param httpCode   the http response code to be returned\n     * @param arg    an argument or message to be returned (depends on response code)\n     * @see #redirect\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void nonStandardResponse(int httpCode, String arg);\n\n    /**\n     * Cause a redirect response to be returned\n     * @param path  where to redirect to. If the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #nonStandardResponse\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void redirect(String path);\n\n    /**\n     * Cause a binary response to be returned\n     * @param in input stream containing binary data to be sent\n     * @throws BinaryResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the BinaryResponseException.\n     */\n    public void sendBinaryResponse(InputStream in);\n\n    /**\n     * Convenience method to prepend the context path onto a servlet path\n     * @param path    a servlet path\n     * @return the context path plus the indicated path\n     */\n    public String absPath(String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @param options    extra html options to add to the anchor tag\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path, String options);\n\n    /**\n     * Convenience method to check if this request is a POST\n     */\n    public boolean isPost();\n\n    /**\n     * Convenience method to check if this request is a GET\n     */\n    public boolean isGet();\n\n    /**\n     * Convenience method to retrieve a value from the flash\n     * @param key  the key to use to lookup a flash value\n     * @return the flash value associated with the indicated key or null\n     * @see #setFlash\n     */\n    public String getFlash(String key);\n\n    /**\n     * Convenience method to add a value to the flash\n     * @param key  the key to use to associate with the flash value\n     * @param val  the value to store\n     * @see #getFlash\n     */\n    public void setFlash(String key, String val);\n\n    /**\n     * Internal method used to retrieve a cached block\n     * @see #setCachedBlock\n     */\n    public static String getCachedBlock(String key);\n\n    /**\n     * Internal method used to store a cached block\n     * @see #getCachedBlock\n     */\n    public static void setCachedBlock(String key, String val);\n\n    /**\n     * For debugging\n     * @return a string representation of this request context\n     */\n    public String toString();\n\n    public String toString(String sep);\n\n    /**\n     * Copy an input stream to an output stream.\n     */\n    private byte[] readStream(InputStream in) throws IOException;\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_8Test.java",
    "test_prompt": "// JVCRequestContext_8Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#makeLink(String, String, String)} method.\n*/\nclass JVCRequestContext_8Test {",
    "method_signature": "makeLink(String, String, String)",
    "suffix": "8"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCRequestContext.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\n\n/**\n * This class contains state information for processing an http request.\n * It wraps the standard HttpServletRequest, HttpServletResponse and HttpServlet\n * objects and provides convenience methods for accessing them.\n * \u003cp\u003e\n * It also provides access to the \u0027flash\u0027 which is a Map for storing temporary\n * key/value strings.  The scope of the flash is the current request or\n * the following request in the case of a redirect response.\n * \u003cp\u003e\n * It also contains some convenience methods for forming links and absolute paths.\n *\n * @author mike dooley\n */\npublic final class JVCRequestContext {\n\n    /**\n     * The actual HttpServletRequest object\n     */\n    public final HttpServletRequest request;\n\n    /**\n     * The actual HttpServletResponse object\n     */\n    public final HttpServletResponse response;\n\n    /**\n     * The HttpServlet object (actually this is a JVCDispatcher)\n     */\n    public final HttpServlet servlet;\n\n    /**\n     * The controller is the servlet path up to the action.\n     */\n    public final String controller;\n\n    /**\n     * The action is the last part of the servlet path (before any query arguments)\n     */\n    public final String action;\n\n    /**\n     * Tells if this request has multipart content (ie file upload)\n     */\n    public final boolean hasMultipartContent;\n\n    /**\n     * Parameter value indicating that the real parameter value is binary (and should be\n     * accessed via the getAttribute() method.\n     */\n    public static final String BINARY_VALUE \u003d \"BINARY_VALUE\";\n\n    /**\n     * The \u0027flash\u0027 map for holding temporary key/value strings.\n     */\n    public final Map\u003cString, String\u003e flash;\n\n    /**\n     * Holds cached page generator fragments\n     */\n    private static Map\u003cString, String\u003e cacheMap;\n\n    /**\n     * Constructor for JVCRequestContext which is used to hold http request and response iformation\n     * @param request\n     * @param response\n     * @param servlet\n     * @param flash\n     * @param controller\n     * @param action\n     */\n    JVCRequestContext(HttpServletRequest request, HttpServletResponse response, HttpServlet servlet, Map\u003cString, String\u003e flash, String controller, String action) throws Exception {\n    }\n\n    /**\n     * Convenience method\n     * @return true if the request is secure\n     */\n    public boolean isSecure();\n\n    /**\n     * Convenience method\n     * @return the request scheme, ie. http, https\n     */\n    public String getScheme();\n\n    /**\n     * Convenience method\n     * @return the request method, ie. GET, POST\n     */\n    public String getMethod();\n\n    /**\n     * Convenience method\n     * @return the server name for this request\n     */\n    public String getServerName();\n\n    /**\n     * Convenience method\n     * @return the server port for this request\n     */\n    public int getServerPort();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getServletPath\n     * @see #getQueryString\n     * @return the context path part of the url path\n     */\n    public String getContextPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getQueryString\n     * @return the servlet path part of the url path\n     */\n    public String getServletPath();\n\n    /**\n     * Convenience method.  The request url path is broken into:\n     * \u003cul\u003e\n     * \u003cli\u003econtext path\u003c/li\u003e\n     * \u003cli\u003eservlet path\u003c/li\u003e\n     * \u003cli\u003equery string\u003c/li\u003e\n     * \u003c/ul\u003e\n     * @see #getContextPath\n     * @see #getServletPath\n     * @return the query string part of the url path\n     */\n    public String getQueryString();\n\n    /**\n     * Convenience method\n     * @param name    which parameter to get\n     * @return the parameter value or null if there is no parameter corresponding to the indicated key\n     * or BINARY_VALUE if this is a multipart request and there is binary data for the indicate key,\n     * which can be retrieved as a byte array via the getAttribute method.\n     * @see #getParamMap\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public String getParam(String name);\n\n    /**\n     * Convenience method which gathers all parameters of the\n     * form \u0027\u003cname\u003e[\u003ckey\u003e]\u0027 and return then in a map where the\n     * keys are the \u003ckey\u003e strings and the values are the\n     * corresponding parameter values.\n     * \u003cpre\u003e\n     * For example, if there are parameters:\n     *   \u0027foo[bar1]\u0027 \u003d \u0027baz1\u0027\n     *   \u0027foo[bar2]\u0027 \u003d \u0027baz2\u0027\n     * then getParamMap(\u0027foo\u0027) will returned the map:\n     *   map[\u0027bar1\u0027] \u003d \u0027baz1\u0027\n     *   map[\u0027bar2\u0027] \u003d \u0027baz2\u0027\n     * \u003c/pre\u003e\n     * @param name  the prefix to be used to select parameters\n     * @return a map of all paramters of the form \u0027name[\u003ckey\u003e]\u0027\n     * where the \u003ckey\u003e strings are the keys of the map and the\n     * values are the corresponding parameter values.\n     * @see #getParam\n     * @see #getParamValues\n     * @see #getParamNames\n     */\n    public Map\u003cString, String\u003e getParamMap(String name);\n\n    /**\n     * Convenience method. Use this if you expect a parameter name\n     * to map to multiple values.\n     * @param name    the name of the parameter(s) to get\n     * @return an array of paramter values corresponding to the indicated name\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamNames\n     */\n    public String[] getParamValues(String name);\n\n    /**\n     * Convenience method to get all the parameter names.\n     * @return an array of all parameter names\n     * @see #getParam\n     * @see #getParamMap\n     * @see #getParamValues\n     */\n    public String[] getParamNames();\n\n    /**\n     * Convenience method\n     * @param name    which attribute to get\n     * @return the attribute value or null if there is no attribute corresponding to the indicated key.\n     * If the attribute corresponds to a file upload field then the return value will be a byte array\n     */\n    public Object getAttribute(String name);\n\n    /**\n     * Convenience method\n     * @param name    name of attribute to be set\n     * @param value   value of attribute to be set\n     */\n    public void setAttribute(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name    the name of the attribute to retrieve\n     * @return the attribute associated with the indicated name or null\n     * @see #setSessionAttr\n     * @see #getSessionAttrNames\n     */\n    public Object getSessionAttr(String name);\n\n    /**\n     * Convenience method\n     * @return all the session attribute names.\n     * @see #getSessionAttr\n     * @see #setSessionAttr\n     * @see #removeSessionAttr\n     */\n    public String[] getSessionAttrNames();\n\n    /**\n     * Convenience method\n     * @param name  the key to store the indicated value\n     * @param value  the object to be stored\n     * @see #getSessionAttr\n     * @see #removeSessionAttr\n     */\n    public void setSessionAttr(String name, Object value);\n\n    /**\n     * Convenience method\n     * @param name  the key of\n     * @see #setSessionAttr\n     */\n    public void removeSessionAttr(String name);\n\n    /**\n     * Convenience method to get cookie by name\n     * @param name  the name of the cookie to get\n     * @return the cookie with the indicated name, or null\n     * @see #setCookie\n     * @see #getCookieNames\n     */\n    public Cookie getCookie(String name);\n\n    /**\n     * Convenience method to get all the cookie names.\n     * @return an array of the names of all the cookies in the request, possibly empty\n     * @see #getCookie\n     * @see #setCookie\n     */\n    public String[] getCookieNames();\n\n    /**\n     * Convenience method\n     * @param cookie   the cookie to be added to the response\n     * @see #getCookie\n     * @see #getCookieNames\n     */\n    public void setCookie(Cookie cookie);\n\n    /**\n     * Cause a non-standard response (ie. redirect) to be returned.\n     * @param httpCode   the http response code to be returned\n     * @param arg    an argument or message to be returned (depends on response code)\n     * @see #redirect\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void nonStandardResponse(int httpCode, String arg);\n\n    /**\n     * Cause a redirect response to be returned\n     * @param path  where to redirect to. If the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #nonStandardResponse\n     * @throws NonStandardResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the NonStandardResponseException.\n     */\n    public void redirect(String path);\n\n    /**\n     * Cause a binary response to be returned\n     * @param in input stream containing binary data to be sent\n     * @throws BinaryResponseException which is a subclass of RuntimeException.\n     * If you call this method inside a try/catch block make sure you re-throw\n     * the BinaryResponseException.\n     */\n    public void sendBinaryResponse(InputStream in);\n\n    /**\n     * Convenience method to prepend the context path onto a servlet path\n     * @param path    a servlet path\n     * @return the context path plus the indicated path\n     */\n    public String absPath(String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path);\n\n    /**\n     * Convenience method to create an html anchor link tag\n     * @param anchor    the text in an anchor link\n     * @param path   the anchor target, if the path starts with a \u0027/\u0027 character then\n     * its assumed that this is an absolute link and the context path will be prepended to it\n     * @param options    extra html options to add to the anchor tag\n     * @see #makeLink\n     * @see #absPath\n     */\n    public String makeLink(String anchor, String path, String options);\n\n    /**\n     * Convenience method to check if this request is a POST\n     */\n    public boolean isPost();\n\n    /**\n     * Convenience method to check if this request is a GET\n     */\n    public boolean isGet();\n\n    /**\n     * Convenience method to retrieve a value from the flash\n     * @param key  the key to use to lookup a flash value\n     * @return the flash value associated with the indicated key or null\n     * @see #setFlash\n     */\n    public String getFlash(String key);\n\n    /**\n     * Convenience method to add a value to the flash\n     * @param key  the key to use to associate with the flash value\n     * @param val  the value to store\n     * @see #getFlash\n     */\n    public void setFlash(String key, String val);\n\n    /**\n     * Internal method used to retrieve a cached block\n     * @see #setCachedBlock\n     */\n    public static String getCachedBlock(String key);\n\n    /**\n     * Internal method used to store a cached block\n     * @see #getCachedBlock\n     */\n    public static void setCachedBlock(String key, String val);\n\n    /**\n     * For debugging\n     * @return a string representation of this request context\n     */\n    public String toString();\n\n    public String toString(String sep);\n\n    /**\n     * Copy an input stream to an output stream.\n     */\n    private byte[] readStream(InputStream in) throws IOException;\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCRequestContext",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCRequestContext_9Test.java",
    "test_prompt": "// JVCRequestContext_9Test.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport org.apache.commons.fileupload.*;\nimport org.apache.commons.fileupload.util.Streams;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCRequestContext}.\n* It contains ten unit test cases for the {@link JVCRequestContext#getFlash(String)} method.\n*/\nclass JVCRequestContext_9Test {",
    "method_signature": "getFlash(String)",
    "suffix": "9"
  },
  {
    "numberTests": "ten",
    "original_code": "// JVCDispatcher.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.Cookie;\nimport com.pmdesigns.jvc.tools.Base64Coder;\nimport com.pmdesigns.jvc.tools.JVCGenerator;\n\n/**\n * JVC request dispatching servlet\n *\n * @author mike dooley\n */\npublic class JVCDispatcher extends HttpServlet {\n\n    private Map\u003cString, Class\u003e generatorClasses;\n\n    private String pkgPrefix;\n\n    public static final String PKG_PREFIX_KEY \u003d \"pkg_prefix\";\n\n    private static Class requestContextClass;\n\n    private static Class classNotFound;\n\n    private Destroyable application;\n\n    private static final boolean TRACE \u003d false;\n\n    private static ThreadLocal\u003cJVCRequestContext\u003e ctxHolder \u003d new ThreadLocal\u003cJVCRequestContext\u003e() {\n\n        protected synchronized JVCRequestContext initialValue() {\n            return null;\n        }\n    };\n\n    /**\n     * Return the thread local request context\n     * @return the JVCRequestContext associated with the current thread or null\n     */\n    public static JVCRequestContext getRC();\n\n    /**\n     * Get the package prefix (from config) so we know the fully qualified\n     * name of page generators and controllers.  Also create and instance\n     * of the Application object.\n     */\n    public void init();\n\n    /**\n     * Notify the Application that its shutdown time.\n     */\n    public void destroy();\n\n    /**\n     * Handle a GET request. Called by servlet container.\n     * @param request\n     * @param response\n     * @throws IOException\n     * @throws ServletException\n     */\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;\n\n    /**\n     * Handle a POST request. Called by servlet container.\n     * @param request\n     * @param response\n     * @throws IOException\n     * @throws ServletException\n     */\n    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;\n\n    /**\n     * Private implementation to handle a GET or POST request by invoking the appropriate\n     * PageGenerator and Controller objects, or by serving static content.\n     * @param request\n     * @param response\n     * @throws IOException\n     * @throws ServletException\n     */\n    private void handleRequest(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException;\n\n    /**\n     * Copy an input stream to an output stream.\n     */\n    private void copy(InputStream in, OutputStream out) throws IOException;\n\n    /**\n     * Append a package string to a prefix if the prefix isn\u0027t empty\n     */\n    private static String appendPkg(String prefix, String pkg);\n\n    private static final String FLASH_COOKIE \u003d \"jvc_flash\";\n\n    /**\n     * Look for a \u0027flash cookie\u0027 in the request.  If found deserialize it, clear the cookie\n     * and return it, otherwise just return an empty Map.\n     * @see #makeFlashCookie\n     * @see #serializeMap\n     * @see #deserializeMap\n     */\n    private static Map\u003cString, String\u003e getFlash(HttpServletRequest request, HttpServletResponse response);\n\n    /**\n     * Serialize the indicated map and return it in a \u0027flash cookie\u0027\n     * @see #getFlash\n     * @see #serializeMap\n     * @see #deserializeMap\n     */\n    private static Cookie makeFlashCookie(Map\u003cString, String\u003e map);\n\n    /**\n     * Return a string representation of the map.\n     * This method encodes the map by writing its keys and values\n     * separated by the 0 character (the end of the list is indicated\n     * by an empty key) and then base64 encoding this string.\n     * @see #getFlash\n     * @see #makeFlashCookie\n     * @see #deserializeMap\n     */\n    private static String serializeMap(Map\u003cString, String\u003e map);\n\n    /**\n     * Return the map representation of the indicated string (see serializeMap())\n     * @see #getFlash\n     * @see #makeFlashCookie\n     * @see #serializeMap\n     */\n    private static Map\u003cString, String\u003e deserializeMap(String s);\n}\n",
    "package": "com.pmdesigns.jvc",
    "classname": "JVCDispatcher",
    "id": "/EvoSuiteBenchmark/original/33_javaviewcontrol/src/main/java/com/pmdesigns/jvc/JVCDispatcher.java",
    "test_prompt": "// JVCDispatcherTest.java\npackage com.pmdesigns.jvc;\n\nimport java.io.*;\nimport java.util.*;\nimport java.net.HttpURLConnection;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.Cookie;\nimport com.pmdesigns.jvc.tools.Base64Coder;\nimport com.pmdesigns.jvc.tools.JVCGenerator;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JVCDispatcher}.\n* It contains ten unit test cases for the {@link JVCDispatcher#getRC()} method.\n*/\nclass JVCDispatcherTest {",
    "method_signature": "getRC()",
    "suffix": ""
  }
]