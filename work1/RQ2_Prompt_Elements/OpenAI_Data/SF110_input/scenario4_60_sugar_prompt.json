[
  {
    "numberTests": "ten",
    "original_code": "// DefaultFSPath.java\npackage net.sf.sugar.fspath;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.xml.namespace.QName;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathExpressionException;\nimport javax.xml.xpath.XPathFactory;\nimport net.sf.sugar.fspath.xpath.RegexFunctionResolver;\nimport org.w3c.dom.Attr;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\n\n/**\n *  The default implementation of the FSPath interface.\n *  This class uses the JDK\u0027s XPath implementation as the basis for\n *  FSPath queries.\n *  On instantiation, a DOM is created of the filesystem metadata starting form the \u003ccode\u003erootDirectory\u003c/code\u003e.\n *  This DOM can then be queried using standard XML tools.\n *  \u003cbr/\u003e\n *  Whilst this approach has been relatively quick to implement, it is still tied to the limitations of XPath.\n *  Future implementations of this class are likely to implement the FSPath language fully themselves wthout relying on XPath.\n *  \u003cbr/\u003e\n *  todo: develop some front end substitution to enable the short queries i.e. /var/www etc\n *\n * @author keith\n *  $Id$\n */\npublic class DefaultFSPath implements FSPath {\n\n    /**\n     *  Escape characters, we must escape any characters that are\n     *  illegal in XML attribute text.\n     *\n     *  i.e. \u0026amp; \" \u003c \u003e\n     */\n    private Map escapeChars;\n\n    private DocumentBuilder documentBuilder;\n\n    private XPath xpath;\n\n    private Document dom;\n\n    /**\n     *  The date format used to correspond to the xs:date format i.e. yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSS\n     */\n    private DateFormat format;\n\n    private File rootDirectory;\n\n    public DefaultFSPath() {\n    }\n\n    /**\n     * Creates a new instance of DefaultFSPath, based on the directory supplied\n     */\n    public DefaultFSPath(File currentDir) {\n    }\n\n    protected Map createEscapeCharsMap();\n\n    protected void createDocumentBuilder() throws ParserConfigurationException;\n\n    protected Document buildDOM(File currentDir) throws IOException;\n\n    private Element createChildElement(Document dom, File currentFile) throws IOException;\n\n    /**\n     *  Calls this.query(expression, XPathConstants.NODESET)\n     *\n     *  Note : This method MUST be passed an expression which returns a nodeset.\n     *\n     *  @param expression the FSPath expression to execute.\n     *  @returns \u003ccode\u003eFSPathResultList\u003c/code\u003e the FSPathResult objects contained\n     *  in this list will be of type \u003ccode\u003ejava.io.File\u003c/code\u003e,\n     *  \u003ccode\u003ejava.lang.Double\u003c/code\u003e, \u003ccode\u003ejava.lang.Boolean\u003c/code\u003e,\n     *  \u003ccode\u003ejava.lang.String\u003c/code\u003e\n     */\n    public FSPathResultList query(String expression);\n\n    /**\n     */\n    public FSPathResultList query(String expression, QName returnType);\n\n    private void processNode(Node node, FSPathResultList results) throws XPathExpressionException, IllegalArgumentException, ParseException;\n\n    public File getRootDirectory();\n}\n",
    "package": "net.sf.sugar.fspath",
    "classname": "DefaultFSPath",
    "id": "/EvoSuiteBenchmark/original/60_sugar/src/main/java/net/sf/sugar/fspath/DefaultFSPath.java",
    "test_prompt": "// DefaultFSPathTest.java\npackage net.sf.sugar.fspath;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.text.DateFormat;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.xml.namespace.QName;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathExpressionException;\nimport javax.xml.xpath.XPathFactory;\nimport net.sf.sugar.fspath.xpath.RegexFunctionResolver;\nimport org.w3c.dom.Attr;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultFSPath}.\n* It contains ten unit test cases for the {@link DefaultFSPath#query(String)} method.\n*/\nclass DefaultFSPathTest {",
    "method_signature": "query(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// FSPathFactory.java\npackage net.sf.sugar.fspath;\n\nimport java.io.File;\n\n/**\n * @author kbishop\n */\npublic class FSPathFactory {\n\n    /**\n     * Creates a new instance of FSPathFactory\n     */\n    public FSPathFactory() {\n    }\n\n    /**\n     *  @returns FSPath a new DefaultFSPath instance which uses the current user directory (System.getProperty(\"user.dir\")) to search from.\n     */\n    public static FSPath newFSPath();\n\n    /**\n     *  @returns FSPath a new DefaultFSPath instance which uses the directory provided to search from.\n     */\n    public static FSPath newFSPath(File file);\n\n    /**\n     *  @returns FSPath a new DefaultFSPath instance which uses the directory path String provided to search from.\n     */\n    public static FSPath newFSPath(String path);\n}\n",
    "package": "net.sf.sugar.fspath",
    "classname": "FSPathFactory",
    "id": "/EvoSuiteBenchmark/original/60_sugar/src/main/java/net/sf/sugar/fspath/FSPathFactory.java",
    "test_prompt": "// FSPathFactoryTest.java\npackage net.sf.sugar.fspath;\n\nimport java.io.File;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FSPathFactory}.\n* It contains ten unit test cases for the {@link FSPathFactory#newFSPath()} method.\n*/\nclass FSPathFactoryTest {",
    "method_signature": "newFSPath()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// FSPathResultListImpl.java\npackage net.sf.sugar.fspath;\n\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * @author kbishop\n * @version $Id$\n */\npublic class FSPathResultListImpl extends ArrayList\u003cFSPathResult\u003e implements FSPathResultList {\n\n    /**\n     * Creates a new instance of FSPathResultListImpl\n     */\n    public FSPathResultListImpl() {\n    }\n\n    /**\n     *  A convenience method for defining custom filesystem interaction\n     *  across the whole list of results.\n     *\n     *  This method loops through the results and calls the call(Result result)\n     *  method of the Callback class passed to it for each individual result.\n     *\n     *  @param Callback - a custom implementation of the Callback interface.\n     *  @throws IOException\n     */\n    public FSPathResultList each(Callback callback) throws IOException;\n\n    /**\n     *  Deletes each file contained in this FSPathResultList.\n     *  \u003cbr/\u003e\n     *  \u003cpre\u003e\n     *  ************************************************************************\n     *  *               IMPORTANT !!!!!    Use with caution                    *\n     *  *   This method makes it extremely easy to trash your filesystem       *\n     *  *   Its advised that FSPath queries are tested thouroughly before use  *\n     *  *   in order to verify which files would be deleted                    *\n     *  *                                                                      *\n     *  ************************************************************************\n     *  \u003c/pre\u003e\n     *  @returns FSPathResultModificationListImpl - all successfully deleted files\u003cbr/\u003e\n     *  will be added as a success, and the failures will be added as failures.\n     *\n     *  @throws IOException - NOTE this method does not currently thrown an IOException\n     *  @throws OperationNotPermittedException - this exception will be thrown if\u003cbr/\u003e\n     *  The FSPathResult objects contained in this FSPathResultList don\u0027t contain\u003cbr/\u003e\n     *  java.io.File objects\u003cbr/\u003e\n     *  (i.e the FSPath query was written to return Boolean, String nor numerical results).\n     */\n    public FSPathResultModificationList delete() throws IOException, OperationNotPermittedException;\n\n    /**\n     *  This method will copy each file contained in this FSPathResultList to the\n     *  destination path supplied.\n     *\n     *  @param String - the destination path which you would like to copy files to.\n     *\n     *  @returns FSPathResultModificationListImpl - all successfully copied files\n     *  will be added as a success, and the failures will be added as failures.\n     *\n     *  @param String the absolute or realtive path of the destination Directory\n     *  @throws IOException - NOTE this is currently not thrown by this method.\n     *  @throws OperationNotPermittedException - this exception is thrown upon\n     *  the following conditions :\u003cbr/\u003e\n     *  \u003cbr/\u003e\n     *  1)  The FSPathResult objects contained in this FSPathResultList don\u0027t contain\u003cbr/\u003e\n     *      java.io.File objects\u003cbr/\u003e\n     *      (i.e the FSPath query was written to return Boolean, String nor numerical results).\u003cbr/\u003e\n     *  2)  The directory denoted by the destination path doesn\u0027t exist.\u003cbr/\u003e\n     *  3)  The destination path doesn\u0027t resolve to a directory.\u003cbr/\u003e\n     *  4)  The destination path isn\u0027t writeable.\u003cbr/\u003e\n     *  5)  The current java process doesn\u0027t have sufficient priveledges to\u003cbr/\u003e\n     *      access the destination path.\u003cbr/\u003e\n     */\n    public FSPathResultModificationList copy(String destinationDirPath) throws IOException, OperationNotPermittedException;\n\n    public boolean isListOfFiles();\n\n    /**\n     *  Renames each file in the FSPathResultList based on a regex match\n     *  expression and a replace expression.\n     *  \u003cbr/\u003e\n     *  This method is designed to enable simple renaming i.e. renaming from\u003cbr/\u003e\n     *  \"a.txt\" to \"b.txt\" but also complex renaming using regular expressions.\u003cbr/\u003e\n     *  \u003cbr/\u003e\n     *  Example simple renaming : \u003cbr/\u003e\n     *  \u003cpre\u003efspath.query(\"/dir[@name\u003d\u0027logs\u0027]/file[@name\u003d\u0027error.log\u0027]\").rename(\"error.log\", \"error.log.1\");\u003c/pre\u003e \u003cbr/\u003e\n     *  This would work fine for a single file but not much use for multiple files.\u003cbr/\u003e\n     *  \u003cbr/\u003e\n     *  Example complex renaming : \u003cbr/\u003e\n     *  \u003cbr/\u003e\n     *  Imagine a directory full of files with a format such as : \u003cbr/\u003e\n     *  \u003cpre\u003e\n     *  appLog-01_01_2008.log.1\n     *  appLog-01_01_2008.log.2\n     *  ...\n     *  \u003c/pre\u003e\n     *  Now imagine that we wanted to rename the files so that they end in .log but they also keep their\u003cbr/\u003e\n     *  uniqueness (i.e. the number at the end of the file needs to move to a new position in the filename)\u003cbr/\u003e\n     *  \u003cbr/\u003e\n     *  The following code expression would work :\u003cbr/\u003e\n     *  \u003cpre\u003efspath.query(\"dir[@name \u003d \u0027logs\u0027]/file\").rename(\"(.*)\\.log\\.([0-9]+)\", \"$1_$2.log\");\u003c/pre\u003e \u003cbr/\u003e\n     *  Here the matchExpression has two capturing groups, one being everything up to the \u0027.log\u0027 in the filename, \u003cbr/\u003e\n     *  and the other being the number after the \".log.\" .\u003cbr/\u003e\n     *  The replace expression simply specifies that the new file name will have the text in the first capturing group,\u003cbr/\u003e\n     *  followed by a \"_\" then the text in the second capturing group and then \".log\".\n     */\n    public FSPathResultModificationList rename(String matchExpression, String replaceExpresion) throws IOException, OperationNotPermittedException;\n\n    /**\n     *  Moves each file in the list to the specified desination path.\n     *\n     *  This method effecively calls copy() and then delete() on itself.\n     *  If any file fails to sucessfully copy, then this method \u0027fails fast\u0027\n     *  and returns the results of the copy. This should prevent the situation arising\n     *  where the copied files are completely deleted.\n     *  If the copy suceeds, then it will attempt to delete the original files.\n     *\n     *  @param String - the directory path to move the files to.\n     *  @throws OperationNotPermittedException - see the comments for \u003ccode\u003ecopy\u003c/code\u003e\n     */\n    public FSPathResultModificationList move(String destinationPath) throws IOException, OperationNotPermittedException;\n}\n",
    "package": "net.sf.sugar.fspath",
    "classname": "FSPathResultListImpl",
    "id": "/EvoSuiteBenchmark/original/60_sugar/src/main/java/net/sf/sugar/fspath/FSPathResultListImpl_0Test.java",
    "test_prompt": "// FSPathResultListImpl_0Test.java\npackage net.sf.sugar.fspath;\n\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FSPathResultListImpl}.\n* It contains ten unit test cases for the {@link FSPathResultListImpl#each(Callback)} method.\n*/\nclass FSPathResultListImpl_0Test {",
    "method_signature": "each(Callback)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// FSPathResultListImpl.java\npackage net.sf.sugar.fspath;\n\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * @author kbishop\n * @version $Id$\n */\npublic class FSPathResultListImpl extends ArrayList\u003cFSPathResult\u003e implements FSPathResultList {\n\n    /**\n     * Creates a new instance of FSPathResultListImpl\n     */\n    public FSPathResultListImpl() {\n    }\n\n    /**\n     *  A convenience method for defining custom filesystem interaction\n     *  across the whole list of results.\n     *\n     *  This method loops through the results and calls the call(Result result)\n     *  method of the Callback class passed to it for each individual result.\n     *\n     *  @param Callback - a custom implementation of the Callback interface.\n     *  @throws IOException\n     */\n    public FSPathResultList each(Callback callback) throws IOException;\n\n    /**\n     *  Deletes each file contained in this FSPathResultList.\n     *  \u003cbr/\u003e\n     *  \u003cpre\u003e\n     *  ************************************************************************\n     *  *               IMPORTANT !!!!!    Use with caution                    *\n     *  *   This method makes it extremely easy to trash your filesystem       *\n     *  *   Its advised that FSPath queries are tested thouroughly before use  *\n     *  *   in order to verify which files would be deleted                    *\n     *  *                                                                      *\n     *  ************************************************************************\n     *  \u003c/pre\u003e\n     *  @returns FSPathResultModificationListImpl - all successfully deleted files\u003cbr/\u003e\n     *  will be added as a success, and the failures will be added as failures.\n     *\n     *  @throws IOException - NOTE this method does not currently thrown an IOException\n     *  @throws OperationNotPermittedException - this exception will be thrown if\u003cbr/\u003e\n     *  The FSPathResult objects contained in this FSPathResultList don\u0027t contain\u003cbr/\u003e\n     *  java.io.File objects\u003cbr/\u003e\n     *  (i.e the FSPath query was written to return Boolean, String nor numerical results).\n     */\n    public FSPathResultModificationList delete() throws IOException, OperationNotPermittedException;\n\n    /**\n     *  This method will copy each file contained in this FSPathResultList to the\n     *  destination path supplied.\n     *\n     *  @param String - the destination path which you would like to copy files to.\n     *\n     *  @returns FSPathResultModificationListImpl - all successfully copied files\n     *  will be added as a success, and the failures will be added as failures.\n     *\n     *  @param String the absolute or realtive path of the destination Directory\n     *  @throws IOException - NOTE this is currently not thrown by this method.\n     *  @throws OperationNotPermittedException - this exception is thrown upon\n     *  the following conditions :\u003cbr/\u003e\n     *  \u003cbr/\u003e\n     *  1)  The FSPathResult objects contained in this FSPathResultList don\u0027t contain\u003cbr/\u003e\n     *      java.io.File objects\u003cbr/\u003e\n     *      (i.e the FSPath query was written to return Boolean, String nor numerical results).\u003cbr/\u003e\n     *  2)  The directory denoted by the destination path doesn\u0027t exist.\u003cbr/\u003e\n     *  3)  The destination path doesn\u0027t resolve to a directory.\u003cbr/\u003e\n     *  4)  The destination path isn\u0027t writeable.\u003cbr/\u003e\n     *  5)  The current java process doesn\u0027t have sufficient priveledges to\u003cbr/\u003e\n     *      access the destination path.\u003cbr/\u003e\n     */\n    public FSPathResultModificationList copy(String destinationDirPath) throws IOException, OperationNotPermittedException;\n\n    public boolean isListOfFiles();\n\n    /**\n     *  Renames each file in the FSPathResultList based on a regex match\n     *  expression and a replace expression.\n     *  \u003cbr/\u003e\n     *  This method is designed to enable simple renaming i.e. renaming from\u003cbr/\u003e\n     *  \"a.txt\" to \"b.txt\" but also complex renaming using regular expressions.\u003cbr/\u003e\n     *  \u003cbr/\u003e\n     *  Example simple renaming : \u003cbr/\u003e\n     *  \u003cpre\u003efspath.query(\"/dir[@name\u003d\u0027logs\u0027]/file[@name\u003d\u0027error.log\u0027]\").rename(\"error.log\", \"error.log.1\");\u003c/pre\u003e \u003cbr/\u003e\n     *  This would work fine for a single file but not much use for multiple files.\u003cbr/\u003e\n     *  \u003cbr/\u003e\n     *  Example complex renaming : \u003cbr/\u003e\n     *  \u003cbr/\u003e\n     *  Imagine a directory full of files with a format such as : \u003cbr/\u003e\n     *  \u003cpre\u003e\n     *  appLog-01_01_2008.log.1\n     *  appLog-01_01_2008.log.2\n     *  ...\n     *  \u003c/pre\u003e\n     *  Now imagine that we wanted to rename the files so that they end in .log but they also keep their\u003cbr/\u003e\n     *  uniqueness (i.e. the number at the end of the file needs to move to a new position in the filename)\u003cbr/\u003e\n     *  \u003cbr/\u003e\n     *  The following code expression would work :\u003cbr/\u003e\n     *  \u003cpre\u003efspath.query(\"dir[@name \u003d \u0027logs\u0027]/file\").rename(\"(.*)\\.log\\.([0-9]+)\", \"$1_$2.log\");\u003c/pre\u003e \u003cbr/\u003e\n     *  Here the matchExpression has two capturing groups, one being everything up to the \u0027.log\u0027 in the filename, \u003cbr/\u003e\n     *  and the other being the number after the \".log.\" .\u003cbr/\u003e\n     *  The replace expression simply specifies that the new file name will have the text in the first capturing group,\u003cbr/\u003e\n     *  followed by a \"_\" then the text in the second capturing group and then \".log\".\n     */\n    public FSPathResultModificationList rename(String matchExpression, String replaceExpresion) throws IOException, OperationNotPermittedException;\n\n    /**\n     *  Moves each file in the list to the specified desination path.\n     *\n     *  This method effecively calls copy() and then delete() on itself.\n     *  If any file fails to sucessfully copy, then this method \u0027fails fast\u0027\n     *  and returns the results of the copy. This should prevent the situation arising\n     *  where the copied files are completely deleted.\n     *  If the copy suceeds, then it will attempt to delete the original files.\n     *\n     *  @param String - the directory path to move the files to.\n     *  @throws OperationNotPermittedException - see the comments for \u003ccode\u003ecopy\u003c/code\u003e\n     */\n    public FSPathResultModificationList move(String destinationPath) throws IOException, OperationNotPermittedException;\n}\n",
    "package": "net.sf.sugar.fspath",
    "classname": "FSPathResultListImpl",
    "id": "/EvoSuiteBenchmark/original/60_sugar/src/main/java/net/sf/sugar/fspath/FSPathResultListImpl_1Test.java",
    "test_prompt": "// FSPathResultListImpl_1Test.java\npackage net.sf.sugar.fspath;\n\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FSPathResultListImpl}.\n* It contains ten unit test cases for the {@link FSPathResultListImpl#delete()} method.\n*/\nclass FSPathResultListImpl_1Test {",
    "method_signature": "delete()",
    "suffix": "1"
  }
]