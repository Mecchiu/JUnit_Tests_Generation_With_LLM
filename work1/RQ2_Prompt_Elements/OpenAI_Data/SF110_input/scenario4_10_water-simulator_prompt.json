[
  {
    "numberTests": "ten",
    "original_code": "// ParameterAttributes.java\npackage simulator.util;\n\nimport java.io.Serializable;\nimport org.apache.log4j.Logger;\n\npublic class ParameterAttributes implements Serializable {\n\n    private static final long serialVersionUID \u003d 6885432319261152672L;\n\n    private Logger log \u003d Logger.getLogger(ParameterAttributes.class);\n\n    //Properties\n    private String name;\n\n    private Float elasticity;\n\n    private Boolean ln;\n\n    private Function demandCurveFunction;\n\n    private Function socialFunction;\n\n    private Boolean social \u003d Boolean.FALSE;\n\n    private Float value \u003d new Float(0);\n\n    /**\n     * Set parameter name\n     * @param name\n     */\n    public void setName(String name);\n\n    /**\n     * @return\n     */\n    public String getName();\n\n    /**\n     * Set elasticity\n     * @param elasticity\n     */\n    public void setElasticity(float elasticity);\n\n    /**\n     * @return\n     */\n    public float getElasticity();\n\n    /**\n     * Set true if the value of the parameter is the logarithm of parameter\u0027s function\n     * @param ln\n     */\n    public void setLn(boolean ln);\n\n    /**\n     * @return\n     */\n    public boolean getLn();\n\n    /**\n     * Set the demand curve function for this parameter. The Demand Curve Function gets the stepId\n     * as input if the parameter isn\u0027t social, otherwise gets the sum of all weights received from\n     * its neighbours. It returns parameter\u0027s value.\n     * @param dCF One of the availabe functions\n     */\n    public void setDemandCurveFunction(Function dCF);\n\n    /**\n     * Set the demand curve function for this parameter\n     * @return\n     */\n    public Function getDemandCurveFunction();\n\n    /**\n     * Set the social function for this parameter. The Social Curve Function gets the stepId\n     * as input and returns a value (the weight) that the consumer agent will send in socialization\n     * stage of simulation in the specified step.\n     * @param sF One of the available functions\n     */\n    public void setSocialFunction(Function sF);\n\n    /**\n     * @return\n     */\n    public Function getSocialFunction();\n\n    /**\n     * Set this parameter to be social\n     */\n    public void setSocial(boolean b);\n\n    /**\n     * @return\n     */\n    public boolean isSocial();\n\n    /**\n     * Calculates parameter\u0027s value for the Demand Curve as : elasticity * [ ln ] ( demandCurveFunction(step) )\n     * @param step The step for which to calculate parameters value\n     * @return Parameter\u0027s value that will be summed for calculating total consumer\u0027s consumption\n     */\n    public float valueFor(int step);\n\n    /**\n     * Overrides the previous method if the input is a float number. Mostly used when the parameter is\n     * social and the input value is the sum of weights.\n     * Calculates parameter\u0027s value for the Demand Curve as :\n     * elasticity * [ ln ] (demandCurveFunction(weights) )\n     * @param x The step for which to calculate parameters value\n     * @return Parameter\u0027s value that will be summed for calculating total consumer\u0027s consumption\n     */\n    public float valueFor(float x);\n\n    public String toString();\n}\n",
    "package": "simulator.util",
    "classname": "ParameterAttributes",
    "id": "/EvoSuiteBenchmark/original/10_water-simulator/src/main/java/simulator/util/ParameterAttributes_0Test.java",
    "test_prompt": "// ParameterAttributes_0Test.java\npackage simulator.util;\n\nimport java.io.Serializable;\nimport org.apache.log4j.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ParameterAttributes}.\n* It contains ten unit test cases for the {@link ParameterAttributes#valueFor(int)} method.\n*/\nclass ParameterAttributes_0Test {",
    "method_signature": "valueFor(int)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// ParameterAttributes.java\npackage simulator.util;\n\nimport java.io.Serializable;\nimport org.apache.log4j.Logger;\n\npublic class ParameterAttributes implements Serializable {\n\n    private static final long serialVersionUID \u003d 6885432319261152672L;\n\n    private Logger log \u003d Logger.getLogger(ParameterAttributes.class);\n\n    //Properties\n    private String name;\n\n    private Float elasticity;\n\n    private Boolean ln;\n\n    private Function demandCurveFunction;\n\n    private Function socialFunction;\n\n    private Boolean social \u003d Boolean.FALSE;\n\n    private Float value \u003d new Float(0);\n\n    /**\n     * Set parameter name\n     * @param name\n     */\n    public void setName(String name);\n\n    /**\n     * @return\n     */\n    public String getName();\n\n    /**\n     * Set elasticity\n     * @param elasticity\n     */\n    public void setElasticity(float elasticity);\n\n    /**\n     * @return\n     */\n    public float getElasticity();\n\n    /**\n     * Set true if the value of the parameter is the logarithm of parameter\u0027s function\n     * @param ln\n     */\n    public void setLn(boolean ln);\n\n    /**\n     * @return\n     */\n    public boolean getLn();\n\n    /**\n     * Set the demand curve function for this parameter. The Demand Curve Function gets the stepId\n     * as input if the parameter isn\u0027t social, otherwise gets the sum of all weights received from\n     * its neighbours. It returns parameter\u0027s value.\n     * @param dCF One of the availabe functions\n     */\n    public void setDemandCurveFunction(Function dCF);\n\n    /**\n     * Set the demand curve function for this parameter\n     * @return\n     */\n    public Function getDemandCurveFunction();\n\n    /**\n     * Set the social function for this parameter. The Social Curve Function gets the stepId\n     * as input and returns a value (the weight) that the consumer agent will send in socialization\n     * stage of simulation in the specified step.\n     * @param sF One of the available functions\n     */\n    public void setSocialFunction(Function sF);\n\n    /**\n     * @return\n     */\n    public Function getSocialFunction();\n\n    /**\n     * Set this parameter to be social\n     */\n    public void setSocial(boolean b);\n\n    /**\n     * @return\n     */\n    public boolean isSocial();\n\n    /**\n     * Calculates parameter\u0027s value for the Demand Curve as : elasticity * [ ln ] ( demandCurveFunction(step) )\n     * @param step The step for which to calculate parameters value\n     * @return Parameter\u0027s value that will be summed for calculating total consumer\u0027s consumption\n     */\n    public float valueFor(int step);\n\n    /**\n     * Overrides the previous method if the input is a float number. Mostly used when the parameter is\n     * social and the input value is the sum of weights.\n     * Calculates parameter\u0027s value for the Demand Curve as :\n     * elasticity * [ ln ] (demandCurveFunction(weights) )\n     * @param x The step for which to calculate parameters value\n     * @return Parameter\u0027s value that will be summed for calculating total consumer\u0027s consumption\n     */\n    public float valueFor(float x);\n\n    public String toString();\n}\n",
    "package": "simulator.util",
    "classname": "ParameterAttributes",
    "id": "/EvoSuiteBenchmark/original/10_water-simulator/src/main/java/simulator/util/ParameterAttributes_1Test.java",
    "test_prompt": "// ParameterAttributes_1Test.java\npackage simulator.util;\n\nimport java.io.Serializable;\nimport org.apache.log4j.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ParameterAttributes}.\n* It contains ten unit test cases for the {@link ParameterAttributes#valueFor(float)} method.\n*/\nclass ParameterAttributes_1Test {",
    "method_signature": "valueFor(float)",
    "suffix": "1"
  }
]