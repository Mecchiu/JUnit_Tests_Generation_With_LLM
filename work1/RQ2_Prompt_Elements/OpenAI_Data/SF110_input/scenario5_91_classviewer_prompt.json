[
  {
    "numberTests": "ten",
    "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * \u003cp\u003e\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    /**\n     * Returns an array of strings that contain the public fields for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return string array of public fields\n     */\n    public String[] printFields() {\n        Field[] f \u003d c.getFields();\n        length \u003d f.length;\n        String[] StringData \u003d null;\n        if (length \u003e 0) {\n            StringData \u003d new String[length];\n            String tempStr;\n            Object obj \u003d new Object();\n            if (debug)\n                System.out.println(\"****************************************\");\n            for (count \u003d 0; count \u003c length; count++) {\n                try {\n                    tempStr \u003d f[count] + \"\u003d\" + f[count].get(obj);\n                    StringData[count] \u003d tempStr;\n                    if (debug)\n                        System.out.println(tempStr);\n                } catch (IllegalAccessException e) {\n                    e.printStackTrace();\n                    tempStr \u003d f[count] + \"\u003d ILLEGAL ACCESS EXCEPTION, unable to load\";\n                    StringData[count] \u003d tempStr;\n                } catch (IllegalArgumentException j) {\n                    j.printStackTrace();\n                    tempStr \u003d f[count] + \"\u003d ILLEGAL ARGUMENT EXCEPTION, unable to load\";\n                    StringData[count] \u003d tempStr;\n                }\n            }\n        } else if (debug)\n            System.out.println(\"No public fields.\");\n        return StringData;\n    }\n}\n",
    "package": "com.jstevh.viewer",
    "classname": "ClassInfo",
    "id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_0Test.java",
    "test_prompt": "// ClassInfo_0Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printFields()} method.\n*/\nclass ClassInfo_0Test {",
    "method_signature": "printFields()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * \u003cp\u003e\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @return string array of public methods\n     */\n    public String[] printMethods() {\n        if (debug)\n            System.out.println(\"****************************************\");\n        String[] tempArray \u003d null;\n        if (cMethods !\u003d null) {\n            tempArray \u003d new String[cMethods.length];\n            System.arraycopy(cMethods, 0, tempArray, 0, cMethods.length);\n        }\n        if (debug \u0026\u0026 tempArray \u003d\u003d null)\n            System.out.println(\"No public methods.\");\n        else {\n            printArray(tempArray);\n        }\n        return tempArray;\n    }\n}\n",
    "package": "com.jstevh.viewer",
    "classname": "ClassInfo",
    "id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_1Test.java",
    "test_prompt": "// ClassInfo_1Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printMethods()} method.\n*/\nclass ClassInfo_1Test {",
    "method_signature": "printMethods()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * \u003cp\u003e\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    /**\n     * Returns an array of strings that contain the public methods for\n     * the class excluding inherited methods. The data is pulled from\n     * the c private Class object.\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param param (not currently implemented) selects whether inherited\n     *               objects are returned\n     * @return string array of public methods\n     */\n    public String[] printMethods(int param) {\n        if (cMethods \u003d\u003d null)\n            return null;\n        if (debug)\n            System.out.println(\"****************************************\");\n        String[] data \u003d cMethods;\n        StringList tempList \u003d new StringList();\n        for (int i \u003d 0; i \u003c cMethods.length; i++) {\n            if (cMethods[i].indexOf(getClassName() + \u0027.\u0027) !\u003d -1)\n                tempList.add(cMethods[i]);\n        }\n        if (!tempList.isEmpty())\n            data \u003d tempList.toArray();\n        else\n            data \u003d null;\n        if (debug \u0026\u0026 data \u003d\u003d null)\n            System.out.println(\"No public methods.\");\n        else {\n            printArray(data);\n        }\n        return data;\n    }\n}\n",
    "package": "com.jstevh.viewer",
    "classname": "ClassInfo",
    "id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_2Test.java",
    "test_prompt": "// ClassInfo_2Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printMethods(int)} method.\n*/\nclass ClassInfo_2Test {",
    "method_signature": "printMethods(int)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * \u003cp\u003e\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    /**\n     * Returns an array of strings that contain the public constructors for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return string array of public constructors\n     */\n    public String[] printConstructors() {\n        Constructor[] constr \u003d c.getConstructors();\n        if (debug)\n            System.out.println(\"****************************************\");\n        String[] data \u003d getData(constr);\n        if (debug \u0026\u0026 data \u003d\u003d null)\n            System.out.println(\"No public constructors.\");\n        else\n            printArray(data);\n        return data;\n    }\n}\n",
    "package": "com.jstevh.viewer",
    "classname": "ClassInfo",
    "id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_3Test.java",
    "test_prompt": "// ClassInfo_3Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printConstructors()} method.\n*/\nclass ClassInfo_3Test {",
    "method_signature": "printConstructors()",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * \u003cp\u003e\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    /**\n     * Returns an array of strings that contain the interfaces for\n     * the class. The data is pulled from the c private Class object.\n     * \u003cp\u003e\n     * This method calls  {@link #getData(java.lang.Class[])} method for constructors.\n     *\n     * @return string array of interfaces\n     */\n    public String[] printInterfaces() {\n        Class[] inter \u003d c.getInterfaces();\n        if (debug)\n            System.out.println(\"****************************************\");\n        String[] data \u003d getData(inter);\n        if (c !\u003d java.lang.Object.class \u0026\u0026 !c.isInterface()) {\n            Class superC \u003d c.getSuperclass();\n            TreeSet\u003cString\u003e hInterfaces \u003d new TreeSet\u003cString\u003e();\n            int i \u003d 0;\n            if (data !\u003d null)\n                for (i \u003d 0; i \u003c data.length; i++) {\n                    hInterfaces.add(data[i]);\n                }\n            while (superC !\u003d null \u0026\u0026 superC !\u003d java.lang.Object.class) {\n                inter \u003d superC.getInterfaces();\n                if (debug)\n                    System.out.println(\"****************************************\");\n                data \u003d getData(inter);\n                if (data !\u003d null)\n                    for (i \u003d 0; i \u003c data.length; i++) {\n                        hInterfaces.add(data[i]);\n                    }\n                superC \u003d superC.getSuperclass();\n            }\n            if (hInterfaces.size() !\u003d 0) {\n                data \u003d new String[hInterfaces.size()];\n                Iterator it \u003d hInterfaces.iterator();\n                i \u003d 0;\n                while (it.hasNext()) {\n                    data[i] \u003d (String) it.next();\n                    i++;\n                }\n            }\n        }\n        if (debug \u0026\u0026 data \u003d\u003d null)\n            System.out.println(\"No interfaces.\");\n        else\n            printArray(data);\n        return data;\n    }\n}\n",
    "package": "com.jstevh.viewer",
    "classname": "ClassInfo",
    "id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_4Test.java",
    "test_prompt": "// ClassInfo_4Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#printInterfaces()} method.\n*/\nclass ClassInfo_4Test {",
    "method_signature": "printInterfaces()",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * \u003cp\u003e\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    /**\n     * Takes an array of Member objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param m array of Member objects\n     * @return string array of names\n     */\n    public static String[] getData(Member[] m) {\n        length \u003d m.length;\n        if (length \u003d\u003d 0)\n            return null;\n        String[] StringData \u003d new String[length];\n        String tempStr;\n        for (count \u003d 0; count \u003c m.length; count++) {\n            tempStr \u003d m[count].toString();\n            StringData[count] \u003d tempStr;\n        }\n        return StringData;\n    }\n}\n",
    "package": "com.jstevh.viewer",
    "classname": "ClassInfo",
    "id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_5Test.java",
    "test_prompt": "// ClassInfo_5Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#getData(Member[])} method.\n*/\nclass ClassInfo_5Test {",
    "method_signature": "getData(Member[])",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * \u003cp\u003e\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    /**\n     * Takes an array of Class objects and gets names from toString().\n     * \u003cp\u003e\n     * This method always returns immediately.\n     *\n     * @param m array of Class objects\n     * @return string array of names\n     */\n    public static String[] getData(Class[] m) {\n        length \u003d m.length;\n        if (length \u003d\u003d 0)\n            return null;\n        String[] StringData \u003d new String[length];\n        String tempStr;\n        for (count \u003d 0; count \u003c m.length; count++) {\n            tempStr \u003d m[count].getName();\n            StringData[count] \u003d tempStr;\n        }\n        return StringData;\n    }\n}\n",
    "package": "com.jstevh.viewer",
    "classname": "ClassInfo",
    "id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_6Test.java",
    "test_prompt": "// ClassInfo_6Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#getData(Class[])} method.\n*/\nclass ClassInfo_6Test {",
    "method_signature": "getData(Class[])",
    "suffix": "6"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * \u003cp\u003e\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    /**\n     * Searches through cMethods, the private array of public methods\n     * for a given string fragment, and selects methods that have that\n     * fragment in them.\n     * \u003cp\u003e\n     * This method calls searchStrings().\n     *\n     * @param tempStr string fragment with which to search\n     * @return string array of found methods\n     */\n    public String[] srchMethods(String tempStr) {\n        if (tempStr \u003d\u003d null)\n            return null;\n        fndMethods \u003d StringTools.searchStrings(cMethods, tempStr);\n        if (fndMethods !\u003d null) {\n            String[] tempArray \u003d new String[fndMethods.length];\n            System.arraycopy(fndMethods, 0, tempArray, 0, fndMethods.length);\n            return tempArray;\n        }\n        return null;\n    }\n}\n",
    "package": "com.jstevh.viewer",
    "classname": "ClassInfo",
    "id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_7Test.java",
    "test_prompt": "// ClassInfo_7Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#srchMethods(String)} method.\n*/\nclass ClassInfo_7Test {",
    "method_signature": "srchMethods(String)",
    "suffix": "7"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClassInfo.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\n\n/**\n * Obtains the interfaces as well as the public constructors, methods\n * and fields from a Class object.\n * \u003cp\u003e\n * This class is for obtaining data and handling.\n *\n * @author James Harris\n * @version 2.0a\n */\npublic class ClassInfo {\n\n    /**\n     * Searches through found methods and returns method at given\n     * position, uses anonymous inner class.  If no methods\n     * have been searched for it returns null.\n     *\n     * @param pos position of found methods in array 0 is first.\n     * @return MethodData object with information about method\n     */\n    public MethodData getFoundMethod(final int pos) {\n        if (fndMethods \u003d\u003d null || pos \u003e fndMethods.length)\n            return null;\n        return new MethodData() {\n\n            //check to make sure position isn\u0027t out of range\n            String tempStr \u003d fndMethods[pos], tempStr2;\n\n            String className, methodName;\n\n            int begin, end;\n\n            Class methClass;\n\n            {\n                end \u003d tempStr.indexOf(\")\");\n                tempStr \u003d tempStr.substring(0, end + 1);\n                begin \u003d tempStr.lastIndexOf(\" \");\n                tempStr \u003d tempStr.substring(begin + 1, tempStr.length());\n                begin \u003d tempStr.indexOf(\"(\");\n                end \u003d tempStr.lastIndexOf(\".\", begin);\n                className \u003d tempStr.substring(0, end);\n                methodName \u003d tempStr.substring(end + 1, tempStr.length());\n                if (debug)\n                    System.out.println(\"className\u003d\" + className);\n                methClass \u003d ClassInfo.tryClass(className);\n                if (debug)\n                    System.out.println(\"methClass\u003d\" + methClass);\n            }\n\n            public String getMethPackage() {\n                if (methClass \u003d\u003d null)\n                    return null;\n                return methClass.getPackage() !\u003d null ? methClass.getPackage().getName() : null;\n            }\n\n            public String getMethClass() {\n                if (methClass \u003d\u003d null)\n                    return null;\n                return methClass.getName();\n            }\n\n            public String getMethName() {\n                return methodName;\n            }\n        };\n    }\n}\n",
    "package": "com.jstevh.viewer",
    "classname": "ClassInfo",
    "id": "/EvoSuiteBenchmark/original/91_classviewer/src/main/java/com/jstevh/viewer/ClassInfo_8Test.java",
    "test_prompt": "// ClassInfo_8Test.java\npackage com.jstevh.viewer;\n\nimport java.awt.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\nimport com.jstevh.tools.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassInfo}.\n* It contains ten unit test cases for the {@link ClassInfo#getFoundMethod(int)} method.\n*/\nclass ClassInfo_8Test {",
    "method_signature": "getFoundMethod(int)",
    "suffix": "8"
  }
]