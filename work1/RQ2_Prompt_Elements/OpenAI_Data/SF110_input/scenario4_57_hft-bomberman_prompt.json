[
  {
    "numberTests": "ten",
    "original_code": "// ExplosionBounds.java\npackage server;\n\nimport java.awt.Point;\n\n/**\n * This class is used by the server to define the bounds of a bomb explosion.\n * It contains four integer fields indicating the min/max pixel value\n * in the given direction that is affected by the explosion. It further offers\n * a method to test if a given point lies within the defined bounds.\n *\n * @author Steffen\n */\npublic class ExplosionBounds {\n\n    private int up;\n\n    private int down;\n\n    private int right;\n\n    private int left;\n\n    /**\n     * Creates a new ExplosionBounds object. The four integer parameters define\n     * the min/max pixel value in the given direction.\n     *\n     * @param up\n     * @param down\n     * @param right\n     * @param left\n     */\n    public ExplosionBounds(int up, int down, int right, int left) {\n    }\n\n    public int getUp();\n\n    public int getDown();\n\n    public int getRight();\n\n    public int getLeft();\n\n    /**\n     * Checks whether the given point lies within the bounds of the explosion.\n     *\n     * @param p The Point to be checked.\n     * @return True if p lies within the bounds, false if not.\n     */\n    public boolean contain(Point p);\n}\n",
    "package": "server",
    "classname": "ExplosionBounds",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/server/ExplosionBounds.java",
    "test_prompt": "// ExplosionBoundsTest.java\npackage server;\n\nimport java.awt.Point;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ExplosionBounds}.\n* It contains ten unit test cases for the {@link ExplosionBounds#contain(Point)} method.\n*/\nclass ExplosionBoundsTest {",
    "method_signature": "contain(Point)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// BomberServer.java\npackage server;\n\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Vector;\nimport javax.swing.ImageIcon;\nimport messages.Message;\nimport messages.global.GlobalServerMsg;\nimport messages.global.SessionDetailsMsg;\nimport messages.global.SessionListMsg;\nimport org.apache.log4j.Logger;\nimport org.hsqldb.Server;\nimport org.hsqldb.jdbc.jdbcDataSource;\nimport common.Constants;\n\n/**\n * This is the main server class. It is responsible for accepting connections\n * from clients and starting new games/session.\n *\n * @author Steffen, Bj�rn, Daniel\n */\npublic class BomberServer {\n\n    private static final Logger logger \u003d Logger.getLogger(BomberServer.class);\n\n    /**\n     * The BomberServer singleton.\n     */\n    private static BomberServer bomberServer;\n\n    /**\n     * The ServerSocket on which connections are accepted.\n     */\n    private ServerSocket srvSocket;\n\n    /**\n     * The sessions currently running on this on this server. key: session name,\n     * value: corresponding session object\n     */\n    private HashMap\u003cString, ServerGameSession\u003e gameSessions \u003d new HashMap\u003cString, ServerGameSession\u003e();\n\n    /**\n     * Contains all the clients who are currently in the global lobby.\n     */\n    private Vector\u003cClientInfo\u003e globalClients \u003d new Vector\u003cClientInfo\u003e();\n\n    /**\n     * Contains all the clients who are currently connected to the Server.\n     */\n    private Vector\u003cClientInfo\u003e allClients \u003d new Vector\u003cClientInfo\u003e();\n\n    private static int port \u003d Constants.DEFAULT_SERVER_PORT;\n\n    private ServerGameSession newSession;\n\n    /**\n     * Private constructor. Creates a new BomberServer. Use the\n     * getInstance-method to obtain the BomberServer singleton.\n     */\n    private BomberServer() {\n    }\n\n    private void startDB();\n\n    /**\n     * Main method. One optional parameter may be specified, which will be\n     * interpreted as the port number the server accepts client connections on.\n     *\n     * @param args\n     */\n    public static void main(String[] args);\n\n    /**\n     * Accepts incoming client connections.\n     */\n    public void waitForClients();\n\n    /**\n     * Creates a new GameSession.\n     *\n     * @param name\n     * @param totalRounds\n     * @return The newly created GameSession-object, null if the session name\n     *         was already taken\n     */\n    public ServerGameSession createSession(String name, List\u003cString\u003e maps, ImageIcon mapPreview, int nrOfPlayers, int totalRounds);\n\n    /**\n     * Creates a SessionListMsg from all open sessions and\n     * sends it to all clients.\n     */\n    private void broadcastSessionList();\n\n    /**\n     * Sends the message to all clients except the original sender itself.\n     *\n     * @param msg\n     *            The message to be sent.\n     * @param sender\n     *            The original sender of the msg.\n     */\n    public void multicastMsg(Message msg, ClientInfo sender);\n\n    /**\n     * Broadcasts a message to all connected clients.\n     *\n     * @param msg\n     *            The message to be sent.\n     */\n    public void broadcastMsg(Message msg);\n\n    /**\n     * this will exit the server\n     *\n     * @author Bj�rn\n     */\n    public void stopServer();\n\n    // shutdown database\n    public static void closeDB();\n\n    private static jdbcDataSource setupDataSource();\n\n    /**\n     * Removes the client whose ClientInfo object is passed as a parameter from\n     * the global area. As a result this client will no longer receive global\n     * messages.\n     *\n     * @param clientInfo\n     */\n    public void removeClientFromGlobal(ClientInfo clientInfo);\n\n    public void addClientToGlobal(ClientInfo clientInfo);\n\n    /**\n     * Removes a client\n     *\n     * @param clientInfo\n     */\n    public void removeClient(ClientInfo clientInfo);\n\n    public void addClient(ClientInfo clientInfo);\n\n    /**\n     * Static factory method.\n     *\n     * @return The BomberServer Singleton\n     */\n    public static BomberServer getInstance();\n\n    public Collection\u003cServerGameSession\u003e getGameSessions();\n\n    public ServerGameSession getGameSession(String name);\n\n    public void removeSession(String name);\n\n    public Vector\u003cClientInfo\u003e getClients();\n}\n",
    "package": "server",
    "classname": "BomberServer",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/server/BomberServer.java",
    "test_prompt": "// BomberServerTest.java\npackage server;\n\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Vector;\nimport javax.swing.ImageIcon;\nimport messages.Message;\nimport messages.global.GlobalServerMsg;\nimport messages.global.SessionDetailsMsg;\nimport messages.global.SessionListMsg;\nimport org.apache.log4j.Logger;\nimport org.hsqldb.Server;\nimport org.hsqldb.jdbc.jdbcDataSource;\nimport common.Constants;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BomberServer}.\n* It contains ten unit test cases for the {@link BomberServer#getInstance()} method.\n*/\nclass BomberServerTest {",
    "method_signature": "getInstance()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ServerBomb.java\npackage server;\n\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.util.Collection;\nimport java.util.Vector;\nimport messages.round.BombExplodedMsg;\nimport org.apache.log4j.Logger;\nimport common.Bomb;\nimport common.Constants;\nimport common.GameObject;\nimport common.Player;\nimport common.PowerUp;\nimport common.Tile;\nimport db.DBException;\nimport db.DBGameUser;\nimport db.DBServiceFactory;\n\n/**\n * The Bomb Object of the Server. This Bomb ticks some times and then exploded.\n * Then it detects the player and the tile hits.\n *\n * @author Bj�rn, Steffen, Daniel\n */\npublic class ServerBomb extends Bomb {\n\n    /**\n     * The negated number of frames rendered after an explosion\n     */\n    private static final int POST_EXPLOSION_FRAMES \u003d -40;\n\n    private static final Logger logger \u003d Logger.getLogger(ServerBomb.class);\n\n    private int tickTime \u003d 2500;\n\n    private int tickFrames \u003d tickTime / 16;\n\n    private ServerGameSession session;\n\n    private boolean hasAlreadyExploded;\n\n    private ExplosionBounds bounds;\n\n    private boolean explodesrightnow \u003d false;\n\n    public ServerBomb(Point position, ServerGameSession session) {\n    }\n\n    @Override\n    protected synchronized void move();\n\n    @Override\n    public synchronized void updateMovement(Point targetPosition);\n\n    /**\n     * Handles the explosion and the hit-detection of the bomb\n     *\n     * @return\n     */\n    public void explode(Collection\u003cGameObject\u003e gameObjects);\n\n    private void determineHits(Collection\u003cGameObject\u003e gameObjects);\n\n    private ExplosionBounds getExplosionBounds(Collection\u003cGameObject\u003e gameObjects);\n\n    /**\n     * Returns the vertical hitbox of the bomb\n     *\n     * @return\n     */\n    private Rectangle getVerticalHitBox();\n\n    /**\n     * Returns the horizontal hitbox of the bomb\n     *\n     * @return\n     */\n    private Rectangle getHorizontalHitBox();\n\n    @Override\n    public void updateWithCollisionCheck(Collection\u003cGameObject\u003e gameObjects);\n\n    /**\n     * handles the tick of the bomb\n     *\n     * @return\n     */\n    public boolean tick();\n\n    /**\n     * check if a gameObject is hit by the bomb\n     *\n     * @param gameObject\n     * @return\n     */\n    private boolean checkHit(GameObject gameObject);\n}\n",
    "package": "server",
    "classname": "ServerBomb",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/server/ServerBomb.java",
    "test_prompt": "// ServerBombTest.java\npackage server;\n\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.util.Collection;\nimport java.util.Vector;\nimport messages.round.BombExplodedMsg;\nimport org.apache.log4j.Logger;\nimport common.Bomb;\nimport common.Constants;\nimport common.GameObject;\nimport common.Player;\nimport common.PowerUp;\nimport common.Tile;\nimport db.DBException;\nimport db.DBGameUser;\nimport db.DBServiceFactory;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ServerBomb}.\n* It contains ten unit test cases for the {@link ServerBomb#tick()} method.\n*/\nclass ServerBombTest {",
    "method_signature": "tick()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// StopServer.java\npackage server;\n\nimport java.io.IOException;\nimport java.io.ObjectOutputStream;\nimport java.net.Socket;\nimport messages.Message;\nimport messages.global.StopServerMsg;\n\n/**\n * Sends a Message to the Server, that he should closed\n *\n * @author Bj�rn\n */\npublic class StopServer {\n\n    private ObjectOutputStream out;\n\n    private Socket server;\n\n    private String serverName \u003d \"193.196.141.182\";\n\n    private int serverPort \u003d 6666;\n\n    /**\n     * sends a message\n     *\n     * @param msg\n     */\n    public void sendMsg(Message msg);\n\n    /**\n     * Connect to the Server\n     */\n    public boolean connectToSrv();\n\n    /**\n     * Connect to the server, and send the message\n     *\n     * @param stop\n     */\n    public void callingStopServer(StopServer stop);\n\n    /**\n     * @param args\n     */\n    public static void main(String[] args);\n}\n",
    "package": "server",
    "classname": "StopServer",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/server/StopServer.java",
    "test_prompt": "// StopServerTest.java\npackage server;\n\nimport java.io.IOException;\nimport java.io.ObjectOutputStream;\nimport java.net.Socket;\nimport messages.Message;\nimport messages.global.StopServerMsg;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link StopServer}.\n* It contains ten unit test cases for the {@link StopServer#connectToSrv()} method.\n*/\nclass StopServerTest {",
    "method_signature": "connectToSrv()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Map.java\npackage common;\n\nimport java.awt.Point;\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.Vector;\n\n/**\n * Map-Class with all information needed for map use of iterators tile-iterator:\n * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :\n * map.powerupiterator)\n *\n * @author christian\n */\npublic class Map implements Iterable\u003cTile\u003e, Serializable {\n\n    private static final long serialVersionUID \u003d 1L;\n\n    // flags if tiles, powerups and startpoints need to be read and set\n    private boolean settiles \u003d true;\n\n    private boolean setpowerups \u003d true;\n\n    private boolean setstartpoints \u003d true;\n\n    // 2 dimensional game board\n    private Object[][] MapGrid;\n\n    private Vector\u003cPowerUp\u003e Powerups \u003d new Vector\u003cPowerUp\u003e();\n\n    private Point[] StartPoint;\n\n    private Point area;\n\n    private String name;\n\n    private String imageSet;\n\n    private String version;\n\n    private String author;\n\n    private Date date;\n\n    private int difficulty;\n\n    private int maxPlayers;\n\n    private String filePath;\n\n    private int itemId \u003d 0;\n\n    // iterator for powerups\n    public Map.PowerUpIterator powerupiterator;\n\n    /**\n     * creates map-object with empty Tile objects\n     *\n     * @param xmlFile -\n     *            path to xml file\n     */\n    public Map(String xmlFile) {\n    }\n\n    /**\n     * creates map-object with or without Tile objects\n     *\n     * @param xmlFile -\n     *            path to xml file\n     * @param info -\n     *            Boolean (noTile) if tiles should be read (false) or not (true)\n     */\n    public Map(String xmlFile, boolean settiles, boolean setpowerups, boolean setstartpoints) {\n    }\n\n    /**\n     * initiate map and create MapReader Object\n     *\n     * @param xmlFile\n     */\n    private void mapInit(String xmlFile);\n\n    /**\n     * overwrite specific MapTile at Index x, y\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     * @param tile -\n     *            MapTile object\n     */\n    public void setTileByIndex(int x, int y, Tile tile);\n\n    /**\n     * return MapTile object at Index x, y\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     * @return MapTile object\n     */\n    public Tile getTileByIndex(int x, int y);\n\n    /**\n     * overwrite specific MapTile at Position x, y\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     * @param tile -\n     *            MapTile object\n     */\n    public void setTile(int x, int y, Tile tile);\n\n    /**\n     * return MapTile object at Position x, y\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     * @return MapTile object\n     */\n    public Tile getTile(int x, int y);\n\n    /**\n     * Resets a tile to \"empty\" tile at specific position\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     */\n    public void resetTileByIndex(int x, int y);\n\n    /**\n     * Resets a tile to \"empty\" tile at specific coordinates\n     *\n     * @param x -\n     *            coordinates of horizontal tile\n     * @param y -\n     *            coordinates of vertical tile\n     */\n    public void resetTile(int x, int y);\n\n    /**\n     * overwrite specific PowerUp at Index x, y\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     * @param tile -\n     *            PoweUp object\n     */\n    public void addPowerup(PowerUp powerup);\n\n    /**\n     * retrieves a Vector with all PowerUps\n     *\n     * @return\n     */\n    public Vector\u003cPowerUp\u003e getPowerups();\n\n    /**\n     * sets a bunch of properties to map\n     *\n     * @param mapName -\n     *            Name of map\n     * @param mapVersion -\n     *            Version of map\n     * @param mapAuthor -\n     *            Name of author\n     * @param mapDate -\n     *            Date of map\n     * @param mapDifficulty -\n     *            Difficulty of map\n     * @param mapImageSet -\n     *            Default image set\n     * @param mapMaxPlayers -\n     *            Number of max players\n     * @param mapFilePath -\n     *            path to map xml file\n     */\n    public void setProperties(String mapName, String mapVersion, String mapAuthor, Date mapDate, int mapDifficulty, String mapImageSet, int mapMaxPlayers, String mapFilePath);\n\n    public String getImageSet();\n\n    public String getVersion();\n\n    public String getAuthor();\n\n    public Date getDate();\n\n    public int getDifficulty();\n\n    public String getName();\n\n    public int getMaxPlayers();\n\n    public String getFilePath();\n\n    /**\n     * sets measures of map\n     *\n     * @param x -\n     *            number of horizontal fields\n     * @param y -\n     *            number of vertical fields\n     */\n    public void setArea(int x, int y);\n\n    /**\n     * retrieve measures of map, number of horizontal and vertical fields\n     *\n     * @return\n     */\n    public Point getArea();\n\n    /**\n     * sets the start-point-position to map\n     *\n     * @param StPo -\n     *            array of start-point-positions\n     */\n    public void setStartPoints(Point[] StPo);\n\n    /**\n     * gets array of start-point positions (not coordinates)\n     *\n     * @return\n     */\n    public Point[] getStartPoints();\n\n    /**\n     * gets start-point-coordinates of player no. if not set, return coordinates\n     * of field 1/1\n     *\n     * @param playerNo -\n     *            number of player\n     * @return Point with coordinates\n     */\n    public Point getStartPoint(int playerNo);\n\n    /*\n\t * (non-Javadoc)\n\t * \n\t * @see java.lang.Iterable#iterator()\n\t */\n    @Override\n    public Iterator\u003cTile\u003e iterator();\n\n    /**\n     * iterator for PowerUp Objects in map\n     *\n     * @author christian\n     */\n    public class PowerUpIterator implements Iterable\u003cPowerUp\u003e, Serializable {\n\n        private static final long serialVersionUID \u003d 1L;\n\n        @Override\n        public Iterator\u003cPowerUp\u003e iterator() {\n            return Powerups.iterator();\n        }\n    }\n}\n",
    "package": "common",
    "classname": "Map",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/Map_0Test.java",
    "test_prompt": "// Map_0Test.java\npackage common;\n\nimport java.awt.Point;\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Map}.\n* It contains ten unit test cases for the {@link Map#getTileByIndex(int, int)} method.\n*/\nclass Map_0Test {",
    "method_signature": "getTileByIndex(int, int)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Map.java\npackage common;\n\nimport java.awt.Point;\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.Vector;\n\n/**\n * Map-Class with all information needed for map use of iterators tile-iterator:\n * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :\n * map.powerupiterator)\n *\n * @author christian\n */\npublic class Map implements Iterable\u003cTile\u003e, Serializable {\n\n    private static final long serialVersionUID \u003d 1L;\n\n    // flags if tiles, powerups and startpoints need to be read and set\n    private boolean settiles \u003d true;\n\n    private boolean setpowerups \u003d true;\n\n    private boolean setstartpoints \u003d true;\n\n    // 2 dimensional game board\n    private Object[][] MapGrid;\n\n    private Vector\u003cPowerUp\u003e Powerups \u003d new Vector\u003cPowerUp\u003e();\n\n    private Point[] StartPoint;\n\n    private Point area;\n\n    private String name;\n\n    private String imageSet;\n\n    private String version;\n\n    private String author;\n\n    private Date date;\n\n    private int difficulty;\n\n    private int maxPlayers;\n\n    private String filePath;\n\n    private int itemId \u003d 0;\n\n    // iterator for powerups\n    public Map.PowerUpIterator powerupiterator;\n\n    /**\n     * creates map-object with empty Tile objects\n     *\n     * @param xmlFile -\n     *            path to xml file\n     */\n    public Map(String xmlFile) {\n    }\n\n    /**\n     * creates map-object with or without Tile objects\n     *\n     * @param xmlFile -\n     *            path to xml file\n     * @param info -\n     *            Boolean (noTile) if tiles should be read (false) or not (true)\n     */\n    public Map(String xmlFile, boolean settiles, boolean setpowerups, boolean setstartpoints) {\n    }\n\n    /**\n     * initiate map and create MapReader Object\n     *\n     * @param xmlFile\n     */\n    private void mapInit(String xmlFile);\n\n    /**\n     * overwrite specific MapTile at Index x, y\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     * @param tile -\n     *            MapTile object\n     */\n    public void setTileByIndex(int x, int y, Tile tile);\n\n    /**\n     * return MapTile object at Index x, y\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     * @return MapTile object\n     */\n    public Tile getTileByIndex(int x, int y);\n\n    /**\n     * overwrite specific MapTile at Position x, y\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     * @param tile -\n     *            MapTile object\n     */\n    public void setTile(int x, int y, Tile tile);\n\n    /**\n     * return MapTile object at Position x, y\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     * @return MapTile object\n     */\n    public Tile getTile(int x, int y);\n\n    /**\n     * Resets a tile to \"empty\" tile at specific position\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     */\n    public void resetTileByIndex(int x, int y);\n\n    /**\n     * Resets a tile to \"empty\" tile at specific coordinates\n     *\n     * @param x -\n     *            coordinates of horizontal tile\n     * @param y -\n     *            coordinates of vertical tile\n     */\n    public void resetTile(int x, int y);\n\n    /**\n     * overwrite specific PowerUp at Index x, y\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     * @param tile -\n     *            PoweUp object\n     */\n    public void addPowerup(PowerUp powerup);\n\n    /**\n     * retrieves a Vector with all PowerUps\n     *\n     * @return\n     */\n    public Vector\u003cPowerUp\u003e getPowerups();\n\n    /**\n     * sets a bunch of properties to map\n     *\n     * @param mapName -\n     *            Name of map\n     * @param mapVersion -\n     *            Version of map\n     * @param mapAuthor -\n     *            Name of author\n     * @param mapDate -\n     *            Date of map\n     * @param mapDifficulty -\n     *            Difficulty of map\n     * @param mapImageSet -\n     *            Default image set\n     * @param mapMaxPlayers -\n     *            Number of max players\n     * @param mapFilePath -\n     *            path to map xml file\n     */\n    public void setProperties(String mapName, String mapVersion, String mapAuthor, Date mapDate, int mapDifficulty, String mapImageSet, int mapMaxPlayers, String mapFilePath);\n\n    public String getImageSet();\n\n    public String getVersion();\n\n    public String getAuthor();\n\n    public Date getDate();\n\n    public int getDifficulty();\n\n    public String getName();\n\n    public int getMaxPlayers();\n\n    public String getFilePath();\n\n    /**\n     * sets measures of map\n     *\n     * @param x -\n     *            number of horizontal fields\n     * @param y -\n     *            number of vertical fields\n     */\n    public void setArea(int x, int y);\n\n    /**\n     * retrieve measures of map, number of horizontal and vertical fields\n     *\n     * @return\n     */\n    public Point getArea();\n\n    /**\n     * sets the start-point-position to map\n     *\n     * @param StPo -\n     *            array of start-point-positions\n     */\n    public void setStartPoints(Point[] StPo);\n\n    /**\n     * gets array of start-point positions (not coordinates)\n     *\n     * @return\n     */\n    public Point[] getStartPoints();\n\n    /**\n     * gets start-point-coordinates of player no. if not set, return coordinates\n     * of field 1/1\n     *\n     * @param playerNo -\n     *            number of player\n     * @return Point with coordinates\n     */\n    public Point getStartPoint(int playerNo);\n\n    /*\n\t * (non-Javadoc)\n\t * \n\t * @see java.lang.Iterable#iterator()\n\t */\n    @Override\n    public Iterator\u003cTile\u003e iterator();\n\n    /**\n     * iterator for PowerUp Objects in map\n     *\n     * @author christian\n     */\n    public class PowerUpIterator implements Iterable\u003cPowerUp\u003e, Serializable {\n\n        private static final long serialVersionUID \u003d 1L;\n\n        @Override\n        public Iterator\u003cPowerUp\u003e iterator() {\n            return Powerups.iterator();\n        }\n    }\n}\n",
    "package": "common",
    "classname": "Map",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/Map_1Test.java",
    "test_prompt": "// Map_1Test.java\npackage common;\n\nimport java.awt.Point;\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Map}.\n* It contains ten unit test cases for the {@link Map#getTile(int, int)} method.\n*/\nclass Map_1Test {",
    "method_signature": "getTile(int, int)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// Map.java\npackage common;\n\nimport java.awt.Point;\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.Vector;\n\n/**\n * Map-Class with all information needed for map use of iterators tile-iterator:\n * for(Tile tile : map) - powerup-iterator: for(PowerUp powerup :\n * map.powerupiterator)\n *\n * @author christian\n */\npublic class Map implements Iterable\u003cTile\u003e, Serializable {\n\n    private static final long serialVersionUID \u003d 1L;\n\n    // flags if tiles, powerups and startpoints need to be read and set\n    private boolean settiles \u003d true;\n\n    private boolean setpowerups \u003d true;\n\n    private boolean setstartpoints \u003d true;\n\n    // 2 dimensional game board\n    private Object[][] MapGrid;\n\n    private Vector\u003cPowerUp\u003e Powerups \u003d new Vector\u003cPowerUp\u003e();\n\n    private Point[] StartPoint;\n\n    private Point area;\n\n    private String name;\n\n    private String imageSet;\n\n    private String version;\n\n    private String author;\n\n    private Date date;\n\n    private int difficulty;\n\n    private int maxPlayers;\n\n    private String filePath;\n\n    private int itemId \u003d 0;\n\n    // iterator for powerups\n    public Map.PowerUpIterator powerupiterator;\n\n    /**\n     * creates map-object with empty Tile objects\n     *\n     * @param xmlFile -\n     *            path to xml file\n     */\n    public Map(String xmlFile) {\n    }\n\n    /**\n     * creates map-object with or without Tile objects\n     *\n     * @param xmlFile -\n     *            path to xml file\n     * @param info -\n     *            Boolean (noTile) if tiles should be read (false) or not (true)\n     */\n    public Map(String xmlFile, boolean settiles, boolean setpowerups, boolean setstartpoints) {\n    }\n\n    /**\n     * initiate map and create MapReader Object\n     *\n     * @param xmlFile\n     */\n    private void mapInit(String xmlFile);\n\n    /**\n     * overwrite specific MapTile at Index x, y\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     * @param tile -\n     *            MapTile object\n     */\n    public void setTileByIndex(int x, int y, Tile tile);\n\n    /**\n     * return MapTile object at Index x, y\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     * @return MapTile object\n     */\n    public Tile getTileByIndex(int x, int y);\n\n    /**\n     * overwrite specific MapTile at Position x, y\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     * @param tile -\n     *            MapTile object\n     */\n    public void setTile(int x, int y, Tile tile);\n\n    /**\n     * return MapTile object at Position x, y\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     * @return MapTile object\n     */\n    public Tile getTile(int x, int y);\n\n    /**\n     * Resets a tile to \"empty\" tile at specific position\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     */\n    public void resetTileByIndex(int x, int y);\n\n    /**\n     * Resets a tile to \"empty\" tile at specific coordinates\n     *\n     * @param x -\n     *            coordinates of horizontal tile\n     * @param y -\n     *            coordinates of vertical tile\n     */\n    public void resetTile(int x, int y);\n\n    /**\n     * overwrite specific PowerUp at Index x, y\n     *\n     * @param x -\n     *            number of horizontal tile\n     * @param y -\n     *            number of vertical tile\n     * @param tile -\n     *            PoweUp object\n     */\n    public void addPowerup(PowerUp powerup);\n\n    /**\n     * retrieves a Vector with all PowerUps\n     *\n     * @return\n     */\n    public Vector\u003cPowerUp\u003e getPowerups();\n\n    /**\n     * sets a bunch of properties to map\n     *\n     * @param mapName -\n     *            Name of map\n     * @param mapVersion -\n     *            Version of map\n     * @param mapAuthor -\n     *            Name of author\n     * @param mapDate -\n     *            Date of map\n     * @param mapDifficulty -\n     *            Difficulty of map\n     * @param mapImageSet -\n     *            Default image set\n     * @param mapMaxPlayers -\n     *            Number of max players\n     * @param mapFilePath -\n     *            path to map xml file\n     */\n    public void setProperties(String mapName, String mapVersion, String mapAuthor, Date mapDate, int mapDifficulty, String mapImageSet, int mapMaxPlayers, String mapFilePath);\n\n    public String getImageSet();\n\n    public String getVersion();\n\n    public String getAuthor();\n\n    public Date getDate();\n\n    public int getDifficulty();\n\n    public String getName();\n\n    public int getMaxPlayers();\n\n    public String getFilePath();\n\n    /**\n     * sets measures of map\n     *\n     * @param x -\n     *            number of horizontal fields\n     * @param y -\n     *            number of vertical fields\n     */\n    public void setArea(int x, int y);\n\n    /**\n     * retrieve measures of map, number of horizontal and vertical fields\n     *\n     * @return\n     */\n    public Point getArea();\n\n    /**\n     * sets the start-point-position to map\n     *\n     * @param StPo -\n     *            array of start-point-positions\n     */\n    public void setStartPoints(Point[] StPo);\n\n    /**\n     * gets array of start-point positions (not coordinates)\n     *\n     * @return\n     */\n    public Point[] getStartPoints();\n\n    /**\n     * gets start-point-coordinates of player no. if not set, return coordinates\n     * of field 1/1\n     *\n     * @param playerNo -\n     *            number of player\n     * @return Point with coordinates\n     */\n    public Point getStartPoint(int playerNo);\n\n    /*\n\t * (non-Javadoc)\n\t * \n\t * @see java.lang.Iterable#iterator()\n\t */\n    @Override\n    public Iterator\u003cTile\u003e iterator();\n\n    /**\n     * iterator for PowerUp Objects in map\n     *\n     * @author christian\n     */\n    public class PowerUpIterator implements Iterable\u003cPowerUp\u003e, Serializable {\n\n        private static final long serialVersionUID \u003d 1L;\n\n        @Override\n        public Iterator\u003cPowerUp\u003e iterator() {\n            return Powerups.iterator();\n        }\n    }\n}\n",
    "package": "common",
    "classname": "Map",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/Map_2Test.java",
    "test_prompt": "// Map_2Test.java\npackage common;\n\nimport java.awt.Point;\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Map}.\n* It contains ten unit test cases for the {@link Map#getStartPoint(int)} method.\n*/\nclass Map_2Test {",
    "method_signature": "getStartPoint(int)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// ResourceService.java\npackage common;\n\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\n\n/**\n * This is an utility class that offers functionality to load resources that are\n * located in the classpath. This is used to load resources like images and sound files\n * from the client jar file.\n *\n * @author andi\n */\npublic class ResourceService {\n\n    /**\n     * Loads the {@link Image} that is located at the specified path.\n     * @param path The location of the image within the classpath.\n     * @return The loaded {@link Image} or null if there was an IOException while trying\n     * to read the image from a stream.\n     */\n    public static Image getImage(String path);\n\n    /**\n     * Loads the {@link ImageIcon} that is located at the specified path.\n     * @param path The location of the image within the classpath.\n     * @return The loaded {@link ImageIcon}\n     */\n    public static ImageIcon getImageIcon(String path);\n\n    /**\n     * Creates a connection to the resource that is located at the specified\n     * path via an {@link InputStream}.\n     * @param path The location of the resource within the classpath.\n     * @return The {@link InputStream} that points the requested resource.\n     */\n    public static InputStream getInputStream(String path);\n}\n",
    "package": "common",
    "classname": "ResourceService",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/ResourceService_0Test.java",
    "test_prompt": "// ResourceService_0Test.java\npackage common;\n\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ResourceService}.\n* It contains ten unit test cases for the {@link ResourceService#getImage(String)} method.\n*/\nclass ResourceService_0Test {",
    "method_signature": "getImage(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// ResourceService.java\npackage common;\n\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\n\n/**\n * This is an utility class that offers functionality to load resources that are\n * located in the classpath. This is used to load resources like images and sound files\n * from the client jar file.\n *\n * @author andi\n */\npublic class ResourceService {\n\n    /**\n     * Loads the {@link Image} that is located at the specified path.\n     * @param path The location of the image within the classpath.\n     * @return The loaded {@link Image} or null if there was an IOException while trying\n     * to read the image from a stream.\n     */\n    public static Image getImage(String path);\n\n    /**\n     * Loads the {@link ImageIcon} that is located at the specified path.\n     * @param path The location of the image within the classpath.\n     * @return The loaded {@link ImageIcon}\n     */\n    public static ImageIcon getImageIcon(String path);\n\n    /**\n     * Creates a connection to the resource that is located at the specified\n     * path via an {@link InputStream}.\n     * @param path The location of the resource within the classpath.\n     * @return The {@link InputStream} that points the requested resource.\n     */\n    public static InputStream getInputStream(String path);\n}\n",
    "package": "common",
    "classname": "ResourceService",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/ResourceService_1Test.java",
    "test_prompt": "// ResourceService_1Test.java\npackage common;\n\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ResourceService}.\n* It contains ten unit test cases for the {@link ResourceService#getImageIcon(String)} method.\n*/\nclass ResourceService_1Test {",
    "method_signature": "getImageIcon(String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// ResourceService.java\npackage common;\n\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\n\n/**\n * This is an utility class that offers functionality to load resources that are\n * located in the classpath. This is used to load resources like images and sound files\n * from the client jar file.\n *\n * @author andi\n */\npublic class ResourceService {\n\n    /**\n     * Loads the {@link Image} that is located at the specified path.\n     * @param path The location of the image within the classpath.\n     * @return The loaded {@link Image} or null if there was an IOException while trying\n     * to read the image from a stream.\n     */\n    public static Image getImage(String path);\n\n    /**\n     * Loads the {@link ImageIcon} that is located at the specified path.\n     * @param path The location of the image within the classpath.\n     * @return The loaded {@link ImageIcon}\n     */\n    public static ImageIcon getImageIcon(String path);\n\n    /**\n     * Creates a connection to the resource that is located at the specified\n     * path via an {@link InputStream}.\n     * @param path The location of the resource within the classpath.\n     * @return The {@link InputStream} that points the requested resource.\n     */\n    public static InputStream getInputStream(String path);\n}\n",
    "package": "common",
    "classname": "ResourceService",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/ResourceService_2Test.java",
    "test_prompt": "// ResourceService_2Test.java\npackage common;\n\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ResourceService}.\n* It contains ten unit test cases for the {@link ResourceService#getInputStream(String)} method.\n*/\nclass ResourceService_2Test {",
    "method_signature": "getInputStream(String)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// MapPreview.java\npackage common;\n\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.Point;\nimport java.awt.geom.AffineTransform;\nimport java.awt.image.AffineTransformOp;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Vector;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\nimport org.apache.log4j.Logger;\n\n/**\n * create a ImageIcon Map Preview of a map object\n *\n * usage example: MapPreview mp \u003d new MapPreview(map); mp.setImageSet(\"desert\");\n * (optional) ImageIcon ii \u003d mp.getMapPreview(150); !!\n *\n * @author christian\n */\npublic class MapPreview {\n\n    private String mapImageSet;\n\n    private Point mapArea;\n\n    private ImageIcon mapPreviewIcon;\n\n    private BufferedImage mapPreview;\n\n    private Map mapMap;\n\n    private String mapFile;\n\n    // map tile Images, for caching purposes\n    private static Image TILE_WALL_IMAGE;\n\n    private static Image TILE_STONE_IMAGE;\n\n    private static final Logger logger \u003d Logger.getLogger(MapPreview.class);\n\n    /**\n     * class for creating map Preview of Map map\n     *\n     * @param map -\n     *            map for which preview should be created\n     */\n    public MapPreview(Map map) {\n    }\n\n    /**\n     * set imageSet, overrides default map imageSet\n     *\n     * @param imageSet -\n     *            String, imageSet (-folder)\n     */\n    public void setImageSet(String imageSet);\n\n    /**\n     * returns preview of current map\n     *\n     * @param previewWidth -\n     *            Width of preview. Proportions are constrained\n     * @return BufferedImage with map preview\n     */\n    public ImageIcon getMapPreview(int previewWidth);\n\n    /**\n     * draws all map tiles to Graphics object\n     */\n    private void drawMap();\n\n    /**\n     * method for scaling/resizing BufferedImages to target width\n     *\n     * @param bi -\n     *            BufferedImage\n     * @param targetWidth -\n     *            target width of resized image\n     * @return BufferedImage - with map preview\n     */\n    private BufferedImage scale(BufferedImage bi, int targetWidth);\n\n    public Image LoadImage(String fileName);\n\n    /**\n     * draws tile at specific position\n     *\n     * @param g2d -\n     *            Graphics2D object\n     * @param position -\n     *            Point, coordinates\n     * @param fileName -\n     *            String, name of file, w/o path and ending\n     * @param middle -\n     *            is the position of element set to middle, correct the upper\n     *            left coordinate\n     */\n    public void drawTile(Graphics g, Point position, String fileName, Boolean middle);\n}\n",
    "package": "common",
    "classname": "MapPreview",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/MapPreview.java",
    "test_prompt": "// MapPreviewTest.java\npackage common;\n\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.Image;\nimport java.awt.Point;\nimport java.awt.geom.AffineTransform;\nimport java.awt.image.AffineTransformOp;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Vector;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\nimport org.apache.log4j.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapPreview}.\n* It contains ten unit test cases for the {@link MapPreview#getMapPreview(int)} method.\n*/\nclass MapPreviewTest {",
    "method_signature": "getMapPreview(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// XmlFunctions.java\npackage common;\n\nimport java.io.File;\nimport java.io.IOException;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathExpression;\nimport javax.xml.xpath.XPathExpressionException;\nimport javax.xml.xpath.XPathFactory;\nimport org.apache.log4j.Logger;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\n\n/**\n * basic functions for reading and writing xml files\n *\n * @author christian\n */\npublic class XmlFunctions {\n\n    private static final Logger logger \u003d Logger.getLogger(XmlFunctions.class);\n\n    Document xml;\n\n    String fileName;\n\n    /**\n     * constructor\n     *\n     * @param XmlFileName -\n     *            path to xml file\n     */\n    public XmlFunctions(String XmlFileName) {\n    }\n\n    /**\n     * sets value to specific xml node and saves the xml file\n     *\n     * @param element -\n     *            name of xml element\n     * @param value -\n     *            String, value to be set\n     */\n    public void setXmlValue(String xmlPath, String value);\n\n    /**\n     * returns value of specific xml element\n     *\n     * @param XmlPath -\n     *            element path (XPath)\n     * @return String with value of element\n     */\n    public String getXmlValue(String XmlPath);\n\n    /**\n     * reads a xml file into a Document object\n     *\n     * @param fileName -\n     *            path to xml file\n     */\n    private void openXmlFile(String fileName);\n\n    /**\n     * finds a xml node in the Document object and returns it\n     *\n     * @param XmlPath -\n     *            element path (XPath)\n     * @return Node - found node\n     */\n    private Node findXmlNode(String XmlPath);\n\n    /**\n     * returns a list of nodes matching to the element name\n     *\n     * @param NodeName -\n     *            name of element(s)\n     * @return NodeList with found nodes\n     */\n    public NodeList findXmlNodes(String NodeName);\n\n    /**\n     * writes global Document object xml (back) into xml file\n     */\n    private void writeXmlFile();\n}\n",
    "package": "common",
    "classname": "XmlFunctions",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/XmlFunctions_0Test.java",
    "test_prompt": "// XmlFunctions_0Test.java\npackage common;\n\nimport java.io.File;\nimport java.io.IOException;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathExpression;\nimport javax.xml.xpath.XPathExpressionException;\nimport javax.xml.xpath.XPathFactory;\nimport org.apache.log4j.Logger;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlFunctions}.\n* It contains ten unit test cases for the {@link XmlFunctions#getXmlValue(String)} method.\n*/\nclass XmlFunctions_0Test {",
    "method_signature": "getXmlValue(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// XmlFunctions.java\npackage common;\n\nimport java.io.File;\nimport java.io.IOException;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathExpression;\nimport javax.xml.xpath.XPathExpressionException;\nimport javax.xml.xpath.XPathFactory;\nimport org.apache.log4j.Logger;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\n\n/**\n * basic functions for reading and writing xml files\n *\n * @author christian\n */\npublic class XmlFunctions {\n\n    private static final Logger logger \u003d Logger.getLogger(XmlFunctions.class);\n\n    Document xml;\n\n    String fileName;\n\n    /**\n     * constructor\n     *\n     * @param XmlFileName -\n     *            path to xml file\n     */\n    public XmlFunctions(String XmlFileName) {\n    }\n\n    /**\n     * sets value to specific xml node and saves the xml file\n     *\n     * @param element -\n     *            name of xml element\n     * @param value -\n     *            String, value to be set\n     */\n    public void setXmlValue(String xmlPath, String value);\n\n    /**\n     * returns value of specific xml element\n     *\n     * @param XmlPath -\n     *            element path (XPath)\n     * @return String with value of element\n     */\n    public String getXmlValue(String XmlPath);\n\n    /**\n     * reads a xml file into a Document object\n     *\n     * @param fileName -\n     *            path to xml file\n     */\n    private void openXmlFile(String fileName);\n\n    /**\n     * finds a xml node in the Document object and returns it\n     *\n     * @param XmlPath -\n     *            element path (XPath)\n     * @return Node - found node\n     */\n    private Node findXmlNode(String XmlPath);\n\n    /**\n     * returns a list of nodes matching to the element name\n     *\n     * @param NodeName -\n     *            name of element(s)\n     * @return NodeList with found nodes\n     */\n    public NodeList findXmlNodes(String NodeName);\n\n    /**\n     * writes global Document object xml (back) into xml file\n     */\n    private void writeXmlFile();\n}\n",
    "package": "common",
    "classname": "XmlFunctions",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/XmlFunctions_1Test.java",
    "test_prompt": "// XmlFunctions_1Test.java\npackage common;\n\nimport java.io.File;\nimport java.io.IOException;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerConfigurationException;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathExpression;\nimport javax.xml.xpath.XPathExpressionException;\nimport javax.xml.xpath.XPathFactory;\nimport org.apache.log4j.Logger;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.SAXException;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlFunctions}.\n* It contains ten unit test cases for the {@link XmlFunctions#findXmlNodes(String)} method.\n*/\nclass XmlFunctions_1Test {",
    "method_signature": "findXmlNodes(String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// MapReader.java\npackage common;\n\nimport org.apache.log4j.Logger;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport java.awt.Point;\nimport javax.xml.xpath.*;\nimport java.util.Date;\n\n/**\n * Loads a XML-file and write read properties, tiles and start points to\n * map-object\n *\n * @author christian\n */\npublic class MapReader {\n\n    private XmlFunctions xmlFunctions;\n\n    private String mapFilePath;\n\n    private static final Logger logger \u003d Logger.getLogger(MapReader.class);\n\n    /**\n     * constructor\n     *\n     * @param mapFile -\n     *            Path to XML-file with map information\n     */\n    public MapReader(String mapFile) {\n    }\n\n    /**\n     * Returns a specific value in a group of nodes using XPath expressions\n     *\n     * @param node -\n     *            node(set) in which value should be searched\n     * @param XMLPath -\n     *            XPath expression\n     * @return String - found value\n     */\n    public String getXMLValue(Node node, String XMLPath);\n\n    /**\n     * Sets read properties to map-object using the setter-methods of map-object\n     *\n     * @param map -\n     *            Map object\n     */\n    public void setMapProperies(Map map);\n\n    /**\n     * sets the specific tiles to map object\n     *\n     * @param map\n     */\n    public void setTiles(Map map);\n\n    public void setPowerups(Map map);\n\n    /**\n     * automatically sets wall on the border of map set\n     *\n     * @param map\n     */\n    public void autoWall(Map map, String Type);\n\n    /**\n     * sets the start-points in map object. start points are read from xml\n     *\n     * @param map\n     */\n    public void setStartPoints(Map map);\n\n    /**\n     * gets area of map\n     *\n     * @return Point with x and y dimension/number of tiles\n     */\n    public Point getArea();\n}\n",
    "package": "common",
    "classname": "MapReader",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/MapReader.java",
    "test_prompt": "// MapReaderTest.java\npackage common;\n\nimport org.apache.log4j.Logger;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport java.awt.Point;\nimport javax.xml.xpath.*;\nimport java.util.Date;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapReader}.\n* It contains ten unit test cases for the {@link MapReader#getXMLValue(Node, String)} method.\n*/\nclass MapReaderTest {",
    "method_signature": "getXMLValue(Node, String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// MapFilesLister.java\npackage common;\n\nimport java.io.File;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Vector;\nimport org.apache.log4j.Logger;\nimport messages.global.MapInfo;\n\n/**\n * class for listing maps and returning map information\n *\n * @author christian\n */\npublic class MapFilesLister {\n\n    private static final Logger logger \u003d Logger.getLogger(MapFilesLister.class);\n\n    public MapFilesLister() {\n    }\n\n    /**\n     * reads directory and returns a list of found xml-files\n     *\n     * @param dir -\n     *            directory to be searched in\n     * @return Vector\u003cFile\u003e\n     */\n    public Vector\u003cFile\u003e ListMaps(String dir);\n\n    /**\n     * retrieve list of MapInfo objects\n     *\n     * @return\n     */\n    public List\u003cMapInfo\u003e getMapInfoList();\n\n    /**\n     * clears unused or obsolete map preview files\n     */\n    public void clearPreviews();\n}\n",
    "package": "common",
    "classname": "MapFilesLister",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/MapFilesLister.java",
    "test_prompt": "// MapFilesListerTest.java\npackage common;\n\nimport java.io.File;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Vector;\nimport org.apache.log4j.Logger;\nimport messages.global.MapInfo;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link MapFilesLister}.\n* It contains ten unit test cases for the {@link MapFilesLister#ListMaps(String)} method.\n*/\nclass MapFilesListerTest {",
    "method_signature": "ListMaps(String)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// GameModel.java\npackage common;\n\nimport java.awt.Point;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Vector;\nimport java.util.Map.Entry;\nimport messages.round.RoundTimeOverMsg;\nimport org.apache.log4j.Logger;\n\n/**\n * @author Steffen, Andi, Bj�rn\n */\npublic class GameModel {\n\n    protected HashMap\u003cInteger, GameObject\u003e gameObjects \u003d new HashMap\u003cInteger, GameObject\u003e();\n\n    protected Vector\u003cPlayer\u003e players \u003d new Vector\u003cPlayer\u003e();\n\n    protected long time \u003d Constants.time;\n\n    protected static final Logger logger \u003d Logger.getLogger(GameModel.class);\n\n    public void update();\n\n    /**\n     * Checks if the game is over and if yes returns the gameObjectId of the\n     * winner.\n     *\n     * @return -1 if game still running, 0 in case of a tie, gameObjectId of the\n     *         winner in all other cases\n     */\n    public int checkForWinner();\n\n    public void addGameObject(int id, GameObject newGameObject);\n\n    /**\n     * @param id\n     * @return\n     */\n    public GameObject getGameObjectById(int id);\n\n    public void snapToGrid(Bomb bomb);\n\n    /**\n     * Returns the actual time of this GameModel.\n     *\n     * @return long - actual time\n     */\n    public long getTime();\n\n    /**\n     * Sets the time of this GameModel.\n     *\n     * @param time\n     *            the time, which should be set\n     */\n    public void setTime(long time);\n\n    public Vector\u003cPlayer\u003e getPlayers();\n}\n",
    "package": "common",
    "classname": "GameModel",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/common/GameModel.java",
    "test_prompt": "// GameModelTest.java\npackage common;\n\nimport java.awt.Point;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Vector;\nimport java.util.Map.Entry;\nimport messages.round.RoundTimeOverMsg;\nimport org.apache.log4j.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GameModel}.\n* It contains ten unit test cases for the {@link GameModel#checkForWinner()} method.\n*/\nclass GameModelTest {",
    "method_signature": "checkForWinner()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ClientProperties.java\npackage client;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.apache.log4j.Logger;\nimport common.Constants;\nimport common.XmlFunctions;\n\n/**\n * reads and writes properties to xml-file\n * properties file is saved to user directory\n *\n * @author christian\n */\npublic class ClientProperties {\n\n    private XmlFunctions xmlFunctions;\n\n    // if set to true, class is ignoring invocations\n    private boolean fileError \u003d false;\n\n    private static final Logger logger \u003d Logger.getLogger(ClientProperties.class);\n\n    /**\n     * constructor, opens file for reading if exists\n     *\n     * @param fileName -\n     *            Name to xml file\n     */\n    public ClientProperties(String fileName) {\n    }\n\n    /**\n     * checks if local properties file is present, if not tries to copy empty\n     * file to location. If this fails, flag fileError is set to true and read\n     * or write access is bypassed\n     *\n     * @param fileName -\n     *            name of file\n     */\n    private void CheckPropertiesFile(String fileName);\n\n    /**\n     * get property value by element-name returns empty string if fileError is\n     * true\n     *\n     * @param element -\n     *            Name of element\n     * @return String - value\n     */\n    public String getProperty(String element);\n\n    /**\n     * (over)writes value of specific element\n     * does nothing if fileError is true\n     *\n     * @param element -\n     *            Name of element\n     * @param value -\n     *            new value\n     */\n    public void setProperty(String element, String value);\n\n    /**\n     * copies a file from a to b\n     * used InputStream as provided from ResourceService class as\n     * source and File as destination\n     *\n     * @param sourceFile -\n     *            InputStream - File which should be copied\n     * @param destFile -\n     *            destination where file should be copied to\n     * @return boolean - true if successfully copied, otherwise false\n     */\n    public static boolean fileCopy(InputStream sourceFile, File destFile);\n}\n",
    "package": "client",
    "classname": "ClientProperties",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/ClientProperties_0Test.java",
    "test_prompt": "// ClientProperties_0Test.java\npackage client;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.apache.log4j.Logger;\nimport common.Constants;\nimport common.XmlFunctions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientProperties}.\n* It contains ten unit test cases for the {@link ClientProperties#getProperty(String)} method.\n*/\nclass ClientProperties_0Test {",
    "method_signature": "getProperty(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClientProperties.java\npackage client;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.apache.log4j.Logger;\nimport common.Constants;\nimport common.XmlFunctions;\n\n/**\n * reads and writes properties to xml-file\n * properties file is saved to user directory\n *\n * @author christian\n */\npublic class ClientProperties {\n\n    private XmlFunctions xmlFunctions;\n\n    // if set to true, class is ignoring invocations\n    private boolean fileError \u003d false;\n\n    private static final Logger logger \u003d Logger.getLogger(ClientProperties.class);\n\n    /**\n     * constructor, opens file for reading if exists\n     *\n     * @param fileName -\n     *            Name to xml file\n     */\n    public ClientProperties(String fileName) {\n    }\n\n    /**\n     * checks if local properties file is present, if not tries to copy empty\n     * file to location. If this fails, flag fileError is set to true and read\n     * or write access is bypassed\n     *\n     * @param fileName -\n     *            name of file\n     */\n    private void CheckPropertiesFile(String fileName);\n\n    /**\n     * get property value by element-name returns empty string if fileError is\n     * true\n     *\n     * @param element -\n     *            Name of element\n     * @return String - value\n     */\n    public String getProperty(String element);\n\n    /**\n     * (over)writes value of specific element\n     * does nothing if fileError is true\n     *\n     * @param element -\n     *            Name of element\n     * @param value -\n     *            new value\n     */\n    public void setProperty(String element, String value);\n\n    /**\n     * copies a file from a to b\n     * used InputStream as provided from ResourceService class as\n     * source and File as destination\n     *\n     * @param sourceFile -\n     *            InputStream - File which should be copied\n     * @param destFile -\n     *            destination where file should be copied to\n     * @return boolean - true if successfully copied, otherwise false\n     */\n    public static boolean fileCopy(InputStream sourceFile, File destFile);\n}\n",
    "package": "client",
    "classname": "ClientProperties",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/ClientProperties_1Test.java",
    "test_prompt": "// ClientProperties_1Test.java\npackage client;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.apache.log4j.Logger;\nimport common.Constants;\nimport common.XmlFunctions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientProperties}.\n* It contains ten unit test cases for the {@link ClientProperties#fileCopy(InputStream, File)} method.\n*/\nclass ClientProperties_1Test {",
    "method_signature": "fileCopy(InputStream, File)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// ClientPlayer.java\npackage client;\n\nimport java.awt.Point;\nimport org.apache.log4j.Logger;\nimport sound.SoundPlayer;\nimport common.Actor;\nimport common.Constants;\nimport common.Player;\n\n/**\n * The client specific implemetation of a Player. This implementation will\n * notify any number of registered observers about changes to their state.\n *\n * @author Andi, Bj�rn\n */\npublic class ClientPlayer extends Player {\n\n    private boolean bowlBombs \u003d false;\n\n    private Logger logger \u003d Logger.getLogger(ClientPlayer.class);\n\n    private int bombsPlanted \u003d 0;\n\n    private int bombDiameter \u003d Constants.BOMB_DIAMETER;\n\n    private int maxBombs \u003d Constants.MIN_BOMBS;\n\n    private long lastPlant;\n\n    /**\n     * Creates a new ClientPlayer that starts on a fixed position.\n     *\n     * @param position\n     *            The starting location for this player.\n     */\n    public ClientPlayer(Point position, int id) {\n    }\n\n    /*\n\t * (non-Javadoc)\n\t * \n\t * @see common.Actor#preUpdate()\n\t */\n    @Override\n    protected void preUpdate();\n\n    /**\n     * Plants a bomb on the battlefield. The bomb will be located at the current\n     * position. If the user can bowl bombs the bomb get a moveVector. This will\n     * trigger a notification for the observers.\n     */\n    public void plantBomb();\n\n    /*\n\t * (non-Javadoc)\n\t * \n\t * @see common.Player#die()\n\t */\n    @Override\n    public void die();\n\n    /**\n     * Increases the maximum number of bombs this player can plant by one. If\n     * the player can already plant MAX_BOMDS bombs, this method will do\n     * nothing.\n     */\n    public void increaseMaxBombs();\n\n    /**\n     * Resets the maximum number of bombs this player can plant by one.\n     */\n    public void resetMaxBombs();\n\n    /**\n     * Notifies this player that a previously planted bomb has exploded. This\n     * will decrease the count of currently planted bombs.\n     */\n    public void plantedBombExploded();\n\n    /**\n     * Increases the diameter of the bomb, that this player can plant.\n     */\n    public void increaseBombDiameter();\n\n    /**\n     * Resets the diameter of the bomb, that this player can plant.\n     */\n    public void resetBombDiameter();\n\n    /**\n     * Sets, that player can bowl bombs\n     */\n    public void setBowlBombs();\n\n    /**\n     * Sets, that player can\u0027t bowl bombs\n     */\n    public void resetBowlBombs();\n\n    /**\n     * Returns weather the player can bowl bombs\n     *\n     * @return boolean can bowl bombs\n     */\n    public boolean canBowlBombs();\n}\n",
    "package": "client",
    "classname": "ClientPlayer",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/ClientPlayer.java",
    "test_prompt": "// ClientPlayerTest.java\npackage client;\n\nimport java.awt.Point;\nimport org.apache.log4j.Logger;\nimport sound.SoundPlayer;\nimport common.Actor;\nimport common.Constants;\nimport common.Player;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientPlayer}.\n* It contains ten unit test cases for the {@link ClientPlayer#canBowlBombs()} method.\n*/\nclass ClientPlayerTest {",
    "method_signature": "canBowlBombs()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ClientGameRound.java\npackage client;\n\nimport java.awt.Point;\nimport java.util.HashMap;\nimport java.util.Observable;\nimport java.util.Observer;\nimport java.util.Vector;\nimport org.apache.log4j.Logger;\nimport client.controller.LocalControl;\nimport client.gui.StartFrame;\nimport client.network.ForwardingObserver;\nimport client.view.BombView;\nimport client.view.GameCanvas;\nimport client.view.GameView;\nimport client.view.GfxFactory;\nimport client.view.OffGamePainter;\nimport client.view.PlayerView;\nimport client.view.PowerUpView;\nimport client.view.StatusView;\nimport client.view.TileView;\nimport common.Bomb;\nimport common.Constants;\nimport common.GameModel;\nimport common.GameObject;\nimport common.GameRound;\nimport common.Map;\nimport common.Player;\nimport common.PowerUp;\nimport common.Tile;\n\n/**\n * Represents a game on the client side. This class serves as a connection\n * between the model, view and game loop.\n *\n * @author Andi, Bj�rn\n */\npublic class ClientGameRound extends GameRound implements Observer {\n\n    /**\n     * The GameModel instance for this game.\n     */\n    private GameModel model;\n\n    /**\n     * The GameView instance for this game.\n     */\n    private GameView view;\n\n    /**\n     * The GameLoop instance for this game.\n     */\n    private ClientGameLoop gameLoop;\n\n    /**\n     * The GfxFactory instance for this game.\n     */\n    private GfxFactory gfxFactory;\n\n    private static final Logger logger \u003d Logger.getLogger(ClientGameRound.class);\n\n    private Player localPlayer;\n\n    private final ClientGameSession session;\n\n    private Thread offGamePainter;\n\n    private final GameCanvas gameCanvas;\n\n    private ForwardingObserver forwardingObserver;\n\n    /**\n     * Creates a new game that will be painted on the passed GameCanvas object.\n     * When this constructor finishes, all necessary game objects will be\n     * initialized, but they will lack player and map objects.\n     *\n     * @param gameCanvas\n     *            The canvas that will be used for painting the view.\n     */\n    public ClientGameRound(ClientGameSession session, GameCanvas gameCanvas) {\n    }\n\n    /**\n     * Adds a player to the game. Adds the player object to GameModel and\n     * creates a view object for the player and adds it to the GameView.\n     *\n     * @param player\n     *            The player to add to this game.\n     */\n    public void addPlayer(int id, ClientPlayer player);\n\n    public void addBomb(int id, Bomb bomb);\n\n    /**\n     * Sets the map for this game. All tiles that are contained in the map are\n     * added to the GameModel. For every tile a TileView is created and added to\n     * the GameView.\n     *\n     * @param map\u003d\n     *            The map that will be used in this game.\n     */\n    public void setMap(Map map);\n\n    /**\n     * Starts this game by creating a new thread and running the game loop in\n     * it.\n     */\n    public void start();\n\n    /**\n     * Set the local control for this game. This control will be used to move\n     * the local player on the screen.\n     *\n     * @param localControl\n     *            The local control to use.\n     */\n    public void setLocalControl(LocalControl localControl);\n\n    /**\n     * Called when an observable has changed. Usages:\n     * \u003cul\u003e\n     * \u003cli\u003ePlayer plants a bomb\n     * \u003c/ul\u003e\n     *\n     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)\n     */\n    @Override\n    public void update(Observable o, Object arg);\n\n    /**\n     * Searches and returns a GameObject by its id.\n     *\n     * @param id\n     *            The id of the GameObject that should be returned.\n     * @return The matching GameObject or null if the id is unknown.\n     */\n    public GameObject getGameObjectById(int id);\n\n    /**\n     * Updates the countdown for this GameRound. Visual and acoustic\n     * notifications will be triggered.\n     *\n     * @param countdown\n     *            The current countdown.\n     */\n    public void countdown(int countdown);\n\n    /**\n     * @param player\n     */\n    public void setLocalPlayer(Player localPlayer);\n\n    /**\n     * Finishes this game round by calculating the score and notifying the\n     * session that the round has ended.\n     *\n     * @see common.GameRound#doPostRoundProcessing()\n     */\n    @Override\n    public void doPostRoundProcessing();\n\n    /**\n     * Snaps the location of the given bomb to the next intersection on the\n     * grid.\n     *\n     * @param bomb\n     *            The bomb that should be relocated on the grid.\n     */\n    public void snapToGrid(Bomb bomb);\n\n    /**\n     * Sets the status of the round. This is used to inform the user about\n     * what\u0027s happening.\n     *\n     * @param string\n     *            The string that will be displayed to the user.\n     */\n    public void setStatus(String string);\n\n    /**\n     * End the game round. The action will stop but the game will still be\n     * painted on the canvas.\n     */\n    public void endRound();\n\n    /**\n     * Terminate this round. This will stop the rendering of the game.\n     */\n    public void terminateRound();\n\n    /**\n     * Returns the actual time of this GameRound.\n     *\n     * @return long - actual time\n     */\n    public long getTime();\n\n    /**\n     * Sets the time of this GameRound.\n     *\n     * @param time\n     *            the time, which should be set\n     */\n    public void setTime(long time);\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void createNewTile(Point point, int id, String type, boolean bombable, boolean accessible, boolean active);\n\n    public void toggleDisplayNames();\n\n    public void setRoundScore(HashMap\u003cString, Integer\u003e rndscore);\n}\n",
    "package": "client",
    "classname": "ClientGameRound",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/ClientGameRound.java",
    "test_prompt": "// ClientGameRoundTest.java\npackage client;\n\nimport java.awt.Point;\nimport java.util.HashMap;\nimport java.util.Observable;\nimport java.util.Observer;\nimport java.util.Vector;\nimport org.apache.log4j.Logger;\nimport client.controller.LocalControl;\nimport client.gui.StartFrame;\nimport client.network.ForwardingObserver;\nimport client.view.BombView;\nimport client.view.GameCanvas;\nimport client.view.GameView;\nimport client.view.GfxFactory;\nimport client.view.OffGamePainter;\nimport client.view.PlayerView;\nimport client.view.PowerUpView;\nimport client.view.StatusView;\nimport client.view.TileView;\nimport common.Bomb;\nimport common.Constants;\nimport common.GameModel;\nimport common.GameObject;\nimport common.GameRound;\nimport common.Map;\nimport common.Player;\nimport common.PowerUp;\nimport common.Tile;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientGameRound}.\n* It contains ten unit test cases for the {@link ClientGameRound#getGameObjectById(int)} method.\n*/\nclass ClientGameRoundTest {",
    "method_signature": "getGameObjectById(int)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// BomberClient.java\npackage client;\n\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\nimport javax.swing.ImageIcon;\nimport messages.Message;\nimport messages.global.InfoRequestMsg;\nimport messages.global.JoinSessionMsg;\nimport messages.global.MapInfo;\nimport messages.global.SessionDetailsMsg;\nimport messages.round.ClientQuitRunningSessionMsg;\nimport org.apache.log4j.Logger;\nimport client.gui.StartFrame;\nimport client.network.ClientMsgReceiver;\nimport client.network.ClientMsgSender;\n\n/**\n * This is central client class. It is responsible for globally scoped messages\n * and the creation of sessions.\n *\n * @author andi\n */\npublic class BomberClient extends Observable {\n\n    private static Logger logger \u003d Logger.getLogger(BomberClient.class);\n\n    /**\n     * The socket that is used to communicate with the server.\n     */\n    public Socket server;\n\n    /**\n     * The ip address of the server.\n     */\n    private String serverName \u003d \"localhost\";\n\n    /**\n     * The port on the server to connect to.\n     */\n    private int serverPort \u003d 6666;\n\n    /**\n     * The name of the player that is running this client.\n     */\n    private String playerName;\n\n    private ClientMsgReceiver msgReceiver;\n\n    private ClientMsgSender msgSender;\n\n    /**\n     * The id offset of this client. Generated ids will be in the range from\n     * idOffset to idOffset + 1000000.\n     */\n    private int idOffset \u003d -1;\n\n    /**\n     * Singleton instance\n     */\n    private static BomberClient instance;\n\n    /**\n     * The currently used (and sole) session.\n     */\n    private ClientGameSession currentSession;\n\n    /**\n     * A list of sessions that are running on the server.\n     */\n    private Vector\u003cSessionDetailsMsg\u003e availableSessions \u003d new Vector\u003cSessionDetailsMsg\u003e();\n\n    /**\n     * A list of maps that are availbale on the server.\n     */\n    private Vector\u003cMapInfo\u003e availableMaps;\n\n    private ClientGameSession requestedSession;\n\n    /**\n     * @return The current game session.\n     */\n    public ClientGameSession getCurrentSession();\n\n    /**\n     * Creates a new BomberClient. Use getInstance() to aquire an instance.\n     *\n     * @param playerName\n     *            The name of the player on this client.\n     */\n    private BomberClient(String playerName) {\n    }\n\n    /**\n     * Returns the singleton.\n     *\n     * @return The only BomberClient instance.\n     */\n    public static BomberClient getInstance();\n\n    /**\n     * Tries to connect to the server.\n     *\n     * @throws RuntimeException\n     *             Thrown when the connection attempt was not successful.\n     */\n    public boolean connectToSrv();\n\n    /**\n     * Sends a message to the server. The passed object will be serialized and\n     * transmitted to the server.\n     *\n     * @param msg\n     *            The message to send.\n     */\n    public void sendMsg(Message msg);\n\n    /**\n     * Creates a new id that is guaranteed to be unique for this class.\n     *\n     * @return The next valid id for this class.\n     */\n    public int getNextId();\n\n    /**\n     * Sets the id offset.\n     *\n     * @param idOffset\n     *            to set\n     */\n    public void setIdOffset(int idOffset);\n\n    /**\n     * Sets the current session.\n     *\n     * @param The\n     *            ClientGameSession to set.\n     */\n    public void setCurrentSession(ClientGameSession currentSession);\n\n    /**\n     * Create a new session on the server. The given arguments are rolled up\n     * into a SessionDetailsMsg and sent to the server.\n     *\n     * @param name\n     *            The name for the new session.\n     * @param maps\n     *            A list of map names that will be used for this session\n     * @param totalPlayers\n     *            The total number of players.\n     * @param rounds\n     *            The number of rounds to play.\n     */\n    public void createSession(String name, List\u003cString\u003e maps, ImageIcon mapPreview, int totalPlayers, int rounds);\n\n    public void openSession();\n\n    /**\n     * Requests a list of active sessions on the server.\n     */\n    public void requestSessionList();\n\n    /**\n     * Requests a list of available maps from the server.\n     */\n    public void requestMapList();\n\n    /**\n     * Returns a list of active sessions on the server. Invoke\n     * requestSessionList() to update this list.\n     *\n     * @return\n     */\n    public Vector\u003cSessionDetailsMsg\u003e getAvailableSessions();\n\n    /**\n     * @param sessionInfos\n     */\n    public void setAvailableSessions(Vector\u003cSessionDetailsMsg\u003e sessionInfos);\n\n    /**\n     * @param maps\n     */\n    public void setAvailableMaps(List\u003cMapInfo\u003e maps);\n\n    /**\n     * @return the availableMaps\n     */\n    public Vector\u003cMapInfo\u003e getAvailableMaps();\n\n    /**\n     * Creates a session from the details specified in the given\n     * SessionDetailMsg.\n     *\n     * @param session\n     *            The session to open on this client.\n     */\n    public void createSession(SessionDetailsMsg sessionDetails);\n\n    /**\n     * Sets the server-name\n     *\n     * @author Bj�rn\n     */\n    public void setServerName(String serverName);\n\n    /**\n     * Sets the server-port\n     *\n     * @author Bj�rn\n     */\n    public void setServerPort(int serverPort);\n\n    /**\n     * @param sender\n     * @param msg\n     */\n    public void addChatGlobal(String sender, String msg);\n\n    /**\n     * @param sender\n     * @param msg\n     */\n    public void addChatSession(String sender, String msg);\n\n    public void discardSessionRequest();\n\n    /**\n     * Closes the current session.\n     */\n    public void closeSession();\n\n    /**\n     * Closes the current session.\n     */\n    public void closeSessionAndShowHighscores();\n\n    /**\n     * Leave the current session.\n     */\n    public void leaveSession();\n\n    public void closeConnection();\n\n    public String getPlayerName();\n\n    public void setPlayerName(String playerName);\n\n    public void requestGlobalScore();\n\n    public void setGlobalscores(ArrayList scores);\n\n    public void setRoundScore(HashMap\u003cString, Integer\u003e rndscore);\n\n    public void setSessionScore(HashMap\u003cString, Integer\u003e rndscore);\n\n    /**\n     * @param i\n     */\n    public void quitRunningSession(int playerId);\n}\n",
    "package": "client",
    "classname": "BomberClient",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/BomberClient_0Test.java",
    "test_prompt": "// BomberClient_0Test.java\npackage client;\n\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\nimport javax.swing.ImageIcon;\nimport messages.Message;\nimport messages.global.InfoRequestMsg;\nimport messages.global.JoinSessionMsg;\nimport messages.global.MapInfo;\nimport messages.global.SessionDetailsMsg;\nimport messages.round.ClientQuitRunningSessionMsg;\nimport org.apache.log4j.Logger;\nimport client.gui.StartFrame;\nimport client.network.ClientMsgReceiver;\nimport client.network.ClientMsgSender;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BomberClient}.\n* It contains ten unit test cases for the {@link BomberClient#getInstance()} method.\n*/\nclass BomberClient_0Test {",
    "method_signature": "getInstance()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// BomberClient.java\npackage client;\n\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\nimport javax.swing.ImageIcon;\nimport messages.Message;\nimport messages.global.InfoRequestMsg;\nimport messages.global.JoinSessionMsg;\nimport messages.global.MapInfo;\nimport messages.global.SessionDetailsMsg;\nimport messages.round.ClientQuitRunningSessionMsg;\nimport org.apache.log4j.Logger;\nimport client.gui.StartFrame;\nimport client.network.ClientMsgReceiver;\nimport client.network.ClientMsgSender;\n\n/**\n * This is central client class. It is responsible for globally scoped messages\n * and the creation of sessions.\n *\n * @author andi\n */\npublic class BomberClient extends Observable {\n\n    private static Logger logger \u003d Logger.getLogger(BomberClient.class);\n\n    /**\n     * The socket that is used to communicate with the server.\n     */\n    public Socket server;\n\n    /**\n     * The ip address of the server.\n     */\n    private String serverName \u003d \"localhost\";\n\n    /**\n     * The port on the server to connect to.\n     */\n    private int serverPort \u003d 6666;\n\n    /**\n     * The name of the player that is running this client.\n     */\n    private String playerName;\n\n    private ClientMsgReceiver msgReceiver;\n\n    private ClientMsgSender msgSender;\n\n    /**\n     * The id offset of this client. Generated ids will be in the range from\n     * idOffset to idOffset + 1000000.\n     */\n    private int idOffset \u003d -1;\n\n    /**\n     * Singleton instance\n     */\n    private static BomberClient instance;\n\n    /**\n     * The currently used (and sole) session.\n     */\n    private ClientGameSession currentSession;\n\n    /**\n     * A list of sessions that are running on the server.\n     */\n    private Vector\u003cSessionDetailsMsg\u003e availableSessions \u003d new Vector\u003cSessionDetailsMsg\u003e();\n\n    /**\n     * A list of maps that are availbale on the server.\n     */\n    private Vector\u003cMapInfo\u003e availableMaps;\n\n    private ClientGameSession requestedSession;\n\n    /**\n     * @return The current game session.\n     */\n    public ClientGameSession getCurrentSession();\n\n    /**\n     * Creates a new BomberClient. Use getInstance() to aquire an instance.\n     *\n     * @param playerName\n     *            The name of the player on this client.\n     */\n    private BomberClient(String playerName) {\n    }\n\n    /**\n     * Returns the singleton.\n     *\n     * @return The only BomberClient instance.\n     */\n    public static BomberClient getInstance();\n\n    /**\n     * Tries to connect to the server.\n     *\n     * @throws RuntimeException\n     *             Thrown when the connection attempt was not successful.\n     */\n    public boolean connectToSrv();\n\n    /**\n     * Sends a message to the server. The passed object will be serialized and\n     * transmitted to the server.\n     *\n     * @param msg\n     *            The message to send.\n     */\n    public void sendMsg(Message msg);\n\n    /**\n     * Creates a new id that is guaranteed to be unique for this class.\n     *\n     * @return The next valid id for this class.\n     */\n    public int getNextId();\n\n    /**\n     * Sets the id offset.\n     *\n     * @param idOffset\n     *            to set\n     */\n    public void setIdOffset(int idOffset);\n\n    /**\n     * Sets the current session.\n     *\n     * @param The\n     *            ClientGameSession to set.\n     */\n    public void setCurrentSession(ClientGameSession currentSession);\n\n    /**\n     * Create a new session on the server. The given arguments are rolled up\n     * into a SessionDetailsMsg and sent to the server.\n     *\n     * @param name\n     *            The name for the new session.\n     * @param maps\n     *            A list of map names that will be used for this session\n     * @param totalPlayers\n     *            The total number of players.\n     * @param rounds\n     *            The number of rounds to play.\n     */\n    public void createSession(String name, List\u003cString\u003e maps, ImageIcon mapPreview, int totalPlayers, int rounds);\n\n    public void openSession();\n\n    /**\n     * Requests a list of active sessions on the server.\n     */\n    public void requestSessionList();\n\n    /**\n     * Requests a list of available maps from the server.\n     */\n    public void requestMapList();\n\n    /**\n     * Returns a list of active sessions on the server. Invoke\n     * requestSessionList() to update this list.\n     *\n     * @return\n     */\n    public Vector\u003cSessionDetailsMsg\u003e getAvailableSessions();\n\n    /**\n     * @param sessionInfos\n     */\n    public void setAvailableSessions(Vector\u003cSessionDetailsMsg\u003e sessionInfos);\n\n    /**\n     * @param maps\n     */\n    public void setAvailableMaps(List\u003cMapInfo\u003e maps);\n\n    /**\n     * @return the availableMaps\n     */\n    public Vector\u003cMapInfo\u003e getAvailableMaps();\n\n    /**\n     * Creates a session from the details specified in the given\n     * SessionDetailMsg.\n     *\n     * @param session\n     *            The session to open on this client.\n     */\n    public void createSession(SessionDetailsMsg sessionDetails);\n\n    /**\n     * Sets the server-name\n     *\n     * @author Bj�rn\n     */\n    public void setServerName(String serverName);\n\n    /**\n     * Sets the server-port\n     *\n     * @author Bj�rn\n     */\n    public void setServerPort(int serverPort);\n\n    /**\n     * @param sender\n     * @param msg\n     */\n    public void addChatGlobal(String sender, String msg);\n\n    /**\n     * @param sender\n     * @param msg\n     */\n    public void addChatSession(String sender, String msg);\n\n    public void discardSessionRequest();\n\n    /**\n     * Closes the current session.\n     */\n    public void closeSession();\n\n    /**\n     * Closes the current session.\n     */\n    public void closeSessionAndShowHighscores();\n\n    /**\n     * Leave the current session.\n     */\n    public void leaveSession();\n\n    public void closeConnection();\n\n    public String getPlayerName();\n\n    public void setPlayerName(String playerName);\n\n    public void requestGlobalScore();\n\n    public void setGlobalscores(ArrayList scores);\n\n    public void setRoundScore(HashMap\u003cString, Integer\u003e rndscore);\n\n    public void setSessionScore(HashMap\u003cString, Integer\u003e rndscore);\n\n    /**\n     * @param i\n     */\n    public void quitRunningSession(int playerId);\n}\n",
    "package": "client",
    "classname": "BomberClient",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/BomberClient_1Test.java",
    "test_prompt": "// BomberClient_1Test.java\npackage client;\n\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\nimport javax.swing.ImageIcon;\nimport messages.Message;\nimport messages.global.InfoRequestMsg;\nimport messages.global.JoinSessionMsg;\nimport messages.global.MapInfo;\nimport messages.global.SessionDetailsMsg;\nimport messages.round.ClientQuitRunningSessionMsg;\nimport org.apache.log4j.Logger;\nimport client.gui.StartFrame;\nimport client.network.ClientMsgReceiver;\nimport client.network.ClientMsgSender;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link BomberClient}.\n* It contains ten unit test cases for the {@link BomberClient#connectToSrv()} method.\n*/\nclass BomberClient_1Test {",
    "method_signature": "connectToSrv()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// GfxFactory.java\npackage client.view;\n\nimport java.awt.Image;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport javax.imageio.ImageIO;\nimport org.apache.log4j.Logger;\nimport common.ResourceService;\n\n/**\n * @author Andreas Glauner\n * @autor Adam Kozielski\n */\npublic class GfxFactory {\n\n    private HashMap\u003cInteger, Image\u003e wallImageCache;\n\n    private HashMap\u003cString, Image\u003e tileImageCache;\n\n    private HashMap\u003cString, Image\u003e powerUpImageCache;\n\n    private HashMap\u003cString, Image\u003e o;\n\n    private HashMap\u003cInteger, Image\u003e[] playerImageCache;\n\n    private HashMap\u003cInteger, Image\u003e[] bombImageCache;\n\n    private HashMap\u003cInteger, Integer\u003e idTranslator;\n\n    private HashMap\u003cInteger, Image\u003e[] explosionImageCache;\n\n    private ExplosionGfxFactory explosionGfxFactory;\n\n    private int currentId \u003d 1;\n\n    private static String basePath \u003d \"/gfx\";\n\n    private String tileSet \u003d \"ice\";\n\n    private Logger logger \u003d Logger.getLogger(GfxFactory.class);\n\n    public GfxFactory() {\n    }\n\n    /**\n     * @param id The player id.\n     * @param state\n     * @return\n     */\n    public Image getPlayerImage(int id, int state);\n\n    public Image getTileImage(String type);\n\n    private int translateId(int id);\n\n    private Image loadImage(String path);\n\n    /**\n     * @param id The planter\u0027s id.\n     * @return\n     */\n    public Image getBombImage(int id);\n\n    /**\n     * @param id The planter\u0027s id.\n     * @return\n     */\n    public Image getBombImage(int id, int state);\n\n    public Image getExplosionImage(int diameter, int id);\n\n    public void setTileSet(String tileSet);\n\n    public Image getWallImage(int state);\n\n    /**\n     * Power up image loading\n     * @param type A String value describing the type of powerUp\n     *  *\n     */\n    public Image getPowerUpImage(String type);\n}\n",
    "package": "client.view",
    "classname": "GfxFactory",
    "id": "/EvoSuiteBenchmark/original/57_hft-bomberman/src/main/java/client/view/GfxFactory.java",
    "test_prompt": "// GfxFactoryTest.java\npackage client.view;\n\nimport java.awt.Image;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport javax.imageio.ImageIO;\nimport org.apache.log4j.Logger;\nimport common.ResourceService;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link GfxFactory}.\n* It contains ten unit test cases for the {@link GfxFactory#getPowerUpImage(String)} method.\n*/\nclass GfxFactoryTest {",
    "method_signature": "getPowerUpImage(String)",
    "suffix": ""
  }
]