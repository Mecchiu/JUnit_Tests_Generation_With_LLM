[
  {
    "numberTests": "ten",
    "original_code": "// HTMLOutputStream.java\npackage bible.servlet;\n\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport java.io.*;\nimport java.net.*;\n\n/**\n * A container for output streams with its own buffers\n *\n * @author Luke Samaha\n */\npublic class HTMLOutputStream {\n\n    public HTMLOutputStream(HttpServletResponse response) throws IOException {\n    }\n\n    public void print(String str);\n\n    public void print(int n);\n\n    public void println(String str);\n\n    public void println(int n);\n\n    public void flush() throws IOException;\n\n    public int getSize();\n\n    public PrintWriter getPW();\n\n    /**\n     * @author James Stauffer\n     * @return String the contents of the buffer.\n     */\n    public String reset();\n\n    public String toString();\n\n    //  Private instance variables\n    private HttpServletResponse response \u003d null;\n\n    private boolean binary \u003d false;\n\n    private ByteArrayOutputStream baos \u003d null;\n\n    private PrintWriter pw \u003d null;\n}\n",
    "package": "bible.servlet",
    "classname": "HTMLOutputStream",
    "id": "/EvoSuiteBenchmark/original/68_biblestudy/src/main/java/bible/servlet/HTMLOutputStream.java",
    "test_prompt": "// HTMLOutputStreamTest.java\npackage bible.servlet;\n\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport java.io.*;\nimport java.net.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HTMLOutputStream}.\n* It contains ten unit test cases for the {@link HTMLOutputStream#reset()} method.\n*/\nclass HTMLOutputStreamTest {",
    "method_signature": "reset()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Queue.java\npackage bible.util;\n\nimport java.util.*;\n\n/**\n * Queue is a storage class to link together \u003cb\u003eNode\u003c/b\u003e objects which are\n * stored in a first in first out storage system.\n *\n * @see Node\n * @version 1.0\n * @author LaMoine Zielieke, James Stauffer\n */\npublic class Queue {\n\n    public final static int NO_MAXIMUM \u003d -1;\n\n    /**\n     * number of items in this list\n     */\n    private int numItems;\n\n    private int maxNumItems;\n\n    private int maxCapacity;\n\n    /**\n     * first Node in list\n     */\n    private Node first;\n\n    /**\n     * last Node in list\n     */\n    private Node last;\n\n    /**\n     * Constructor creating an empty Queue.  All variables are set to zero\n     * or null.\n     */\n    public Queue() {\n    }\n\n    /**\n     * Constructor creating an empty Queue.  All variables are set to zero\n     * or null.\n     */\n    public Queue(int capacity) {\n    }\n\n    /**\n     * See if the queue is empty.\n     * @return     \u003ccode\u003etrue\u003c/code\u003e if Queue is empty;\n     *             \u003ccode\u003efalse\u003c/code\u003e otherwise.\n     */\n    public boolean isEmpty();\n\n    /**\n     * Insert an object into the end of the queue\n     *\n     * @param someObject  the Object to store\n     */\n    public void enqueue(Object someObject);\n\n    /**\n     * Remove an object from the front of the Queue\n     *\n     * @return       Object if Queue is not empty\n     *               otherwise print message to dos window\n     * @see GameQuestion\n     */\n    public synchronized Object dequeue();\n\n    /**\n     *  Removes all nodes where Node.value.equals(object).\n     */\n    public synchronized int remove(Object object);\n\n    /**\n     *  Moves element to back of que.\n     */\n    public synchronized void refreshElement(Object object);\n\n    /**\n     * See how many items are in the queue.\n     *\n     * @return integer value of number of items in queue\n     */\n    public int getNumberItems();\n\n    /**\n     * The peak number of items in the Queue.\n     *\n     * @return peak number of items in queue\n     */\n    public int getPeakNumberItems();\n\n    /**\n     * The Queue is stepped through one node at a time and the\n     * QuestionNumber is inserted into a Vector.This action copies\n     * unused question numbers from queue into temp vector.\n     *\n     * @return   Vector of unused question numbers. In this way when\n     *           a new vector of randomized numbers is created the nunbers\n     *           already in the queue will not be duplicated.  If number\n     *           396 is in the queue we do not want 396 to appear in the\n     *           new randomized vector.  This method is only called in\n     *           \u003cb\u003eDataBase\u003c/b\u003e\n     * @see      Database#load\n     * @see      GameQuestion\n     */\n    public Vector getObjects();\n\n    /**\n     *  Returns true if the first should be removed.\n     */\n    public boolean maxCapacityExceeded();\n\n    public String toString();\n\n    /**\n     * Node objects hold the Object to be stored and the next node in our linked list.\n     * In this way we can access the next node in our \u003cb\u003eQueue\u003c/b\u003e.\n     *\n     * @version   2.0\n     * @author    LaMoine Zielieke\n     */\n    class Node {\n\n        /**\n         * The next Node in the chain.\n         */\n        Node next;\n\n        /**\n         * The Object this node stores.\n         */\n        Object value;\n\n        /**\n         * @param  obj   the Object to be inserted into the node.\n         */\n        public Node(Object obj) {\n            value \u003d obj;\n        }\n    }\n}\n",
    "package": "bible.util",
    "classname": "Queue",
    "id": "/EvoSuiteBenchmark/original/68_biblestudy/src/main/java/bible/util/Queue_0Test.java",
    "test_prompt": "// Queue_0Test.java\npackage bible.util;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Queue}.\n* It contains ten unit test cases for the {@link Queue#dequeue()} method.\n*/\nclass Queue_0Test {",
    "method_signature": "dequeue()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Queue.java\npackage bible.util;\n\nimport java.util.*;\n\n/**\n * Queue is a storage class to link together \u003cb\u003eNode\u003c/b\u003e objects which are\n * stored in a first in first out storage system.\n *\n * @see Node\n * @version 1.0\n * @author LaMoine Zielieke, James Stauffer\n */\npublic class Queue {\n\n    public final static int NO_MAXIMUM \u003d -1;\n\n    /**\n     * number of items in this list\n     */\n    private int numItems;\n\n    private int maxNumItems;\n\n    private int maxCapacity;\n\n    /**\n     * first Node in list\n     */\n    private Node first;\n\n    /**\n     * last Node in list\n     */\n    private Node last;\n\n    /**\n     * Constructor creating an empty Queue.  All variables are set to zero\n     * or null.\n     */\n    public Queue() {\n    }\n\n    /**\n     * Constructor creating an empty Queue.  All variables are set to zero\n     * or null.\n     */\n    public Queue(int capacity) {\n    }\n\n    /**\n     * See if the queue is empty.\n     * @return     \u003ccode\u003etrue\u003c/code\u003e if Queue is empty;\n     *             \u003ccode\u003efalse\u003c/code\u003e otherwise.\n     */\n    public boolean isEmpty();\n\n    /**\n     * Insert an object into the end of the queue\n     *\n     * @param someObject  the Object to store\n     */\n    public void enqueue(Object someObject);\n\n    /**\n     * Remove an object from the front of the Queue\n     *\n     * @return       Object if Queue is not empty\n     *               otherwise print message to dos window\n     * @see GameQuestion\n     */\n    public synchronized Object dequeue();\n\n    /**\n     *  Removes all nodes where Node.value.equals(object).\n     */\n    public synchronized int remove(Object object);\n\n    /**\n     *  Moves element to back of que.\n     */\n    public synchronized void refreshElement(Object object);\n\n    /**\n     * See how many items are in the queue.\n     *\n     * @return integer value of number of items in queue\n     */\n    public int getNumberItems();\n\n    /**\n     * The peak number of items in the Queue.\n     *\n     * @return peak number of items in queue\n     */\n    public int getPeakNumberItems();\n\n    /**\n     * The Queue is stepped through one node at a time and the\n     * QuestionNumber is inserted into a Vector.This action copies\n     * unused question numbers from queue into temp vector.\n     *\n     * @return   Vector of unused question numbers. In this way when\n     *           a new vector of randomized numbers is created the nunbers\n     *           already in the queue will not be duplicated.  If number\n     *           396 is in the queue we do not want 396 to appear in the\n     *           new randomized vector.  This method is only called in\n     *           \u003cb\u003eDataBase\u003c/b\u003e\n     * @see      Database#load\n     * @see      GameQuestion\n     */\n    public Vector getObjects();\n\n    /**\n     *  Returns true if the first should be removed.\n     */\n    public boolean maxCapacityExceeded();\n\n    public String toString();\n\n    /**\n     * Node objects hold the Object to be stored and the next node in our linked list.\n     * In this way we can access the next node in our \u003cb\u003eQueue\u003c/b\u003e.\n     *\n     * @version   2.0\n     * @author    LaMoine Zielieke\n     */\n    class Node {\n\n        /**\n         * The next Node in the chain.\n         */\n        Node next;\n\n        /**\n         * The Object this node stores.\n         */\n        Object value;\n\n        /**\n         * @param  obj   the Object to be inserted into the node.\n         */\n        public Node(Object obj) {\n            value \u003d obj;\n        }\n    }\n}\n",
    "package": "bible.util",
    "classname": "Queue",
    "id": "/EvoSuiteBenchmark/original/68_biblestudy/src/main/java/bible/util/Queue_1Test.java",
    "test_prompt": "// Queue_1Test.java\npackage bible.util;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Queue}.\n* It contains ten unit test cases for the {@link Queue#maxCapacityExceeded()} method.\n*/\nclass Queue_1Test {",
    "method_signature": "maxCapacityExceeded()",
    "suffix": "1"
  }
]