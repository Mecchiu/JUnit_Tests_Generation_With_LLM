[
  {
    "numberTests": "ten",
    "original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger \u003d LogFactory.getLog(Functions.class);\r\n    private static final Map\u003cInteger, String\u003e NUMBERS_WORD \u003d new HashMap\u003cInteger, String\u003e();\r\n\r\n    private static final String UNDERSCORE \u003d \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE \u003d \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE \u003d \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE \u003d { \"-\", \":\", \",\", \"\u0027\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX \u003d \"...\";\r\n\r\n    private static final String STRING_SPACE \u003d \" \";\r\n\r\n    private static final String STRING_DOT \u003d \".\";\r\n\r\n    private static final String STRING_COMMA \u003d \",\";\r\n\r\n    private static final String STRING_EMPTY \u003d \"\";\r\n\r\n    private static final String STRING_HTML_CR \u003d \"\u003cbr /\u003e\";\r\n\r\n    //private static final String STRING_CR \u003d System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX \u003d \"\\n\";\r\n\r\n    private final static String EOL_WIN32 \u003d \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY \u003d \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX \u003d \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX \u003d \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c \u003d Calendar.getInstance();\r\n        int oYear \u003d c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection \u003d\u003d null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable\u003cObject\u003e oIterable \u003d (Iterable\u003cObject\u003e) pCollection;\r\n            int oSize \u003d 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings \u003d\u003d null || pStrings.length \u003d\u003d 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf \u003d new StringBuffer();\r\n        for (int i \u003d 0; i \u003c pStrings.length; i++) {\r\n            if (oBuf.length() \u003e 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue \u003d\u003d null)\r\n            return pValue;\r\n        String oResult \u003d pValue;\r\n        oResult \u003d oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i \u003d 0; i \u003c TO_REPLACE.length; i++) {\r\n            oResult \u003d oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult \u003d oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s \u003d\u003d null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\\u003c[^\u003e]*\\\\\u003e\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s \u003d\u003d null)\r\n            return null;\r\n        String oResult \u003d stripHTML(s);\r\n        if (oResult.length() \u003c pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf \u003d new StringBuilder();\r\n        String[] oWords \u003d oResult.split(STRING_SPACE);\r\n        int i \u003d 0;\r\n        while (i \u003c oWords.length \u0026\u0026 oBuf.length() \u003c pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult \u003d oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult \u003d oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult \u003d stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s \u003d\u003d null)\r\n            return null;\r\n        String oResult \u003d s.replaceAll(\"\u003cp\u003e\", STRING_SPACE);\r\n        oResult \u003d oResult.replaceAll(\"\u003c/p\u003e\", STRING_EMPTY);\r\n        oResult \u003d oResult.replaceAll(\"\u003cbr /\u003e\", STRING_SPACE);\r\n        oResult \u003d oResult.replaceAll(\"\u003cbr\u003e\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom \u003d\u003d null)\r\n            return \"\";\r\n        String oCaption \u003d null;\r\n        long oDiff \u003d Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed \u003d oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed \u003c\u003d 1) {\r\n            long oMinutesPassed \u003d oDiff / (1000 * 60);\r\n            if (oMinutesPassed \u003c\u003d 1) {\r\n                oCaption \u003d \"1 minute ago\";\r\n            } else if (oMinutesPassed \u003c\u003d 5) {\r\n                oCaption \u003d \"5 minutes ago\";\r\n            } else if (oMinutesPassed \u003c\u003d 30) {\r\n                oCaption \u003d \"30 minutes ago\";\r\n            }\r\n            long oHours \u003d oMinutesPassed / 60;\r\n            if (oHours \u003c\u003d 1) {\r\n                oCaption \u003d \"1 hour ago\";\r\n            } else if (oHours \u003c\u003d 11) {\r\n                oCaption \u003d oHours + \" hours ago\";\r\n            } else {\r\n                oCaption \u003d \"today\";\r\n            }\r\n        } else if (oDaysPassed \u003e 1 \u0026\u0026 oDaysPassed \u003c\u003d 2) {\r\n            oCaption \u003d \"yesterday\";\r\n        } else if (oDaysPassed \u003c\u003d 7) {\r\n            oCaption \u003d \"this week\";\r\n        } else if (oDaysPassed \u003e 7 \u0026\u0026 oDaysPassed \u003c\u003d 14) {\r\n            oCaption \u003d \"last week\";\r\n        } else if (oDaysPassed \u003e 14 \u0026\u0026 oDaysPassed \u003c\u003d 21) {\r\n            oCaption \u003d \"2 weeks ago\";\r\n        } else if (oDaysPassed \u003e 21 \u0026\u0026 oDaysPassed \u003c\u003d 28) {\r\n            oCaption \u003d \"3 weeks ago\";\r\n        } else if (oDaysPassed \u003e 28 \u0026\u0026 oDaysPassed \u003c\u003d 60) {\r\n            oCaption \u003d \"last month\";\r\n        } else if (oDaysPassed \u003e 60 \u0026\u0026 oDaysPassed \u003c\u003d 365) {\r\n            int oMonths \u003d ((int) oDaysPassed) / 30;\r\n            oCaption \u003d oMonths + \" months ago\";\r\n        } else {\r\n            oCaption \u003d \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter \u003d new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime \u003d\u003d null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter \u003d new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add \u0027s or \u0027 at the end of the text, for example \"James\u0027\" for \"James\" or \"Daniel\u0027s\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with \u0027s or \u0027\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText \u003d\u003d null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) \u003d\u003d \u0027s\u0027)\r\n            return pText + \"\u0027\";\r\n        else\r\n            return pText + \"\u0027s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s \u003d\u003d null)\r\n            return null;\r\n        //\t\tif (s.length() \u003c pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() \u003c pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s \u003d\u003d null)\r\n            return null;\r\n        if (s.length() \u003c pMaxLength)\r\n            return s;\r\n        String oString \u003d s;\r\n        String oReturn \u003d \"\";\r\n        do {\r\n            oReturn \u003d oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString \u003d oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() \u003e pMaxLength);\r\n        if (oString.trim().length() \u003d\u003d 0) {\r\n            oReturn \u003d oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn \u003d oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText \u003d\u003d null)\r\n            return null;\r\n        if (pText.length() \u003c pMaxLength)\r\n            return pText;\r\n        String oReturn \u003d \"\";\r\n        int c \u003d 0;\r\n        for (int i \u003d 0; i \u003c pText.length(); i++) {\r\n            if (pText.charAt(i) \u003d\u003d \u0027 \u0027)\r\n                c \u003d 0;\r\n            else if (c \u003e\u003d pMaxLength) {\r\n                oReturn \u003d oReturn + STRING_HTML_CR;\r\n                c \u003d 0;\r\n            } else\r\n                c++;\r\n            oReturn \u003d oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText \u003d\u003d null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"\u003cbr /\u003e\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime \u003d\u003d null)\r\n            return 0;\r\n        Calendar c \u003d Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s \u003d\u003d null || s.trim().length() \u003d\u003d 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords \u003d s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf \u003d new StringBuffer();\r\n        for (int i \u003d 0; i \u003c oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) \u003c oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s \u003d\u003d null || s.trim().length() \u003d\u003d 0)\r\n            return s;\r\n        String oLowerCase \u003d s.toLowerCase();\r\n        StringTokenizer oTokenizer \u003d new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf \u003d new StringBuffer();\r\n        String oToken \u003d null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken \u003d oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i \u003d 1; i \u003c 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord \u003d NUMBERS_WORD.get(pValue);\r\n        if (oWord \u003d\u003d null)\r\n            oWord \u003d Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit \u003d getLastDigit(pInteger);\r\n        if ((pInteger \u003e 20 || pInteger \u003c 10) \u0026\u0026 oDigit \u003c 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s \u003d Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
    "package": "net.sourceforge.ext4j.taglib.tag",
    "classname": "Functions",
    "id": "/EvoSuiteBenchmark/original/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_12Test.java",
    "test_prompt": "// Functions_12Test.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#dateFormat(Date, String)} method.\n*/\nclass Functions_12Test {",
    "method_signature": "dateFormat(Date, String)",
    "suffix": "12"
  },
  {
    "numberTests": "ten",
    "original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger \u003d LogFactory.getLog(Functions.class);\r\n    private static final Map\u003cInteger, String\u003e NUMBERS_WORD \u003d new HashMap\u003cInteger, String\u003e();\r\n\r\n    private static final String UNDERSCORE \u003d \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE \u003d \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE \u003d \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE \u003d { \"-\", \":\", \",\", \"\u0027\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX \u003d \"...\";\r\n\r\n    private static final String STRING_SPACE \u003d \" \";\r\n\r\n    private static final String STRING_DOT \u003d \".\";\r\n\r\n    private static final String STRING_COMMA \u003d \",\";\r\n\r\n    private static final String STRING_EMPTY \u003d \"\";\r\n\r\n    private static final String STRING_HTML_CR \u003d \"\u003cbr /\u003e\";\r\n\r\n    //private static final String STRING_CR \u003d System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX \u003d \"\\n\";\r\n\r\n    private final static String EOL_WIN32 \u003d \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY \u003d \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX \u003d \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX \u003d \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c \u003d Calendar.getInstance();\r\n        int oYear \u003d c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection \u003d\u003d null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable\u003cObject\u003e oIterable \u003d (Iterable\u003cObject\u003e) pCollection;\r\n            int oSize \u003d 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings \u003d\u003d null || pStrings.length \u003d\u003d 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf \u003d new StringBuffer();\r\n        for (int i \u003d 0; i \u003c pStrings.length; i++) {\r\n            if (oBuf.length() \u003e 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue \u003d\u003d null)\r\n            return pValue;\r\n        String oResult \u003d pValue;\r\n        oResult \u003d oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i \u003d 0; i \u003c TO_REPLACE.length; i++) {\r\n            oResult \u003d oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult \u003d oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s \u003d\u003d null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\\u003c[^\u003e]*\\\\\u003e\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s \u003d\u003d null)\r\n            return null;\r\n        String oResult \u003d stripHTML(s);\r\n        if (oResult.length() \u003c pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf \u003d new StringBuilder();\r\n        String[] oWords \u003d oResult.split(STRING_SPACE);\r\n        int i \u003d 0;\r\n        while (i \u003c oWords.length \u0026\u0026 oBuf.length() \u003c pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult \u003d oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult \u003d oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult \u003d stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s \u003d\u003d null)\r\n            return null;\r\n        String oResult \u003d s.replaceAll(\"\u003cp\u003e\", STRING_SPACE);\r\n        oResult \u003d oResult.replaceAll(\"\u003c/p\u003e\", STRING_EMPTY);\r\n        oResult \u003d oResult.replaceAll(\"\u003cbr /\u003e\", STRING_SPACE);\r\n        oResult \u003d oResult.replaceAll(\"\u003cbr\u003e\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom \u003d\u003d null)\r\n            return \"\";\r\n        String oCaption \u003d null;\r\n        long oDiff \u003d Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed \u003d oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed \u003c\u003d 1) {\r\n            long oMinutesPassed \u003d oDiff / (1000 * 60);\r\n            if (oMinutesPassed \u003c\u003d 1) {\r\n                oCaption \u003d \"1 minute ago\";\r\n            } else if (oMinutesPassed \u003c\u003d 5) {\r\n                oCaption \u003d \"5 minutes ago\";\r\n            } else if (oMinutesPassed \u003c\u003d 30) {\r\n                oCaption \u003d \"30 minutes ago\";\r\n            }\r\n            long oHours \u003d oMinutesPassed / 60;\r\n            if (oHours \u003c\u003d 1) {\r\n                oCaption \u003d \"1 hour ago\";\r\n            } else if (oHours \u003c\u003d 11) {\r\n                oCaption \u003d oHours + \" hours ago\";\r\n            } else {\r\n                oCaption \u003d \"today\";\r\n            }\r\n        } else if (oDaysPassed \u003e 1 \u0026\u0026 oDaysPassed \u003c\u003d 2) {\r\n            oCaption \u003d \"yesterday\";\r\n        } else if (oDaysPassed \u003c\u003d 7) {\r\n            oCaption \u003d \"this week\";\r\n        } else if (oDaysPassed \u003e 7 \u0026\u0026 oDaysPassed \u003c\u003d 14) {\r\n            oCaption \u003d \"last week\";\r\n        } else if (oDaysPassed \u003e 14 \u0026\u0026 oDaysPassed \u003c\u003d 21) {\r\n            oCaption \u003d \"2 weeks ago\";\r\n        } else if (oDaysPassed \u003e 21 \u0026\u0026 oDaysPassed \u003c\u003d 28) {\r\n            oCaption \u003d \"3 weeks ago\";\r\n        } else if (oDaysPassed \u003e 28 \u0026\u0026 oDaysPassed \u003c\u003d 60) {\r\n            oCaption \u003d \"last month\";\r\n        } else if (oDaysPassed \u003e 60 \u0026\u0026 oDaysPassed \u003c\u003d 365) {\r\n            int oMonths \u003d ((int) oDaysPassed) / 30;\r\n            oCaption \u003d oMonths + \" months ago\";\r\n        } else {\r\n            oCaption \u003d \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter \u003d new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime \u003d\u003d null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter \u003d new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add \u0027s or \u0027 at the end of the text, for example \"James\u0027\" for \"James\" or \"Daniel\u0027s\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with \u0027s or \u0027\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText \u003d\u003d null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) \u003d\u003d \u0027s\u0027)\r\n            return pText + \"\u0027\";\r\n        else\r\n            return pText + \"\u0027s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s \u003d\u003d null)\r\n            return null;\r\n        //\t\tif (s.length() \u003c pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() \u003c pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s \u003d\u003d null)\r\n            return null;\r\n        if (s.length() \u003c pMaxLength)\r\n            return s;\r\n        String oString \u003d s;\r\n        String oReturn \u003d \"\";\r\n        do {\r\n            oReturn \u003d oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString \u003d oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() \u003e pMaxLength);\r\n        if (oString.trim().length() \u003d\u003d 0) {\r\n            oReturn \u003d oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn \u003d oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText \u003d\u003d null)\r\n            return null;\r\n        if (pText.length() \u003c pMaxLength)\r\n            return pText;\r\n        String oReturn \u003d \"\";\r\n        int c \u003d 0;\r\n        for (int i \u003d 0; i \u003c pText.length(); i++) {\r\n            if (pText.charAt(i) \u003d\u003d \u0027 \u0027)\r\n                c \u003d 0;\r\n            else if (c \u003e\u003d pMaxLength) {\r\n                oReturn \u003d oReturn + STRING_HTML_CR;\r\n                c \u003d 0;\r\n            } else\r\n                c++;\r\n            oReturn \u003d oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText \u003d\u003d null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"\u003cbr /\u003e\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime \u003d\u003d null)\r\n            return 0;\r\n        Calendar c \u003d Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s \u003d\u003d null || s.trim().length() \u003d\u003d 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords \u003d s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf \u003d new StringBuffer();\r\n        for (int i \u003d 0; i \u003c oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) \u003c oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s \u003d\u003d null || s.trim().length() \u003d\u003d 0)\r\n            return s;\r\n        String oLowerCase \u003d s.toLowerCase();\r\n        StringTokenizer oTokenizer \u003d new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf \u003d new StringBuffer();\r\n        String oToken \u003d null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken \u003d oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i \u003d 1; i \u003c 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord \u003d NUMBERS_WORD.get(pValue);\r\n        if (oWord \u003d\u003d null)\r\n            oWord \u003d Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit \u003d getLastDigit(pInteger);\r\n        if ((pInteger \u003e 20 || pInteger \u003c 10) \u0026\u0026 oDigit \u003c 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s \u003d Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
    "package": "net.sourceforge.ext4j.taglib.tag",
    "classname": "Functions",
    "id": "/EvoSuiteBenchmark/original/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_13Test.java",
    "test_prompt": "// Functions_13Test.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#addS(String)} method.\n*/\nclass Functions_13Test {",
    "method_signature": "addS(String)",
    "suffix": "13"
  },
  {
    "numberTests": "ten",
    "original_code": "// Functions.java\n/**\r\n * @author luc\r\n */\r\npackage net.sourceforge.ext4j.taglib.tag;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\nimport javax.servlet.jsp.JspTagException;\r\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\r\n\r\n/**\r\n * @author luc\r\n */\r\npublic class Functions {\r\n\r\n    //private static Log mLogger \u003d LogFactory.getLog(Functions.class);\r\n    private static final Map\u003cInteger, String\u003e NUMBERS_WORD \u003d new HashMap\u003cInteger, String\u003e();\r\n\r\n    private static final String UNDERSCORE \u003d \"_\";\r\n\r\n    private static final String REGEX_UNDERSCORE_ONE_OR_MORE \u003d \"_+\";\r\n\r\n    private static final String REGEX_WHITESPACE_ONE_OR_MORE \u003d \"\\\\s+\";\r\n\r\n    private static final String[] TO_REPLACE \u003d { \"-\", \":\", \",\", \"\u0027\", \"!\", \"\\\"\", \"\\\\*\", \"\\\\(\", \"\\\\)\", \"~\", \"`\" };\r\n\r\n    private static final String BLURB_SUFFIX \u003d \"...\";\r\n\r\n    private static final String STRING_SPACE \u003d \" \";\r\n\r\n    private static final String STRING_DOT \u003d \".\";\r\n\r\n    private static final String STRING_COMMA \u003d \",\";\r\n\r\n    private static final String STRING_EMPTY \u003d \"\";\r\n\r\n    private static final String STRING_HTML_CR \u003d \"\u003cbr /\u003e\";\r\n\r\n    //private static final String STRING_CR \u003d System.getProperty(\"line.separator\");\r\n    private final static String EOL_LINUX \u003d \"\\n\";\r\n\r\n    private final static String EOL_WIN32 \u003d \"\\r\\n\";\r\n\r\n    private final static String EOL_MAC_LEGACY \u003d \"\\n\\r\";\r\n\r\n    public static final String LINK_PREFIX \u003d \"webtools.link.\";\r\n\r\n    //private static final String FILENAME_VAR_REGEX \u003d \"\\\\$\\\\{filename\\\\}\";\r\n    static {\r\n        NUMBERS_WORD.put(0, \"zero\");\r\n        NUMBERS_WORD.put(1, \"one\");\r\n        NUMBERS_WORD.put(2, \"two\");\r\n        NUMBERS_WORD.put(3, \"three\");\r\n        NUMBERS_WORD.put(4, \"four\");\r\n        NUMBERS_WORD.put(5, \"five\");\r\n        NUMBERS_WORD.put(6, \"six\");\r\n        NUMBERS_WORD.put(7, \"seven\");\r\n        NUMBERS_WORD.put(8, \"eight\");\r\n        NUMBERS_WORD.put(9, \"nine\");\r\n        NUMBERS_WORD.put(10, \"ten\");\r\n        NUMBERS_WORD.put(11, \"eleven\");\r\n        NUMBERS_WORD.put(12, \"twelve\");\r\n        NUMBERS_WORD.put(13, \"thirteen\");\r\n        NUMBERS_WORD.put(14, \"fourteen\");\r\n        NUMBERS_WORD.put(15, \"fifteen\");\r\n        NUMBERS_WORD.put(16, \"sixteen\");\r\n        NUMBERS_WORD.put(17, \"seventeen\");\r\n        NUMBERS_WORD.put(18, \"eighteen\");\r\n        NUMBERS_WORD.put(19, \"nineteen\");\r\n        fillTens(20, \"twenty\");\r\n        fillTens(30, \"thirty\");\r\n        fillTens(40, \"fourty\");\r\n        fillTens(50, \"fifty\");\r\n        fillTens(60, \"sixty\");\r\n        fillTens(70, \"seventy\");\r\n        fillTens(80, \"eighty\");\r\n        fillTens(90, \"ninety\");\r\n    }\r\n\r\n    public static int year(int pOffset) {\r\n        Calendar c \u003d Calendar.getInstance();\r\n        int oYear \u003d c.get(Calendar.YEAR);\r\n        return oYear + pOffset;\r\n    }\r\n\r\n    public static char toUpper(char c) {\r\n        return Character.toUpperCase(c);\r\n    }\r\n\r\n    public static char forDigit(int pDigit, int pRadix) {\r\n        return Character.forDigit(pDigit, pRadix);\r\n    }\r\n\r\n    public static int length(Object pCollection) throws JspTagException {\r\n        if (pCollection \u003d\u003d null)\r\n            return 0;\r\n        if (Iterable.class.isAssignableFrom(pCollection.getClass())) {\r\n            Iterable\u003cObject\u003e oIterable \u003d (Iterable\u003cObject\u003e) pCollection;\r\n            int oSize \u003d 0;\r\n            for (Object oKey : oIterable) {\r\n                oSize++;\r\n            }\r\n            return oSize;\r\n        } else {\r\n            return org.apache.taglibs.standard.functions.Functions.length(pCollection);\r\n        }\r\n    }\r\n\r\n    public static String join(String[] pStrings, String pSep) {\r\n        if (pStrings \u003d\u003d null || pStrings.length \u003d\u003d 0)\r\n            return STRING_EMPTY;\r\n        StringBuffer oBuf \u003d new StringBuffer();\r\n        for (int i \u003d 0; i \u003c pStrings.length; i++) {\r\n            if (oBuf.length() \u003e 0)\r\n                oBuf.append(pSep);\r\n            oBuf.append(pStrings[i]);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String seo(String pValue) {\r\n        if (pValue \u003d\u003d null)\r\n            return pValue;\r\n        String oResult \u003d pValue;\r\n        oResult \u003d oResult.replaceAll(REGEX_WHITESPACE_ONE_OR_MORE, UNDERSCORE);\r\n        for (int i \u003d 0; i \u003c TO_REPLACE.length; i++) {\r\n            oResult \u003d oResult.replaceAll(TO_REPLACE[i], UNDERSCORE);\r\n        }\r\n        // trim \"_\"s\r\n        oResult \u003d oResult.replaceAll(REGEX_UNDERSCORE_ONE_OR_MORE, UNDERSCORE);\r\n        return oResult;\r\n    }\r\n\r\n    public static long round(double pValue) {\r\n        return Math.round(pValue);\r\n    }\r\n\r\n    public static String stripHTML(String s) {\r\n        if (s \u003d\u003d null)\r\n            return null;\r\n        return s.replaceAll(\"\\\\\u003c[^\u003e]*\\\\\u003e\", STRING_EMPTY);\r\n    }\r\n\r\n    public static String blurb(String s, int pMaxLength) {\r\n        if (s \u003d\u003d null)\r\n            return null;\r\n        String oResult \u003d stripHTML(s);\r\n        if (oResult.length() \u003c pMaxLength)\r\n            return oResult;\r\n        StringBuilder oBuf \u003d new StringBuilder();\r\n        String[] oWords \u003d oResult.split(STRING_SPACE);\r\n        int i \u003d 0;\r\n        while (i \u003c oWords.length \u0026\u0026 oBuf.length() \u003c pMaxLength) {\r\n            oBuf.append(oWords[i]);\r\n            oBuf.append(STRING_SPACE);\r\n            i++;\r\n        }\r\n        oResult \u003d oBuf.toString().trim();\r\n        while (oResult.endsWith(STRING_DOT) || oResult.endsWith(STRING_COMMA)) {\r\n            oResult \u003d oResult.substring(0, oResult.length() - 1);\r\n        }\r\n        //oResult \u003d stripHTML(oResult); // moved above\r\n        return oResult + BLURB_SUFFIX;\r\n    }\r\n\r\n    public static String blurbHTML(String s, int pMaxLength) {\r\n        if (s \u003d\u003d null)\r\n            return null;\r\n        String oResult \u003d s.replaceAll(\"\u003cp\u003e\", STRING_SPACE);\r\n        oResult \u003d oResult.replaceAll(\"\u003c/p\u003e\", STRING_EMPTY);\r\n        oResult \u003d oResult.replaceAll(\"\u003cbr /\u003e\", STRING_SPACE);\r\n        oResult \u003d oResult.replaceAll(\"\u003cbr\u003e\", STRING_SPACE);\r\n        return blurb(oResult, pMaxLength);\r\n    }\r\n\r\n    public static String since(Date pFrom) {\r\n        if (pFrom \u003d\u003d null)\r\n            return \"\";\r\n        String oCaption \u003d null;\r\n        long oDiff \u003d Calendar.getInstance().getTime().getTime() - pFrom.getTime();\r\n        long oDaysPassed \u003d oDiff / (1000 * 60 * 60 * 24);\r\n        if (oDaysPassed \u003c\u003d 1) {\r\n            long oMinutesPassed \u003d oDiff / (1000 * 60);\r\n            if (oMinutesPassed \u003c\u003d 1) {\r\n                oCaption \u003d \"1 minute ago\";\r\n            } else if (oMinutesPassed \u003c\u003d 5) {\r\n                oCaption \u003d \"5 minutes ago\";\r\n            } else if (oMinutesPassed \u003c\u003d 30) {\r\n                oCaption \u003d \"30 minutes ago\";\r\n            }\r\n            long oHours \u003d oMinutesPassed / 60;\r\n            if (oHours \u003c\u003d 1) {\r\n                oCaption \u003d \"1 hour ago\";\r\n            } else if (oHours \u003c\u003d 11) {\r\n                oCaption \u003d oHours + \" hours ago\";\r\n            } else {\r\n                oCaption \u003d \"today\";\r\n            }\r\n        } else if (oDaysPassed \u003e 1 \u0026\u0026 oDaysPassed \u003c\u003d 2) {\r\n            oCaption \u003d \"yesterday\";\r\n        } else if (oDaysPassed \u003c\u003d 7) {\r\n            oCaption \u003d \"this week\";\r\n        } else if (oDaysPassed \u003e 7 \u0026\u0026 oDaysPassed \u003c\u003d 14) {\r\n            oCaption \u003d \"last week\";\r\n        } else if (oDaysPassed \u003e 14 \u0026\u0026 oDaysPassed \u003c\u003d 21) {\r\n            oCaption \u003d \"2 weeks ago\";\r\n        } else if (oDaysPassed \u003e 21 \u0026\u0026 oDaysPassed \u003c\u003d 28) {\r\n            oCaption \u003d \"3 weeks ago\";\r\n        } else if (oDaysPassed \u003e 28 \u0026\u0026 oDaysPassed \u003c\u003d 60) {\r\n            oCaption \u003d \"last month\";\r\n        } else if (oDaysPassed \u003e 60 \u0026\u0026 oDaysPassed \u003c\u003d 365) {\r\n            int oMonths \u003d ((int) oDaysPassed) / 30;\r\n            oCaption \u003d oMonths + \" months ago\";\r\n        } else {\r\n            oCaption \u003d \"over a year ago\";\r\n        }\r\n        return oCaption;\r\n    }\r\n\r\n    public static String decimalFormat(double pDouble, String pPattern) {\r\n        DecimalFormat oFormatter \u003d new DecimalFormat(pPattern);\r\n        return oFormatter.format(pDouble);\r\n    }\r\n\r\n    /**\r\n     * Format a date with a pattern (using java.text.SimpleDateFormat)\r\n     * @param pDateTime the date\r\n     * @param pPattern the pattern\r\n     * @return the date to display\r\n     */\r\n    public static String dateFormat(Date pDateTime, String pPattern) {\r\n        if (pDateTime \u003d\u003d null)\r\n            return \"\";\r\n        SimpleDateFormat oFormatter \u003d new SimpleDateFormat(pPattern);\r\n        return oFormatter.format(pDateTime);\r\n    }\r\n\r\n    /**\r\n     * Add \u0027s or \u0027 at the end of the text, for example \"James\u0027\" for \"James\" or \"Daniel\u0027s\" for \"Daniel\"\r\n     * @param pText the text\r\n     * @return the text with \u0027s or \u0027\r\n     */\r\n    public static String addS(String pText) {\r\n        if (pText \u003d\u003d null || pText.trim().equals(\"\"))\r\n            return \"\";\r\n        if (pText.charAt(pText.length() - 1) \u003d\u003d \u0027s\u0027)\r\n            return pText + \"\u0027\";\r\n        else\r\n            return pText + \"\u0027s\";\r\n    }\r\n\r\n    /**\r\n     * Return the pMaxLength first characters of the string s with \"...\"\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String blurbChar(String s, int pMaxLength) {\r\n        if (s \u003d\u003d null)\r\n            return null;\r\n        //\t\tif (s.length() \u003c pMaxLength) return s.replaceAll(STRING_CR, \" \");\r\n        //\t\treturn s.substring(0, pMaxLength).replaceAll(STRING_CR, \" \") + BLURB_SUFFIX;\r\n        if (s.length() \u003c pMaxLength)\r\n            return s.replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \");\r\n        return s.substring(0, pMaxLength).replaceAll(EOL_WIN32, \" \").replaceAll(EOL_MAC_LEGACY, \" \").replaceAll(EOL_LINUX, \" \") + BLURB_SUFFIX;\r\n    }\r\n\r\n    /**\r\n     *  Break up a too big word on several lines\r\n     * @param s\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCR(String s, int pMaxLength) {\r\n        if (s \u003d\u003d null)\r\n            return null;\r\n        if (s.length() \u003c pMaxLength)\r\n            return s;\r\n        String oString \u003d s;\r\n        String oReturn \u003d \"\";\r\n        do {\r\n            oReturn \u003d oReturn + oString.substring(0, pMaxLength) + STRING_HTML_CR;\r\n            oString \u003d oString.substring(pMaxLength, oString.length());\r\n        } while (oString.length() \u003e pMaxLength);\r\n        if (oString.trim().length() \u003d\u003d 0) {\r\n            oReturn \u003d oReturn.substring(oReturn.length() - STRING_HTML_CR.length(), oReturn.length());\r\n        } else {\r\n            oReturn \u003d oReturn + oString;\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String cutWordCRText(String pText, int pMaxLength) {\r\n        if (pText \u003d\u003d null)\r\n            return null;\r\n        if (pText.length() \u003c pMaxLength)\r\n            return pText;\r\n        String oReturn \u003d \"\";\r\n        int c \u003d 0;\r\n        for (int i \u003d 0; i \u003c pText.length(); i++) {\r\n            if (pText.charAt(i) \u003d\u003d \u0027 \u0027)\r\n                c \u003d 0;\r\n            else if (c \u003e\u003d pMaxLength) {\r\n                oReturn \u003d oReturn + STRING_HTML_CR;\r\n                c \u003d 0;\r\n            } else\r\n                c++;\r\n            oReturn \u003d oReturn + pText.charAt(i);\r\n        }\r\n        return oReturn;\r\n    }\r\n\r\n    /**\r\n     * Break up the too big words in the given text\r\n     * @param pText\r\n     * @param pMaxLength\r\n     * @return\r\n     */\r\n    public static String replaceCRWithBR(String pText) {\r\n        if (pText \u003d\u003d null)\r\n            return null;\r\n        return pText.replaceAll(\"\\r\\n|\\n\", \"\u003cbr /\u003e\");\r\n    }\r\n\r\n    /**\r\n     * Convert a date in milliseconds\r\n     * @param pDateTime the date\r\n     * @return the milliseconds\r\n     */\r\n    public static long dateToMilliseconds(Date pDateTime) {\r\n        if (pDateTime \u003d\u003d null)\r\n            return 0;\r\n        Calendar c \u003d Calendar.getInstance();\r\n        c.setTime(pDateTime);\r\n        return c.getTimeInMillis();\r\n    }\r\n\r\n    /**\r\n     * Order the words of a String\r\n     * @param s\r\n     * @param separator the words separator\r\n     * @return\r\n     */\r\n    public static String orderWords(String s, String pSeparator) {\r\n        if (s \u003d\u003d null || s.trim().length() \u003d\u003d 0 || s.equals(pSeparator))\r\n            return null;\r\n        String[] oWords \u003d s.split(pSeparator);\r\n        Arrays.sort(oWords);\r\n        StringBuffer oBuf \u003d new StringBuffer();\r\n        for (int i \u003d 0; i \u003c oWords.length; i++) {\r\n            oBuf.append(oWords[i]);\r\n            if ((i + 1) \u003c oWords.length)\r\n                oBuf.append(pSeparator);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    public static String capFirstLetters(String s) {\r\n        if (s \u003d\u003d null || s.trim().length() \u003d\u003d 0)\r\n            return s;\r\n        String oLowerCase \u003d s.toLowerCase();\r\n        StringTokenizer oTokenizer \u003d new StringTokenizer(oLowerCase, STRING_SPACE);\r\n        StringBuffer oBuf \u003d new StringBuffer();\r\n        String oToken \u003d null;\r\n        while (oTokenizer.hasMoreTokens()) {\r\n            oToken \u003d oTokenizer.nextToken();\r\n            oBuf.append(oToken.substring(0, 1).toUpperCase() + oToken.substring(1));\r\n            if (oTokenizer.hasMoreTokens())\r\n                oBuf.append(STRING_SPACE);\r\n        }\r\n        return oBuf.toString();\r\n    }\r\n\r\n    private static void fillTens(int pTen, String pTenWord) {\r\n        NUMBERS_WORD.put(pTen, pTenWord);\r\n        for (int i \u003d 1; i \u003c 10; i++) {\r\n            NUMBERS_WORD.put(pTen + i, pTenWord + \"-\" + NUMBERS_WORD.get(i));\r\n        }\r\n    }\r\n\r\n    public static String numberInWord(int pValue) throws Exception {\r\n        String oWord \u003d NUMBERS_WORD.get(pValue);\r\n        if (oWord \u003d\u003d null)\r\n            oWord \u003d Integer.toString(pValue);\r\n        return oWord;\r\n    }\r\n\r\n    public static String ordinal(int pInteger) {\r\n        int oDigit \u003d getLastDigit(pInteger);\r\n        if ((pInteger \u003e 20 || pInteger \u003c 10) \u0026\u0026 oDigit \u003c 4) {\r\n            switch(oDigit) {\r\n                case 1:\r\n                    return pInteger + \"st\";\r\n                case 2:\r\n                    return pInteger + \"nd\";\r\n                case 3:\r\n                    return pInteger + \"rd\";\r\n            }\r\n        }\r\n        return pInteger + \"th\";\r\n    }\r\n\r\n    private static int getLastDigit(int pInteger) {\r\n        String s \u003d Integer.toString(pInteger);\r\n        return Integer.parseInt(s.substring(s.length() - 1));\r\n    }\r\n\r\n    public static IRequest removeParam(String pName, IRequest pRequest) throws Exception {\r\n        return pRequest.removeParam(pName);\r\n    }\r\n\r\n    public static IRequest addParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.addParam(pName, pValue);\r\n    }\r\n\r\n    public static IRequest setParam(String pName, String pValue, IRequest pRequest) throws Exception {\r\n        return pRequest.setParam(pName, pValue);\r\n    }\r\n}\r\n",
    "package": "net.sourceforge.ext4j.taglib.tag",
    "classname": "Functions",
    "id": "/EvoSuiteBenchmark/original/71_ext4j/src/main/java/net/sourceforge/ext4j/taglib/tag/Functions_18Test.java",
    "test_prompt": "// Functions_18Test.java\npackage net.sourceforge.ext4j.taglib.tag;\n\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.StringTokenizer;\nimport javax.servlet.jsp.JspTagException;\nimport net.sourceforge.ext4j.taglib.bo.IRequest;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Functions}.\n* It contains ten unit test cases for the {@link Functions#dateToMilliseconds(Date)} method.\n*/\nclass Functions_18Test {",
    "method_signature": "dateToMilliseconds(Date)",
    "suffix": "18"
  },
  {
    "numberTests": "ten",
    "original_code": "// ObjectFactory.java\n//\n// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833\n// See \u003ca href\u003d\"http://java.sun.com/xml/jaxb\"\u003ehttp://java.sun.com/xml/jaxb\u003c/a\u003e\n// Any modifications to this file will be lost upon recompilation of the source schema.\n// Generated on: 2013.06.11 at 02:28:24 PM BST\n//\npackage com.tripfilms.os.exttaglib.pagination.datatype;\n\nimport javax.xml.bind.annotation.XmlRegistry;\n\n/**\n * This object contains factory methods for each\n * Java content interface and Java element interface\n * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.\n * \u003cp\u003eAn ObjectFactory allows you to programatically\n * construct new instances of the Java representation\n * for XML content. The Java representation of XML\n * content can consist of schema derived interfaces\n * and classes representing the binding of schema\n * type definitions, element declarations and model\n * groups.  Factory methods for each of these are\n * provided in this class.\n */\n@XmlRegistry\npublic class ObjectFactory {\n\n    /**\n     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype\n     */\n    public ObjectFactory() {\n    }\n\n    /**\n     * Create an instance of {@link Page }\n     */\n    public Page createPage() {\n        return new Page();\n    }\n\n    /**\n     * Create an instance of {@link StaticPage }\n     */\n    public StaticPage createStaticPage() {\n        return new StaticPage();\n    }\n\n    /**\n     * Create an instance of {@link Pagination }\n     */\n    public Pagination createPagination() {\n        return new Pagination();\n    }\n\n    /**\n     * Create an instance of {@link Pages }\n     */\n    public Pages createPages() {\n        return new Pages();\n    }\n}\n",
    "package": "com.tripfilms.os.exttaglib.pagination.datatype",
    "classname": "ObjectFactory",
    "id": "/EvoSuiteBenchmark/original/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_0Test.java",
    "test_prompt": "// ObjectFactory_0Test.java\n// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833\n// See \u003ca href\u003d\"http://java.sun.com/xml/jaxb\"\u003ehttp://java.sun.com/xml/jaxb\u003c/a\u003e\n// Any modifications to this file will be lost upon recompilation of the source schema.\n// Generated on: 2013.06.11 at 02:28:24 PM BST\n//\npackage com.tripfilms.os.exttaglib.pagination.datatype;\n\nimport javax.xml.bind.annotation.XmlRegistry;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ObjectFactory}.\n* It contains ten unit test cases for the {@link ObjectFactory#createPage()} method.\n*/\nclass ObjectFactory_0Test {",
    "method_signature": "createPage()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// ObjectFactory.java\n//\n// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833\n// See \u003ca href\u003d\"http://java.sun.com/xml/jaxb\"\u003ehttp://java.sun.com/xml/jaxb\u003c/a\u003e\n// Any modifications to this file will be lost upon recompilation of the source schema.\n// Generated on: 2013.06.11 at 02:28:24 PM BST\n//\npackage com.tripfilms.os.exttaglib.pagination.datatype;\n\nimport javax.xml.bind.annotation.XmlRegistry;\n\n/**\n * This object contains factory methods for each\n * Java content interface and Java element interface\n * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.\n * \u003cp\u003eAn ObjectFactory allows you to programatically\n * construct new instances of the Java representation\n * for XML content. The Java representation of XML\n * content can consist of schema derived interfaces\n * and classes representing the binding of schema\n * type definitions, element declarations and model\n * groups.  Factory methods for each of these are\n * provided in this class.\n */\n@XmlRegistry\npublic class ObjectFactory {\n\n    /**\n     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype\n     */\n    public ObjectFactory() {\n    }\n\n    /**\n     * Create an instance of {@link Page }\n     */\n    public Page createPage() {\n        return new Page();\n    }\n\n    /**\n     * Create an instance of {@link StaticPage }\n     */\n    public StaticPage createStaticPage() {\n        return new StaticPage();\n    }\n\n    /**\n     * Create an instance of {@link Pagination }\n     */\n    public Pagination createPagination() {\n        return new Pagination();\n    }\n\n    /**\n     * Create an instance of {@link Pages }\n     */\n    public Pages createPages() {\n        return new Pages();\n    }\n}\n",
    "package": "com.tripfilms.os.exttaglib.pagination.datatype",
    "classname": "ObjectFactory",
    "id": "/EvoSuiteBenchmark/original/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_1Test.java",
    "test_prompt": "// ObjectFactory_1Test.java\n// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833\n// See \u003ca href\u003d\"http://java.sun.com/xml/jaxb\"\u003ehttp://java.sun.com/xml/jaxb\u003c/a\u003e\n// Any modifications to this file will be lost upon recompilation of the source schema.\n// Generated on: 2013.06.11 at 02:28:24 PM BST\n//\npackage com.tripfilms.os.exttaglib.pagination.datatype;\n\nimport javax.xml.bind.annotation.XmlRegistry;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ObjectFactory}.\n* It contains ten unit test cases for the {@link ObjectFactory#createStaticPage()} method.\n*/\nclass ObjectFactory_1Test {",
    "method_signature": "createStaticPage()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// ObjectFactory.java\n//\n// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833\n// See \u003ca href\u003d\"http://java.sun.com/xml/jaxb\"\u003ehttp://java.sun.com/xml/jaxb\u003c/a\u003e\n// Any modifications to this file will be lost upon recompilation of the source schema.\n// Generated on: 2013.06.11 at 02:28:24 PM BST\n//\npackage com.tripfilms.os.exttaglib.pagination.datatype;\n\nimport javax.xml.bind.annotation.XmlRegistry;\n\n/**\n * This object contains factory methods for each\n * Java content interface and Java element interface\n * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.\n * \u003cp\u003eAn ObjectFactory allows you to programatically\n * construct new instances of the Java representation\n * for XML content. The Java representation of XML\n * content can consist of schema derived interfaces\n * and classes representing the binding of schema\n * type definitions, element declarations and model\n * groups.  Factory methods for each of these are\n * provided in this class.\n */\n@XmlRegistry\npublic class ObjectFactory {\n\n    /**\n     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype\n     */\n    public ObjectFactory() {\n    }\n\n    /**\n     * Create an instance of {@link Page }\n     */\n    public Page createPage() {\n        return new Page();\n    }\n\n    /**\n     * Create an instance of {@link StaticPage }\n     */\n    public StaticPage createStaticPage() {\n        return new StaticPage();\n    }\n\n    /**\n     * Create an instance of {@link Pagination }\n     */\n    public Pagination createPagination() {\n        return new Pagination();\n    }\n\n    /**\n     * Create an instance of {@link Pages }\n     */\n    public Pages createPages() {\n        return new Pages();\n    }\n}\n",
    "package": "com.tripfilms.os.exttaglib.pagination.datatype",
    "classname": "ObjectFactory",
    "id": "/EvoSuiteBenchmark/original/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_2Test.java",
    "test_prompt": "// ObjectFactory_2Test.java\n// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833\n// See \u003ca href\u003d\"http://java.sun.com/xml/jaxb\"\u003ehttp://java.sun.com/xml/jaxb\u003c/a\u003e\n// Any modifications to this file will be lost upon recompilation of the source schema.\n// Generated on: 2013.06.11 at 02:28:24 PM BST\n//\npackage com.tripfilms.os.exttaglib.pagination.datatype;\n\nimport javax.xml.bind.annotation.XmlRegistry;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ObjectFactory}.\n* It contains ten unit test cases for the {@link ObjectFactory#createPagination()} method.\n*/\nclass ObjectFactory_2Test {",
    "method_signature": "createPagination()",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// ObjectFactory.java\n//\n// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833\n// See \u003ca href\u003d\"http://java.sun.com/xml/jaxb\"\u003ehttp://java.sun.com/xml/jaxb\u003c/a\u003e\n// Any modifications to this file will be lost upon recompilation of the source schema.\n// Generated on: 2013.06.11 at 02:28:24 PM BST\n//\npackage com.tripfilms.os.exttaglib.pagination.datatype;\n\nimport javax.xml.bind.annotation.XmlRegistry;\n\n/**\n * This object contains factory methods for each\n * Java content interface and Java element interface\n * generated in the com.tripfilms.os.exttaglib.pagination.datatype package.\n * \u003cp\u003eAn ObjectFactory allows you to programatically\n * construct new instances of the Java representation\n * for XML content. The Java representation of XML\n * content can consist of schema derived interfaces\n * and classes representing the binding of schema\n * type definitions, element declarations and model\n * groups.  Factory methods for each of these are\n * provided in this class.\n */\n@XmlRegistry\npublic class ObjectFactory {\n\n    /**\n     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.tripfilms.os.exttaglib.pagination.datatype\n     */\n    public ObjectFactory() {\n    }\n\n    /**\n     * Create an instance of {@link Page }\n     */\n    public Page createPage() {\n        return new Page();\n    }\n\n    /**\n     * Create an instance of {@link StaticPage }\n     */\n    public StaticPage createStaticPage() {\n        return new StaticPage();\n    }\n\n    /**\n     * Create an instance of {@link Pagination }\n     */\n    public Pagination createPagination() {\n        return new Pagination();\n    }\n\n    /**\n     * Create an instance of {@link Pages }\n     */\n    public Pages createPages() {\n        return new Pages();\n    }\n}\n",
    "package": "com.tripfilms.os.exttaglib.pagination.datatype",
    "classname": "ObjectFactory",
    "id": "/EvoSuiteBenchmark/original/71_ext4j/src/main/java/com/tripfilms/os/exttaglib/pagination/datatype/ObjectFactory_3Test.java",
    "test_prompt": "// ObjectFactory_3Test.java\n// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.1-833\n// See \u003ca href\u003d\"http://java.sun.com/xml/jaxb\"\u003ehttp://java.sun.com/xml/jaxb\u003c/a\u003e\n// Any modifications to this file will be lost upon recompilation of the source schema.\n// Generated on: 2013.06.11 at 02:28:24 PM BST\n//\npackage com.tripfilms.os.exttaglib.pagination.datatype;\n\nimport javax.xml.bind.annotation.XmlRegistry;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ObjectFactory}.\n* It contains ten unit test cases for the {@link ObjectFactory#createPages()} method.\n*/\nclass ObjectFactory_3Test {",
    "method_signature": "createPages()",
    "suffix": "3"
  }
]