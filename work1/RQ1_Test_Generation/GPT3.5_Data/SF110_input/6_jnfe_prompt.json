[
  {
    "numberTests": "ten",
    "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss�o das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI \u003d \"file:#{ systemProperties[\u0027user.home\u0027] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE \u003d \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri \u003d keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType \u003d keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword \u003d keyStorePassword;\n    }\n\n    /**\n     * Localiza��o do aramz�m seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore \u003d trustStore;\n    }\n\n    /**\n     * Tipo do armaz�m do armaz�m seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType \u003d trustStoreType;\n    }\n\n    /**\n     * Senah do armaz�m seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword \u003d trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType \u003d\u003d null || keyStoreType.length() \u003d\u003d 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri \u003d\u003d null || keyStoreUri.length() \u003d\u003d 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword !\u003d null \u0026\u0026 keyStorePassword.length() \u003e 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore !\u003d null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType !\u003d null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword !\u003d null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer \u003d new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"\u003d\u0027\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"\u0027 \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"\u003d\u0027\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"\u0027 \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"\u003d\u0027\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"\u0027 \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"\u003d\u0027\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"\u0027 \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz�m seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz�m de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf \u003d KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger \u003d LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
    "package": "br.com.jnfe.base",
    "classname": "TransportKeyStoreBean",
    "id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
    "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains ten unit test cases for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
    "method_signature": "openTransportStore()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss�o das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI \u003d \"file:#{ systemProperties[\u0027user.home\u0027] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE \u003d \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri \u003d keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType \u003d keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword \u003d keyStorePassword;\n    }\n\n    /**\n     * Localiza��o do aramz�m seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore \u003d trustStore;\n    }\n\n    /**\n     * Tipo do armaz�m do armaz�m seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType \u003d trustStoreType;\n    }\n\n    /**\n     * Senah do armaz�m seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword \u003d trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType \u003d\u003d null || keyStoreType.length() \u003d\u003d 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri \u003d\u003d null || keyStoreUri.length() \u003d\u003d 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword !\u003d null \u0026\u0026 keyStorePassword.length() \u003e 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore !\u003d null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType !\u003d null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword !\u003d null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer \u003d new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"\u003d\u0027\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"\u0027 \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"\u003d\u0027\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"\u0027 \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"\u003d\u0027\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"\u0027 \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"\u003d\u0027\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"\u0027 \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz�m seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz�m de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf \u003d KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger \u003d LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
    "package": "br.com.jnfe.base",
    "classname": "TransportKeyStoreBean",
    "id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
    "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains ten unit test cases for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
    "method_signature": "openTransportKeyManagerFactory()",
    "suffix": "1"
  }
]