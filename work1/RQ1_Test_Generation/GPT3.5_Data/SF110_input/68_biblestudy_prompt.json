[
  {
    "numberTests": "ten",
    "original_code": "// HTMLOutputStream.java\n/*\n * BufferedOutputStream.java: Writes to a\n * buffer and handles ContentLength\u0027s and Types, as well as cleanup.\n * Copyright (C) 1998. All rights reserved.\n * St. Paul Software, St. Paul, MN, USA\n */\npackage bible.servlet;\n\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport java.io.*;\nimport java.net.*;\n\n/**\n * A container for output streams with its own buffers\n *\n * @author  Luke Samaha\n */\npublic class HTMLOutputStream {\n\n    //  Use-specific Constructors\n    public HTMLOutputStream(HttpServletResponse response) throws IOException {\n        this.response \u003d response;\n        baos \u003d new ByteArrayOutputStream(4096);\n        OutputStream out \u003d baos;\n        //  Initialization routines specific to content type\n        pw \u003d new PrintWriter(out, true);\n    }\n\n    //  Public client methods\n    public void print(String str) {\n        pw.print(str);\n    }\n\n    public void print(int n) {\n        pw.print(n);\n    }\n\n    public void println(String str) {\n        pw.println(str);\n    }\n\n    public void println(int n) {\n        pw.println(n);\n    }\n\n    public void flush() throws IOException {\n        response.setContentType(\"text/html\");\n        response.setContentLength(baos.size());\n        OutputStream os \u003d response.getOutputStream();\n        baos.writeTo(os);\n        os.flush();\n        reset();\n    }\n\n    public int getSize() {\n        return baos.size();\n    }\n\n    public PrintWriter getPW() {\n        return pw;\n    }\n\n    /**\n     * @author James Stauffer\n     * @return String the contents of the buffer.\n     */\n    public String reset() {\n        String contents \u003d baos.toString();\n        baos.reset();\n        return contents;\n    }\n\n    public String toString() {\n        return getClass().getName() + \": [size\u003d\" + getSize() + \", response\u003d\" + response + ((baos !\u003d null) ? \", baos\" : \"\") + ((pw !\u003d null) ? \", pw\" : \"\") + \"]\";\n    }\n\n    //  Private instance variables\n    private HttpServletResponse response \u003d null;\n\n    private boolean binary \u003d false;\n\n    private ByteArrayOutputStream baos \u003d null;\n\n    private PrintWriter pw \u003d null;\n}\n",
    "package": "bible.servlet",
    "classname": "HTMLOutputStream",
    "id": "/EvoSuiteBenchmark/original/68_biblestudy/src/main/java/bible/servlet/HTMLOutputStream.java",
    "test_prompt": "// HTMLOutputStreamTest.java\npackage bible.servlet;\n\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport java.io.*;\nimport java.net.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HTMLOutputStream}.\n* It contains ten unit test cases for the {@link HTMLOutputStream#reset()} method.\n*/\nclass HTMLOutputStreamTest {",
    "method_signature": "reset()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// Queue.java\npackage bible.util;\n\nimport java.util.*;\n\n/**\n * Queue is a storage class to link together \u003cb\u003eNode\u003c/b\u003e objects which are\n * stored in a first in first out storage system.\n *\n * @see Node\n * @version   1.0\n * @author    LaMoine Zielieke, James Stauffer\n */\npublic class Queue {\n\n    public final static int NO_MAXIMUM \u003d -1;\n\n    /**\n     * number of items in this list\n     */\n    private int numItems;\n\n    private int maxNumItems;\n\n    private int maxCapacity;\n\n    /**\n     * first Node in list\n     */\n    private Node first;\n\n    /**\n     * last Node in list\n     */\n    private Node last;\n\n    /**\n     * Constructor creating an empty Queue.  All variables are set to zero\n     * or null.\n     */\n    public Queue() {\n        this(NO_MAXIMUM);\n    }\n\n    /**\n     * Constructor creating an empty Queue.  All variables are set to zero\n     * or null.\n     */\n    public Queue(int capacity) {\n        first \u003d null;\n        last \u003d null;\n        numItems \u003d 0;\n        maxNumItems \u003d 0;\n        maxCapacity \u003d capacity;\n    }\n\n    /**\n     * See if the queue is empty.\n     * @return     \u003ccode\u003etrue\u003c/code\u003e if Queue is empty;\n     *             \u003ccode\u003efalse\u003c/code\u003e otherwise.\n     */\n    public boolean isEmpty() {\n        return (first \u003d\u003d null);\n    }\n\n    /**\n     * Insert an object into the end of the queue\n     *\n     * @param someObject  the Object to store\n     */\n    public void enqueue(Object someObject) {\n        if (someObject !\u003d null) {\n            Node newNode \u003d new Node(someObject);\n            synchronized (this) {\n                //System.out.println(\"+++\" + someObject);\n                if (isEmpty()) {\n                    first \u003d newNode;\n                    last \u003d newNode;\n                } else {\n                    //Add at end\n                    last.next \u003d newNode;\n                    last \u003d newNode;\n                }\n                numItems++;\n                if (numItems \u003e maxNumItems) {\n                    maxNumItems \u003d numItems;\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove an object from the front of the Queue\n     *\n     * @return       Object if Queue is not empty\n     *               otherwise print message to dos window\n     * @see GameQuestion\n     */\n    public synchronized Object dequeue() {\n        Object obj \u003d null;\n        if (isEmpty()) {\n            System.out.println(\"Cannot remove when queue is empty\");\n        } else if (first \u003d\u003d last) {\n            // first see if we only have one item in the queue\n            obj \u003d first.value;\n            first \u003d null;\n            last \u003d null;\n        } else {\n            obj \u003d first.value;\n            first \u003d first.next;\n        }\n        numItems--;\n        return obj;\n    }\n\n    /**\n     *  Removes all nodes where Node.value.equals(object).\n     */\n    public synchronized int remove(Object object) {\n        //System.out.println(\"---\" + object);\n        int originalNumItems \u003d numItems;\n        while ((first !\u003d null) \u0026\u0026 (first.value.equals(object))) {\n            // found it\n            first \u003d first.next;\n            numItems--;\n        }\n        if (first \u003d\u003d null) {\n            //All elements removed\n            last \u003d null;\n        } else {\n            //Now it isn\u0027t in the first node\n            for (Node current \u003d first; current.next !\u003d null; ) {\n                if (current.next.value.equals(object)) {\n                    // found it in the next Node\n                    current.next \u003d current.next.next;\n                    numItems--;\n                    if (current.next \u003d\u003d null) {\n                        // we are removing the last element\n                        last \u003d current;\n                        // the for loop will be exited\n                    }\n                } else {\n                    current \u003d current.next;\n                }\n            }\n            // of for\n        }\n        return originalNumItems - numItems;\n    }\n\n    /**\n     *  Moves element to back of que.\n     */\n    public synchronized void refreshElement(Object object) {\n        remove(object);\n        enqueue(object);\n    }\n\n    /**\n     * See how many items are in the queue.\n     *\n     * @return integer value of number of items in queue\n     */\n    public int getNumberItems() {\n        return numItems;\n    }\n\n    /**\n     * The peak number of items in the Queue.\n     *\n     * @return peak number of items in queue\n     */\n    public int getPeakNumberItems() {\n        return maxNumItems;\n    }\n\n    /**\n     * The Queue is stepped through one node at a time and the\n     * QuestionNumber is inserted into a Vector.This action copies\n     * unused question numbers from queue into temp vector.\n     *\n     * @return   Vector of unused question numbers. In this way when\n     *           a new vector of randomized numbers is created the nunbers\n     *           already in the queue will not be duplicated.  If number\n     *           396 is in the queue we do not want 396 to appear in the\n     *           new randomized vector.  This method is only called in\n     *           \u003cb\u003eDataBase\u003c/b\u003e\n     * @see      Database#load\n     * @see      GameQuestion\n     */\n    public Vector getObjects() {\n        Node i;\n        Vector tempVector \u003d new Vector(numItems, 10);\n        for (i \u003d first; i !\u003d null; i \u003d i.next) {\n            tempVector.addElement(i.value);\n        }\n        // end for\n        return tempVector;\n    }\n\n    // end getUnused\n    /**\n     *  Returns true if the first should be removed.\n     */\n    public boolean maxCapacityExceeded() {\n        return (numItems \u003e (maxCapacity - 1)) \u0026\u0026 (maxCapacity !\u003d NO_MAXIMUM);\n    }\n\n    public String toString() {\n        return getClass().getName() + \":[numItems\u003d\" + numItems + \", maxNumItems\u003d\" + maxNumItems + \", maxCapacity\u003d\" + maxCapacity + \", getObjects()\u003d\" + getObjects() + \"\\r\\n]\";\n    }\n\n    /**\n     * Node objects hold the Object to be stored and the next node in our linked list.\n     * In this way we can access the next node in our \u003cb\u003eQueue\u003c/b\u003e.\n     *\n     * @version   2.0\n     * @author    LaMoine Zielieke\n     */\n    class Node {\n\n        /**\n         * The next Node in the chain.\n         */\n        Node next;\n\n        /**\n         * The Object this node stores.\n         */\n        Object value;\n\n        /**\n         * @param  obj   the Object to be inserted into the node.\n         */\n        public Node(Object obj) {\n            value \u003d obj;\n        }\n    }\n}\n",
    "package": "bible.util",
    "classname": "Queue",
    "id": "/EvoSuiteBenchmark/original/68_biblestudy/src/main/java/bible/util/Queue_0Test.java",
    "test_prompt": "// Queue_0Test.java\npackage bible.util;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Queue}.\n* It contains ten unit test cases for the {@link Queue#dequeue()} method.\n*/\nclass Queue_0Test {",
    "method_signature": "dequeue()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Queue.java\npackage bible.util;\n\nimport java.util.*;\n\n/**\n * Queue is a storage class to link together \u003cb\u003eNode\u003c/b\u003e objects which are\n * stored in a first in first out storage system.\n *\n * @see Node\n * @version   1.0\n * @author    LaMoine Zielieke, James Stauffer\n */\npublic class Queue {\n\n    public final static int NO_MAXIMUM \u003d -1;\n\n    /**\n     * number of items in this list\n     */\n    private int numItems;\n\n    private int maxNumItems;\n\n    private int maxCapacity;\n\n    /**\n     * first Node in list\n     */\n    private Node first;\n\n    /**\n     * last Node in list\n     */\n    private Node last;\n\n    /**\n     * Constructor creating an empty Queue.  All variables are set to zero\n     * or null.\n     */\n    public Queue() {\n        this(NO_MAXIMUM);\n    }\n\n    /**\n     * Constructor creating an empty Queue.  All variables are set to zero\n     * or null.\n     */\n    public Queue(int capacity) {\n        first \u003d null;\n        last \u003d null;\n        numItems \u003d 0;\n        maxNumItems \u003d 0;\n        maxCapacity \u003d capacity;\n    }\n\n    /**\n     * See if the queue is empty.\n     * @return     \u003ccode\u003etrue\u003c/code\u003e if Queue is empty;\n     *             \u003ccode\u003efalse\u003c/code\u003e otherwise.\n     */\n    public boolean isEmpty() {\n        return (first \u003d\u003d null);\n    }\n\n    /**\n     * Insert an object into the end of the queue\n     *\n     * @param someObject  the Object to store\n     */\n    public void enqueue(Object someObject) {\n        if (someObject !\u003d null) {\n            Node newNode \u003d new Node(someObject);\n            synchronized (this) {\n                //System.out.println(\"+++\" + someObject);\n                if (isEmpty()) {\n                    first \u003d newNode;\n                    last \u003d newNode;\n                } else {\n                    //Add at end\n                    last.next \u003d newNode;\n                    last \u003d newNode;\n                }\n                numItems++;\n                if (numItems \u003e maxNumItems) {\n                    maxNumItems \u003d numItems;\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove an object from the front of the Queue\n     *\n     * @return       Object if Queue is not empty\n     *               otherwise print message to dos window\n     * @see GameQuestion\n     */\n    public synchronized Object dequeue() {\n        Object obj \u003d null;\n        if (isEmpty()) {\n            System.out.println(\"Cannot remove when queue is empty\");\n        } else if (first \u003d\u003d last) {\n            // first see if we only have one item in the queue\n            obj \u003d first.value;\n            first \u003d null;\n            last \u003d null;\n        } else {\n            obj \u003d first.value;\n            first \u003d first.next;\n        }\n        numItems--;\n        return obj;\n    }\n\n    /**\n     *  Removes all nodes where Node.value.equals(object).\n     */\n    public synchronized int remove(Object object) {\n        //System.out.println(\"---\" + object);\n        int originalNumItems \u003d numItems;\n        while ((first !\u003d null) \u0026\u0026 (first.value.equals(object))) {\n            // found it\n            first \u003d first.next;\n            numItems--;\n        }\n        if (first \u003d\u003d null) {\n            //All elements removed\n            last \u003d null;\n        } else {\n            //Now it isn\u0027t in the first node\n            for (Node current \u003d first; current.next !\u003d null; ) {\n                if (current.next.value.equals(object)) {\n                    // found it in the next Node\n                    current.next \u003d current.next.next;\n                    numItems--;\n                    if (current.next \u003d\u003d null) {\n                        // we are removing the last element\n                        last \u003d current;\n                        // the for loop will be exited\n                    }\n                } else {\n                    current \u003d current.next;\n                }\n            }\n            // of for\n        }\n        return originalNumItems - numItems;\n    }\n\n    /**\n     *  Moves element to back of que.\n     */\n    public synchronized void refreshElement(Object object) {\n        remove(object);\n        enqueue(object);\n    }\n\n    /**\n     * See how many items are in the queue.\n     *\n     * @return integer value of number of items in queue\n     */\n    public int getNumberItems() {\n        return numItems;\n    }\n\n    /**\n     * The peak number of items in the Queue.\n     *\n     * @return peak number of items in queue\n     */\n    public int getPeakNumberItems() {\n        return maxNumItems;\n    }\n\n    /**\n     * The Queue is stepped through one node at a time and the\n     * QuestionNumber is inserted into a Vector.This action copies\n     * unused question numbers from queue into temp vector.\n     *\n     * @return   Vector of unused question numbers. In this way when\n     *           a new vector of randomized numbers is created the nunbers\n     *           already in the queue will not be duplicated.  If number\n     *           396 is in the queue we do not want 396 to appear in the\n     *           new randomized vector.  This method is only called in\n     *           \u003cb\u003eDataBase\u003c/b\u003e\n     * @see      Database#load\n     * @see      GameQuestion\n     */\n    public Vector getObjects() {\n        Node i;\n        Vector tempVector \u003d new Vector(numItems, 10);\n        for (i \u003d first; i !\u003d null; i \u003d i.next) {\n            tempVector.addElement(i.value);\n        }\n        // end for\n        return tempVector;\n    }\n\n    // end getUnused\n    /**\n     *  Returns true if the first should be removed.\n     */\n    public boolean maxCapacityExceeded() {\n        return (numItems \u003e (maxCapacity - 1)) \u0026\u0026 (maxCapacity !\u003d NO_MAXIMUM);\n    }\n\n    public String toString() {\n        return getClass().getName() + \":[numItems\u003d\" + numItems + \", maxNumItems\u003d\" + maxNumItems + \", maxCapacity\u003d\" + maxCapacity + \", getObjects()\u003d\" + getObjects() + \"\\r\\n]\";\n    }\n\n    /**\n     * Node objects hold the Object to be stored and the next node in our linked list.\n     * In this way we can access the next node in our \u003cb\u003eQueue\u003c/b\u003e.\n     *\n     * @version   2.0\n     * @author    LaMoine Zielieke\n     */\n    class Node {\n\n        /**\n         * The next Node in the chain.\n         */\n        Node next;\n\n        /**\n         * The Object this node stores.\n         */\n        Object value;\n\n        /**\n         * @param  obj   the Object to be inserted into the node.\n         */\n        public Node(Object obj) {\n            value \u003d obj;\n        }\n    }\n}\n",
    "package": "bible.util",
    "classname": "Queue",
    "id": "/EvoSuiteBenchmark/original/68_biblestudy/src/main/java/bible/util/Queue_2Test.java",
    "test_prompt": "// Queue_2Test.java\npackage bible.util;\n\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Queue}.\n* It contains ten unit test cases for the {@link Queue#maxCapacityExceeded()} method.\n*/\nclass Queue_2Test {",
    "method_signature": "maxCapacityExceeded()",
    "suffix": "2"
  }
]