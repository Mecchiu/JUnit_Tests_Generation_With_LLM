[
{
    "id": "chatcmpl-A5TbZI4F8HTENXYGfYUrzRNv9Qrd9",
    "object": "chat.completion",
    "created": 1725868805,
    "model": "gpt-3.5-turbo-0125",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\nclass FenetrePrincipale_0Test {\n\n    @Test\n    void testDateLimForm() {\n        // Given\n        FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());\n        JComboBox comboBoxJourDLM = new JComboBox(new String[]{\"1\", \"2\", \"3\"});\n        JComboBox comboBoxMoisDLM = new JComboBox(new String[]{\"1\", \"2\", \"3\"});\n        JComboBox comboBoxAnneeDLM = new JComboBox(new String[]{\"2021\", \"2022\", \"2023\"});\n        fenetrePrincipale.comboBoxJourDLM = comboBoxJourDLM;\n        fenetrePrincipale.comboBoxMoisDLM = comboBoxMoisDLM;\n        fenetrePrincipale.comboBoxAnneeDLM = comboBoxAnneeDLM;\n\n        // When\n        String dateLimForm = fenetrePrincipale.dateLimForm();\n\n        // Then\n        assertEquals(\"1232021\", dateLimForm);\n    }\n\n    @Test\n    void testDateLimFormWithEmptyComboBoxes() {\n        // Given\n        FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());\n        JComboBox comboBoxJourDLM = new JComboBox();\n        JComboBox comboBoxMoisDLM = new JComboBox();\n        JComboBox comboBoxAnneeDLM = new JComboBox();\n        fenetrePrincipale.comboBoxJourDLM = comboBoxJourDLM;\n        fenetrePrincipale.comboBoxMoisDLM = comboBoxMoisDLM;\n        fenetrePrincipale.comboBoxAnneeDLM = comboBoxAnneeDLM;\n\n        // When\n        String dateLimForm = fenetrePrincipale.dateLimForm();\n\n        // Then\n        assertEquals(\"\", dateLimForm);\n    }\n}\n```",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 8545,
        "completion_tokens": 370,
        "total_tokens": 8915
    },
    "system_fingerprint": null,
    "time_taken": 7.767395257949829,
    "prompt_id": "/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale_0Test.java",
    "original_code": "// FenetrePrincipale.java\npackage fr.unice.gfarce.interGraph;\n\n/**\n * classe qui dessine toute l interphace graphique\n */\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.awt.event.KeyEvent;\nimport java.util.Calendar;\nimport javax.swing.Box;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.main.Controler;\n\npublic class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {\n\n    /**\n     */\n    private static final long serialVersionUID = 1L;\n\n    static JTextField textFieldNomResponsable;\n\n    static JTextField textFieldPrenomResponsable;\n\n    static JComboBox comboBoxSexeResponsable;\n\n    static JTextField textFieldEmailResponsable;\n\n    static JTextField textFieldTelResponsable;\n\n    static JTable tableResp;\n\n    static JTextField outputNomResp;\n\n    static JTextField outputPrenomResp;\n\n    static JTextField outputSexeResp;\n\n    static JTextField outputEmailResp;\n\n    static JTextField outputTelResp;\n\n    static JTextField textFieldTitreFormation;\n\n    static JComponent comboBoxDateLimiteFormation;\n\n    static JTextField textFieldPrixDeLaFormation;\n\n    static JComboBox comboBoxResponsableDeLaFormation;\n\n    static JComboBox comboBoxJourDLM;\n\n    static JComboBox comboBoxMoisDLM;\n\n    static JComboBox comboBoxAnneeDLM;\n\n    static JTable tableFormation;\n\n    static JTextField outputTitreFormation;\n\n    static JTextField outputDateLimiteFormation;\n\n    static JTextField outputPrixFormation;\n\n    static JTextField outputRespFormation;\n\n    ModifTableStockage modifTableStockage;\n\n    static JTextField textFieldNomEtudiant;\n\n    static JTextField textFieldPrenomEtudiant;\n\n    static JComboBox comboBoxSexeEtudiant;\n\n    static JTextField textFieldEmailEtudiant;\n\n    static JComponent textFieldPhotoEtudiants;\n\n    static JComponent comboBoxDateNaissanceEtudiant;\n\n    static JTextField textFieldDiplomeEtudiant;\n\n    static JTextField textFieldNationnaliteEtudiant;\n\n    static JTextField textFieldPhotoEtudiant;\n\n    static JComboBox comboBoxJourDDNEtu;\n\n    static JComboBox comboBoxMoisDDNEtu;\n\n    static JComboBox comboBoxAnneeDDNEtu;\n\n    static JComboBox comboBoxFormation1;\n\n    static JComboBox comboBoxFormation2;\n\n    static JTextArea outputRespArea;\n\n    static JLabel titreArea;\n\n    String[] columnNamesResp = { \"Nom\", \"Prenom\", \"Sexe\", \"Email\", \"Telephone\" };\n\n    static JTable tableEtu;\n\n    ListSelectionModel listSelectionModel;\n\n    static JTextField outputNom;\n\n    static JTextField outputPrenom;\n\n    static JTextField outputSexe;\n\n    static JTextField outputEmail;\n\n    static JTextField outputDateDeNaissance;\n\n    static JLabel outputPhoto;\n\n    static JTextField outputDiplome;\n\n    static JTextField outputNationalite;\n\n    static JTextField outputFormation;\n\n    static JCheckBox checkBoxAccept;\n\n    static JCheckBox checkBoxBourse;\n\n    static boolean accept;\n\n    static boolean bourse;\n\n    static JTextField montant;\n\n    Object[][] dataResp;\n\n    Zmodel modelResp;\n\n    Zmodel modelForm;\n\n    Zmodel modelEtu;\n\n    Controler c;\n\n    ImageIcon photoEtu;\n\n    String[] columnNamesFormation = { \"Titre de la formation\", \"Date limite\", \"Prix\", \"Responsable\" };\n\n    Object[][] dataFormation;\n\n    String[] columnNamesEtu = { \"Nom\", \"Prenom\", \"Sexe\", \"Email\", \"Date de naissance\", \"Photo\", \"Diplome\", \"Nationalite\", \"Formation\", \"Acceptation\", \"Bourse\" };\n\n    static Object[][] dataEtu;\n\n    /**\n     * constructeur qui cree l interface graphique\n     * @param c\n     */\n    public FenetrePrincipale(Controler c) {\n        super();\n        this.c = c;\n        //matrice etudiant\n        dataEtu = createListeDeroulanteEtudiant();\n        //matrice formation\n        dataFormation = createListeDeroulanteFormation();\n        //matrice responsable\n        dataResp = createListeDeroulanteResponsable();\n        //On cree la barre d outil\n        buildBarreDOutil();\n        //On cree les onglet\n        buildOnglet();\n        //On initialise notre fen\u00c3\u00aatre\n        build();\n    }\n\n    /**\n     * creation de la matrice pour la liste deroulante\n     * @return matrice pour la liste deroulante responsable\n     */\n    private Object[][] createListeDeroulanteResponsable() {\n        RespFormation[] resp = c.findRespForm(null, null);\n        if (resp != null) {\n            Object[][] matResp = new Object[resp.length][5];\n            for (int i = 0; i < resp.length; i++) {\n                matResp[i][0] = resp[i].getNom();\n                matResp[i][1] = resp[i].getPrenom();\n                matResp[i][2] = resp[i].getSex();\n                matResp[i][3] = resp[i].getEmail();\n                matResp[i][4] = resp[i].getTelephone();\n            }\n            return matResp;\n        }\n        return null;\n    }\n\n    /**\n     * creation de la matrice pour la liste deroulante\n     * @return matrice pour la liste deroulante formation\n     */\n    private Object[][] createListeDeroulanteFormation() {\n        Formation[] tabFormation = c.findFormation(null, null);\n        if (tabFormation != null) {\n            Object[][] matFormation = new Object[tabFormation.length][4];\n            for (int i = 0; i < tabFormation.length; i++) {\n                matFormation[i][0] = tabFormation[i].getTitre_formation();\n                matFormation[i][1] = tabFormation[i].getDate_limite_candidature().get(Calendar.DATE) + \"/\" + tabFormation[i].getDate_limite_candidature().get(Calendar.MONTH) + \"/\" + tabFormation[i].getDate_limite_candidature().get(Calendar.YEAR);\n                matFormation[i][2] = tabFormation[i].getMontant_inscription();\n                matFormation[i][3] = tabFormation[i].getResponsable().getNom() + \" \" + tabFormation[i].getResponsable().getPrenom();\n            }\n            return matFormation;\n        }\n        return null;\n    }\n\n    /**\n     * creation de la matrice pour la liste deroulante\n     * @return matrice pour la liste deroulante etudiant\n     */\n    private Object[][] createListeDeroulanteEtudiant() {\n        Candidat[] tabCandidat = c.findCandidat(null, null);\n        if (tabCandidat != null) {\n            Object[][] matEtu = new Object[tabCandidat.length][11];\n            for (int i = 0; i < tabCandidat.length; i++) {\n                matEtu[i][0] = tabCandidat[i].getNom();\n                matEtu[i][1] = tabCandidat[i].getPrenom();\n                matEtu[i][2] = tabCandidat[i].getSex();\n                matEtu[i][3] = tabCandidat[i].getEmail();\n                matEtu[i][4] = tabCandidat[i].getDateNaissance().get(Calendar.DATE) + \"/\" + tabCandidat[i].getDateNaissance().get(Calendar.MONTH) + \"/\" + tabCandidat[i].getDateNaissance().get(Calendar.YEAR);\n                matEtu[i][5] = tabCandidat[i].getPhoto();\n                matEtu[i][6] = tabCandidat[i].getDiplome();\n                matEtu[i][7] = tabCandidat[i].getNationalite();\n                matEtu[i][8] = tabCandidat[i].getFormation().getTitre_formation() + \".\" + tabCandidat[i].getFormation().getDate_limite_candidature().get(Calendar.DATE) + \"/\" + tabCandidat[i].getFormation().getDate_limite_candidature().get(Calendar.MONTH) + \"/\" + tabCandidat[i].getFormation().getDate_limite_candidature().get(Calendar.YEAR);\n                if (tabCandidat[i].getAcceptation() == 1) {\n                    matEtu[i][9] = \"ok\";\n                } else {\n                    matEtu[i][9] = \"non\";\n                }\n                matEtu[i][10] = tabCandidat[i].getBource();\n            }\n            return matEtu;\n        }\n        return null;\n    }\n\n    /**\n     * creation de la barre d outil\n     * @return creation de la barre d outil\n     */\n    void buildBarreDOutil() {\n        //---------------------Creation de la barre d outil----------------------------------\n        JMenuBar menuBar = new JMenuBar();\n        JMenu fichier = new JMenu(\"Fichier\");\n        JMenu aide = new JMenu(\"Aide\");\n        JMenuItem quitter = new JMenuItem(new QuitterAction(\"Quitter\"));\n        fichier.add(quitter);\n        menuBar.add(fichier);\n        JMenuItem aPropos = new JMenuItem(new AProposAction(this, \"A propos\"));\n        aide.add(aPropos);\n        menuBar.add(aide);\n        setJMenuBar(menuBar);\n        //------------------------------------------------------------------------------------\n    }\n\n    /**\n     * construit les different onglet de la fenetre\n     */\n    public void buildOnglet() {\n        JTabbedPane tabbedPane = new JTabbedPane();\n        ImageIcon icon = null;\n        //1er onglet principal\n        JTabbedPane tabbedPaneResp = new JTabbedPane();\n        //Premiere ongle responsable\n        JComponent panel10 = makeFormulaireResponsable();\n        panel10.setLayout(new FlowLayout());\n        tabbedPaneResp.addTab(\"Creer responsable\", icon, panel10, \"\");\n        tabbedPaneResp.setMnemonicAt(0, KeyEvent.VK_1);\n        //2eme onglet responsable\n        JComponent panel11 = makeModifierResponsable();\n        panel11.setLayout(new FlowLayout());\n        tabbedPaneResp.addTab(\"Modifier responsable\", icon, panel11, \"\");\n        tabbedPaneResp.setMnemonicAt(1, KeyEvent.VK_2);\n        tabbedPane.addTab(\"Responsable\", icon, tabbedPaneResp, \"\");\n        tabbedPane.setMnemonicAt(0, KeyEvent.VK_3);\n        //Deuxieme ongle principale\n        JTabbedPane tabbedPaneFormation = new JTabbedPane();\n        //1er onglet creer formation\n        JComponent panel20 = makeFormulaireFormation();\n        panel20.setLayout(new FlowLayout());\n        tabbedPaneFormation.addTab(\"Creer formation\", icon, panel20, \"\");\n        tabbedPane.setMnemonicAt(0, KeyEvent.VK_4);\n        //2eme onglet modification formaion\n        JComponent panel21 = makeModifierFormation();\n        panel21.setLayout(new FlowLayout());\n        tabbedPaneFormation.addTab(\"modifier une formation\", icon, panel21, \"\");\n        tabbedPaneFormation.setMnemonicAt(1, KeyEvent.VK_5);\n        tabbedPane.addTab(\"Formation\", icon, tabbedPaneFormation, \"\");\n        tabbedPane.setMnemonicAt(1, KeyEvent.VK_6);\n        //3eme onglet principal\n        JTabbedPane tabbedPaneEtu = new JTabbedPane();\n        //Troisieme ongle\n        JComponent panel30 = makeFormulaireEtudiant();\n        panel30.setLayout(new FlowLayout());\n        tabbedPaneEtu.addTab(\"Inscrire etudiant\", icon, panel30, \"\");\n        tabbedPaneEtu.setMnemonicAt(0, KeyEvent.VK_7);\n        //Quatrieme ongle\n        JComponent panel31 = makeValidation();\n        panel31.setLayout(new FlowLayout());\n        tabbedPaneEtu.addTab(\"validation d'inscription et de bourse.\", icon, panel31, \"\");\n        tabbedPaneEtu.setMnemonicAt(1, KeyEvent.VK_8);\n        JScrollPane scrollpaneEtu = new JScrollPane(tabbedPaneEtu);\n        tabbedPane.addTab(\"Etudiant\", icon, scrollpaneEtu, \"\");\n        tabbedPane.setMnemonicAt(2, KeyEvent.VK_9);\n        //Add the tabbed pane to this panel.\n        add(tabbedPane);\n        //The following line enables to use scrolling tabs.\n        tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);\n    }\n\n    /**\n     * *****************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************Creation pour le premiere ongle*****************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     */\n    /*\n\t * \treunion des de la creation du premiere ongle\n\t */\n    JComponent makeFormulaireResponsable() {\n        JPanel panel = new JPanel(false);\n        Box bVert = Box.createVerticalBox();\n        panel.add(bVert);\n        Box bHori = Box.createHorizontalBox();\n        bVert.add(bHori);\n        JComponent formText = makeFormultext();\n        JComponent formTextField = makeFormulTextField();\n        bHori.add(formText);\n        bHori.add(formTextField);\n        return panel;\n    }\n\n    /*\n\t * \t\n\t * \n\t *\t\t|nom :    |\n\t *\t\t|prenom : |\n\t *\t\t|sexe :   |\n\t *\t\t|email :  |\n\t */\n    JComponent makeFormultext() {\n        JPanel panel = new JPanel(false);\n        JLabel nomResponsable = new JLabel(\"Nom : *\");\n        JLabel prenomResponsable = new JLabel(\"Prenom : *\");\n        JLabel sexeResponsable = new JLabel(\"Sexe :\");\n        JLabel emailResponsable = new JLabel(\"Email :\");\n        JLabel telResponsable = new JLabel(\"Telephone :\");\n        JButton butonEvoiFormResp = new JButton(new CreationFormateurAction(this, \"ENVOI\", c));\n        Box bVert = Box.createVerticalBox();\n        panel.add(bVert);\n        bVert.add(nomResponsable);\n        bVert.add(Box.createVerticalStrut(4));\n        bVert.add(prenomResponsable);\n        bVert.add(Box.createVerticalStrut(8));\n        bVert.add(sexeResponsable);\n        bVert.add(Box.createVerticalStrut(6));\n        bVert.add(emailResponsable);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(telResponsable);\n        bVert.add(Box.createVerticalStrut(20));\n        bVert.add(butonEvoiFormResp);\n        return panel;\n    }\n\n    /*\n\t * \n\t * \t\t|textField|\n\t * \t\t|textField|\n\t * \t\t|textField|\n\t * \t\t|textField|\n\t * \n\t */\n    JComponent makeFormulTextField() {\n        String[] sexeResponsable = { \"M\", \"F\" };\n        JPanel panel = new JPanel(false);\n        textFieldNomResponsable = new JTextField(10);\n        textFieldPrenomResponsable = new JTextField(10);\n        comboBoxSexeResponsable = new JComboBox(sexeResponsable);\n        textFieldEmailResponsable = new JTextField(10);\n        textFieldTelResponsable = new JTextField(10);\n        Box bVert = Box.createVerticalBox();\n        panel.add(bVert);\n        bVert.add(textFieldNomResponsable);\n        bVert.add(textFieldPrenomResponsable);\n        bVert.add(comboBoxSexeResponsable);\n        bVert.add(textFieldEmailResponsable);\n        bVert.add(textFieldTelResponsable);\n        return panel;\n    }\n\n    JComponent makeModifierResponsable() {\n        JPanel panel = new JPanel(false);\n        Box bVert = Box.createVerticalBox();\n        modelResp = new Zmodel(dataResp, columnNamesResp);\n        tableResp = new JTable(modelResp);\n        listSelectionModel = tableResp.getSelectionModel();\n        listSelectionModel.addListSelectionListener(new SharedListSelectionHandlerResp());\n        tableResp.setSelectionModel(listSelectionModel);\n        tableResp.setPreferredScrollableViewportSize(new Dimension(600, 100));\n        tableResp.setFillsViewportHeight(true);\n        //content panes must be opaque\n        tableResp.setOpaque(true);\n        outputNomResp = new JTextField();\n        outputNomResp.setEditable(false);\n        outputPrenomResp = new JTextField();\n        outputPrenomResp.setEditable(false);\n        outputSexeResp = new JTextField();\n        outputSexeResp.setEditable(false);\n        outputEmailResp = new JTextField();\n        outputEmailResp.setEditable(false);\n        outputTelResp = new JTextField();\n        outputTelResp.setEditable(false);\n        JButton envoiResp = new JButton(new EnvoiRespAction(this, \"Envoi\", c));\n        JButton modifierResp = new JButton(new ModifierRespAction(this, \"Modifier\", c));\n        JButton supprimerResp = new JButton(new SupprRespAction(this, \"Supprimer\", c));\n        bVert.add(new JScrollPane(tableResp));\n        //bVert.add(scrollPane);\n        bVert.add(outputNomResp);\n        bVert.add(outputPrenomResp);\n        bVert.add(outputSexeResp);\n        bVert.add(outputEmailResp);\n        bVert.add(outputTelResp);\n        JPanel boutonPanel = new JPanel(new FlowLayout());\n        boutonPanel.add(envoiResp);\n        boutonPanel.add(modifierResp);\n        boutonPanel.add(supprimerResp);\n        panel.add(bVert);\n        panel.add(boutonPanel);\n        return panel;\n    }\n\n    /**\n     * *****************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     *  *********************Fin de la Creation pour le premiere ongle*****************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     */\n    /**\n     * *****************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************Creation pour le dexieme ongle*****************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     */\n    JComponent makeFormulaireFormation() {\n        JPanel panel = new JPanel(false);\n        Box bHori = Box.createHorizontalBox();\n        panel.add(bHori);\n        JComponent formTextFormation = makeFormultextFormation();\n        JComponent formTextFieldFormation = makeFormulTextFieldFormation();\n        bHori.add(formTextFormation);\n        bHori.add(formTextFieldFormation);\n        return panel;\n    }\n\n    JComponent makeFormultextFormation() {\n        JPanel panel = new JPanel(false);\n        JLabel titreDeLaFormation = new JLabel(\"Nom : *\");\n        JLabel dateLimite = new JLabel(\"Date limite : *\");\n        JLabel prixDeLaFormation = new JLabel(\"Prix de la formation : *\");\n        JLabel responsableDeLaFormation = new JLabel(\"Responsable : *\");\n        JButton butonEvoiFormFormation = new JButton(new CreerUneFormationAction(this, \"ENVOI\", c));\n        Box bVert = Box.createVerticalBox();\n        panel.add(bVert);\n        bVert.add(Box.createVerticalStrut(0));\n        bVert.add(titreDeLaFormation);\n        bVert.add(Box.createVerticalStrut(14));\n        bVert.add(dateLimite);\n        bVert.add(Box.createVerticalStrut(10));\n        bVert.add(prixDeLaFormation);\n        bVert.add(Box.createVerticalStrut(10));\n        bVert.add(responsableDeLaFormation);\n        bVert.add(Box.createVerticalStrut(20));\n        bVert.add(butonEvoiFormFormation);\n        return panel;\n    }\n\n    JComponent makeFormulTextFieldFormation() {\n        Identite[] idresp = c.findRespForm(null, null);\n        String[] listResponsable = {};\n        if (idresp != null) {\n            listResponsable = new String[idresp.length];\n            for (int i = 0; i < listResponsable.length; i++) {\n                listResponsable[i] = idresp[i].getNom() + \" \" + idresp[i].getPrenom();\n            }\n        }\n        JPanel panel = new JPanel(false);\n        textFieldTitreFormation = new JTextField(10);\n        comboBoxDateLimiteFormation = makeDateDeLaFormation();\n        textFieldPrixDeLaFormation = new JTextField(10);\n        comboBoxResponsableDeLaFormation = new JComboBox(listResponsable);\n        Box bVert2 = Box.createVerticalBox();\n        panel.add(bVert2);\n        bVert2.add(textFieldTitreFormation);\n        bVert2.add(comboBoxDateLimiteFormation);\n        bVert2.add(textFieldPrixDeLaFormation);\n        bVert2.add(comboBoxResponsableDeLaFormation);\n        return panel;\n    }\n\n    JComponent makeDateDeLaFormation() {\n        JPanel panel = new JPanel(false);\n        panel.setLayout(new FlowLayout());\n        String[] jour = new String[31];\n        String[] mois = new String[12];\n        String[] annee = new String[100];\n        for (int i = 0; i < 31; i++) {\n            jour[i] = String.valueOf(i + 1);\n        }\n        for (int i = 0; i < 12; i++) {\n            mois[i] = String.valueOf(i + 1);\n        }\n        for (int i = 0; i < 100; i++) {\n            annee[i] = String.valueOf(i + 2009);\n        }\n        comboBoxJourDLM = new JComboBox(jour);\n        comboBoxMoisDLM = new JComboBox(mois);\n        comboBoxAnneeDLM = new JComboBox(annee);\n        panel.add(comboBoxJourDLM);\n        panel.add(comboBoxMoisDLM);\n        panel.add(comboBoxAnneeDLM);\n        return panel;\n    }\n\n    JComponent makeModifierFormation() {\n        JPanel panel = new JPanel(false);\n        Box bVert = Box.createVerticalBox();\n        modelForm = new Zmodel(dataFormation, columnNamesFormation);\n        tableFormation = new JTable(modelForm);\n        listSelectionModel = tableFormation.getSelectionModel();\n        listSelectionModel.addListSelectionListener(new SharedListSelectionHandlerFormation());\n        tableFormation.setSelectionModel(listSelectionModel);\n        tableFormation.setPreferredScrollableViewportSize(new Dimension(600, 100));\n        tableFormation.setFillsViewportHeight(true);\n        //content panes must be opaque\n        tableFormation.setOpaque(true);\n        JScrollPane scrollPane = new JScrollPane(tableFormation);\n        outputTitreFormation = new JTextField();\n        outputTitreFormation.setEditable(false);\n        outputDateLimiteFormation = new JTextField();\n        outputDateLimiteFormation.setEditable(false);\n        outputPrixFormation = new JTextField();\n        outputPrixFormation.setEditable(false);\n        outputRespFormation = new JTextField();\n        outputRespFormation.setEditable(false);\n        titreArea = new JLabel(\"cout de la formation et liste des candidatures : \");\n        outputRespArea = new JTextArea(10, 10);\n        outputRespArea.setColumns(20);\n        outputRespArea.setLineWrap(true);\n        outputRespArea.setRows(15);\n        outputRespArea.setWrapStyleWord(true);\n        JScrollPane scrollPane1 = new JScrollPane(outputRespArea);\n        JButton envoiFormation = new JButton(new EnvoiFormationAction(this, \"Envoi\", c));\n        JButton modifierFormation = new JButton(new ModifierFormationAction(this, \"Modifier\", c));\n        JButton supprimerFormation = new JButton(new SupprFormationAction(this, \"Supprimer\", c, modifTableStockage));\n        bVert.add(scrollPane);\n        bVert.add(outputTitreFormation);\n        bVert.add(outputDateLimiteFormation);\n        bVert.add(outputPrixFormation);\n        bVert.add(outputRespFormation);\n        bVert.add(titreArea);\n        bVert.add(scrollPane1);\n        JPanel boutonPanel = new JPanel(new FlowLayout());\n        boutonPanel.add(envoiFormation);\n        boutonPanel.add(modifierFormation);\n        boutonPanel.add(supprimerFormation);\n        panel.add(bVert);\n        panel.add(boutonPanel);\n        return panel;\n    }\n\n    /**\n     * *****************************************************************************************\n     *  ******************************************************************************************\n     *  *,*****************************************************************************************\n     *  *********************Fin de la Creation pour le deuxieme ongle*****************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     */\n    /**\n     * *****************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************Creation pour le troisieme ongle*****************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     */\n    /*\n\t * \treunion des de la creation du troisieme ongle\n\t */\n    JComponent makeFormulaireEtudiant() {\n        JPanel panel = new JPanel(false);\n        Box bHori = Box.createHorizontalBox();\n        panel.add(bHori);\n        JComponent formTextEtudiant = makeFormultextEtudiant();\n        JComponent formTextFieldEtudiant = makeFormulTextFieldEtudiant();\n        bHori.add(formTextEtudiant);\n        bHori.add(formTextFieldEtudiant);\n        return panel;\n    }\n\n    JComponent makeFormultextEtudiant() {\n        JPanel panel = new JPanel(false);\n        JLabel nomEtudiant = new JLabel(\"Nom : *\");\n        JLabel prenomEtudiant = new JLabel(\"Prenom : *\");\n        JLabel sexeEtudiant = new JLabel(\"Sexe :\");\n        JLabel emailEtudiant = new JLabel(\"Email : *\");\n        JLabel dateDeNaissanceEtudiant = new JLabel(\"Date de naissance : *\");\n        JLabel photoEtudiant = new JLabel(\"Photo : *\");\n        JLabel diplomeEtudiant = new JLabel(\"diplome : *\");\n        JLabel nationnaliteEtudiant = new JLabel(\"nationalite :\");\n        JLabel choixDeLaFormation = new JLabel(\"Choix de la formation :\");\n        JButton butonEvoiFormEtudiant = new JButton(new CreerUnEtudiantAction(this, \"ENVOI\", c));\n        Box bVert = Box.createVerticalBox();\n        panel.add(bVert);\n        bVert.add(nomEtudiant);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(prenomEtudiant);\n        bVert.add(Box.createVerticalStrut(6));\n        bVert.add(sexeEtudiant);\n        bVert.add(Box.createVerticalStrut(8));\n        bVert.add(emailEtudiant);\n        bVert.add(Box.createVerticalStrut(13));\n        bVert.add(dateDeNaissanceEtudiant);\n        bVert.add(Box.createVerticalStrut(15));\n        bVert.add(photoEtudiant);\n        bVert.add(Box.createVerticalStrut(14));\n        bVert.add(diplomeEtudiant);\n        bVert.add(Box.createVerticalStrut(4));\n        bVert.add(nationnaliteEtudiant);\n        bVert.add(Box.createVerticalStrut(7));\n        bVert.add(choixDeLaFormation);\n        bVert.add(Box.createVerticalStrut(20));\n        bVert.add(butonEvoiFormEtudiant);\n        return panel;\n    }\n\n    JComponent makeFormulTextFieldEtudiant() {\n        Formation[] form = c.findAllFormation();\n        String[] listFormation = {};\n        if (form != null) {\n            listFormation = new String[form.length];\n            for (int i = 0; i < form.length; i++) {\n                form[i].getDate_limite_candidature();\n                listFormation[i] = form[i].getTitre_formation() + \".\" + form[i].getDate_limite_candidature().get(Calendar.DATE) + \"/\" + form[i].getDate_limite_candidature().get(Calendar.MONTH) + \"/\" + form[i].getDate_limite_candidature().get(Calendar.YEAR);\n            }\n        }\n        String[] sexeEtudiant = { \"M\", \"F\" };\n        JPanel panel = new JPanel(false);\n        textFieldNomEtudiant = new JTextField(10);\n        textFieldPrenomEtudiant = new JTextField(10);\n        comboBoxSexeEtudiant = new JComboBox(sexeEtudiant);\n        textFieldEmailEtudiant = new JTextField(10);\n        comboBoxDateNaissanceEtudiant = makeDateDeNaissance();\n        textFieldPhotoEtudiants = makeChargeImage();\n        textFieldDiplomeEtudiant = new JTextField(10);\n        textFieldNationnaliteEtudiant = new JTextField(10);\n        comboBoxFormation1 = new JComboBox(listFormation);\n        Box bVert = Box.createVerticalBox();\n        panel.add(bVert);\n        bVert.add(textFieldNomEtudiant);\n        bVert.add(textFieldPrenomEtudiant);\n        bVert.add(comboBoxSexeEtudiant);\n        bVert.add(textFieldEmailEtudiant);\n        bVert.add(comboBoxDateNaissanceEtudiant);\n        bVert.add(textFieldPhotoEtudiants);\n        bVert.add(textFieldDiplomeEtudiant);\n        bVert.add(textFieldNationnaliteEtudiant);\n        bVert.add(comboBoxFormation1);\n        return panel;\n    }\n\n    JComponent makeChargeImage() {\n        JPanel panel = new JPanel(false);\n        panel.setLayout(new FlowLayout());\n        textFieldPhotoEtudiant = new JTextField(10);\n        JButton boutonChargeImage = new JButton(new ChargeImageAction(this, \"CHARGER\"));\n        panel.add(textFieldPhotoEtudiant);\n        panel.add(boutonChargeImage);\n        return panel;\n    }\n\n    JComponent makeDateDeNaissance() {\n        JPanel panel = new JPanel(false);\n        panel.setLayout(new FlowLayout());\n        String[] jourEtu = new String[31];\n        String[] moisEtu = new String[12];\n        String[] anneeEtu = new String[100];\n        for (int i = 0; i < 31; i++) {\n            jourEtu[i] = String.valueOf(i + 1);\n        }\n        for (int i = 0; i < 12; i++) {\n            moisEtu[i] = String.valueOf(i + 1);\n        }\n        for (int i = 0; i < 100; i++) {\n            anneeEtu[i] = String.valueOf(i + 1918);\n        }\n        comboBoxJourDDNEtu = new JComboBox(jourEtu);\n        comboBoxMoisDDNEtu = new JComboBox(moisEtu);\n        comboBoxAnneeDDNEtu = new JComboBox(anneeEtu);\n        panel.add(comboBoxJourDDNEtu);\n        panel.add(comboBoxMoisDDNEtu);\n        panel.add(comboBoxAnneeDDNEtu);\n        return panel;\n    }\n\n    /**\n     * *****************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     *  *********************Fin de la Creation pour le troisieme ongle*****************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     */\n    /**\n     * *****************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************Creation pour le quatrieme ongle*****************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     */\n    JComponent makeValidation() {\n        String[] listFormation = {};\n        Formation[] form = c.findAllFormation();\n        if (form != null) {\n            listFormation = new String[form.length];\n            for (int i = 0; i < form.length; i++) {\n                form[i].getDate_limite_candidature();\n                listFormation[i] = form[i].getTitre_formation() + \".\" + form[i].getDate_limite_candidature().get(Calendar.DATE) + \"/\" + form[i].getDate_limite_candidature().get(Calendar.MONTH) + \"/\" + form[i].getDate_limite_candidature().get(Calendar.YEAR);\n            }\n        }\n        JPanel panel = new JPanel(false);\n        modelEtu = new Zmodel(dataEtu, columnNamesEtu);\n        tableEtu = new JTable(modelEtu);\n        panel.setLayout(new FlowLayout());\n        tableEtu.getColumnModel().getColumn(5).setResizable(false);\n        tableEtu.getColumnModel().getColumn(5).setPreferredWidth(0);\n        tableEtu.getColumnModel().getColumn(5).setMaxWidth(0);\n        tableEtu.getColumnModel().getColumn(5).setMinWidth(0);\n        //tableEtu = new JTable(dataEtu, columnNamesEtu);\n        listSelectionModel = tableEtu.getSelectionModel();\n        listSelectionModel.addListSelectionListener(new SharedListSelectionHandlerEtu());\n        tableEtu.setSelectionModel(listSelectionModel);\n        tableEtu.setPreferredScrollableViewportSize(new Dimension(700, 150));\n        tableEtu.setFillsViewportHeight(true);\n        JPanel checkPanel = new JPanel(new FlowLayout());\n        JPanel boutonPanel = new JPanel(new FlowLayout());\n        //content panes must be opaque\n        tableEtu.setOpaque(true);\n        JScrollPane scrollPane = new JScrollPane(tableEtu);\n        comboBoxFormation2 = new JComboBox(listFormation);\n        comboBoxFormation2.addActionListener(this);\n        outputNom = new JTextField();\n        outputNom.setEditable(false);\n        outputPrenom = new JTextField();\n        outputPrenom.setEditable(false);\n        outputSexe = new JTextField();\n        outputSexe.setEditable(false);\n        outputEmail = new JTextField();\n        outputEmail.setEditable(false);\n        outputDateDeNaissance = new JTextField();\n        outputDateDeNaissance.setEditable(false);\n        outputPhoto = new JLabel();\n        //outputPhoto.setEditable(false);\n        outputDiplome = new JTextField();\n        outputDiplome.setEditable(false);\n        outputNationalite = new JTextField();\n        outputNationalite.setEditable(false);\n        outputFormation = new JTextField();\n        outputFormation.setEditable(false);\n        checkBoxAccept = new JCheckBox(\"accept\");\n        checkBoxAccept.addItemListener(this);\n        checkBoxBourse = new JCheckBox(\"bourse :\");\n        checkBoxBourse.addItemListener(this);\n        montant = new JTextField(10);\n        montant.setEnabled(false);\n        JButton envoiAcceptBourse = new JButton(new EnvoiAcceptBourseAction(this, \"ENVOI\", c));\n        JButton modificationEtu = new JButton(new ModificationEtuAction(this, \"MODIFIER\", c));\n        JButton supprimeEtu = new JButton(new SupprimeEtuAction(this, \"SUPPRIMER\", c));\n        JButton importExel = new JButton(new ExportExelAction(this, \"exporter table\", c));\n        Box bVert = Box.createVerticalBox();\n        panel.add(bVert);\n        bVert.add(comboBoxFormation2);\n        bVert.add(scrollPane);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(outputNom);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(outputPrenom);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(outputSexe);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(outputEmail);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(outputDateDeNaissance);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(outputPhoto);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(outputDiplome);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(outputNationalite);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(outputFormation);\n        checkPanel.add(checkBoxAccept);\n        checkPanel.add(checkBoxBourse);\n        checkPanel.add(montant);\n        bVert.add(checkPanel);\n        boutonPanel.add(envoiAcceptBourse);\n        boutonPanel.add(modificationEtu);\n        boutonPanel.add(supprimeEtu);\n        boutonPanel.add(importExel);\n        bVert.add(boutonPanel);\n        return panel;\n    }\n\n    public void actionPerformed(ActionEvent e) {\n        System.out.println(\"apuis resp\");\n    }\n\n    /**\n     * *****************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     *  *********************Fin de la Creation pour le quatrieme ongle*****************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     */\n    /**\n     * Lit les checkbox\n     */\n    public void itemStateChanged(ItemEvent e) {\n        Object source = e.getItemSelectable();\n        if (source == checkBoxAccept) {\n            if (e.getStateChange() == ItemEvent.DESELECTED) {\n                checkBoxBourse.setSelected(false);\n                montant.setEnabled(false);\n                accept = false;\n            }\n            System.out.println(\"accept\");\n            accept = true;\n        } else if (source == checkBoxBourse) {\n            if (e.getStateChange() == ItemEvent.DESELECTED) {\n                montant.setEnabled(false);\n                bourse = false;\n            } else {\n                checkBoxAccept.setSelected(true);\n                montant.setEnabled(true);\n                bourse = true;\n            }\n        }\n    }\n\n    /**\n     * date de la formation\n     * @return la date de la formation sous forme de String\n     */\n    public String dateLimForm() {\n        String date = comboBoxJourDLM.getSelectedItem().toString() + comboBoxMoisDLM.getSelectedItem().toString() + comboBoxAnneeDLM.getSelectedItem().toString();\n        return date;\n    }\n\n    /**\n     * date de naissance\n     * @return la date de naissance sous form de String\n     */\n    public String dateDeNaiss() {\n        String date = comboBoxJourDDNEtu.getSelectedItem().toString() + comboBoxMoisDDNEtu.getSelectedItem().toString() + comboBoxAnneeDDNEtu.getSelectedItem().toString();\n        return date;\n    }\n\n    /**\n     * pour l icone\n     * @return une image icon, ou null si le chemin est invalide\n     */\n    protected static ImageIcon createImageIcon(String path) {\n        java.net.URL imgURL = FenetrePrincipale.class.getResource(path);\n        if (imgURL != null) {\n            return new ImageIcon(imgURL);\n        } else {\n            System.err.println(\"Couldn't find file: \" + path);\n            return null;\n        }\n    }\n\n    /**\n     * creation de la fenetre principale\n     */\n    private void build() {\n        //On donne un titre \u00c3\u00a0 l'application\n        setTitle(\"Projet !!!!!\");\n        //On donne une taille \u00c3\u00a0 notre fen\u00c3\u00aatre\n        setSize(800, 600);\n        //On centre la fen\u00c3\u00aatre sur l'\u00c3\u00a9cran\n        setLocationRelativeTo(null);\n        //On interdit la redimensionnement de la fen\u00c3\u00aatre\n        setResizable(false);\n        //On dit \u00c3\u00a0 l'application de se fermer lors du clic sur la croix\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    }\n\n    /**\n     * verification si les champ sont editable ou pas\n     */\n    public void afficheSiCelluleEditable() {\n        for (int i = 0; i < dataResp.length; i++) {\n            for (int j = 0; j < dataResp[0].length; j++) {\n                System.out.println(tableResp.isCellEditable(j, j));\n            }\n        }\n    }\n}\n",
    "test_prompt": "// FenetrePrincipale_0Test.java\npackage fr.unice.gfarce.interGraph;\n\n/**\n * classe qui dessine toute l interphace graphique\n */\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.awt.event.KeyEvent;\nimport java.util.Calendar;\nimport javax.swing.Box;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.main.Controler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FenetrePrincipale}.\n* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.\n*/\nclass FenetrePrincipale_0Test {"
}
,{
    "id": "chatcmpl-A5TccFs99aYU5fdqPEVsTpZBqaQHj",
    "object": "chat.completion",
    "created": 1725868870,
    "model": "gpt-3.5-turbo-0125",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass FenetrePrincipale_1Test {\n\n    @Test\n    void testDateDeNaiss() {\n        FenetrePrincipale fenetre = new FenetrePrincipale(new Controler());\n        \n        // Test case 1: Date de naissance is 01/01/2000\n        fenetre.comboBoxJourDDNEtu.setSelectedItem(\"1\");\n        fenetre.comboBoxMoisDDNEtu.setSelectedItem(\"1\");\n        fenetre.comboBoxAnneeDDNEtu.setSelectedItem(\"2000\");\n        assertEquals(\"01012000\", fenetre.dateDeNaiss());\n        \n        // Test case 2: Date de naissance is 15/06/1995\n        fenetre.comboBoxJourDDNEtu.setSelectedItem(\"15\");\n        fenetre.comboBoxMoisDDNEtu.setSelectedItem(\"6\");\n        fenetre.comboBoxAnneeDDNEtu.setSelectedItem(\"1995\");\n        assertEquals(\"15061995\", fenetre.dateDeNaiss());\n        \n        // Test case 3: Date de naissance is 31/12/1988\n        fenetre.comboBoxJourDDNEtu.setSelectedItem(\"31\");\n        fenetre.comboBoxMoisDDNEtu.setSelectedItem(\"12\");\n        fenetre.comboBoxAnneeDDNEtu.setSelectedItem(\"1988\");\n        assertEquals(\"31121988\", fenetre.dateDeNaiss());\n    }\n}\n```",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 8546,
        "completion_tokens": 292,
        "total_tokens": 8838
    },
    "system_fingerprint": null,
    "time_taken": 5.6835410594940186,
    "prompt_id": "/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale_1Test.java",
    "original_code": "// FenetrePrincipale.java\npackage fr.unice.gfarce.interGraph;\n\n/**\n * classe qui dessine toute l interphace graphique\n */\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.awt.event.KeyEvent;\nimport java.util.Calendar;\nimport javax.swing.Box;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.main.Controler;\n\npublic class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {\n\n    /**\n     */\n    private static final long serialVersionUID = 1L;\n\n    static JTextField textFieldNomResponsable;\n\n    static JTextField textFieldPrenomResponsable;\n\n    static JComboBox comboBoxSexeResponsable;\n\n    static JTextField textFieldEmailResponsable;\n\n    static JTextField textFieldTelResponsable;\n\n    static JTable tableResp;\n\n    static JTextField outputNomResp;\n\n    static JTextField outputPrenomResp;\n\n    static JTextField outputSexeResp;\n\n    static JTextField outputEmailResp;\n\n    static JTextField outputTelResp;\n\n    static JTextField textFieldTitreFormation;\n\n    static JComponent comboBoxDateLimiteFormation;\n\n    static JTextField textFieldPrixDeLaFormation;\n\n    static JComboBox comboBoxResponsableDeLaFormation;\n\n    static JComboBox comboBoxJourDLM;\n\n    static JComboBox comboBoxMoisDLM;\n\n    static JComboBox comboBoxAnneeDLM;\n\n    static JTable tableFormation;\n\n    static JTextField outputTitreFormation;\n\n    static JTextField outputDateLimiteFormation;\n\n    static JTextField outputPrixFormation;\n\n    static JTextField outputRespFormation;\n\n    ModifTableStockage modifTableStockage;\n\n    static JTextField textFieldNomEtudiant;\n\n    static JTextField textFieldPrenomEtudiant;\n\n    static JComboBox comboBoxSexeEtudiant;\n\n    static JTextField textFieldEmailEtudiant;\n\n    static JComponent textFieldPhotoEtudiants;\n\n    static JComponent comboBoxDateNaissanceEtudiant;\n\n    static JTextField textFieldDiplomeEtudiant;\n\n    static JTextField textFieldNationnaliteEtudiant;\n\n    static JTextField textFieldPhotoEtudiant;\n\n    static JComboBox comboBoxJourDDNEtu;\n\n    static JComboBox comboBoxMoisDDNEtu;\n\n    static JComboBox comboBoxAnneeDDNEtu;\n\n    static JComboBox comboBoxFormation1;\n\n    static JComboBox comboBoxFormation2;\n\n    static JTextArea outputRespArea;\n\n    static JLabel titreArea;\n\n    String[] columnNamesResp = { \"Nom\", \"Prenom\", \"Sexe\", \"Email\", \"Telephone\" };\n\n    static JTable tableEtu;\n\n    ListSelectionModel listSelectionModel;\n\n    static JTextField outputNom;\n\n    static JTextField outputPrenom;\n\n    static JTextField outputSexe;\n\n    static JTextField outputEmail;\n\n    static JTextField outputDateDeNaissance;\n\n    static JLabel outputPhoto;\n\n    static JTextField outputDiplome;\n\n    static JTextField outputNationalite;\n\n    static JTextField outputFormation;\n\n    static JCheckBox checkBoxAccept;\n\n    static JCheckBox checkBoxBourse;\n\n    static boolean accept;\n\n    static boolean bourse;\n\n    static JTextField montant;\n\n    Object[][] dataResp;\n\n    Zmodel modelResp;\n\n    Zmodel modelForm;\n\n    Zmodel modelEtu;\n\n    Controler c;\n\n    ImageIcon photoEtu;\n\n    String[] columnNamesFormation = { \"Titre de la formation\", \"Date limite\", \"Prix\", \"Responsable\" };\n\n    Object[][] dataFormation;\n\n    String[] columnNamesEtu = { \"Nom\", \"Prenom\", \"Sexe\", \"Email\", \"Date de naissance\", \"Photo\", \"Diplome\", \"Nationalite\", \"Formation\", \"Acceptation\", \"Bourse\" };\n\n    static Object[][] dataEtu;\n\n    /**\n     * constructeur qui cree l interface graphique\n     * @param c\n     */\n    public FenetrePrincipale(Controler c) {\n        super();\n        this.c = c;\n        //matrice etudiant\n        dataEtu = createListeDeroulanteEtudiant();\n        //matrice formation\n        dataFormation = createListeDeroulanteFormation();\n        //matrice responsable\n        dataResp = createListeDeroulanteResponsable();\n        //On cree la barre d outil\n        buildBarreDOutil();\n        //On cree les onglet\n        buildOnglet();\n        //On initialise notre fen\u00c3\u00aatre\n        build();\n    }\n\n    /**\n     * creation de la matrice pour la liste deroulante\n     * @return matrice pour la liste deroulante responsable\n     */\n    private Object[][] createListeDeroulanteResponsable() {\n        RespFormation[] resp = c.findRespForm(null, null);\n        if (resp != null) {\n            Object[][] matResp = new Object[resp.length][5];\n            for (int i = 0; i < resp.length; i++) {\n                matResp[i][0] = resp[i].getNom();\n                matResp[i][1] = resp[i].getPrenom();\n                matResp[i][2] = resp[i].getSex();\n                matResp[i][3] = resp[i].getEmail();\n                matResp[i][4] = resp[i].getTelephone();\n            }\n            return matResp;\n        }\n        return null;\n    }\n\n    /**\n     * creation de la matrice pour la liste deroulante\n     * @return matrice pour la liste deroulante formation\n     */\n    private Object[][] createListeDeroulanteFormation() {\n        Formation[] tabFormation = c.findFormation(null, null);\n        if (tabFormation != null) {\n            Object[][] matFormation = new Object[tabFormation.length][4];\n            for (int i = 0; i < tabFormation.length; i++) {\n                matFormation[i][0] = tabFormation[i].getTitre_formation();\n                matFormation[i][1] = tabFormation[i].getDate_limite_candidature().get(Calendar.DATE) + \"/\" + tabFormation[i].getDate_limite_candidature().get(Calendar.MONTH) + \"/\" + tabFormation[i].getDate_limite_candidature().get(Calendar.YEAR);\n                matFormation[i][2] = tabFormation[i].getMontant_inscription();\n                matFormation[i][3] = tabFormation[i].getResponsable().getNom() + \" \" + tabFormation[i].getResponsable().getPrenom();\n            }\n            return matFormation;\n        }\n        return null;\n    }\n\n    /**\n     * creation de la matrice pour la liste deroulante\n     * @return matrice pour la liste deroulante etudiant\n     */\n    private Object[][] createListeDeroulanteEtudiant() {\n        Candidat[] tabCandidat = c.findCandidat(null, null);\n        if (tabCandidat != null) {\n            Object[][] matEtu = new Object[tabCandidat.length][11];\n            for (int i = 0; i < tabCandidat.length; i++) {\n                matEtu[i][0] = tabCandidat[i].getNom();\n                matEtu[i][1] = tabCandidat[i].getPrenom();\n                matEtu[i][2] = tabCandidat[i].getSex();\n                matEtu[i][3] = tabCandidat[i].getEmail();\n                matEtu[i][4] = tabCandidat[i].getDateNaissance().get(Calendar.DATE) + \"/\" + tabCandidat[i].getDateNaissance().get(Calendar.MONTH) + \"/\" + tabCandidat[i].getDateNaissance().get(Calendar.YEAR);\n                matEtu[i][5] = tabCandidat[i].getPhoto();\n                matEtu[i][6] = tabCandidat[i].getDiplome();\n                matEtu[i][7] = tabCandidat[i].getNationalite();\n                matEtu[i][8] = tabCandidat[i].getFormation().getTitre_formation() + \".\" + tabCandidat[i].getFormation().getDate_limite_candidature().get(Calendar.DATE) + \"/\" + tabCandidat[i].getFormation().getDate_limite_candidature().get(Calendar.MONTH) + \"/\" + tabCandidat[i].getFormation().getDate_limite_candidature().get(Calendar.YEAR);\n                if (tabCandidat[i].getAcceptation() == 1) {\n                    matEtu[i][9] = \"ok\";\n                } else {\n                    matEtu[i][9] = \"non\";\n                }\n                matEtu[i][10] = tabCandidat[i].getBource();\n            }\n            return matEtu;\n        }\n        return null;\n    }\n\n    /**\n     * creation de la barre d outil\n     * @return creation de la barre d outil\n     */\n    void buildBarreDOutil() {\n        //---------------------Creation de la barre d outil----------------------------------\n        JMenuBar menuBar = new JMenuBar();\n        JMenu fichier = new JMenu(\"Fichier\");\n        JMenu aide = new JMenu(\"Aide\");\n        JMenuItem quitter = new JMenuItem(new QuitterAction(\"Quitter\"));\n        fichier.add(quitter);\n        menuBar.add(fichier);\n        JMenuItem aPropos = new JMenuItem(new AProposAction(this, \"A propos\"));\n        aide.add(aPropos);\n        menuBar.add(aide);\n        setJMenuBar(menuBar);\n        //------------------------------------------------------------------------------------\n    }\n\n    /**\n     * construit les different onglet de la fenetre\n     */\n    public void buildOnglet() {\n        JTabbedPane tabbedPane = new JTabbedPane();\n        ImageIcon icon = null;\n        //1er onglet principal\n        JTabbedPane tabbedPaneResp = new JTabbedPane();\n        //Premiere ongle responsable\n        JComponent panel10 = makeFormulaireResponsable();\n        panel10.setLayout(new FlowLayout());\n        tabbedPaneResp.addTab(\"Creer responsable\", icon, panel10, \"\");\n        tabbedPaneResp.setMnemonicAt(0, KeyEvent.VK_1);\n        //2eme onglet responsable\n        JComponent panel11 = makeModifierResponsable();\n        panel11.setLayout(new FlowLayout());\n        tabbedPaneResp.addTab(\"Modifier responsable\", icon, panel11, \"\");\n        tabbedPaneResp.setMnemonicAt(1, KeyEvent.VK_2);\n        tabbedPane.addTab(\"Responsable\", icon, tabbedPaneResp, \"\");\n        tabbedPane.setMnemonicAt(0, KeyEvent.VK_3);\n        //Deuxieme ongle principale\n        JTabbedPane tabbedPaneFormation = new JTabbedPane();\n        //1er onglet creer formation\n        JComponent panel20 = makeFormulaireFormation();\n        panel20.setLayout(new FlowLayout());\n        tabbedPaneFormation.addTab(\"Creer formation\", icon, panel20, \"\");\n        tabbedPane.setMnemonicAt(0, KeyEvent.VK_4);\n        //2eme onglet modification formaion\n        JComponent panel21 = makeModifierFormation();\n        panel21.setLayout(new FlowLayout());\n        tabbedPaneFormation.addTab(\"modifier une formation\", icon, panel21, \"\");\n        tabbedPaneFormation.setMnemonicAt(1, KeyEvent.VK_5);\n        tabbedPane.addTab(\"Formation\", icon, tabbedPaneFormation, \"\");\n        tabbedPane.setMnemonicAt(1, KeyEvent.VK_6);\n        //3eme onglet principal\n        JTabbedPane tabbedPaneEtu = new JTabbedPane();\n        //Troisieme ongle\n        JComponent panel30 = makeFormulaireEtudiant();\n        panel30.setLayout(new FlowLayout());\n        tabbedPaneEtu.addTab(\"Inscrire etudiant\", icon, panel30, \"\");\n        tabbedPaneEtu.setMnemonicAt(0, KeyEvent.VK_7);\n        //Quatrieme ongle\n        JComponent panel31 = makeValidation();\n        panel31.setLayout(new FlowLayout());\n        tabbedPaneEtu.addTab(\"validation d'inscription et de bourse.\", icon, panel31, \"\");\n        tabbedPaneEtu.setMnemonicAt(1, KeyEvent.VK_8);\n        JScrollPane scrollpaneEtu = new JScrollPane(tabbedPaneEtu);\n        tabbedPane.addTab(\"Etudiant\", icon, scrollpaneEtu, \"\");\n        tabbedPane.setMnemonicAt(2, KeyEvent.VK_9);\n        //Add the tabbed pane to this panel.\n        add(tabbedPane);\n        //The following line enables to use scrolling tabs.\n        tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);\n    }\n\n    /**\n     * *****************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************Creation pour le premiere ongle*****************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     */\n    /*\n\t * \treunion des de la creation du premiere ongle\n\t */\n    JComponent makeFormulaireResponsable() {\n        JPanel panel = new JPanel(false);\n        Box bVert = Box.createVerticalBox();\n        panel.add(bVert);\n        Box bHori = Box.createHorizontalBox();\n        bVert.add(bHori);\n        JComponent formText = makeFormultext();\n        JComponent formTextField = makeFormulTextField();\n        bHori.add(formText);\n        bHori.add(formTextField);\n        return panel;\n    }\n\n    /*\n\t * \t\n\t * \n\t *\t\t|nom :    |\n\t *\t\t|prenom : |\n\t *\t\t|sexe :   |\n\t *\t\t|email :  |\n\t */\n    JComponent makeFormultext() {\n        JPanel panel = new JPanel(false);\n        JLabel nomResponsable = new JLabel(\"Nom : *\");\n        JLabel prenomResponsable = new JLabel(\"Prenom : *\");\n        JLabel sexeResponsable = new JLabel(\"Sexe :\");\n        JLabel emailResponsable = new JLabel(\"Email :\");\n        JLabel telResponsable = new JLabel(\"Telephone :\");\n        JButton butonEvoiFormResp = new JButton(new CreationFormateurAction(this, \"ENVOI\", c));\n        Box bVert = Box.createVerticalBox();\n        panel.add(bVert);\n        bVert.add(nomResponsable);\n        bVert.add(Box.createVerticalStrut(4));\n        bVert.add(prenomResponsable);\n        bVert.add(Box.createVerticalStrut(8));\n        bVert.add(sexeResponsable);\n        bVert.add(Box.createVerticalStrut(6));\n        bVert.add(emailResponsable);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(telResponsable);\n        bVert.add(Box.createVerticalStrut(20));\n        bVert.add(butonEvoiFormResp);\n        return panel;\n    }\n\n    /*\n\t * \n\t * \t\t|textField|\n\t * \t\t|textField|\n\t * \t\t|textField|\n\t * \t\t|textField|\n\t * \n\t */\n    JComponent makeFormulTextField() {\n        String[] sexeResponsable = { \"M\", \"F\" };\n        JPanel panel = new JPanel(false);\n        textFieldNomResponsable = new JTextField(10);\n        textFieldPrenomResponsable = new JTextField(10);\n        comboBoxSexeResponsable = new JComboBox(sexeResponsable);\n        textFieldEmailResponsable = new JTextField(10);\n        textFieldTelResponsable = new JTextField(10);\n        Box bVert = Box.createVerticalBox();\n        panel.add(bVert);\n        bVert.add(textFieldNomResponsable);\n        bVert.add(textFieldPrenomResponsable);\n        bVert.add(comboBoxSexeResponsable);\n        bVert.add(textFieldEmailResponsable);\n        bVert.add(textFieldTelResponsable);\n        return panel;\n    }\n\n    JComponent makeModifierResponsable() {\n        JPanel panel = new JPanel(false);\n        Box bVert = Box.createVerticalBox();\n        modelResp = new Zmodel(dataResp, columnNamesResp);\n        tableResp = new JTable(modelResp);\n        listSelectionModel = tableResp.getSelectionModel();\n        listSelectionModel.addListSelectionListener(new SharedListSelectionHandlerResp());\n        tableResp.setSelectionModel(listSelectionModel);\n        tableResp.setPreferredScrollableViewportSize(new Dimension(600, 100));\n        tableResp.setFillsViewportHeight(true);\n        //content panes must be opaque\n        tableResp.setOpaque(true);\n        outputNomResp = new JTextField();\n        outputNomResp.setEditable(false);\n        outputPrenomResp = new JTextField();\n        outputPrenomResp.setEditable(false);\n        outputSexeResp = new JTextField();\n        outputSexeResp.setEditable(false);\n        outputEmailResp = new JTextField();\n        outputEmailResp.setEditable(false);\n        outputTelResp = new JTextField();\n        outputTelResp.setEditable(false);\n        JButton envoiResp = new JButton(new EnvoiRespAction(this, \"Envoi\", c));\n        JButton modifierResp = new JButton(new ModifierRespAction(this, \"Modifier\", c));\n        JButton supprimerResp = new JButton(new SupprRespAction(this, \"Supprimer\", c));\n        bVert.add(new JScrollPane(tableResp));\n        //bVert.add(scrollPane);\n        bVert.add(outputNomResp);\n        bVert.add(outputPrenomResp);\n        bVert.add(outputSexeResp);\n        bVert.add(outputEmailResp);\n        bVert.add(outputTelResp);\n        JPanel boutonPanel = new JPanel(new FlowLayout());\n        boutonPanel.add(envoiResp);\n        boutonPanel.add(modifierResp);\n        boutonPanel.add(supprimerResp);\n        panel.add(bVert);\n        panel.add(boutonPanel);\n        return panel;\n    }\n\n    /**\n     * *****************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     *  *********************Fin de la Creation pour le premiere ongle*****************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     */\n    /**\n     * *****************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************Creation pour le dexieme ongle*****************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     */\n    JComponent makeFormulaireFormation() {\n        JPanel panel = new JPanel(false);\n        Box bHori = Box.createHorizontalBox();\n        panel.add(bHori);\n        JComponent formTextFormation = makeFormultextFormation();\n        JComponent formTextFieldFormation = makeFormulTextFieldFormation();\n        bHori.add(formTextFormation);\n        bHori.add(formTextFieldFormation);\n        return panel;\n    }\n\n    JComponent makeFormultextFormation() {\n        JPanel panel = new JPanel(false);\n        JLabel titreDeLaFormation = new JLabel(\"Nom : *\");\n        JLabel dateLimite = new JLabel(\"Date limite : *\");\n        JLabel prixDeLaFormation = new JLabel(\"Prix de la formation : *\");\n        JLabel responsableDeLaFormation = new JLabel(\"Responsable : *\");\n        JButton butonEvoiFormFormation = new JButton(new CreerUneFormationAction(this, \"ENVOI\", c));\n        Box bVert = Box.createVerticalBox();\n        panel.add(bVert);\n        bVert.add(Box.createVerticalStrut(0));\n        bVert.add(titreDeLaFormation);\n        bVert.add(Box.createVerticalStrut(14));\n        bVert.add(dateLimite);\n        bVert.add(Box.createVerticalStrut(10));\n        bVert.add(prixDeLaFormation);\n        bVert.add(Box.createVerticalStrut(10));\n        bVert.add(responsableDeLaFormation);\n        bVert.add(Box.createVerticalStrut(20));\n        bVert.add(butonEvoiFormFormation);\n        return panel;\n    }\n\n    JComponent makeFormulTextFieldFormation() {\n        Identite[] idresp = c.findRespForm(null, null);\n        String[] listResponsable = {};\n        if (idresp != null) {\n            listResponsable = new String[idresp.length];\n            for (int i = 0; i < listResponsable.length; i++) {\n                listResponsable[i] = idresp[i].getNom() + \" \" + idresp[i].getPrenom();\n            }\n        }\n        JPanel panel = new JPanel(false);\n        textFieldTitreFormation = new JTextField(10);\n        comboBoxDateLimiteFormation = makeDateDeLaFormation();\n        textFieldPrixDeLaFormation = new JTextField(10);\n        comboBoxResponsableDeLaFormation = new JComboBox(listResponsable);\n        Box bVert2 = Box.createVerticalBox();\n        panel.add(bVert2);\n        bVert2.add(textFieldTitreFormation);\n        bVert2.add(comboBoxDateLimiteFormation);\n        bVert2.add(textFieldPrixDeLaFormation);\n        bVert2.add(comboBoxResponsableDeLaFormation);\n        return panel;\n    }\n\n    JComponent makeDateDeLaFormation() {\n        JPanel panel = new JPanel(false);\n        panel.setLayout(new FlowLayout());\n        String[] jour = new String[31];\n        String[] mois = new String[12];\n        String[] annee = new String[100];\n        for (int i = 0; i < 31; i++) {\n            jour[i] = String.valueOf(i + 1);\n        }\n        for (int i = 0; i < 12; i++) {\n            mois[i] = String.valueOf(i + 1);\n        }\n        for (int i = 0; i < 100; i++) {\n            annee[i] = String.valueOf(i + 2009);\n        }\n        comboBoxJourDLM = new JComboBox(jour);\n        comboBoxMoisDLM = new JComboBox(mois);\n        comboBoxAnneeDLM = new JComboBox(annee);\n        panel.add(comboBoxJourDLM);\n        panel.add(comboBoxMoisDLM);\n        panel.add(comboBoxAnneeDLM);\n        return panel;\n    }\n\n    JComponent makeModifierFormation() {\n        JPanel panel = new JPanel(false);\n        Box bVert = Box.createVerticalBox();\n        modelForm = new Zmodel(dataFormation, columnNamesFormation);\n        tableFormation = new JTable(modelForm);\n        listSelectionModel = tableFormation.getSelectionModel();\n        listSelectionModel.addListSelectionListener(new SharedListSelectionHandlerFormation());\n        tableFormation.setSelectionModel(listSelectionModel);\n        tableFormation.setPreferredScrollableViewportSize(new Dimension(600, 100));\n        tableFormation.setFillsViewportHeight(true);\n        //content panes must be opaque\n        tableFormation.setOpaque(true);\n        JScrollPane scrollPane = new JScrollPane(tableFormation);\n        outputTitreFormation = new JTextField();\n        outputTitreFormation.setEditable(false);\n        outputDateLimiteFormation = new JTextField();\n        outputDateLimiteFormation.setEditable(false);\n        outputPrixFormation = new JTextField();\n        outputPrixFormation.setEditable(false);\n        outputRespFormation = new JTextField();\n        outputRespFormation.setEditable(false);\n        titreArea = new JLabel(\"cout de la formation et liste des candidatures : \");\n        outputRespArea = new JTextArea(10, 10);\n        outputRespArea.setColumns(20);\n        outputRespArea.setLineWrap(true);\n        outputRespArea.setRows(15);\n        outputRespArea.setWrapStyleWord(true);\n        JScrollPane scrollPane1 = new JScrollPane(outputRespArea);\n        JButton envoiFormation = new JButton(new EnvoiFormationAction(this, \"Envoi\", c));\n        JButton modifierFormation = new JButton(new ModifierFormationAction(this, \"Modifier\", c));\n        JButton supprimerFormation = new JButton(new SupprFormationAction(this, \"Supprimer\", c, modifTableStockage));\n        bVert.add(scrollPane);\n        bVert.add(outputTitreFormation);\n        bVert.add(outputDateLimiteFormation);\n        bVert.add(outputPrixFormation);\n        bVert.add(outputRespFormation);\n        bVert.add(titreArea);\n        bVert.add(scrollPane1);\n        JPanel boutonPanel = new JPanel(new FlowLayout());\n        boutonPanel.add(envoiFormation);\n        boutonPanel.add(modifierFormation);\n        boutonPanel.add(supprimerFormation);\n        panel.add(bVert);\n        panel.add(boutonPanel);\n        return panel;\n    }\n\n    /**\n     * *****************************************************************************************\n     *  ******************************************************************************************\n     *  *,*****************************************************************************************\n     *  *********************Fin de la Creation pour le deuxieme ongle*****************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     */\n    /**\n     * *****************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************Creation pour le troisieme ongle*****************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     */\n    /*\n\t * \treunion des de la creation du troisieme ongle\n\t */\n    JComponent makeFormulaireEtudiant() {\n        JPanel panel = new JPanel(false);\n        Box bHori = Box.createHorizontalBox();\n        panel.add(bHori);\n        JComponent formTextEtudiant = makeFormultextEtudiant();\n        JComponent formTextFieldEtudiant = makeFormulTextFieldEtudiant();\n        bHori.add(formTextEtudiant);\n        bHori.add(formTextFieldEtudiant);\n        return panel;\n    }\n\n    JComponent makeFormultextEtudiant() {\n        JPanel panel = new JPanel(false);\n        JLabel nomEtudiant = new JLabel(\"Nom : *\");\n        JLabel prenomEtudiant = new JLabel(\"Prenom : *\");\n        JLabel sexeEtudiant = new JLabel(\"Sexe :\");\n        JLabel emailEtudiant = new JLabel(\"Email : *\");\n        JLabel dateDeNaissanceEtudiant = new JLabel(\"Date de naissance : *\");\n        JLabel photoEtudiant = new JLabel(\"Photo : *\");\n        JLabel diplomeEtudiant = new JLabel(\"diplome : *\");\n        JLabel nationnaliteEtudiant = new JLabel(\"nationalite :\");\n        JLabel choixDeLaFormation = new JLabel(\"Choix de la formation :\");\n        JButton butonEvoiFormEtudiant = new JButton(new CreerUnEtudiantAction(this, \"ENVOI\", c));\n        Box bVert = Box.createVerticalBox();\n        panel.add(bVert);\n        bVert.add(nomEtudiant);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(prenomEtudiant);\n        bVert.add(Box.createVerticalStrut(6));\n        bVert.add(sexeEtudiant);\n        bVert.add(Box.createVerticalStrut(8));\n        bVert.add(emailEtudiant);\n        bVert.add(Box.createVerticalStrut(13));\n        bVert.add(dateDeNaissanceEtudiant);\n        bVert.add(Box.createVerticalStrut(15));\n        bVert.add(photoEtudiant);\n        bVert.add(Box.createVerticalStrut(14));\n        bVert.add(diplomeEtudiant);\n        bVert.add(Box.createVerticalStrut(4));\n        bVert.add(nationnaliteEtudiant);\n        bVert.add(Box.createVerticalStrut(7));\n        bVert.add(choixDeLaFormation);\n        bVert.add(Box.createVerticalStrut(20));\n        bVert.add(butonEvoiFormEtudiant);\n        return panel;\n    }\n\n    JComponent makeFormulTextFieldEtudiant() {\n        Formation[] form = c.findAllFormation();\n        String[] listFormation = {};\n        if (form != null) {\n            listFormation = new String[form.length];\n            for (int i = 0; i < form.length; i++) {\n                form[i].getDate_limite_candidature();\n                listFormation[i] = form[i].getTitre_formation() + \".\" + form[i].getDate_limite_candidature().get(Calendar.DATE) + \"/\" + form[i].getDate_limite_candidature().get(Calendar.MONTH) + \"/\" + form[i].getDate_limite_candidature().get(Calendar.YEAR);\n            }\n        }\n        String[] sexeEtudiant = { \"M\", \"F\" };\n        JPanel panel = new JPanel(false);\n        textFieldNomEtudiant = new JTextField(10);\n        textFieldPrenomEtudiant = new JTextField(10);\n        comboBoxSexeEtudiant = new JComboBox(sexeEtudiant);\n        textFieldEmailEtudiant = new JTextField(10);\n        comboBoxDateNaissanceEtudiant = makeDateDeNaissance();\n        textFieldPhotoEtudiants = makeChargeImage();\n        textFieldDiplomeEtudiant = new JTextField(10);\n        textFieldNationnaliteEtudiant = new JTextField(10);\n        comboBoxFormation1 = new JComboBox(listFormation);\n        Box bVert = Box.createVerticalBox();\n        panel.add(bVert);\n        bVert.add(textFieldNomEtudiant);\n        bVert.add(textFieldPrenomEtudiant);\n        bVert.add(comboBoxSexeEtudiant);\n        bVert.add(textFieldEmailEtudiant);\n        bVert.add(comboBoxDateNaissanceEtudiant);\n        bVert.add(textFieldPhotoEtudiants);\n        bVert.add(textFieldDiplomeEtudiant);\n        bVert.add(textFieldNationnaliteEtudiant);\n        bVert.add(comboBoxFormation1);\n        return panel;\n    }\n\n    JComponent makeChargeImage() {\n        JPanel panel = new JPanel(false);\n        panel.setLayout(new FlowLayout());\n        textFieldPhotoEtudiant = new JTextField(10);\n        JButton boutonChargeImage = new JButton(new ChargeImageAction(this, \"CHARGER\"));\n        panel.add(textFieldPhotoEtudiant);\n        panel.add(boutonChargeImage);\n        return panel;\n    }\n\n    JComponent makeDateDeNaissance() {\n        JPanel panel = new JPanel(false);\n        panel.setLayout(new FlowLayout());\n        String[] jourEtu = new String[31];\n        String[] moisEtu = new String[12];\n        String[] anneeEtu = new String[100];\n        for (int i = 0; i < 31; i++) {\n            jourEtu[i] = String.valueOf(i + 1);\n        }\n        for (int i = 0; i < 12; i++) {\n            moisEtu[i] = String.valueOf(i + 1);\n        }\n        for (int i = 0; i < 100; i++) {\n            anneeEtu[i] = String.valueOf(i + 1918);\n        }\n        comboBoxJourDDNEtu = new JComboBox(jourEtu);\n        comboBoxMoisDDNEtu = new JComboBox(moisEtu);\n        comboBoxAnneeDDNEtu = new JComboBox(anneeEtu);\n        panel.add(comboBoxJourDDNEtu);\n        panel.add(comboBoxMoisDDNEtu);\n        panel.add(comboBoxAnneeDDNEtu);\n        return panel;\n    }\n\n    /**\n     * *****************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     *  *********************Fin de la Creation pour le troisieme ongle*****************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     */\n    /**\n     * *****************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************Creation pour le quatrieme ongle*****************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     */\n    JComponent makeValidation() {\n        String[] listFormation = {};\n        Formation[] form = c.findAllFormation();\n        if (form != null) {\n            listFormation = new String[form.length];\n            for (int i = 0; i < form.length; i++) {\n                form[i].getDate_limite_candidature();\n                listFormation[i] = form[i].getTitre_formation() + \".\" + form[i].getDate_limite_candidature().get(Calendar.DATE) + \"/\" + form[i].getDate_limite_candidature().get(Calendar.MONTH) + \"/\" + form[i].getDate_limite_candidature().get(Calendar.YEAR);\n            }\n        }\n        JPanel panel = new JPanel(false);\n        modelEtu = new Zmodel(dataEtu, columnNamesEtu);\n        tableEtu = new JTable(modelEtu);\n        panel.setLayout(new FlowLayout());\n        tableEtu.getColumnModel().getColumn(5).setResizable(false);\n        tableEtu.getColumnModel().getColumn(5).setPreferredWidth(0);\n        tableEtu.getColumnModel().getColumn(5).setMaxWidth(0);\n        tableEtu.getColumnModel().getColumn(5).setMinWidth(0);\n        //tableEtu = new JTable(dataEtu, columnNamesEtu);\n        listSelectionModel = tableEtu.getSelectionModel();\n        listSelectionModel.addListSelectionListener(new SharedListSelectionHandlerEtu());\n        tableEtu.setSelectionModel(listSelectionModel);\n        tableEtu.setPreferredScrollableViewportSize(new Dimension(700, 150));\n        tableEtu.setFillsViewportHeight(true);\n        JPanel checkPanel = new JPanel(new FlowLayout());\n        JPanel boutonPanel = new JPanel(new FlowLayout());\n        //content panes must be opaque\n        tableEtu.setOpaque(true);\n        JScrollPane scrollPane = new JScrollPane(tableEtu);\n        comboBoxFormation2 = new JComboBox(listFormation);\n        comboBoxFormation2.addActionListener(this);\n        outputNom = new JTextField();\n        outputNom.setEditable(false);\n        outputPrenom = new JTextField();\n        outputPrenom.setEditable(false);\n        outputSexe = new JTextField();\n        outputSexe.setEditable(false);\n        outputEmail = new JTextField();\n        outputEmail.setEditable(false);\n        outputDateDeNaissance = new JTextField();\n        outputDateDeNaissance.setEditable(false);\n        outputPhoto = new JLabel();\n        //outputPhoto.setEditable(false);\n        outputDiplome = new JTextField();\n        outputDiplome.setEditable(false);\n        outputNationalite = new JTextField();\n        outputNationalite.setEditable(false);\n        outputFormation = new JTextField();\n        outputFormation.setEditable(false);\n        checkBoxAccept = new JCheckBox(\"accept\");\n        checkBoxAccept.addItemListener(this);\n        checkBoxBourse = new JCheckBox(\"bourse :\");\n        checkBoxBourse.addItemListener(this);\n        montant = new JTextField(10);\n        montant.setEnabled(false);\n        JButton envoiAcceptBourse = new JButton(new EnvoiAcceptBourseAction(this, \"ENVOI\", c));\n        JButton modificationEtu = new JButton(new ModificationEtuAction(this, \"MODIFIER\", c));\n        JButton supprimeEtu = new JButton(new SupprimeEtuAction(this, \"SUPPRIMER\", c));\n        JButton importExel = new JButton(new ExportExelAction(this, \"exporter table\", c));\n        Box bVert = Box.createVerticalBox();\n        panel.add(bVert);\n        bVert.add(comboBoxFormation2);\n        bVert.add(scrollPane);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(outputNom);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(outputPrenom);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(outputSexe);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(outputEmail);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(outputDateDeNaissance);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(outputPhoto);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(outputDiplome);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(outputNationalite);\n        bVert.add(Box.createVerticalStrut(5));\n        bVert.add(outputFormation);\n        checkPanel.add(checkBoxAccept);\n        checkPanel.add(checkBoxBourse);\n        checkPanel.add(montant);\n        bVert.add(checkPanel);\n        boutonPanel.add(envoiAcceptBourse);\n        boutonPanel.add(modificationEtu);\n        boutonPanel.add(supprimeEtu);\n        boutonPanel.add(importExel);\n        bVert.add(boutonPanel);\n        return panel;\n    }\n\n    public void actionPerformed(ActionEvent e) {\n        System.out.println(\"apuis resp\");\n    }\n\n    /**\n     * *****************************************************************************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     *  *********************Fin de la Creation pour le quatrieme ongle*****************************\n     *  ******************************************************************************************\n     *  ******************************************************************************************\n     */\n    /**\n     * Lit les checkbox\n     */\n    public void itemStateChanged(ItemEvent e) {\n        Object source = e.getItemSelectable();\n        if (source == checkBoxAccept) {\n            if (e.getStateChange() == ItemEvent.DESELECTED) {\n                checkBoxBourse.setSelected(false);\n                montant.setEnabled(false);\n                accept = false;\n            }\n            System.out.println(\"accept\");\n            accept = true;\n        } else if (source == checkBoxBourse) {\n            if (e.getStateChange() == ItemEvent.DESELECTED) {\n                montant.setEnabled(false);\n                bourse = false;\n            } else {\n                checkBoxAccept.setSelected(true);\n                montant.setEnabled(true);\n                bourse = true;\n            }\n        }\n    }\n\n    /**\n     * date de la formation\n     * @return la date de la formation sous forme de String\n     */\n    public String dateLimForm() {\n        String date = comboBoxJourDLM.getSelectedItem().toString() + comboBoxMoisDLM.getSelectedItem().toString() + comboBoxAnneeDLM.getSelectedItem().toString();\n        return date;\n    }\n\n    /**\n     * date de naissance\n     * @return la date de naissance sous form de String\n     */\n    public String dateDeNaiss() {\n        String date = comboBoxJourDDNEtu.getSelectedItem().toString() + comboBoxMoisDDNEtu.getSelectedItem().toString() + comboBoxAnneeDDNEtu.getSelectedItem().toString();\n        return date;\n    }\n\n    /**\n     * pour l icone\n     * @return une image icon, ou null si le chemin est invalide\n     */\n    protected static ImageIcon createImageIcon(String path) {\n        java.net.URL imgURL = FenetrePrincipale.class.getResource(path);\n        if (imgURL != null) {\n            return new ImageIcon(imgURL);\n        } else {\n            System.err.println(\"Couldn't find file: \" + path);\n            return null;\n        }\n    }\n\n    /**\n     * creation de la fenetre principale\n     */\n    private void build() {\n        //On donne un titre \u00c3\u00a0 l'application\n        setTitle(\"Projet !!!!!\");\n        //On donne une taille \u00c3\u00a0 notre fen\u00c3\u00aatre\n        setSize(800, 600);\n        //On centre la fen\u00c3\u00aatre sur l'\u00c3\u00a9cran\n        setLocationRelativeTo(null);\n        //On interdit la redimensionnement de la fen\u00c3\u00aatre\n        setResizable(false);\n        //On dit \u00c3\u00a0 l'application de se fermer lors du clic sur la croix\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    }\n\n    /**\n     * verification si les champ sont editable ou pas\n     */\n    public void afficheSiCelluleEditable() {\n        for (int i = 0; i < dataResp.length; i++) {\n            for (int j = 0; j < dataResp[0].length; j++) {\n                System.out.println(tableResp.isCellEditable(j, j));\n            }\n        }\n    }\n}\n",
    "test_prompt": "// FenetrePrincipale_1Test.java\npackage fr.unice.gfarce.interGraph;\n\n/**\n * classe qui dessine toute l interphace graphique\n */\nimport java.awt.Dimension;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.awt.event.KeyEvent;\nimport java.util.Calendar;\nimport javax.swing.Box;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JCheckBox;\nimport javax.swing.JComboBox;\nimport javax.swing.JComponent;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JMenu;\nimport javax.swing.JMenuBar;\nimport javax.swing.JMenuItem;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTable;\nimport javax.swing.JTextArea;\nimport javax.swing.JTextField;\nimport javax.swing.ListSelectionModel;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.main.Controler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link FenetrePrincipale}.\n* It contains ten unit test cases for the {@link FenetrePrincipale#dateDeNaiss()} method.\n*/\nclass FenetrePrincipale_1Test {"
}
,{
    "id": "chatcmpl-A5Tdjh35mmjK2IWb5YI4ubkrSJnkJ",
    "object": "chat.completion",
    "created": 1725868939,
    "model": "gpt-3.5-turbo-0125",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\nclass ModifTableStockage_1Test {\n\n    @Test\n    void testAjouterLigneWithColumns() {\n        TableStockage ts = new TableStockage(3, 2);\n        ts.setColumnName(0, \"Nom\");\n        ts.setColumnName(1, \"Age\");\n        ts.setValueAt(\"Alice\", 0, 0);\n        ts.setValueAt(25, 0, 1);\n        ts.setValueAt(\"Bob\", 1, 0);\n        ts.setValueAt(30, 1, 1);\n        \n        ModifTableStockage modifTable = new ModifTableStockage(ts);\n        TableStockage result = modifTable.ajouterLigne();\n        \n        assertEquals(3, result.getRowCount());\n        assertEquals(2, result.getColumnCount());\n        assertEquals(\"Nom\", result.getColumnName(0));\n        assertEquals(\"Age\", result.getColumnName(1));\n        assertEquals(\"Alice\", result.getValueAt(0, 0));\n        assertEquals(25, result.getValueAt(0, 1));\n        assertEquals(\"Bob\", result.getValueAt(1, 0));\n        assertEquals(30, result.getValueAt(1, 1));\n        assertEquals(\"\", result.getValueAt(2, 0));\n        assertEquals(0.0, result.getValueAt(2, 1));\n    }\n\n    @Test\n    void testAjouterLigneWithoutColumns() {\n        TableStockage ts = new TableStockage(0, 0);\n        \n        ModifTableStockage modifTable = new ModifTableStockage(ts);\n        TableStockage result = modifTable.ajouterLigne();\n        \n        assertEquals(0, result.getRowCount());\n        assertEquals(0, result.getColumnCount());\n    }\n\n    @Test\n    void testAjouterLigneWithEmptyTable() {\n        TableStockage ts = new TableStockage(1, 0);\n        \n        ModifTableStockage modifTable = new ModifTableStockage(ts);\n        TableStockage result = modifTable.ajouterLigne();\n        \n        assertEquals(2, result.getRowCount());\n        assertEquals(0, result.getColumnCount());\n    }\n    \n    @Test\n    void testAjouterLigneWithDifferentColumnTypes() {\n        TableStockage ts = new TableStockage(2, 2);\n        ts.setColumnName(0, \"Name\");\n        ts.setColumnName(1, \"Amount\");\n        ts.setColumnClass(0, String.class);\n        ts.setColumnClass(1, Double.class);\n        ts.setValueAt(\"Alice\", 0, 0);\n        ts.setValueAt(100.0, 0, 1);\n        ts.setValueAt(\"Bob\", 1, 0);\n        ts.setValueAt(200.0, 1, 1);\n        \n        ModifTableStockage modifTable = new ModifTableStockage(ts);\n        TableStockage result = modifTable.ajouterLigne();\n        \n        assertEquals(3, result.getRowCount());\n        assertEquals(2, result.getColumnCount());\n        assertEquals(\"Name\", result.getColumnName(0));\n        assertEquals(\"Amount\", result.getColumnName(1));\n        assertEquals(\"Alice\", result.getValueAt(0, 0));\n        assertEquals(100.0, result.getValueAt(0, 1));\n        assertEquals(\"Bob\", result.getValueAt(1, 0));\n        assertEquals(200.0, result.getValueAt(1, 1));\n        assertEquals(\"\", result.getValueAt(2, 0));\n        assertEquals(0.0, result.getValueAt(2, 1));\n    }\n}\n```\n```",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 4092,
        "completion_tokens": 737,
        "total_tokens": 4829
    },
    "system_fingerprint": null,
    "time_taken": 14.977679014205933,
    "prompt_id": "/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_1Test.java",
    "original_code": "// ModifTableStockage.java\n/**\n * Classe ModifTableStockage\n */\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\n\n/**\n * Recreee une table modifi&eacute;e par l'utilisateur, a partir d'une TableStockage donnee\n * @author Rol Elsa\n */\npublic class ModifTableStockage {\n\n    // dimension de la table\n    private int nbColonnes = 0;\n\n    // avec la ligne de description (les noms des colonnes)\n    private int nbLignes = 0;\n\n    // la table d'origine (String[] nomColonnes ; Object[][] matrice;)\n    private TableStockage ts;\n\n    /**\n     * Constructeur : recuperation de la TableStockage et initialisation\n     *\n     * @param ts\n     */\n    public ModifTableStockage(TableStockage ts) {\n        this.nbColonnes = ts.getColumnCount();\n        this.nbLignes = ts.getRowCount() + 1;\n        this.ts = ts;\n    }\n\n    /**\n     * G&eacute;n&egrave;re en sortie une TableStockage &agrave; partir de la table d'origine, mais avec une colonne en plus.\n     * Nouvelle colonne de nom \"nomNouvelleColonne\" et de type \"type\"\n     * Colonne Ajoutee a la fin de la JTable\n     * @param nomNouvelleColonne\n     * @param type\n     * @return TableStockage\n     */\n    public TableStockage ajouterColonne(String nomNouvelleColonne, Class<?> type) {\n        this.nbColonnes++;\n        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n        /* on recopie les noms des colonnes */\n        for (int j = 0; j < nbColonnes - 1; j++) {\n            tableS.setColumnName(j, ts.getColumnName(j));\n        }\n        // la derniere colonne prend le nom donne en parametre\n        tableS.setColumnName(nbColonnes - 1, nomNouvelleColonne);\n        /* on recopie les valeurs dans les colonnes */\n        for (int i = 0; i < nbLignes - 1; i++) {\n            for (int j = 0; j < nbColonnes - 1; j++) {\n                tableS.setValueAt(ts.getValueAt(i, j), i, j);\n            }\n            // la derniere colonne sera null\n            tableS.setColumnClass(nbColonnes - 1, type);\n        }\n        return tableS;\n    }\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.\n     * Ligne ajoutee a la fin de la JTable\n     * @return TableStockage\n     */\n    public TableStockage ajouterLigne() {\n        if (nbColonnes > 0) {\n            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)\n            this.nbLignes++;\n            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n            /* on recopie les noms des colonnes */\n            for (int j = 0; j < nbColonnes; j++) {\n                tableS.setColumnName(j, ts.getColumnName(j));\n            }\n            /* on recopie les valeurs dans les colonnes */\n            for (int i = 0; i < nbLignes - 2; i++) {\n                for (int j = 0; j < nbColonnes; j++) {\n                    tableS.setValueAt(ts.getValueAt(i, j), i, j);\n                }\n            }\n            for (int j = 0; j < nbColonnes; j++) {\n                if (ts.getColumnClass(j).equals(String.class)) {\n                    // la derniere ligne sera a null\n                    tableS.setValueAt(\"\", nbLignes - 2, j);\n                } else if (ts.getColumnClass(j).equals(Double.class)) {\n                    tableS.setValueAt(new Double(\"0\"), nbLignes - 2, j);\n                } else\n                    // sauf si de la classe Boolean\n                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);\n            }\n            return tableS;\n        } else {\n            // pas de colonne pour construire une ligne\n            JOptionPane.showMessageDialog(null, \"PAS DE COLONNE\", \"ERREUR\", JOptionPane.ERROR_MESSAGE);\n            return ts;\n        }\n    }\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine\n     * avec la colonne selectionnee en moins\n     * colonne d'indice donne en parametre supprimee\n     * @param indice\n     * @return TableStockage\n     */\n    public TableStockage supprimerColonne(int indice) {\n        this.nbColonnes--;\n        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n        /* on recopie les noms des colonnes, jusque celui a supprimer */\n        for (int j = 0; j < indice; j++) {\n            tableS.setColumnName(j, ts.getColumnName(j));\n        }\n        /* on recopie les colonnes, sauf celle a supprimer */\n        for (int i = 0; i < nbLignes - 1; i++) {\n            for (int j = 0; j < indice; j++) {\n                tableS.setValueAt(ts.getValueAt(i, j), i, j);\n            }\n        }\n        /* on recopie toutes les valeurs apres la colonne supprimee */\n        if (indice != nbColonnes) {\n            // la colonne supprimee n'est pas la derniere\n            for (int j = indice; j < nbColonnes; j++) {\n                tableS.setColumnName(j, ts.getColumnName(j + 1));\n            }\n            for (int i = 0; i < nbLignes - 1; i++) {\n                for (int j = indice; j < nbColonnes; j++) {\n                    tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);\n                }\n            }\n        }\n        return tableS;\n    }\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine,\n     * avec la ligne selectionnee en moins.\n     * ligne d'indice donne en parametre supprimee\n     * @param indice\n     * @return TableStockage\n     */\n    public TableStockage supprimerLigne(int indice) {\n        this.nbLignes--;\n        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n        /* on recopie les noms des colonnes */\n        for (int j = 0; j < nbColonnes; j++) {\n            tableS.setColumnName(j, ts.getColumnName(j));\n        }\n        /* on recopie les valeurs des colonnes */\n        for (int i = 0; i < indice; i++) {\n            for (int j = 0; j < nbColonnes; j++) {\n                tableS.setValueAt(ts.getValueAt(i, j), i, j);\n            }\n        }\n        if (indice != nbLignes - 1) {\n            // la ligne a supprimer n'est pas la derniere\n            for (int i = indice + 1; i < nbLignes; i++) {\n                for (int j = 0; j < nbColonnes; j++) {\n                    tableS.setValueAt(ts.getValueAt(i, j), i - 1, j);\n                }\n            }\n        }\n        return tableS;\n    }\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine,\n     * avec la colonne d'indice donne en parametre separee.\n     * @param indice\n     * @return TableStockage\n     */\n    public TableStockage separerColonne(int indice) {\n        if (ts.getColumnClass(indice).equals(String.class)) {\n            // on ne peut separer que des valeurs de type String\n            int k = 0;\n            String val = (String) ts.getValueAt(0, indice);\n            String val1 = new String();\n            /* Test qui verifie si la colonne est separable (par rapport a \"l'espace\") */\n            while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {\n                // code possible de separation entre les mots\n                val1 = val1.concat(String.valueOf(val.charAt(k)));\n                k++;\n            }\n            if (k == (val.length() - 1)) {\n                // le code de separation n'est pas 160\n                val1 = new String();\n                k = 0;\n                while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {\n                    // si la separation entre les mots est l'espace\n                    val1 = val1.concat(String.valueOf(val.charAt(k)));\n                    k++;\n                }\n            }\n            if (k != (val.length() - 1)) {\n                // la colonne est separable car il y a un espace\n                this.nbColonnes++;\n                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n                val1 = new String();\n                k = 0;\n                /* On ecrit les noms des colonnes */\n                for (int j = 0; j < indice; j++) {\n                    tableS.setColumnName(j, ts.getColumnName(j));\n                }\n                for (int j = indice + 1; j < nbColonnes; j++) {\n                    tableS.setColumnName(j, ts.getColumnName(j - 1));\n                }\n                // on recupere le nom de la colonne a separer\n                String colonne = ts.getColumnName(indice);\n                String val1Colonne, val2Colonne;\n                String[] resNP = colonne.split(\" \", 2);\n                val1Colonne = resNP[0];\n                if (resNP.length > 1)\n                    val2Colonne = resNP[1];\n                else\n                    val2Colonne = \"\";\n                // 1ere partie du nom de la colonne\n                tableS.setColumnName(indice, val1Colonne);\n                // 2eme partie\n                tableS.setColumnName(indice + 1, val2Colonne);\n                /* on ecrit les donnees */\n                for (int i = 0; i < nbLignes - 1; i++) {\n                    for (int j = 0; j < indice; j++) {\n                        tableS.setValueAt(ts.getValueAt(i, j), i, j);\n                    }\n                    for (int j = indice + 2; j < nbColonnes; j++) {\n                        tableS.setValueAt(ts.getValueAt(i, j - 1), i, j);\n                    }\n                }\n                /* On remplit les 2 colonnes */\n                String val2 = null;\n                for (int i = 0; i < nbLignes - 1; i++) {\n                    val1 = new String();\n                    // on recupere la valeur en [i-1 , indice]\n                    val = (String) ts.getValueAt(i, indice);\n                    k = 0;\n                    if (val.equals(\"\")) {\n                        // peut etre du a une ligne ou colonne ajout\u00c3\u00a9e a la suite\n                        val1 = \"\";\n                        val2 = \"\";\n                    } else {\n                        while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {\n                            val1 = val1.concat(String.valueOf(val.charAt(k)));\n                            k++;\n                        }\n                        if (k == (val.length() - 1)) {\n                            val1 = new String();\n                            k = 0;\n                            while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {\n                                val1 = val1.concat(String.valueOf(val.charAt(k)));\n                                k++;\n                            }\n                        }\n                        val2 = val.substring(k + 1, val.length());\n                    }\n                    double int1 = 0, int2 = 0;\n                    try {\n                        int1 = Double.parseDouble(val1);\n                        tableS.setValueAt(int1, i, indice);\n                    } catch (NumberFormatException e) {\n                        tableS.setValueAt(val1, i, indice);\n                    }\n                    try {\n                        int2 = Double.parseDouble(val2);\n                        tableS.setValueAt(int2, i, indice + 1);\n                    } catch (NumberFormatException e) {\n                        tableS.setValueAt(val2, i, indice + 1);\n                    }\n                }\n                return tableS;\n            } else {\n                JOptionPane.showMessageDialog(null, \"PAS SEPARABLE\", \"ERREUR\", JOptionPane.ERROR_MESSAGE);\n                return ts;\n            }\n        } else {\n            JOptionPane.showMessageDialog(null, \"non separable: PAS DE TYPE STRING\", \"ERREUR\", JOptionPane.ERROR_MESSAGE);\n            return ts;\n        }\n    }\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine,\n     * avec la colonne d'indice donne en parametre fusionnee avec la colonne voisine de droite.\n     * @param indice\n     * @return TableStockage\n     */\n    public TableStockage fusionnerColonnes(int indice) {\n        if (nbColonnes > 1) {\n            // on ne peut fusionner des objets de type Boolean\n            if ((!ts.getColumnClass(indice).equals(Boolean.class)) && (!ts.getColumnClass(indice + 1).equals(Boolean.class))) {\n                this.nbColonnes--;\n                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n                /* On ecrit les noms des colonnes */\n                for (int j = 0; j < indice; j++) {\n                    tableS.setColumnName(j, ts.getColumnName(j));\n                }\n                // on fusionne les 2 noms des colonnes\n                String c1 = ts.getColumnName(indice);\n                String c2 = ts.getColumnName(indice + 1);\n                for (int j = indice + 1; j < nbColonnes; j++) {\n                    tableS.setColumnName(j, ts.getColumnName(j + 1));\n                }\n                tableS.setColumnName(indice, c1.concat(\" \" + c2));\n                for (int i = 0; i < nbLignes - 1; i++) {\n                    for (int j = 0; j < indice; j++) {\n                        tableS.setValueAt(ts.getValueAt(i, j), i, j);\n                    }\n                    // on fusionne les donnees des 2 colonnes\n                    Object d1 = ts.getValueAt(i, indice);\n                    Object d2 = ts.getValueAt(i, indice + 1);\n                    // on transforme l'objet en String (si Integer ...)\n                    String s1 = d1.toString();\n                    String s2 = d2.toString();\n                    // separees par un espace\n                    tableS.setValueAt(s1.concat(\" \" + s2), i, indice);\n                    for (int j = indice + 1; j < nbColonnes; j++) {\n                        tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);\n                    }\n                }\n                return tableS;\n            } else {\n                JOptionPane.showMessageDialog(null, \"PAS DE TYPE STRING\", \"ERREUR\", JOptionPane.ERROR_MESSAGE);\n                return ts;\n            }\n        } else {\n            JOptionPane.showMessageDialog(null, \"UNE SEULE COLONNE\", \"ERREUR\", JOptionPane.ERROR_MESSAGE);\n            return ts;\n        }\n    }\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine,\n     * avec une nouvelle colonne de nom \"E-Mail\"\n     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.\n     * @return TableStockage\n     */\n    public TableStockage colonneMail() {\n        this.nbColonnes++;\n        ModifTableStockage mt = new ModifTableStockage(ts);\n        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n        tableS = mt.ajouterColonne(\"Envoyer E-Mail a:\", Boolean.class);\n        for (int i = 0; i < nbLignes - 1; i++) {\n            // on ajoute un checkbox (par defaut)\n            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);\n        }\n        return tableS;\n    }\n\n    /**\n     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,\n     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;\n     * @return TableStockage\n     */\n    public TableStockage selectMail() {\n        int j = 0;\n        Boolean bool;\n        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(\"Envoyer E-Mail a:\"))) {\n            // renverra la position de la colonne E-Mail si elle existe\n            j++;\n        }\n        if (j != this.nbColonnes) {\n            // la colonne E-Mail (de type Booleen) existe bien\n            int newNbLignes = 0;\n            for (int i = 0; i < nbLignes - 1; i++) {\n                bool = (Boolean) ts.getValueAt(i, j);\n                if (bool) {\n                    newNbLignes++;\n                }\n            }\n            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);\n            int k = 0;\n            for (int ind = 0; ind < nbColonnes; ind++) {\n                tableS.setColumnName(ind, ts.getColumnName(ind));\n            }\n            for (int row = 0; row < nbLignes - 1; row++) {\n                bool = (Boolean) ts.getValueAt(row, j);\n                if (bool) {\n                    for (int column = 0; column < nbColonnes; column++) {\n                        tableS.setValueAt(ts.getValueAt(row, column), k, column);\n                        bool = false;\n                    }\n                    k++;\n                }\n            }\n            return tableS;\n        } else {\n            JOptionPane.showMessageDialog(null, \"Le mail sera envoye a toute la liste\", \"Information\", JOptionPane.INFORMATION_MESSAGE);\n            return ts;\n        }\n    }\n}\n",
    "test_prompt": "// ModifTableStockage_1Test.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModifTableStockage}.\n* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.\n*/\nclass ModifTableStockage_1Test {"
}
,{
    "id": "chatcmpl-A5Teip9nXXojbcfmF6ndXJVF4VcyU",
    "object": "chat.completion",
    "created": 1725869000,
    "model": "gpt-3.5-turbo-0125",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\nclass ModifTableStockage_6Test {\n\n    @Test\n    void testColonneMail() {\n        // Given\n        TableStockage ts = new TableStockage(3, 3);\n        ModifTableStockage modifTableStockage = new ModifTableStockage(ts);\n\n        // When\n        TableStockage result = modifTableStockage.colonneMail();\n\n        // Then\n        assertEquals(4, result.getColumnCount());\n        assertEquals(3, result.getRowCount());\n        assertEquals(\"Envoyer E-Mail a:\", result.getColumnName(3));\n        assertEquals(Boolean.class, result.getColumnClass(3));\n        for (int i = 0; i < 3; i++) {\n            assertTrue((Boolean) result.getValueAt(i, 3));\n        }\n    }\n}\n```\n```",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 4091,
        "completion_tokens": 169,
        "total_tokens": 4260
    },
    "system_fingerprint": null,
    "time_taken": 2.824368715286255,
    "prompt_id": "/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_6Test.java",
    "original_code": "// ModifTableStockage.java\n/**\n * Classe ModifTableStockage\n */\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\n\n/**\n * Recreee une table modifi&eacute;e par l'utilisateur, a partir d'une TableStockage donnee\n * @author Rol Elsa\n */\npublic class ModifTableStockage {\n\n    // dimension de la table\n    private int nbColonnes = 0;\n\n    // avec la ligne de description (les noms des colonnes)\n    private int nbLignes = 0;\n\n    // la table d'origine (String[] nomColonnes ; Object[][] matrice;)\n    private TableStockage ts;\n\n    /**\n     * Constructeur : recuperation de la TableStockage et initialisation\n     *\n     * @param ts\n     */\n    public ModifTableStockage(TableStockage ts) {\n        this.nbColonnes = ts.getColumnCount();\n        this.nbLignes = ts.getRowCount() + 1;\n        this.ts = ts;\n    }\n\n    /**\n     * G&eacute;n&egrave;re en sortie une TableStockage &agrave; partir de la table d'origine, mais avec une colonne en plus.\n     * Nouvelle colonne de nom \"nomNouvelleColonne\" et de type \"type\"\n     * Colonne Ajoutee a la fin de la JTable\n     * @param nomNouvelleColonne\n     * @param type\n     * @return TableStockage\n     */\n    public TableStockage ajouterColonne(String nomNouvelleColonne, Class<?> type) {\n        this.nbColonnes++;\n        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n        /* on recopie les noms des colonnes */\n        for (int j = 0; j < nbColonnes - 1; j++) {\n            tableS.setColumnName(j, ts.getColumnName(j));\n        }\n        // la derniere colonne prend le nom donne en parametre\n        tableS.setColumnName(nbColonnes - 1, nomNouvelleColonne);\n        /* on recopie les valeurs dans les colonnes */\n        for (int i = 0; i < nbLignes - 1; i++) {\n            for (int j = 0; j < nbColonnes - 1; j++) {\n                tableS.setValueAt(ts.getValueAt(i, j), i, j);\n            }\n            // la derniere colonne sera null\n            tableS.setColumnClass(nbColonnes - 1, type);\n        }\n        return tableS;\n    }\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.\n     * Ligne ajoutee a la fin de la JTable\n     * @return TableStockage\n     */\n    public TableStockage ajouterLigne() {\n        if (nbColonnes > 0) {\n            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)\n            this.nbLignes++;\n            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n            /* on recopie les noms des colonnes */\n            for (int j = 0; j < nbColonnes; j++) {\n                tableS.setColumnName(j, ts.getColumnName(j));\n            }\n            /* on recopie les valeurs dans les colonnes */\n            for (int i = 0; i < nbLignes - 2; i++) {\n                for (int j = 0; j < nbColonnes; j++) {\n                    tableS.setValueAt(ts.getValueAt(i, j), i, j);\n                }\n            }\n            for (int j = 0; j < nbColonnes; j++) {\n                if (ts.getColumnClass(j).equals(String.class)) {\n                    // la derniere ligne sera a null\n                    tableS.setValueAt(\"\", nbLignes - 2, j);\n                } else if (ts.getColumnClass(j).equals(Double.class)) {\n                    tableS.setValueAt(new Double(\"0\"), nbLignes - 2, j);\n                } else\n                    // sauf si de la classe Boolean\n                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);\n            }\n            return tableS;\n        } else {\n            // pas de colonne pour construire une ligne\n            JOptionPane.showMessageDialog(null, \"PAS DE COLONNE\", \"ERREUR\", JOptionPane.ERROR_MESSAGE);\n            return ts;\n        }\n    }\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine\n     * avec la colonne selectionnee en moins\n     * colonne d'indice donne en parametre supprimee\n     * @param indice\n     * @return TableStockage\n     */\n    public TableStockage supprimerColonne(int indice) {\n        this.nbColonnes--;\n        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n        /* on recopie les noms des colonnes, jusque celui a supprimer */\n        for (int j = 0; j < indice; j++) {\n            tableS.setColumnName(j, ts.getColumnName(j));\n        }\n        /* on recopie les colonnes, sauf celle a supprimer */\n        for (int i = 0; i < nbLignes - 1; i++) {\n            for (int j = 0; j < indice; j++) {\n                tableS.setValueAt(ts.getValueAt(i, j), i, j);\n            }\n        }\n        /* on recopie toutes les valeurs apres la colonne supprimee */\n        if (indice != nbColonnes) {\n            // la colonne supprimee n'est pas la derniere\n            for (int j = indice; j < nbColonnes; j++) {\n                tableS.setColumnName(j, ts.getColumnName(j + 1));\n            }\n            for (int i = 0; i < nbLignes - 1; i++) {\n                for (int j = indice; j < nbColonnes; j++) {\n                    tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);\n                }\n            }\n        }\n        return tableS;\n    }\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine,\n     * avec la ligne selectionnee en moins.\n     * ligne d'indice donne en parametre supprimee\n     * @param indice\n     * @return TableStockage\n     */\n    public TableStockage supprimerLigne(int indice) {\n        this.nbLignes--;\n        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n        /* on recopie les noms des colonnes */\n        for (int j = 0; j < nbColonnes; j++) {\n            tableS.setColumnName(j, ts.getColumnName(j));\n        }\n        /* on recopie les valeurs des colonnes */\n        for (int i = 0; i < indice; i++) {\n            for (int j = 0; j < nbColonnes; j++) {\n                tableS.setValueAt(ts.getValueAt(i, j), i, j);\n            }\n        }\n        if (indice != nbLignes - 1) {\n            // la ligne a supprimer n'est pas la derniere\n            for (int i = indice + 1; i < nbLignes; i++) {\n                for (int j = 0; j < nbColonnes; j++) {\n                    tableS.setValueAt(ts.getValueAt(i, j), i - 1, j);\n                }\n            }\n        }\n        return tableS;\n    }\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine,\n     * avec la colonne d'indice donne en parametre separee.\n     * @param indice\n     * @return TableStockage\n     */\n    public TableStockage separerColonne(int indice) {\n        if (ts.getColumnClass(indice).equals(String.class)) {\n            // on ne peut separer que des valeurs de type String\n            int k = 0;\n            String val = (String) ts.getValueAt(0, indice);\n            String val1 = new String();\n            /* Test qui verifie si la colonne est separable (par rapport a \"l'espace\") */\n            while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {\n                // code possible de separation entre les mots\n                val1 = val1.concat(String.valueOf(val.charAt(k)));\n                k++;\n            }\n            if (k == (val.length() - 1)) {\n                // le code de separation n'est pas 160\n                val1 = new String();\n                k = 0;\n                while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {\n                    // si la separation entre les mots est l'espace\n                    val1 = val1.concat(String.valueOf(val.charAt(k)));\n                    k++;\n                }\n            }\n            if (k != (val.length() - 1)) {\n                // la colonne est separable car il y a un espace\n                this.nbColonnes++;\n                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n                val1 = new String();\n                k = 0;\n                /* On ecrit les noms des colonnes */\n                for (int j = 0; j < indice; j++) {\n                    tableS.setColumnName(j, ts.getColumnName(j));\n                }\n                for (int j = indice + 1; j < nbColonnes; j++) {\n                    tableS.setColumnName(j, ts.getColumnName(j - 1));\n                }\n                // on recupere le nom de la colonne a separer\n                String colonne = ts.getColumnName(indice);\n                String val1Colonne, val2Colonne;\n                String[] resNP = colonne.split(\" \", 2);\n                val1Colonne = resNP[0];\n                if (resNP.length > 1)\n                    val2Colonne = resNP[1];\n                else\n                    val2Colonne = \"\";\n                // 1ere partie du nom de la colonne\n                tableS.setColumnName(indice, val1Colonne);\n                // 2eme partie\n                tableS.setColumnName(indice + 1, val2Colonne);\n                /* on ecrit les donnees */\n                for (int i = 0; i < nbLignes - 1; i++) {\n                    for (int j = 0; j < indice; j++) {\n                        tableS.setValueAt(ts.getValueAt(i, j), i, j);\n                    }\n                    for (int j = indice + 2; j < nbColonnes; j++) {\n                        tableS.setValueAt(ts.getValueAt(i, j - 1), i, j);\n                    }\n                }\n                /* On remplit les 2 colonnes */\n                String val2 = null;\n                for (int i = 0; i < nbLignes - 1; i++) {\n                    val1 = new String();\n                    // on recupere la valeur en [i-1 , indice]\n                    val = (String) ts.getValueAt(i, indice);\n                    k = 0;\n                    if (val.equals(\"\")) {\n                        // peut etre du a une ligne ou colonne ajout\u00c3\u00a9e a la suite\n                        val1 = \"\";\n                        val2 = \"\";\n                    } else {\n                        while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {\n                            val1 = val1.concat(String.valueOf(val.charAt(k)));\n                            k++;\n                        }\n                        if (k == (val.length() - 1)) {\n                            val1 = new String();\n                            k = 0;\n                            while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {\n                                val1 = val1.concat(String.valueOf(val.charAt(k)));\n                                k++;\n                            }\n                        }\n                        val2 = val.substring(k + 1, val.length());\n                    }\n                    double int1 = 0, int2 = 0;\n                    try {\n                        int1 = Double.parseDouble(val1);\n                        tableS.setValueAt(int1, i, indice);\n                    } catch (NumberFormatException e) {\n                        tableS.setValueAt(val1, i, indice);\n                    }\n                    try {\n                        int2 = Double.parseDouble(val2);\n                        tableS.setValueAt(int2, i, indice + 1);\n                    } catch (NumberFormatException e) {\n                        tableS.setValueAt(val2, i, indice + 1);\n                    }\n                }\n                return tableS;\n            } else {\n                JOptionPane.showMessageDialog(null, \"PAS SEPARABLE\", \"ERREUR\", JOptionPane.ERROR_MESSAGE);\n                return ts;\n            }\n        } else {\n            JOptionPane.showMessageDialog(null, \"non separable: PAS DE TYPE STRING\", \"ERREUR\", JOptionPane.ERROR_MESSAGE);\n            return ts;\n        }\n    }\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine,\n     * avec la colonne d'indice donne en parametre fusionnee avec la colonne voisine de droite.\n     * @param indice\n     * @return TableStockage\n     */\n    public TableStockage fusionnerColonnes(int indice) {\n        if (nbColonnes > 1) {\n            // on ne peut fusionner des objets de type Boolean\n            if ((!ts.getColumnClass(indice).equals(Boolean.class)) && (!ts.getColumnClass(indice + 1).equals(Boolean.class))) {\n                this.nbColonnes--;\n                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n                /* On ecrit les noms des colonnes */\n                for (int j = 0; j < indice; j++) {\n                    tableS.setColumnName(j, ts.getColumnName(j));\n                }\n                // on fusionne les 2 noms des colonnes\n                String c1 = ts.getColumnName(indice);\n                String c2 = ts.getColumnName(indice + 1);\n                for (int j = indice + 1; j < nbColonnes; j++) {\n                    tableS.setColumnName(j, ts.getColumnName(j + 1));\n                }\n                tableS.setColumnName(indice, c1.concat(\" \" + c2));\n                for (int i = 0; i < nbLignes - 1; i++) {\n                    for (int j = 0; j < indice; j++) {\n                        tableS.setValueAt(ts.getValueAt(i, j), i, j);\n                    }\n                    // on fusionne les donnees des 2 colonnes\n                    Object d1 = ts.getValueAt(i, indice);\n                    Object d2 = ts.getValueAt(i, indice + 1);\n                    // on transforme l'objet en String (si Integer ...)\n                    String s1 = d1.toString();\n                    String s2 = d2.toString();\n                    // separees par un espace\n                    tableS.setValueAt(s1.concat(\" \" + s2), i, indice);\n                    for (int j = indice + 1; j < nbColonnes; j++) {\n                        tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);\n                    }\n                }\n                return tableS;\n            } else {\n                JOptionPane.showMessageDialog(null, \"PAS DE TYPE STRING\", \"ERREUR\", JOptionPane.ERROR_MESSAGE);\n                return ts;\n            }\n        } else {\n            JOptionPane.showMessageDialog(null, \"UNE SEULE COLONNE\", \"ERREUR\", JOptionPane.ERROR_MESSAGE);\n            return ts;\n        }\n    }\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine,\n     * avec une nouvelle colonne de nom \"E-Mail\"\n     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.\n     * @return TableStockage\n     */\n    public TableStockage colonneMail() {\n        this.nbColonnes++;\n        ModifTableStockage mt = new ModifTableStockage(ts);\n        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n        tableS = mt.ajouterColonne(\"Envoyer E-Mail a:\", Boolean.class);\n        for (int i = 0; i < nbLignes - 1; i++) {\n            // on ajoute un checkbox (par defaut)\n            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);\n        }\n        return tableS;\n    }\n\n    /**\n     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,\n     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;\n     * @return TableStockage\n     */\n    public TableStockage selectMail() {\n        int j = 0;\n        Boolean bool;\n        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(\"Envoyer E-Mail a:\"))) {\n            // renverra la position de la colonne E-Mail si elle existe\n            j++;\n        }\n        if (j != this.nbColonnes) {\n            // la colonne E-Mail (de type Booleen) existe bien\n            int newNbLignes = 0;\n            for (int i = 0; i < nbLignes - 1; i++) {\n                bool = (Boolean) ts.getValueAt(i, j);\n                if (bool) {\n                    newNbLignes++;\n                }\n            }\n            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);\n            int k = 0;\n            for (int ind = 0; ind < nbColonnes; ind++) {\n                tableS.setColumnName(ind, ts.getColumnName(ind));\n            }\n            for (int row = 0; row < nbLignes - 1; row++) {\n                bool = (Boolean) ts.getValueAt(row, j);\n                if (bool) {\n                    for (int column = 0; column < nbColonnes; column++) {\n                        tableS.setValueAt(ts.getValueAt(row, column), k, column);\n                        bool = false;\n                    }\n                    k++;\n                }\n            }\n            return tableS;\n        } else {\n            JOptionPane.showMessageDialog(null, \"Le mail sera envoye a toute la liste\", \"Information\", JOptionPane.INFORMATION_MESSAGE);\n            return ts;\n        }\n    }\n}\n",
    "test_prompt": "// ModifTableStockage_6Test.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModifTableStockage}.\n* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.\n*/\nclass ModifTableStockage_6Test {"
}
,{
    "id": "chatcmpl-A5Tflh6P4ksPv7kMYN0k8X6ta53QB",
    "object": "chat.completion",
    "created": 1725869065,
    "model": "gpt-3.5-turbo-0125",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\nclass ModifTableStockage_7Test {\n\n    @Test\n    void testSelectMail_AllSelected() {\n        // Test case where all emails are selected\n        ModifTableStockage modifTableStockage = new ModifTableStockage(new TableStockage(3, 3));\n        TableStockage tableStockage = new TableStockage(3, 3);\n        tableStockage.setValueAt(true, 0, 2);\n        tableStockage.setValueAt(true, 1, 2);\n        tableStockage.setValueAt(true, 2, 2);\n        modifTableStockage.selectMail();\n        assertEquals(tableStockage, modifTableStockage.selectMail());\n    }\n\n    @Test\n    void testSelectMail_NoneSelected() {\n        // Test case where no email is selected\n        ModifTableStockage modifTableStockage = new ModifTableStockage(new TableStockage(3, 3));\n        TableStockage tableStockage = new TableStockage(1, 3);\n        modifTableStockage.selectMail();\n        assertEquals(tableStockage, modifTableStockage.selectMail());\n    }\n\n    @Test\n    void testSelectMail_SomeSelected() {\n        // Test case where some emails are selected\n        ModifTableStockage modifTableStockage = new ModifTableStockage(new TableStockage(3, 3));\n        TableStockage tableStockage = new TableStockage(2, 3);\n        tableStockage.setValueAt(true, 0, 2);\n        tableStockage.setValueAt(true, 1, 2);\n        modifTableStockage.selectMail();\n        assertEquals(tableStockage, modifTableStockage.selectMail());\n    }\n\n    @Test\n    void testSelectMail_NoEmailColumn() {\n        // Test case where there is no email column\n        ModifTableStockage modifTableStockage = new ModifTableStockage(new TableStockage(3, 3));\n        TableStockage tableStockage = new TableStockage(3, 3);\n        modifTableStockage.selectMail();\n        assertEquals(tableStockage, modifTableStockage.selectMail());\n    }\n\n    @Test\n    void testSelectMail_ShowInformationMessage() {\n        // Test case where an information message is shown\n        ModifTableStockage modifTableStockage = new ModifTableStockage(new TableStockage(3, 3));\n        TableStockage tableStockage = new TableStockage(3, 3);\n        JOptionPane.showMessageDialog(null, \"Le mail sera envoye a toute la liste\", \"Information\", JOptionPane.INFORMATION_MESSAGE);\n        modifTableStockage.selectMail();\n        assertEquals(tableStockage, modifTableStockage.selectMail());\n    }\n\n    @Test\n    void testSelectMail_EmptyTable() {\n        // Test case where the table is empty\n        ModifTableStockage modifTableStockage = new ModifTableStockage(new TableStockage(0, 0));\n        TableStockage tableStockage = new TableStockage(0, 0);\n        modifTableStockage.selectMail();\n        assertEquals(tableStockage, modifTableStockage.selectMail());\n    }\n\n    @Test\n    void testSelectMail_OneRow() {\n        // Test case where there is only one row in the table\n        ModifTableStockage modifTableStockage = new ModifTableStockage(new TableStockage(1, 3));\n        TableStockage tableStockage = new TableStockage(1, 3);\n        tableStockage.setValueAt(true, 0, 2);\n        modifTableStockage.selectMail();\n        assertEquals(tableStockage, modifTableStockage.selectMail());\n    }\n\n    @Test\n    void testSelectMail_OneColumn() {\n        // Test case where there is only one column in the table\n        ModifTableStockage modifTableStockage = new ModifTableStockage(new TableStockage(3, 1));\n        TableStockage tableStockage = new TableStockage(3, 1);\n        modifTableStockage.selectMail();\n        assertEquals(tableStockage, modifTableStockage.selectMail());\n    }\n\n    @Test\n    void testSelectMail_NullTable() {\n        // Test case where the table is null\n        ModifTableStockage modifTableStockage = new ModifTableStockage(null);\n        assertNull(modifTableStockage.selectMail());\n    }\n\n    @Test\n    void testSelectMail_ColumnNameMismatch() {\n        // Test case where the email column name does not match\n        ModifTableStockage modifTableStockage = new ModifTableStockage(new TableStockage(3, 3));\n        TableStockage tableStockage = new TableStockage(3, 3);\n        tableStockage.setColumnName(0, \"Name\");\n        tableStockage.setColumnName(1, \"Age\");\n        tableStockage.setColumnName(2, \"Email\");\n        modifTableStockage.selectMail();\n        assertEquals(tableStockage, modifTableStockage.selectMail());\n    }\n}\n```\n```",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 4090,
        "completion_tokens": 1080,
        "total_tokens": 5170
    },
    "system_fingerprint": null,
    "time_taken": 12.628764390945435,
    "prompt_id": "/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_7Test.java",
    "original_code": "// ModifTableStockage.java\n/**\n * Classe ModifTableStockage\n */\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\n\n/**\n * Recreee une table modifi&eacute;e par l'utilisateur, a partir d'une TableStockage donnee\n * @author Rol Elsa\n */\npublic class ModifTableStockage {\n\n    // dimension de la table\n    private int nbColonnes = 0;\n\n    // avec la ligne de description (les noms des colonnes)\n    private int nbLignes = 0;\n\n    // la table d'origine (String[] nomColonnes ; Object[][] matrice;)\n    private TableStockage ts;\n\n    /**\n     * Constructeur : recuperation de la TableStockage et initialisation\n     *\n     * @param ts\n     */\n    public ModifTableStockage(TableStockage ts) {\n        this.nbColonnes = ts.getColumnCount();\n        this.nbLignes = ts.getRowCount() + 1;\n        this.ts = ts;\n    }\n\n    /**\n     * G&eacute;n&egrave;re en sortie une TableStockage &agrave; partir de la table d'origine, mais avec une colonne en plus.\n     * Nouvelle colonne de nom \"nomNouvelleColonne\" et de type \"type\"\n     * Colonne Ajoutee a la fin de la JTable\n     * @param nomNouvelleColonne\n     * @param type\n     * @return TableStockage\n     */\n    public TableStockage ajouterColonne(String nomNouvelleColonne, Class<?> type) {\n        this.nbColonnes++;\n        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n        /* on recopie les noms des colonnes */\n        for (int j = 0; j < nbColonnes - 1; j++) {\n            tableS.setColumnName(j, ts.getColumnName(j));\n        }\n        // la derniere colonne prend le nom donne en parametre\n        tableS.setColumnName(nbColonnes - 1, nomNouvelleColonne);\n        /* on recopie les valeurs dans les colonnes */\n        for (int i = 0; i < nbLignes - 1; i++) {\n            for (int j = 0; j < nbColonnes - 1; j++) {\n                tableS.setValueAt(ts.getValueAt(i, j), i, j);\n            }\n            // la derniere colonne sera null\n            tableS.setColumnClass(nbColonnes - 1, type);\n        }\n        return tableS;\n    }\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.\n     * Ligne ajoutee a la fin de la JTable\n     * @return TableStockage\n     */\n    public TableStockage ajouterLigne() {\n        if (nbColonnes > 0) {\n            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)\n            this.nbLignes++;\n            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n            /* on recopie les noms des colonnes */\n            for (int j = 0; j < nbColonnes; j++) {\n                tableS.setColumnName(j, ts.getColumnName(j));\n            }\n            /* on recopie les valeurs dans les colonnes */\n            for (int i = 0; i < nbLignes - 2; i++) {\n                for (int j = 0; j < nbColonnes; j++) {\n                    tableS.setValueAt(ts.getValueAt(i, j), i, j);\n                }\n            }\n            for (int j = 0; j < nbColonnes; j++) {\n                if (ts.getColumnClass(j).equals(String.class)) {\n                    // la derniere ligne sera a null\n                    tableS.setValueAt(\"\", nbLignes - 2, j);\n                } else if (ts.getColumnClass(j).equals(Double.class)) {\n                    tableS.setValueAt(new Double(\"0\"), nbLignes - 2, j);\n                } else\n                    // sauf si de la classe Boolean\n                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);\n            }\n            return tableS;\n        } else {\n            // pas de colonne pour construire une ligne\n            JOptionPane.showMessageDialog(null, \"PAS DE COLONNE\", \"ERREUR\", JOptionPane.ERROR_MESSAGE);\n            return ts;\n        }\n    }\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine\n     * avec la colonne selectionnee en moins\n     * colonne d'indice donne en parametre supprimee\n     * @param indice\n     * @return TableStockage\n     */\n    public TableStockage supprimerColonne(int indice) {\n        this.nbColonnes--;\n        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n        /* on recopie les noms des colonnes, jusque celui a supprimer */\n        for (int j = 0; j < indice; j++) {\n            tableS.setColumnName(j, ts.getColumnName(j));\n        }\n        /* on recopie les colonnes, sauf celle a supprimer */\n        for (int i = 0; i < nbLignes - 1; i++) {\n            for (int j = 0; j < indice; j++) {\n                tableS.setValueAt(ts.getValueAt(i, j), i, j);\n            }\n        }\n        /* on recopie toutes les valeurs apres la colonne supprimee */\n        if (indice != nbColonnes) {\n            // la colonne supprimee n'est pas la derniere\n            for (int j = indice; j < nbColonnes; j++) {\n                tableS.setColumnName(j, ts.getColumnName(j + 1));\n            }\n            for (int i = 0; i < nbLignes - 1; i++) {\n                for (int j = indice; j < nbColonnes; j++) {\n                    tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);\n                }\n            }\n        }\n        return tableS;\n    }\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine,\n     * avec la ligne selectionnee en moins.\n     * ligne d'indice donne en parametre supprimee\n     * @param indice\n     * @return TableStockage\n     */\n    public TableStockage supprimerLigne(int indice) {\n        this.nbLignes--;\n        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n        /* on recopie les noms des colonnes */\n        for (int j = 0; j < nbColonnes; j++) {\n            tableS.setColumnName(j, ts.getColumnName(j));\n        }\n        /* on recopie les valeurs des colonnes */\n        for (int i = 0; i < indice; i++) {\n            for (int j = 0; j < nbColonnes; j++) {\n                tableS.setValueAt(ts.getValueAt(i, j), i, j);\n            }\n        }\n        if (indice != nbLignes - 1) {\n            // la ligne a supprimer n'est pas la derniere\n            for (int i = indice + 1; i < nbLignes; i++) {\n                for (int j = 0; j < nbColonnes; j++) {\n                    tableS.setValueAt(ts.getValueAt(i, j), i - 1, j);\n                }\n            }\n        }\n        return tableS;\n    }\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine,\n     * avec la colonne d'indice donne en parametre separee.\n     * @param indice\n     * @return TableStockage\n     */\n    public TableStockage separerColonne(int indice) {\n        if (ts.getColumnClass(indice).equals(String.class)) {\n            // on ne peut separer que des valeurs de type String\n            int k = 0;\n            String val = (String) ts.getValueAt(0, indice);\n            String val1 = new String();\n            /* Test qui verifie si la colonne est separable (par rapport a \"l'espace\") */\n            while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {\n                // code possible de separation entre les mots\n                val1 = val1.concat(String.valueOf(val.charAt(k)));\n                k++;\n            }\n            if (k == (val.length() - 1)) {\n                // le code de separation n'est pas 160\n                val1 = new String();\n                k = 0;\n                while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {\n                    // si la separation entre les mots est l'espace\n                    val1 = val1.concat(String.valueOf(val.charAt(k)));\n                    k++;\n                }\n            }\n            if (k != (val.length() - 1)) {\n                // la colonne est separable car il y a un espace\n                this.nbColonnes++;\n                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n                val1 = new String();\n                k = 0;\n                /* On ecrit les noms des colonnes */\n                for (int j = 0; j < indice; j++) {\n                    tableS.setColumnName(j, ts.getColumnName(j));\n                }\n                for (int j = indice + 1; j < nbColonnes; j++) {\n                    tableS.setColumnName(j, ts.getColumnName(j - 1));\n                }\n                // on recupere le nom de la colonne a separer\n                String colonne = ts.getColumnName(indice);\n                String val1Colonne, val2Colonne;\n                String[] resNP = colonne.split(\" \", 2);\n                val1Colonne = resNP[0];\n                if (resNP.length > 1)\n                    val2Colonne = resNP[1];\n                else\n                    val2Colonne = \"\";\n                // 1ere partie du nom de la colonne\n                tableS.setColumnName(indice, val1Colonne);\n                // 2eme partie\n                tableS.setColumnName(indice + 1, val2Colonne);\n                /* on ecrit les donnees */\n                for (int i = 0; i < nbLignes - 1; i++) {\n                    for (int j = 0; j < indice; j++) {\n                        tableS.setValueAt(ts.getValueAt(i, j), i, j);\n                    }\n                    for (int j = indice + 2; j < nbColonnes; j++) {\n                        tableS.setValueAt(ts.getValueAt(i, j - 1), i, j);\n                    }\n                }\n                /* On remplit les 2 colonnes */\n                String val2 = null;\n                for (int i = 0; i < nbLignes - 1; i++) {\n                    val1 = new String();\n                    // on recupere la valeur en [i-1 , indice]\n                    val = (String) ts.getValueAt(i, indice);\n                    k = 0;\n                    if (val.equals(\"\")) {\n                        // peut etre du a une ligne ou colonne ajout\u00c3\u00a9e a la suite\n                        val1 = \"\";\n                        val2 = \"\";\n                    } else {\n                        while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {\n                            val1 = val1.concat(String.valueOf(val.charAt(k)));\n                            k++;\n                        }\n                        if (k == (val.length() - 1)) {\n                            val1 = new String();\n                            k = 0;\n                            while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {\n                                val1 = val1.concat(String.valueOf(val.charAt(k)));\n                                k++;\n                            }\n                        }\n                        val2 = val.substring(k + 1, val.length());\n                    }\n                    double int1 = 0, int2 = 0;\n                    try {\n                        int1 = Double.parseDouble(val1);\n                        tableS.setValueAt(int1, i, indice);\n                    } catch (NumberFormatException e) {\n                        tableS.setValueAt(val1, i, indice);\n                    }\n                    try {\n                        int2 = Double.parseDouble(val2);\n                        tableS.setValueAt(int2, i, indice + 1);\n                    } catch (NumberFormatException e) {\n                        tableS.setValueAt(val2, i, indice + 1);\n                    }\n                }\n                return tableS;\n            } else {\n                JOptionPane.showMessageDialog(null, \"PAS SEPARABLE\", \"ERREUR\", JOptionPane.ERROR_MESSAGE);\n                return ts;\n            }\n        } else {\n            JOptionPane.showMessageDialog(null, \"non separable: PAS DE TYPE STRING\", \"ERREUR\", JOptionPane.ERROR_MESSAGE);\n            return ts;\n        }\n    }\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine,\n     * avec la colonne d'indice donne en parametre fusionnee avec la colonne voisine de droite.\n     * @param indice\n     * @return TableStockage\n     */\n    public TableStockage fusionnerColonnes(int indice) {\n        if (nbColonnes > 1) {\n            // on ne peut fusionner des objets de type Boolean\n            if ((!ts.getColumnClass(indice).equals(Boolean.class)) && (!ts.getColumnClass(indice + 1).equals(Boolean.class))) {\n                this.nbColonnes--;\n                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n                /* On ecrit les noms des colonnes */\n                for (int j = 0; j < indice; j++) {\n                    tableS.setColumnName(j, ts.getColumnName(j));\n                }\n                // on fusionne les 2 noms des colonnes\n                String c1 = ts.getColumnName(indice);\n                String c2 = ts.getColumnName(indice + 1);\n                for (int j = indice + 1; j < nbColonnes; j++) {\n                    tableS.setColumnName(j, ts.getColumnName(j + 1));\n                }\n                tableS.setColumnName(indice, c1.concat(\" \" + c2));\n                for (int i = 0; i < nbLignes - 1; i++) {\n                    for (int j = 0; j < indice; j++) {\n                        tableS.setValueAt(ts.getValueAt(i, j), i, j);\n                    }\n                    // on fusionne les donnees des 2 colonnes\n                    Object d1 = ts.getValueAt(i, indice);\n                    Object d2 = ts.getValueAt(i, indice + 1);\n                    // on transforme l'objet en String (si Integer ...)\n                    String s1 = d1.toString();\n                    String s2 = d2.toString();\n                    // separees par un espace\n                    tableS.setValueAt(s1.concat(\" \" + s2), i, indice);\n                    for (int j = indice + 1; j < nbColonnes; j++) {\n                        tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);\n                    }\n                }\n                return tableS;\n            } else {\n                JOptionPane.showMessageDialog(null, \"PAS DE TYPE STRING\", \"ERREUR\", JOptionPane.ERROR_MESSAGE);\n                return ts;\n            }\n        } else {\n            JOptionPane.showMessageDialog(null, \"UNE SEULE COLONNE\", \"ERREUR\", JOptionPane.ERROR_MESSAGE);\n            return ts;\n        }\n    }\n\n    /**\n     * Genere en sortie une TableStockage, a partir de la table d'origine,\n     * avec une nouvelle colonne de nom \"E-Mail\"\n     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.\n     * @return TableStockage\n     */\n    public TableStockage colonneMail() {\n        this.nbColonnes++;\n        ModifTableStockage mt = new ModifTableStockage(ts);\n        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);\n        tableS = mt.ajouterColonne(\"Envoyer E-Mail a:\", Boolean.class);\n        for (int i = 0; i < nbLignes - 1; i++) {\n            // on ajoute un checkbox (par defaut)\n            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);\n        }\n        return tableS;\n    }\n\n    /**\n     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,\n     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;\n     * @return TableStockage\n     */\n    public TableStockage selectMail() {\n        int j = 0;\n        Boolean bool;\n        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(\"Envoyer E-Mail a:\"))) {\n            // renverra la position de la colonne E-Mail si elle existe\n            j++;\n        }\n        if (j != this.nbColonnes) {\n            // la colonne E-Mail (de type Booleen) existe bien\n            int newNbLignes = 0;\n            for (int i = 0; i < nbLignes - 1; i++) {\n                bool = (Boolean) ts.getValueAt(i, j);\n                if (bool) {\n                    newNbLignes++;\n                }\n            }\n            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);\n            int k = 0;\n            for (int ind = 0; ind < nbColonnes; ind++) {\n                tableS.setColumnName(ind, ts.getColumnName(ind));\n            }\n            for (int row = 0; row < nbLignes - 1; row++) {\n                bool = (Boolean) ts.getValueAt(row, j);\n                if (bool) {\n                    for (int column = 0; column < nbColonnes; column++) {\n                        tableS.setValueAt(ts.getValueAt(row, column), k, column);\n                        bool = false;\n                    }\n                    k++;\n                }\n            }\n            return tableS;\n        } else {\n            JOptionPane.showMessageDialog(null, \"Le mail sera envoye a toute la liste\", \"Information\", JOptionPane.INFORMATION_MESSAGE);\n            return ts;\n        }\n    }\n}\n",
    "test_prompt": "// ModifTableStockage_7Test.java\npackage fr.unice.gfarce.interGraph;\n\nimport javax.swing.JOptionPane;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ModifTableStockage}.\n* It contains ten unit test cases for the {@link ModifTableStockage#selectMail()} method.\n*/\nclass ModifTableStockage_7Test {"
}
,{
    "id": "chatcmpl-A5Tgo266SsZlCBndEBjgLCjHYzfM6",
    "object": "chat.completion",
    "created": 1725869130,
    "model": "gpt-3.5-turbo-0125",
    "choices": [
        {
            "index": 0,
            "message": {
                "role": "assistant",
                "content": "```java\npackage fr.unice.gfarce.main;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Controler_5Test {\n\n    @Test\n    void testFindAllFormation() {\n        Controler controler = new Controler();\n        Formation[] formations = controler.findAllFormation();\n        assertNotNull(formations);\n    }\n\n    @Test\n    void testFindAllFormationNotEmpty() {\n        Controler controler = new Controler();\n        Formation[] formations = controler.findAllFormation();\n        assertTrue(formations.length > 0);\n    }\n\n    @Test\n    void testFindAllFormationNotNull() {\n        Controler controler = new Controler();\n        Formation[] formations = controler.findAllFormation();\n        for (Formation formation : formations) {\n            assertNotNull(formation);\n        }\n    }\n\n    @Test\n    void testFindAllFormationTitleNotNull() {\n        Controler controler = new Controler();\n        Formation[] formations = controler.findAllFormation();\n        for (Formation formation : formations) {\n            assertNotNull(formation.getTitre());\n        }\n    }\n\n    @Test\n    void testFindAllFormationDateLimiteNotNull() {\n        Controler controler = new Controler();\n        Formation[] formations = controler.findAllFormation();\n        for (Formation formation : formations) {\n            assertNotNull(formation.getDate_limite_candidature());\n        }\n    }\n\n    @Test\n    void testFindAllFormationMontantNotNull() {\n        Controler controler = new Controler();\n        Formation[] formations = controler.findAllFormation();\n        for (Formation formation : formations) {\n            assertNotNull(formation.getMontant_inscription());\n        }\n    }\n\n    @Test\n    void testFindAllFormationResponsableNotNull() {\n        Controler controler = new Controler();\n        Formation[] formations = controler.findAllFormation();\n        for (Formation formation : formations) {\n            assertNotNull(formation.getResponsable());\n        }\n    }\n\n    @Test\n    void testFindAllFormationCandidatsNotNull() {\n        Controler controler = new Controler();\n        Formation[] formations = controler.findAllFormation();\n        for (Formation formation : formations) {\n            assertNotNull(formation.getCandidat());\n        }\n    }\n\n    @Test\n    void testFindAllFormationCandidatsNotEmpty() {\n        Controler controler = new Controler();\n        Formation[] formations = controler.findAllFormation();\n        for (Formation formation : formations) {\n            assertTrue(formation.getCandidat().size() > 0);\n        }\n    }\n\n    @Test\n    void testFindAllFormationCandidatsType() {\n        Controler controler = new Controler();\n        Formation[] formations = controler.findAllFormation();\n        for (Formation formation : formations) {\n            for (Candidat candidat : formation.getCandidat()) {\n                assertEquals(Identite.TypeIdentite.CANDIDAT, candidat.getType());\n            }\n        }\n    }\n}\n```\n```",
                "refusal": null
            },
            "logprobs": null,
            "finish_reason": "stop"
        }
    ],
    "usage": {
        "prompt_tokens": 2838,
        "completion_tokens": 604,
        "total_tokens": 3442
    },
    "system_fingerprint": null,
    "time_taken": 7.615219831466675,
    "prompt_id": "/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler_5Test.java",
    "original_code": "// Controler.java\npackage fr.unice.gfarce.main;\n\nimport java.io.IOException;\nimport java.text.ParseException;\nimport java.util.Calendar;\nimport java.util.Collection;\nimport jxl.write.WriteException;\nimport jxl.write.biff.RowsExceededException;\nimport fr.unice.gfarce.dao.DaoFactory;\nimport fr.unice.gfarce.dao.DaoFactory.TypeFabrique;\nimport fr.unice.gfarce.dao.DaoFactoryException;\nimport fr.unice.gfarce.dao.FormationDao;\nimport fr.unice.gfarce.dao.IdentiteDao;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.Identite.TypeIdentite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.interGraph.FenetreChoix;\nimport fr.unice.gfarce.xls.WritingXLS;\n\n/**\n * Fait la liaison entre l'interface graphique et le moteur de l'application\n * Rend comprehensible les requetes de l'interface graphique pour les bases de\n * donnees\n * @author scarankle\n */\npublic class Controler {\n\n    DaoFactory df;\n\n    IdentiteDao idao;\n\n    FormationDao fdao;\n\n    Candidat[] tabcand;\n\n    String formationName;\n\n    TypeFabrique tf;\n\n    /**\n     * Constructeur initialisant les dao et le type de la base\n     * @param tf type de la base\n     * @throws DaoFactoryException\n     */\n    public Controler() throws DaoFactoryException {\n        FenetreChoix chFen = new FenetreChoix(this);\n        chFen.setVisible(true);\n    }\n\n    public void setTypeDataBase(String type) throws DaoFactoryException {\n        if (type.equals(\"db4o\")) {\n            bdChoice(TypeFabrique.DB4O);\n        }\n        if (type.equals(\"oracle\")) {\n            bdChoice(TypeFabrique.ORACLE);\n        }\n    }\n\n    public void launchDatabase() throws IOException {\n        idao = df.getIdentiteDao();\n        fdao = df.getFormationDao();\n        tabcand = null;\n        formationName = \"\";\n    }\n\n    /**\n     */\n    private void bdChoice(TypeFabrique tfab) throws DaoFactoryException {\n        DaoFactory.setTypeDao(tfab);\n        df = DaoFactory.getDaoFactory();\n    }\n\n    /**\n     * Cree un candidat ou un responsable de formation et l'insert dans la base\n     * @param nom\n     * @param prenom\n     * @param sex\n     * @param email\n     * @param type\n     * @param date_naissance\n     * @param diplome\n     * @param photo\n     * @param nationalite\n     * @param telephone\n     * @param bourse\n     * @param acceptation\n     * @param formation\n     * @throws IOException\n     * @return le candidat ou le responsable de formation\n     */\n    public Identite createIdentite(String nom, String prenom, String sex, String email, TypeIdentite type, String date_naissance, String diplome, String photo, String nationalite, String telephone, int bourse, int acceptation, String formation) throws IOException {\n        Identite iden = null;\n        switch(type) {\n            case CANDIDAT:\n                Calendar c = creerCalendar(date_naissance);\n                String[] forma = formation.split(\"\\\\.\");\n                Formation[] form = fdao.findFormation(forma[0], creerCalendar(forma[1]));\n                iden = new Candidat(nom, prenom, sex, email, type, c, diplome, photo, nationalite, bourse, acceptation, form[0]);\n                idao.insert(iden, forma[0], creerCalendar(forma[1]));\n                break;\n            case FORMATEUR:\n                iden = new RespFormation(nom, prenom, sex, email, type, telephone);\n                idao.insert(iden, null, null);\n                break;\n            default:\n                System.err.println(\"gros probleme\");\n        }\n        return iden;\n    }\n\n    /**\n     * cree un calendar a partir d'une string date de la forme dd/mm/yyyy\n     * @param date\n     * @return\n     */\n    private Calendar creerCalendar(String date) {\n        Calendar c = Calendar.getInstance();\n        String[] d = date.split(\"/\");\n        c.set(Integer.parseInt(d[2]), Integer.parseInt(d[1]), Integer.parseInt(d[0]));\n        return c;\n    }\n\n    /**\n     * cree une formation et l'enregistre dans la base\n     * @param titre\n     * @param date_limite\n     * @param montant\n     * @param responsable\n     * @return\n     */\n    public Formation createFormation(String titre, String date_limite, int montant, String responsable) {\n        Calendar c = creerCalendar(date_limite);\n        String[] respF = responsable.split(\" \");\n        RespFormation rf = idao.findRespForm(respF[0], respF[1], null, null)[0];\n        Formation f = new Formation(titre, c, montant, rf);\n        fdao.insert(f, respF[0], respF[1]);\n        return f;\n    }\n\n    /**\n     * Cherche des candidats dans la base\n     * @param nom\n     * @param prenom\n     * @return un tableau contenant les candidats\n     */\n    public Candidat[] findCandidat(String nom, String prenom) {\n        return idao.findCandidat(nom, prenom, null, null);\n    }\n\n    /**\n     * Cherche des responsables de formation dans la base\n     * @param nom\n     * @param prenom\n     * @return un tableau contenant les responsables de formation\n     */\n    public RespFormation[] findRespForm(String nom, String prenom) {\n        return idao.findRespForm(nom, prenom, null, null);\n    }\n\n    /**\n     * Cherche des formations dans la base\n     * @param name\n     * @param date\n     * @return un tableau contenant les formations\n     */\n    public Formation[] findFormation(String name, String date) {\n        Calendar c = null;\n        if (date != null) {\n            c = creerCalendar(date);\n        }\n        return fdao.findFormation(name, c);\n    }\n\n    /**\n     * Retourne toutes les formations\n     * @return un tableau contenant toutes les formations\n     */\n    public Formation[] findAllFormation() {\n        return fdao.findFormation(null, null);\n    }\n\n    /**\n     * Retourne tous les Candidats d'une formation donnee\n     * @param formation\n     * @param date\n     * @return tableau contenant tous les etudiants d'une formation donnee\n     */\n    public Candidat[] findCandidatInFormation(String formation, String date) {\n        Calendar c = creerCalendar(date);\n        Formation[] form = fdao.findFormation(formation, c);\n        Collection<Candidat> cand = form[0].getCandidat();\n        this.tabcand = new Candidat[cand.size()];\n        this.tabcand = cand.toArray(this.tabcand);\n        return tabcand;\n    }\n\n    /**\n     * Exporte sous forme de fichier excel les candidats d'une formation\n     * @throws RowsExceededException\n     * @throws WriteException\n     * @throws IOException\n     * @throws ParseException\n     */\n    public void exportExcel(String form) throws RowsExceededException, WriteException, IOException, ParseException {\n        if (form != null) {\n            String[] f = form.split(\"\\\\.\");\n            this.tabcand = findCandidatInFormation(f[0], f[1]);\n            if (this.tabcand == null) {\n                System.err.println(\"erreur tabcand null\");\n            } else {\n                WritingXLS w = new WritingXLS();\n                w.exportXLS(this.tabcand, formationName + \"gfarce\");\n            }\n        }\n    }\n\n    /**\n     * Fait un update d'un candidat\n     * @param nom\n     * @param prenom\n     * @param sex\n     * @param email\n     * @param date_naissance\n     * @param diplome\n     * @param photo\n     * @param nationalite\n     * @param bourse\n     * @param acceptation\n     * @param formation\n     * @throws Exception\n     */\n    public void updateCandidat(String nom, String prenom, String sex, String email, String date_naissance, String diplome, byte[] photo, String nationalite, int bourse, String acceptation, String formation) throws Exception {\n        Candidat[] cand = idao.findCandidat(nom, prenom, null, null);\n        Calendar c = creerCalendar(date_naissance);\n        cand[0].setSex(sex);\n        cand[0].setEmail(email);\n        cand[0].setDate_naissance(c);\n        cand[0].setBource(bourse);\n        cand[0].setNationalite(nationalite);\n        String[] forma = formation.split(\"\\\\.\");\n        Formation[] form = fdao.findFormation(forma[0], creerCalendar(forma[1]));\n        cand[0].setFormation(form[0]);\n        if (acceptation.equals(\"ok\")) {\n            cand[0].setAcceptation(1);\n        } else {\n            cand[0].setAcceptation(0);\n        }\n        idao.update(cand[0]);\n    }\n\n    /**\n     * Fait un update d'un responsable\n     * @param nom\n     * @param prenom\n     * @param sex\n     * @param email\n     * @param telephone\n     * @throws Exception\n     */\n    public void updateResponsable(String nom, String prenom, String sex, String email, String telephone) throws Exception {\n        RespFormation[] rf = idao.findRespForm(nom, prenom, null, null);\n        rf[0].setSex(sex);\n        rf[0].setTelephone(telephone);\n        rf[0].setEmail(email);\n        idao.update(rf[0]);\n    }\n\n    /**\n     * Fait un update d'une formation\n     * @param titre\n     * @param date_limite\n     * @param montant\n     * @param responsable\n     */\n    public void updateFormation(String titre, String date_limite, int montant, String responsable) {\n        Formation[] f = fdao.findFormation(titre, creerCalendar(date_limite));\n        f[0].setDate_limite_candidature(creerCalendar(date_limite));\n        f[0].setMontant_inscription(montant);\n        String[] resp = responsable.split(\" \");\n        RespFormation[] rf = idao.findRespForm(resp[0], resp[1], null, null);\n        f[0].setResponsable(rf[0]);\n        fdao.update(f[0]);\n    }\n\n    /**\n     * Enleve un candidat ou un responsable de formation de la base\n     * @param nom\n     * @param prenom\n     */\n    public void deleteIdentite(String nom, String prenom, TypeIdentite type) {\n        if (type == TypeIdentite.FORMATEUR) {\n            RespFormation ident = idao.findRespForm(nom, prenom, null, null)[0];\n            idao.delete(ident);\n        }\n        if (type == TypeIdentite.CANDIDAT) {\n            Candidat ident = idao.findCandidat(nom, prenom, null, null)[0];\n            idao.delete(ident);\n        }\n    }\n\n    /**\n     * Enleve une formation de la base\n     * @param nom\n     * @param date\n     */\n    public void deleteFormation(String nom, String date) {\n        Formation form = fdao.findFormation(nom, creerCalendar(date))[0];\n        fdao.delete(form);\n    }\n}\n",
    "test_prompt": "// Controler_5Test.java\npackage fr.unice.gfarce.main;\n\nimport java.io.IOException;\nimport java.text.ParseException;\nimport java.util.Calendar;\nimport java.util.Collection;\nimport jxl.write.WriteException;\nimport jxl.write.biff.RowsExceededException;\nimport fr.unice.gfarce.dao.DaoFactory;\nimport fr.unice.gfarce.dao.DaoFactory.TypeFabrique;\nimport fr.unice.gfarce.dao.DaoFactoryException;\nimport fr.unice.gfarce.dao.FormationDao;\nimport fr.unice.gfarce.dao.IdentiteDao;\nimport fr.unice.gfarce.identity.Candidat;\nimport fr.unice.gfarce.identity.Formation;\nimport fr.unice.gfarce.identity.Identite;\nimport fr.unice.gfarce.identity.Identite.TypeIdentite;\nimport fr.unice.gfarce.identity.RespFormation;\nimport fr.unice.gfarce.interGraph.FenetreChoix;\nimport fr.unice.gfarce.xls.WritingXLS;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Controler}.\n* It contains ten unit test cases for the {@link Controler#findAllFormation()} method.\n*/\nclass Controler_5Test {"
}
]