ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
chatcmpl-A5TbZI4F8HTENXYGfYUrzRNv9Qrd9,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale_0Test.java,7.767395257949829,stop,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    /**
     */
    private static final long serialVersionUID = 1L;

    static JTextField textFieldNomResponsable;

    static JTextField textFieldPrenomResponsable;

    static JComboBox comboBoxSexeResponsable;

    static JTextField textFieldEmailResponsable;

    static JTextField textFieldTelResponsable;

    static JTable tableResp;

    static JTextField outputNomResp;

    static JTextField outputPrenomResp;

    static JTextField outputSexeResp;

    static JTextField outputEmailResp;

    static JTextField outputTelResp;

    static JTextField textFieldTitreFormation;

    static JComponent comboBoxDateLimiteFormation;

    static JTextField textFieldPrixDeLaFormation;

    static JComboBox comboBoxResponsableDeLaFormation;

    static JComboBox comboBoxJourDLM;

    static JComboBox comboBoxMoisDLM;

    static JComboBox comboBoxAnneeDLM;

    static JTable tableFormation;

    static JTextField outputTitreFormation;

    static JTextField outputDateLimiteFormation;

    static JTextField outputPrixFormation;

    static JTextField outputRespFormation;

    ModifTableStockage modifTableStockage;

    static JTextField textFieldNomEtudiant;

    static JTextField textFieldPrenomEtudiant;

    static JComboBox comboBoxSexeEtudiant;

    static JTextField textFieldEmailEtudiant;

    static JComponent textFieldPhotoEtudiants;

    static JComponent comboBoxDateNaissanceEtudiant;

    static JTextField textFieldDiplomeEtudiant;

    static JTextField textFieldNationnaliteEtudiant;

    static JTextField textFieldPhotoEtudiant;

    static JComboBox comboBoxJourDDNEtu;

    static JComboBox comboBoxMoisDDNEtu;

    static JComboBox comboBoxAnneeDDNEtu;

    static JComboBox comboBoxFormation1;

    static JComboBox comboBoxFormation2;

    static JTextArea outputRespArea;

    static JLabel titreArea;

    String[] columnNamesResp = { ""Nom"", ""Prenom"", ""Sexe"", ""Email"", ""Telephone"" };

    static JTable tableEtu;

    ListSelectionModel listSelectionModel;

    static JTextField outputNom;

    static JTextField outputPrenom;

    static JTextField outputSexe;

    static JTextField outputEmail;

    static JTextField outputDateDeNaissance;

    static JLabel outputPhoto;

    static JTextField outputDiplome;

    static JTextField outputNationalite;

    static JTextField outputFormation;

    static JCheckBox checkBoxAccept;

    static JCheckBox checkBoxBourse;

    static boolean accept;

    static boolean bourse;

    static JTextField montant;

    Object[][] dataResp;

    Zmodel modelResp;

    Zmodel modelForm;

    Zmodel modelEtu;

    Controler c;

    ImageIcon photoEtu;

    String[] columnNamesFormation = { ""Titre de la formation"", ""Date limite"", ""Prix"", ""Responsable"" };

    Object[][] dataFormation;

    String[] columnNamesEtu = { ""Nom"", ""Prenom"", ""Sexe"", ""Email"", ""Date de naissance"", ""Photo"", ""Diplome"", ""Nationalite"", ""Formation"", ""Acceptation"", ""Bourse"" };

    static Object[][] dataEtu;

    /**
     * constructeur qui cree l interface graphique
     * @param c
     */
    public FenetrePrincipale(Controler c) {
        super();
        this.c = c;
        //matrice etudiant
        dataEtu = createListeDeroulanteEtudiant();
        //matrice formation
        dataFormation = createListeDeroulanteFormation();
        //matrice responsable
        dataResp = createListeDeroulanteResponsable();
        //On cree la barre d outil
        buildBarreDOutil();
        //On cree les onglet
        buildOnglet();
        //On initialise notre fenÃªtre
        build();
    }

    /**
     * creation de la matrice pour la liste deroulante
     * @return matrice pour la liste deroulante responsable
     */
    private Object[][] createListeDeroulanteResponsable() {
        RespFormation[] resp = c.findRespForm(null, null);
        if (resp != null) {
            Object[][] matResp = new Object[resp.length][5];
            for (int i = 0; i < resp.length; i++) {
                matResp[i][0] = resp[i].getNom();
                matResp[i][1] = resp[i].getPrenom();
                matResp[i][2] = resp[i].getSex();
                matResp[i][3] = resp[i].getEmail();
                matResp[i][4] = resp[i].getTelephone();
            }
            return matResp;
        }
        return null;
    }

    /**
     * creation de la matrice pour la liste deroulante
     * @return matrice pour la liste deroulante formation
     */
    private Object[][] createListeDeroulanteFormation() {
        Formation[] tabFormation = c.findFormation(null, null);
        if (tabFormation != null) {
            Object[][] matFormation = new Object[tabFormation.length][4];
            for (int i = 0; i < tabFormation.length; i++) {
                matFormation[i][0] = tabFormation[i].getTitre_formation();
                matFormation[i][1] = tabFormation[i].getDate_limite_candidature().get(Calendar.DATE) + ""/"" + tabFormation[i].getDate_limite_candidature().get(Calendar.MONTH) + ""/"" + tabFormation[i].getDate_limite_candidature().get(Calendar.YEAR);
                matFormation[i][2] = tabFormation[i].getMontant_inscription();
                matFormation[i][3] = tabFormation[i].getResponsable().getNom() + "" "" + tabFormation[i].getResponsable().getPrenom();
            }
            return matFormation;
        }
        return null;
    }

    /**
     * creation de la matrice pour la liste deroulante
     * @return matrice pour la liste deroulante etudiant
     */
    private Object[][] createListeDeroulanteEtudiant() {
        Candidat[] tabCandidat = c.findCandidat(null, null);
        if (tabCandidat != null) {
            Object[][] matEtu = new Object[tabCandidat.length][11];
            for (int i = 0; i < tabCandidat.length; i++) {
                matEtu[i][0] = tabCandidat[i].getNom();
                matEtu[i][1] = tabCandidat[i].getPrenom();
                matEtu[i][2] = tabCandidat[i].getSex();
                matEtu[i][3] = tabCandidat[i].getEmail();
                matEtu[i][4] = tabCandidat[i].getDateNaissance().get(Calendar.DATE) + ""/"" + tabCandidat[i].getDateNaissance().get(Calendar.MONTH) + ""/"" + tabCandidat[i].getDateNaissance().get(Calendar.YEAR);
                matEtu[i][5] = tabCandidat[i].getPhoto();
                matEtu[i][6] = tabCandidat[i].getDiplome();
                matEtu[i][7] = tabCandidat[i].getNationalite();
                matEtu[i][8] = tabCandidat[i].getFormation().getTitre_formation() + ""."" + tabCandidat[i].getFormation().getDate_limite_candidature().get(Calendar.DATE) + ""/"" + tabCandidat[i].getFormation().getDate_limite_candidature().get(Calendar.MONTH) + ""/"" + tabCandidat[i].getFormation().getDate_limite_candidature().get(Calendar.YEAR);
                if (tabCandidat[i].getAcceptation() == 1) {
                    matEtu[i][9] = ""ok"";
                } else {
                    matEtu[i][9] = ""non"";
                }
                matEtu[i][10] = tabCandidat[i].getBource();
            }
            return matEtu;
        }
        return null;
    }

    /**
     * creation de la barre d outil
     * @return creation de la barre d outil
     */
    void buildBarreDOutil() {
        //---------------------Creation de la barre d outil----------------------------------
        JMenuBar menuBar = new JMenuBar();
        JMenu fichier = new JMenu(""Fichier"");
        JMenu aide = new JMenu(""Aide"");
        JMenuItem quitter = new JMenuItem(new QuitterAction(""Quitter""));
        fichier.add(quitter);
        menuBar.add(fichier);
        JMenuItem aPropos = new JMenuItem(new AProposAction(this, ""A propos""));
        aide.add(aPropos);
        menuBar.add(aide);
        setJMenuBar(menuBar);
        //------------------------------------------------------------------------------------
    }

    /**
     * construit les different onglet de la fenetre
     */
    public void buildOnglet() {
        JTabbedPane tabbedPane = new JTabbedPane();
        ImageIcon icon = null;
        //1er onglet principal
        JTabbedPane tabbedPaneResp = new JTabbedPane();
        //Premiere ongle responsable
        JComponent panel10 = makeFormulaireResponsable();
        panel10.setLayout(new FlowLayout());
        tabbedPaneResp.addTab(""Creer responsable"", icon, panel10, """");
        tabbedPaneResp.setMnemonicAt(0, KeyEvent.VK_1);
        //2eme onglet responsable
        JComponent panel11 = makeModifierResponsable();
        panel11.setLayout(new FlowLayout());
        tabbedPaneResp.addTab(""Modifier responsable"", icon, panel11, """");
        tabbedPaneResp.setMnemonicAt(1, KeyEvent.VK_2);
        tabbedPane.addTab(""Responsable"", icon, tabbedPaneResp, """");
        tabbedPane.setMnemonicAt(0, KeyEvent.VK_3);
        //Deuxieme ongle principale
        JTabbedPane tabbedPaneFormation = new JTabbedPane();
        //1er onglet creer formation
        JComponent panel20 = makeFormulaireFormation();
        panel20.setLayout(new FlowLayout());
        tabbedPaneFormation.addTab(""Creer formation"", icon, panel20, """");
        tabbedPane.setMnemonicAt(0, KeyEvent.VK_4);
        //2eme onglet modification formaion
        JComponent panel21 = makeModifierFormation();
        panel21.setLayout(new FlowLayout());
        tabbedPaneFormation.addTab(""modifier une formation"", icon, panel21, """");
        tabbedPaneFormation.setMnemonicAt(1, KeyEvent.VK_5);
        tabbedPane.addTab(""Formation"", icon, tabbedPaneFormation, """");
        tabbedPane.setMnemonicAt(1, KeyEvent.VK_6);
        //3eme onglet principal
        JTabbedPane tabbedPaneEtu = new JTabbedPane();
        //Troisieme ongle
        JComponent panel30 = makeFormulaireEtudiant();
        panel30.setLayout(new FlowLayout());
        tabbedPaneEtu.addTab(""Inscrire etudiant"", icon, panel30, """");
        tabbedPaneEtu.setMnemonicAt(0, KeyEvent.VK_7);
        //Quatrieme ongle
        JComponent panel31 = makeValidation();
        panel31.setLayout(new FlowLayout());
        tabbedPaneEtu.addTab(""validation d'inscription et de bourse."", icon, panel31, """");
        tabbedPaneEtu.setMnemonicAt(1, KeyEvent.VK_8);
        JScrollPane scrollpaneEtu = new JScrollPane(tabbedPaneEtu);
        tabbedPane.addTab(""Etudiant"", icon, scrollpaneEtu, """");
        tabbedPane.setMnemonicAt(2, KeyEvent.VK_9);
        //Add the tabbed pane to this panel.
        add(tabbedPane);
        //The following line enables to use scrolling tabs.
        tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  ******************************Creation pour le premiere ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /*
	 * 	reunion des de la creation du premiere ongle
	 */
    JComponent makeFormulaireResponsable() {
        JPanel panel = new JPanel(false);
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        Box bHori = Box.createHorizontalBox();
        bVert.add(bHori);
        JComponent formText = makeFormultext();
        JComponent formTextField = makeFormulTextField();
        bHori.add(formText);
        bHori.add(formTextField);
        return panel;
    }

    /*
	 * 	
	 * 
	 *		|nom :    |
	 *		|prenom : |
	 *		|sexe :   |
	 *		|email :  |
	 */
    JComponent makeFormultext() {
        JPanel panel = new JPanel(false);
        JLabel nomResponsable = new JLabel(""Nom : *"");
        JLabel prenomResponsable = new JLabel(""Prenom : *"");
        JLabel sexeResponsable = new JLabel(""Sexe :"");
        JLabel emailResponsable = new JLabel(""Email :"");
        JLabel telResponsable = new JLabel(""Telephone :"");
        JButton butonEvoiFormResp = new JButton(new CreationFormateurAction(this, ""ENVOI"", c));
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(nomResponsable);
        bVert.add(Box.createVerticalStrut(4));
        bVert.add(prenomResponsable);
        bVert.add(Box.createVerticalStrut(8));
        bVert.add(sexeResponsable);
        bVert.add(Box.createVerticalStrut(6));
        bVert.add(emailResponsable);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(telResponsable);
        bVert.add(Box.createVerticalStrut(20));
        bVert.add(butonEvoiFormResp);
        return panel;
    }

    /*
	 * 
	 * 		|textField|
	 * 		|textField|
	 * 		|textField|
	 * 		|textField|
	 * 
	 */
    JComponent makeFormulTextField() {
        String[] sexeResponsable = { ""M"", ""F"" };
        JPanel panel = new JPanel(false);
        textFieldNomResponsable = new JTextField(10);
        textFieldPrenomResponsable = new JTextField(10);
        comboBoxSexeResponsable = new JComboBox(sexeResponsable);
        textFieldEmailResponsable = new JTextField(10);
        textFieldTelResponsable = new JTextField(10);
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(textFieldNomResponsable);
        bVert.add(textFieldPrenomResponsable);
        bVert.add(comboBoxSexeResponsable);
        bVert.add(textFieldEmailResponsable);
        bVert.add(textFieldTelResponsable);
        return panel;
    }

    JComponent makeModifierResponsable() {
        JPanel panel = new JPanel(false);
        Box bVert = Box.createVerticalBox();
        modelResp = new Zmodel(dataResp, columnNamesResp);
        tableResp = new JTable(modelResp);
        listSelectionModel = tableResp.getSelectionModel();
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandlerResp());
        tableResp.setSelectionModel(listSelectionModel);
        tableResp.setPreferredScrollableViewportSize(new Dimension(600, 100));
        tableResp.setFillsViewportHeight(true);
        //content panes must be opaque
        tableResp.setOpaque(true);
        outputNomResp = new JTextField();
        outputNomResp.setEditable(false);
        outputPrenomResp = new JTextField();
        outputPrenomResp.setEditable(false);
        outputSexeResp = new JTextField();
        outputSexeResp.setEditable(false);
        outputEmailResp = new JTextField();
        outputEmailResp.setEditable(false);
        outputTelResp = new JTextField();
        outputTelResp.setEditable(false);
        JButton envoiResp = new JButton(new EnvoiRespAction(this, ""Envoi"", c));
        JButton modifierResp = new JButton(new ModifierRespAction(this, ""Modifier"", c));
        JButton supprimerResp = new JButton(new SupprRespAction(this, ""Supprimer"", c));
        bVert.add(new JScrollPane(tableResp));
        //bVert.add(scrollPane);
        bVert.add(outputNomResp);
        bVert.add(outputPrenomResp);
        bVert.add(outputSexeResp);
        bVert.add(outputEmailResp);
        bVert.add(outputTelResp);
        JPanel boutonPanel = new JPanel(new FlowLayout());
        boutonPanel.add(envoiResp);
        boutonPanel.add(modifierResp);
        boutonPanel.add(supprimerResp);
        panel.add(bVert);
        panel.add(boutonPanel);
        return panel;
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  *********************Fin de la Creation pour le premiere ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  ******************************Creation pour le dexieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    JComponent makeFormulaireFormation() {
        JPanel panel = new JPanel(false);
        Box bHori = Box.createHorizontalBox();
        panel.add(bHori);
        JComponent formTextFormation = makeFormultextFormation();
        JComponent formTextFieldFormation = makeFormulTextFieldFormation();
        bHori.add(formTextFormation);
        bHori.add(formTextFieldFormation);
        return panel;
    }

    JComponent makeFormultextFormation() {
        JPanel panel = new JPanel(false);
        JLabel titreDeLaFormation = new JLabel(""Nom : *"");
        JLabel dateLimite = new JLabel(""Date limite : *"");
        JLabel prixDeLaFormation = new JLabel(""Prix de la formation : *"");
        JLabel responsableDeLaFormation = new JLabel(""Responsable : *"");
        JButton butonEvoiFormFormation = new JButton(new CreerUneFormationAction(this, ""ENVOI"", c));
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(Box.createVerticalStrut(0));
        bVert.add(titreDeLaFormation);
        bVert.add(Box.createVerticalStrut(14));
        bVert.add(dateLimite);
        bVert.add(Box.createVerticalStrut(10));
        bVert.add(prixDeLaFormation);
        bVert.add(Box.createVerticalStrut(10));
        bVert.add(responsableDeLaFormation);
        bVert.add(Box.createVerticalStrut(20));
        bVert.add(butonEvoiFormFormation);
        return panel;
    }

    JComponent makeFormulTextFieldFormation() {
        Identite[] idresp = c.findRespForm(null, null);
        String[] listResponsable = {};
        if (idresp != null) {
            listResponsable = new String[idresp.length];
            for (int i = 0; i < listResponsable.length; i++) {
                listResponsable[i] = idresp[i].getNom() + "" "" + idresp[i].getPrenom();
            }
        }
        JPanel panel = new JPanel(false);
        textFieldTitreFormation = new JTextField(10);
        comboBoxDateLimiteFormation = makeDateDeLaFormation();
        textFieldPrixDeLaFormation = new JTextField(10);
        comboBoxResponsableDeLaFormation = new JComboBox(listResponsable);
        Box bVert2 = Box.createVerticalBox();
        panel.add(bVert2);
        bVert2.add(textFieldTitreFormation);
        bVert2.add(comboBoxDateLimiteFormation);
        bVert2.add(textFieldPrixDeLaFormation);
        bVert2.add(comboBoxResponsableDeLaFormation);
        return panel;
    }

    JComponent makeDateDeLaFormation() {
        JPanel panel = new JPanel(false);
        panel.setLayout(new FlowLayout());
        String[] jour = new String[31];
        String[] mois = new String[12];
        String[] annee = new String[100];
        for (int i = 0; i < 31; i++) {
            jour[i] = String.valueOf(i + 1);
        }
        for (int i = 0; i < 12; i++) {
            mois[i] = String.valueOf(i + 1);
        }
        for (int i = 0; i < 100; i++) {
            annee[i] = String.valueOf(i + 2009);
        }
        comboBoxJourDLM = new JComboBox(jour);
        comboBoxMoisDLM = new JComboBox(mois);
        comboBoxAnneeDLM = new JComboBox(annee);
        panel.add(comboBoxJourDLM);
        panel.add(comboBoxMoisDLM);
        panel.add(comboBoxAnneeDLM);
        return panel;
    }

    JComponent makeModifierFormation() {
        JPanel panel = new JPanel(false);
        Box bVert = Box.createVerticalBox();
        modelForm = new Zmodel(dataFormation, columnNamesFormation);
        tableFormation = new JTable(modelForm);
        listSelectionModel = tableFormation.getSelectionModel();
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandlerFormation());
        tableFormation.setSelectionModel(listSelectionModel);
        tableFormation.setPreferredScrollableViewportSize(new Dimension(600, 100));
        tableFormation.setFillsViewportHeight(true);
        //content panes must be opaque
        tableFormation.setOpaque(true);
        JScrollPane scrollPane = new JScrollPane(tableFormation);
        outputTitreFormation = new JTextField();
        outputTitreFormation.setEditable(false);
        outputDateLimiteFormation = new JTextField();
        outputDateLimiteFormation.setEditable(false);
        outputPrixFormation = new JTextField();
        outputPrixFormation.setEditable(false);
        outputRespFormation = new JTextField();
        outputRespFormation.setEditable(false);
        titreArea = new JLabel(""cout de la formation et liste des candidatures : "");
        outputRespArea = new JTextArea(10, 10);
        outputRespArea.setColumns(20);
        outputRespArea.setLineWrap(true);
        outputRespArea.setRows(15);
        outputRespArea.setWrapStyleWord(true);
        JScrollPane scrollPane1 = new JScrollPane(outputRespArea);
        JButton envoiFormation = new JButton(new EnvoiFormationAction(this, ""Envoi"", c));
        JButton modifierFormation = new JButton(new ModifierFormationAction(this, ""Modifier"", c));
        JButton supprimerFormation = new JButton(new SupprFormationAction(this, ""Supprimer"", c, modifTableStockage));
        bVert.add(scrollPane);
        bVert.add(outputTitreFormation);
        bVert.add(outputDateLimiteFormation);
        bVert.add(outputPrixFormation);
        bVert.add(outputRespFormation);
        bVert.add(titreArea);
        bVert.add(scrollPane1);
        JPanel boutonPanel = new JPanel(new FlowLayout());
        boutonPanel.add(envoiFormation);
        boutonPanel.add(modifierFormation);
        boutonPanel.add(supprimerFormation);
        panel.add(bVert);
        panel.add(boutonPanel);
        return panel;
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  *,*****************************************************************************************
     *  *********************Fin de la Creation pour le deuxieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  ******************************Creation pour le troisieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /*
	 * 	reunion des de la creation du troisieme ongle
	 */
    JComponent makeFormulaireEtudiant() {
        JPanel panel = new JPanel(false);
        Box bHori = Box.createHorizontalBox();
        panel.add(bHori);
        JComponent formTextEtudiant = makeFormultextEtudiant();
        JComponent formTextFieldEtudiant = makeFormulTextFieldEtudiant();
        bHori.add(formTextEtudiant);
        bHori.add(formTextFieldEtudiant);
        return panel;
    }

    JComponent makeFormultextEtudiant() {
        JPanel panel = new JPanel(false);
        JLabel nomEtudiant = new JLabel(""Nom : *"");
        JLabel prenomEtudiant = new JLabel(""Prenom : *"");
        JLabel sexeEtudiant = new JLabel(""Sexe :"");
        JLabel emailEtudiant = new JLabel(""Email : *"");
        JLabel dateDeNaissanceEtudiant = new JLabel(""Date de naissance : *"");
        JLabel photoEtudiant = new JLabel(""Photo : *"");
        JLabel diplomeEtudiant = new JLabel(""diplome : *"");
        JLabel nationnaliteEtudiant = new JLabel(""nationalite :"");
        JLabel choixDeLaFormation = new JLabel(""Choix de la formation :"");
        JButton butonEvoiFormEtudiant = new JButton(new CreerUnEtudiantAction(this, ""ENVOI"", c));
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(nomEtudiant);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(prenomEtudiant);
        bVert.add(Box.createVerticalStrut(6));
        bVert.add(sexeEtudiant);
        bVert.add(Box.createVerticalStrut(8));
        bVert.add(emailEtudiant);
        bVert.add(Box.createVerticalStrut(13));
        bVert.add(dateDeNaissanceEtudiant);
        bVert.add(Box.createVerticalStrut(15));
        bVert.add(photoEtudiant);
        bVert.add(Box.createVerticalStrut(14));
        bVert.add(diplomeEtudiant);
        bVert.add(Box.createVerticalStrut(4));
        bVert.add(nationnaliteEtudiant);
        bVert.add(Box.createVerticalStrut(7));
        bVert.add(choixDeLaFormation);
        bVert.add(Box.createVerticalStrut(20));
        bVert.add(butonEvoiFormEtudiant);
        return panel;
    }

    JComponent makeFormulTextFieldEtudiant() {
        Formation[] form = c.findAllFormation();
        String[] listFormation = {};
        if (form != null) {
            listFormation = new String[form.length];
            for (int i = 0; i < form.length; i++) {
                form[i].getDate_limite_candidature();
                listFormation[i] = form[i].getTitre_formation() + ""."" + form[i].getDate_limite_candidature().get(Calendar.DATE) + ""/"" + form[i].getDate_limite_candidature().get(Calendar.MONTH) + ""/"" + form[i].getDate_limite_candidature().get(Calendar.YEAR);
            }
        }
        String[] sexeEtudiant = { ""M"", ""F"" };
        JPanel panel = new JPanel(false);
        textFieldNomEtudiant = new JTextField(10);
        textFieldPrenomEtudiant = new JTextField(10);
        comboBoxSexeEtudiant = new JComboBox(sexeEtudiant);
        textFieldEmailEtudiant = new JTextField(10);
        comboBoxDateNaissanceEtudiant = makeDateDeNaissance();
        textFieldPhotoEtudiants = makeChargeImage();
        textFieldDiplomeEtudiant = new JTextField(10);
        textFieldNationnaliteEtudiant = new JTextField(10);
        comboBoxFormation1 = new JComboBox(listFormation);
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(textFieldNomEtudiant);
        bVert.add(textFieldPrenomEtudiant);
        bVert.add(comboBoxSexeEtudiant);
        bVert.add(textFieldEmailEtudiant);
        bVert.add(comboBoxDateNaissanceEtudiant);
        bVert.add(textFieldPhotoEtudiants);
        bVert.add(textFieldDiplomeEtudiant);
        bVert.add(textFieldNationnaliteEtudiant);
        bVert.add(comboBoxFormation1);
        return panel;
    }

    JComponent makeChargeImage() {
        JPanel panel = new JPanel(false);
        panel.setLayout(new FlowLayout());
        textFieldPhotoEtudiant = new JTextField(10);
        JButton boutonChargeImage = new JButton(new ChargeImageAction(this, ""CHARGER""));
        panel.add(textFieldPhotoEtudiant);
        panel.add(boutonChargeImage);
        return panel;
    }

    JComponent makeDateDeNaissance() {
        JPanel panel = new JPanel(false);
        panel.setLayout(new FlowLayout());
        String[] jourEtu = new String[31];
        String[] moisEtu = new String[12];
        String[] anneeEtu = new String[100];
        for (int i = 0; i < 31; i++) {
            jourEtu[i] = String.valueOf(i + 1);
        }
        for (int i = 0; i < 12; i++) {
            moisEtu[i] = String.valueOf(i + 1);
        }
        for (int i = 0; i < 100; i++) {
            anneeEtu[i] = String.valueOf(i + 1918);
        }
        comboBoxJourDDNEtu = new JComboBox(jourEtu);
        comboBoxMoisDDNEtu = new JComboBox(moisEtu);
        comboBoxAnneeDDNEtu = new JComboBox(anneeEtu);
        panel.add(comboBoxJourDDNEtu);
        panel.add(comboBoxMoisDDNEtu);
        panel.add(comboBoxAnneeDDNEtu);
        return panel;
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  *********************Fin de la Creation pour le troisieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  ******************************Creation pour le quatrieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    JComponent makeValidation() {
        String[] listFormation = {};
        Formation[] form = c.findAllFormation();
        if (form != null) {
            listFormation = new String[form.length];
            for (int i = 0; i < form.length; i++) {
                form[i].getDate_limite_candidature();
                listFormation[i] = form[i].getTitre_formation() + ""."" + form[i].getDate_limite_candidature().get(Calendar.DATE) + ""/"" + form[i].getDate_limite_candidature().get(Calendar.MONTH) + ""/"" + form[i].getDate_limite_candidature().get(Calendar.YEAR);
            }
        }
        JPanel panel = new JPanel(false);
        modelEtu = new Zmodel(dataEtu, columnNamesEtu);
        tableEtu = new JTable(modelEtu);
        panel.setLayout(new FlowLayout());
        tableEtu.getColumnModel().getColumn(5).setResizable(false);
        tableEtu.getColumnModel().getColumn(5).setPreferredWidth(0);
        tableEtu.getColumnModel().getColumn(5).setMaxWidth(0);
        tableEtu.getColumnModel().getColumn(5).setMinWidth(0);
        //tableEtu = new JTable(dataEtu, columnNamesEtu);
        listSelectionModel = tableEtu.getSelectionModel();
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandlerEtu());
        tableEtu.setSelectionModel(listSelectionModel);
        tableEtu.setPreferredScrollableViewportSize(new Dimension(700, 150));
        tableEtu.setFillsViewportHeight(true);
        JPanel checkPanel = new JPanel(new FlowLayout());
        JPanel boutonPanel = new JPanel(new FlowLayout());
        //content panes must be opaque
        tableEtu.setOpaque(true);
        JScrollPane scrollPane = new JScrollPane(tableEtu);
        comboBoxFormation2 = new JComboBox(listFormation);
        comboBoxFormation2.addActionListener(this);
        outputNom = new JTextField();
        outputNom.setEditable(false);
        outputPrenom = new JTextField();
        outputPrenom.setEditable(false);
        outputSexe = new JTextField();
        outputSexe.setEditable(false);
        outputEmail = new JTextField();
        outputEmail.setEditable(false);
        outputDateDeNaissance = new JTextField();
        outputDateDeNaissance.setEditable(false);
        outputPhoto = new JLabel();
        //outputPhoto.setEditable(false);
        outputDiplome = new JTextField();
        outputDiplome.setEditable(false);
        outputNationalite = new JTextField();
        outputNationalite.setEditable(false);
        outputFormation = new JTextField();
        outputFormation.setEditable(false);
        checkBoxAccept = new JCheckBox(""accept"");
        checkBoxAccept.addItemListener(this);
        checkBoxBourse = new JCheckBox(""bourse :"");
        checkBoxBourse.addItemListener(this);
        montant = new JTextField(10);
        montant.setEnabled(false);
        JButton envoiAcceptBourse = new JButton(new EnvoiAcceptBourseAction(this, ""ENVOI"", c));
        JButton modificationEtu = new JButton(new ModificationEtuAction(this, ""MODIFIER"", c));
        JButton supprimeEtu = new JButton(new SupprimeEtuAction(this, ""SUPPRIMER"", c));
        JButton importExel = new JButton(new ExportExelAction(this, ""exporter table"", c));
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(comboBoxFormation2);
        bVert.add(scrollPane);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputNom);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputPrenom);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputSexe);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputEmail);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputDateDeNaissance);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputPhoto);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputDiplome);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputNationalite);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputFormation);
        checkPanel.add(checkBoxAccept);
        checkPanel.add(checkBoxBourse);
        checkPanel.add(montant);
        bVert.add(checkPanel);
        boutonPanel.add(envoiAcceptBourse);
        boutonPanel.add(modificationEtu);
        boutonPanel.add(supprimeEtu);
        boutonPanel.add(importExel);
        bVert.add(boutonPanel);
        return panel;
    }

    public void actionPerformed(ActionEvent e) {
        System.out.println(""apuis resp"");
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  *********************Fin de la Creation pour le quatrieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /**
     * Lit les checkbox
     */
    public void itemStateChanged(ItemEvent e) {
        Object source = e.getItemSelectable();
        if (source == checkBoxAccept) {
            if (e.getStateChange() == ItemEvent.DESELECTED) {
                checkBoxBourse.setSelected(false);
                montant.setEnabled(false);
                accept = false;
            }
            System.out.println(""accept"");
            accept = true;
        } else if (source == checkBoxBourse) {
            if (e.getStateChange() == ItemEvent.DESELECTED) {
                montant.setEnabled(false);
                bourse = false;
            } else {
                checkBoxAccept.setSelected(true);
                montant.setEnabled(true);
                bourse = true;
            }
        }
    }

    /**
     * date de la formation
     * @return la date de la formation sous forme de String
     */
    public String dateLimForm() {
        String date = comboBoxJourDLM.getSelectedItem().toString() + comboBoxMoisDLM.getSelectedItem().toString() + comboBoxAnneeDLM.getSelectedItem().toString();
        return date;
    }

    /**
     * date de naissance
     * @return la date de naissance sous form de String
     */
    public String dateDeNaiss() {
        String date = comboBoxJourDDNEtu.getSelectedItem().toString() + comboBoxMoisDDNEtu.getSelectedItem().toString() + comboBoxAnneeDDNEtu.getSelectedItem().toString();
        return date;
    }

    /**
     * pour l icone
     * @return une image icon, ou null si le chemin est invalide
     */
    protected static ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = FenetrePrincipale.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println(""Couldn't find file: "" + path);
            return null;
        }
    }

    /**
     * creation de la fenetre principale
     */
    private void build() {
        //On donne un titre Ã  l'application
        setTitle(""Projet !!!!!"");
        //On donne une taille Ã  notre fenÃªtre
        setSize(800, 600);
        //On centre la fenÃªtre sur l'Ã©cran
        setLocationRelativeTo(null);
        //On interdit la redimensionnement de la fenÃªtre
        setResizable(false);
        //On dit Ã  l'application de se fermer lors du clic sur la croix
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    /**
     * verification si les champ sont editable ou pas
     */
    public void afficheSiCelluleEditable() {
        for (int i = 0; i < dataResp.length; i++) {
            for (int j = 0; j < dataResp[0].length; j++) {
                System.out.println(tableResp.isCellEditable(j, j));
            }
        }
    }
}
","// FenetrePrincipale_0Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateLimForm()} method.
*/
class FenetrePrincipale_0Test {","```java
class FenetrePrincipale_0Test {

    @Test
    void testDateLimForm() {
        // Given
        FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
        JComboBox comboBoxJourDLM = new JComboBox(new String[]{""1"", ""2"", ""3""});
        JComboBox comboBoxMoisDLM = new JComboBox(new String[]{""1"", ""2"", ""3""});
        JComboBox comboBoxAnneeDLM = new JComboBox(new String[]{""2021"", ""2022"", ""2023""});
        fenetrePrincipale.comboBoxJourDLM = comboBoxJourDLM;
        fenetrePrincipale.comboBoxMoisDLM = comboBoxMoisDLM;
        fenetrePrincipale.comboBoxAnneeDLM = comboBoxAnneeDLM;

        // When
        String dateLimForm = fenetrePrincipale.dateLimForm();

        // Then
        assertEquals(""1232021"", dateLimForm);
    }

    @Test
    void testDateLimFormWithEmptyComboBoxes() {
        // Given
        FenetrePrincipale fenetrePrincipale = new FenetrePrincipale(new Controler());
        JComboBox comboBoxJourDLM = new JComboBox();
        JComboBox comboBoxMoisDLM = new JComboBox();
        JComboBox comboBoxAnneeDLM = new JComboBox();
        fenetrePrincipale.comboBoxJourDLM = comboBoxJourDLM;
        fenetrePrincipale.comboBoxMoisDLM = comboBoxMoisDLM;
        fenetrePrincipale.comboBoxAnneeDLM = comboBoxAnneeDLM;

        // When
        String dateLimForm = fenetrePrincipale.dateLimForm();

        // Then
        assertEquals("""", dateLimForm);
    }
}
```"
chatcmpl-A5TccFs99aYU5fdqPEVsTpZBqaQHj,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/FenetrePrincipale_1Test.java,5.6835410594940186,stop,"// FenetrePrincipale.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;

public class FenetrePrincipale extends JFrame implements ItemListener, ActionListener {

    /**
     */
    private static final long serialVersionUID = 1L;

    static JTextField textFieldNomResponsable;

    static JTextField textFieldPrenomResponsable;

    static JComboBox comboBoxSexeResponsable;

    static JTextField textFieldEmailResponsable;

    static JTextField textFieldTelResponsable;

    static JTable tableResp;

    static JTextField outputNomResp;

    static JTextField outputPrenomResp;

    static JTextField outputSexeResp;

    static JTextField outputEmailResp;

    static JTextField outputTelResp;

    static JTextField textFieldTitreFormation;

    static JComponent comboBoxDateLimiteFormation;

    static JTextField textFieldPrixDeLaFormation;

    static JComboBox comboBoxResponsableDeLaFormation;

    static JComboBox comboBoxJourDLM;

    static JComboBox comboBoxMoisDLM;

    static JComboBox comboBoxAnneeDLM;

    static JTable tableFormation;

    static JTextField outputTitreFormation;

    static JTextField outputDateLimiteFormation;

    static JTextField outputPrixFormation;

    static JTextField outputRespFormation;

    ModifTableStockage modifTableStockage;

    static JTextField textFieldNomEtudiant;

    static JTextField textFieldPrenomEtudiant;

    static JComboBox comboBoxSexeEtudiant;

    static JTextField textFieldEmailEtudiant;

    static JComponent textFieldPhotoEtudiants;

    static JComponent comboBoxDateNaissanceEtudiant;

    static JTextField textFieldDiplomeEtudiant;

    static JTextField textFieldNationnaliteEtudiant;

    static JTextField textFieldPhotoEtudiant;

    static JComboBox comboBoxJourDDNEtu;

    static JComboBox comboBoxMoisDDNEtu;

    static JComboBox comboBoxAnneeDDNEtu;

    static JComboBox comboBoxFormation1;

    static JComboBox comboBoxFormation2;

    static JTextArea outputRespArea;

    static JLabel titreArea;

    String[] columnNamesResp = { ""Nom"", ""Prenom"", ""Sexe"", ""Email"", ""Telephone"" };

    static JTable tableEtu;

    ListSelectionModel listSelectionModel;

    static JTextField outputNom;

    static JTextField outputPrenom;

    static JTextField outputSexe;

    static JTextField outputEmail;

    static JTextField outputDateDeNaissance;

    static JLabel outputPhoto;

    static JTextField outputDiplome;

    static JTextField outputNationalite;

    static JTextField outputFormation;

    static JCheckBox checkBoxAccept;

    static JCheckBox checkBoxBourse;

    static boolean accept;

    static boolean bourse;

    static JTextField montant;

    Object[][] dataResp;

    Zmodel modelResp;

    Zmodel modelForm;

    Zmodel modelEtu;

    Controler c;

    ImageIcon photoEtu;

    String[] columnNamesFormation = { ""Titre de la formation"", ""Date limite"", ""Prix"", ""Responsable"" };

    Object[][] dataFormation;

    String[] columnNamesEtu = { ""Nom"", ""Prenom"", ""Sexe"", ""Email"", ""Date de naissance"", ""Photo"", ""Diplome"", ""Nationalite"", ""Formation"", ""Acceptation"", ""Bourse"" };

    static Object[][] dataEtu;

    /**
     * constructeur qui cree l interface graphique
     * @param c
     */
    public FenetrePrincipale(Controler c) {
        super();
        this.c = c;
        //matrice etudiant
        dataEtu = createListeDeroulanteEtudiant();
        //matrice formation
        dataFormation = createListeDeroulanteFormation();
        //matrice responsable
        dataResp = createListeDeroulanteResponsable();
        //On cree la barre d outil
        buildBarreDOutil();
        //On cree les onglet
        buildOnglet();
        //On initialise notre fenÃªtre
        build();
    }

    /**
     * creation de la matrice pour la liste deroulante
     * @return matrice pour la liste deroulante responsable
     */
    private Object[][] createListeDeroulanteResponsable() {
        RespFormation[] resp = c.findRespForm(null, null);
        if (resp != null) {
            Object[][] matResp = new Object[resp.length][5];
            for (int i = 0; i < resp.length; i++) {
                matResp[i][0] = resp[i].getNom();
                matResp[i][1] = resp[i].getPrenom();
                matResp[i][2] = resp[i].getSex();
                matResp[i][3] = resp[i].getEmail();
                matResp[i][4] = resp[i].getTelephone();
            }
            return matResp;
        }
        return null;
    }

    /**
     * creation de la matrice pour la liste deroulante
     * @return matrice pour la liste deroulante formation
     */
    private Object[][] createListeDeroulanteFormation() {
        Formation[] tabFormation = c.findFormation(null, null);
        if (tabFormation != null) {
            Object[][] matFormation = new Object[tabFormation.length][4];
            for (int i = 0; i < tabFormation.length; i++) {
                matFormation[i][0] = tabFormation[i].getTitre_formation();
                matFormation[i][1] = tabFormation[i].getDate_limite_candidature().get(Calendar.DATE) + ""/"" + tabFormation[i].getDate_limite_candidature().get(Calendar.MONTH) + ""/"" + tabFormation[i].getDate_limite_candidature().get(Calendar.YEAR);
                matFormation[i][2] = tabFormation[i].getMontant_inscription();
                matFormation[i][3] = tabFormation[i].getResponsable().getNom() + "" "" + tabFormation[i].getResponsable().getPrenom();
            }
            return matFormation;
        }
        return null;
    }

    /**
     * creation de la matrice pour la liste deroulante
     * @return matrice pour la liste deroulante etudiant
     */
    private Object[][] createListeDeroulanteEtudiant() {
        Candidat[] tabCandidat = c.findCandidat(null, null);
        if (tabCandidat != null) {
            Object[][] matEtu = new Object[tabCandidat.length][11];
            for (int i = 0; i < tabCandidat.length; i++) {
                matEtu[i][0] = tabCandidat[i].getNom();
                matEtu[i][1] = tabCandidat[i].getPrenom();
                matEtu[i][2] = tabCandidat[i].getSex();
                matEtu[i][3] = tabCandidat[i].getEmail();
                matEtu[i][4] = tabCandidat[i].getDateNaissance().get(Calendar.DATE) + ""/"" + tabCandidat[i].getDateNaissance().get(Calendar.MONTH) + ""/"" + tabCandidat[i].getDateNaissance().get(Calendar.YEAR);
                matEtu[i][5] = tabCandidat[i].getPhoto();
                matEtu[i][6] = tabCandidat[i].getDiplome();
                matEtu[i][7] = tabCandidat[i].getNationalite();
                matEtu[i][8] = tabCandidat[i].getFormation().getTitre_formation() + ""."" + tabCandidat[i].getFormation().getDate_limite_candidature().get(Calendar.DATE) + ""/"" + tabCandidat[i].getFormation().getDate_limite_candidature().get(Calendar.MONTH) + ""/"" + tabCandidat[i].getFormation().getDate_limite_candidature().get(Calendar.YEAR);
                if (tabCandidat[i].getAcceptation() == 1) {
                    matEtu[i][9] = ""ok"";
                } else {
                    matEtu[i][9] = ""non"";
                }
                matEtu[i][10] = tabCandidat[i].getBource();
            }
            return matEtu;
        }
        return null;
    }

    /**
     * creation de la barre d outil
     * @return creation de la barre d outil
     */
    void buildBarreDOutil() {
        //---------------------Creation de la barre d outil----------------------------------
        JMenuBar menuBar = new JMenuBar();
        JMenu fichier = new JMenu(""Fichier"");
        JMenu aide = new JMenu(""Aide"");
        JMenuItem quitter = new JMenuItem(new QuitterAction(""Quitter""));
        fichier.add(quitter);
        menuBar.add(fichier);
        JMenuItem aPropos = new JMenuItem(new AProposAction(this, ""A propos""));
        aide.add(aPropos);
        menuBar.add(aide);
        setJMenuBar(menuBar);
        //------------------------------------------------------------------------------------
    }

    /**
     * construit les different onglet de la fenetre
     */
    public void buildOnglet() {
        JTabbedPane tabbedPane = new JTabbedPane();
        ImageIcon icon = null;
        //1er onglet principal
        JTabbedPane tabbedPaneResp = new JTabbedPane();
        //Premiere ongle responsable
        JComponent panel10 = makeFormulaireResponsable();
        panel10.setLayout(new FlowLayout());
        tabbedPaneResp.addTab(""Creer responsable"", icon, panel10, """");
        tabbedPaneResp.setMnemonicAt(0, KeyEvent.VK_1);
        //2eme onglet responsable
        JComponent panel11 = makeModifierResponsable();
        panel11.setLayout(new FlowLayout());
        tabbedPaneResp.addTab(""Modifier responsable"", icon, panel11, """");
        tabbedPaneResp.setMnemonicAt(1, KeyEvent.VK_2);
        tabbedPane.addTab(""Responsable"", icon, tabbedPaneResp, """");
        tabbedPane.setMnemonicAt(0, KeyEvent.VK_3);
        //Deuxieme ongle principale
        JTabbedPane tabbedPaneFormation = new JTabbedPane();
        //1er onglet creer formation
        JComponent panel20 = makeFormulaireFormation();
        panel20.setLayout(new FlowLayout());
        tabbedPaneFormation.addTab(""Creer formation"", icon, panel20, """");
        tabbedPane.setMnemonicAt(0, KeyEvent.VK_4);
        //2eme onglet modification formaion
        JComponent panel21 = makeModifierFormation();
        panel21.setLayout(new FlowLayout());
        tabbedPaneFormation.addTab(""modifier une formation"", icon, panel21, """");
        tabbedPaneFormation.setMnemonicAt(1, KeyEvent.VK_5);
        tabbedPane.addTab(""Formation"", icon, tabbedPaneFormation, """");
        tabbedPane.setMnemonicAt(1, KeyEvent.VK_6);
        //3eme onglet principal
        JTabbedPane tabbedPaneEtu = new JTabbedPane();
        //Troisieme ongle
        JComponent panel30 = makeFormulaireEtudiant();
        panel30.setLayout(new FlowLayout());
        tabbedPaneEtu.addTab(""Inscrire etudiant"", icon, panel30, """");
        tabbedPaneEtu.setMnemonicAt(0, KeyEvent.VK_7);
        //Quatrieme ongle
        JComponent panel31 = makeValidation();
        panel31.setLayout(new FlowLayout());
        tabbedPaneEtu.addTab(""validation d'inscription et de bourse."", icon, panel31, """");
        tabbedPaneEtu.setMnemonicAt(1, KeyEvent.VK_8);
        JScrollPane scrollpaneEtu = new JScrollPane(tabbedPaneEtu);
        tabbedPane.addTab(""Etudiant"", icon, scrollpaneEtu, """");
        tabbedPane.setMnemonicAt(2, KeyEvent.VK_9);
        //Add the tabbed pane to this panel.
        add(tabbedPane);
        //The following line enables to use scrolling tabs.
        tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  ******************************Creation pour le premiere ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /*
	 * 	reunion des de la creation du premiere ongle
	 */
    JComponent makeFormulaireResponsable() {
        JPanel panel = new JPanel(false);
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        Box bHori = Box.createHorizontalBox();
        bVert.add(bHori);
        JComponent formText = makeFormultext();
        JComponent formTextField = makeFormulTextField();
        bHori.add(formText);
        bHori.add(formTextField);
        return panel;
    }

    /*
	 * 	
	 * 
	 *		|nom :    |
	 *		|prenom : |
	 *		|sexe :   |
	 *		|email :  |
	 */
    JComponent makeFormultext() {
        JPanel panel = new JPanel(false);
        JLabel nomResponsable = new JLabel(""Nom : *"");
        JLabel prenomResponsable = new JLabel(""Prenom : *"");
        JLabel sexeResponsable = new JLabel(""Sexe :"");
        JLabel emailResponsable = new JLabel(""Email :"");
        JLabel telResponsable = new JLabel(""Telephone :"");
        JButton butonEvoiFormResp = new JButton(new CreationFormateurAction(this, ""ENVOI"", c));
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(nomResponsable);
        bVert.add(Box.createVerticalStrut(4));
        bVert.add(prenomResponsable);
        bVert.add(Box.createVerticalStrut(8));
        bVert.add(sexeResponsable);
        bVert.add(Box.createVerticalStrut(6));
        bVert.add(emailResponsable);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(telResponsable);
        bVert.add(Box.createVerticalStrut(20));
        bVert.add(butonEvoiFormResp);
        return panel;
    }

    /*
	 * 
	 * 		|textField|
	 * 		|textField|
	 * 		|textField|
	 * 		|textField|
	 * 
	 */
    JComponent makeFormulTextField() {
        String[] sexeResponsable = { ""M"", ""F"" };
        JPanel panel = new JPanel(false);
        textFieldNomResponsable = new JTextField(10);
        textFieldPrenomResponsable = new JTextField(10);
        comboBoxSexeResponsable = new JComboBox(sexeResponsable);
        textFieldEmailResponsable = new JTextField(10);
        textFieldTelResponsable = new JTextField(10);
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(textFieldNomResponsable);
        bVert.add(textFieldPrenomResponsable);
        bVert.add(comboBoxSexeResponsable);
        bVert.add(textFieldEmailResponsable);
        bVert.add(textFieldTelResponsable);
        return panel;
    }

    JComponent makeModifierResponsable() {
        JPanel panel = new JPanel(false);
        Box bVert = Box.createVerticalBox();
        modelResp = new Zmodel(dataResp, columnNamesResp);
        tableResp = new JTable(modelResp);
        listSelectionModel = tableResp.getSelectionModel();
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandlerResp());
        tableResp.setSelectionModel(listSelectionModel);
        tableResp.setPreferredScrollableViewportSize(new Dimension(600, 100));
        tableResp.setFillsViewportHeight(true);
        //content panes must be opaque
        tableResp.setOpaque(true);
        outputNomResp = new JTextField();
        outputNomResp.setEditable(false);
        outputPrenomResp = new JTextField();
        outputPrenomResp.setEditable(false);
        outputSexeResp = new JTextField();
        outputSexeResp.setEditable(false);
        outputEmailResp = new JTextField();
        outputEmailResp.setEditable(false);
        outputTelResp = new JTextField();
        outputTelResp.setEditable(false);
        JButton envoiResp = new JButton(new EnvoiRespAction(this, ""Envoi"", c));
        JButton modifierResp = new JButton(new ModifierRespAction(this, ""Modifier"", c));
        JButton supprimerResp = new JButton(new SupprRespAction(this, ""Supprimer"", c));
        bVert.add(new JScrollPane(tableResp));
        //bVert.add(scrollPane);
        bVert.add(outputNomResp);
        bVert.add(outputPrenomResp);
        bVert.add(outputSexeResp);
        bVert.add(outputEmailResp);
        bVert.add(outputTelResp);
        JPanel boutonPanel = new JPanel(new FlowLayout());
        boutonPanel.add(envoiResp);
        boutonPanel.add(modifierResp);
        boutonPanel.add(supprimerResp);
        panel.add(bVert);
        panel.add(boutonPanel);
        return panel;
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  *********************Fin de la Creation pour le premiere ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  ******************************Creation pour le dexieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    JComponent makeFormulaireFormation() {
        JPanel panel = new JPanel(false);
        Box bHori = Box.createHorizontalBox();
        panel.add(bHori);
        JComponent formTextFormation = makeFormultextFormation();
        JComponent formTextFieldFormation = makeFormulTextFieldFormation();
        bHori.add(formTextFormation);
        bHori.add(formTextFieldFormation);
        return panel;
    }

    JComponent makeFormultextFormation() {
        JPanel panel = new JPanel(false);
        JLabel titreDeLaFormation = new JLabel(""Nom : *"");
        JLabel dateLimite = new JLabel(""Date limite : *"");
        JLabel prixDeLaFormation = new JLabel(""Prix de la formation : *"");
        JLabel responsableDeLaFormation = new JLabel(""Responsable : *"");
        JButton butonEvoiFormFormation = new JButton(new CreerUneFormationAction(this, ""ENVOI"", c));
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(Box.createVerticalStrut(0));
        bVert.add(titreDeLaFormation);
        bVert.add(Box.createVerticalStrut(14));
        bVert.add(dateLimite);
        bVert.add(Box.createVerticalStrut(10));
        bVert.add(prixDeLaFormation);
        bVert.add(Box.createVerticalStrut(10));
        bVert.add(responsableDeLaFormation);
        bVert.add(Box.createVerticalStrut(20));
        bVert.add(butonEvoiFormFormation);
        return panel;
    }

    JComponent makeFormulTextFieldFormation() {
        Identite[] idresp = c.findRespForm(null, null);
        String[] listResponsable = {};
        if (idresp != null) {
            listResponsable = new String[idresp.length];
            for (int i = 0; i < listResponsable.length; i++) {
                listResponsable[i] = idresp[i].getNom() + "" "" + idresp[i].getPrenom();
            }
        }
        JPanel panel = new JPanel(false);
        textFieldTitreFormation = new JTextField(10);
        comboBoxDateLimiteFormation = makeDateDeLaFormation();
        textFieldPrixDeLaFormation = new JTextField(10);
        comboBoxResponsableDeLaFormation = new JComboBox(listResponsable);
        Box bVert2 = Box.createVerticalBox();
        panel.add(bVert2);
        bVert2.add(textFieldTitreFormation);
        bVert2.add(comboBoxDateLimiteFormation);
        bVert2.add(textFieldPrixDeLaFormation);
        bVert2.add(comboBoxResponsableDeLaFormation);
        return panel;
    }

    JComponent makeDateDeLaFormation() {
        JPanel panel = new JPanel(false);
        panel.setLayout(new FlowLayout());
        String[] jour = new String[31];
        String[] mois = new String[12];
        String[] annee = new String[100];
        for (int i = 0; i < 31; i++) {
            jour[i] = String.valueOf(i + 1);
        }
        for (int i = 0; i < 12; i++) {
            mois[i] = String.valueOf(i + 1);
        }
        for (int i = 0; i < 100; i++) {
            annee[i] = String.valueOf(i + 2009);
        }
        comboBoxJourDLM = new JComboBox(jour);
        comboBoxMoisDLM = new JComboBox(mois);
        comboBoxAnneeDLM = new JComboBox(annee);
        panel.add(comboBoxJourDLM);
        panel.add(comboBoxMoisDLM);
        panel.add(comboBoxAnneeDLM);
        return panel;
    }

    JComponent makeModifierFormation() {
        JPanel panel = new JPanel(false);
        Box bVert = Box.createVerticalBox();
        modelForm = new Zmodel(dataFormation, columnNamesFormation);
        tableFormation = new JTable(modelForm);
        listSelectionModel = tableFormation.getSelectionModel();
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandlerFormation());
        tableFormation.setSelectionModel(listSelectionModel);
        tableFormation.setPreferredScrollableViewportSize(new Dimension(600, 100));
        tableFormation.setFillsViewportHeight(true);
        //content panes must be opaque
        tableFormation.setOpaque(true);
        JScrollPane scrollPane = new JScrollPane(tableFormation);
        outputTitreFormation = new JTextField();
        outputTitreFormation.setEditable(false);
        outputDateLimiteFormation = new JTextField();
        outputDateLimiteFormation.setEditable(false);
        outputPrixFormation = new JTextField();
        outputPrixFormation.setEditable(false);
        outputRespFormation = new JTextField();
        outputRespFormation.setEditable(false);
        titreArea = new JLabel(""cout de la formation et liste des candidatures : "");
        outputRespArea = new JTextArea(10, 10);
        outputRespArea.setColumns(20);
        outputRespArea.setLineWrap(true);
        outputRespArea.setRows(15);
        outputRespArea.setWrapStyleWord(true);
        JScrollPane scrollPane1 = new JScrollPane(outputRespArea);
        JButton envoiFormation = new JButton(new EnvoiFormationAction(this, ""Envoi"", c));
        JButton modifierFormation = new JButton(new ModifierFormationAction(this, ""Modifier"", c));
        JButton supprimerFormation = new JButton(new SupprFormationAction(this, ""Supprimer"", c, modifTableStockage));
        bVert.add(scrollPane);
        bVert.add(outputTitreFormation);
        bVert.add(outputDateLimiteFormation);
        bVert.add(outputPrixFormation);
        bVert.add(outputRespFormation);
        bVert.add(titreArea);
        bVert.add(scrollPane1);
        JPanel boutonPanel = new JPanel(new FlowLayout());
        boutonPanel.add(envoiFormation);
        boutonPanel.add(modifierFormation);
        boutonPanel.add(supprimerFormation);
        panel.add(bVert);
        panel.add(boutonPanel);
        return panel;
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  *,*****************************************************************************************
     *  *********************Fin de la Creation pour le deuxieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  ******************************Creation pour le troisieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /*
	 * 	reunion des de la creation du troisieme ongle
	 */
    JComponent makeFormulaireEtudiant() {
        JPanel panel = new JPanel(false);
        Box bHori = Box.createHorizontalBox();
        panel.add(bHori);
        JComponent formTextEtudiant = makeFormultextEtudiant();
        JComponent formTextFieldEtudiant = makeFormulTextFieldEtudiant();
        bHori.add(formTextEtudiant);
        bHori.add(formTextFieldEtudiant);
        return panel;
    }

    JComponent makeFormultextEtudiant() {
        JPanel panel = new JPanel(false);
        JLabel nomEtudiant = new JLabel(""Nom : *"");
        JLabel prenomEtudiant = new JLabel(""Prenom : *"");
        JLabel sexeEtudiant = new JLabel(""Sexe :"");
        JLabel emailEtudiant = new JLabel(""Email : *"");
        JLabel dateDeNaissanceEtudiant = new JLabel(""Date de naissance : *"");
        JLabel photoEtudiant = new JLabel(""Photo : *"");
        JLabel diplomeEtudiant = new JLabel(""diplome : *"");
        JLabel nationnaliteEtudiant = new JLabel(""nationalite :"");
        JLabel choixDeLaFormation = new JLabel(""Choix de la formation :"");
        JButton butonEvoiFormEtudiant = new JButton(new CreerUnEtudiantAction(this, ""ENVOI"", c));
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(nomEtudiant);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(prenomEtudiant);
        bVert.add(Box.createVerticalStrut(6));
        bVert.add(sexeEtudiant);
        bVert.add(Box.createVerticalStrut(8));
        bVert.add(emailEtudiant);
        bVert.add(Box.createVerticalStrut(13));
        bVert.add(dateDeNaissanceEtudiant);
        bVert.add(Box.createVerticalStrut(15));
        bVert.add(photoEtudiant);
        bVert.add(Box.createVerticalStrut(14));
        bVert.add(diplomeEtudiant);
        bVert.add(Box.createVerticalStrut(4));
        bVert.add(nationnaliteEtudiant);
        bVert.add(Box.createVerticalStrut(7));
        bVert.add(choixDeLaFormation);
        bVert.add(Box.createVerticalStrut(20));
        bVert.add(butonEvoiFormEtudiant);
        return panel;
    }

    JComponent makeFormulTextFieldEtudiant() {
        Formation[] form = c.findAllFormation();
        String[] listFormation = {};
        if (form != null) {
            listFormation = new String[form.length];
            for (int i = 0; i < form.length; i++) {
                form[i].getDate_limite_candidature();
                listFormation[i] = form[i].getTitre_formation() + ""."" + form[i].getDate_limite_candidature().get(Calendar.DATE) + ""/"" + form[i].getDate_limite_candidature().get(Calendar.MONTH) + ""/"" + form[i].getDate_limite_candidature().get(Calendar.YEAR);
            }
        }
        String[] sexeEtudiant = { ""M"", ""F"" };
        JPanel panel = new JPanel(false);
        textFieldNomEtudiant = new JTextField(10);
        textFieldPrenomEtudiant = new JTextField(10);
        comboBoxSexeEtudiant = new JComboBox(sexeEtudiant);
        textFieldEmailEtudiant = new JTextField(10);
        comboBoxDateNaissanceEtudiant = makeDateDeNaissance();
        textFieldPhotoEtudiants = makeChargeImage();
        textFieldDiplomeEtudiant = new JTextField(10);
        textFieldNationnaliteEtudiant = new JTextField(10);
        comboBoxFormation1 = new JComboBox(listFormation);
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(textFieldNomEtudiant);
        bVert.add(textFieldPrenomEtudiant);
        bVert.add(comboBoxSexeEtudiant);
        bVert.add(textFieldEmailEtudiant);
        bVert.add(comboBoxDateNaissanceEtudiant);
        bVert.add(textFieldPhotoEtudiants);
        bVert.add(textFieldDiplomeEtudiant);
        bVert.add(textFieldNationnaliteEtudiant);
        bVert.add(comboBoxFormation1);
        return panel;
    }

    JComponent makeChargeImage() {
        JPanel panel = new JPanel(false);
        panel.setLayout(new FlowLayout());
        textFieldPhotoEtudiant = new JTextField(10);
        JButton boutonChargeImage = new JButton(new ChargeImageAction(this, ""CHARGER""));
        panel.add(textFieldPhotoEtudiant);
        panel.add(boutonChargeImage);
        return panel;
    }

    JComponent makeDateDeNaissance() {
        JPanel panel = new JPanel(false);
        panel.setLayout(new FlowLayout());
        String[] jourEtu = new String[31];
        String[] moisEtu = new String[12];
        String[] anneeEtu = new String[100];
        for (int i = 0; i < 31; i++) {
            jourEtu[i] = String.valueOf(i + 1);
        }
        for (int i = 0; i < 12; i++) {
            moisEtu[i] = String.valueOf(i + 1);
        }
        for (int i = 0; i < 100; i++) {
            anneeEtu[i] = String.valueOf(i + 1918);
        }
        comboBoxJourDDNEtu = new JComboBox(jourEtu);
        comboBoxMoisDDNEtu = new JComboBox(moisEtu);
        comboBoxAnneeDDNEtu = new JComboBox(anneeEtu);
        panel.add(comboBoxJourDDNEtu);
        panel.add(comboBoxMoisDDNEtu);
        panel.add(comboBoxAnneeDDNEtu);
        return panel;
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  *********************Fin de la Creation pour le troisieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  ******************************Creation pour le quatrieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    JComponent makeValidation() {
        String[] listFormation = {};
        Formation[] form = c.findAllFormation();
        if (form != null) {
            listFormation = new String[form.length];
            for (int i = 0; i < form.length; i++) {
                form[i].getDate_limite_candidature();
                listFormation[i] = form[i].getTitre_formation() + ""."" + form[i].getDate_limite_candidature().get(Calendar.DATE) + ""/"" + form[i].getDate_limite_candidature().get(Calendar.MONTH) + ""/"" + form[i].getDate_limite_candidature().get(Calendar.YEAR);
            }
        }
        JPanel panel = new JPanel(false);
        modelEtu = new Zmodel(dataEtu, columnNamesEtu);
        tableEtu = new JTable(modelEtu);
        panel.setLayout(new FlowLayout());
        tableEtu.getColumnModel().getColumn(5).setResizable(false);
        tableEtu.getColumnModel().getColumn(5).setPreferredWidth(0);
        tableEtu.getColumnModel().getColumn(5).setMaxWidth(0);
        tableEtu.getColumnModel().getColumn(5).setMinWidth(0);
        //tableEtu = new JTable(dataEtu, columnNamesEtu);
        listSelectionModel = tableEtu.getSelectionModel();
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandlerEtu());
        tableEtu.setSelectionModel(listSelectionModel);
        tableEtu.setPreferredScrollableViewportSize(new Dimension(700, 150));
        tableEtu.setFillsViewportHeight(true);
        JPanel checkPanel = new JPanel(new FlowLayout());
        JPanel boutonPanel = new JPanel(new FlowLayout());
        //content panes must be opaque
        tableEtu.setOpaque(true);
        JScrollPane scrollPane = new JScrollPane(tableEtu);
        comboBoxFormation2 = new JComboBox(listFormation);
        comboBoxFormation2.addActionListener(this);
        outputNom = new JTextField();
        outputNom.setEditable(false);
        outputPrenom = new JTextField();
        outputPrenom.setEditable(false);
        outputSexe = new JTextField();
        outputSexe.setEditable(false);
        outputEmail = new JTextField();
        outputEmail.setEditable(false);
        outputDateDeNaissance = new JTextField();
        outputDateDeNaissance.setEditable(false);
        outputPhoto = new JLabel();
        //outputPhoto.setEditable(false);
        outputDiplome = new JTextField();
        outputDiplome.setEditable(false);
        outputNationalite = new JTextField();
        outputNationalite.setEditable(false);
        outputFormation = new JTextField();
        outputFormation.setEditable(false);
        checkBoxAccept = new JCheckBox(""accept"");
        checkBoxAccept.addItemListener(this);
        checkBoxBourse = new JCheckBox(""bourse :"");
        checkBoxBourse.addItemListener(this);
        montant = new JTextField(10);
        montant.setEnabled(false);
        JButton envoiAcceptBourse = new JButton(new EnvoiAcceptBourseAction(this, ""ENVOI"", c));
        JButton modificationEtu = new JButton(new ModificationEtuAction(this, ""MODIFIER"", c));
        JButton supprimeEtu = new JButton(new SupprimeEtuAction(this, ""SUPPRIMER"", c));
        JButton importExel = new JButton(new ExportExelAction(this, ""exporter table"", c));
        Box bVert = Box.createVerticalBox();
        panel.add(bVert);
        bVert.add(comboBoxFormation2);
        bVert.add(scrollPane);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputNom);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputPrenom);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputSexe);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputEmail);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputDateDeNaissance);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputPhoto);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputDiplome);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputNationalite);
        bVert.add(Box.createVerticalStrut(5));
        bVert.add(outputFormation);
        checkPanel.add(checkBoxAccept);
        checkPanel.add(checkBoxBourse);
        checkPanel.add(montant);
        bVert.add(checkPanel);
        boutonPanel.add(envoiAcceptBourse);
        boutonPanel.add(modificationEtu);
        boutonPanel.add(supprimeEtu);
        boutonPanel.add(importExel);
        bVert.add(boutonPanel);
        return panel;
    }

    public void actionPerformed(ActionEvent e) {
        System.out.println(""apuis resp"");
    }

    /**
     * *****************************************************************************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     *  *********************Fin de la Creation pour le quatrieme ongle*****************************
     *  ******************************************************************************************
     *  ******************************************************************************************
     */
    /**
     * Lit les checkbox
     */
    public void itemStateChanged(ItemEvent e) {
        Object source = e.getItemSelectable();
        if (source == checkBoxAccept) {
            if (e.getStateChange() == ItemEvent.DESELECTED) {
                checkBoxBourse.setSelected(false);
                montant.setEnabled(false);
                accept = false;
            }
            System.out.println(""accept"");
            accept = true;
        } else if (source == checkBoxBourse) {
            if (e.getStateChange() == ItemEvent.DESELECTED) {
                montant.setEnabled(false);
                bourse = false;
            } else {
                checkBoxAccept.setSelected(true);
                montant.setEnabled(true);
                bourse = true;
            }
        }
    }

    /**
     * date de la formation
     * @return la date de la formation sous forme de String
     */
    public String dateLimForm() {
        String date = comboBoxJourDLM.getSelectedItem().toString() + comboBoxMoisDLM.getSelectedItem().toString() + comboBoxAnneeDLM.getSelectedItem().toString();
        return date;
    }

    /**
     * date de naissance
     * @return la date de naissance sous form de String
     */
    public String dateDeNaiss() {
        String date = comboBoxJourDDNEtu.getSelectedItem().toString() + comboBoxMoisDDNEtu.getSelectedItem().toString() + comboBoxAnneeDDNEtu.getSelectedItem().toString();
        return date;
    }

    /**
     * pour l icone
     * @return une image icon, ou null si le chemin est invalide
     */
    protected static ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = FenetrePrincipale.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println(""Couldn't find file: "" + path);
            return null;
        }
    }

    /**
     * creation de la fenetre principale
     */
    private void build() {
        //On donne un titre Ã  l'application
        setTitle(""Projet !!!!!"");
        //On donne une taille Ã  notre fenÃªtre
        setSize(800, 600);
        //On centre la fenÃªtre sur l'Ã©cran
        setLocationRelativeTo(null);
        //On interdit la redimensionnement de la fenÃªtre
        setResizable(false);
        //On dit Ã  l'application de se fermer lors du clic sur la croix
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    /**
     * verification si les champ sont editable ou pas
     */
    public void afficheSiCelluleEditable() {
        for (int i = 0; i < dataResp.length; i++) {
            for (int j = 0; j < dataResp[0].length; j++) {
                System.out.println(tableResp.isCellEditable(j, j));
            }
        }
    }
}
","// FenetrePrincipale_1Test.java
package fr.unice.gfarce.interGraph;

/**
 * classe qui dessine toute l interphace graphique
 */
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Calendar;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.main.Controler;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FenetrePrincipale}.
* It contains ten unit test cases for the {@link FenetrePrincipale#dateDeNaiss()} method.
*/
class FenetrePrincipale_1Test {","```java
import static org.junit.jupiter.api.Assertions.assertEquals;

class FenetrePrincipale_1Test {

    @Test
    void testDateDeNaiss() {
        FenetrePrincipale fenetre = new FenetrePrincipale(new Controler());
        
        // Test case 1: Date de naissance is 01/01/2000
        fenetre.comboBoxJourDDNEtu.setSelectedItem(""1"");
        fenetre.comboBoxMoisDDNEtu.setSelectedItem(""1"");
        fenetre.comboBoxAnneeDDNEtu.setSelectedItem(""2000"");
        assertEquals(""01012000"", fenetre.dateDeNaiss());
        
        // Test case 2: Date de naissance is 15/06/1995
        fenetre.comboBoxJourDDNEtu.setSelectedItem(""15"");
        fenetre.comboBoxMoisDDNEtu.setSelectedItem(""6"");
        fenetre.comboBoxAnneeDDNEtu.setSelectedItem(""1995"");
        assertEquals(""15061995"", fenetre.dateDeNaiss());
        
        // Test case 3: Date de naissance is 31/12/1988
        fenetre.comboBoxJourDDNEtu.setSelectedItem(""31"");
        fenetre.comboBoxMoisDDNEtu.setSelectedItem(""12"");
        fenetre.comboBoxAnneeDDNEtu.setSelectedItem(""1988"");
        assertEquals(""31121988"", fenetre.dateDeNaiss());
    }
}
```"
chatcmpl-A5Tdjh35mmjK2IWb5YI4ubkrSJnkJ,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_1Test.java,14.977679014205933,stop,"// ModifTableStockage.java
/**
 * Classe ModifTableStockage
 */
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

/**
 * Recreee une table modifi&eacute;e par l'utilisateur, a partir d'une TableStockage donnee
 * @author Rol Elsa
 */
public class ModifTableStockage {

    // dimension de la table
    private int nbColonnes = 0;

    // avec la ligne de description (les noms des colonnes)
    private int nbLignes = 0;

    // la table d'origine (String[] nomColonnes ; Object[][] matrice;)
    private TableStockage ts;

    /**
     * Constructeur : recuperation de la TableStockage et initialisation
     *
     * @param ts
     */
    public ModifTableStockage(TableStockage ts) {
        this.nbColonnes = ts.getColumnCount();
        this.nbLignes = ts.getRowCount() + 1;
        this.ts = ts;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage &agrave; partir de la table d'origine, mais avec une colonne en plus.
     * Nouvelle colonne de nom ""nomNouvelleColonne"" et de type ""type""
     * Colonne Ajoutee a la fin de la JTable
     * @param nomNouvelleColonne
     * @param type
     * @return TableStockage
     */
    public TableStockage ajouterColonne(String nomNouvelleColonne, Class<?> type) {
        this.nbColonnes++;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes - 1; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        // la derniere colonne prend le nom donne en parametre
        tableS.setColumnName(nbColonnes - 1, nomNouvelleColonne);
        /* on recopie les valeurs dans les colonnes */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < nbColonnes - 1; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
            // la derniere colonne sera null
            tableS.setColumnClass(nbColonnes - 1, type);
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     * @return TableStockage
     */
    public TableStockage ajouterLigne() {
        if (nbColonnes > 0) {
            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)
            this.nbLignes++;
            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
            /* on recopie les noms des colonnes */
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j));
            }
            /* on recopie les valeurs dans les colonnes */
            for (int i = 0; i < nbLignes - 2; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i, j);
                }
            }
            for (int j = 0; j < nbColonnes; j++) {
                if (ts.getColumnClass(j).equals(String.class)) {
                    // la derniere ligne sera a null
                    tableS.setValueAt("""", nbLignes - 2, j);
                } else if (ts.getColumnClass(j).equals(Double.class)) {
                    tableS.setValueAt(new Double(""0""), nbLignes - 2, j);
                } else
                    // sauf si de la classe Boolean
                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);
            }
            return tableS;
        } else {
            // pas de colonne pour construire une ligne
            JOptionPane.showMessageDialog(null, ""PAS DE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine
     * avec la colonne selectionnee en moins
     * colonne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerColonne(int indice) {
        this.nbColonnes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes, jusque celui a supprimer */
        for (int j = 0; j < indice; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les colonnes, sauf celle a supprimer */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < indice; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        /* on recopie toutes les valeurs apres la colonne supprimee */
        if (indice != nbColonnes) {
            // la colonne supprimee n'est pas la derniere
            for (int j = indice; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j + 1));
            }
            for (int i = 0; i < nbLignes - 1; i++) {
                for (int j = indice; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la ligne selectionnee en moins.
     * ligne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerLigne(int indice) {
        this.nbLignes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les valeurs des colonnes */
        for (int i = 0; i < indice; i++) {
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        if (indice != nbLignes - 1) {
            // la ligne a supprimer n'est pas la derniere
            for (int i = indice + 1; i < nbLignes; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i - 1, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre separee.
     * @param indice
     * @return TableStockage
     */
    public TableStockage separerColonne(int indice) {
        if (ts.getColumnClass(indice).equals(String.class)) {
            // on ne peut separer que des valeurs de type String
            int k = 0;
            String val = (String) ts.getValueAt(0, indice);
            String val1 = new String();
            /* Test qui verifie si la colonne est separable (par rapport a ""l'espace"") */
            while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                // code possible de separation entre les mots
                val1 = val1.concat(String.valueOf(val.charAt(k)));
                k++;
            }
            if (k == (val.length() - 1)) {
                // le code de separation n'est pas 160
                val1 = new String();
                k = 0;
                while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                    // si la separation entre les mots est l'espace
                    val1 = val1.concat(String.valueOf(val.charAt(k)));
                    k++;
                }
            }
            if (k != (val.length() - 1)) {
                // la colonne est separable car il y a un espace
                this.nbColonnes++;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                val1 = new String();
                k = 0;
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j - 1));
                }
                // on recupere le nom de la colonne a separer
                String colonne = ts.getColumnName(indice);
                String val1Colonne, val2Colonne;
                String[] resNP = colonne.split("" "", 2);
                val1Colonne = resNP[0];
                if (resNP.length > 1)
                    val2Colonne = resNP[1];
                else
                    val2Colonne = """";
                // 1ere partie du nom de la colonne
                tableS.setColumnName(indice, val1Colonne);
                // 2eme partie
                tableS.setColumnName(indice + 1, val2Colonne);
                /* on ecrit les donnees */
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    for (int j = indice + 2; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j - 1), i, j);
                    }
                }
                /* On remplit les 2 colonnes */
                String val2 = null;
                for (int i = 0; i < nbLignes - 1; i++) {
                    val1 = new String();
                    // on recupere la valeur en [i-1 , indice]
                    val = (String) ts.getValueAt(i, indice);
                    k = 0;
                    if (val.equals("""")) {
                        // peut etre du a une ligne ou colonne ajoutÃ©e a la suite
                        val1 = """";
                        val2 = """";
                    } else {
                        while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                            val1 = val1.concat(String.valueOf(val.charAt(k)));
                            k++;
                        }
                        if (k == (val.length() - 1)) {
                            val1 = new String();
                            k = 0;
                            while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                                val1 = val1.concat(String.valueOf(val.charAt(k)));
                                k++;
                            }
                        }
                        val2 = val.substring(k + 1, val.length());
                    }
                    double int1 = 0, int2 = 0;
                    try {
                        int1 = Double.parseDouble(val1);
                        tableS.setValueAt(int1, i, indice);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val1, i, indice);
                    }
                    try {
                        int2 = Double.parseDouble(val2);
                        tableS.setValueAt(int2, i, indice + 1);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val2, i, indice + 1);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS SEPARABLE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""non separable: PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre fusionnee avec la colonne voisine de droite.
     * @param indice
     * @return TableStockage
     */
    public TableStockage fusionnerColonnes(int indice) {
        if (nbColonnes > 1) {
            // on ne peut fusionner des objets de type Boolean
            if ((!ts.getColumnClass(indice).equals(Boolean.class)) && (!ts.getColumnClass(indice + 1).equals(Boolean.class))) {
                this.nbColonnes--;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                // on fusionne les 2 noms des colonnes
                String c1 = ts.getColumnName(indice);
                String c2 = ts.getColumnName(indice + 1);
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j + 1));
                }
                tableS.setColumnName(indice, c1.concat("" "" + c2));
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    // on fusionne les donnees des 2 colonnes
                    Object d1 = ts.getValueAt(i, indice);
                    Object d2 = ts.getValueAt(i, indice + 1);
                    // on transforme l'objet en String (si Integer ...)
                    String s1 = d1.toString();
                    String s2 = d2.toString();
                    // separees par un espace
                    tableS.setValueAt(s1.concat("" "" + s2), i, indice);
                    for (int j = indice + 1; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""UNE SEULE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     * @return TableStockage
     */
    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     * @return TableStockage
     */
    public TableStockage selectMail() {
        int j = 0;
        Boolean bool;
        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(""Envoyer E-Mail a:""))) {
            // renverra la position de la colonne E-Mail si elle existe
            j++;
        }
        if (j != this.nbColonnes) {
            // la colonne E-Mail (de type Booleen) existe bien
            int newNbLignes = 0;
            for (int i = 0; i < nbLignes - 1; i++) {
                bool = (Boolean) ts.getValueAt(i, j);
                if (bool) {
                    newNbLignes++;
                }
            }
            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);
            int k = 0;
            for (int ind = 0; ind < nbColonnes; ind++) {
                tableS.setColumnName(ind, ts.getColumnName(ind));
            }
            for (int row = 0; row < nbLignes - 1; row++) {
                bool = (Boolean) ts.getValueAt(row, j);
                if (bool) {
                    for (int column = 0; column < nbColonnes; column++) {
                        tableS.setValueAt(ts.getValueAt(row, column), k, column);
                        bool = false;
                    }
                    k++;
                }
            }
            return tableS;
        } else {
            JOptionPane.showMessageDialog(null, ""Le mail sera envoye a toute la liste"", ""Information"", JOptionPane.INFORMATION_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockage_1Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#ajouterLigne()} method.
*/
class ModifTableStockage_1Test {","```java
class ModifTableStockage_1Test {

    @Test
    void testAjouterLigneWithColumns() {
        TableStockage ts = new TableStockage(3, 2);
        ts.setColumnName(0, ""Nom"");
        ts.setColumnName(1, ""Age"");
        ts.setValueAt(""Alice"", 0, 0);
        ts.setValueAt(25, 0, 1);
        ts.setValueAt(""Bob"", 1, 0);
        ts.setValueAt(30, 1, 1);
        
        ModifTableStockage modifTable = new ModifTableStockage(ts);
        TableStockage result = modifTable.ajouterLigne();
        
        assertEquals(3, result.getRowCount());
        assertEquals(2, result.getColumnCount());
        assertEquals(""Nom"", result.getColumnName(0));
        assertEquals(""Age"", result.getColumnName(1));
        assertEquals(""Alice"", result.getValueAt(0, 0));
        assertEquals(25, result.getValueAt(0, 1));
        assertEquals(""Bob"", result.getValueAt(1, 0));
        assertEquals(30, result.getValueAt(1, 1));
        assertEquals("""", result.getValueAt(2, 0));
        assertEquals(0.0, result.getValueAt(2, 1));
    }

    @Test
    void testAjouterLigneWithoutColumns() {
        TableStockage ts = new TableStockage(0, 0);
        
        ModifTableStockage modifTable = new ModifTableStockage(ts);
        TableStockage result = modifTable.ajouterLigne();
        
        assertEquals(0, result.getRowCount());
        assertEquals(0, result.getColumnCount());
    }

    @Test
    void testAjouterLigneWithEmptyTable() {
        TableStockage ts = new TableStockage(1, 0);
        
        ModifTableStockage modifTable = new ModifTableStockage(ts);
        TableStockage result = modifTable.ajouterLigne();
        
        assertEquals(2, result.getRowCount());
        assertEquals(0, result.getColumnCount());
    }
    
    @Test
    void testAjouterLigneWithDifferentColumnTypes() {
        TableStockage ts = new TableStockage(2, 2);
        ts.setColumnName(0, ""Name"");
        ts.setColumnName(1, ""Amount"");
        ts.setColumnClass(0, String.class);
        ts.setColumnClass(1, Double.class);
        ts.setValueAt(""Alice"", 0, 0);
        ts.setValueAt(100.0, 0, 1);
        ts.setValueAt(""Bob"", 1, 0);
        ts.setValueAt(200.0, 1, 1);
        
        ModifTableStockage modifTable = new ModifTableStockage(ts);
        TableStockage result = modifTable.ajouterLigne();
        
        assertEquals(3, result.getRowCount());
        assertEquals(2, result.getColumnCount());
        assertEquals(""Name"", result.getColumnName(0));
        assertEquals(""Amount"", result.getColumnName(1));
        assertEquals(""Alice"", result.getValueAt(0, 0));
        assertEquals(100.0, result.getValueAt(0, 1));
        assertEquals(""Bob"", result.getValueAt(1, 0));
        assertEquals(200.0, result.getValueAt(1, 1));
        assertEquals("""", result.getValueAt(2, 0));
        assertEquals(0.0, result.getValueAt(2, 1));
    }
}
```
```"
chatcmpl-A5Teip9nXXojbcfmF6ndXJVF4VcyU,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_6Test.java,2.824368715286255,stop,"// ModifTableStockage.java
/**
 * Classe ModifTableStockage
 */
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

/**
 * Recreee une table modifi&eacute;e par l'utilisateur, a partir d'une TableStockage donnee
 * @author Rol Elsa
 */
public class ModifTableStockage {

    // dimension de la table
    private int nbColonnes = 0;

    // avec la ligne de description (les noms des colonnes)
    private int nbLignes = 0;

    // la table d'origine (String[] nomColonnes ; Object[][] matrice;)
    private TableStockage ts;

    /**
     * Constructeur : recuperation de la TableStockage et initialisation
     *
     * @param ts
     */
    public ModifTableStockage(TableStockage ts) {
        this.nbColonnes = ts.getColumnCount();
        this.nbLignes = ts.getRowCount() + 1;
        this.ts = ts;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage &agrave; partir de la table d'origine, mais avec une colonne en plus.
     * Nouvelle colonne de nom ""nomNouvelleColonne"" et de type ""type""
     * Colonne Ajoutee a la fin de la JTable
     * @param nomNouvelleColonne
     * @param type
     * @return TableStockage
     */
    public TableStockage ajouterColonne(String nomNouvelleColonne, Class<?> type) {
        this.nbColonnes++;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes - 1; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        // la derniere colonne prend le nom donne en parametre
        tableS.setColumnName(nbColonnes - 1, nomNouvelleColonne);
        /* on recopie les valeurs dans les colonnes */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < nbColonnes - 1; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
            // la derniere colonne sera null
            tableS.setColumnClass(nbColonnes - 1, type);
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     * @return TableStockage
     */
    public TableStockage ajouterLigne() {
        if (nbColonnes > 0) {
            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)
            this.nbLignes++;
            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
            /* on recopie les noms des colonnes */
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j));
            }
            /* on recopie les valeurs dans les colonnes */
            for (int i = 0; i < nbLignes - 2; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i, j);
                }
            }
            for (int j = 0; j < nbColonnes; j++) {
                if (ts.getColumnClass(j).equals(String.class)) {
                    // la derniere ligne sera a null
                    tableS.setValueAt("""", nbLignes - 2, j);
                } else if (ts.getColumnClass(j).equals(Double.class)) {
                    tableS.setValueAt(new Double(""0""), nbLignes - 2, j);
                } else
                    // sauf si de la classe Boolean
                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);
            }
            return tableS;
        } else {
            // pas de colonne pour construire une ligne
            JOptionPane.showMessageDialog(null, ""PAS DE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine
     * avec la colonne selectionnee en moins
     * colonne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerColonne(int indice) {
        this.nbColonnes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes, jusque celui a supprimer */
        for (int j = 0; j < indice; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les colonnes, sauf celle a supprimer */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < indice; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        /* on recopie toutes les valeurs apres la colonne supprimee */
        if (indice != nbColonnes) {
            // la colonne supprimee n'est pas la derniere
            for (int j = indice; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j + 1));
            }
            for (int i = 0; i < nbLignes - 1; i++) {
                for (int j = indice; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la ligne selectionnee en moins.
     * ligne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerLigne(int indice) {
        this.nbLignes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les valeurs des colonnes */
        for (int i = 0; i < indice; i++) {
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        if (indice != nbLignes - 1) {
            // la ligne a supprimer n'est pas la derniere
            for (int i = indice + 1; i < nbLignes; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i - 1, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre separee.
     * @param indice
     * @return TableStockage
     */
    public TableStockage separerColonne(int indice) {
        if (ts.getColumnClass(indice).equals(String.class)) {
            // on ne peut separer que des valeurs de type String
            int k = 0;
            String val = (String) ts.getValueAt(0, indice);
            String val1 = new String();
            /* Test qui verifie si la colonne est separable (par rapport a ""l'espace"") */
            while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                // code possible de separation entre les mots
                val1 = val1.concat(String.valueOf(val.charAt(k)));
                k++;
            }
            if (k == (val.length() - 1)) {
                // le code de separation n'est pas 160
                val1 = new String();
                k = 0;
                while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                    // si la separation entre les mots est l'espace
                    val1 = val1.concat(String.valueOf(val.charAt(k)));
                    k++;
                }
            }
            if (k != (val.length() - 1)) {
                // la colonne est separable car il y a un espace
                this.nbColonnes++;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                val1 = new String();
                k = 0;
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j - 1));
                }
                // on recupere le nom de la colonne a separer
                String colonne = ts.getColumnName(indice);
                String val1Colonne, val2Colonne;
                String[] resNP = colonne.split("" "", 2);
                val1Colonne = resNP[0];
                if (resNP.length > 1)
                    val2Colonne = resNP[1];
                else
                    val2Colonne = """";
                // 1ere partie du nom de la colonne
                tableS.setColumnName(indice, val1Colonne);
                // 2eme partie
                tableS.setColumnName(indice + 1, val2Colonne);
                /* on ecrit les donnees */
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    for (int j = indice + 2; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j - 1), i, j);
                    }
                }
                /* On remplit les 2 colonnes */
                String val2 = null;
                for (int i = 0; i < nbLignes - 1; i++) {
                    val1 = new String();
                    // on recupere la valeur en [i-1 , indice]
                    val = (String) ts.getValueAt(i, indice);
                    k = 0;
                    if (val.equals("""")) {
                        // peut etre du a une ligne ou colonne ajoutÃ©e a la suite
                        val1 = """";
                        val2 = """";
                    } else {
                        while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                            val1 = val1.concat(String.valueOf(val.charAt(k)));
                            k++;
                        }
                        if (k == (val.length() - 1)) {
                            val1 = new String();
                            k = 0;
                            while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                                val1 = val1.concat(String.valueOf(val.charAt(k)));
                                k++;
                            }
                        }
                        val2 = val.substring(k + 1, val.length());
                    }
                    double int1 = 0, int2 = 0;
                    try {
                        int1 = Double.parseDouble(val1);
                        tableS.setValueAt(int1, i, indice);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val1, i, indice);
                    }
                    try {
                        int2 = Double.parseDouble(val2);
                        tableS.setValueAt(int2, i, indice + 1);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val2, i, indice + 1);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS SEPARABLE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""non separable: PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre fusionnee avec la colonne voisine de droite.
     * @param indice
     * @return TableStockage
     */
    public TableStockage fusionnerColonnes(int indice) {
        if (nbColonnes > 1) {
            // on ne peut fusionner des objets de type Boolean
            if ((!ts.getColumnClass(indice).equals(Boolean.class)) && (!ts.getColumnClass(indice + 1).equals(Boolean.class))) {
                this.nbColonnes--;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                // on fusionne les 2 noms des colonnes
                String c1 = ts.getColumnName(indice);
                String c2 = ts.getColumnName(indice + 1);
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j + 1));
                }
                tableS.setColumnName(indice, c1.concat("" "" + c2));
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    // on fusionne les donnees des 2 colonnes
                    Object d1 = ts.getValueAt(i, indice);
                    Object d2 = ts.getValueAt(i, indice + 1);
                    // on transforme l'objet en String (si Integer ...)
                    String s1 = d1.toString();
                    String s2 = d2.toString();
                    // separees par un espace
                    tableS.setValueAt(s1.concat("" "" + s2), i, indice);
                    for (int j = indice + 1; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""UNE SEULE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     * @return TableStockage
     */
    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     * @return TableStockage
     */
    public TableStockage selectMail() {
        int j = 0;
        Boolean bool;
        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(""Envoyer E-Mail a:""))) {
            // renverra la position de la colonne E-Mail si elle existe
            j++;
        }
        if (j != this.nbColonnes) {
            // la colonne E-Mail (de type Booleen) existe bien
            int newNbLignes = 0;
            for (int i = 0; i < nbLignes - 1; i++) {
                bool = (Boolean) ts.getValueAt(i, j);
                if (bool) {
                    newNbLignes++;
                }
            }
            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);
            int k = 0;
            for (int ind = 0; ind < nbColonnes; ind++) {
                tableS.setColumnName(ind, ts.getColumnName(ind));
            }
            for (int row = 0; row < nbLignes - 1; row++) {
                bool = (Boolean) ts.getValueAt(row, j);
                if (bool) {
                    for (int column = 0; column < nbColonnes; column++) {
                        tableS.setValueAt(ts.getValueAt(row, column), k, column);
                        bool = false;
                    }
                    k++;
                }
            }
            return tableS;
        } else {
            JOptionPane.showMessageDialog(null, ""Le mail sera envoye a toute la liste"", ""Information"", JOptionPane.INFORMATION_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockage_6Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#colonneMail()} method.
*/
class ModifTableStockage_6Test {","```java
class ModifTableStockage_6Test {

    @Test
    void testColonneMail() {
        // Given
        TableStockage ts = new TableStockage(3, 3);
        ModifTableStockage modifTableStockage = new ModifTableStockage(ts);

        // When
        TableStockage result = modifTableStockage.colonneMail();

        // Then
        assertEquals(4, result.getColumnCount());
        assertEquals(3, result.getRowCount());
        assertEquals(""Envoyer E-Mail a:"", result.getColumnName(3));
        assertEquals(Boolean.class, result.getColumnClass(3));
        for (int i = 0; i < 3; i++) {
            assertTrue((Boolean) result.getValueAt(i, 3));
        }
    }
}
```
```"
chatcmpl-A5Tflh6P4ksPv7kMYN0k8X6ta53QB,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/interGraph/ModifTableStockage_7Test.java,12.628764390945435,stop,"// ModifTableStockage.java
/**
 * Classe ModifTableStockage
 */
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;

/**
 * Recreee une table modifi&eacute;e par l'utilisateur, a partir d'une TableStockage donnee
 * @author Rol Elsa
 */
public class ModifTableStockage {

    // dimension de la table
    private int nbColonnes = 0;

    // avec la ligne de description (les noms des colonnes)
    private int nbLignes = 0;

    // la table d'origine (String[] nomColonnes ; Object[][] matrice;)
    private TableStockage ts;

    /**
     * Constructeur : recuperation de la TableStockage et initialisation
     *
     * @param ts
     */
    public ModifTableStockage(TableStockage ts) {
        this.nbColonnes = ts.getColumnCount();
        this.nbLignes = ts.getRowCount() + 1;
        this.ts = ts;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage &agrave; partir de la table d'origine, mais avec une colonne en plus.
     * Nouvelle colonne de nom ""nomNouvelleColonne"" et de type ""type""
     * Colonne Ajoutee a la fin de la JTable
     * @param nomNouvelleColonne
     * @param type
     * @return TableStockage
     */
    public TableStockage ajouterColonne(String nomNouvelleColonne, Class<?> type) {
        this.nbColonnes++;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes - 1; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        // la derniere colonne prend le nom donne en parametre
        tableS.setColumnName(nbColonnes - 1, nomNouvelleColonne);
        /* on recopie les valeurs dans les colonnes */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < nbColonnes - 1; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
            // la derniere colonne sera null
            tableS.setColumnClass(nbColonnes - 1, type);
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine, avec une ligne en plus.
     * Ligne ajoutee a la fin de la JTable
     * @return TableStockage
     */
    public TableStockage ajouterLigne() {
        if (nbColonnes > 0) {
            // s'il y a au minimum une colonne (impossibilite de creer une ligne sans colonne)
            this.nbLignes++;
            TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
            /* on recopie les noms des colonnes */
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j));
            }
            /* on recopie les valeurs dans les colonnes */
            for (int i = 0; i < nbLignes - 2; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i, j);
                }
            }
            for (int j = 0; j < nbColonnes; j++) {
                if (ts.getColumnClass(j).equals(String.class)) {
                    // la derniere ligne sera a null
                    tableS.setValueAt("""", nbLignes - 2, j);
                } else if (ts.getColumnClass(j).equals(Double.class)) {
                    tableS.setValueAt(new Double(""0""), nbLignes - 2, j);
                } else
                    // sauf si de la classe Boolean
                    tableS.setValueAt(new Boolean(false), nbLignes - 2, j);
            }
            return tableS;
        } else {
            // pas de colonne pour construire une ligne
            JOptionPane.showMessageDialog(null, ""PAS DE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine
     * avec la colonne selectionnee en moins
     * colonne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerColonne(int indice) {
        this.nbColonnes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes, jusque celui a supprimer */
        for (int j = 0; j < indice; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les colonnes, sauf celle a supprimer */
        for (int i = 0; i < nbLignes - 1; i++) {
            for (int j = 0; j < indice; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        /* on recopie toutes les valeurs apres la colonne supprimee */
        if (indice != nbColonnes) {
            // la colonne supprimee n'est pas la derniere
            for (int j = indice; j < nbColonnes; j++) {
                tableS.setColumnName(j, ts.getColumnName(j + 1));
            }
            for (int i = 0; i < nbLignes - 1; i++) {
                for (int j = indice; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la ligne selectionnee en moins.
     * ligne d'indice donne en parametre supprimee
     * @param indice
     * @return TableStockage
     */
    public TableStockage supprimerLigne(int indice) {
        this.nbLignes--;
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        /* on recopie les noms des colonnes */
        for (int j = 0; j < nbColonnes; j++) {
            tableS.setColumnName(j, ts.getColumnName(j));
        }
        /* on recopie les valeurs des colonnes */
        for (int i = 0; i < indice; i++) {
            for (int j = 0; j < nbColonnes; j++) {
                tableS.setValueAt(ts.getValueAt(i, j), i, j);
            }
        }
        if (indice != nbLignes - 1) {
            // la ligne a supprimer n'est pas la derniere
            for (int i = indice + 1; i < nbLignes; i++) {
                for (int j = 0; j < nbColonnes; j++) {
                    tableS.setValueAt(ts.getValueAt(i, j), i - 1, j);
                }
            }
        }
        return tableS;
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre separee.
     * @param indice
     * @return TableStockage
     */
    public TableStockage separerColonne(int indice) {
        if (ts.getColumnClass(indice).equals(String.class)) {
            // on ne peut separer que des valeurs de type String
            int k = 0;
            String val = (String) ts.getValueAt(0, indice);
            String val1 = new String();
            /* Test qui verifie si la colonne est separable (par rapport a ""l'espace"") */
            while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                // code possible de separation entre les mots
                val1 = val1.concat(String.valueOf(val.charAt(k)));
                k++;
            }
            if (k == (val.length() - 1)) {
                // le code de separation n'est pas 160
                val1 = new String();
                k = 0;
                while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                    // si la separation entre les mots est l'espace
                    val1 = val1.concat(String.valueOf(val.charAt(k)));
                    k++;
                }
            }
            if (k != (val.length() - 1)) {
                // la colonne est separable car il y a un espace
                this.nbColonnes++;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                val1 = new String();
                k = 0;
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j - 1));
                }
                // on recupere le nom de la colonne a separer
                String colonne = ts.getColumnName(indice);
                String val1Colonne, val2Colonne;
                String[] resNP = colonne.split("" "", 2);
                val1Colonne = resNP[0];
                if (resNP.length > 1)
                    val2Colonne = resNP[1];
                else
                    val2Colonne = """";
                // 1ere partie du nom de la colonne
                tableS.setColumnName(indice, val1Colonne);
                // 2eme partie
                tableS.setColumnName(indice + 1, val2Colonne);
                /* on ecrit les donnees */
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    for (int j = indice + 2; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j - 1), i, j);
                    }
                }
                /* On remplit les 2 colonnes */
                String val2 = null;
                for (int i = 0; i < nbLignes - 1; i++) {
                    val1 = new String();
                    // on recupere la valeur en [i-1 , indice]
                    val = (String) ts.getValueAt(i, indice);
                    k = 0;
                    if (val.equals("""")) {
                        // peut etre du a une ligne ou colonne ajoutÃ©e a la suite
                        val1 = """";
                        val2 = """";
                    } else {
                        while ((int) val.charAt(k) != 160 && k != (val.length() - 1)) {
                            val1 = val1.concat(String.valueOf(val.charAt(k)));
                            k++;
                        }
                        if (k == (val.length() - 1)) {
                            val1 = new String();
                            k = 0;
                            while ((int) val.charAt(k) != 32 && k != (val.length() - 1)) {
                                val1 = val1.concat(String.valueOf(val.charAt(k)));
                                k++;
                            }
                        }
                        val2 = val.substring(k + 1, val.length());
                    }
                    double int1 = 0, int2 = 0;
                    try {
                        int1 = Double.parseDouble(val1);
                        tableS.setValueAt(int1, i, indice);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val1, i, indice);
                    }
                    try {
                        int2 = Double.parseDouble(val2);
                        tableS.setValueAt(int2, i, indice + 1);
                    } catch (NumberFormatException e) {
                        tableS.setValueAt(val2, i, indice + 1);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS SEPARABLE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""non separable: PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec la colonne d'indice donne en parametre fusionnee avec la colonne voisine de droite.
     * @param indice
     * @return TableStockage
     */
    public TableStockage fusionnerColonnes(int indice) {
        if (nbColonnes > 1) {
            // on ne peut fusionner des objets de type Boolean
            if ((!ts.getColumnClass(indice).equals(Boolean.class)) && (!ts.getColumnClass(indice + 1).equals(Boolean.class))) {
                this.nbColonnes--;
                TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
                /* On ecrit les noms des colonnes */
                for (int j = 0; j < indice; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j));
                }
                // on fusionne les 2 noms des colonnes
                String c1 = ts.getColumnName(indice);
                String c2 = ts.getColumnName(indice + 1);
                for (int j = indice + 1; j < nbColonnes; j++) {
                    tableS.setColumnName(j, ts.getColumnName(j + 1));
                }
                tableS.setColumnName(indice, c1.concat("" "" + c2));
                for (int i = 0; i < nbLignes - 1; i++) {
                    for (int j = 0; j < indice; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j), i, j);
                    }
                    // on fusionne les donnees des 2 colonnes
                    Object d1 = ts.getValueAt(i, indice);
                    Object d2 = ts.getValueAt(i, indice + 1);
                    // on transforme l'objet en String (si Integer ...)
                    String s1 = d1.toString();
                    String s2 = d2.toString();
                    // separees par un espace
                    tableS.setValueAt(s1.concat("" "" + s2), i, indice);
                    for (int j = indice + 1; j < nbColonnes; j++) {
                        tableS.setValueAt(ts.getValueAt(i, j + 1), i, j);
                    }
                }
                return tableS;
            } else {
                JOptionPane.showMessageDialog(null, ""PAS DE TYPE STRING"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
                return ts;
            }
        } else {
            JOptionPane.showMessageDialog(null, ""UNE SEULE COLONNE"", ""ERREUR"", JOptionPane.ERROR_MESSAGE);
            return ts;
        }
    }

    /**
     * Genere en sortie une TableStockage, a partir de la table d'origine,
     * avec une nouvelle colonne de nom ""E-Mail""
     * Permettra a l'utilisateur de choisir a qui envoyer un mail pour la suite.
     * @return TableStockage
     */
    public TableStockage colonneMail() {
        this.nbColonnes++;
        ModifTableStockage mt = new ModifTableStockage(ts);
        TableStockage tableS = new TableStockage(nbLignes, nbColonnes);
        tableS = mt.ajouterColonne(""Envoyer E-Mail a:"", Boolean.class);
        for (int i = 0; i < nbLignes - 1; i++) {
            // on ajoute un checkbox (par defaut)
            tableS.setValueAt(new Boolean(true), i, nbColonnes - 1);
        }
        return tableS;
    }

    /**
     * G&eacute;n&egrave;re en sortie une TableStockage, &agrave; partir de la table d'origine,
     * avec seulement les lignes o&ugrave; les E-Mails ont &eacute;t&eacute; s&eacute;lectionn&eacute;
     * @return TableStockage
     */
    public TableStockage selectMail() {
        int j = 0;
        Boolean bool;
        while ((j < this.nbColonnes) && (!ts.getColumnName(j).equals(""Envoyer E-Mail a:""))) {
            // renverra la position de la colonne E-Mail si elle existe
            j++;
        }
        if (j != this.nbColonnes) {
            // la colonne E-Mail (de type Booleen) existe bien
            int newNbLignes = 0;
            for (int i = 0; i < nbLignes - 1; i++) {
                bool = (Boolean) ts.getValueAt(i, j);
                if (bool) {
                    newNbLignes++;
                }
            }
            TableStockage tableS = new TableStockage(newNbLignes + 1, nbColonnes);
            int k = 0;
            for (int ind = 0; ind < nbColonnes; ind++) {
                tableS.setColumnName(ind, ts.getColumnName(ind));
            }
            for (int row = 0; row < nbLignes - 1; row++) {
                bool = (Boolean) ts.getValueAt(row, j);
                if (bool) {
                    for (int column = 0; column < nbColonnes; column++) {
                        tableS.setValueAt(ts.getValueAt(row, column), k, column);
                        bool = false;
                    }
                    k++;
                }
            }
            return tableS;
        } else {
            JOptionPane.showMessageDialog(null, ""Le mail sera envoye a toute la liste"", ""Information"", JOptionPane.INFORMATION_MESSAGE);
            return ts;
        }
    }
}
","// ModifTableStockage_7Test.java
package fr.unice.gfarce.interGraph;

import javax.swing.JOptionPane;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifTableStockage}.
* It contains ten unit test cases for the {@link ModifTableStockage#selectMail()} method.
*/
class ModifTableStockage_7Test {","```java
class ModifTableStockage_7Test {

    @Test
    void testSelectMail_AllSelected() {
        // Test case where all emails are selected
        ModifTableStockage modifTableStockage = new ModifTableStockage(new TableStockage(3, 3));
        TableStockage tableStockage = new TableStockage(3, 3);
        tableStockage.setValueAt(true, 0, 2);
        tableStockage.setValueAt(true, 1, 2);
        tableStockage.setValueAt(true, 2, 2);
        modifTableStockage.selectMail();
        assertEquals(tableStockage, modifTableStockage.selectMail());
    }

    @Test
    void testSelectMail_NoneSelected() {
        // Test case where no email is selected
        ModifTableStockage modifTableStockage = new ModifTableStockage(new TableStockage(3, 3));
        TableStockage tableStockage = new TableStockage(1, 3);
        modifTableStockage.selectMail();
        assertEquals(tableStockage, modifTableStockage.selectMail());
    }

    @Test
    void testSelectMail_SomeSelected() {
        // Test case where some emails are selected
        ModifTableStockage modifTableStockage = new ModifTableStockage(new TableStockage(3, 3));
        TableStockage tableStockage = new TableStockage(2, 3);
        tableStockage.setValueAt(true, 0, 2);
        tableStockage.setValueAt(true, 1, 2);
        modifTableStockage.selectMail();
        assertEquals(tableStockage, modifTableStockage.selectMail());
    }

    @Test
    void testSelectMail_NoEmailColumn() {
        // Test case where there is no email column
        ModifTableStockage modifTableStockage = new ModifTableStockage(new TableStockage(3, 3));
        TableStockage tableStockage = new TableStockage(3, 3);
        modifTableStockage.selectMail();
        assertEquals(tableStockage, modifTableStockage.selectMail());
    }

    @Test
    void testSelectMail_ShowInformationMessage() {
        // Test case where an information message is shown
        ModifTableStockage modifTableStockage = new ModifTableStockage(new TableStockage(3, 3));
        TableStockage tableStockage = new TableStockage(3, 3);
        JOptionPane.showMessageDialog(null, ""Le mail sera envoye a toute la liste"", ""Information"", JOptionPane.INFORMATION_MESSAGE);
        modifTableStockage.selectMail();
        assertEquals(tableStockage, modifTableStockage.selectMail());
    }

    @Test
    void testSelectMail_EmptyTable() {
        // Test case where the table is empty
        ModifTableStockage modifTableStockage = new ModifTableStockage(new TableStockage(0, 0));
        TableStockage tableStockage = new TableStockage(0, 0);
        modifTableStockage.selectMail();
        assertEquals(tableStockage, modifTableStockage.selectMail());
    }

    @Test
    void testSelectMail_OneRow() {
        // Test case where there is only one row in the table
        ModifTableStockage modifTableStockage = new ModifTableStockage(new TableStockage(1, 3));
        TableStockage tableStockage = new TableStockage(1, 3);
        tableStockage.setValueAt(true, 0, 2);
        modifTableStockage.selectMail();
        assertEquals(tableStockage, modifTableStockage.selectMail());
    }

    @Test
    void testSelectMail_OneColumn() {
        // Test case where there is only one column in the table
        ModifTableStockage modifTableStockage = new ModifTableStockage(new TableStockage(3, 1));
        TableStockage tableStockage = new TableStockage(3, 1);
        modifTableStockage.selectMail();
        assertEquals(tableStockage, modifTableStockage.selectMail());
    }

    @Test
    void testSelectMail_NullTable() {
        // Test case where the table is null
        ModifTableStockage modifTableStockage = new ModifTableStockage(null);
        assertNull(modifTableStockage.selectMail());
    }

    @Test
    void testSelectMail_ColumnNameMismatch() {
        // Test case where the email column name does not match
        ModifTableStockage modifTableStockage = new ModifTableStockage(new TableStockage(3, 3));
        TableStockage tableStockage = new TableStockage(3, 3);
        tableStockage.setColumnName(0, ""Name"");
        tableStockage.setColumnName(1, ""Age"");
        tableStockage.setColumnName(2, ""Email"");
        modifTableStockage.selectMail();
        assertEquals(tableStockage, modifTableStockage.selectMail());
    }
}
```
```"
chatcmpl-A5Tgo266SsZlCBndEBjgLCjHYzfM6,/EvoSuiteBenchmark/original/8_gfarcegestionfa/src/main/java/fr/unice/gfarce/main/Controler_5Test.java,7.615219831466675,stop,"// Controler.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;

/**
 * Fait la liaison entre l'interface graphique et le moteur de l'application
 * Rend comprehensible les requetes de l'interface graphique pour les bases de
 * donnees
 * @author scarankle
 */
public class Controler {

    DaoFactory df;

    IdentiteDao idao;

    FormationDao fdao;

    Candidat[] tabcand;

    String formationName;

    TypeFabrique tf;

    /**
     * Constructeur initialisant les dao et le type de la base
     * @param tf type de la base
     * @throws DaoFactoryException
     */
    public Controler() throws DaoFactoryException {
        FenetreChoix chFen = new FenetreChoix(this);
        chFen.setVisible(true);
    }

    public void setTypeDataBase(String type) throws DaoFactoryException {
        if (type.equals(""db4o"")) {
            bdChoice(TypeFabrique.DB4O);
        }
        if (type.equals(""oracle"")) {
            bdChoice(TypeFabrique.ORACLE);
        }
    }

    public void launchDatabase() throws IOException {
        idao = df.getIdentiteDao();
        fdao = df.getFormationDao();
        tabcand = null;
        formationName = """";
    }

    /**
     */
    private void bdChoice(TypeFabrique tfab) throws DaoFactoryException {
        DaoFactory.setTypeDao(tfab);
        df = DaoFactory.getDaoFactory();
    }

    /**
     * Cree un candidat ou un responsable de formation et l'insert dans la base
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param type
     * @param date_naissance
     * @param diplome
     * @param photo
     * @param nationalite
     * @param telephone
     * @param bourse
     * @param acceptation
     * @param formation
     * @throws IOException
     * @return le candidat ou le responsable de formation
     */
    public Identite createIdentite(String nom, String prenom, String sex, String email, TypeIdentite type, String date_naissance, String diplome, String photo, String nationalite, String telephone, int bourse, int acceptation, String formation) throws IOException {
        Identite iden = null;
        switch(type) {
            case CANDIDAT:
                Calendar c = creerCalendar(date_naissance);
                String[] forma = formation.split(""\\."");
                Formation[] form = fdao.findFormation(forma[0], creerCalendar(forma[1]));
                iden = new Candidat(nom, prenom, sex, email, type, c, diplome, photo, nationalite, bourse, acceptation, form[0]);
                idao.insert(iden, forma[0], creerCalendar(forma[1]));
                break;
            case FORMATEUR:
                iden = new RespFormation(nom, prenom, sex, email, type, telephone);
                idao.insert(iden, null, null);
                break;
            default:
                System.err.println(""gros probleme"");
        }
        return iden;
    }

    /**
     * cree un calendar a partir d'une string date de la forme dd/mm/yyyy
     * @param date
     * @return
     */
    private Calendar creerCalendar(String date) {
        Calendar c = Calendar.getInstance();
        String[] d = date.split(""/"");
        c.set(Integer.parseInt(d[2]), Integer.parseInt(d[1]), Integer.parseInt(d[0]));
        return c;
    }

    /**
     * cree une formation et l'enregistre dans la base
     * @param titre
     * @param date_limite
     * @param montant
     * @param responsable
     * @return
     */
    public Formation createFormation(String titre, String date_limite, int montant, String responsable) {
        Calendar c = creerCalendar(date_limite);
        String[] respF = responsable.split("" "");
        RespFormation rf = idao.findRespForm(respF[0], respF[1], null, null)[0];
        Formation f = new Formation(titre, c, montant, rf);
        fdao.insert(f, respF[0], respF[1]);
        return f;
    }

    /**
     * Cherche des candidats dans la base
     * @param nom
     * @param prenom
     * @return un tableau contenant les candidats
     */
    public Candidat[] findCandidat(String nom, String prenom) {
        return idao.findCandidat(nom, prenom, null, null);
    }

    /**
     * Cherche des responsables de formation dans la base
     * @param nom
     * @param prenom
     * @return un tableau contenant les responsables de formation
     */
    public RespFormation[] findRespForm(String nom, String prenom) {
        return idao.findRespForm(nom, prenom, null, null);
    }

    /**
     * Cherche des formations dans la base
     * @param name
     * @param date
     * @return un tableau contenant les formations
     */
    public Formation[] findFormation(String name, String date) {
        Calendar c = null;
        if (date != null) {
            c = creerCalendar(date);
        }
        return fdao.findFormation(name, c);
    }

    /**
     * Retourne toutes les formations
     * @return un tableau contenant toutes les formations
     */
    public Formation[] findAllFormation() {
        return fdao.findFormation(null, null);
    }

    /**
     * Retourne tous les Candidats d'une formation donnee
     * @param formation
     * @param date
     * @return tableau contenant tous les etudiants d'une formation donnee
     */
    public Candidat[] findCandidatInFormation(String formation, String date) {
        Calendar c = creerCalendar(date);
        Formation[] form = fdao.findFormation(formation, c);
        Collection<Candidat> cand = form[0].getCandidat();
        this.tabcand = new Candidat[cand.size()];
        this.tabcand = cand.toArray(this.tabcand);
        return tabcand;
    }

    /**
     * Exporte sous forme de fichier excel les candidats d'une formation
     * @throws RowsExceededException
     * @throws WriteException
     * @throws IOException
     * @throws ParseException
     */
    public void exportExcel(String form) throws RowsExceededException, WriteException, IOException, ParseException {
        if (form != null) {
            String[] f = form.split(""\\."");
            this.tabcand = findCandidatInFormation(f[0], f[1]);
            if (this.tabcand == null) {
                System.err.println(""erreur tabcand null"");
            } else {
                WritingXLS w = new WritingXLS();
                w.exportXLS(this.tabcand, formationName + ""gfarce"");
            }
        }
    }

    /**
     * Fait un update d'un candidat
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param date_naissance
     * @param diplome
     * @param photo
     * @param nationalite
     * @param bourse
     * @param acceptation
     * @param formation
     * @throws Exception
     */
    public void updateCandidat(String nom, String prenom, String sex, String email, String date_naissance, String diplome, byte[] photo, String nationalite, int bourse, String acceptation, String formation) throws Exception {
        Candidat[] cand = idao.findCandidat(nom, prenom, null, null);
        Calendar c = creerCalendar(date_naissance);
        cand[0].setSex(sex);
        cand[0].setEmail(email);
        cand[0].setDate_naissance(c);
        cand[0].setBource(bourse);
        cand[0].setNationalite(nationalite);
        String[] forma = formation.split(""\\."");
        Formation[] form = fdao.findFormation(forma[0], creerCalendar(forma[1]));
        cand[0].setFormation(form[0]);
        if (acceptation.equals(""ok"")) {
            cand[0].setAcceptation(1);
        } else {
            cand[0].setAcceptation(0);
        }
        idao.update(cand[0]);
    }

    /**
     * Fait un update d'un responsable
     * @param nom
     * @param prenom
     * @param sex
     * @param email
     * @param telephone
     * @throws Exception
     */
    public void updateResponsable(String nom, String prenom, String sex, String email, String telephone) throws Exception {
        RespFormation[] rf = idao.findRespForm(nom, prenom, null, null);
        rf[0].setSex(sex);
        rf[0].setTelephone(telephone);
        rf[0].setEmail(email);
        idao.update(rf[0]);
    }

    /**
     * Fait un update d'une formation
     * @param titre
     * @param date_limite
     * @param montant
     * @param responsable
     */
    public void updateFormation(String titre, String date_limite, int montant, String responsable) {
        Formation[] f = fdao.findFormation(titre, creerCalendar(date_limite));
        f[0].setDate_limite_candidature(creerCalendar(date_limite));
        f[0].setMontant_inscription(montant);
        String[] resp = responsable.split("" "");
        RespFormation[] rf = idao.findRespForm(resp[0], resp[1], null, null);
        f[0].setResponsable(rf[0]);
        fdao.update(f[0]);
    }

    /**
     * Enleve un candidat ou un responsable de formation de la base
     * @param nom
     * @param prenom
     */
    public void deleteIdentite(String nom, String prenom, TypeIdentite type) {
        if (type == TypeIdentite.FORMATEUR) {
            RespFormation ident = idao.findRespForm(nom, prenom, null, null)[0];
            idao.delete(ident);
        }
        if (type == TypeIdentite.CANDIDAT) {
            Candidat ident = idao.findCandidat(nom, prenom, null, null)[0];
            idao.delete(ident);
        }
    }

    /**
     * Enleve une formation de la base
     * @param nom
     * @param date
     */
    public void deleteFormation(String nom, String date) {
        Formation form = fdao.findFormation(nom, creerCalendar(date))[0];
        fdao.delete(form);
    }
}
","// Controler_5Test.java
package fr.unice.gfarce.main;

import java.io.IOException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;
import fr.unice.gfarce.dao.DaoFactory;
import fr.unice.gfarce.dao.DaoFactory.TypeFabrique;
import fr.unice.gfarce.dao.DaoFactoryException;
import fr.unice.gfarce.dao.FormationDao;
import fr.unice.gfarce.dao.IdentiteDao;
import fr.unice.gfarce.identity.Candidat;
import fr.unice.gfarce.identity.Formation;
import fr.unice.gfarce.identity.Identite;
import fr.unice.gfarce.identity.Identite.TypeIdentite;
import fr.unice.gfarce.identity.RespFormation;
import fr.unice.gfarce.interGraph.FenetreChoix;
import fr.unice.gfarce.xls.WritingXLS;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Controler}.
* It contains ten unit test cases for the {@link Controler#findAllFormation()} method.
*/
class Controler_5Test {","```java
package fr.unice.gfarce.main;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class Controler_5Test {

    @Test
    void testFindAllFormation() {
        Controler controler = new Controler();
        Formation[] formations = controler.findAllFormation();
        assertNotNull(formations);
    }

    @Test
    void testFindAllFormationNotEmpty() {
        Controler controler = new Controler();
        Formation[] formations = controler.findAllFormation();
        assertTrue(formations.length > 0);
    }

    @Test
    void testFindAllFormationNotNull() {
        Controler controler = new Controler();
        Formation[] formations = controler.findAllFormation();
        for (Formation formation : formations) {
            assertNotNull(formation);
        }
    }

    @Test
    void testFindAllFormationTitleNotNull() {
        Controler controler = new Controler();
        Formation[] formations = controler.findAllFormation();
        for (Formation formation : formations) {
            assertNotNull(formation.getTitre());
        }
    }

    @Test
    void testFindAllFormationDateLimiteNotNull() {
        Controler controler = new Controler();
        Formation[] formations = controler.findAllFormation();
        for (Formation formation : formations) {
            assertNotNull(formation.getDate_limite_candidature());
        }
    }

    @Test
    void testFindAllFormationMontantNotNull() {
        Controler controler = new Controler();
        Formation[] formations = controler.findAllFormation();
        for (Formation formation : formations) {
            assertNotNull(formation.getMontant_inscription());
        }
    }

    @Test
    void testFindAllFormationResponsableNotNull() {
        Controler controler = new Controler();
        Formation[] formations = controler.findAllFormation();
        for (Formation formation : formations) {
            assertNotNull(formation.getResponsable());
        }
    }

    @Test
    void testFindAllFormationCandidatsNotNull() {
        Controler controler = new Controler();
        Formation[] formations = controler.findAllFormation();
        for (Formation formation : formations) {
            assertNotNull(formation.getCandidat());
        }
    }

    @Test
    void testFindAllFormationCandidatsNotEmpty() {
        Controler controler = new Controler();
        Formation[] formations = controler.findAllFormation();
        for (Formation formation : formations) {
            assertTrue(formation.getCandidat().size() > 0);
        }
    }

    @Test
    void testFindAllFormationCandidatsType() {
        Controler controler = new Controler();
        Formation[] formations = controler.findAllFormation();
        for (Formation formation : formations) {
            for (Candidat candidat : formation.getCandidat()) {
                assertEquals(Identite.TypeIdentite.CANDIDAT, candidat.getType());
            }
        }
    }
}
```
```"
