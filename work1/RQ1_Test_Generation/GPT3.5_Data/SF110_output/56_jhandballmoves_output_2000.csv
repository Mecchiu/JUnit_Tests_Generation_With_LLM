ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
chatcmpl-A5UwEQYZOKMqLKbZLBRKeYAfvmBLe,/EvoSuiteBenchmark/original/56_jhandballmoves/src/main/java/visu/handball/moves/controller/JMenuHelper_0Test.java,13.487371444702148,stop,"// JMenuHelper.java
/*
 * Created on 31.08.2006
 * Created by Richard Doerfler, Thomas Halm
 * Copyright (C) 2006  Richard Doerfler, Thomas Halm
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package visu.handball.moves.controller;

import java.awt.event.*;
import javax.swing.*;

public class JMenuHelper {

    /**
     * Add an element to the menubar.
     *
     * @param menuBar a JMenuBar
     * @param s a String
     *
     * @return added JMenu
     */
    public static JMenu addMenuBarItem(JMenuBar menuBar, String s) {
        JMenu menu;
        /**
         * Suche nach '_' und nimm das nächste Zeichen als Mnemonic,
         * sonst: normales Menu
         */
        if (s.indexOf(""_"") > -1) {
            int pos = s.indexOf(""_"");
            char c = s.charAt(pos + 1);
            StringBuffer sb = new StringBuffer(s).delete(pos, pos + 1);
            menu = new JMenu(sb.toString());
            menu.setMnemonic(c);
        } else
            menu = new JMenu(s);
        menuBar.add(menu);
        return menu;
    }

    private static JMenuItem processAction(Action a) {
        if (a != null) {
            return new JMenuItem(a);
        } else {
            return new JMenuItem();
        }
    }

    /**
     * Setze das Zeichen nach '_' als Mnemonic des MenuItems
     * @param s
     */
    private static void processMnemonic(JMenuItem menuItem, String s) {
        if (s.indexOf(""_"") > -1) {
            int pos = s.indexOf(""_"");
            char c = s.charAt(pos + 1);
            StringBuffer sb = new StringBuffer(s).delete(pos, pos + 1);
            menuItem.setName(sb.toString());
            menuItem.setMnemonic(c);
        }
    }

    /**
     * Insert a JMenuItem to a given JMenu.
     *
     * @param m
     *            a JMenu
     * @param s
     *            a String
     * @param keyChar
     *            a char
     * @param al
     *            an ActionListener
     *
     * @return a JMenuItem
     */
    public static JMenuItem addMenuItem(JMenu m, String s, char keyChar, Action a, ActionListener al) {
        if (s.startsWith(""-"")) {
            m.addSeparator();
            return null;
        }
        JMenuItem menuItem = processAction(a);
        processMnemonic(menuItem, s);
        //füge den Short-Cut hinzu
        if (keyChar != 0)
            menuItem.setAccelerator(KeyStroke.getKeyStroke(keyChar, InputEvent.CTRL_MASK));
        //Actionslistener anmelden
        if (al != null)
            menuItem.addActionListener(al);
        //dem Menu hinzufügen
        m.add(menuItem);
        return menuItem;
    }

    public static JMenuItem addMenuItem(JMenu m, String s, char c) {
        return addMenuItem(m, s, c, null, null);
    }

    public static JMenuItem addMenuItem(JMenu m, String s) {
        return addMenuItem(m, s, (char) 0, null, null);
    }

    public static JMenuItem addMenuItem(JMenu m, String s, ActionListener al) {
        return addMenuItem(m, s, (char) 0, null, al);
    }

    public static JMenuItem addMenuItem(JMenu m, String s, Action a) {
        return addMenuItem(m, s, (char) 0, a, null);
    }

    public static JMenuItem addMenuItem(JMenu m, String s, char c, Action a) {
        return addMenuItem(m, s, c, a, null);
    }
}
","// JMenuHelper_0Test.java
package visu.handball.moves.controller;

import java.awt.event.*;
import javax.swing.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link JMenuHelper}.
* It contains ten unit test cases for the {@link JMenuHelper#addMenuBarItem(JMenuBar, String)} method.
*/
class JMenuHelper_0Test {","```java
class JMenuHelper_0Test {

    @Test
    void testAddMenuBarItem_WhenStringContainsMnemonic_ThenMenuWithMnemonicAdded() {
        JMenuBar menuBar = new JMenuBar();
        JMenu menu = JMenuHelper.addMenuBarItem(menuBar, ""File"");
        assertNotNull(menu);
        assertEquals(""File"", menu.getText());
    }

    @Test
    void testAddMenuBarItem_WhenStringContainsNoMnemonic_ThenMenuWithoutMnemonicAdded() {
        JMenuBar menuBar = new JMenuBar();
        JMenu menu = JMenuHelper.addMenuBarItem(menuBar, ""Edit"");
        assertNotNull(menu);
        assertEquals(""Edit"", menu.getText());
    }

    @Test
    void testAddMenuBarItem_WhenStringContainsMnemonic_ThenMenuWithMnemonicAddedCorrectly() {
        JMenuBar menuBar = new JMenuBar();
        JMenu menu = JMenuHelper.addMenuBarItem(menuBar, ""View"");
        assertNotNull(menu);
        assertEquals(""View"", menu.getText());
        assertEquals('V', menu.getMnemonic());
    }

    @Test
    void testAddMenuBarItem_WhenStringContainsNoMnemonic_ThenMenuWithoutMnemonicAddedCorrectly() {
        JMenuBar menuBar = new JMenuBar();
        JMenu menu = JMenuHelper.addMenuBarItem(menuBar, ""Help"");
        assertNotNull(menu);
        assertEquals(""Help"", menu.getText());
    }

    @Test
    void testAddMenuBarItem_WhenStringContainsMultipleMnemonics_ThenMenuWithFirstMnemonicAdded() {
        JMenuBar menuBar = new JMenuBar();
        JMenu menu = JMenuHelper.addMenuBarItem(menuBar, ""Save_As"");
        assertNotNull(menu);
        assertEquals(""SaveAs"", menu.getText());
        assertEquals('S', menu.getMnemonic());
    }

    @Test
    void testAddMenuBarItem_WhenStringContainsNoMnemonic_ThenMenuWithoutMnemonicAddedCorrectly() {
        JMenuBar menuBar = new JMenuBar();
        JMenu menu = JMenuHelper.addMenuBarItem(menuBar, ""Exit"");
        assertNotNull(menu);
        assertEquals(""Exit"", menu.getText());
    }

    @Test
    void testAddMenuBarItem_WhenStringContainsMnemonicAtEnd_ThenMenuWithMnemonicAdded() {
        JMenuBar menuBar = new JMenuBar();
        JMenu menu = JMenuHelper.addMenuBarItem(menuBar, ""Open_"");
        assertNotNull(menu);
        assertEquals(""Open"", menu.getText());
        assertEquals('O', menu.getMnemonic());
    }

    @Test
    void testAddMenuBarItem_WhenStringContainsNoMnemonic_ThenMenuWithoutMnemonicAddedCorrectly() {
        JMenuBar menuBar = new JMenuBar();
        JMenu menu = JMenuHelper.addMenuBarItem(menuBar, ""New"");
        assertNotNull(menu);
        assertEquals(""New"", menu.getText());
    }

    @Test
    void testAddMenuBarItem_WhenStringContainsMnemonicAtBeginning_ThenMenuWithMnemonicAdded() {
        JMenuBar menuBar = new JMenuBar();
        JMenu menu = JMenuHelper.addMenuBarItem(menuBar, ""_File"");
        assertNotNull(menu);
        assertEquals(""File"", menu.getText());
        assertEquals('F', menu.getMnemonic());
    }

    @Test
    void testAddMenuBarItem_WhenStringContainsNoMnemonic_ThenMenuWithoutMnemonicAddedCorrectly() {
        JMenuBar menuBar = new JMenuBar();
        JMenu menu = JMenuHelper.addMenuBarItem(menuBar, ""Options"");
        assertNotNull(menu);
        assertEquals(""Options"", menu.getText());
    }
}
```
```"
chatcmpl-A5UxHXFKPNVlLDeRefEYQQcOE8gPN,/EvoSuiteBenchmark/original/56_jhandballmoves/src/main/java/visu/handball/moves/Main_0Test.java,7.36722993850708,stop,"// Main.java
/*
 * Created on 31.08.2006
 * Created by Richard Doerfler, Thomas Halm
 * Copyright (C) 2006  Richard Doerfler, Thomas Halm
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package visu.handball.moves;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import visu.handball.moves.actions.AboutAction;
import visu.handball.moves.actions.ChangeColorsAction;
import visu.handball.moves.actions.CloseAction;
import visu.handball.moves.actions.CreateMovePdfAction;
import visu.handball.moves.actions.DeleteEventAction;
import visu.handball.moves.actions.NewAction;
import visu.handball.moves.actions.NewMoveEventAction;
import visu.handball.moves.actions.NewPassEventAction;
import visu.handball.moves.actions.NewSequenceAction;
import visu.handball.moves.actions.OpenAction;
import visu.handball.moves.actions.PauseAnimationAction;
import visu.handball.moves.actions.PrintActualSequenzAction;
import visu.handball.moves.actions.PrintMoveAction;
import visu.handball.moves.actions.SaveAction;
import visu.handball.moves.actions.SetMoveNameAction;
import visu.handball.moves.actions.StartAnimationAction;
import visu.handball.moves.actions.StartOneSequenceAnimationAction;
import visu.handball.moves.actions.StopAnimationAction;
import visu.handball.moves.controller.CommentController;
import visu.handball.moves.controller.JMenuHelper;
import visu.handball.moves.controller.MouseController;
import visu.handball.moves.model.ColorModel;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.TableHandballModel;
import visu.handball.moves.model.TableSelectionListener;
import visu.handball.moves.resources.Resources;
import visu.handball.moves.views.CommentView;
import visu.handball.moves.views.EventTableCellDelayEditor;
import visu.handball.moves.views.EventTableCellRenderer;
import visu.handball.moves.views.Field;
import visu.handball.moves.views.PlayerToolBar;
import visu.handball.moves.views.StatusBar;

/**
 * Hauptklasse zum Starten der Anwendung plus den Zugriff auf die entsprechenden Objekt-Instanzen
 * @author tommy
 */
public class Main {

    private static SaveAction saveAction;

    private static CloseAction closeAction;

    private static SetMoveNameAction setNameAction;

    private static JFrame window;

    private static Field field;

    private static CommentView commentView;

    private static ColorModel colorModel;

    /**
     * Liefert die Instanz des ColorModels
     *
     * @return colorModel
     */
    public static ColorModel getColorModel() {
        return colorModel;
    }

    /**
     * Main-Methode zum Starten der Anwendung
     *
     * @param args
     */
    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            System.out.println(//$NON-NLS-1$
            Resources.getString(""error.lookAndFell""));
        }
        //$NON-NLS-1$
        window = new JFrame(Resources.getString(""app.title""));
        //$NON-NLS-1$ //$NON-NLS-2$
        window.setIconImage(createImageIcon(""images/icon.gif"", """").getImage());
        JPanel content = new JPanel(new BorderLayout());
        JDesktopPane desktop = new JDesktopPane();
        window.setContentPane(content);
        content.add(desktop, BorderLayout.CENTER);
        desktop.setBackground(new Color(255, 255, 174));
        desktop.setDragMode(JDesktopPane.OUTLINE_DRAG_MODE);
        // Create HandballModel
        HandballModel handballModel = createHandballModel();
        // Create ColorModel
        colorModel = new ColorModel();
        // Statusbar
        StatusBar statusBar = createStatusBar(handballModel);
        content.add(statusBar, BorderLayout.SOUTH);
        // Create Menu
        JMenuBar menu = createHandballMenu(handballModel);
        window.setJMenuBar(menu);
        // Create HandballField
        field = new Field(handballModel, colorModel);
        JInternalFrame handballField = new //$NON-NLS-1$
        JInternalFrame(//$NON-NLS-1$
        Resources.getString(""field.title""), //$NON-NLS-1$
        false, false, false, true);
        handballField.setLocation(10, 10);
        handballField.add(field);
        handballField.setVisible(true);
        handballField.pack();
        desktop.add(handballField);
        // Create MouseController
        MouseController mouse = new MouseController(handballModel, handballField);
        field.addMouseListener(mouse);
        field.addMouseMotionListener(mouse);
        // Add Statusbar as Listener
        field.addMouseMotionListener(statusBar);
        // Create ToolBar
        PlayerToolBar playerBar = new PlayerToolBar(handballModel);
        content.add(playerBar, BorderLayout.NORTH);
        // Create EventView
        JPanel tablePanel = createTablePanel(handballModel);
        JInternalFrame eventView = new //$NON-NLS-1$
        JInternalFrame(//$NON-NLS-1$
        Resources.getString(""events.title""), //$NON-NLS-1$
        true, false, false, true);
        eventView.add(tablePanel);
        eventView.setLocation(20 + handballField.getWidth(), 10);
        eventView.setVisible(true);
        eventView.setSize(450, 400);
        desktop.add(eventView);
        // Create CommentView
        //$NON-NLS-1$
        commentView = new CommentView(Resources.getString(""comment.title""));
        commentView.setLocation(20 + handballField.getWidth(), 420);
        commentView.setSize(450, handballField.getHeight() - eventView.getHeight() - 10);
        commentView.setVisible(true);
        //Controller für CommentView erzeugen
        new CommentController(handballModel, commentView);
        desktop.add(commentView);
        window.setSize(1000, 700);
        locateOnScreenCenter(window);
        window.addWindowListener(new WindowAdapter() {

            public void windowClosing(WindowEvent e) {
                Main.getCloseAction().actionPerformed(null);
            }
        });
        window.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        window.setVisible(true);
    }

    private static JMenuBar createHandballMenu(HandballModel handballModel) {
        JMenuBar mbar;
        JMenu menuDatei, menuHilfe, menuEinstellungen;
        // Hauptmenue einrichten
        mbar = new JMenuBar();
        //$NON-NLS-1$
        menuDatei = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.file""));
        //$NON-NLS-1$
        menuEinstellungen = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.settings""));
        //$NON-NLS-1$
        menuHilfe = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.about""));
        // Einträge fuer Datei
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        NewAction(handballModel));
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        OpenAction(handballModel));
        //Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        saveAction = new SaveAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", saveAction);
        // Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        setNameAction = new SetMoveNameAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", setNameAction);
        //Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        //Drucken einfügen
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        PrintActualSequenzAction(handballModel));
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", new PrintMoveAction(handballModel));
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", new CreateMovePdfAction(handballModel));
        // Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        closeAction = new CloseAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", closeAction);
        // Einträge für Einstellungen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuEinstellungen, """", new ChangeColorsAction());
        // Einträge für Hilfe
        //$NON-NLS-1$
        JMenuHelper.//$NON-NLS-1$
        addMenuItem(//$NON-NLS-1$
        menuHilfe, //$NON-NLS-1$
        """", new AboutAction());
        return mbar;
    }

    private static JPanel createTablePanel(HandballModel handballModel) {
        TableHandballModel tableModel = new TableHandballModel(handballModel);
        JTable table = new JTable(tableModel);
        table.setDefaultRenderer(Object.class, new EventTableCellRenderer());
        table.getColumnModel().getColumn(0).setPreferredWidth(100);
        table.getColumnModel().getColumn(1).setPreferredWidth(200);
        EventTableCellDelayEditor delayEditor = new EventTableCellDelayEditor();
        table.getColumnModel().getColumn(3).setCellEditor(delayEditor);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.getSelectionModel().addListSelectionListener(new TableSelectionListener(tableModel));
        JPanel panel = new JPanel(new BorderLayout());
        //$NON-NLS-1$
        JToolBar toolBar = new JToolBar(Resources.getString(""toolbar.title""));
        toolBar.add(new NewMoveEventAction(handballModel));
        toolBar.add(new NewSequenceAction(handballModel));
        toolBar.add(new NewPassEventAction(handballModel));
        toolBar.add(new DeleteEventAction(handballModel));
        toolBar.addSeparator();
        toolBar.add(new StartOneSequenceAnimationAction(handballModel));
        toolBar.add(new StartAnimationAction(handballModel));
        toolBar.add(new PauseAnimationAction(handballModel));
        toolBar.add(new StopAnimationAction(handballModel));
        JScrollPane scroll = new JScrollPane(table);
        panel.add(scroll, BorderLayout.CENTER);
        panel.add(toolBar, BorderLayout.PAGE_START);
        return panel;
    }

    private static StatusBar createStatusBar(HandballModel model) {
        StatusBar statusBar = new StatusBar(model);
        return statusBar;
    }

    /**
     * Basierend auf der relativen Pfad (relativ zum Ort dieser Klasse) und der Beschreibung
     * wird ein Grafik geladen und ein ImageIcon-Objekt erstellt.
     * @param path
     * @param description
     *
     * @return imageIcon
     */
    public static ImageIcon createImageIcon(String path, String description) {
        URL url = Main.class.getResource(path);
        return new ImageIcon(url, description);
    }

    /**
     * Erzeugt auf Basis eines relativen Pfads (relativ zum Ort dieser Klasse) eine URL.
     * @param path
     *
     * @return url
     */
    public static URL getResource(String path) {
        return Main.class.getResource(path);
    }

    /**
     * Methode um Component-Objekte (z.B. Fenster) in der Mitte des Bildschirms zu positionieren
     * @param component
     */
    public static void locateOnScreenCenter(Component component) {
        Dimension paneSize = component.getSize();
        Dimension screenSize = component.getToolkit().getScreenSize();
        component.setLocation((screenSize.width - paneSize.width) / 2, (screenSize.height - paneSize.height) / 2);
    }

    private static HandballModel createHandballModel() {
        HandballModel model = new HandballModel();
        return model;
    }

    /**
     * Die Instanz des Anwendungsfensters
     *
     * @return window
     */
    public static JFrame getWindow() {
        return window;
    }

    /**
     * Instanz des Spielfeld-Panels
     *
     * @return panel
     */
    public static Field getField() {
        return field;
    }

    /**
     * Instanz der Speichern-Aktion
     *
     * @return saveAction
     */
    public static SaveAction getSaveAction() {
        return saveAction;
    }

    public static SetMoveNameAction getSetNameAction() {
        return setNameAction;
    }

    /**
     * Instanz der Schlie�en-Aktion
     *
     * @return close Action
     */
    public static CloseAction getCloseAction() {
        return closeAction;
    }

    /**
     * Methode um eine tiefe Objektkopie per Serialisierung zu erzeugen!
     *
     * @param oldObj (muss Serializable implementieren)
     * @return tiefe Kopie
     * @throws Exception
     */
    public static Object deepCopy(Object oldObj) throws Exception {
        Object clone = null;
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(oldObj);
            oos.flush();
            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));
            clone = ois.readObject();
            oos.close();
            ois.close();
        } catch (Exception e) {
            //$NON-NLS-1$
            System.out.println(""Exception in ObjectCloner = "" + e);
            throw (e);
        }
        return clone;
    }

    /**
     * Liefert die Version der Anwendung als String
     *
     * @return version
     */
    public static String getVersion() {
        //$NON-NLS-1$
        return ""1.0.5"";
    }
}
","// Main_0Test.java
package visu.handball.moves;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import visu.handball.moves.actions.AboutAction;
import visu.handball.moves.actions.ChangeColorsAction;
import visu.handball.moves.actions.CloseAction;
import visu.handball.moves.actions.CreateMovePdfAction;
import visu.handball.moves.actions.DeleteEventAction;
import visu.handball.moves.actions.NewAction;
import visu.handball.moves.actions.NewMoveEventAction;
import visu.handball.moves.actions.NewPassEventAction;
import visu.handball.moves.actions.NewSequenceAction;
import visu.handball.moves.actions.OpenAction;
import visu.handball.moves.actions.PauseAnimationAction;
import visu.handball.moves.actions.PrintActualSequenzAction;
import visu.handball.moves.actions.PrintMoveAction;
import visu.handball.moves.actions.SaveAction;
import visu.handball.moves.actions.SetMoveNameAction;
import visu.handball.moves.actions.StartAnimationAction;
import visu.handball.moves.actions.StartOneSequenceAnimationAction;
import visu.handball.moves.actions.StopAnimationAction;
import visu.handball.moves.controller.CommentController;
import visu.handball.moves.controller.JMenuHelper;
import visu.handball.moves.controller.MouseController;
import visu.handball.moves.model.ColorModel;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.TableHandballModel;
import visu.handball.moves.model.TableSelectionListener;
import visu.handball.moves.resources.Resources;
import visu.handball.moves.views.CommentView;
import visu.handball.moves.views.EventTableCellDelayEditor;
import visu.handball.moves.views.EventTableCellRenderer;
import visu.handball.moves.views.Field;
import visu.handball.moves.views.PlayerToolBar;
import visu.handball.moves.views.StatusBar;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#getColorModel()} method.
*/
class Main_0Test {","```java
package visu.handball.moves;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Test class of {@link Main}.
 * It contains ten unit test cases for the {@link Main#getColorModel()} method.
 */
class Main_0Test {

    @Test
    void testGetColorModelNotNull() {
        ColorModel colorModel = Main.getColorModel();
        assertNotNull(colorModel);
    }

    @Test
    void testGetColorModelSameInstance() {
        ColorModel colorModel1 = Main.getColorModel();
        ColorModel colorModel2 = Main.getColorModel();
        assertSame(colorModel1, colorModel2);
    }

    @Test
    void testGetColorModelIsColorModel() {
        ColorModel colorModel = Main.getColorModel();
        assertTrue(colorModel instanceof ColorModel);
    }

    @Test
    void testGetColorModelNotEqual() {
        ColorModel colorModel1 = Main.getColorModel();
        ColorModel colorModel2 = new ColorModel();
        assertNotEquals(colorModel1, colorModel2);
    }

    @Test
    void testGetColorModelNotNullAfterMain() {
        Main.main(new String[]{});
        ColorModel colorModel = Main.getColorModel();
        assertNotNull(colorModel);
    }

    @Test
    void testGetColorModelSameInstanceAfterMain() {
        Main.main(new String[]{});
        ColorModel colorModel1 = Main.getColorModel();
        ColorModel colorModel2 = Main.getColorModel();
        assertSame(colorModel1, colorModel2);
    }

    @Test
    void testGetColorModelIsColorModelAfterMain() {
        Main.main(new String[]{});
        ColorModel colorModel = Main.getColorModel();
        assertTrue(colorModel instanceof ColorModel);
    }

    @Test
    void testGetColorModelNotEqualAfterMain() {
        Main.main(new String[]{});
        ColorModel colorModel1 = Main.getColorModel();
        ColorModel colorModel2 = new ColorModel();
        assertNotEquals(colorModel1, colorModel2);
    }

    @Test
    void testGetColorModelNotNullMultipleCalls() {
        ColorModel colorModel1 = Main.getColorModel();
        ColorModel colorModel2 = Main.getColorModel();
        ColorModel colorModel3 = Main.getColorModel();
        assertNotNull(colorModel1);
        assertNotNull(colorModel2);
        assertNotNull(colorModel3);
    }
}
```
"
chatcmpl-A5UyKC9D36hTCEWsneNw1FeA2kDl8,/EvoSuiteBenchmark/original/56_jhandballmoves/src/main/java/visu/handball/moves/Main_3Test.java,3.7692456245422363,stop,"// Main.java
/*
 * Created on 31.08.2006
 * Created by Richard Doerfler, Thomas Halm
 * Copyright (C) 2006  Richard Doerfler, Thomas Halm
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package visu.handball.moves;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import visu.handball.moves.actions.AboutAction;
import visu.handball.moves.actions.ChangeColorsAction;
import visu.handball.moves.actions.CloseAction;
import visu.handball.moves.actions.CreateMovePdfAction;
import visu.handball.moves.actions.DeleteEventAction;
import visu.handball.moves.actions.NewAction;
import visu.handball.moves.actions.NewMoveEventAction;
import visu.handball.moves.actions.NewPassEventAction;
import visu.handball.moves.actions.NewSequenceAction;
import visu.handball.moves.actions.OpenAction;
import visu.handball.moves.actions.PauseAnimationAction;
import visu.handball.moves.actions.PrintActualSequenzAction;
import visu.handball.moves.actions.PrintMoveAction;
import visu.handball.moves.actions.SaveAction;
import visu.handball.moves.actions.SetMoveNameAction;
import visu.handball.moves.actions.StartAnimationAction;
import visu.handball.moves.actions.StartOneSequenceAnimationAction;
import visu.handball.moves.actions.StopAnimationAction;
import visu.handball.moves.controller.CommentController;
import visu.handball.moves.controller.JMenuHelper;
import visu.handball.moves.controller.MouseController;
import visu.handball.moves.model.ColorModel;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.TableHandballModel;
import visu.handball.moves.model.TableSelectionListener;
import visu.handball.moves.resources.Resources;
import visu.handball.moves.views.CommentView;
import visu.handball.moves.views.EventTableCellDelayEditor;
import visu.handball.moves.views.EventTableCellRenderer;
import visu.handball.moves.views.Field;
import visu.handball.moves.views.PlayerToolBar;
import visu.handball.moves.views.StatusBar;

/**
 * Hauptklasse zum Starten der Anwendung plus den Zugriff auf die entsprechenden Objekt-Instanzen
 * @author tommy
 */
public class Main {

    private static SaveAction saveAction;

    private static CloseAction closeAction;

    private static SetMoveNameAction setNameAction;

    private static JFrame window;

    private static Field field;

    private static CommentView commentView;

    private static ColorModel colorModel;

    /**
     * Liefert die Instanz des ColorModels
     *
     * @return colorModel
     */
    public static ColorModel getColorModel() {
        return colorModel;
    }

    /**
     * Main-Methode zum Starten der Anwendung
     *
     * @param args
     */
    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            System.out.println(//$NON-NLS-1$
            Resources.getString(""error.lookAndFell""));
        }
        //$NON-NLS-1$
        window = new JFrame(Resources.getString(""app.title""));
        //$NON-NLS-1$ //$NON-NLS-2$
        window.setIconImage(createImageIcon(""images/icon.gif"", """").getImage());
        JPanel content = new JPanel(new BorderLayout());
        JDesktopPane desktop = new JDesktopPane();
        window.setContentPane(content);
        content.add(desktop, BorderLayout.CENTER);
        desktop.setBackground(new Color(255, 255, 174));
        desktop.setDragMode(JDesktopPane.OUTLINE_DRAG_MODE);
        // Create HandballModel
        HandballModel handballModel = createHandballModel();
        // Create ColorModel
        colorModel = new ColorModel();
        // Statusbar
        StatusBar statusBar = createStatusBar(handballModel);
        content.add(statusBar, BorderLayout.SOUTH);
        // Create Menu
        JMenuBar menu = createHandballMenu(handballModel);
        window.setJMenuBar(menu);
        // Create HandballField
        field = new Field(handballModel, colorModel);
        JInternalFrame handballField = new //$NON-NLS-1$
        JInternalFrame(//$NON-NLS-1$
        Resources.getString(""field.title""), //$NON-NLS-1$
        false, false, false, true);
        handballField.setLocation(10, 10);
        handballField.add(field);
        handballField.setVisible(true);
        handballField.pack();
        desktop.add(handballField);
        // Create MouseController
        MouseController mouse = new MouseController(handballModel, handballField);
        field.addMouseListener(mouse);
        field.addMouseMotionListener(mouse);
        // Add Statusbar as Listener
        field.addMouseMotionListener(statusBar);
        // Create ToolBar
        PlayerToolBar playerBar = new PlayerToolBar(handballModel);
        content.add(playerBar, BorderLayout.NORTH);
        // Create EventView
        JPanel tablePanel = createTablePanel(handballModel);
        JInternalFrame eventView = new //$NON-NLS-1$
        JInternalFrame(//$NON-NLS-1$
        Resources.getString(""events.title""), //$NON-NLS-1$
        true, false, false, true);
        eventView.add(tablePanel);
        eventView.setLocation(20 + handballField.getWidth(), 10);
        eventView.setVisible(true);
        eventView.setSize(450, 400);
        desktop.add(eventView);
        // Create CommentView
        //$NON-NLS-1$
        commentView = new CommentView(Resources.getString(""comment.title""));
        commentView.setLocation(20 + handballField.getWidth(), 420);
        commentView.setSize(450, handballField.getHeight() - eventView.getHeight() - 10);
        commentView.setVisible(true);
        //Controller für CommentView erzeugen
        new CommentController(handballModel, commentView);
        desktop.add(commentView);
        window.setSize(1000, 700);
        locateOnScreenCenter(window);
        window.addWindowListener(new WindowAdapter() {

            public void windowClosing(WindowEvent e) {
                Main.getCloseAction().actionPerformed(null);
            }
        });
        window.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        window.setVisible(true);
    }

    private static JMenuBar createHandballMenu(HandballModel handballModel) {
        JMenuBar mbar;
        JMenu menuDatei, menuHilfe, menuEinstellungen;
        // Hauptmenue einrichten
        mbar = new JMenuBar();
        //$NON-NLS-1$
        menuDatei = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.file""));
        //$NON-NLS-1$
        menuEinstellungen = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.settings""));
        //$NON-NLS-1$
        menuHilfe = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.about""));
        // Einträge fuer Datei
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        NewAction(handballModel));
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        OpenAction(handballModel));
        //Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        saveAction = new SaveAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", saveAction);
        // Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        setNameAction = new SetMoveNameAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", setNameAction);
        //Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        //Drucken einfügen
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        PrintActualSequenzAction(handballModel));
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", new PrintMoveAction(handballModel));
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", new CreateMovePdfAction(handballModel));
        // Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        closeAction = new CloseAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", closeAction);
        // Einträge für Einstellungen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuEinstellungen, """", new ChangeColorsAction());
        // Einträge für Hilfe
        //$NON-NLS-1$
        JMenuHelper.//$NON-NLS-1$
        addMenuItem(//$NON-NLS-1$
        menuHilfe, //$NON-NLS-1$
        """", new AboutAction());
        return mbar;
    }

    private static JPanel createTablePanel(HandballModel handballModel) {
        TableHandballModel tableModel = new TableHandballModel(handballModel);
        JTable table = new JTable(tableModel);
        table.setDefaultRenderer(Object.class, new EventTableCellRenderer());
        table.getColumnModel().getColumn(0).setPreferredWidth(100);
        table.getColumnModel().getColumn(1).setPreferredWidth(200);
        EventTableCellDelayEditor delayEditor = new EventTableCellDelayEditor();
        table.getColumnModel().getColumn(3).setCellEditor(delayEditor);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.getSelectionModel().addListSelectionListener(new TableSelectionListener(tableModel));
        JPanel panel = new JPanel(new BorderLayout());
        //$NON-NLS-1$
        JToolBar toolBar = new JToolBar(Resources.getString(""toolbar.title""));
        toolBar.add(new NewMoveEventAction(handballModel));
        toolBar.add(new NewSequenceAction(handballModel));
        toolBar.add(new NewPassEventAction(handballModel));
        toolBar.add(new DeleteEventAction(handballModel));
        toolBar.addSeparator();
        toolBar.add(new StartOneSequenceAnimationAction(handballModel));
        toolBar.add(new StartAnimationAction(handballModel));
        toolBar.add(new PauseAnimationAction(handballModel));
        toolBar.add(new StopAnimationAction(handballModel));
        JScrollPane scroll = new JScrollPane(table);
        panel.add(scroll, BorderLayout.CENTER);
        panel.add(toolBar, BorderLayout.PAGE_START);
        return panel;
    }

    private static StatusBar createStatusBar(HandballModel model) {
        StatusBar statusBar = new StatusBar(model);
        return statusBar;
    }

    /**
     * Basierend auf der relativen Pfad (relativ zum Ort dieser Klasse) und der Beschreibung
     * wird ein Grafik geladen und ein ImageIcon-Objekt erstellt.
     * @param path
     * @param description
     *
     * @return imageIcon
     */
    public static ImageIcon createImageIcon(String path, String description) {
        URL url = Main.class.getResource(path);
        return new ImageIcon(url, description);
    }

    /**
     * Erzeugt auf Basis eines relativen Pfads (relativ zum Ort dieser Klasse) eine URL.
     * @param path
     *
     * @return url
     */
    public static URL getResource(String path) {
        return Main.class.getResource(path);
    }

    /**
     * Methode um Component-Objekte (z.B. Fenster) in der Mitte des Bildschirms zu positionieren
     * @param component
     */
    public static void locateOnScreenCenter(Component component) {
        Dimension paneSize = component.getSize();
        Dimension screenSize = component.getToolkit().getScreenSize();
        component.setLocation((screenSize.width - paneSize.width) / 2, (screenSize.height - paneSize.height) / 2);
    }

    private static HandballModel createHandballModel() {
        HandballModel model = new HandballModel();
        return model;
    }

    /**
     * Die Instanz des Anwendungsfensters
     *
     * @return window
     */
    public static JFrame getWindow() {
        return window;
    }

    /**
     * Instanz des Spielfeld-Panels
     *
     * @return panel
     */
    public static Field getField() {
        return field;
    }

    /**
     * Instanz der Speichern-Aktion
     *
     * @return saveAction
     */
    public static SaveAction getSaveAction() {
        return saveAction;
    }

    public static SetMoveNameAction getSetNameAction() {
        return setNameAction;
    }

    /**
     * Instanz der Schlie�en-Aktion
     *
     * @return close Action
     */
    public static CloseAction getCloseAction() {
        return closeAction;
    }

    /**
     * Methode um eine tiefe Objektkopie per Serialisierung zu erzeugen!
     *
     * @param oldObj (muss Serializable implementieren)
     * @return tiefe Kopie
     * @throws Exception
     */
    public static Object deepCopy(Object oldObj) throws Exception {
        Object clone = null;
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(oldObj);
            oos.flush();
            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));
            clone = ois.readObject();
            oos.close();
            ois.close();
        } catch (Exception e) {
            //$NON-NLS-1$
            System.out.println(""Exception in ObjectCloner = "" + e);
            throw (e);
        }
        return clone;
    }

    /**
     * Liefert die Version der Anwendung als String
     *
     * @return version
     */
    public static String getVersion() {
        //$NON-NLS-1$
        return ""1.0.5"";
    }
}
","// Main_3Test.java
package visu.handball.moves;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import visu.handball.moves.actions.AboutAction;
import visu.handball.moves.actions.ChangeColorsAction;
import visu.handball.moves.actions.CloseAction;
import visu.handball.moves.actions.CreateMovePdfAction;
import visu.handball.moves.actions.DeleteEventAction;
import visu.handball.moves.actions.NewAction;
import visu.handball.moves.actions.NewMoveEventAction;
import visu.handball.moves.actions.NewPassEventAction;
import visu.handball.moves.actions.NewSequenceAction;
import visu.handball.moves.actions.OpenAction;
import visu.handball.moves.actions.PauseAnimationAction;
import visu.handball.moves.actions.PrintActualSequenzAction;
import visu.handball.moves.actions.PrintMoveAction;
import visu.handball.moves.actions.SaveAction;
import visu.handball.moves.actions.SetMoveNameAction;
import visu.handball.moves.actions.StartAnimationAction;
import visu.handball.moves.actions.StartOneSequenceAnimationAction;
import visu.handball.moves.actions.StopAnimationAction;
import visu.handball.moves.controller.CommentController;
import visu.handball.moves.controller.JMenuHelper;
import visu.handball.moves.controller.MouseController;
import visu.handball.moves.model.ColorModel;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.TableHandballModel;
import visu.handball.moves.model.TableSelectionListener;
import visu.handball.moves.resources.Resources;
import visu.handball.moves.views.CommentView;
import visu.handball.moves.views.EventTableCellDelayEditor;
import visu.handball.moves.views.EventTableCellRenderer;
import visu.handball.moves.views.Field;
import visu.handball.moves.views.PlayerToolBar;
import visu.handball.moves.views.StatusBar;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#getWindow()} method.
*/
class Main_3Test {","```java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class Main_3Test {

    @Test
    void testGetWindowNotNull() {
        assertNotNull(Main.getWindow());
    }

    @Test
    void testGetWindowInstance() {
        assertTrue(Main.getWindow() instanceof JFrame);
    }

    @Test
    void testGetWindowVisibility() {
        assertTrue(Main.getWindow().isVisible());
    }

    @Test
    void testGetWindowTitle() {
        assertEquals(Resources.getString(""app.title""), Main.getWindow().getTitle());
    }

    @Test
    void testGetWindowWidth() {
        assertEquals(1000, Main.getWindow().getWidth());
    }

    @Test
    void testGetWindowHeight() {
        assertEquals(700, Main.getWindow().getHeight());
    }

    @Test
    void testGetWindowCloseOperation() {
        assertEquals(JFrame.DO_NOTHING_ON_CLOSE, Main.getWindow().getDefaultCloseOperation());
    }

    @Test
    void testGetWindowIcon() {
        assertNotNull(Main.getWindow().getIconImage());
    }

    @Test
    void testGetWindowLayout() {
        assertTrue(Main.getWindow().getLayout() instanceof BorderLayout);
    }

    @Test
    void testGetWindowContentPane() {
        assertNotNull(Main.getWindow().getContentPane());
    }
}
```"
chatcmpl-A5UzNGlVamHG2vdNwSXiZHbAynotl,/EvoSuiteBenchmark/original/56_jhandballmoves/src/main/java/visu/handball/moves/Main_4Test.java,5.0911314487457275,stop,"// Main.java
/*
 * Created on 31.08.2006
 * Created by Richard Doerfler, Thomas Halm
 * Copyright (C) 2006  Richard Doerfler, Thomas Halm
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package visu.handball.moves;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import visu.handball.moves.actions.AboutAction;
import visu.handball.moves.actions.ChangeColorsAction;
import visu.handball.moves.actions.CloseAction;
import visu.handball.moves.actions.CreateMovePdfAction;
import visu.handball.moves.actions.DeleteEventAction;
import visu.handball.moves.actions.NewAction;
import visu.handball.moves.actions.NewMoveEventAction;
import visu.handball.moves.actions.NewPassEventAction;
import visu.handball.moves.actions.NewSequenceAction;
import visu.handball.moves.actions.OpenAction;
import visu.handball.moves.actions.PauseAnimationAction;
import visu.handball.moves.actions.PrintActualSequenzAction;
import visu.handball.moves.actions.PrintMoveAction;
import visu.handball.moves.actions.SaveAction;
import visu.handball.moves.actions.SetMoveNameAction;
import visu.handball.moves.actions.StartAnimationAction;
import visu.handball.moves.actions.StartOneSequenceAnimationAction;
import visu.handball.moves.actions.StopAnimationAction;
import visu.handball.moves.controller.CommentController;
import visu.handball.moves.controller.JMenuHelper;
import visu.handball.moves.controller.MouseController;
import visu.handball.moves.model.ColorModel;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.TableHandballModel;
import visu.handball.moves.model.TableSelectionListener;
import visu.handball.moves.resources.Resources;
import visu.handball.moves.views.CommentView;
import visu.handball.moves.views.EventTableCellDelayEditor;
import visu.handball.moves.views.EventTableCellRenderer;
import visu.handball.moves.views.Field;
import visu.handball.moves.views.PlayerToolBar;
import visu.handball.moves.views.StatusBar;

/**
 * Hauptklasse zum Starten der Anwendung plus den Zugriff auf die entsprechenden Objekt-Instanzen
 * @author tommy
 */
public class Main {

    private static SaveAction saveAction;

    private static CloseAction closeAction;

    private static SetMoveNameAction setNameAction;

    private static JFrame window;

    private static Field field;

    private static CommentView commentView;

    private static ColorModel colorModel;

    /**
     * Liefert die Instanz des ColorModels
     *
     * @return colorModel
     */
    public static ColorModel getColorModel() {
        return colorModel;
    }

    /**
     * Main-Methode zum Starten der Anwendung
     *
     * @param args
     */
    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            System.out.println(//$NON-NLS-1$
            Resources.getString(""error.lookAndFell""));
        }
        //$NON-NLS-1$
        window = new JFrame(Resources.getString(""app.title""));
        //$NON-NLS-1$ //$NON-NLS-2$
        window.setIconImage(createImageIcon(""images/icon.gif"", """").getImage());
        JPanel content = new JPanel(new BorderLayout());
        JDesktopPane desktop = new JDesktopPane();
        window.setContentPane(content);
        content.add(desktop, BorderLayout.CENTER);
        desktop.setBackground(new Color(255, 255, 174));
        desktop.setDragMode(JDesktopPane.OUTLINE_DRAG_MODE);
        // Create HandballModel
        HandballModel handballModel = createHandballModel();
        // Create ColorModel
        colorModel = new ColorModel();
        // Statusbar
        StatusBar statusBar = createStatusBar(handballModel);
        content.add(statusBar, BorderLayout.SOUTH);
        // Create Menu
        JMenuBar menu = createHandballMenu(handballModel);
        window.setJMenuBar(menu);
        // Create HandballField
        field = new Field(handballModel, colorModel);
        JInternalFrame handballField = new //$NON-NLS-1$
        JInternalFrame(//$NON-NLS-1$
        Resources.getString(""field.title""), //$NON-NLS-1$
        false, false, false, true);
        handballField.setLocation(10, 10);
        handballField.add(field);
        handballField.setVisible(true);
        handballField.pack();
        desktop.add(handballField);
        // Create MouseController
        MouseController mouse = new MouseController(handballModel, handballField);
        field.addMouseListener(mouse);
        field.addMouseMotionListener(mouse);
        // Add Statusbar as Listener
        field.addMouseMotionListener(statusBar);
        // Create ToolBar
        PlayerToolBar playerBar = new PlayerToolBar(handballModel);
        content.add(playerBar, BorderLayout.NORTH);
        // Create EventView
        JPanel tablePanel = createTablePanel(handballModel);
        JInternalFrame eventView = new //$NON-NLS-1$
        JInternalFrame(//$NON-NLS-1$
        Resources.getString(""events.title""), //$NON-NLS-1$
        true, false, false, true);
        eventView.add(tablePanel);
        eventView.setLocation(20 + handballField.getWidth(), 10);
        eventView.setVisible(true);
        eventView.setSize(450, 400);
        desktop.add(eventView);
        // Create CommentView
        //$NON-NLS-1$
        commentView = new CommentView(Resources.getString(""comment.title""));
        commentView.setLocation(20 + handballField.getWidth(), 420);
        commentView.setSize(450, handballField.getHeight() - eventView.getHeight() - 10);
        commentView.setVisible(true);
        //Controller für CommentView erzeugen
        new CommentController(handballModel, commentView);
        desktop.add(commentView);
        window.setSize(1000, 700);
        locateOnScreenCenter(window);
        window.addWindowListener(new WindowAdapter() {

            public void windowClosing(WindowEvent e) {
                Main.getCloseAction().actionPerformed(null);
            }
        });
        window.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        window.setVisible(true);
    }

    private static JMenuBar createHandballMenu(HandballModel handballModel) {
        JMenuBar mbar;
        JMenu menuDatei, menuHilfe, menuEinstellungen;
        // Hauptmenue einrichten
        mbar = new JMenuBar();
        //$NON-NLS-1$
        menuDatei = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.file""));
        //$NON-NLS-1$
        menuEinstellungen = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.settings""));
        //$NON-NLS-1$
        menuHilfe = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.about""));
        // Einträge fuer Datei
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        NewAction(handballModel));
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        OpenAction(handballModel));
        //Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        saveAction = new SaveAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", saveAction);
        // Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        setNameAction = new SetMoveNameAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", setNameAction);
        //Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        //Drucken einfügen
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        PrintActualSequenzAction(handballModel));
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", new PrintMoveAction(handballModel));
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", new CreateMovePdfAction(handballModel));
        // Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        closeAction = new CloseAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", closeAction);
        // Einträge für Einstellungen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuEinstellungen, """", new ChangeColorsAction());
        // Einträge für Hilfe
        //$NON-NLS-1$
        JMenuHelper.//$NON-NLS-1$
        addMenuItem(//$NON-NLS-1$
        menuHilfe, //$NON-NLS-1$
        """", new AboutAction());
        return mbar;
    }

    private static JPanel createTablePanel(HandballModel handballModel) {
        TableHandballModel tableModel = new TableHandballModel(handballModel);
        JTable table = new JTable(tableModel);
        table.setDefaultRenderer(Object.class, new EventTableCellRenderer());
        table.getColumnModel().getColumn(0).setPreferredWidth(100);
        table.getColumnModel().getColumn(1).setPreferredWidth(200);
        EventTableCellDelayEditor delayEditor = new EventTableCellDelayEditor();
        table.getColumnModel().getColumn(3).setCellEditor(delayEditor);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.getSelectionModel().addListSelectionListener(new TableSelectionListener(tableModel));
        JPanel panel = new JPanel(new BorderLayout());
        //$NON-NLS-1$
        JToolBar toolBar = new JToolBar(Resources.getString(""toolbar.title""));
        toolBar.add(new NewMoveEventAction(handballModel));
        toolBar.add(new NewSequenceAction(handballModel));
        toolBar.add(new NewPassEventAction(handballModel));
        toolBar.add(new DeleteEventAction(handballModel));
        toolBar.addSeparator();
        toolBar.add(new StartOneSequenceAnimationAction(handballModel));
        toolBar.add(new StartAnimationAction(handballModel));
        toolBar.add(new PauseAnimationAction(handballModel));
        toolBar.add(new StopAnimationAction(handballModel));
        JScrollPane scroll = new JScrollPane(table);
        panel.add(scroll, BorderLayout.CENTER);
        panel.add(toolBar, BorderLayout.PAGE_START);
        return panel;
    }

    private static StatusBar createStatusBar(HandballModel model) {
        StatusBar statusBar = new StatusBar(model);
        return statusBar;
    }

    /**
     * Basierend auf der relativen Pfad (relativ zum Ort dieser Klasse) und der Beschreibung
     * wird ein Grafik geladen und ein ImageIcon-Objekt erstellt.
     * @param path
     * @param description
     *
     * @return imageIcon
     */
    public static ImageIcon createImageIcon(String path, String description) {
        URL url = Main.class.getResource(path);
        return new ImageIcon(url, description);
    }

    /**
     * Erzeugt auf Basis eines relativen Pfads (relativ zum Ort dieser Klasse) eine URL.
     * @param path
     *
     * @return url
     */
    public static URL getResource(String path) {
        return Main.class.getResource(path);
    }

    /**
     * Methode um Component-Objekte (z.B. Fenster) in der Mitte des Bildschirms zu positionieren
     * @param component
     */
    public static void locateOnScreenCenter(Component component) {
        Dimension paneSize = component.getSize();
        Dimension screenSize = component.getToolkit().getScreenSize();
        component.setLocation((screenSize.width - paneSize.width) / 2, (screenSize.height - paneSize.height) / 2);
    }

    private static HandballModel createHandballModel() {
        HandballModel model = new HandballModel();
        return model;
    }

    /**
     * Die Instanz des Anwendungsfensters
     *
     * @return window
     */
    public static JFrame getWindow() {
        return window;
    }

    /**
     * Instanz des Spielfeld-Panels
     *
     * @return panel
     */
    public static Field getField() {
        return field;
    }

    /**
     * Instanz der Speichern-Aktion
     *
     * @return saveAction
     */
    public static SaveAction getSaveAction() {
        return saveAction;
    }

    public static SetMoveNameAction getSetNameAction() {
        return setNameAction;
    }

    /**
     * Instanz der Schlie�en-Aktion
     *
     * @return close Action
     */
    public static CloseAction getCloseAction() {
        return closeAction;
    }

    /**
     * Methode um eine tiefe Objektkopie per Serialisierung zu erzeugen!
     *
     * @param oldObj (muss Serializable implementieren)
     * @return tiefe Kopie
     * @throws Exception
     */
    public static Object deepCopy(Object oldObj) throws Exception {
        Object clone = null;
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(oldObj);
            oos.flush();
            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));
            clone = ois.readObject();
            oos.close();
            ois.close();
        } catch (Exception e) {
            //$NON-NLS-1$
            System.out.println(""Exception in ObjectCloner = "" + e);
            throw (e);
        }
        return clone;
    }

    /**
     * Liefert die Version der Anwendung als String
     *
     * @return version
     */
    public static String getVersion() {
        //$NON-NLS-1$
        return ""1.0.5"";
    }
}
","// Main_4Test.java
package visu.handball.moves;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import visu.handball.moves.actions.AboutAction;
import visu.handball.moves.actions.ChangeColorsAction;
import visu.handball.moves.actions.CloseAction;
import visu.handball.moves.actions.CreateMovePdfAction;
import visu.handball.moves.actions.DeleteEventAction;
import visu.handball.moves.actions.NewAction;
import visu.handball.moves.actions.NewMoveEventAction;
import visu.handball.moves.actions.NewPassEventAction;
import visu.handball.moves.actions.NewSequenceAction;
import visu.handball.moves.actions.OpenAction;
import visu.handball.moves.actions.PauseAnimationAction;
import visu.handball.moves.actions.PrintActualSequenzAction;
import visu.handball.moves.actions.PrintMoveAction;
import visu.handball.moves.actions.SaveAction;
import visu.handball.moves.actions.SetMoveNameAction;
import visu.handball.moves.actions.StartAnimationAction;
import visu.handball.moves.actions.StartOneSequenceAnimationAction;
import visu.handball.moves.actions.StopAnimationAction;
import visu.handball.moves.controller.CommentController;
import visu.handball.moves.controller.JMenuHelper;
import visu.handball.moves.controller.MouseController;
import visu.handball.moves.model.ColorModel;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.TableHandballModel;
import visu.handball.moves.model.TableSelectionListener;
import visu.handball.moves.resources.Resources;
import visu.handball.moves.views.CommentView;
import visu.handball.moves.views.EventTableCellDelayEditor;
import visu.handball.moves.views.EventTableCellRenderer;
import visu.handball.moves.views.Field;
import visu.handball.moves.views.PlayerToolBar;
import visu.handball.moves.views.StatusBar;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#getField()} method.
*/
class Main_4Test {","```java
package visu.handball.moves;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Test class of {@link Main}.
 * It contains ten unit test cases for the {@link Main#getField()} method.
 */
class Main_4Test {

    @Test
    void testGetFieldNotNull() {
        assertNotNull(Main.getField());
    }

    @Test
    void testGetFieldInstance() {
        assertTrue(Main.getField() instanceof Field);
    }

    @Test
    void testGetFieldSameInstance() {
        assertSame(Main.getField(), Main.getField());
    }

    @Test
    void testGetFieldNotSameInstance() {
        Field field1 = Main.getField();
        Field field2 = new Field(new HandballModel(), new ColorModel());
        assertNotSame(field1, field2);
    }

    @Test
    void testGetFieldDimensions() {
        Field field = Main.getField();
        assertNotNull(field);
        assertEquals(0, field.getX());
        assertEquals(0, field.getY());
        assertEquals(100, field.getWidth());
        assertEquals(100, field.getHeight());
    }

    @Test
    void testGetFieldColorModelNotNull() {
        assertNotNull(Main.getField().getColorModel());
    }

    @Test
    void testGetFieldHandballModelNotNull() {
        assertNotNull(Main.getField().getHandballModel());
    }

    @Test
    void testGetFieldColorModelInstance() {
        assertTrue(Main.getField().getColorModel() instanceof ColorModel);
    }

    @Test
    void testGetFieldHandballModelInstance() {
        assertTrue(Main.getField().getHandballModel() instanceof HandballModel);
    }
}
```
"
chatcmpl-A5V0Qm2iOdWYieqdUcoyfFNK6ecQE,/EvoSuiteBenchmark/original/56_jhandballmoves/src/main/java/visu/handball/moves/Main_5Test.java,7.147807836532593,stop,"// Main.java
/*
 * Created on 31.08.2006
 * Created by Richard Doerfler, Thomas Halm
 * Copyright (C) 2006  Richard Doerfler, Thomas Halm
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package visu.handball.moves;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import visu.handball.moves.actions.AboutAction;
import visu.handball.moves.actions.ChangeColorsAction;
import visu.handball.moves.actions.CloseAction;
import visu.handball.moves.actions.CreateMovePdfAction;
import visu.handball.moves.actions.DeleteEventAction;
import visu.handball.moves.actions.NewAction;
import visu.handball.moves.actions.NewMoveEventAction;
import visu.handball.moves.actions.NewPassEventAction;
import visu.handball.moves.actions.NewSequenceAction;
import visu.handball.moves.actions.OpenAction;
import visu.handball.moves.actions.PauseAnimationAction;
import visu.handball.moves.actions.PrintActualSequenzAction;
import visu.handball.moves.actions.PrintMoveAction;
import visu.handball.moves.actions.SaveAction;
import visu.handball.moves.actions.SetMoveNameAction;
import visu.handball.moves.actions.StartAnimationAction;
import visu.handball.moves.actions.StartOneSequenceAnimationAction;
import visu.handball.moves.actions.StopAnimationAction;
import visu.handball.moves.controller.CommentController;
import visu.handball.moves.controller.JMenuHelper;
import visu.handball.moves.controller.MouseController;
import visu.handball.moves.model.ColorModel;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.TableHandballModel;
import visu.handball.moves.model.TableSelectionListener;
import visu.handball.moves.resources.Resources;
import visu.handball.moves.views.CommentView;
import visu.handball.moves.views.EventTableCellDelayEditor;
import visu.handball.moves.views.EventTableCellRenderer;
import visu.handball.moves.views.Field;
import visu.handball.moves.views.PlayerToolBar;
import visu.handball.moves.views.StatusBar;

/**
 * Hauptklasse zum Starten der Anwendung plus den Zugriff auf die entsprechenden Objekt-Instanzen
 * @author tommy
 */
public class Main {

    private static SaveAction saveAction;

    private static CloseAction closeAction;

    private static SetMoveNameAction setNameAction;

    private static JFrame window;

    private static Field field;

    private static CommentView commentView;

    private static ColorModel colorModel;

    /**
     * Liefert die Instanz des ColorModels
     *
     * @return colorModel
     */
    public static ColorModel getColorModel() {
        return colorModel;
    }

    /**
     * Main-Methode zum Starten der Anwendung
     *
     * @param args
     */
    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            System.out.println(//$NON-NLS-1$
            Resources.getString(""error.lookAndFell""));
        }
        //$NON-NLS-1$
        window = new JFrame(Resources.getString(""app.title""));
        //$NON-NLS-1$ //$NON-NLS-2$
        window.setIconImage(createImageIcon(""images/icon.gif"", """").getImage());
        JPanel content = new JPanel(new BorderLayout());
        JDesktopPane desktop = new JDesktopPane();
        window.setContentPane(content);
        content.add(desktop, BorderLayout.CENTER);
        desktop.setBackground(new Color(255, 255, 174));
        desktop.setDragMode(JDesktopPane.OUTLINE_DRAG_MODE);
        // Create HandballModel
        HandballModel handballModel = createHandballModel();
        // Create ColorModel
        colorModel = new ColorModel();
        // Statusbar
        StatusBar statusBar = createStatusBar(handballModel);
        content.add(statusBar, BorderLayout.SOUTH);
        // Create Menu
        JMenuBar menu = createHandballMenu(handballModel);
        window.setJMenuBar(menu);
        // Create HandballField
        field = new Field(handballModel, colorModel);
        JInternalFrame handballField = new //$NON-NLS-1$
        JInternalFrame(//$NON-NLS-1$
        Resources.getString(""field.title""), //$NON-NLS-1$
        false, false, false, true);
        handballField.setLocation(10, 10);
        handballField.add(field);
        handballField.setVisible(true);
        handballField.pack();
        desktop.add(handballField);
        // Create MouseController
        MouseController mouse = new MouseController(handballModel, handballField);
        field.addMouseListener(mouse);
        field.addMouseMotionListener(mouse);
        // Add Statusbar as Listener
        field.addMouseMotionListener(statusBar);
        // Create ToolBar
        PlayerToolBar playerBar = new PlayerToolBar(handballModel);
        content.add(playerBar, BorderLayout.NORTH);
        // Create EventView
        JPanel tablePanel = createTablePanel(handballModel);
        JInternalFrame eventView = new //$NON-NLS-1$
        JInternalFrame(//$NON-NLS-1$
        Resources.getString(""events.title""), //$NON-NLS-1$
        true, false, false, true);
        eventView.add(tablePanel);
        eventView.setLocation(20 + handballField.getWidth(), 10);
        eventView.setVisible(true);
        eventView.setSize(450, 400);
        desktop.add(eventView);
        // Create CommentView
        //$NON-NLS-1$
        commentView = new CommentView(Resources.getString(""comment.title""));
        commentView.setLocation(20 + handballField.getWidth(), 420);
        commentView.setSize(450, handballField.getHeight() - eventView.getHeight() - 10);
        commentView.setVisible(true);
        //Controller für CommentView erzeugen
        new CommentController(handballModel, commentView);
        desktop.add(commentView);
        window.setSize(1000, 700);
        locateOnScreenCenter(window);
        window.addWindowListener(new WindowAdapter() {

            public void windowClosing(WindowEvent e) {
                Main.getCloseAction().actionPerformed(null);
            }
        });
        window.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        window.setVisible(true);
    }

    private static JMenuBar createHandballMenu(HandballModel handballModel) {
        JMenuBar mbar;
        JMenu menuDatei, menuHilfe, menuEinstellungen;
        // Hauptmenue einrichten
        mbar = new JMenuBar();
        //$NON-NLS-1$
        menuDatei = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.file""));
        //$NON-NLS-1$
        menuEinstellungen = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.settings""));
        //$NON-NLS-1$
        menuHilfe = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.about""));
        // Einträge fuer Datei
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        NewAction(handballModel));
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        OpenAction(handballModel));
        //Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        saveAction = new SaveAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", saveAction);
        // Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        setNameAction = new SetMoveNameAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", setNameAction);
        //Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        //Drucken einfügen
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        PrintActualSequenzAction(handballModel));
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", new PrintMoveAction(handballModel));
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", new CreateMovePdfAction(handballModel));
        // Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        closeAction = new CloseAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", closeAction);
        // Einträge für Einstellungen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuEinstellungen, """", new ChangeColorsAction());
        // Einträge für Hilfe
        //$NON-NLS-1$
        JMenuHelper.//$NON-NLS-1$
        addMenuItem(//$NON-NLS-1$
        menuHilfe, //$NON-NLS-1$
        """", new AboutAction());
        return mbar;
    }

    private static JPanel createTablePanel(HandballModel handballModel) {
        TableHandballModel tableModel = new TableHandballModel(handballModel);
        JTable table = new JTable(tableModel);
        table.setDefaultRenderer(Object.class, new EventTableCellRenderer());
        table.getColumnModel().getColumn(0).setPreferredWidth(100);
        table.getColumnModel().getColumn(1).setPreferredWidth(200);
        EventTableCellDelayEditor delayEditor = new EventTableCellDelayEditor();
        table.getColumnModel().getColumn(3).setCellEditor(delayEditor);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.getSelectionModel().addListSelectionListener(new TableSelectionListener(tableModel));
        JPanel panel = new JPanel(new BorderLayout());
        //$NON-NLS-1$
        JToolBar toolBar = new JToolBar(Resources.getString(""toolbar.title""));
        toolBar.add(new NewMoveEventAction(handballModel));
        toolBar.add(new NewSequenceAction(handballModel));
        toolBar.add(new NewPassEventAction(handballModel));
        toolBar.add(new DeleteEventAction(handballModel));
        toolBar.addSeparator();
        toolBar.add(new StartOneSequenceAnimationAction(handballModel));
        toolBar.add(new StartAnimationAction(handballModel));
        toolBar.add(new PauseAnimationAction(handballModel));
        toolBar.add(new StopAnimationAction(handballModel));
        JScrollPane scroll = new JScrollPane(table);
        panel.add(scroll, BorderLayout.CENTER);
        panel.add(toolBar, BorderLayout.PAGE_START);
        return panel;
    }

    private static StatusBar createStatusBar(HandballModel model) {
        StatusBar statusBar = new StatusBar(model);
        return statusBar;
    }

    /**
     * Basierend auf der relativen Pfad (relativ zum Ort dieser Klasse) und der Beschreibung
     * wird ein Grafik geladen und ein ImageIcon-Objekt erstellt.
     * @param path
     * @param description
     *
     * @return imageIcon
     */
    public static ImageIcon createImageIcon(String path, String description) {
        URL url = Main.class.getResource(path);
        return new ImageIcon(url, description);
    }

    /**
     * Erzeugt auf Basis eines relativen Pfads (relativ zum Ort dieser Klasse) eine URL.
     * @param path
     *
     * @return url
     */
    public static URL getResource(String path) {
        return Main.class.getResource(path);
    }

    /**
     * Methode um Component-Objekte (z.B. Fenster) in der Mitte des Bildschirms zu positionieren
     * @param component
     */
    public static void locateOnScreenCenter(Component component) {
        Dimension paneSize = component.getSize();
        Dimension screenSize = component.getToolkit().getScreenSize();
        component.setLocation((screenSize.width - paneSize.width) / 2, (screenSize.height - paneSize.height) / 2);
    }

    private static HandballModel createHandballModel() {
        HandballModel model = new HandballModel();
        return model;
    }

    /**
     * Die Instanz des Anwendungsfensters
     *
     * @return window
     */
    public static JFrame getWindow() {
        return window;
    }

    /**
     * Instanz des Spielfeld-Panels
     *
     * @return panel
     */
    public static Field getField() {
        return field;
    }

    /**
     * Instanz der Speichern-Aktion
     *
     * @return saveAction
     */
    public static SaveAction getSaveAction() {
        return saveAction;
    }

    public static SetMoveNameAction getSetNameAction() {
        return setNameAction;
    }

    /**
     * Instanz der Schlie�en-Aktion
     *
     * @return close Action
     */
    public static CloseAction getCloseAction() {
        return closeAction;
    }

    /**
     * Methode um eine tiefe Objektkopie per Serialisierung zu erzeugen!
     *
     * @param oldObj (muss Serializable implementieren)
     * @return tiefe Kopie
     * @throws Exception
     */
    public static Object deepCopy(Object oldObj) throws Exception {
        Object clone = null;
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(oldObj);
            oos.flush();
            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));
            clone = ois.readObject();
            oos.close();
            ois.close();
        } catch (Exception e) {
            //$NON-NLS-1$
            System.out.println(""Exception in ObjectCloner = "" + e);
            throw (e);
        }
        return clone;
    }

    /**
     * Liefert die Version der Anwendung als String
     *
     * @return version
     */
    public static String getVersion() {
        //$NON-NLS-1$
        return ""1.0.5"";
    }
}
","// Main_5Test.java
package visu.handball.moves;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import visu.handball.moves.actions.AboutAction;
import visu.handball.moves.actions.ChangeColorsAction;
import visu.handball.moves.actions.CloseAction;
import visu.handball.moves.actions.CreateMovePdfAction;
import visu.handball.moves.actions.DeleteEventAction;
import visu.handball.moves.actions.NewAction;
import visu.handball.moves.actions.NewMoveEventAction;
import visu.handball.moves.actions.NewPassEventAction;
import visu.handball.moves.actions.NewSequenceAction;
import visu.handball.moves.actions.OpenAction;
import visu.handball.moves.actions.PauseAnimationAction;
import visu.handball.moves.actions.PrintActualSequenzAction;
import visu.handball.moves.actions.PrintMoveAction;
import visu.handball.moves.actions.SaveAction;
import visu.handball.moves.actions.SetMoveNameAction;
import visu.handball.moves.actions.StartAnimationAction;
import visu.handball.moves.actions.StartOneSequenceAnimationAction;
import visu.handball.moves.actions.StopAnimationAction;
import visu.handball.moves.controller.CommentController;
import visu.handball.moves.controller.JMenuHelper;
import visu.handball.moves.controller.MouseController;
import visu.handball.moves.model.ColorModel;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.TableHandballModel;
import visu.handball.moves.model.TableSelectionListener;
import visu.handball.moves.resources.Resources;
import visu.handball.moves.views.CommentView;
import visu.handball.moves.views.EventTableCellDelayEditor;
import visu.handball.moves.views.EventTableCellRenderer;
import visu.handball.moves.views.Field;
import visu.handball.moves.views.PlayerToolBar;
import visu.handball.moves.views.StatusBar;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#getSaveAction()} method.
*/
class Main_5Test {","```java
package visu.handball.moves;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Test class of {@link Main}.
 * It contains ten unit test cases for the {@link Main#getSaveAction()} method.
 */
class Main_5Test {

    @Test
    void testGetSaveActionNotNull() {
        assertNotNull(Main.getSaveAction());
    }

    @Test
    void testGetSaveActionInstance() {
        assertTrue(Main.getSaveAction() instanceof SaveAction);
    }

    @Test
    void testGetSaveActionSameInstance() {
        SaveAction saveAction1 = Main.getSaveAction();
        SaveAction saveAction2 = Main.getSaveAction();
        assertSame(saveAction1, saveAction2);
    }

    @Test
    void testGetSaveActionNotSameInstance() {
        SaveAction saveAction1 = Main.getSaveAction();
        SaveAction saveAction2 = new SaveAction(new HandballModel());
        assertNotSame(saveAction1, saveAction2);
    }

    @Test
    void testGetSaveActionEquals() {
        SaveAction saveAction1 = Main.getSaveAction();
        SaveAction saveAction2 = new SaveAction(new HandballModel());
        assertEquals(saveAction1, saveAction2);
    }

    @Test
    void testGetSaveActionNotEquals() {
        SaveAction saveAction1 = Main.getSaveAction();
        SaveAction saveAction2 = new SaveAction(new HandballModel());
        assertNotEquals(saveAction1, saveAction2);
    }

    @Test
    void testGetSaveActionNullAfterClose() {
        Main.getCloseAction().actionPerformed(null);
        assertNull(Main.getSaveAction());
    }

    @Test
    void testGetSaveActionNotNullAfterCloseAndOpen() {
        Main.getCloseAction().actionPerformed(null);
        Main.getOpenAction().actionPerformed(null);
        assertNotNull(Main.getSaveAction());
    }

    @Test
    void testGetSaveActionSameInstanceAfterCloseAndOpen() {
        Main.getCloseAction().actionPerformed(null);
        Main.getOpenAction().actionPerformed(null);
        SaveAction saveAction1 = Main.getSaveAction();
        SaveAction saveAction2 = Main.getSaveAction();
        assertSame(saveAction1, saveAction2);
    }

    @Test
    void testGetSaveActionEqualsAfterCloseAndOpen() {
        Main.getCloseAction().actionPerformed(null);
        Main.getOpenAction().actionPerformed(null);
        SaveAction saveAction1 = Main.getSaveAction();
        SaveAction saveAction2 = new SaveAction(new HandballModel());
        assertEquals(saveAction1, saveAction2);
    }
}
```
"
chatcmpl-A5V1TrNsgWL47YfMH2JwzrztUiJOm,/EvoSuiteBenchmark/original/56_jhandballmoves/src/main/java/visu/handball/moves/Main_7Test.java,5.337824583053589,stop,"// Main.java
/*
 * Created on 31.08.2006
 * Created by Richard Doerfler, Thomas Halm
 * Copyright (C) 2006  Richard Doerfler, Thomas Halm
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package visu.handball.moves;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import visu.handball.moves.actions.AboutAction;
import visu.handball.moves.actions.ChangeColorsAction;
import visu.handball.moves.actions.CloseAction;
import visu.handball.moves.actions.CreateMovePdfAction;
import visu.handball.moves.actions.DeleteEventAction;
import visu.handball.moves.actions.NewAction;
import visu.handball.moves.actions.NewMoveEventAction;
import visu.handball.moves.actions.NewPassEventAction;
import visu.handball.moves.actions.NewSequenceAction;
import visu.handball.moves.actions.OpenAction;
import visu.handball.moves.actions.PauseAnimationAction;
import visu.handball.moves.actions.PrintActualSequenzAction;
import visu.handball.moves.actions.PrintMoveAction;
import visu.handball.moves.actions.SaveAction;
import visu.handball.moves.actions.SetMoveNameAction;
import visu.handball.moves.actions.StartAnimationAction;
import visu.handball.moves.actions.StartOneSequenceAnimationAction;
import visu.handball.moves.actions.StopAnimationAction;
import visu.handball.moves.controller.CommentController;
import visu.handball.moves.controller.JMenuHelper;
import visu.handball.moves.controller.MouseController;
import visu.handball.moves.model.ColorModel;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.TableHandballModel;
import visu.handball.moves.model.TableSelectionListener;
import visu.handball.moves.resources.Resources;
import visu.handball.moves.views.CommentView;
import visu.handball.moves.views.EventTableCellDelayEditor;
import visu.handball.moves.views.EventTableCellRenderer;
import visu.handball.moves.views.Field;
import visu.handball.moves.views.PlayerToolBar;
import visu.handball.moves.views.StatusBar;

/**
 * Hauptklasse zum Starten der Anwendung plus den Zugriff auf die entsprechenden Objekt-Instanzen
 * @author tommy
 */
public class Main {

    private static SaveAction saveAction;

    private static CloseAction closeAction;

    private static SetMoveNameAction setNameAction;

    private static JFrame window;

    private static Field field;

    private static CommentView commentView;

    private static ColorModel colorModel;

    /**
     * Liefert die Instanz des ColorModels
     *
     * @return colorModel
     */
    public static ColorModel getColorModel() {
        return colorModel;
    }

    /**
     * Main-Methode zum Starten der Anwendung
     *
     * @param args
     */
    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            System.out.println(//$NON-NLS-1$
            Resources.getString(""error.lookAndFell""));
        }
        //$NON-NLS-1$
        window = new JFrame(Resources.getString(""app.title""));
        //$NON-NLS-1$ //$NON-NLS-2$
        window.setIconImage(createImageIcon(""images/icon.gif"", """").getImage());
        JPanel content = new JPanel(new BorderLayout());
        JDesktopPane desktop = new JDesktopPane();
        window.setContentPane(content);
        content.add(desktop, BorderLayout.CENTER);
        desktop.setBackground(new Color(255, 255, 174));
        desktop.setDragMode(JDesktopPane.OUTLINE_DRAG_MODE);
        // Create HandballModel
        HandballModel handballModel = createHandballModel();
        // Create ColorModel
        colorModel = new ColorModel();
        // Statusbar
        StatusBar statusBar = createStatusBar(handballModel);
        content.add(statusBar, BorderLayout.SOUTH);
        // Create Menu
        JMenuBar menu = createHandballMenu(handballModel);
        window.setJMenuBar(menu);
        // Create HandballField
        field = new Field(handballModel, colorModel);
        JInternalFrame handballField = new //$NON-NLS-1$
        JInternalFrame(//$NON-NLS-1$
        Resources.getString(""field.title""), //$NON-NLS-1$
        false, false, false, true);
        handballField.setLocation(10, 10);
        handballField.add(field);
        handballField.setVisible(true);
        handballField.pack();
        desktop.add(handballField);
        // Create MouseController
        MouseController mouse = new MouseController(handballModel, handballField);
        field.addMouseListener(mouse);
        field.addMouseMotionListener(mouse);
        // Add Statusbar as Listener
        field.addMouseMotionListener(statusBar);
        // Create ToolBar
        PlayerToolBar playerBar = new PlayerToolBar(handballModel);
        content.add(playerBar, BorderLayout.NORTH);
        // Create EventView
        JPanel tablePanel = createTablePanel(handballModel);
        JInternalFrame eventView = new //$NON-NLS-1$
        JInternalFrame(//$NON-NLS-1$
        Resources.getString(""events.title""), //$NON-NLS-1$
        true, false, false, true);
        eventView.add(tablePanel);
        eventView.setLocation(20 + handballField.getWidth(), 10);
        eventView.setVisible(true);
        eventView.setSize(450, 400);
        desktop.add(eventView);
        // Create CommentView
        //$NON-NLS-1$
        commentView = new CommentView(Resources.getString(""comment.title""));
        commentView.setLocation(20 + handballField.getWidth(), 420);
        commentView.setSize(450, handballField.getHeight() - eventView.getHeight() - 10);
        commentView.setVisible(true);
        //Controller für CommentView erzeugen
        new CommentController(handballModel, commentView);
        desktop.add(commentView);
        window.setSize(1000, 700);
        locateOnScreenCenter(window);
        window.addWindowListener(new WindowAdapter() {

            public void windowClosing(WindowEvent e) {
                Main.getCloseAction().actionPerformed(null);
            }
        });
        window.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        window.setVisible(true);
    }

    private static JMenuBar createHandballMenu(HandballModel handballModel) {
        JMenuBar mbar;
        JMenu menuDatei, menuHilfe, menuEinstellungen;
        // Hauptmenue einrichten
        mbar = new JMenuBar();
        //$NON-NLS-1$
        menuDatei = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.file""));
        //$NON-NLS-1$
        menuEinstellungen = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.settings""));
        //$NON-NLS-1$
        menuHilfe = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.about""));
        // Einträge fuer Datei
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        NewAction(handballModel));
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        OpenAction(handballModel));
        //Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        saveAction = new SaveAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", saveAction);
        // Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        setNameAction = new SetMoveNameAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", setNameAction);
        //Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        //Drucken einfügen
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        PrintActualSequenzAction(handballModel));
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", new PrintMoveAction(handballModel));
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", new CreateMovePdfAction(handballModel));
        // Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        closeAction = new CloseAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", closeAction);
        // Einträge für Einstellungen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuEinstellungen, """", new ChangeColorsAction());
        // Einträge für Hilfe
        //$NON-NLS-1$
        JMenuHelper.//$NON-NLS-1$
        addMenuItem(//$NON-NLS-1$
        menuHilfe, //$NON-NLS-1$
        """", new AboutAction());
        return mbar;
    }

    private static JPanel createTablePanel(HandballModel handballModel) {
        TableHandballModel tableModel = new TableHandballModel(handballModel);
        JTable table = new JTable(tableModel);
        table.setDefaultRenderer(Object.class, new EventTableCellRenderer());
        table.getColumnModel().getColumn(0).setPreferredWidth(100);
        table.getColumnModel().getColumn(1).setPreferredWidth(200);
        EventTableCellDelayEditor delayEditor = new EventTableCellDelayEditor();
        table.getColumnModel().getColumn(3).setCellEditor(delayEditor);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.getSelectionModel().addListSelectionListener(new TableSelectionListener(tableModel));
        JPanel panel = new JPanel(new BorderLayout());
        //$NON-NLS-1$
        JToolBar toolBar = new JToolBar(Resources.getString(""toolbar.title""));
        toolBar.add(new NewMoveEventAction(handballModel));
        toolBar.add(new NewSequenceAction(handballModel));
        toolBar.add(new NewPassEventAction(handballModel));
        toolBar.add(new DeleteEventAction(handballModel));
        toolBar.addSeparator();
        toolBar.add(new StartOneSequenceAnimationAction(handballModel));
        toolBar.add(new StartAnimationAction(handballModel));
        toolBar.add(new PauseAnimationAction(handballModel));
        toolBar.add(new StopAnimationAction(handballModel));
        JScrollPane scroll = new JScrollPane(table);
        panel.add(scroll, BorderLayout.CENTER);
        panel.add(toolBar, BorderLayout.PAGE_START);
        return panel;
    }

    private static StatusBar createStatusBar(HandballModel model) {
        StatusBar statusBar = new StatusBar(model);
        return statusBar;
    }

    /**
     * Basierend auf der relativen Pfad (relativ zum Ort dieser Klasse) und der Beschreibung
     * wird ein Grafik geladen und ein ImageIcon-Objekt erstellt.
     * @param path
     * @param description
     *
     * @return imageIcon
     */
    public static ImageIcon createImageIcon(String path, String description) {
        URL url = Main.class.getResource(path);
        return new ImageIcon(url, description);
    }

    /**
     * Erzeugt auf Basis eines relativen Pfads (relativ zum Ort dieser Klasse) eine URL.
     * @param path
     *
     * @return url
     */
    public static URL getResource(String path) {
        return Main.class.getResource(path);
    }

    /**
     * Methode um Component-Objekte (z.B. Fenster) in der Mitte des Bildschirms zu positionieren
     * @param component
     */
    public static void locateOnScreenCenter(Component component) {
        Dimension paneSize = component.getSize();
        Dimension screenSize = component.getToolkit().getScreenSize();
        component.setLocation((screenSize.width - paneSize.width) / 2, (screenSize.height - paneSize.height) / 2);
    }

    private static HandballModel createHandballModel() {
        HandballModel model = new HandballModel();
        return model;
    }

    /**
     * Die Instanz des Anwendungsfensters
     *
     * @return window
     */
    public static JFrame getWindow() {
        return window;
    }

    /**
     * Instanz des Spielfeld-Panels
     *
     * @return panel
     */
    public static Field getField() {
        return field;
    }

    /**
     * Instanz der Speichern-Aktion
     *
     * @return saveAction
     */
    public static SaveAction getSaveAction() {
        return saveAction;
    }

    public static SetMoveNameAction getSetNameAction() {
        return setNameAction;
    }

    /**
     * Instanz der Schlie�en-Aktion
     *
     * @return close Action
     */
    public static CloseAction getCloseAction() {
        return closeAction;
    }

    /**
     * Methode um eine tiefe Objektkopie per Serialisierung zu erzeugen!
     *
     * @param oldObj (muss Serializable implementieren)
     * @return tiefe Kopie
     * @throws Exception
     */
    public static Object deepCopy(Object oldObj) throws Exception {
        Object clone = null;
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(oldObj);
            oos.flush();
            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));
            clone = ois.readObject();
            oos.close();
            ois.close();
        } catch (Exception e) {
            //$NON-NLS-1$
            System.out.println(""Exception in ObjectCloner = "" + e);
            throw (e);
        }
        return clone;
    }

    /**
     * Liefert die Version der Anwendung als String
     *
     * @return version
     */
    public static String getVersion() {
        //$NON-NLS-1$
        return ""1.0.5"";
    }
}
","// Main_7Test.java
package visu.handball.moves;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import visu.handball.moves.actions.AboutAction;
import visu.handball.moves.actions.ChangeColorsAction;
import visu.handball.moves.actions.CloseAction;
import visu.handball.moves.actions.CreateMovePdfAction;
import visu.handball.moves.actions.DeleteEventAction;
import visu.handball.moves.actions.NewAction;
import visu.handball.moves.actions.NewMoveEventAction;
import visu.handball.moves.actions.NewPassEventAction;
import visu.handball.moves.actions.NewSequenceAction;
import visu.handball.moves.actions.OpenAction;
import visu.handball.moves.actions.PauseAnimationAction;
import visu.handball.moves.actions.PrintActualSequenzAction;
import visu.handball.moves.actions.PrintMoveAction;
import visu.handball.moves.actions.SaveAction;
import visu.handball.moves.actions.SetMoveNameAction;
import visu.handball.moves.actions.StartAnimationAction;
import visu.handball.moves.actions.StartOneSequenceAnimationAction;
import visu.handball.moves.actions.StopAnimationAction;
import visu.handball.moves.controller.CommentController;
import visu.handball.moves.controller.JMenuHelper;
import visu.handball.moves.controller.MouseController;
import visu.handball.moves.model.ColorModel;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.TableHandballModel;
import visu.handball.moves.model.TableSelectionListener;
import visu.handball.moves.resources.Resources;
import visu.handball.moves.views.CommentView;
import visu.handball.moves.views.EventTableCellDelayEditor;
import visu.handball.moves.views.EventTableCellRenderer;
import visu.handball.moves.views.Field;
import visu.handball.moves.views.PlayerToolBar;
import visu.handball.moves.views.StatusBar;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#getCloseAction()} method.
*/
class Main_7Test {","```java
package visu.handball.moves;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Test class of {@link Main}.
 * It contains ten unit test cases for the {@link Main#getCloseAction()} method.
 */
class Main_7Test {

    @Test
    void testGetCloseActionNotNull() {
        assertNotNull(Main.getCloseAction());
    }

    @Test
    void testGetCloseActionSameInstance() {
        CloseAction closeAction1 = Main.getCloseAction();
        CloseAction closeAction2 = Main.getCloseAction();
        assertSame(closeAction1, closeAction2);
    }

    @Test
    void testGetCloseActionNotSameInstance() {
        CloseAction closeAction1 = Main.getCloseAction();
        CloseAction closeAction2 = new CloseAction(new HandballModel());
        assertNotSame(closeAction1, closeAction2);
    }

    @Test
    void testGetCloseActionType() {
        assertTrue(Main.getCloseAction() instanceof CloseAction);
    }

    @Test
    void testGetCloseActionEquality() {
        CloseAction closeAction1 = Main.getCloseAction();
        CloseAction closeAction2 = new CloseAction(new HandballModel());
        assertEquals(closeAction1, closeAction2);
    }

    @Test
    void testGetCloseActionNotEqual() {
        CloseAction closeAction1 = Main.getCloseAction();
        CloseAction closeAction2 = new CloseAction(new HandballModel());
        assertNotEquals(closeAction1, closeAction2);
    }

    @Test
    void testGetCloseActionHashCode() {
        CloseAction closeAction1 = Main.getCloseAction();
        CloseAction closeAction2 = new CloseAction(new HandballModel());
        assertEquals(closeAction1.hashCode(), closeAction2.hashCode());
    }

    @Test
    void testGetCloseActionToString() {
        assertNotNull(Main.getCloseAction().toString());
    }

    @Test
    void testGetCloseActionInvokeAction() {
        assertDoesNotThrow(() -> Main.getCloseAction().actionPerformed(null));
    }
}
```
"
chatcmpl-A5V2WuzwlzUPnWwk0HejflK3rjeHm,/EvoSuiteBenchmark/original/56_jhandballmoves/src/main/java/visu/handball/moves/Main_8Test.java,7.875162839889526,stop,"// Main.java
/*
 * Created on 31.08.2006
 * Created by Richard Doerfler, Thomas Halm
 * Copyright (C) 2006  Richard Doerfler, Thomas Halm
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package visu.handball.moves;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import visu.handball.moves.actions.AboutAction;
import visu.handball.moves.actions.ChangeColorsAction;
import visu.handball.moves.actions.CloseAction;
import visu.handball.moves.actions.CreateMovePdfAction;
import visu.handball.moves.actions.DeleteEventAction;
import visu.handball.moves.actions.NewAction;
import visu.handball.moves.actions.NewMoveEventAction;
import visu.handball.moves.actions.NewPassEventAction;
import visu.handball.moves.actions.NewSequenceAction;
import visu.handball.moves.actions.OpenAction;
import visu.handball.moves.actions.PauseAnimationAction;
import visu.handball.moves.actions.PrintActualSequenzAction;
import visu.handball.moves.actions.PrintMoveAction;
import visu.handball.moves.actions.SaveAction;
import visu.handball.moves.actions.SetMoveNameAction;
import visu.handball.moves.actions.StartAnimationAction;
import visu.handball.moves.actions.StartOneSequenceAnimationAction;
import visu.handball.moves.actions.StopAnimationAction;
import visu.handball.moves.controller.CommentController;
import visu.handball.moves.controller.JMenuHelper;
import visu.handball.moves.controller.MouseController;
import visu.handball.moves.model.ColorModel;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.TableHandballModel;
import visu.handball.moves.model.TableSelectionListener;
import visu.handball.moves.resources.Resources;
import visu.handball.moves.views.CommentView;
import visu.handball.moves.views.EventTableCellDelayEditor;
import visu.handball.moves.views.EventTableCellRenderer;
import visu.handball.moves.views.Field;
import visu.handball.moves.views.PlayerToolBar;
import visu.handball.moves.views.StatusBar;

/**
 * Hauptklasse zum Starten der Anwendung plus den Zugriff auf die entsprechenden Objekt-Instanzen
 * @author tommy
 */
public class Main {

    private static SaveAction saveAction;

    private static CloseAction closeAction;

    private static SetMoveNameAction setNameAction;

    private static JFrame window;

    private static Field field;

    private static CommentView commentView;

    private static ColorModel colorModel;

    /**
     * Liefert die Instanz des ColorModels
     *
     * @return colorModel
     */
    public static ColorModel getColorModel() {
        return colorModel;
    }

    /**
     * Main-Methode zum Starten der Anwendung
     *
     * @param args
     */
    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            System.out.println(//$NON-NLS-1$
            Resources.getString(""error.lookAndFell""));
        }
        //$NON-NLS-1$
        window = new JFrame(Resources.getString(""app.title""));
        //$NON-NLS-1$ //$NON-NLS-2$
        window.setIconImage(createImageIcon(""images/icon.gif"", """").getImage());
        JPanel content = new JPanel(new BorderLayout());
        JDesktopPane desktop = new JDesktopPane();
        window.setContentPane(content);
        content.add(desktop, BorderLayout.CENTER);
        desktop.setBackground(new Color(255, 255, 174));
        desktop.setDragMode(JDesktopPane.OUTLINE_DRAG_MODE);
        // Create HandballModel
        HandballModel handballModel = createHandballModel();
        // Create ColorModel
        colorModel = new ColorModel();
        // Statusbar
        StatusBar statusBar = createStatusBar(handballModel);
        content.add(statusBar, BorderLayout.SOUTH);
        // Create Menu
        JMenuBar menu = createHandballMenu(handballModel);
        window.setJMenuBar(menu);
        // Create HandballField
        field = new Field(handballModel, colorModel);
        JInternalFrame handballField = new //$NON-NLS-1$
        JInternalFrame(//$NON-NLS-1$
        Resources.getString(""field.title""), //$NON-NLS-1$
        false, false, false, true);
        handballField.setLocation(10, 10);
        handballField.add(field);
        handballField.setVisible(true);
        handballField.pack();
        desktop.add(handballField);
        // Create MouseController
        MouseController mouse = new MouseController(handballModel, handballField);
        field.addMouseListener(mouse);
        field.addMouseMotionListener(mouse);
        // Add Statusbar as Listener
        field.addMouseMotionListener(statusBar);
        // Create ToolBar
        PlayerToolBar playerBar = new PlayerToolBar(handballModel);
        content.add(playerBar, BorderLayout.NORTH);
        // Create EventView
        JPanel tablePanel = createTablePanel(handballModel);
        JInternalFrame eventView = new //$NON-NLS-1$
        JInternalFrame(//$NON-NLS-1$
        Resources.getString(""events.title""), //$NON-NLS-1$
        true, false, false, true);
        eventView.add(tablePanel);
        eventView.setLocation(20 + handballField.getWidth(), 10);
        eventView.setVisible(true);
        eventView.setSize(450, 400);
        desktop.add(eventView);
        // Create CommentView
        //$NON-NLS-1$
        commentView = new CommentView(Resources.getString(""comment.title""));
        commentView.setLocation(20 + handballField.getWidth(), 420);
        commentView.setSize(450, handballField.getHeight() - eventView.getHeight() - 10);
        commentView.setVisible(true);
        //Controller für CommentView erzeugen
        new CommentController(handballModel, commentView);
        desktop.add(commentView);
        window.setSize(1000, 700);
        locateOnScreenCenter(window);
        window.addWindowListener(new WindowAdapter() {

            public void windowClosing(WindowEvent e) {
                Main.getCloseAction().actionPerformed(null);
            }
        });
        window.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        window.setVisible(true);
    }

    private static JMenuBar createHandballMenu(HandballModel handballModel) {
        JMenuBar mbar;
        JMenu menuDatei, menuHilfe, menuEinstellungen;
        // Hauptmenue einrichten
        mbar = new JMenuBar();
        //$NON-NLS-1$
        menuDatei = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.file""));
        //$NON-NLS-1$
        menuEinstellungen = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.settings""));
        //$NON-NLS-1$
        menuHilfe = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.about""));
        // Einträge fuer Datei
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        NewAction(handballModel));
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        OpenAction(handballModel));
        //Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        saveAction = new SaveAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", saveAction);
        // Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        setNameAction = new SetMoveNameAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", setNameAction);
        //Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        //Drucken einfügen
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        PrintActualSequenzAction(handballModel));
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", new PrintMoveAction(handballModel));
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", new CreateMovePdfAction(handballModel));
        // Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        closeAction = new CloseAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", closeAction);
        // Einträge für Einstellungen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuEinstellungen, """", new ChangeColorsAction());
        // Einträge für Hilfe
        //$NON-NLS-1$
        JMenuHelper.//$NON-NLS-1$
        addMenuItem(//$NON-NLS-1$
        menuHilfe, //$NON-NLS-1$
        """", new AboutAction());
        return mbar;
    }

    private static JPanel createTablePanel(HandballModel handballModel) {
        TableHandballModel tableModel = new TableHandballModel(handballModel);
        JTable table = new JTable(tableModel);
        table.setDefaultRenderer(Object.class, new EventTableCellRenderer());
        table.getColumnModel().getColumn(0).setPreferredWidth(100);
        table.getColumnModel().getColumn(1).setPreferredWidth(200);
        EventTableCellDelayEditor delayEditor = new EventTableCellDelayEditor();
        table.getColumnModel().getColumn(3).setCellEditor(delayEditor);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.getSelectionModel().addListSelectionListener(new TableSelectionListener(tableModel));
        JPanel panel = new JPanel(new BorderLayout());
        //$NON-NLS-1$
        JToolBar toolBar = new JToolBar(Resources.getString(""toolbar.title""));
        toolBar.add(new NewMoveEventAction(handballModel));
        toolBar.add(new NewSequenceAction(handballModel));
        toolBar.add(new NewPassEventAction(handballModel));
        toolBar.add(new DeleteEventAction(handballModel));
        toolBar.addSeparator();
        toolBar.add(new StartOneSequenceAnimationAction(handballModel));
        toolBar.add(new StartAnimationAction(handballModel));
        toolBar.add(new PauseAnimationAction(handballModel));
        toolBar.add(new StopAnimationAction(handballModel));
        JScrollPane scroll = new JScrollPane(table);
        panel.add(scroll, BorderLayout.CENTER);
        panel.add(toolBar, BorderLayout.PAGE_START);
        return panel;
    }

    private static StatusBar createStatusBar(HandballModel model) {
        StatusBar statusBar = new StatusBar(model);
        return statusBar;
    }

    /**
     * Basierend auf der relativen Pfad (relativ zum Ort dieser Klasse) und der Beschreibung
     * wird ein Grafik geladen und ein ImageIcon-Objekt erstellt.
     * @param path
     * @param description
     *
     * @return imageIcon
     */
    public static ImageIcon createImageIcon(String path, String description) {
        URL url = Main.class.getResource(path);
        return new ImageIcon(url, description);
    }

    /**
     * Erzeugt auf Basis eines relativen Pfads (relativ zum Ort dieser Klasse) eine URL.
     * @param path
     *
     * @return url
     */
    public static URL getResource(String path) {
        return Main.class.getResource(path);
    }

    /**
     * Methode um Component-Objekte (z.B. Fenster) in der Mitte des Bildschirms zu positionieren
     * @param component
     */
    public static void locateOnScreenCenter(Component component) {
        Dimension paneSize = component.getSize();
        Dimension screenSize = component.getToolkit().getScreenSize();
        component.setLocation((screenSize.width - paneSize.width) / 2, (screenSize.height - paneSize.height) / 2);
    }

    private static HandballModel createHandballModel() {
        HandballModel model = new HandballModel();
        return model;
    }

    /**
     * Die Instanz des Anwendungsfensters
     *
     * @return window
     */
    public static JFrame getWindow() {
        return window;
    }

    /**
     * Instanz des Spielfeld-Panels
     *
     * @return panel
     */
    public static Field getField() {
        return field;
    }

    /**
     * Instanz der Speichern-Aktion
     *
     * @return saveAction
     */
    public static SaveAction getSaveAction() {
        return saveAction;
    }

    public static SetMoveNameAction getSetNameAction() {
        return setNameAction;
    }

    /**
     * Instanz der Schlie�en-Aktion
     *
     * @return close Action
     */
    public static CloseAction getCloseAction() {
        return closeAction;
    }

    /**
     * Methode um eine tiefe Objektkopie per Serialisierung zu erzeugen!
     *
     * @param oldObj (muss Serializable implementieren)
     * @return tiefe Kopie
     * @throws Exception
     */
    public static Object deepCopy(Object oldObj) throws Exception {
        Object clone = null;
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(oldObj);
            oos.flush();
            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));
            clone = ois.readObject();
            oos.close();
            ois.close();
        } catch (Exception e) {
            //$NON-NLS-1$
            System.out.println(""Exception in ObjectCloner = "" + e);
            throw (e);
        }
        return clone;
    }

    /**
     * Liefert die Version der Anwendung als String
     *
     * @return version
     */
    public static String getVersion() {
        //$NON-NLS-1$
        return ""1.0.5"";
    }
}
","// Main_8Test.java
package visu.handball.moves;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import visu.handball.moves.actions.AboutAction;
import visu.handball.moves.actions.ChangeColorsAction;
import visu.handball.moves.actions.CloseAction;
import visu.handball.moves.actions.CreateMovePdfAction;
import visu.handball.moves.actions.DeleteEventAction;
import visu.handball.moves.actions.NewAction;
import visu.handball.moves.actions.NewMoveEventAction;
import visu.handball.moves.actions.NewPassEventAction;
import visu.handball.moves.actions.NewSequenceAction;
import visu.handball.moves.actions.OpenAction;
import visu.handball.moves.actions.PauseAnimationAction;
import visu.handball.moves.actions.PrintActualSequenzAction;
import visu.handball.moves.actions.PrintMoveAction;
import visu.handball.moves.actions.SaveAction;
import visu.handball.moves.actions.SetMoveNameAction;
import visu.handball.moves.actions.StartAnimationAction;
import visu.handball.moves.actions.StartOneSequenceAnimationAction;
import visu.handball.moves.actions.StopAnimationAction;
import visu.handball.moves.controller.CommentController;
import visu.handball.moves.controller.JMenuHelper;
import visu.handball.moves.controller.MouseController;
import visu.handball.moves.model.ColorModel;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.TableHandballModel;
import visu.handball.moves.model.TableSelectionListener;
import visu.handball.moves.resources.Resources;
import visu.handball.moves.views.CommentView;
import visu.handball.moves.views.EventTableCellDelayEditor;
import visu.handball.moves.views.EventTableCellRenderer;
import visu.handball.moves.views.Field;
import visu.handball.moves.views.PlayerToolBar;
import visu.handball.moves.views.StatusBar;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#deepCopy(Object)} method.
*/
class Main_8Test {","```java
import static org.junit.jupiter.api.Assertions.*;

class Main_8Test {

    @Test
    void testDeepCopy_NullObject_ReturnsNull() {
        assertNull(Main.deepCopy(null));
    }

    @Test
    void testDeepCopy_WithSerializableObject_ReturnsDeepCopy() {
        HandballModel original = new HandballModel();
        try {
            HandballModel copy = (HandballModel) Main.deepCopy(original);
            assertNotSame(original, copy);
            assertEquals(original.getClass(), copy.getClass());
        } catch (Exception e) {
            fail(""Exception thrown during deep copy: "" + e.getMessage());
        }
    }

    @Test
    void testDeepCopy_NonSerializableObject_ThrowsException() {
        Object nonSerializable = new Object();
        assertThrows(Exception.class, () -> Main.deepCopy(nonSerializable));
    }

    @Test
    void testDeepCopy_SameReferenceObject_ReturnsSameObject() {
        HandballModel original = new HandballModel();
        try {
            HandballModel copy = (HandballModel) Main.deepCopy(original);
            assertNotSame(original, copy);
            assertEquals(original.getClass(), copy.getClass());
        } catch (Exception e) {
            fail(""Exception thrown during deep copy: "" + e.getMessage());
        }
    }

    @Test
    void testDeepCopy_WithDifferentClassObject_ThrowsException() {
        ColorModel colorModel = new ColorModel();
        assertThrows(Exception.class, () -> Main.deepCopy(colorModel));
    }

    @Test
    void testDeepCopy_WithNullObject_ThrowsException() {
        assertThrows(Exception.class, () -> Main.deepCopy(null));
    }

    @Test
    void testDeepCopy_WithValidObject_ReturnsDeepCopy() {
        HandballModel original = new HandballModel();
        try {
            HandballModel copy = (HandballModel) Main.deepCopy(original);
            assertNotSame(original, copy);
            assertEquals(original.getClass(), copy.getClass());
        } catch (Exception e) {
            fail(""Exception thrown during deep copy: "" + e.getMessage());
        }
    }

    @Test
    void testDeepCopy_WithDifferentInstanceObject_ReturnsDeepCopy() {
        HandballModel original = new HandballModel();
        try {
            HandballModel copy = (HandballModel) Main.deepCopy(original);
            assertNotSame(original, copy);
            assertEquals(original.getClass(), copy.getClass());
        } catch (Exception e) {
            fail(""Exception thrown during deep copy: "" + e.getMessage());
        }
    }
}
```"
chatcmpl-A5V3ZhByL2Xs02HHg8gT6AHLqTrBY,/EvoSuiteBenchmark/original/56_jhandballmoves/src/main/java/visu/handball/moves/Main_9Test.java,10.208789587020874,stop,"// Main.java
/*
 * Created on 31.08.2006
 * Created by Richard Doerfler, Thomas Halm
 * Copyright (C) 2006  Richard Doerfler, Thomas Halm
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package visu.handball.moves;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import visu.handball.moves.actions.AboutAction;
import visu.handball.moves.actions.ChangeColorsAction;
import visu.handball.moves.actions.CloseAction;
import visu.handball.moves.actions.CreateMovePdfAction;
import visu.handball.moves.actions.DeleteEventAction;
import visu.handball.moves.actions.NewAction;
import visu.handball.moves.actions.NewMoveEventAction;
import visu.handball.moves.actions.NewPassEventAction;
import visu.handball.moves.actions.NewSequenceAction;
import visu.handball.moves.actions.OpenAction;
import visu.handball.moves.actions.PauseAnimationAction;
import visu.handball.moves.actions.PrintActualSequenzAction;
import visu.handball.moves.actions.PrintMoveAction;
import visu.handball.moves.actions.SaveAction;
import visu.handball.moves.actions.SetMoveNameAction;
import visu.handball.moves.actions.StartAnimationAction;
import visu.handball.moves.actions.StartOneSequenceAnimationAction;
import visu.handball.moves.actions.StopAnimationAction;
import visu.handball.moves.controller.CommentController;
import visu.handball.moves.controller.JMenuHelper;
import visu.handball.moves.controller.MouseController;
import visu.handball.moves.model.ColorModel;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.TableHandballModel;
import visu.handball.moves.model.TableSelectionListener;
import visu.handball.moves.resources.Resources;
import visu.handball.moves.views.CommentView;
import visu.handball.moves.views.EventTableCellDelayEditor;
import visu.handball.moves.views.EventTableCellRenderer;
import visu.handball.moves.views.Field;
import visu.handball.moves.views.PlayerToolBar;
import visu.handball.moves.views.StatusBar;

/**
 * Hauptklasse zum Starten der Anwendung plus den Zugriff auf die entsprechenden Objekt-Instanzen
 * @author tommy
 */
public class Main {

    private static SaveAction saveAction;

    private static CloseAction closeAction;

    private static SetMoveNameAction setNameAction;

    private static JFrame window;

    private static Field field;

    private static CommentView commentView;

    private static ColorModel colorModel;

    /**
     * Liefert die Instanz des ColorModels
     *
     * @return colorModel
     */
    public static ColorModel getColorModel() {
        return colorModel;
    }

    /**
     * Main-Methode zum Starten der Anwendung
     *
     * @param args
     */
    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            System.out.println(//$NON-NLS-1$
            Resources.getString(""error.lookAndFell""));
        }
        //$NON-NLS-1$
        window = new JFrame(Resources.getString(""app.title""));
        //$NON-NLS-1$ //$NON-NLS-2$
        window.setIconImage(createImageIcon(""images/icon.gif"", """").getImage());
        JPanel content = new JPanel(new BorderLayout());
        JDesktopPane desktop = new JDesktopPane();
        window.setContentPane(content);
        content.add(desktop, BorderLayout.CENTER);
        desktop.setBackground(new Color(255, 255, 174));
        desktop.setDragMode(JDesktopPane.OUTLINE_DRAG_MODE);
        // Create HandballModel
        HandballModel handballModel = createHandballModel();
        // Create ColorModel
        colorModel = new ColorModel();
        // Statusbar
        StatusBar statusBar = createStatusBar(handballModel);
        content.add(statusBar, BorderLayout.SOUTH);
        // Create Menu
        JMenuBar menu = createHandballMenu(handballModel);
        window.setJMenuBar(menu);
        // Create HandballField
        field = new Field(handballModel, colorModel);
        JInternalFrame handballField = new //$NON-NLS-1$
        JInternalFrame(//$NON-NLS-1$
        Resources.getString(""field.title""), //$NON-NLS-1$
        false, false, false, true);
        handballField.setLocation(10, 10);
        handballField.add(field);
        handballField.setVisible(true);
        handballField.pack();
        desktop.add(handballField);
        // Create MouseController
        MouseController mouse = new MouseController(handballModel, handballField);
        field.addMouseListener(mouse);
        field.addMouseMotionListener(mouse);
        // Add Statusbar as Listener
        field.addMouseMotionListener(statusBar);
        // Create ToolBar
        PlayerToolBar playerBar = new PlayerToolBar(handballModel);
        content.add(playerBar, BorderLayout.NORTH);
        // Create EventView
        JPanel tablePanel = createTablePanel(handballModel);
        JInternalFrame eventView = new //$NON-NLS-1$
        JInternalFrame(//$NON-NLS-1$
        Resources.getString(""events.title""), //$NON-NLS-1$
        true, false, false, true);
        eventView.add(tablePanel);
        eventView.setLocation(20 + handballField.getWidth(), 10);
        eventView.setVisible(true);
        eventView.setSize(450, 400);
        desktop.add(eventView);
        // Create CommentView
        //$NON-NLS-1$
        commentView = new CommentView(Resources.getString(""comment.title""));
        commentView.setLocation(20 + handballField.getWidth(), 420);
        commentView.setSize(450, handballField.getHeight() - eventView.getHeight() - 10);
        commentView.setVisible(true);
        //Controller für CommentView erzeugen
        new CommentController(handballModel, commentView);
        desktop.add(commentView);
        window.setSize(1000, 700);
        locateOnScreenCenter(window);
        window.addWindowListener(new WindowAdapter() {

            public void windowClosing(WindowEvent e) {
                Main.getCloseAction().actionPerformed(null);
            }
        });
        window.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        window.setVisible(true);
    }

    private static JMenuBar createHandballMenu(HandballModel handballModel) {
        JMenuBar mbar;
        JMenu menuDatei, menuHilfe, menuEinstellungen;
        // Hauptmenue einrichten
        mbar = new JMenuBar();
        //$NON-NLS-1$
        menuDatei = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.file""));
        //$NON-NLS-1$
        menuEinstellungen = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.settings""));
        //$NON-NLS-1$
        menuHilfe = JMenuHelper.addMenuBarItem(mbar, Resources.getString(""menu.about""));
        // Einträge fuer Datei
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        NewAction(handballModel));
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        OpenAction(handballModel));
        //Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        saveAction = new SaveAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", saveAction);
        // Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        setNameAction = new SetMoveNameAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", setNameAction);
        //Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        //Drucken einfügen
        JMenuHelper.addMenuItem(menuDatei, """", new //$NON-NLS-1$
        PrintActualSequenzAction(handballModel));
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", new PrintMoveAction(handballModel));
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", new CreateMovePdfAction(handballModel));
        // Separator einfügen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, ""-"");
        closeAction = new CloseAction(handballModel);
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuDatei, """", closeAction);
        // Einträge für Einstellungen
        //$NON-NLS-1$
        JMenuHelper.addMenuItem(menuEinstellungen, """", new ChangeColorsAction());
        // Einträge für Hilfe
        //$NON-NLS-1$
        JMenuHelper.//$NON-NLS-1$
        addMenuItem(//$NON-NLS-1$
        menuHilfe, //$NON-NLS-1$
        """", new AboutAction());
        return mbar;
    }

    private static JPanel createTablePanel(HandballModel handballModel) {
        TableHandballModel tableModel = new TableHandballModel(handballModel);
        JTable table = new JTable(tableModel);
        table.setDefaultRenderer(Object.class, new EventTableCellRenderer());
        table.getColumnModel().getColumn(0).setPreferredWidth(100);
        table.getColumnModel().getColumn(1).setPreferredWidth(200);
        EventTableCellDelayEditor delayEditor = new EventTableCellDelayEditor();
        table.getColumnModel().getColumn(3).setCellEditor(delayEditor);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.getSelectionModel().addListSelectionListener(new TableSelectionListener(tableModel));
        JPanel panel = new JPanel(new BorderLayout());
        //$NON-NLS-1$
        JToolBar toolBar = new JToolBar(Resources.getString(""toolbar.title""));
        toolBar.add(new NewMoveEventAction(handballModel));
        toolBar.add(new NewSequenceAction(handballModel));
        toolBar.add(new NewPassEventAction(handballModel));
        toolBar.add(new DeleteEventAction(handballModel));
        toolBar.addSeparator();
        toolBar.add(new StartOneSequenceAnimationAction(handballModel));
        toolBar.add(new StartAnimationAction(handballModel));
        toolBar.add(new PauseAnimationAction(handballModel));
        toolBar.add(new StopAnimationAction(handballModel));
        JScrollPane scroll = new JScrollPane(table);
        panel.add(scroll, BorderLayout.CENTER);
        panel.add(toolBar, BorderLayout.PAGE_START);
        return panel;
    }

    private static StatusBar createStatusBar(HandballModel model) {
        StatusBar statusBar = new StatusBar(model);
        return statusBar;
    }

    /**
     * Basierend auf der relativen Pfad (relativ zum Ort dieser Klasse) und der Beschreibung
     * wird ein Grafik geladen und ein ImageIcon-Objekt erstellt.
     * @param path
     * @param description
     *
     * @return imageIcon
     */
    public static ImageIcon createImageIcon(String path, String description) {
        URL url = Main.class.getResource(path);
        return new ImageIcon(url, description);
    }

    /**
     * Erzeugt auf Basis eines relativen Pfads (relativ zum Ort dieser Klasse) eine URL.
     * @param path
     *
     * @return url
     */
    public static URL getResource(String path) {
        return Main.class.getResource(path);
    }

    /**
     * Methode um Component-Objekte (z.B. Fenster) in der Mitte des Bildschirms zu positionieren
     * @param component
     */
    public static void locateOnScreenCenter(Component component) {
        Dimension paneSize = component.getSize();
        Dimension screenSize = component.getToolkit().getScreenSize();
        component.setLocation((screenSize.width - paneSize.width) / 2, (screenSize.height - paneSize.height) / 2);
    }

    private static HandballModel createHandballModel() {
        HandballModel model = new HandballModel();
        return model;
    }

    /**
     * Die Instanz des Anwendungsfensters
     *
     * @return window
     */
    public static JFrame getWindow() {
        return window;
    }

    /**
     * Instanz des Spielfeld-Panels
     *
     * @return panel
     */
    public static Field getField() {
        return field;
    }

    /**
     * Instanz der Speichern-Aktion
     *
     * @return saveAction
     */
    public static SaveAction getSaveAction() {
        return saveAction;
    }

    public static SetMoveNameAction getSetNameAction() {
        return setNameAction;
    }

    /**
     * Instanz der Schlie�en-Aktion
     *
     * @return close Action
     */
    public static CloseAction getCloseAction() {
        return closeAction;
    }

    /**
     * Methode um eine tiefe Objektkopie per Serialisierung zu erzeugen!
     *
     * @param oldObj (muss Serializable implementieren)
     * @return tiefe Kopie
     * @throws Exception
     */
    public static Object deepCopy(Object oldObj) throws Exception {
        Object clone = null;
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(oldObj);
            oos.flush();
            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));
            clone = ois.readObject();
            oos.close();
            ois.close();
        } catch (Exception e) {
            //$NON-NLS-1$
            System.out.println(""Exception in ObjectCloner = "" + e);
            throw (e);
        }
        return clone;
    }

    /**
     * Liefert die Version der Anwendung als String
     *
     * @return version
     */
    public static String getVersion() {
        //$NON-NLS-1$
        return ""1.0.5"";
    }
}
","// Main_9Test.java
package visu.handball.moves;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import visu.handball.moves.actions.AboutAction;
import visu.handball.moves.actions.ChangeColorsAction;
import visu.handball.moves.actions.CloseAction;
import visu.handball.moves.actions.CreateMovePdfAction;
import visu.handball.moves.actions.DeleteEventAction;
import visu.handball.moves.actions.NewAction;
import visu.handball.moves.actions.NewMoveEventAction;
import visu.handball.moves.actions.NewPassEventAction;
import visu.handball.moves.actions.NewSequenceAction;
import visu.handball.moves.actions.OpenAction;
import visu.handball.moves.actions.PauseAnimationAction;
import visu.handball.moves.actions.PrintActualSequenzAction;
import visu.handball.moves.actions.PrintMoveAction;
import visu.handball.moves.actions.SaveAction;
import visu.handball.moves.actions.SetMoveNameAction;
import visu.handball.moves.actions.StartAnimationAction;
import visu.handball.moves.actions.StartOneSequenceAnimationAction;
import visu.handball.moves.actions.StopAnimationAction;
import visu.handball.moves.controller.CommentController;
import visu.handball.moves.controller.JMenuHelper;
import visu.handball.moves.controller.MouseController;
import visu.handball.moves.model.ColorModel;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.TableHandballModel;
import visu.handball.moves.model.TableSelectionListener;
import visu.handball.moves.resources.Resources;
import visu.handball.moves.views.CommentView;
import visu.handball.moves.views.EventTableCellDelayEditor;
import visu.handball.moves.views.EventTableCellRenderer;
import visu.handball.moves.views.Field;
import visu.handball.moves.views.PlayerToolBar;
import visu.handball.moves.views.StatusBar;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Main}.
* It contains ten unit test cases for the {@link Main#getVersion()} method.
*/
class Main_9Test {","```java
package visu.handball.moves;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
 * Test class of {@link Main}.
 * It contains ten unit test cases for the {@link Main#getVersion()} method.
 */
class Main_9Test {

    @Test
    void testGetVersion_WhenCalled_ReturnsVersionString() {
        // Arrange
        String expectedVersion = ""1.0.5"";

        // Act
        String actualVersion = Main.getVersion();

        // Assert
        assertEquals(expectedVersion, actualVersion);
    }

    @Test
    void testGetVersion_WhenCalledTwice_ReturnsSameVersionString() {
        // Arrange
        String version1 = Main.getVersion();

        // Act
        String version2 = Main.getVersion();

        // Assert
        assertSame(version1, version2);
    }

    @Test
    void testGetVersion_WhenVersionIsNotEmpty_ReturnsNonEmptyString() {
        // Act
        String version = Main.getVersion();

        // Assert
        assertFalse(version.isEmpty());
    }

    @Test
    void testGetVersion_WhenVersionIsNotNull_ReturnsNonNullString() {
        // Act
        String version = Main.getVersion();

        // Assert
        assertNotNull(version);
    }

    @Test
    void testGetVersion_WhenVersionHasCorrectFormat_ReturnsValidVersionString() {
        // Arrange
        String version = Main.getVersion();

        // Act
        String[] versionParts = version.split(""\\."");

        // Assert
        assertEquals(3, versionParts.length);
        for (String part : versionParts) {
            assertTrue(part.matches(""\\d+""));
        }
    }

    @Test
    void testGetVersion_WhenVersionIsCorrectLength_ReturnsValidVersionString() {
        // Arrange
        String version = Main.getVersion();

        // Act
        int versionLength = version.length();

        // Assert
        assertEquals(5, versionLength);
    }

    @Test
    void testGetVersion_WhenVersionContainsOnlyDigitsAndDots_ReturnsValidVersionString() {
        // Arrange
        String version = Main.getVersion();

        // Act
        boolean isValid = version.matches(""[\\d.]+"");

        // Assert
        assertTrue(isValid);
    }

    @Test
    void testGetVersion_WhenVersionStartsWithDigit_ReturnsValidVersionString() {
        // Arrange
        String version = Main.getVersion();

        // Act
        char firstChar = version.charAt(0);

        // Assert
        assertTrue(Character.isDigit(firstChar));
    }

    @Test
    void testGetVersion_WhenVersionEndsWithDigit_ReturnsValidVersionString() {
        // Arrange
        String version = Main.getVersion();

        // Act
        char lastChar = version.charAt(version.length() - 1);

        // Assert
        assertTrue(Character.isDigit(lastChar));
    }

    @Test
    void testGetVersion_WhenVersionHasCorrectDelimiter_ReturnsValidVersionString() {
        // Arrange
        String version = Main.getVersion();

        // Act
        boolean hasCorrectDelimiter = version.contains(""."");

        // Assert
        assertTrue(hasCorrectDelimiter);
    }
}
```
```"
