ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
/HumanEvalJava/src/main/java/original/id_70.java,/HumanEvalJava/src/main/java/original/id_70.java,553.3745903968811,length,"// StrangeSortList.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class StrangeSortList {

    /**
     * * Given list of integers, return list in strange order.
     * Strange sorting, is when you start with the minimum value,
     * then maximum of the remaining integers, then minimum and so on.
     *
     * Examples:
     * strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
     * strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
     * strange_sort_list([]) == []
     *
     * > strangeSortList([1, 2, 3, 4])
     * [1, 4, 2, 3]
     * > strangeSortList([5, 6, 7, 8, 9])
     * [5, 9, 6, 8, 7]
     * > strangeSortList([1, 2, 3, 4, 5])
     * [1, 5, 2, 4, 3]
     * > strangeSortList([5, 6, 7, 8, 9, 1])
     * [1, 9, 5, 8, 6, 7]
     * > strangeSortList([5, 5, 5, 5])
     * [5, 5, 5, 5]
     * > strangeSortList([])
     * []
     * > strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])
     * [1, 8, 2, 7, 3, 6, 4, 5]
     * > strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])
     * [-5, 5, -5, 5, 0, 2, 2, 2]
     * > strangeSortList([111111])
     * [111111]
     */
    public static List<Object> strangeSortList(List<Object> lst) {
        List<Object> result = new ArrayList<Object>();
        List<Integer> sorted = new ArrayList<Integer>();
        for (Object value : lst) {
            if (value instanceof Integer) {
                sorted.add((Integer) value);
            }
        }
        Collections.sort(sorted);
        int i = 0;
        int j = sorted.size() - 1;
        while (i <= j) {
            result.add(sorted.get(i));
            if (i != j) {
                result.add(sorted.get(j));
            }
            i++;
            j--;
        }
        return result;
    }
}
","// StrangeSortListTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StrangeSortList}.
* It contains one unit test case for the {@link StrangeSortList#strangeSortList(List)} method.
*/
class StrangeSortListTest {","/**
		* Unit test method testStrangeSortList.
		* This unit test method tests the {@link StrangeSortList#strangeSortList(List)} method.
		*/
		@Test
		public void testEqual() {
				List<Object> list = new ArrayList<Object>(){
							@Override
							public Object get(int index) {
									return list.get(index);
							}
						};
				assertNotNull(strangeSortList(list).get(0));
				assertNull(strangeSortList(list).get(list.size() - 1));
		}
}
"
/HumanEvalJava/src/main/java/original/id_46.java,/HumanEvalJava/src/main/java/original/id_46.java,188.90219688415527,length,"// Fib4.java
package original;

class Fib4 {

    /**
     * The Fib4 number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:
     * fib4(0) -> 0
     * fib4(1) -> 0
     * fib4(2) -> 2
     * fib4(3) -> 0
     * fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
     * Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
     *
     * > fib4(5)
     * 4
     * > fib4(6)
     * 8
     * > fib4(7)
     * 14
     * > fib4(5)
     * 4
     * > fib4(8)
     * 28
     * > fib4(10)
     * 104
     * > fib4(12)
     * 386
     */
    public static int fib4(int n) {
        if (n < 2) {
            return 0;
        }
        if (n == 2) {
            return 2;
        }
        int a = 0;
        int b = 0;
        int c = 2;
        int d = 0;
        int e = 0;
        for (int i = 4; i <= n; i++) {
            e = a + b + c + d;
            a = b;
            b = c;
            c = d;
            d = e;
        }
        return e;
    }
}
","// Fib4Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Fib4}.
* It contains one unit test case for the {@link Fib4#fib4(int)} method.
*/
class Fib4Test {","@Test
		void test() {
			int testCaseCount = 100000;
				assertEquals(Fib4.fib4(testCaseCount), 2920);
		}
}"
/HumanEvalJava/src/main/java/original/id_11.java,/HumanEvalJava/src/main/java/original/id_11.java,159.9426715373993,length,"// StringXor.java
package original;

class StringXor {

    /**
     * Input are two strings a and b consisting only of 1s and 0s.
     * Perform binary XOR on these inputs and return result also as a string.
     *
     * > stringXor(""010"", ""110"")
     * ""100""
     * > stringXor(""111000"", ""101010"")
     * ""010010""
     * > stringXor(""1"", ""1"")
     * ""0""
     * > stringXor(""0101"", ""0000"")
     * ""0101""
     */
    public static String stringXor(String a, String b) {
        String result = """";
        for (int i = 0; i < a.length(); i++) {
            if (a.charAt(i) == b.charAt(i)) {
                result += ""0"";
            } else {
                result += ""1"";
            }
        }
        return result;
    }
}
","// StringXorTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link StringXor}.
* It contains one unit test case for the {@link StringXor#stringXor(String, String)} method.
*/
class StringXorTest {","
	/**
	* Constructs a new instance of {@link StringXorTest},
	* with given parameters.
	*/
	public StringXorTest(String a, String b) {
		// TODO Auto-generated constructor stub
	}

	 /**
	 * Test method for {@link StringXor#stringXor(String, String)}.
	 */
	@Test
	public void testStringXor() {
		
		// TEST CASE 1
		
		System.out.println(""Test 1... PASS"");
		String result = """";
		String[] testCases =
			{
				""0"",
				""1"",
				""01010"",
				""10110"",
				""1010"",
				""1010"",
				""1010"",
				""1010"",
				""1010"",
				""01010"",
				""010"",
				""010""
			};
		for (String input : testCases) {
			result = StringXor.stringXor(input, input);
			assertTrue(""StringXor.stringXor() - result is \""\\x00\\x00\\x00\\x00\"""", result.equals(""\\x00\\x00\\x00\\x00""));
			System.out.println(
				""StringXor.stringXor() - result: \\"" + 
				result + ""\"". Error is:\n"";
			System.out.println(
				""StringXor.stringXor() - result: \\"" + 
				result + 
				""\"". Error message is:\n"";
			assertEquals(""StringXor.stringXor() - result: \\"" + 
				result + 
				""\"". Error message is: \"""" + 
				""Illegal character in string"");
		}
	}
}"
/HumanEvalJava/src/main/java/original/id_85.java,/HumanEvalJava/src/main/java/original/id_85.java,262.9704613685608,length,"// Add1.java
package original;

import java.util.List;

class Add1 {

    /**
     * Given a non-empty list of integers lst. add the even elements that are at odd indices..
     *
     * Examples:
     * add([4, 2, 6, 7]) ==> 2
     *
     * > add([4, 88])
     * 88
     * > add([4, 5, 6, 7, 2, 122])
     * 122
     * > add([4, 0, 6, 7])
     * 0
     * > add([4, 4, 6, 8])
     * 12
     */
    public static int add(List<Integer> lst) {
        int result = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (i % 2 == 1 && lst.get(i) % 2 == 0) {
                result += lst.get(i);
            }
        }
        return result;
    }
}
","// Add1Test.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Add1}.
* It contains one unit test case for the {@link Add1#add(List)} method.
*/
class Add1Test {","/**
		 * Test case for {@link Add1#add(List)}.
		 */
		List<Integer> list = getList();
		
		@Test
		public void addOneList(){
			assertNotEquals(0, list.size());
			assertNotEquals(0, (list.get(0) + Integer.MAX_VALUE));
			
		}
		
		@Test
		public void addNegativeOne(){
			List<Integer> newList = list.subList(0, 1);
			
			assertNotEquals(0,
					(newList.get(0).clone().longValue() + Integer.MAX_VALUE));
			assertNotEquals(newList.get(0).getClass().getSimpleName(),
					Integer.class.getSimpleName());
			assertEquals(newList.get(1).getClass().getSimpleName(), Integer.class
//						.getSimpleName());
		}
		
		@Test
		public void addWithZero(){
			List<Integer> newList = list.subList(0,0);
			
			assertEquals(Integer.MAX_VALUE, 
					newList.get(0).clone().longValue());
			assertEquals(Integer.MAX_VALUE, newList.get(1)
//					.clone().longValue());
			
				
		}
 
		List<Integer> getList(){
			List<Integer> newList = new Add1().list;
			return newList;
		}
}
"
/HumanEvalJava/src/main/java/original/id_150.java,/HumanEvalJava/src/main/java/original/id_150.java,240.72143983840942,length,"// XOrY.java
package original;

class XOrY {

    /**
     * A simple program which should return the value of x if n is
     * a prime number and should return the value of y otherwise.
     *
     * Examples:
     * for xOrY(7, 34, 12) == 34
     * for xOrY(15, 8, 5) == 5
     *
     * > xOrY(7, 34, 12)
     * 34
     * > xOrY(15, 8, 5)
     * 5
     * > xOrY(3, 33, 5212)
     * 33
     * > xOrY(1259, 3, 52)
     * 3
     * > xOrY(7919, -1, 12)
     * -1
     * > xOrY(3609, 1245, 583)
     * 583
     * > xOrY(91, 56, 129)
     * 129
     * > xOrY(6, 34, 1234)
     * 1234
     * > xOrY(1, 2, 0)
     * 0
     * > xOrY(2, 2, 0)
     * 2
     */
    public static int xOrY(int n, int x, int y) {
        if (n == 1) {
            return y;
        }
        for (int i = 2; i < n; i++) {
            if (n % i == 0) {
                return y;
            }
        }
        return x;
    }
}
","// XOrYTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link XOrY}.
* It contains one unit test case for the {@link XOrY#xOrY(int, int, int)} method.
*/
class XOrYTest {","
	@Test
	  public void test1() {
		  
	    // test 1a
		  assertEquals(345, (int)XOrY.xOrY(5, 5, 5));
	  }
	 @Test
	    public void test2() {
		  
	    // test 1b
		  assertEquals(345, (int)XOrY.xOrY(10, 10, 10));
	  }
	
}"
/HumanEvalJava/src/main/java/original/id_107.java,/HumanEvalJava/src/main/java/original/id_107.java,382.1792778968811,length,"// EvenOddPalindrome.java
package original;

import java.util.ArrayList;
import java.util.List;

class EvenOddPalindrome {

    /**
     * * Given a positive integer n, return a tuple that has the number of even and odd
     * integer palindromes that fall within the range(1, n), inclusive.
     *
     * Example 1:
     *
     * Input: 3
     * Output: (1, 2)
     * Explanation:
     * Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
     *
     * Example 2:
     *
     * Input: 12
     * Output: (4, 6)
     * Explanation:
     * Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
     *
     * Note:
     * 1. 1 <= n <= 10^3
     * 2. returned tuple has the number of even and odd integer palindromes respectively.
     *
     * > evenOddPalindrome(123)
     * [8, 13]
     * > evenOddPalindrome(12)
     * [4, 6]
     * > evenOddPalindrome(3)
     * [1, 2]
     * > evenOddPalindrome(63)
     * [6, 8]
     * > evenOddPalindrome(25)
     * [5, 6]
     * > evenOddPalindrome(19)
     * [4, 6]
     * > evenOddPalindrome(9)
     * [4, 5]
     * > evenOddPalindrome(1)
     * [0, 1]
     */
    public static List<Integer> evenOddPalindrome(int n) {
        List<Integer> result = new ArrayList<Integer>();
        int even = 0;
        int odd = 0;
        for (int i = 1; i <= n; i++) {
            if (isPalindrome(i)) {
                if (i % 2 == 0) {
                    even++;
                } else {
                    odd++;
                }
            }
        }
        result.add(even);
        result.add(odd);
        return result;
    }

    private static boolean isPalindrome(int n) {
        int m = n;
        int reversed = 0;
        while (m > 0) {
            reversed = reversed * 10 + m % 10;
            m /= 10;
        }
        return n == reversed;
    }
}
","// EvenOddPalindromeTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EvenOddPalindrome}.
* It contains one unit test case for the {@link EvenOddPalindrome#evenOddPalindrome(int)} method.
*/
class EvenOddPalindromeTest {","/**
		 * * Given an array of integer n, return the number of even and odd integer palindromes
		 * that fall within the range(1, n), inclusive.
		*
		* Example 1:
		* 
		* Input: [1,2,18,5,45,7,48,32]
		* Output: (18, 5)
		* Explanation:
		* Integer palindrome are 2, 4, 1, 4, 3, 8, 7, 22, 43. Even palindrome are 1, 2, 3,
		* 4, 5, 6, 7, 10, 17, 18, 23, 45 and 43.
		* 
		* Example 2:
		* [5, 8, 22, 38, 47, 7, 50, 7]
		* Output: (38, 47)
		* Explanation:
		* Integer palindrome are 5, 8, 22, 38, 47, 7, 50, 7. Even palindrome is 4, 5, 7.
		*
		*/
		@Test
		void evenOddPalindromeTest() {
			assertEquals(12, new EvenOddPalindrome(17).size());
			assertEquals(12, new EvenOddPalindrome(21).size());
			assertEquals(12, new EvenOddPalindrome(18).size());
			assertEquals(12, new EvenOddPalindrome(10).size());
		}

	}
"
/HumanEvalJava/src/main/java/original/id_111.java,/HumanEvalJava/src/main/java/original/id_111.java,459.17322397232056,length,"// Histogram.java
package original;

import java.util.HashMap;
import java.util.Map;

class Histogram {

    /**
     * Given a string representing a space separated lowercase letters, return a dictionary
     * of the letter with the most repetition and containing the corresponding count.
     * If several letters have the same occurrence, return all of them.
     *
     * Example:
     * histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
     * histogram('a b b a') == {'a': 2, 'b': 2}
     * histogram('a b c a b') == {'a': 2, 'b': 2}
     * histogram('b b b b a') == {'b': 4}
     * histogram('') == {}
     *
     * > histogram(""a b b a"")
     * {""a"": 2, ""b"": 2}
     * > histogram(""a b c a b"")
     * {""a"": 2, ""b"": 2}
     * > histogram(""a b c d g"")
     * {""a"": 1, ""b"": 1, ""c"": 1, ""d"": 1, ""g"": 1}
     * > histogram(""r t g"")
     * {""r"": 1, ""t"": 1, ""g"": 1}
     * > histogram(""b b b b a"")
     * {""b"": 4}
     * > histogram(""r t g"")
     * {""r"": 1, ""t"": 1, ""g"": 1}
     * > histogram("""")
     * {}
     * > histogram(""a"")
     * {""a"": 1}
     */
    public static Object histogram(String test) {
        Map<String, Integer> map = new HashMap<>();
        if (test == null || test.length() == 0) {
            return map;
        }
        String[] arr = test.split("" "");
        for (String s : arr) {
            if (map.containsKey(s)) {
                map.put(s, map.get(s) + 1);
            } else {
                map.put(s, 1);
            }
        }
        int max = 0;
        for (int i : map.values()) {
            max = Math.max(max, i);
        }
        Map<String, Integer> res = new HashMap<>();
        for (String s : map.keySet()) {
            if (map.get(s) == max) {
                res.put(s, map.get(s));
            }
        }
        return res;
    }
}
","// HistogramTest.java
package original;

import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Histogram}.
* It contains one unit test case for the {@link Histogram#histogram(String)} method.
*/
class HistogramTest {","
	// Class under test of histogram(String).
	@Test
	void histogram() {
        final Histogram histogram = Histogram.histogram(null);
        Map<String, Integer> res = new HashMap<>();
		if (histogram!= null) {
			for (String i : histogram.keySet()) {
				res.put(i, histogram.get(i));
			}
		}
		
		assertNotNull(res);
		assertNotNull(res.entrySet());
		assertNotNull(res.values());
		assertEquals(2, res.size());
		assertEquals(2, res.values().length);
		assertEquals(1, res.values().setSize(1).get(1));
		
		assertEquals(0, res.values().add(1, 2));
		assertEquals(1, res.values().add(2, 3));

		assertEquals(1, histogram.keySet().values().size());
		assertEquals(0, histogram.keySet().value(3));
		
		assertEquals(null, histogram.keySet().value(null));
	}

	    @Test
	        void key() { // key(String)
        final Histogram histogram = Histogram.histogram("""");
        assertEquals(null, histogram.get(null));
        assertEquals(null, histogram.clear());
	}

	    @Test
	        void getter() { // getter(String)
        final Histogram histogram = Histogram.histogram("""");
        final String getter = ""getter"";
        assertEquals(""N/A"", histogram.get(getter));
        assertEquals(""N/A"", histogram.getValue(getter));
        assertEquals(""N/A"", histogram.get(new StringBuilder(getter)));
	}

	    @Test
	        void valueString() {
            final Histogram histogram = Histogram.histogram("""");
            final String valueString = ""N/A"";
            assertEquals(""N/A"", histogram.getValue(valueString));
            assertEquals(""N/A"", histogram.getValue(""N/A""));
        }

        @Test
        void value() {
            final Histogram histogram = Histogram.histogram("""");
            assertEquals(""N/A"", histogram.value(""""));
            assertEquals(""N/A"", histogram.value(""NaN""));
            assertEquals(""5"", histogram.value(""5""));
            assertEquals(""9"", histogram.value(""9""));
            assertEquals(""10"", histogram.value(""10""));
            assertEquals(""+2"", histogram.value(""+2""));
        }
		  
        @Test
        void notHistogram() {
            final Histogram histogram = new Histogram();
            assertTrue(histogram instanceof Histogram);
        }
	
	// Class under test of value(String).
	@Test
	void valueString() { // value(String)
        final Histogram histogram = Histogram.histogram("""");
        assertEquals(""N/A"", histogram.value(""""));
        assertEquals(""N/A"", histogram.value(""NaN""));
        assertEquals(""5"", histogram.value(""5""));
        assertEquals(""9"", histogram.value(""9""));
        assertEquals(""10"", histogram.value(""10""));
        assertEquals(""+2"", histogram.value(""+2""));
    }
}
"
/HumanEvalJava/src/main/java/original/id_93.java,/HumanEvalJava/src/main/java/original/id_93.java,337.9919548034668,length,"// Encode.java
package original;

class Encode {

    /**
     * * Write a function that takes a message, and encodes in such a
     * way that it swaps case of all letters, replaces all vowels in
     * the message with the letter that appears 2 places ahead of that
     * vowel in the english alphabet.
     * Assume only letters.
     *
     * Examples:
     * >>> encode('test')
     * 'TGST'
     * >>> encode('This is a message')
     * 'tHKS KS C MGSSCGG'
     *
     * > encode(""TEST"")
     * ""tgst""
     * > encode(""Mudasir"")
     * ""mWDCSKR""
     * > encode(""YES"")
     * ""ygs""
     * > encode(""This is a message"")
     * ""tHKS KS C MGSSCGG""
     * > encode(""I DoNt KnOw WhAt tO WrItE"")
     * ""k dQnT kNqW wHcT Tq wRkTg""
     */
    public static String encode(String message) {
        String result = """";
        for (int i = 0; i < message.length(); i++) {
            char c = message.charAt(i);
            if (c >= 'a' && c <= 'z') {
                c -= 32;
            } else if (c >= 'A' && c <= 'Z') {
                c += 32;
            }
            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {
                c += 2;
            }
            result += c;
        }
        return result;
    }
}
","// EncodeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Encode}.
* It contains one unit test case for the {@link Encode#encode(String)} method.
*/
class EncodeTest {","
	@Test   
    public void testEncode() {
		// Input
        String message = ""test"";

		// Output
		String encode = Encode.encode(message);
		assertEquals(message, Encode.encode(encode));
    }
}
"
/HumanEvalJava/src/main/java/original/id_146.java,/HumanEvalJava/src/main/java/original/id_146.java,611.1280608177185,length,"// Specialfilter.java
package original;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

class Specialfilter {

    /**
     * Write a function that takes an array of numbers as input and returns
     * the number of elements in the array that are greater than 10 and both
     * first and last digits of a number are odd (1, 3, 5, 7, 9).
     * For example:
     * specialFilter([15, -73, 14, -15]) => 1
     * specialFilter([33, -2, -3, 45, 21, 109]) => 2
     *
     * > specialfilter([5, -2, 1, -5])
     * 0
     * > specialfilter([15, -73, 14, -15])
     * 1
     * > specialfilter([33, -2, -3, 45, 21, 109])
     * 2
     * > specialfilter([43, -12, 93, 125, 121, 109])
     * 4
     * > specialfilter([71, -2, -33, 75, 21, 19])
     * 3
     * > specialfilter([1])
     * 0
     * > specialfilter([])
     * 0
     */
    public static int specialfilter(List<Object> nums) {
        int count = 0;
        for (Object num : nums) {
            if ((int) num > 10) {
                Set odd_digits = new HashSet<Integer>(Arrays.asList(1, 3, 5, 7, 9));
                String number_as_string = Integer.toString((int) num);
                if (odd_digits.contains(Integer.parseInt(number_as_string.substring(0, 1))) && odd_digits.contains(Integer.parseInt(number_as_string.substring(number_as_string.length() - 1)))) {
                    count += 1;
                }
            }
        }
        return count;
    }
}
","// SpecialfilterTest.java
package original;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Specialfilter}.
* It contains one unit test case for the {@link Specialfilter#specialfilter(List)} method.
*/
class SpecialfilterTest {","/**
		* Test of specialfilter method, of class Specialfilter.
		*/
		@Test
		void test_specialfilter() {
			System.out.println(""specialfilter"");
			int num = 15;
			List<Object> nums = Arrays.asList(num);
			Set<Integer> output = new HashSet<Integer>(Arrays.asList(55));
			List<Integer> list_of_nums = Arrays.asList(num);
			Set<List<Integer>> set_of_nums = new HashSet<List<Integer>>();
			set_of_nums.add(list_of_nums);
			Set<List<Integer>> set_of_num = new HashSet<List<Integer>>();
			set_of_num.add(list_of_num);


			Set<Integer> res = Specialfilter.specialfilter(nums.iterator(), set_of_nums);
			res = Specialfilter.specialfilter(nums.iterator(), set_of_num);
			assertEquals(set_of_nums, res);
		}
}"
/HumanEvalJava/src/main/java/original/id_147.java,/HumanEvalJava/src/main/java/original/id_147.java,429.21546745300293,length,"// GetMaxTriples.java
package original;

class GetMaxTriples {

    /**
     * * You are given a positive integer n. You have to create an integer array a of length n.
     * For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
     * Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,
     * and a[i] + a[j] + a[k] is a multiple of 3.
     *
     * Example :
     * Input: n = 5
     * Output: 1
     * Explanation:
     * a = [1, 3, 7, 13, 21]
     * The only valid triple is (1, 7, 13).
     *
     * > getMaxTriples(5)
     * 1
     * > getMaxTriples(6)
     * 4
     * > getMaxTriples(10)
     * 36
     * > getMaxTriples(100)
     * 53361
     */
    public static int getMaxTriples(int n) {
        int count = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = i + 1; j <= n; j++) {
                for (int k = j + 1; k <= n; k++) {
                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {
                        count++;
                    }
                }
            }
        }
        return count;
    }
}
","// GetMaxTriplesTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetMaxTriples}.
* It contains one unit test case for the {@link GetMaxTriples#getMaxTriples(int)} method.
*/
class GetMaxTriplesTest {","static final int N = 12;
		
    @Test
    void test1() {
        for (int i = 0; i < N; i++) {
            assertEquals(i, new GetMaxTriples().getMaxTriples(i));
            assertEquals(i + 1, new GetMaxTriples().getMaxTriples(i + 1));
        }
    }

    @Test
    void test2() {
        int data[] = new int[N];
        data[0] = 1;
        data[1] = 1;
        data[2] = 1;
        
        assertEquals(N - 2, new GetMaxTriples().getMaxTriples(0));
        assertEquals(N - 1, new GetMaxTriples().getMaxTriples(1));
        assertEquals(2, new GetMaxTriples().getMaxTriples(2));
        
        data[3] = 1;
        data[4] = 1;
        data[5] = 1;
        
        assertEquals(N, new GetMaxTriples().getMaxTriples(3));
        assertEquals(N + 1, new GetMaxTriples().getMaxTriples(4));
        assertEquals(N, data[5], 1);
    }

	@Test
	void test3() {
		assertEquals(2147483648, new GetMaxTriples().getMaxTriples(2147483647));
	}
	
	@Test
	void test4(){
		int data[] = new int[12]; 
		data[5] = 2147483647;
		data[4] = 65537;
		data[3] = 16;
		
		data[0] = 2;
		
		assertEquals(348529, new GetMaxTriples().getMaxTriples(5));
		assertEquals(348529, new GetMaxTriples().getMaxTriples(6));
		assertEquals(348530, new GetMaxTriples().getMaxTriples(7));
		assertEquals(1234789033L, new GetMaxTriples().getMaxTriples(8));
		assertEquals(1234789034L, new GetMaxTriples().getMaxTriples(9));
	}

}
"
/HumanEvalJava/src/main/java/original/id_92.java,/HumanEvalJava/src/main/java/original/id_92.java,177.57381939888,length,"// AnyInt.java
package original;

class AnyInt {

    /**
     * * Create a function that takes 3 numbers.
     * Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
     * Returns false in any other cases.
     *
     * Examples
     * anyInt(5, 2, 7) ➞ True
     *
     * anyInt(3, 2, 2) ➞ False
     *
     * anyInt(3, -2, 1) ➞ True
     *
     * anyInt(3.6, -2.2, 2) ➞ False
     *
     * > anyInt(2, 3, 1)
     * true
     * > anyInt(2.5, 2, 3)
     * false
     * > anyInt(1.5, 5, 3.5)
     * false
     * > anyInt(2, 6, 2)
     * false
     * > anyInt(4, 2, 2)
     * true
     * > anyInt(2.2, 2.2, 2.2)
     * false
     * > anyInt(-4, 6, 2)
     * true
     * > anyInt(2, 1, 1)
     * true
     * > anyInt(3, 4, 7)
     * true
     * > anyInt(3.0, 4, 7)
     * false
     */
    public static Boolean anyInt(Number x, Number y, Number z) {
        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {
            if (x.intValue() == y.intValue() + z.intValue()) {
                return true;
            }
            if (y.intValue() == x.intValue() + z.intValue()) {
                return true;
            }
            if (z.intValue() == x.intValue() + y.intValue()) {
                return true;
            }
        }
        return false;
    }
}
","// AnyIntTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AnyInt}.
* It contains one unit test case for the {@link AnyInt#anyInt(Number, Number, Number)} method.
*/
class AnyIntTest {","@Test
		void testAnyInt() {
				assertEquals(true, AnyInt.anyInt(1, 1, 1));
				assertEquals(true, AnyInt.anyInt(3, 2, 7));
				assertEquals(false, AnyInt.anyInt(3, -2, 1));
				assertEquals(false, AnyInt.anyInt(3.6, 2.2, 2.2));
				assertEquals(false, AnyInt.anyInt(2, 3, 1));
				assertEquals(false, AnyInt.anyInt(2.5, 2.2, 2.2));
				assertEquals(false, AnyInt.anyInt(1.5, 5, 3.5));
				assertEquals(true, AnyInt.anyInt(2.2, 6, 2));
				assertEquals(true, AnyInt.anyInt(4, 8, 2));
				assertEquals(false, AnyInt.anyInt(2, 1, 1));
				assertEquals(false, AnyInt.anyInt(3.0, 5, 3.5));
				assertEquals(true, AnyInt.anyInt(2.2, 1.1, 1.1));
				assertEquals(true, AnyInt.anyInt(1.1, 4.9, 3.2));
		}
}"
/HumanEvalJava/src/main/java/original/id_110.java,/HumanEvalJava/src/main/java/original/id_110.java,579.0443344116211,length,"// Exchange.java
package original;

import java.util.List;

class Exchange {

    /**
     * In this problem, you will implement a function that takes two lists of numbers,
     * and determines whether it is possible to perform an exchange of elements
     * between them to make lst1 a list of only even numbers.
     * There is no limit on the number of exchanged elements between lst1 and lst2.
     * If it is possible to exchange elements between the lst1 and lst2 to make
     * all the elements of lst1 to be even, return ""YES"".
     * Otherwise, return ""NO"".
     * For example:
     * exchange([1, 2, 3, 4], [1, 2, 3, 4]) => ""YES""
     * exchange([1, 2, 3, 4], [1, 5, 3, 4]) => ""NO""
     * It is assumed that the input lists will be non-empty.
     *
     * > exchange([1, 2, 3, 4], [1, 2, 3, 4])
     * ""YES""
     * > exchange([1, 2, 3, 4], [1, 5, 3, 4])
     * ""NO""
     * > exchange([1, 2, 3, 4], [2, 1, 4, 3])
     * ""YES""
     * > exchange([5, 7, 3], [2, 6, 4])
     * ""YES""
     * > exchange([5, 7, 3], [2, 6, 3])
     * ""NO""
     * > exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1])
     * ""NO""
     * > exchange([100, 200], [200, 200])
     * ""YES""
     */
    public static String exchange(List<Integer> lst1, List<Integer> lst2) {
        int count = 0;
        for (int i = 0; i < lst1.size(); i++) {
            if (lst1.get(i) % 2 != 0) {
                count++;
            }
        }
        for (int i = 0; i < lst2.size(); i++) {
            if (lst2.get(i) % 2 == 0) {
                count--;
            }
        }
        if (count <= 0) {
            return ""YES"";
        } else {
            return ""NO"";
        }
    }
}
","// ExchangeTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Exchange}.
* It contains one unit test case for the {@link Exchange#exchange(List, List)} method.
*/
class ExchangeTest {","
	// Test data
	final int[] data = {1, 2, 3, 4};

	// Unit test class
	class Test {

		/**
		 * @param args
		 */
		public static void main(String[] args) {
			// TODO Auto-generated method stub

		}
	}

	/**
	 * Test method for org.junit.jupiter.api.Function.test().
	 */
	@Test
	public void test() {
        String message = ""NO"";
        List<Integer> list1 = new Test().new List<Integer>();
        List<Integer> list2 = new Test().new List<Integer>();
        // try {
        try {
            // if (exchange(""[1, 2, 3, 4]"", ""[1, 2, 3, 4])
            // return ""YES"";
            message = exchange(data, list1);
            assertNotNull(""Message expected to not to be null"", message);

            // if (exchange(""[1, 2, 3, 4]"", ""[1, 5, 3, 4])
            // doSomething();
        } catch (Exception e) {
        }
        // expect the exception to be thrown
        // e.printStackTrace();
        // assertTrue(""Expect exception thrown due to lack of data, data"",
                  //  e instanceof NullPointerException);
        // assertTrue(""Expect exception thrown due to lack of data"",
                  //  e instanceof IllegalArgumentException);
        // assertTrue(""Expect exception thrown due to lack of data"",
                  //  e instanceof IllegalStateException);
        // assertTrue(""Expect exception thrown due to lack of data"",
                  //  e instanceof ArrayStoreException);
        // assertTrue(""Expect exception thrown due to lack of data"",
                  //  e instanceof ClassCastException);
        // assertTrue(""Expect exception thrown due to lack of data"",
                  //  e instanceof UnsupportedOperationException);

	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}

// CHECKSTYLE.OFF: AnonymousClass
"
/HumanEvalJava/src/main/java/original/id_106.java,/HumanEvalJava/src/main/java/original/id_106.java,367.99690771102905,length,"// F.java
package original;

import java.util.ArrayList;
import java.util.List;

class F {

    /**
     * Implement the function f that takes n as a parameter,
     * and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
     * or the sum of numbers from 1 to i otherwise.
     * i starts from 1.
     * the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
     * Example:
     * f(5) == [1, 2, 6, 24, 15]
     *
     * > f(5)
     * [1, 2, 6, 24, 15]
     * > f(7)
     * [1, 2, 6, 24, 15, 720, 28]
     * > f(1)
     * [1]
     * > f(3)
     * [1, 2, 6]
     */
    public static List<Integer> f(int n) {
        List<Integer> result = new ArrayList<Integer>();
        for (int i = 1; i <= n; i++) {
            if (i % 2 == 0) {
                result.add(factorial(i));
            } else {
                result.add(sum(i));
            }
        }
        return result;
    }

    private static int factorial(int n) {
        int result = 1;
        for (int i = 1; i <= n; i++) {
            result *= i;
        }
        return result;
    }

    private static int sum(int n) {
        int result = 0;
        for (int i = 1; i <= n; i++) {
            result += i;
        }
        return result;
    }
}
","// FTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link F}.
* It contains one unit test case for the {@link F#f(int)} method.
*/
class FTest {","/**
		* Test the default constructor.
		*/
	@Test
	void testConstructorDefault() {
		F f = new F(); 
		assertEquals(f.size(), 0);
	}

	/**
	* Test the function f that takes n as a parameter,
	* and returns a list of size n.
	* Example:
	* f(5) == [2, 3, 5, 6, 15]
	*/
	@Test
	void testF() {
		assertEquals(F.f(5), [2, 3, 5, 6, 15]);
	}

	/**
	* Test method of {@link F#f} (throws IndexOutOfBoundsException).
	*/
	@Test(expected=IndexOutOfBoundsException.class)
	void testFerrThrowsIndexOutOfBounds() {
		F.f(-1);
	}

	/**
	* Test method of {@link F#sum} (throws IndexOutOfBoundsException).
	*/
	@Test(expected=IndexOutOfBoundsException.class)
	void testSum() {
		F.sum(-1);
	}
// end FTest
}
//FTest
"
/HumanEvalJava/src/main/java/original/id_151.java,/HumanEvalJava/src/main/java/original/id_151.java,552.9129736423492,length,"// DoubleTheDifference.java
package original;

import java.util.List;

class DoubleTheDifference {

    /**
     * Given a list of numbers, return the sum of squares of the numbers
     * in the list that are odd. Ignore numbers that are negative or not integers.
     *
     * doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
     * doubleTheDifference([-1, -2, 0]) == 0
     * doubleTheDifference([9, -2]) == 81
     * doubleTheDifference([0]) == 0
     *
     * If the input list is empty, return 0.
     *
     * > doubleTheDifference([])
     * 0
     * > doubleTheDifference([5, 4])
     * 25
     * > doubleTheDifference([0.1, 0.2, 0.3])
     * 0
     * > doubleTheDifference([-10, -20, -30])
     * 0
     * > doubleTheDifference([-1, -2, 8])
     * 0
     * > doubleTheDifference([0.2, 3, 5])
     * 34
     * > doubleTheDifference([-99, -97, -95, -93, -91, -89, -87, -85, -83, -81, -79, -77, -75, -73, -71, -69, -67, -65, -63, -61, -59, -57, -55, -53, -51, -49, -47, -45, -43, -41, -39, -37, -35, -33, -31, -29, -27, -25, -23, -21, -19, -17, -15, -13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99])
     * 166650
     */
    public static int doubleTheDifference(List<Object> lst) {
        int sum = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (lst.get(i) instanceof Integer) {
                int num = (int) lst.get(i);
                if (num % 2 != 0 && num > 0) {
                    sum += num * num;
                }
            }
        }
        return sum;
    }
}
","// DoubleTheDifferenceTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DoubleTheDifference}.
* It contains one unit test case for the {@link DoubleTheDifference#doubleTheDifference(List)} method.
*/
class DoubleTheDifferenceTest {","DoubleTheDifferenceTest() {
			
		}
	/**
	 * Test method for {@link DoubleTheDifference#doubleTheDifference(List)}.
	 */
	@Test
	public void testDoubleTheDifferenceListNoOddNumbers() {
		List<Object> list = new List<>();
		list.add(1);
		list.add(3);
		list.add(2);
		
		assertTrue(""List should have a single element."", list instanceof List);
		assertEquals(""List size should be 1."", 1, list.size());

		assertEquals(""List[0].get(0) should be 3.0"", 3.0, ((Object) list.get(0)).getClass(), 0);
		assertEquals(""List[1].get(0) should be 2.0"", 2.0, ((Object) list.get(1)).getClass(), 0);
		assertEquals(""List[2].get(0) should be 1.0"", 1.0, ((Object) list.get(2)).getClass(), 0);
		
		
	}
}


// DoubleTheDifference.java"
/HumanEvalJava/src/main/java/original/id_84.java,/HumanEvalJava/src/main/java/original/id_84.java,272.92376923561096,length,"// Solve1.java
package original;

class Solve1 {

    /**
     * Given a positive integer N, return the total sum of its digits in binary.
     *
     * Example
     * For N = 1000, the sum of digits will be 1 the output should be ""1"".
     * For N = 150, the sum of digits will be 6 the output should be ""110"".
     * For N = 147, the sum of digits will be 12 the output should be ""1100"".
     *
     * Variables:
     *
     * @N integer
     * Constraints: 0 ≤ N ≤ 10000.
     * Output:
     * a string of binary number
     *
     * > solve(1000)
     * ""1""
     * > solve(150)
     * ""110""
     * > solve(147)
     * ""1100""
     * > solve(333)
     * ""1001""
     * > solve(963)
     * ""10010""
     */
    public static String solve(int n) {
        int sum = 0;
        while (n > 0) {
            sum += n % 10;
            n /= 10;
        }
        return Integer.toBinaryString(sum);
    }
}
","// Solve1Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Solve1}.
* It contains one unit test case for the {@link Solve1#solve(int)} method.
*/
class Solve1Test {","  private static final int N = 1000;
		  // Variables
		  private static int[] a = new int[N];  // array of integers
		  private static int maxValue = 11111111;  // max value of the array
		  int sum = 0;  // sum of all the digits of the array
		  // constructors

        /**
         * Constructor with initial values.
         *
         * @param a integer array to initialize variables to
         * @param max the value that a array can have
         * @throws IllegalArgumentException is bad parameters in constructor
         */
        public Solve1Test(int[] a, int max) throws IllegalArgumentException{
            // check parameter correctness
            if (a.length!= N)
                throw new IllegalArgumentException(""Parameter a wrong size."");
            if (max!= maxValue)
                throw new IllegalArgumentException(""Parameter max wrong."");
            //check initial values
            for (int i = 0; i < N; i++) {
                if (a[i] > max)
                    throw new IllegalArgumentException(""Parameter i wrong"");
                a[i] = 0;
            }
            // initialize variables to 0
            for (int i = 0; i <= N; i++) {
                a[i] = 0;
            }
        }

        /**
         * Constructor with integer parameters and the value of the maximum.
         *
         * @param max numeric value to initialize variables to
         * @throws IllegalArgumentException  bad parameters in constructor
         */
        public Solve1Test(int max) throws IllegalArgumentException {
            // check parameter correctness
            if (max == 0)
                throw new IllegalArgumentException(""Parameter max wrong"");
            //check initial values
            maxValue = max;
            for (int i = 0; i < N; i++) {
                a[i] = 0;
            }
        }
       
        //@Test
        /**
         * Tests {@link Solve1#solve(int)}
         * Using integer values to set array with integers.
         */
        @Test
        void testIntegerSet() {
            Solve1 solver = new Solve1();
            solver.solve(N);
            System.out.println(""Array value before the method is "");
            System.out.println(solver.sol);
            // compare result value with actual for testing
            assertEquals(sum, solver.sol);
        }

       //@Test
        /**
         * Tests {@link Solve1#solve(int)}
         * Using integer numbers to set array with numbers.
         */
        @Test
        void testIntegersSet() {
            Solve1 solver = new Solve1(N);
            solver.solve(N);
            System.out.println(""Array value before the method is "");
            System.out.println(solver.sol);
            // compare result value with actual for testing
            assertEquals(sum, solver.sol);
        }

        //@Test
        /**
         * Tests {@link Solve1#solve(int)}
         * Using max value as a parameter with numbers.
         */
        @Test
        void testMaxValueSet() {
            Solve1 solver = new Solve1(maxValue);
            solver.solve(N);
            System.out.println(""Array value before the method is "");
            System.out.println(solver.sol);
            // compare result value with actual for testing
            assertEquals(sum, solver.sol);
        }

        private static void assertContains(int s, int expected) {
            assertEquals(expected, a[s]);
        }
}
"
/HumanEvalJava/src/main/java/original/id_10.java,/HumanEvalJava/src/main/java/original/id_10.java,405.24279713630676,length,"// MakePalindrome.java
package original;

class MakePalindrome {

    /**
     * Find the shortest palindrome that begins with a supplied string.
     * Algorithm idea is simple:
     * - Find the longest postfix of supplied string that is a palindrome.
     * - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
     *
     * > makePalindrome("""")
     * """"
     * > makePalindrome(""cat"")
     * ""catac""
     * > makePalindrome(""cata"")
     * ""catac""
     * > makePalindrome("""")
     * """"
     * > makePalindrome(""x"")
     * ""x""
     * > makePalindrome(""xyz"")
     * ""xyzyx""
     * > makePalindrome(""xyx"")
     * ""xyx""
     * > makePalindrome(""jerry"")
     * ""jerryrrej""
     */
    public static String makePalindrome(String string) {
        if (string.length() == 0) {
            return """";
        }
        String reversed = new StringBuilder(string).reverse().toString();
        for (int i = 0; i < string.length(); i++) {
            if (string.substring(i).equals(reversed.substring(0, string.length() - i))) {
                return string + reversed.substring(string.length() - i);
            }
        }
        return null;
    }
}
","// MakePalindromeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MakePalindrome}.
* It contains one unit test case for the {@link MakePalindrome#makePalindrome(String)} method.
*/
class MakePalindromeTest {","
    /**
     * This class contains one unit test case for the {@link makePalindrome(String)} method.
     * It tests the value of {@link makePalindrome(String)} method.
     */
    @Test
    public void testMakePalindrome() {
        assertEquals(makePalindrome(""""), null);
        assertEquals(makePalindrome(""cat""), ""catac"");
        assertEquals(makePalindrome(""cat"").length(), 3);
        assertEquals(makePalindrome(""cat"").toString(), ""cat"");
        assertEquals(makePalindrome(""abc"").length(), 3);
        assertEquals(makePalindrome(""abc"").toString(), ""abc"");
        assertEquals(makePalindrome(""xabcx"").length(), 6);
        assertEquals(makePalindrome(""xabcx"").toString(), ""xabcx"");
    }
}
"
/HumanEvalJava/src/main/java/original/id_47.java,/HumanEvalJava/src/main/java/original/id_47.java,247.6164653301239,length,"// Median.java
package original;

import java.util.Collections;
import java.util.List;

class Median {

    /**
     * Return median of elements in the list l.
     *
     * > median([3, 1, 2, 4, 5])
     * 3
     * > median([-10, 4, 6, 1000, 10, 20])
     * 8.0
     * > median([5])
     * 5
     * > median([6, 5])
     * 5.5
     * > median([8, 1, 3, 9, 9, 2, 7])
     * 7
     */
    public static Number median(List<Integer> l) {
        Collections.sort(l);
        int size = l.size();
        if (size % 2 == 0) {
            return (l.get(size / 2) + l.get(size / 2 - 1)) / 2.0;
        } else {
            return l.get(size / 2);
        }
    }
}
","// MedianTest.java
package original;

import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Median}.
* It contains one unit test case for the {@link Median#median(List)} method.
*/
class MedianTest {","
    /**
	* Test method for {@link Median#median(List)} method, with double arguments.
	* 
	* <p>
	* Here is an example of how to use this method call:
		*/
    @Test
    public void testMedian() {
        
	    List<Number> list = new Median().median(new ArrayList<Number>());
	    assertNotNull(list);
	    assertFalse(list.isEmpty());
	    assertTrue(list.get(0).equals(list.get(list.size() - 1)));
    }

}"
/HumanEvalJava/src/main/java/original/id_51.java,/HumanEvalJava/src/main/java/original/id_51.java,446.66240406036377,length,"// RemoveVowels.java
package original;

class RemoveVowels {

    /**
     * removeVowels is a function that takes string and returns string without vowels.
     *
     * > removeVowels(""abcdef"")
     * ""bcdf""
     * > removeVowels(""aaaaa"")
     * """"
     * > removeVowels(""aaBAA"")
     * ""B""
     * > removeVowels(""zbcd"")
     * ""zbcd""
     * > removeVowels("""")
     * """"
     * > removeVowels(""abcdef\nghijklm"")
     * ""bcdf\nghjklm""
     * > removeVowels(""fedcba"")
     * ""fdcb""
     * > removeVowels(""eeeee"")
     * """"
     * > removeVowels(""acBAA"")
     * ""cB""
     * > removeVowels(""EcBOO"")
     * ""cB""
     * > removeVowels(""ybcd"")
     * ""ybcd""
     */
    public static String removeVowels(String text) {
        String result = """";
        for (int i = 0; i < text.length(); i++) {
            char c = text.charAt(i);
            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {
                result += c;
            }
        }
        return result;
    }
}
","// RemoveVowelsTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RemoveVowels}.
* It contains one unit test case for the {@link RemoveVowels#removeVowels(String)} method.
*/
class RemoveVowelsTest {","@Test 
	void testRemoveVowels() {
			assertEquals(""removeVowels"", removeVowels(""abcdef""), ""abcdef"");
			assertEquals(""removeVowels"", removeVowels(""aaaaab""), ""aaaaab""); 
			assertEquals(""removeVowels"", removeVowels(""aab""), ""aab""); 
			assertEquals(""removeVowels"", removeVowels(""abca""), ""abca"");
			assertEquals(""removeVowels"", removeVowels(""a""), ""a""); 
			assertEquals(""removeVowels"", removeVowels(""abbc""), ""abbc"");
			assertEquals(""removeVowels"", removeVowels(""AbBaBa""), ""AbBaBa""); 
			assertEquals(""removeVowels"", removeVowels(""aBb""), ""aBb""); 
			assertEquals(""removeVowels"", removeVowels(""bcda abcdef""), ""bcda abcdef"");
			assertEquals(""removeVowels"", removeVowels(""c""), ""c""); 
			assertEquals(""removeVowels"", removeVowels(""bb""), ""bb""); 
			assertEquals(""removeVowels"", removeVowels(""bbc""), ""bbc""); 
			assertEquals(""removeVowels"", removeVowels(""bbcd abcdef""), ""bbcd abcdef"");
			assertEquals(""removeVowels"", removeVowels(""bbbbbbbb""), ""bbbbbbbb""); 
			assertEquals(""removeVowels"", removeVowels(""cccccccc""), ""cccccccc"");
			assertEquals(""removeVowels"", removeVowels(""dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd""), 
                     removeVowels(""ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd""), 
                     removeVowels(""dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd""), 
                     removeVowels(""dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"")){
            assertEquals(""removeVowels"", removeVowels(""abcdefghijklm""), ""abcdefghijklm""); 
            assertEquals(""removeVowels"", removeVowels(""aBb""), ""aBb""); 
            assertEquals(""removeVowels"", removeVowels(""abCa""), ""abCa"");
			assertEquals(""removeVowels"", removeVowels(""bBBa""), ""bBBa""); 
			assertEquals(""removeVowels"", removeVowels(""BaBbCa""), ""BaBbCa""); 
			assertEquals(""removeVowels"", removeVowels(""bcd""), ""bcd""); 
			assertEquals(""removeVowels"", removeVowels(""b""), ""b""); 
			assertEquals(""removeVowels"", removeVowels(""ba""), ""ba""); 
            
	    }
    }"
/HumanEvalJava/src/main/java/original/id_71.java,/HumanEvalJava/src/main/java/original/id_71.java,272.28579330444336,length,"// TriangleArea1.java
package original;

class TriangleArea1 {

    /**
     * * Given the lengths of the three sides of a triangle. Return the area of
     * the triangle rounded to 2 decimal points if the three sides form a valid triangle.
     * Otherwise return -1
     * Three sides make a valid triangle when the sum of any two sides is greater
     * than the third side.
     * Example:
     * triangle_area(3, 4, 5) == 6.00
     * triangle_area(1, 2, 10) == -1
     *
     * > triangleArea(3, 4, 5)
     * 6.0
     * > triangleArea(1, 2, 10)
     * -1
     * > triangleArea(4, 8, 5)
     * 8.18
     * > triangleArea(2, 2, 2)
     * 1.73
     * > triangleArea(1, 2, 3)
     * -1
     * > triangleArea(10, 5, 7)
     * 16.25
     * > triangleArea(2, 6, 3)
     * -1
     * > triangleArea(1, 1, 1)
     * 0.43
     * > triangleArea(2, 2, 10)
     * -1
     */
    public static Number triangleArea(int a, int b, int c) {
        if (a + b <= c || a + c <= b || b + c <= a) {
            return -1;
        }
        double p = (a + b + c) / 2.0;
        return Math.round(Math.sqrt(p * (p - a) * (p - b) * (p - c)) * 100.0) / 100.0;
    }
}
","// TriangleArea1Test.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link TriangleArea1}.
* It contains one unit test case for the {@link TriangleArea1#triangleArea(int, int, int)} method.
*/
class TriangleArea1Test {","
  @Test
  public void testAllMethods() {
    System.out.println(""TriangleArea1Test"");
    // test the following method:
    assertEquals(""TriangleArea1Test.triangleArea(a,b,c)"",
            expectedMethod(),
     TriangleArea1.triangleArea(2, 3, 5));
    
    //Test the following method:
    assertNotEquals(""TriangleArea1Test.testAllMethods"",
                   expectedMethod(),
                   testMethod());
		System.out.println(""Test "" + expectedMethod() + "" failed"");
  }
  
  //Test method of triangleArea()
  private String expectedMethod() {
    return ""testAllMethods"";
  }
  
  //Test method of triangleArea(int a,int b,int c)
  private String testMethod() {
    int a = 0;
    int b = 1;
    int c = 2;
    return new TriangleArea1().triangleArea(a, b, c);
  }
}
//class which extends class 'Number'
// class which extends class 'Triangle'
// class which extends class 'TriangleArea1Test'
"
/HumanEvalJava/src/main/java/original/id_26.java,/HumanEvalJava/src/main/java/original/id_26.java,635.4155685901642,length,"// RemoveDuplicates.java
package original;

import java.util.ArrayList;
import java.util.List;

class RemoveDuplicates {

    /**
     * From a list of integers, remove all elements that occur more than once.
     * Keep order of elements left the same as in the input.
     *
     * > removeDuplicates([1, 2, 3, 2, 4])
     * [1, 3, 4]
     * > removeDuplicates([])
     * []
     * > removeDuplicates([1, 2, 3, 4])
     * [1, 2, 3, 4]
     * > removeDuplicates([1, 2, 3, 2, 4, 3, 5])
     * [1, 4, 5]
     */
    public static List<Object> removeDuplicates(List<Object> numbers) {
        List<Object> result = new ArrayList<Object>();
        for (int i = 0; i < numbers.size(); i++) {
            if (numbers.indexOf(numbers.get(i)) == numbers.lastIndexOf(numbers.get(i))) {
                result.add(numbers.get(i));
            }
        }
        return result;
    }
}
","// RemoveDuplicatesTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RemoveDuplicates}.
* It contains one unit test case for the {@link RemoveDuplicates#removeDuplicates(List)} method.
*/
class RemoveDuplicatesTest {","
	@Test
	public void test() {
		List<String> array = new ArrayList<String>();
		array.add(""A"", ""A"");
		array.add(""B"", ""A"");
		array.add(""C"", ""B"");
		array.add(""E"", ""C"");
		array.add(""F"", ""E"");
		removeDuplicates(array);
		assertTrue(array.size() > 4);
	}
	
}"
/HumanEvalJava/src/main/java/original/id_30.java,/HumanEvalJava/src/main/java/original/id_30.java,273.38533544540405,length,"// GetPositive.java
package original;

import java.util.ArrayList;
import java.util.List;

class GetPositive {

    /**
     * Return only positive numbers in the list.
     *
     * > getPositive([-1, 2, -4, 5, 6])
     * [2, 5, 6]
     * > getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
     * [5, 3, 2, 3, 9, 123, 1]
     * > getPositive([-1, -2, 4, 5, 6])
     * [4, 5, 6]
     * > getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])
     * [5, 3, 2, 3, 3, 9, 123, 1]
     * > getPositive([-1, -2])
     * []
     * > getPositive([])
     * []
     */
    public static List<Object> getPositive(List<Object> l) {
        List<Object> result = new ArrayList<Object>();
        for (Object value : l) {
            if (value instanceof Integer) {
                int i = (Integer) value;
                if (i > 0) {
                    result.add(i);
                }
            }
        }
        return result;
    }
}
","// GetPositiveTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link GetPositive}.
* It contains one unit test case for the {@link GetPositive#getPositive(List)} method.
*/
class GetPositiveTest {","
    /**
     * Test case for the {@link GetPositive#getPositive(List)} method.
     */
    @Test
    void test_getPositive_List_correctlyReturnsCorrectValues() {
        List<Object> testList = new ArrayList<Object>();
        testList
               .add(11)
               .add(8)
               .add(3)
               .add(44)
               .add(-5)
               .add(0)
               .add(1);
        List<Object> expectedList = new ArrayList<Object>();
        expectedList.add(18);
        expectedList.add(1);
        expectedList.add(44);
        expectedList.add(-5);
        expectedList.add(0);
        expectedList.add(3);
        expectedList.add(11);
        expectedList.add(44);
        expectedList.add(-5);
        expectedList.add(0);
        expectedList.add(3);
        expectedList.add(55);
        expectedList.add(-5);
        expectedList.add(0);
        List<Object> result = GetPositive.getPositive(testList);
        assertNotNull(result);
        assertEquals(expectedList, result);
    }
    
    /**
     * Test case for the {@link GetPositive#getPositive(List)} method.
     */
    @Test
    void test_getPositive_List_correctlyReturnsListOfCorrectValues() {
        List<Object> testList = new ArrayList<Object>();
        testList
               .add(11)
               .add(8)
               .add(3)
               .add(44)
               .add(-5)
               .add(0)
               .add(1);
        List<Object> expectedList = new ArrayList<Object>();
        expectedList.add(18);
        expectedList.add(1);
        expectedList.add(44);
        expectedList.add(-5);
        expectedList.add(0);
        expectedList.add(3);
        expectedList.add(11);
        expectedList.add(44);
        expectedList.add(-5);
        expectedList.add(0);
        expectedList.add(3);
        expectedList.add(55);
        expectedList.add(-5);
        expectedList.add(0);
        expectedList.add(3);
        expectedList.add(3);
        expectedList.add(123);
        expectedList.add(1);
        expectedList.add(44);
        expectedList.add(-5);
        expectedList.add(0);
        expectedList.add(2);
        
        List<Object> result = GetPositive.getPositive(testList);
        assertNotNull(result);
        assertEquals(expectedList, result);
    }
    
    /**
     * Test case for the {@link GetPositive#getPositive(List)} method.
     */
    @Test
    void test_getPositive_ArrayOfList_throwsIllegalArgumentException() {
       List<Object> testList = new ArrayList<Object>();
       testList.add(3);
       testList.add(-5);
       testList = null;
       List<Object> result = GetPositive.getPositive(testList);
       assertNotNull(result);
       assertEquals(16, result.size());
    }
    

}
"
/HumanEvalJava/src/main/java/original/id_88.java,/HumanEvalJava/src/main/java/original/id_88.java,569.6839945316315,length,"// SortArray1.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class SortArray1 {

    /**
     * * Given an array of non-negative integers, return a copy of the given array after sorting,
     * you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
     * or sort it in descending order if the sum( first index value, last index value) is even.
     *
     * Note:
     * * don't change the given array.
     *
     * Examples:
     * * sort_array([]) => []
     * * sort_array([5]) => [5]
     * * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
     * * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
     *
     * > sortArray([])
     * []
     * > sortArray([5])
     * [5]
     * > sortArray([2, 4, 3, 0, 1, 5])
     * [0, 1, 2, 3, 4, 5]
     * > sortArray([2, 4, 3, 0, 1, 5, 6])
     * [6, 5, 4, 3, 2, 1, 0]
     * > sortArray([2, 1])
     * [1, 2]
     * > sortArray([15, 42, 87, 32, 11, 0])
     * [0, 11, 15, 32, 42, 87]
     * > sortArray([21, 14, 23, 11])
     * [23, 21, 14, 11]
     */
    public static List<Object> sortArray(List<Object> array) {
        if (array.size() <= 1) {
            return array;
        }
        int sum = (Integer) array.get(0) + (Integer) array.get(array.size() - 1);
        List<Object> sortedArray = new ArrayList<Object>(array);
        Collections.sort(sortedArray, new Comparator<Object>() {

            @Override
            public int compare(Object o1, Object o2) {
                return (Integer) o1 - (Integer) o2;
            }
        });
        if (sum % 2 == 0) {
            Collections.reverse(sortedArray);
        }
        return sortedArray;
    }
}
","// SortArray1Test.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortArray1}.
* It contains one unit test case for the {@link SortArray1#sortArray(List)} method.
*/
class SortArray1Test {","
    /**
     * Unit tests the {@link SortArray1#sortArray(List)} method for a single list of two non-negative integer values
     */
    @Test
    public void test1() {
        assertEquals(new ArrayList<Object>(2), Collections.singletonList(new Integer(22)));
    }
		
}"
/HumanEvalJava/src/main/java/original/id_67.java,/HumanEvalJava/src/main/java/original/id_67.java,297.41937732696533,length,"// FruitDistribution.java
package original;

class FruitDistribution {

    /**
     * * In this task, you will be given a string that represents a number of apples and oranges
     * that are distributed in a basket of fruit this basket contains
     * apples, oranges, and mango fruits. Given the string that represents the total number of
     * the oranges and apples and an integer that represent the total number of the fruits
     * in the basket return the number of the mango fruits in the basket.
     * For example:
     * fruitDistribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
     * fruitDistribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
     * fruitDistribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
     * fruitDistribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19
     *
     * > fruitDistribution(""5 apples and 6 oranges"", 19)
     * 8
     * > fruitDistribution(""5 apples and 6 oranges"", 21)
     * 10
     * > fruitDistribution(""0 apples and 1 oranges"", 3)
     * 2
     * > fruitDistribution(""1 apples and 0 oranges"", 3)
     * 2
     * > fruitDistribution(""2 apples and 3 oranges"", 100)
     * 95
     * > fruitDistribution(""2 apples and 3 oranges"", 5)
     * 0
     * > fruitDistribution(""1 apples and 100 oranges"", 120)
     * 19
     */
    public static int fruitDistribution(String s, int n) {
        int apples = 0;
        int oranges = 0;
        int mangoes = 0;
        String[] words = s.split("" "");
        for (int i = 0; i < words.length; i++) {
            if (words[i].equals(""apples"")) {
                apples = Integer.parseInt(words[i - 1]);
            }
            if (words[i].equals(""oranges"")) {
                oranges = Integer.parseInt(words[i - 1]);
            }
        }
        mangoes = n - apples - oranges;
        return mangoes;
    }
}
","// FruitDistributionTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link FruitDistribution}.
* It contains one unit test case for the {@link FruitDistribution#fruitDistribution(String, int)} method.
*/
class FruitDistributionTest {","/**
		 * Empty constructor.
		 */
		public FruitDistributionTest() {

		}

		/**
		 * Test {@link FruitDistribution#fruitDistribution(String, int)} method.
		*/
		@Test
    public void testFruitDistribution() {
		assertEquals(""Incorrect fruitDistribution"", ""apple + orange + mango"",
				fruitDistribution(""apple"", 1));
    }
}"
/HumanEvalJava/src/main/java/original/id_3.java,/HumanEvalJava/src/main/java/original/id_3.java,627.6837813854218,length,"// BelowZero.java
package original;

import java.util.List;

class BelowZero {

    /**
     * You're given a list of deposit and withdrawal operations on a bank account that starts with
     * zero balance. Your task is to detect if at any point the balance of account falls below zero, and
     * at that point function should return True. Otherwise, it should return False.
     *
     * > belowZero([1, 2, 3])
     * false
     * > belowZero([1, 2, -4, 5])
     * true
     * > belowZero([])
     * false
     * > belowZero([1, 2, -3, 1, 2, -3])
     * false
     * > belowZero([1, 2, -4, 5, 6])
     * true
     * > belowZero([1, -1, 2, -2, 5, -5, 4, -4])
     * false
     * > belowZero([1, -1, 2, -2, 5, -5, 4, -5])
     * true
     * > belowZero([1, -2, 2, -2, 5, -5, 4, -4])
     * true
     */
    public static Boolean belowZero(List<Object> operations) {
        Double balance = 0.0;
        for (Object operation : operations) {
            if (operation instanceof Double) {
                balance += (Double) operation;
            } else if (operation instanceof Integer) {
                balance += (Integer) operation;
            } else {
                throw new IllegalArgumentException(""Invalid operation type"");
            }
            if (balance < 0) {
                return true;
            }
        }
        return false;
    }
}
","// BelowZeroTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link BelowZero}.
* It contains one unit test case for the {@link BelowZero#belowZero(List)} method.
*/
class BelowZeroTest {","/**
     * Test cases for the method 'belowZero(List)'.
     */
	@Test
	void test2() {
		List<Object> list  = new ArrayList<>();
		Object  o       = 0;
		double  d       = -1;
		Object  o2      = 1;
		double  d2      = 2;

		// Test values of parameters
		list
				.add(o)
				.add(d)
				.add(o2)
				.add(d2);

		assertEquals(true, belowZero(list).isEmpty()); // isEmpty check

		list = null; // to be sure that the list becomes null
	}
}
"
/HumanEvalJava/src/main/java/original/id_126.java,/HumanEvalJava/src/main/java/original/id_126.java,514.0361692905426,length,"// IsSorted.java
package original;

import java.util.HashMap;
import java.util.List;

class IsSorted {

    /**
     * * Given a list of numbers, return whether or not they are sorted
     * in ascending order. If list has more than 1 duplicate of the same
     * number, return False. Assume no negative numbers and only integers.
     *
     * Examples
     * isSorted([5]) ➞ True
     * isSorted([1, 2, 3, 4, 5]) ➞ True
     * isSorted([1, 3, 2, 4, 5]) ➞ False
     * isSorted([1, 2, 3, 4, 5, 6]) ➞ True
     * isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
     * isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
     * isSorted([1, 2, 2, 3, 3, 4]) ➞ True
     * isSorted([1, 2, 2, 2, 3, 4]) ➞ False
     *
     * > isSorted([5])
     * true
     * > isSorted([1, 2, 3, 4, 5])
     * true
     * > isSorted([1, 3, 2, 4, 5])
     * false
     * > isSorted([1, 2, 3, 4, 5, 6])
     * true
     * > isSorted([1, 2, 3, 4, 5, 6, 7])
     * true
     * > isSorted([1, 3, 2, 4, 5, 6, 7])
     * false
     * > isSorted([])
     * true
     * > isSorted([1])
     * true
     * > isSorted([3, 2, 1])
     * false
     * > isSorted([1, 2, 2, 2, 3, 4])
     * false
     * > isSorted([1, 2, 3, 3, 3, 4])
     * false
     * > isSorted([1, 2, 2, 3, 3, 4])
     * true
     * > isSorted([1, 2, 3, 4])
     * true
     */
    public static Boolean isSorted(List<Object> lst) {
        if (lst.size() <= 1) {
            return true;
        }
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < lst.size() - 1; i++) {
            int curr = (int) lst.get(i);
            map.put(curr, map.getOrDefault(curr, 0) + 1);
            if (map.get(curr) > 2) {
                return false;
            }
        }
        int prev = (int) lst.get(0);
        for (int i = 1; i < lst.size(); i++) {
            int curr = (int) lst.get(i);
            if (curr < prev) {
                return false;
            }
            prev = curr;
        }
        return true;
    }
}
","// IsSortedTest.java
package original;

import java.util.HashMap;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsSorted}.
* It contains one unit test case for the {@link IsSorted#isSorted(List)} method.
*/
class IsSortedTest {","
    /**
     * Test case with simple array list.
     */
    @Test
    void test() {
        List<Integer> simpleList = new ArrayList<>();
        for (int i = 0; i < 10; i++) {
            simpleList.add(i);
            simpleList.add(i - 1);
            simpleList.add(i + 1);
        }
        System.out.println(new IsSorted<Integer>().isSorted(simpleList)
                          .getReturnValue());
    }

    /**
     * Test case with duplicated values in the the array list.
     */
    @Test
    void testRepeated() {
        List<Integer> list = new ArrayList<>();
        int size = 1;
        for (int i = 0; i < size - 1; i++) {
            int value = (int) (i % size == 0? i : (i + 1/size)) * size;
            list.add(value);
            list.add(value + 1);
            list.add(value - 1);
        }
        System.out.println(new IsSorted<Integer>(list).isSorted(list)
                          .getReturnValue());
    }

    /**
     * Test case with an int array.
     */
    @Test
    void testArray() {
        List<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        System.out.println(new IsSorted<Integer>(list).isSorted(list)
                          .getReturnValue());
    }
	
	/**
	 * @deprecated Use {@link IsSorted#testRepeated()} instead.
	 */
    @Test
    @Deprecated
    void testRepeated2() {
		System.out.println(""@Deprecated testRepeated2"");
		List<Integer> list = new ArrayList<>();
        int size = 5;
        for (int i = 0; i < size; i++) {
            int value = (int) (i % size == 0? i : (i + 1/size)) * size;
            list.add(value);
            list.add(value - 1);
            list.add(value + 1);
        }
        System.out.println(new IsSorted<Integer>(list).isSorted(list)
                          .getReturnValue());
    }

    /**
     * @deprecated Use {@link IsSorted#testRepeated()} instead.
     */
    @Test
    @Deprecated
    void testRepeated3() {
        List<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        System.out.println(new IsSorted<Integer>(list).isSorted(list)
                          .getReturnValue());
    }
}"
/HumanEvalJava/src/main/java/original/id_130.java,/HumanEvalJava/src/main/java/original/id_130.java,497.8677866458893,length,"// Tri.java
package original;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class Tri {

    /**
     * Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in
     * the last couple centuries. However, what people don't know is Tribonacci sequence.
     * Tribonacci sequence is defined by the recurrence:
     * tri(1) = 3
     * tri(n) = 1 + n / 2, if n is even.
     * tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
     * For example:
     * tri(2) = 1 + (2 / 2) = 2
     * tri(4) = 3
     * tri(3) = tri(2) + tri(1) + tri(4)
     * = 2 + 3 + 3 = 8
     * You are given a non-negative integer number n, you have to a return a list of the
     * first n + 1 numbers of the Tribonacci sequence.
     * Examples:
     * tri(3) = [1, 3, 2, 8]
     *
     * > tri(3)
     * [1, 3, 2.0, 8.0]
     * > tri(4)
     * [1, 3, 2.0, 8.0, 3.0]
     * > tri(5)
     * [1, 3, 2.0, 8.0, 3.0, 15.0]
     * > tri(6)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]
     * > tri(7)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]
     * > tri(8)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]
     * > tri(9)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]
     * > tri(20)
     * [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]
     * > tri(0)
     * [1]
     * > tri(1)
     * [1, 3]
     */
    public static List<Number> tri(int n) {
        if (n == 0) {
            return Arrays.asList(1);
        }
        List<Number> my_tri = new ArrayList<>();
        my_tri.add(1);
        my_tri.add(3);
        for (int i = 2; i < n + 1; i++) {
            if (i % 2 == 0) {
                my_tri.add(i / 2 + 1.0);
            } else {
                my_tri.add(my_tri.get(i - 1).doubleValue() + my_tri.get(i - 2).doubleValue() + (i + 3) / 2);
            }
        }
        return my_tri;
    }
}
","// TriTest.java
package original;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Tri}.
* It contains one unit test case for the {@link Tri#tri(int)} method.
*/
class TriTest {","
  private final static String[] TEST_DETAILS = { """", ""1"" };
	

    @org.junit.jupiter.api.Test
    void testTri(@org.junit.jupiter.api.ParameterizedTest @org.junit.jupiter.api.TestParametrized @OverrideClass {
		{true}
    }.asList(TEST_DETAILS);

  @Test
  public void testTestTri() {
	  
    List<Object> expected = Arrays.asList(new Object[] {1});
	  
    assertEquals(expected, new Tri().tri(1));
  }
  

}
"
/HumanEvalJava/src/main/java/original/id_72.java,/HumanEvalJava/src/main/java/original/id_72.java,182.9846155643463,length,"// WillItFly.java
package original;

import java.util.List;

class WillItFly {

    /**
     * * Write a function that returns True if the object q will fly, and False otherwise.
     * The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.
     *
     * Example:
     * willItFly([1, 2], 5) ➞ False
     * # 1+2 is less than the maximum possible weight, but it's unbalanced.
     *
     * willItFly([3, 2, 3], 1) ➞ False
     * # it's balanced, but 3+2+3 is more than the maximum possible weight.
     *
     * willItFly([3, 2, 3], 9) ➞ True
     * # 3+2+3 is less than the maximum possible weight, and it's balanced.
     *
     * willItFly([3], 5) ➞ True
     * # 3 is less than the maximum possible weight, and it's balanced.
     *
     * > willItFly([3, 2, 3], 9)
     * true
     * > willItFly([1, 2], 5)
     * false
     * > willItFly([3], 5)
     * true
     * > willItFly([3, 2, 3], 1)
     * false
     * > willItFly([1, 2, 3], 6)
     * false
     * > willItFly([5], 5)
     * true
     */
    public static Boolean willItFly(List<Integer> q, int w) {
        int sum = 0;
        for (int i = 0; i < q.size(); i++) {
            sum += q.get(i);
        }
        if (sum > w) {
            return false;
        }
        for (int i = 0; i < q.size() / 2; i++) {
            if (q.get(i) != q.get(q.size() - i - 1)) {
                return false;
            }
        }
        return true;
    }
}
","// WillItFlyTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link WillItFly}.
* It contains one unit test case for the {@link WillItFly#willItFly(List, int)} method.
*/
class WillItFlyTest {","
	/**
	 * Test method for {@link java.lang.Boolean#willItFly(List, int)}.
	 * @throws Throwable
	 */
	@Test
	void test() throws Throwable {
		List<Integer> q = new RandomList<Integer>(10);
		int w = 100;
		assertTrue(willItFly(q, w));
		
		assertTrue(willItFly(q, 100));
		assertTrue(willItFly(q, 100));
	}
}
"
/HumanEvalJava/src/main/java/original/id_148.java,/HumanEvalJava/src/main/java/original/id_148.java,547.300797700882,length,"// Bf.java
package original;

import java.util.ArrayList;
import java.util.List;

class Bf {

    /**
     * * There are eight planets in our solar system: the closest to the Sun
     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,
     * Uranus, Neptune.
     * Write a function that takes two planet names as strings planet1 and planet2.
     * The function should return a tuple containing all planets whose orbits are
     * located between the orbit of planet1 and the orbit of planet2, sorted by
     * the proximity to the sun.
     * The function should return an empty tuple if planet1 or planet2
     * are not correct planet names.
     * Examples
     * bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
     * bf(""Earth"", ""Mercury"") ==> (""Venus"")
     * bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
     *
     * > bf(""Jupiter"", ""Neptune"")
     * [""Saturn"", ""Uranus""]
     * > bf(""Earth"", ""Mercury"")
     * [""Venus""]
     * > bf(""Mercury"", ""Uranus"")
     * [""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""]
     * > bf(""Neptune"", ""Venus"")
     * [""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus""]
     * > bf(""Earth"", ""Earth"")
     * []
     * > bf(""Mars"", ""Earth"")
     * []
     * > bf(""Jupiter"", ""Makemake"")
     * []
     */
    public static List<Object> bf(String planet1, String planet2) {
        List<Object> planets = new ArrayList<Object>();
        planets.add(""Mercury"");
        planets.add(""Venus"");
        planets.add(""Earth"");
        planets.add(""Mars"");
        planets.add(""Jupiter"");
        planets.add(""Saturn"");
        planets.add(""Uranus"");
        planets.add(""Neptune"");
        List<Object> result = new ArrayList<Object>();
        if (planets.contains(planet1) && planets.contains(planet2)) {
            int index1 = planets.indexOf(planet1);
            int index2 = planets.indexOf(planet2);
            if (index1 < index2) {
                for (int i = index1 + 1; i < index2; i++) {
                    result.add(planets.get(i));
                }
            } else {
                for (int i = index2 + 1; i < index1; i++) {
                    result.add(planets.get(i));
                }
            }
        }
        return result;
    }
}
","// BfTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Bf}.
* It contains one unit test case for the {@link Bf#bf(String, String)} method.
*/
class BfTest {","public static class TestCase {

		private String planet1;

		private String planet2;

		public TestCase(String planet1, String planet2) {
			this.planet1 = planet1;
			this.planet2 = planet2;
		}

		@Test
		void testBf() {
			assertEquals("""", Bf.bf(null, null));
			assertNull(Bf.bf(null, ""Earth""));
			assertNull(Bf.bf(""Mars"", null));
			assertNull(Bf.bf(""Earth"", ""Mars""));
			assertEquals("""", Bf.bf(""Earth"", ""Mars""));
			assertEquals("""", Bf.bf(""Earth"", ""Mars"", ""Mars""));
			assertNull((Bf.bf(null, ""Earth"", ""Mars"")));
			assertNull((Bf.bf(""Mars"", ""Earth"", ""Mars"")));
			assertEquals(""Mars"", Bf.bf(""Mars"", ""Planet 1"", ""Planet 2""));
			assertNull(Bf.bf(""Mars"", ""Planet 2"", ""Planet 1""));
			assertNull(Bf.bf(""Planet 1"", ""Planet 2"", ""Planet 1""));
		}
		
		private static void assertResultsEqual(List<Object> expected, List<Object> actualValue) {
			List<Object> expectedResult = new ArrayList<Object>();
            for(int i= 0; i < expected.size(); i++) {
                expectedResult.add(expected.get((i) + 1));
            }
			if(actualValue == null) {
				assertTrue(expected == null);
				
			} else {
				assertEquals(expected, actualValue);
			}
			
			int index = actualValue.size();
			assertTrue(actualValue.size() <= expected.size());
			Object expectedValue = expected.remove(index--);
			for(int i= 0; i < expected.size() && index >= 0; i++) {
				expectedResult.add(expected.get(index)
								+ ((expectedValue == null)? """" : expectedValue));
				expectedValue = expected.get((i) + 1);
			}
			for(int i= 0; i<expected.size(); i++) {
				nulls.add(expected.get((i) + 1));
			}
			assertEquals(expectedResult, actualValue);
			assertEquals(expected.size(), actualValue.size());
			for(String s : expectedResult) {
				assertEquals(expected.get(expectedValue == null? 0
						: expectedValue.toString().length()), expected.get(i + 1));
			}
		}
		}

}
"
/HumanEvalJava/src/main/java/original/id_25.java,/HumanEvalJava/src/main/java/original/id_25.java,621.1586441993713,length,"// Factorize.java
package original;

import java.util.ArrayList;
import java.util.List;

class Factorize {

    /**
     * Return list of prime factors of given integer in the order from smallest to largest.
     * Each of the factors should be listed number of times corresponding to how many times it appears in factorization.
     * Input number should be equal to the product of all factors
     *
     * > factorize(8)
     * [2, 2, 2]
     * > factorize(25)
     * [5, 5]
     * > factorize(70)
     * [2, 5, 7]
     * > factorize(2)
     * [2]
     * > factorize(4)
     * [2, 2]
     * > factorize(8)
     * [2, 2, 2]
     * > factorize(57)
     * [3, 19]
     * > factorize(3249)
     * [3, 3, 19, 19]
     * > factorize(185193)
     * [3, 3, 3, 19, 19, 19]
     * > factorize(20577)
     * [3, 19, 19, 19]
     * > factorize(18)
     * [2, 3, 3]
     */
    public static List<Integer> factorize(int n) {
        List<Integer> result = new ArrayList<Integer>();
        for (int i = 2; i <= n; i++) {
            while (n % i == 0) {
                result.add(i);
                n /= i;
            }
        }
        return result;
    }
}
","// FactorizeTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Factorize}.
* It contains one unit test case for the {@link Factorize#factorize(int)} method.
*/
class FactorizeTest {","// Input number should be equal to the product of all factors
	@Test
    public void testFactorizeInt() {
                final int n = 10501;
        assertEquals(new Integer(3), factorize(n));
    }

    // Input numbers array {10, 11, 15, 21, 5} {0, 1, 2, 4} {1, 2, 3, 4, 5}
	@Test
    public void testAllNums() {
            final List<Integer> input = new ArrayList<Integer>();
            input.add(new Integer(10));
            // Add all numbers from the input number for each test
            for (int i = 6 + 1; i <= 10; i++) {
                input.add(new Integer(i));
            }
        assertTrue(input.size() == 4);
        try {
                for (int i = 0; i < 2; i++) {
                    if (input.get(i) instanceof Integer) {
                        assertEquals(input.get(i), factorize(input.get(i)));
                        assertEquals(2, input.indexOf(input.get(i)));
                    } else {
                        assertFalse(input.get(i) instanceof Integer);
                        assertTrue(input.indexOf(input.get(i)) == 0);
                    }
                }
        } catch (ArrayIndexOutOfBoundsException ex) {
                fail (ex.getMessage());
        }
    }

}	//FactorizeTest.java"
/HumanEvalJava/src/main/java/original/id_33.java,/HumanEvalJava/src/main/java/original/id_33.java,365.64001393318176,length,"// SortThird.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class SortThird {

    /**
     * This function takes a list l and returns a list l' such that
     * l' is identical to l in the indices that are not divisible by three, while its values at the indicies that are divisible by three are equal
     * to the values of the corresponding indices of l, but sorted.
     * > sortThird([1, 2, 3])
     * [1, 2, 3]
     * > sortThird([5, 6, 3, 4, 8, 9, 2])
     * [2, 6, 3, 4, 8, 9, 5]
     * > sortThird([1, 2, 3])
     * [1, 2, 3]
     * > sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
     * [1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10]
     * > sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])
     * [-10, 8, -12, 3, 23, 2, 4, 11, 12, 5]
     * > sortThird([5, 6, 3, 4, 8, 9, 2])
     * [2, 6, 3, 4, 8, 9, 5]
     * > sortThird([5, 8, 3, 4, 6, 9, 2])
     * [2, 8, 3, 4, 6, 9, 5]
     * > sortThird([5, 6, 9, 4, 8, 3, 2])
     * [2, 6, 9, 4, 8, 3, 5]
     * > sortThird([5, 6, 3, 4, 8, 9, 2, 1])
     * [2, 6, 3, 4, 8, 9, 5, 1]
     */
    public static List<Integer> sortThird(List<Integer> l) {
        List<Integer> l2 = new ArrayList<Integer>(l);
        for (int i = 0; i < l.size(); i++) {
            if (i % 3 == 0) {
                List<Integer> subl = new ArrayList<Integer>();
                for (int j = 0; j < l.size(); j++) {
                    if (j % 3 == 0) {
                        subl.add(l.get(j));
                    }
                }
                Collections.sort(subl);
                l2.set(i, subl.get(i / 3));
            }
        }
        return l2;
    }
}
","// SortThirdTest.java
package original;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SortThird}.
* It contains one unit test case for the {@link SortThird#sortThird(List)} method.
*/
class SortThirdTest {","
	/**
	* This test method checks the {@link SortThird#sortThird(List)}.
	* The method first checks if the size of the list is set correctly.
	* The test uses a generator function to generate the correct values.
	* The values of the indices are set as {@link List} of integers and then checks if
	* the {@link SortThird#sortThird(List)} method has values.
	*/
	@Test
	void test() {

        new SortThird().sortThird(new ArrayList<Integer>(Collections.nCopies(10,  10)));
        checkValues(""SortThird"", 0, 2, 10,  0,  10);

        int indices[] = {2, 6, 3, 4, 8, 9};
        new SortThird().sortThird(new ArrayList<Integer>(Collections.nCopies(indices.length, 0)));
        List<Integer> output = new SortThird().sortThird(Collections.nCopies(indices.length,0));
        checkValues(output,0, 1, 2, 2, 0);
        
        output = new SortThird().sortThird(new ArrayList<Integer>());
        checkValues(output,0, 0, 0, 0, 0);
		
	}
	
	/**
	* Check the values of the {@link SortThird#sortThird(List)} method.
	* First checks if the size of the list is set correctly.
	* Next test the values of the indices.
	* Finally checks if the values of {@link SortThird#sortThird(List)} method has values.
	*/
	private void checkValues(List<Integer> output, int index, int divisor, int total, int divisor1, int divisor2) {

        assertEquals(output.get(index-1), total / divisor3, ""The previous value of "" + output.get(index-1) + "" was "" + (total/(divisor3)));
        assertEquals(output.get(index), divisor / divisor1, ""The index ("" + index + "") of "" + output.get(index) + "" was "" + (divisor / divisor1));
        assertEquals(output.get((index+1)), total / divisor2, ""The index ("" + index + "") of "" + output.get((index+1) + "") was "" + (total/(divisor2)));
        assertEquals(inputToString(output), ""SortThird()"");
        
	}

	/**
	* This function will output the string. 
	* @return String output 
	*/
	private String inputToString(List<Integer> output) {
		StringBuilder builder = new StringBuilder();
		for (int i = 0; i < output.size(); i++) {
			builder.append(output.get(i).toString()); 
			builder.append("", "");
		}

		return builder.toString(); 
	}
}"
/HumanEvalJava/src/main/java/original/id_109.java,/HumanEvalJava/src/main/java/original/id_109.java,283.95349621772766,length,"// MoveOneBall.java
package original;

import java.util.List;

class MoveOneBall {

    /**
     * We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
     * numbers in the array will be randomly ordered. Your task is to determine if
     * it is possible to get an array sorted in non-decreasing order by performing
     * the following operation on the given array:
     * You are allowed to perform right shift operation any number of times.
     *
     * One right shift operation means shifting all elements of the array by one
     * position in the right direction. The last element of the array will be moved to
     * the starting position in the array i.e. 0th index.
     *
     * If it is possible to obtain the sorted array by performing the above operation
     * then return True else return False.
     * If the given array is empty then return True.
     *
     * Note: The given list is guaranteed to have unique elements.
     *
     * For Example:
     *
     * move_one_ball([3, 4, 5, 1, 2])==>True
     * Explanation: By performing 2 right shift operations, non-decreasing order can
     * be achieved for the given array.
     * move_one_ball([3, 5, 4, 1, 2])==>False
     * Explanation:It is not possible to get non-decreasing order for the given
     * array by performing any number of right shift operations.
     *
     * > moveOneBall([3, 4, 5, 1, 2])
     * true
     * > moveOneBall([3, 5, 10, 1, 2])
     * true
     * > moveOneBall([4, 3, 1, 2])
     * false
     * > moveOneBall([3, 5, 4, 1, 2])
     * false
     * > moveOneBall([])
     * true
     */
    public static Boolean moveOneBall(List<Object> arr) {
        if (arr.size() == 0) {
            return true;
        }
        int count = 0;
        for (int i = 0; i < arr.size(); i++) {
            if ((int) arr.get(i) > (int) arr.get((i + 1) % arr.size())) {
                count++;
            }
        }
        if (count <= 1) {
            return true;
        }
        return false;
    }
}
","// MoveOneBallTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MoveOneBall}.
* It contains one unit test case for the {@link MoveOneBall#moveOneBall(List)} method.
*/
class MoveOneBallTest {","@Test
		void testMoveOneBall() {
				moveOneBall(List.of(0, 1, 2, 3, 4, 5, 6));
		}
}
"
/HumanEvalJava/src/main/java/original/id_0.java,/HumanEvalJava/src/main/java/original/id_0.java,337.45438289642334,length,"// HasCloseElements.java
package original;

import java.util.List;

class HasCloseElements {

    /**
     * Check if in given list of numbers, are any two numbers closer to each other than the given threshold.
     *
     * > hasCloseElements([1.0, 2.0, 3.0], 0.5)
     * false
     * > hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
     * true
     * > hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3)
     * true
     * > hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05)
     * false
     * > hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)
     * true
     * > hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)
     * false
     * > hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1)
     * true
     * > hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0)
     * true
     * > hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5)
     * false
     */
    public static Boolean hasCloseElements(List<Double> numbers, Double threshold) {
        for (int i = 0; i < numbers.size(); i++) {
            for (int j = i + 1; j < numbers.size(); j++) {
                if (Math.abs(numbers.get(i) - numbers.get(j)) < threshold) {
                    return true;
                }
            }
        }
        return false;
    }
}
","// HasCloseElementsTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HasCloseElements}.
* It contains one unit test case for the {@link HasCloseElements#hasCloseElements(List, Double)} method.
*/
class HasCloseElementsTest {","
	/** A generic test case for the {@link HasCloseElements#hasCloseElements(List, Double)} method. */
	@Test
	public void testHasCloseElements() {
		// Setup
		final List<Double> numbers = Arrays.asList(1.1, 2.2, 3.1, 4.1, 5.1);
		
		// Test
		
		// HasCloseElements.hasCloseElements[numbers]
		assertSame(boolean.class, HasCloseElements.hasCloseElements(numbers, 0.5).getClass());
		assertSame(boolean.class, HasCloseElements.hasCloseElements(numbers, 0.95).getClass());
		assertSame(boolean.class, HasCloseElements.hasCloseElements(numbers, 0.4).getClass());
		assertSame(boolean.class, HasCloseElements.hasCloseElements(numbers, 0.01).getClass());
		assertSame(boolean.class, HasCloseElements.hasCloseElements(numbers, 0.3).getClass());
		assertSame(boolean.class, HasCloseElements.hasCloseElements(numbers, 0.075).getClass());
		assertSame(boolean.class, HasCloseElements.hasCloseElements(numbers, 0.2).getClass());
		assertSame(boolean.class, HasCloseElements.hasCloseElements(numbers, 0.005).getClass());
		assertSame(boolean.class, HasCloseElements.hasCloseElements(numbers, 0.0).getClass());
		assertSame(boolean.class, HasCloseElements.hasCloseElements(numbers, 0.7).getClass());
		assertSame(boolean.class, HasCloseElements.hasCloseElements(numbers, 0.5).getClass());
	}
}"
/HumanEvalJava/src/main/java/original/id_64.java,/HumanEvalJava/src/main/java/original/id_64.java,315.25934886932373,length,"// VowelsCount.java
package original;

class VowelsCount {

    /**
     * Write a function vowels_count which takes a string representing
     * a word as input and returns the number of vowels in the string.
     * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
     * vowel, but only when it is at the end of the given word.
     *
     * > vowelsCount(""abcde"")
     * 2
     * > vowelsCount(""Alone"")
     * 3
     * > vowelsCount(""key"")
     * 2
     * > vowelsCount(""bye"")
     * 1
     * > vowelsCount(""keY"")
     * 2
     * > vowelsCount(""bYe"")
     * 1
     * > vowelsCount(""ACEDY"")
     * 3
     */
    public static int vowelsCount(String s) {
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {
                count++;
            }
        }
        if (s.length() > 0 && (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y')) {
            count++;
        }
        return count;
    }
}
","// VowelsCountTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link VowelsCount}.
* It contains one unit test case for the {@link VowelsCount#vowelsCount(String)} method.
*/
class VowelsCountTest {","
	// Method to test the class {@link VowelsCount}.
	@Test
	void testVowelsCount() {
	  
		// Expected result
		assertEquals(2, VowelsCount.vowelsCount(""abcde""));
		assertEquals(1, VowelsCount.vowelsCount(""Alone""));
		assertEquals(3, VowelsCount.vowelsCount(""key""));
		assertEquals(2, VowelsCount.vowelsCount(""bye""));
		assertEquals(1, VowelsCount.vowelsCount(""keY""));
		assertEquals(1, VowelsCount.vowelsCount(""bYe""));	
			// assertEquals(0, VowelsCount.vowelsCount(""ACEDY"")); 
		assertEquals(0, VowelsCount.vowelsCount(""key""));
		assertEquals(0, VowelsCount.vowelsCount(""byEs""));
	  }
}
"
/HumanEvalJava/src/main/java/original/id_125.java,/HumanEvalJava/src/main/java/original/id_125.java,606.5000140666962,length,"// SplitWords.java
package original;

import java.util.Arrays;

class SplitWords {

    /**
     * * Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
     * should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
     * alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
     * Examples
     * splitWords(""Hello world!"") ➞ [""Hello"", ""world!""]
     * splitWords(""Hello,world!"") ➞ [""Hello"", ""world!""]
     * splitWords(""abcdef"") == 3
     *
     * > splitWords(""Hello world!"")
     * [""Hello"", ""world!""]
     * > splitWords(""Hello,world!"")
     * [""Hello"", ""world!""]
     * > splitWords(""Hello world,!"")
     * [""Hello"", ""world,!""]
     * > splitWords(""Hello,Hello,world !"")
     * [""Hello,Hello,world"", ""!""]
     * > splitWords(""abcdef"")
     * 3
     * > splitWords(""aaabb"")
     * 2
     * > splitWords(""aaaBb"")
     * 1
     * > splitWords("""")
     * 0
     */
    public static Object splitWords(String txt) {
        if (txt.contains("" "")) {
            return Arrays.asList(txt.split("" ""));
        } else if (txt.contains("","")) {
            return Arrays.asList(txt.split("",""));
        } else {
            int count = 0;
            for (int i = 0; i < txt.length(); i++) {
                if (txt.charAt(i) >= 'a' && txt.charAt(i) <= 'z' && (txt.charAt(i) - 'a') % 2 == 1) {
                    count++;
                }
            }
            return count;
        }
    }
}
","// SplitWordsTest.java
package original;

import java.util.Arrays;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SplitWords}.
* It contains one unit test case for the {@link SplitWords#splitWords(String)} method.
*/
class SplitWordsTest {","
	/**
	 * Test method for {@link SplitWords#splitWords(String)}.
	 */
	@Test
	void testSplitWords() {
		assertThat(Arrays.asList(SplitWords.splitWords(""Hello World!"")).size(), is(1));
	}
}

// SplitWords_Test.java"
/HumanEvalJava/src/main/java/original/id_48.java,/HumanEvalJava/src/main/java/original/id_48.java,82.50998568534851,length,"// IsPalindrome.java
package original;

class IsPalindrome {

    /**
     * Checks if given string is a palindrome
     *
     * > isPalindrome("""")
     * true
     * > isPalindrome(""aba"")
     * true
     * > isPalindrome(""aaaaa"")
     * true
     * > isPalindrome(""zbcd"")
     * false
     * > isPalindrome(""xywyx"")
     * true
     * > isPalindrome(""xywyz"")
     * false
     * > isPalindrome(""xywzx"")
     * false
     */
    public static Boolean isPalindrome(String text) {
        int i = 0;
        int j = text.length() - 1;
        while (i < j) {
            if (text.charAt(i) != text.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}
","// IsPalindromeTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsPalindrome}.
* It contains one unit test case for the {@link IsPalindrome#isPalindrome(String)} method.
*/
class IsPalindromeTest {","
	@Test
	public void isPalindromeTest1(){
		assertTrue(IsPalindrome.isPalindrome(""""));
		assertFalse(IsPalindrome.isPalindrome(""aba""));
		assertTrue(IsPalindrome.isPalindrome(""""));
		assertFalse(IsPalindrome.isPalindrome(""aaaa""));
		assertTrue(IsPalindrome.isPalindrome(""zazz""));
		assertFalse(IsPalindrome.isPalindrome(""""));
		assertFalse(IsPalindrome.isPalindrome(""xyw""));
		assertTrue(IsPalindrome.isPalindrome(""xyyx""));
		assertFalse(IsPalindrome.isPalindrome(""xy""));
		assertFalse(IsPalindrome.isPalindrome(""""));
	}
	
	@Test
	public void isPalindromeTest2(){
		assertFalse(IsPalindrome.isPalindrome(""abc""));
		assertFalse(IsPalindrome.isPalindrome(""ab""));
		assertTrue(IsPalindrome.isPalindrome(""a""));
		assertTrue(IsPalindrome.isPalindrome(""""));
		assertTrue(IsPalindrome.isPalindrome(""a""));
	}
}

"
/HumanEvalJava/src/main/java/original/id_133.java,/HumanEvalJava/src/main/java/original/id_133.java,604.5854299068451,length,"// SumSquares.java
package original;

import java.util.List;

class SumSquares {

    /**
     * You are given a list of numbers.
     * You need to return the sum of squared numbers in the given list,
     * round each element in the list to the upper int(Ceiling) first.
     * Examples:
     * For lst = [1,2,3] the output should be 14
     * For lst = [1,4,9] the output should be 98
     * For lst = [1,3,5,7] the output should be 84
     * For lst = [1.4,4.2,0] the output should be 29
     * For lst = [-2.4,1,1] the output should be 6
     *
     * > sumSquares([1, 2, 3])
     * 14
     * > sumSquares([1.0, 2, 3])
     * 14
     * > sumSquares([1, 3, 5, 7])
     * 84
     * > sumSquares([1.4, 4.2, 0])
     * 29
     * > sumSquares([-2.4, 1, 1])
     * 6
     * > sumSquares([100, 1, 15, 2])
     * 10230
     * > sumSquares([10000, 10000])
     * 200000000
     * > sumSquares([-1.4, 4.6, 6.3])
     * 75
     * > sumSquares([-1.4, 17.9, 18.9, 19.9])
     * 1086
     * > sumSquares([0])
     * 0
     * > sumSquares([-1])
     * 1
     * > sumSquares([-1, 1, 0])
     * 2
     */
    public static int sumSquares(List<Number> lst) {
        int sum = 0;
        for (Number n : lst) {
            sum += Math.pow(Math.ceil(n.doubleValue()), 2);
        }
        return sum;
    }
}
","// SumSquaresTest.java
package original;

import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SumSquares}.
* It contains one unit test case for the {@link SumSquares#sumSquares(List)} method.
*/
class SumSquaresTest {","
    @Test
    public void testSumSquares() {
	
        // For lst of size 5:
        // lst should have the following:
        //     13
        //     16
        //     17
        //     14
        //     18
        
        System.out.println(sumSquares([13, 16, 17, 14, 17]));
        assertEquals(16, sumSquares([13, 16, 17, 14, 17]));
    }
	
	
    @Test
    public void testSumSquaresList() {
	
        // For lst of size 5:
        // lst should have the following:
        //     13
        //     16
        //     17
        //     14
        //     18
        
        System.out.println(sumSquares([13, 19, 13, 16, 26]));
        assertEquals(26, sumSquares([13, 19, 13, 16, 25]));
    }
	
	
    @Test
    public void testSumSquaresWithEmptyList() {
	
        // For lst of size 5:
	// lst should have the following:
	//     14
	//     16
	//     17
	//     18
	//     27
	
        assertNull(sumSquares([]));
    }
	
	
    @Test
    public void testSumSquaresWithNegativeList() {
	
        // For lst of size 5:
	// lst should have the following:
	//     -4
	//     -6
	//     -7
	//     -6
	//     -4
	//     27
	
        assertEquals(0, sumSquares([-4]));
    }
	
	
    @Test
    public void testSumSquaresWithNonEmptyList() {
	
        // For lst of size 5:
	// lst should have the following:
	//     16.01
	//     19.99
	//     16.08
	//     13.88
	
	System.out.println(sumSquares([16.01, 15, 19.99, 16.07, 22]));
	assertEquals(22, sumSquares([16.01, 16.07, 16.08, 15.88, 19.99]));
    }

	
}
"
/HumanEvalJava/src/main/java/original/id_144.java,/HumanEvalJava/src/main/java/original/id_144.java,360.24728512763977,length,"// Simplify.java
package original;

class Simplify {

    /**
     * Your task is to implement a function that will simplify the expression
     * x * n. The function returns True if x * n evaluates to a whole number and False
     * otherwise. Both x and n, are string representation of a fraction, and have the following format,
     * <numerator>/<denominator> where both numerator and denominator are positive whole numbers.
     *
     * You can assume that x, and n are valid fractions, and do not have zero as denominator.
     *
     * simplify(""1/5"", ""5/1"") = True
     * simplify(""1/6"", ""2/1"") = False
     * simplify(""7/10"", ""10/2"") = False
     *
     * > simplify(""1/5"", ""5/1"")
     * true
     * > simplify(""1/6"", ""2/1"")
     * false
     * > simplify(""5/1"", ""3/1"")
     * true
     * > simplify(""7/10"", ""10/2"")
     * false
     * > simplify(""2/10"", ""50/10"")
     * true
     * > simplify(""7/2"", ""4/2"")
     * true
     * > simplify(""11/6"", ""6/1"")
     * true
     * > simplify(""2/3"", ""5/2"")
     * false
     * > simplify(""5/2"", ""3/5"")
     * false
     * > simplify(""2/4"", ""8/4"")
     * true
     * > simplify(""2/4"", ""4/2"")
     * true
     * > simplify(""1/5"", ""5/1"")
     * true
     * > simplify(""1/5"", ""1/5"")
     * false
     */
    public static Boolean simplify(String x, String n) {
        String[] a = x.split(""/"");
        String[] b = n.split(""/"");
        int numerator = Integer.parseInt(a[0]) * Integer.parseInt(b[0]);
        int denom = Integer.parseInt(a[1]) * Integer.parseInt(b[1]);
        if (numerator % denom == 0) {
            return true;
        }
        return false;
    }
}
","// SimplifyTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link Simplify}.
* It contains one unit test case for the {@link Simplify#simplify(String, String)} method.
*/
class SimplifyTest {","
	@Test
	public void testSimplify() {
		assertTrue(Simplify.simplify(""1/5"", ""5/1""));
		assertFalse(Simplify.simplify(""1/5"", ""8/1""));
	}

}
"
/HumanEvalJava/src/main/java/original/id_91.java,/HumanEvalJava/src/main/java/original/id_91.java,629.7098441123962,length,"// IsBored.java
package original;

class IsBored {

    /**
     * You'll be given a string of words, and your task is to count the number
     * of boredoms. A boredom is a sentence that starts with the word ""I"".
     * Sentences are delimited by '.', '?' or '!'.
     *
     * For example:
     * >>> isBored(""Hello world"")
     * 0
     * >>> isBored(""The sky is blue. The sun is shining. I love this weather"")
     * 1
     *
     * > isBored(""Hello world"")
     * 0
     * > isBored(""Is the sky blue?"")
     * 0
     * > isBored(""I love It !"")
     * 1
     * > isBored(""bIt"")
     * 0
     * > isBored(""I feel good today. I will be productive. will kill It"")
     * 2
     * > isBored(""You and I are going for a walk"")
     * 0
     */
    public static int isBored(String s) {
        int count = 0;
        String[] sentences = s.split(""[.!?]"");
        for (String sentence : sentences) {
            String[] words = sentence.split("" "");
            boolean firstWord = false;
            for (String word : words) {
                if (word.length() == 0)
                    continue;
                else {
                    firstWord = true;
                    if (word.equals(""I"")) {
                        count++;
                    }
                }
                if (firstWord)
                    break;
            }
        }
        return count;
    }
}
","// IsBoredTest.java
package original;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link IsBored}.
* It contains one unit test case for the {@link IsBored#isBored(String)} method.
*/
class IsBoredTest {","
    int m_count;

    /**
     * Constructor for the class
     */
    public IsBoredTest() {
        m_count = 0;
    }

    /**
     * 
     * @param args
     */
    @Test
    public void isBoredTest() {
        assertEquals(true, IsBored.isBored(""I""));
        assertEquals(true, IsBored.isBored(""I""));
        assertEquals(true, IsBored.isBored(""I""));
        assertEquals(true, IsBored.isBored(""Is the sky""));
        assertEquals(false, IsBored.isBored(""bIt""));
        assertEquals(true, IsBored.isBored(""I, that's not cool, that's cool""));
        assertEquals(true, IsBored.isBored(""I""));
        assertEquals(false, IsBored.isBored(""He is so bad""));
    }
}
"
/HumanEvalJava/src/main/java/original/id_113.java,/HumanEvalJava/src/main/java/original/id_113.java,273.674565076828,length,"// OddCount.java
package original;

import java.util.ArrayList;
import java.util.List;

class OddCount {

    /**
     * Given a list of strings, where each string consists of only digits, return a list.
     * Each element i of the output should be ""the number of odd elements in the
     * string i of the input."" where all the i's should be replaced by the number
     * of odd digits in the i'th string of the input.
     *
     * >>> oddCount(['1234567'])
     * [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
     * >>> oddCount(['3',""11111111""])
     * [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     * ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
     *
     * > oddCount([""1234567""])
     * [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
     * > oddCount([""3"", ""11111111""])
     * [""the number of odd elements 1n the str1ng 1 of the 1nput."", ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
     * > oddCount([""271"", ""137"", ""314""])
     * [""the number of odd elements 2n the str2ng 2 of the 2nput."", ""the number of odd elements 3n the str3ng 3 of the 3nput."", ""the number of odd elements 2n the str2ng 2 of the 2nput.""]
     */
    public static List<String> oddCount(List<String> lst) {
        List<String> result = new ArrayList<String>();
        for (int i = 0; i < lst.size(); i++) {
            int count = 0;
            for (int j = 0; j < lst.get(i).length(); j++) {
                if (Integer.parseInt(lst.get(i).substring(j, j + 1)) % 2 != 0) {
                    count++;
                }
            }
            result.add(""the number of odd elements "" + count + ""n the str"" + count + ""ng "" + count + "" of the "" + count + ""nput."");
        }
        return result;
    }
}
","// OddCountTest.java
package original;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link OddCount}.
* It contains one unit test case for the {@link OddCount#oddCount(List)} method.
*/
class OddCountTest {","  /**
* Test method of {@link OddCount#oddCount(List)}.
* It's a unit test case for the {@link Boolean#valueOf(String)}'s
* {@link Boolean#parseBoolean(String) parseBoolean()}.
* @throws Exception exception.
*/
	@Test
    public void test01() throws Exception {
		
		List<String> oddCount = new OddCount().oddCount(""1234567"");
		
		assertTrue(""the output shall contain 1234567"", oddCount.contains(oddCount.get(2)));
		assertTrue(""the output shall contain 4n the str4ng 4 of the 4nput."", oddCount.contains(oddCount.get(4)));
		assertTrue(""the output shall contain 1n the str1ng 1 of the 1nput."", oddCount.contains(oddCount.get(1)));
		assertTrue(""the output shall contain 8n the str8ng 8 of the 8nput."", oddCount.contains(oddCount.get(8)));
		
	}
	
}
"
