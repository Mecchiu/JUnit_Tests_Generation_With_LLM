[
{
    "choices": [
        {
            "text": "public static final String HTML=\"<html></html>\";\r\n\r\n//\tfinal InputStream in = HtmlContentParser_0Test.class.getResourceAsStream(\"/HTML_ContentParser_Test.html\");\r\n\r\n\tfinal Reader in = HtmlContentParser_0Test.class.getResourceAsReader(\"/HTML_ContentParser_Test.html\");\r\n\r\n\tfinal static Log log = LogFactory.getLog(HtmlContentParser_0Test.class);\r\n\tprivate static final Class<?> getClass(InputStream from, Class<?> superclass) {\r\n\t\tassertTrue(\"Should return superclass\",superclass.equals(StringContentParser.class));\r\n\t\treturn (Class<?>) from.read(); \r\n\t}\r\n\r\n\t@Test\r\n\tpublic void getClassTest() throws Exception {\r\n\t\tString readString = extractPlainText(in);\r\n\t\tassertNotNull(getClass(HtmlContentParser.class.getResourceAsStream(\"/ContentParser_Test.html\"), HtmlContentParser.class));\r\n\t\tassertNotNull(getClass(HtmlContentParser_0Test.class.getResourceAsStream(\"/HTML_ContentParser_Test.html\"), HtmlContentParser_0Test.class));\r\n\t}\r\n\r\n\t@Test\r\n\tpublic void extractPlainText() throws Exception {\r\n    \tassertEquals(HTML,\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\r\n    }\r\n}",
            "finish_reason": "stop"
        },
        {
            "text": "Source contentSource;\n    \n  @Test\n    public void test_0() throws Exception {\n\t\tHtmlContentParser thisParser = new HtmlContentParser(this.contentSource);\n\t\tString extractPlainText = thisParser.extractPlainText(this.contentSource.getContentStream());\r\n\t\tcheckNotEmpty(extractPlainText,\"Extract text failed. content was empty\");\r\n\t\tassertNotNull(extractPlainText);\r\n\t\tassertFalse(extractPlainText.startsWith(\"<html\"));\r\n\t\tassertFalse(extractPlainText.startsWith(\"<?xml\"));\r\n\t\tassertFalse(extractPlainText.startsWith(\"<body\"));\r\n\t\tassertFalse(extractPlainText.startsWith(\"<script\"));\r\n        }\r\n  void checkNotEmpty(String contentString, String errorMessage) {\r\n\t\tif (log.isWarnEnabled()) {\r\n\t        log.warn(contentString + \" should contain '\\\\n' to be skipped by Tomcat\", errorMessage);\r\n    \t}\r\n\t}\r\n\r\n\t@Test\r\n\tpublic void test_1() throws Exception {\r\n\t\tInputStream inputStream = this.contentSource.getInputStream();\r\n\t\ttry {\r\n\t\t\tString content = IOUtil.toString(inputStream);\r\n\t\t\tcheckNotEmpty(content, \"Content is empty at first\");\r\n            assertNotNull(content);\r\n        } finally {\r\n\t        inputStream.close();\r\n        }  \r\n    }\r\n\r\n\r\n    public void assertNoDuplicate(String actual, String expected) {\r\n        assertFalse(actual.contains(expected));\r\n    }\r\n \r\n  void assertEquals(int expected, int actual) {\n        if (expecteds == actual) return;\n        assertEquals(expecteds, actual, \"Expected: \" + expected + \"\\nActual: \" + actual);\n  } \r\n\r\n}\r\n",
            "finish_reason": "stop"
        },
        {
            "text": "    \n\t@Test\n    void testContent(){\n\t\t   log.info(\"extractPlainText(content, reader)\");\n\t\t   Source htmlContentSource = new Source();\n\t\t   Source contentSource = new Source(\"<html>This is a test content.</html>\");\n\t\t   contentSource.setURL(new URL(\"http://some.url\"));\n\t\t   String plainText = htmlContentSource.createText(contentSource);\n\t\t   StringReader stringReader = new StringReader(plainText);\n\t\t   InputStream inputStream = stringReader;\n\t\t   System.out.println(\"content=\");\n\t\t   String content = extractPlainText(inputStream);\n\t}\n\t\n\t@Test\n    void testContentUsingReader(){\n\t\t   log.info(\"extractPlainText(content)\");\n\t\t   InputStream inputStream = getClass().getResourceAsStream(\"/au/id/jericho/lib/html/htmlContentParser.xml\");\n\t\t   String plainText = extractPlainText(inputStream);\n\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    private static Log log = LogFactory.getLog(HtmlContentParser_0Test.class);\n    private HtmlContentParser parser = new HtmlContentParser();\n\n    @Test\n    public void test() throws Exception {\n        Source source = new Source();\n        source.setUrl(\"http://www.w3.org/TR/html4/\");\n\n        String htmlContent = parser.extractPlainText(source.getStream());\n        assertNotNull(htmlContent);\n        System.out.println(htmlContent);\n        assertNotNull(htmlContent.startsWith(\"<\"));\n        System.out.println(htmlContent);\n\n        Source contentSource = new Source(htmlContent);\n        String plainHtmlContent = parser.extractText(contentSource.getStream());\n        assertNotNull(plainHtmlContent);\n        System.out.println(plainHtmlContent);\n        assertNotNull(plainHtmlContent.startsWith(\"<\"));\n        System.out.println(plainHtmlContent);\n    }\n\n    @Test\n    public void test_Url() throws Exception {\n        Source source = new Source();\n        source.setUrl(\"http://www.w3.org\");\n        String plainHtmlContent = parser.extractText(source.getStream());\n        assertNotNull(plainHtmlContent);\n        System.out.println(plainHtmlContent);\n        assertNotNull(plainHtmlContent.startsWith(\"<\"));\n        System.out.println(plainHtmlContent);\n\n        Source contentSource = new Source(plainHtmlContent);\n        String htmlContent = parser.extractText(contentSource.getStream());\n        String plainHtmlContent = parser.extractText(htmlContent);\n        assertNotNull(plainHtmlContent);\n        assertFalse(plainHtmlContent.startsWith(\"<\"));\n        System.out.println(plainHtmlContent);\n        assertNotNull(plainHtmlContent.startsWith(\"<\"));\n        System.out.println(plainHtmlContent);\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t/**\n\t * Test method for {@link org.apache.commons.lang3.text.ContentParser#parse(java.net.InputStream)}\n\t *.\n\t */\n\t@Test\n\tpublic void testParse01() {\n\t\ttry {\n\t\t\tHTMLParserContentParser parser = new HTMLParserContentParser(new ReaderInputStream(\"<html><head><title>Title</title></head><body><h1>Title<h2>h1</h2></body></html>\".getBytes()));\n\t\t\tfinal String result = parser.parse(\"<h1>Title</h1><h2>h1</h2>\");\n\n\t\t\tassertEquals(\"The content should be parsed as html\", \"http://www.asph.edu.au/wish/asph-c/wish/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c\", result);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t/**\n\t * Test method for {@link org.apache.commons.lang3.text.ContentParser#parse(java.net.InputStream)}\n\t *.\n\t * Test fails in this case because {@link HtmlParserContentParser#extractText(URL)}\n\t * can't handle any given url.\n\t */\n\t@Test\n\tpublic void testParse02() {\n\t\ttry {\n\t\t\tHTMLParserContentParser parser = new HTMLParserContentParser(new ReaderInputStream(\"<html><head><title>Title</title></head><body><div>This is a div</div></body></html>\".getBytes()));\n\t\t\tfinal String result = parser.parse(\"<div>This is a div</div>\");\n\n\t\t\tassertEquals(\"The content should be parsed as html\", \"http://www.asph.edu.au/wish/asph-c/wish/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c\", result);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t/**\n\t * Test method for {@link org.apache.commons.lang3.text.ContentParser#parse(java.net.InputStream)}\n\t *.\n\t * Test fails in this case because url.getURL() can't handle any given url.\n\t */\n\t@Test\n\tpublic void testParse03() {\n\t\ttry {\n\t\t\tHTMLParserContentParser parser = new HTMLParserContentParser(new ReaderInputStream(\"<html><head><title>Title</title></head><body><h1>Title<h2>h1</h2></body></html>\".getBytes()));\n\t\t\tfinal String result = parser.parse(\"<h1>Title</h1><h2>h1</h2>\");\n\n\t\t\tassertEquals(\"The content should be parsed as html\", \"http://www.asph.edu.au/wish/asph-c/wish/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/asph-c/>\", result);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Test method for {@link org.apache.commons.lang3.text.ContentParser#parseURL(java.net.URL)}.\n\t */\n\t@Test\n\tpublic void testParseURL01() {\n\t\ttry {\n\t\t\tHTMLParserContentParser parser = new HTMLParserContentParser(new InputStreamReader(getClass()\n\t\t\t\t\t\t.getResourceAsStream(\"url.html\"), \"UTF-8\"));\n\t\t\tSource contentSource = new Source(parser.parseURL(\"http://asph.edu.au/wish/asph-c?a=b\")) ;\n\n\t\t\tfinal String result = contentSource.toString();\n\t\t\tassertEquals(\"The content should be parsed as html\", \"http://www.asph.edu.au/wish/asph-c?a=b\", result);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t/**\n\t * Test method for {@link org.apache.commons.lang3.text.ContentParser#parseURL(java.net.URL)}.\n\t */\n\t@Test\n\tpublic void testParseURL02() {\n\t\ttry {\n\t\t\tHTMLParserContentParser parser = new HTMLParserContentParser(new InputStreamReader(getClass()\n\t\t\t\t\t\t.getResourceAsStream(\"url.html\"), \"UTF-8\"));\n\t\t\tSource contentSource = new Source(parser.parseURL(\"http6://asph.edu.au/wish/asph-c/\"));\n\n\t\t\tfinal String result = contentSource.toString();\n\t\t\tassertEquals(\"The content should be parsed as html\", \"http6",
            "finish_reason": "length"
        },
        {
            "text": "static HtmlContentParser parser;\n\t\tfinal static String text1 = \"<html><div><p><div\";\n\t\tfinal static String text2 = \"</p><div></p><div></div>\";\n\t\tstatic {\n\t\t\tURL url = Thread.currentThread().getContextClassLoader().getResource(\"META-INF/resources/asphodel.properties\");\n\t\t\tInputStream in = url.openStream();\n\t\t\tInputStreamReader isr = new InputStreamReader(in, \"UTF-8\");\n\t\t\tReader reader = new BufferedReader(isr);\n\n\t\t\tSource contentSource = new Source(reader);\n\t\t\tparser = new HtmlContentParser();\r\n\r\n\t\t\tStringBuilder sb1 = new StringBuilder();\r\n\t\t\tsb1.append(contentSource.extractText());\r\n\r\n\t\t\tStringBuilder sb2 = new StringBuilder();\r\n\t\t\tsb2.append(parser.extractPlainText(sb1.toString()));\r\n\r\n\t\t    log.info(\"The Text Extract:\\n\"+sb2);\r\n\t\t}\r\n\r\n\t\tTest.class;\r\n\r\n\t\t{\r\n\t\t}\r\n}\r\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n    /**\n\t* Basic test for {@link HtmlContentParser#extractText(Reader)} method.\n\t*/\n\t@Test\n\tpublic void testExtractText() {\n\t\tHTMLContentParser parser = new HtmlContentParser();\n\t\tHTMLContentParser.HtmlContentParserListener listener = new HTMLContentParser.HtmlContentParserListener(){\n\t         public void onFinishedElement(boolean isFinished, org.asphodel.ASPHtmlText text)\n\t         {\n\t        \t   System.out.println(\"OnFinishedElement: text=\" + text);\n\t         }\n\t        public void onEOF(boolean isEOF) {\n\t        \t   System.out.println(\"OnEOF\");\n\t        }\n\t      };\n\t\tSource source = new Source(getClass().getResourceAsStream(\"test.txt.html\"));\n\t\tSystem.out.println(parser.parseContent(source, parser.getCurrentElement(),listener));\n\t}\n\t\n\n\t/**\n\t* Basic test for {@link HtmlContentParser#extractText(Source)} method.\n\t*/\n\t@Test\n\tpublic void testExtractTextSource() {\n\t\tHTMLContentParser parser = new HtmlContentParser();\n\t\tHTMLContentParser.HtmlContentParserListener listener = new HTMLContentParser.HtmlContentParserListener(){\n\t         public void onFinishedElement(boolean isFinished, org.asphodel.ASPHtmlText text)\n\t         {\n\t        \t   System.out.println(\"OnFinishedElement: text=\" + text);\n\t         }\n\t\t\t\tpublic void onEOF(boolean isEOF) {\n\t        \t   System.out.println(\"OnEOF\");\n\t        }\n\t      };\n\t\tSource source = new Source(getClass().getResourceAsStream(\"test.txt.html\"));\n\t\tSystem.out.println(parser.parseContent(source, null,listener));\n\t}\n\t\n\t\n\t/**\n\t* Basic test for {@link HtmlContentParser#extractText(Source, int)} method.\n\t*/\n\t@Test\n\tpublic void testExtractTextSourceInt() {\n\t\tHTMLContentParser parser = new HtmlContentParser();\n\t\tHTMLContentParser.HtmlContentParserListener listener = new HTMLContentParser.HtmlContentParserListener(){\n\t         public void onFinishedElement(boolean isFinished, org.asphodel.ASPHtmlText text)\n\t         {\n\t        \t   System.out.println(\"OnFinishedElement: text=\" + text);\n\t         }\n\t\t\t\tpublic void onEOF(boolean isEOF) {\n\t        \t   System.out.println(\"OnEOF\");\n\t        }\n\t      };\n\t\tSource source = new Source(getClass().getResourceAsStream(\"test.txt.html\"));\n\t\tSystem.out.println(parser.parseContent(source, 5,listener));\n\t}\n\t\n\n\n\n\n}",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t\t* Test the method <code>extractPlainText()</code> for a plain text content. Checks the {@link HtmlContentParser#extractPlainText(Reader)} method,\r\n\t\t* checks the return value of {@link Source#extractText()}, checks the return value of {@link Source#extractText(InputStream)} for not null and returns the string extracted.\r\n\t\t*/\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t* Check method <code>extractPlainText(Reader)</code> returns the plain text extracted.\r\n\t\t\t\t\t\t*/\r\n                        public void Test_extractPlainText(Reader reader) throws ContentParserException {\r\n                                    Source contentSource = new Source(reader);\r\n                                    String extracted = HtmlContentParser.extractPlainText(contentSource);\r\n                                    assertNotNull(extracted);\r\n\n                                    log.debug(\"extracted: \" + extracted);\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t* Check method <code>extractPlainText(InputStream)</code> returns the plain text extracted from <code>InputStream</code>.\r\n\t\t\t\t\t\t* Checks also the <code>getDataType</code> for the actual type returned by the method, check this method.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\tCheck method <code>extractPlainText(InputStream)</code> returns the plain text extracted from the stream. Note: The returned content is not a string.\r\n\t\t\t\t\t\t* Checks also the <code>getDataType</code> for the actual type returned by the method, check this method.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\tCheck method <code>extractPlainText(URL)</code> returns the plain text extracted from the url.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\tCheck method <code>extractPlainText(URL) returns the plain text extracted from the url.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t* Check method <code>extractPlainText(InputStream)</code> returns the plain text extracted from the stream.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\tCheck method <code>extractPlainText(InputStream)</code> returns the plain text extracted from the stream.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t* Check method <code>extractPlainText(InputStream)</code> return a wrong plain text.\r\n\t\t\t\t\t\t* Checks also the <code>getDataType</code> for the actual type returned by the method, check this method.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t* Check method <code>extractPlainText(InputStream)</code> returns empty string.\r\n\t\t\t\t\t\t* Checks also the <code>getDataType</code> for the actual type returned by the method, check this method.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t* Check method <code>extractPlainText(InputStream)</code> returns <code>null</code>.\r\n\t\t\t\t\t\t* Checks also the <code>getDataType</code> for the actual type returned by the method, check this method.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t* Check method <code>extractPlainText(InputStream)</code> return the null string.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t* Check method <code>extractPlainText(InputStream)</code> return the null string.\r\n\t\t\t\t\t\t* Checks also the <code>getDataType</code> for the actual type returned by the method, check this method.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t* Check method <code>extractPlainText(InputStream)</code> return the null string.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t* Check method <code>extractPlainText(InputStream)</code> return <code>null</code>.\r\n\t\t\t\t\t\t* Checks also the <code>getDataType</code> for the actual type returned by the method, check this method.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t* Check method <code>extractPlainText(InputStream)</code> return null.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t* Check method <code>extractPlainText(InputStream)</code> return null.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t* Check method <code>extractPlainText(InputStream)</code> return <code>null</code>.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t* Check method <code>extractPlainText(InputStream)</code> returns <code>null</code>.\r\n\t\t\t\t\t\t* Checks also the <code>getDataType</code> for the actual type returned by the method, check this method.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t* Check method <code>extractPlainText(InputStream)</code> returns <code>null</code>.\r\n\t\t\t\t\t\t* Checks also the <code>getDataType</code> for the actual type returned by the method, check this method.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t* Check method <code>extractPlainText(InputStream)</code> returns <code>null</code>.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t* Check method <code>extractPlainText(InputStream)</code> returns the null string.\r\n\t\t\t\t\t\t* Checks also the <code>getDataType</code> for the actual type returned by the method, check this method.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t* Check method <code>extractPlainText",
            "finish_reason": "length"
        },
        {
            "text": "\n\t/**\n\t * Test method for {@link HtmlContentParser#extractPlainText(java.io.InputStream)}.\r\n\t */\r\n\t@Test\r\n\tvoid testExtractPlainText() {\r\n\t\t\r\n\t\r\n\t}\r\n\r\n\t/**\r\n\t* Test method for {@link HtmlContentParser#extractText(java.io.InputStream)}.\r\n\t*/\n\t@Test\n\tvoid testExtractText() {\n\t\t\n\t\n\t}\n\n\t/**\n\t* test method for {@link HtmlContentParser#setInputContentStream(InputStream)}.\n\t* 1.  setInputContentStream must set URL.\n\t* 2.  If it does not set URL it will throw IOException.\n\t*/\n\t\n\t@Test\n\tvoid testHtmlContentParser_1() {\n\t\t\n\t\n\t\t\r\n\t\tInputStream in = null;\n\t\tString test = null;\n\t\ttry {\n\t\t\tin = new Source(\"http://www.gotoanyhere.com\").getInputContentStream();\r\n\t\t\ttest = extractPlainText(in);\r\n\t\t} catch (IOException e) {\r\n\t\t\tassertTrue( \"IOException should not be thrown.\", false); \r\n\t\t}\r\n\t\t\r\n\t\tassertNotNull(\"Exception not thrown.\", test);\r\n\t\t\r\n\t}\r\n\t\t\r\n\t\r\n\r\n}\r\n\r\n            \r\n",
            "finish_reason": "stop"
        },
        {
            "text": "    \n\tprivate final Log log = LogFactory.getLog(HtmlContentParser_0Test);\n    // a private constructor\n    HtmlContentParser_0Test(HtmlContentParser parser){\n\t}\n   }\n",
            "finish_reason": "stop"
        }
    ],
    "id": "e423a594-39a5-4d6c-9186-2d220eb4b622",
    "prompt_id": "/EvoSuiteBenchmark/original/42_asphodel/src/main/java/org/asphodel/parser/HtmlContentParser_0Test.java",
    "original_code": "// HtmlContentParser.java\npackage org.asphodel.parser;\r\n\r\nimport au.id.jericho.lib.html.Source;\r\nimport org.apache.commons.logging.Log;\r\nimport org.apache.commons.logging.LogFactory;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.Reader;\r\nimport java.net.URL;\r\n\r\n/**\r\n * @author : sunwj\r\n * @since 0.1\r\n *        Date: Mar 31, 2007\r\n *        Time: 10:03:07 PM\r\n *        <p/>\r\n *        html content parser using Jericho\r\n * todo does it need to devided into 2 different implementation?\r\n */\r\npublic class HtmlContentParser implements StringContentParser, StreamContentParser {\r\n\r\n    private static Log log = LogFactory.getLog(HtmlContentParser.class);\r\n\r\n    /**\r\n     * @param textContent content as a text format,the real format of the content can be xml,html,xhtml....\r\n     * @return plain text without extra tags or elements\r\n     */\r\n    public String extractPlainText(String textContent) throws ContentParserException {\r\n        Source contentSource = new Source(textContent);\r\n        return contentSource.extractText();\r\n    }\r\n\r\n    /**\r\n     */\r\n    public String extractText(Reader reader) throws ContentParserException {\r\n        try {\r\n            Source contentSource = new Source(reader);\r\n            return contentSource.extractText();\r\n        } catch (IOException e) {\r\n            log.error(\"when parsing from reader,\", e);\r\n            throw new ContentParserException(e);\r\n        }\r\n    }\r\n\r\n    public String extractText(InputStream inputStream) throws ContentParserException {\r\n        try {\r\n            Source contentSource = new Source(inputStream);\r\n            return contentSource.extractText();\r\n        } catch (IOException e) {\r\n            log.error(\"when parsing from inputStrem\", e);\r\n            throw new ContentParserException(e);\r\n        }\r\n    }\r\n\r\n    public String extractText(URL url) throws ContentParserException {\r\n        try {\r\n            Source contentSource = new Source(url);\r\n            return contentSource.extractText();\r\n        } catch (IOException e) {\r\n            log.error(\"when parsing from url\", e);\r\n            throw new ContentParserException(e);\r\n        }\r\n    }\r\n}\r\n",
    "test_prompt": "// HtmlContentParser_0Test.java\npackage org.asphodel.parser;\n\nimport au.id.jericho.lib.html.Source;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.Reader;\nimport java.net.URL;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HtmlContentParser}.\n* It contains one unit test case for the {@link HtmlContentParser#extractPlainText(String)} method.\n*/\nclass HtmlContentParser_0Test {",
    "time_taken": 49.36933779716492,
    "usage": {
        "prompt_tokens": 803
    }
}
]