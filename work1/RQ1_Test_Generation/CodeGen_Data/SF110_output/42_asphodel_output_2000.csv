ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
e423a594-39a5-4d6c-9186-2d220eb4b622,/EvoSuiteBenchmark/original/42_asphodel/src/main/java/org/asphodel/parser/HtmlContentParser_0Test.java,49.36933779716492,stop,"// HtmlContentParser.java
package org.asphodel.parser;

import au.id.jericho.lib.html.Source;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;

/**
 * @author : sunwj
 * @since 0.1
 *        Date: Mar 31, 2007
 *        Time: 10:03:07 PM
 *        <p/>
 *        html content parser using Jericho
 * todo does it need to devided into 2 different implementation?
 */
public class HtmlContentParser implements StringContentParser, StreamContentParser {

    private static Log log = LogFactory.getLog(HtmlContentParser.class);

    /**
     * @param textContent content as a text format,the real format of the content can be xml,html,xhtml....
     * @return plain text without extra tags or elements
     */
    public String extractPlainText(String textContent) throws ContentParserException {
        Source contentSource = new Source(textContent);
        return contentSource.extractText();
    }

    /**
     */
    public String extractText(Reader reader) throws ContentParserException {
        try {
            Source contentSource = new Source(reader);
            return contentSource.extractText();
        } catch (IOException e) {
            log.error(""when parsing from reader,"", e);
            throw new ContentParserException(e);
        }
    }

    public String extractText(InputStream inputStream) throws ContentParserException {
        try {
            Source contentSource = new Source(inputStream);
            return contentSource.extractText();
        } catch (IOException e) {
            log.error(""when parsing from inputStrem"", e);
            throw new ContentParserException(e);
        }
    }

    public String extractText(URL url) throws ContentParserException {
        try {
            Source contentSource = new Source(url);
            return contentSource.extractText();
        } catch (IOException e) {
            log.error(""when parsing from url"", e);
            throw new ContentParserException(e);
        }
    }
}
","// HtmlContentParser_0Test.java
package org.asphodel.parser;

import au.id.jericho.lib.html.Source;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HtmlContentParser}.
* It contains one unit test case for the {@link HtmlContentParser#extractPlainText(String)} method.
*/
class HtmlContentParser_0Test {","// HtmlContentParser_0Test.java
package org.asphodel.parser;

import au.id.jericho.lib.html.Source;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.URL;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HtmlContentParser}.
* It contains one unit test case for the {@link HtmlContentParser#extractPlainText(String)} method.
*/
class HtmlContentParser_0Test {
public static final String HTML=""<html></html>"";

//	final InputStream in = HtmlContentParser_0Test.class.getResourceAsStream(""/HTML_ContentParser_Test.html"");

	final Reader in = HtmlContentParser_0Test.class.getResourceAsReader(""/HTML_ContentParser_Test.html"");

	final static Log log = LogFactory.getLog(HtmlContentParser_0Test.class);
	private static final Class<?> getClass(InputStream from, Class<?> superclass) {
		assertTrue(""Should return superclass"",superclass.equals(StringContentParser.class));
		return (Class<?>) from.read(); 
	}

	@Test
	public void getClassTest() throws Exception {
		String readString = extractPlainText(in);
		assertNotNull(getClass(HtmlContentParser.class.getResourceAsStream(""/ContentParser_Test.html""), HtmlContentParser.class));
		assertNotNull(getClass(HtmlContentParser_0Test.class.getResourceAsStream(""/HTML_ContentParser_Test.html""), HtmlContentParser_0Test.class));
	}

	@Test
	public void extractPlainText() throws Exception {
    	assertEquals(HTML,""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>"");
    }
}"
