ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
686728a3-9511-4379-8e32-6818c4114170,/EvoSuiteBenchmark/original/10_water-simulator/src/main/java/simulator/util/ParameterAttributes_0Test.java,16.155282974243164,stop,"// ParameterAttributes.java
package simulator.util;

import java.io.Serializable;
import org.apache.log4j.Logger;

/**
 * A class representing a Parameter in a demand curve function of a Consumer Agent.
 * The properties of such a parameter are :
 * name,
 * elasticity,
 * a boolean indicating if parameter's value  will be the logarithm or not of the function,
 * a Function for calculating the parameter's value,
 * a Function for calculating the social weight for this parameter,
 * a boolean indicating if this parameter is social
 *
 * @author Vartalas Panagiotis
 * @author Ioannis N. Athanasiadis
 * @version 1.9
 * @since 2003-2006
 */
public class ParameterAttributes implements Serializable {

    private static final long serialVersionUID = 6885432319261152672L;

    private Logger log = Logger.getLogger(ParameterAttributes.class);

    //Properties
    private String name;

    private Float elasticity;

    private Boolean ln;

    private Function demandCurveFunction;

    private Function socialFunction;

    private Boolean social = Boolean.FALSE;

    private Float value = new Float(0);

    /**
     * Set parameter name
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @return
     */
    public String getName() {
        return name;
    }

    /**
     * Set elasticity
     * @param elasticity
     */
    public void setElasticity(float elasticity) {
        this.elasticity = new Float(elasticity);
    }

    /**
     * @return
     */
    public float getElasticity() {
        return elasticity.floatValue();
    }

    /**
     * Set true if the value of the parameter is the logarithm of parameter's function
     * @param ln
     */
    public void setLn(boolean ln) {
        this.ln = new Boolean(ln);
    }

    /**
     * @return
     */
    public boolean getLn() {
        return ln.booleanValue();
    }

    /**
     * Set the demand curve function for this parameter. The Demand Curve Function gets the stepId
     * as input if the parameter isn't social, otherwise gets the sum of all weights received from
     * its neighbours. It returns parameter's value.
     * @param dCF One of the availabe functions
     */
    public void setDemandCurveFunction(Function dCF) {
        demandCurveFunction = dCF;
    }

    /**
     * Set the demand curve function for this parameter
     * @return
     */
    public Function getDemandCurveFunction() {
        return demandCurveFunction;
    }

    /**
     * Set the social function for this parameter. The Social Curve Function gets the stepId
     * as input and returns a value (the weight) that the consumer agent will send in socialization
     * stage of simulation in the specified step.
     * @param sF One of the available functions
     */
    public void setSocialFunction(Function sF) {
        socialFunction = sF;
    }

    /**
     * @return
     */
    public Function getSocialFunction() {
        return socialFunction;
    }

    /**
     * Set this parameter to be social
     */
    public void setSocial(boolean b) {
        this.social = Boolean.valueOf(b);
    }

    /**
     * @return
     */
    public boolean isSocial() {
        return social.booleanValue();
    }

    /**
     * Calculates parameter's value for the Demand Curve as : elasticity * [ ln ] ( demandCurveFunction(step) )
     * @param step The step for which to calculate parameters value
     * @return Parameter's value that will be summed for calculating total consumer's consumption
     */
    public float valueFor(int step) {
        return valueFor((float) step);
    }

    /**
     * Overrides the previous method if the input is a float number. Mostly used when the parameter is
     * social and the input value is the sum of weights.
     * Calculates parameter's value for the Demand Curve as :
     * elasticity * [ ln ] (demandCurveFunction(weights) )
     * @param x The step for which to calculate parameters value
     * @return Parameter's value that will be summed for calculating total consumer's consumption
     */
    public float valueFor(float x) {
        float temp = demandCurveFunction.valueFor(x);
        if (temp > 0) {
            if (ln.booleanValue()) {
                this.value = new Float(elasticity.floatValue() * ((float) Math.log(temp)));
            } else {
                this.value = new Float(elasticity.floatValue() * temp);
            }
        } else {
            log.error(""FATAL ERROR: Parameter was zero"");
        }
        return value.floatValue();
    }

    public String toString() {
        return ""Parameter"" + name + "" type: "" + demandCurveFunction.getFunctionName() + ""(elasticity: "" + elasticity + "" log: "" + ln + "" soc: "" + social;
    }
}
","// ParameterAttributes_0Test.java
package simulator.util;

import java.io.Serializable;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParameterAttributes}.
* It contains one unit test case for the {@link ParameterAttributes#valueFor(int)} method.
*/
class ParameterAttributes_0Test {","// ParameterAttributes_0Test.java
package simulator.util;

import java.io.Serializable;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParameterAttributes}.
* It contains one unit test case for the {@link ParameterAttributes#valueFor(int)} method.
*/
class ParameterAttributes_0Test {

    @Test
    public void valueForTestCase() {
        assertNotNull(ValueFunc.value);
        float x = ValueFunc.value().getX();
        float test1 = ValueFunc.value().getValue();
        assertEquals(x, test1, 0);
    }

	
    float test2(float x) {
        float test1 = ValueFunc.value().getValue();
        assertEquals(test1, ValueFunc.value().getX(), 0);
        return test1;
    }
}
"
31468b02-6146-4491-9191-5c4dec38824d,/EvoSuiteBenchmark/original/10_water-simulator/src/main/java/simulator/util/ParameterAttributes_1Test.java,28.935261964797974,length,"// ParameterAttributes.java
package simulator.util;

import java.io.Serializable;
import org.apache.log4j.Logger;

/**
 * A class representing a Parameter in a demand curve function of a Consumer Agent.
 * The properties of such a parameter are :
 * name,
 * elasticity,
 * a boolean indicating if parameter's value  will be the logarithm or not of the function,
 * a Function for calculating the parameter's value,
 * a Function for calculating the social weight for this parameter,
 * a boolean indicating if this parameter is social
 *
 * @author Vartalas Panagiotis
 * @author Ioannis N. Athanasiadis
 * @version 1.9
 * @since 2003-2006
 */
public class ParameterAttributes implements Serializable {

    private static final long serialVersionUID = 6885432319261152672L;

    private Logger log = Logger.getLogger(ParameterAttributes.class);

    //Properties
    private String name;

    private Float elasticity;

    private Boolean ln;

    private Function demandCurveFunction;

    private Function socialFunction;

    private Boolean social = Boolean.FALSE;

    private Float value = new Float(0);

    /**
     * Set parameter name
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * @return
     */
    public String getName() {
        return name;
    }

    /**
     * Set elasticity
     * @param elasticity
     */
    public void setElasticity(float elasticity) {
        this.elasticity = new Float(elasticity);
    }

    /**
     * @return
     */
    public float getElasticity() {
        return elasticity.floatValue();
    }

    /**
     * Set true if the value of the parameter is the logarithm of parameter's function
     * @param ln
     */
    public void setLn(boolean ln) {
        this.ln = new Boolean(ln);
    }

    /**
     * @return
     */
    public boolean getLn() {
        return ln.booleanValue();
    }

    /**
     * Set the demand curve function for this parameter. The Demand Curve Function gets the stepId
     * as input if the parameter isn't social, otherwise gets the sum of all weights received from
     * its neighbours. It returns parameter's value.
     * @param dCF One of the availabe functions
     */
    public void setDemandCurveFunction(Function dCF) {
        demandCurveFunction = dCF;
    }

    /**
     * Set the demand curve function for this parameter
     * @return
     */
    public Function getDemandCurveFunction() {
        return demandCurveFunction;
    }

    /**
     * Set the social function for this parameter. The Social Curve Function gets the stepId
     * as input and returns a value (the weight) that the consumer agent will send in socialization
     * stage of simulation in the specified step.
     * @param sF One of the available functions
     */
    public void setSocialFunction(Function sF) {
        socialFunction = sF;
    }

    /**
     * @return
     */
    public Function getSocialFunction() {
        return socialFunction;
    }

    /**
     * Set this parameter to be social
     */
    public void setSocial(boolean b) {
        this.social = Boolean.valueOf(b);
    }

    /**
     * @return
     */
    public boolean isSocial() {
        return social.booleanValue();
    }

    /**
     * Calculates parameter's value for the Demand Curve as : elasticity * [ ln ] ( demandCurveFunction(step) )
     * @param step The step for which to calculate parameters value
     * @return Parameter's value that will be summed for calculating total consumer's consumption
     */
    public float valueFor(int step) {
        return valueFor((float) step);
    }

    /**
     * Overrides the previous method if the input is a float number. Mostly used when the parameter is
     * social and the input value is the sum of weights.
     * Calculates parameter's value for the Demand Curve as :
     * elasticity * [ ln ] (demandCurveFunction(weights) )
     * @param x The step for which to calculate parameters value
     * @return Parameter's value that will be summed for calculating total consumer's consumption
     */
    public float valueFor(float x) {
        float temp = demandCurveFunction.valueFor(x);
        if (temp > 0) {
            if (ln.booleanValue()) {
                this.value = new Float(elasticity.floatValue() * ((float) Math.log(temp)));
            } else {
                this.value = new Float(elasticity.floatValue() * temp);
            }
        } else {
            log.error(""FATAL ERROR: Parameter was zero"");
        }
        return value.floatValue();
    }

    public String toString() {
        return ""Parameter"" + name + "" type: "" + demandCurveFunction.getFunctionName() + ""(elasticity: "" + elasticity + "" log: "" + ln + "" soc: "" + social;
    }
}
","// ParameterAttributes_1Test.java
package simulator.util;

import java.io.Serializable;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParameterAttributes}.
* It contains one unit test case for the {@link ParameterAttributes#valueFor(float)} method.
*/
class ParameterAttributes_1Test {","// ParameterAttributes_1Test.java
package simulator.util;

import java.io.Serializable;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParameterAttributes}.
* It contains one unit test case for the {@link ParameterAttributes#valueFor(float)} method.
*/
class ParameterAttributes_1Test {

	private static final int DEFAULT_TEST_STEP = 3;
	//Constructor private
	public static final String PARAMETER_NAME = ""Parameter"" + 
			"" Type : "" + 
			""Logarithm : "" + 
			""Function : "" + 
			""Social : "";
	
	//Class private
	private static final String DEFAULT_LOG = ""UNKNOWN"";

	//Private Members
	private String name;
	private String function;
    
	private Integer step;
        
	/**
	 * Generates constructor of ParameterAttributes. 
	 *
	 */
	public ParameterAttributes_1Test() {
		name = DEFAULT_PARAM_NAME;
		function = null;
        step = DEFAULT_TEST_STEP;

	}
	
	/**
	 * Sets parameters' values. 
	 *
	 * @exception
	 *                  NullPointerException : name is empty.
	 * @exception
	 *                  NoSuchFieldException : Function does not yet exists.
	 * @exception
	 *                  SecurityException : The class won't be accessible.
	 */
	private void set_values() throws SecurityException,
	NoSuchFieldException, NoSuchMethodException {
    	  
		//Private Members
		ParameterAttributes.name = new String();
    	  
		//Private Fields
		ParameterAttributes.function  = new String();
    	  
		//Initial Step
		ParameterAttributes.step = null;
     
    	//Initialize Parameter's name field
    	ParameterAttributes.name = ParameterAttributes_1Test.PARAMETER_NAME;
     
    	//Initialize Parameter's function field
    	ParameterAttributes.function = ParameterAttributes_1Test.function;
     
		checkFunctionDeclaredProperty();               
	}
	
	/**
	 * Test method of ParameterAttributes#valueFor(int).
	 *
	 * This method checks the Parameter's declared property and calls 
	 * <code>parameter.valueFor(int)</code> for input <code>int</code>.
	 *
	 */
	@Test
    public void testIsSocialInteger(){
        assertEquals(""The return is always  "" + (parameter.valueFor(step).intValue()),
                new Integer(1.),
                new Integer(parameter.valueFor(step).intValue()));
    }
	
	/**
	 * Tests the method with invalid parameters
	 */
	@Test (expected = IllegalArgumentException.class)
	public void testConstructorParams() {
        
        new ParameterAttributes(null, null, 5);
        
    	  
	}
	
	/**
	 * Tests the method with null reference
	 */
	@Test"
