[
{
    "choices": [
        {
            "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
            "text": ""
        }
    ],
    "id": "201ac982-a3eb-46a6-a31d-493b4589a5b3",
    "prompt_id": "/EvoSuiteBenchmark/original/5_templateit/src/main/java/org/apache/poi/hssf/usermodel/HSSFDataFormat_2Test.java",
    "original_code": "// HSSFDataFormat.java\n/* ====================================================================\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to You under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n==================================================================== */\n/*\n * HSSFDataFormat.java\n *\n * Created on December 18, 2001, 12:42 PM\n */\npackage org.apache.poi.hssf.usermodel;\n\nimport org.apache.poi.hssf.model.Workbook;\nimport org.apache.poi.hssf.record.FormatRecord;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Vector;\n\n/**\n *  Utility to identify builtin formats.  Now can handle user defined data formats also.  The following is a list of the formats as\n *  returned by this class.<P>\n * <P>\n *        0, \"General\"<br>\n *        1, \"0\"<br>\n *        2, \"0.00\"<br>\n *        3, \"#,##0\"<br>\n *        4, \"#,##0.00\"<br>\n *        5, \"($#,##0_);($#,##0)\"<br>\n *        6, \"($#,##0_);[Red]($#,##0)\"<br>\n *        7, \"($#,##0.00);($#,##0.00)\"<br>\n *        8, \"($#,##0.00_);[Red]($#,##0.00)\"<br>\n *        9, \"0%\"<br>\n *        0xa, \"0.00%\"<br>\n *        0xb, \"0.00E+00\"<br>\n *        0xc, \"# ?/?\"<br>\n *        0xd, \"# ??/??\"<br>\n *        0xe, \"m/d/yy\"<br>\n *        0xf, \"d-mmm-yy\"<br>\n *        0x10, \"d-mmm\"<br>\n *        0x11, \"mmm-yy\"<br>\n *        0x12, \"h:mm AM/PM\"<br>\n *        0x13, \"h:mm:ss AM/PM\"<br>\n *        0x14, \"h:mm\"<br>\n *        0x15, \"h:mm:ss\"<br>\n *        0x16, \"m/d/yy h:mm\"<br>\n * <P>\n *        // 0x17 - 0x24 reserved for international and undocumented\n *        0x25, \"(#,##0_);(#,##0)\"<P>\n *        0x26, \"(#,##0_);[Red](#,##0)\"<P>\n *        0x27, \"(#,##0.00_);(#,##0.00)\"<P>\n *        0x28, \"(#,##0.00_);[Red](#,##0.00)\"<P>\n *        0x29, \"_(*#,##0_);_(*(#,##0);_(* \\\"-\\\"_);_(@_)\"<P>\n *        0x2a, \"_($*#,##0_);_($*(#,##0);_($* \\\"-\\\"_);_(@_)\"<P>\n *        0x2b, \"_(*#,##0.00_);_(*(#,##0.00);_(*\\\"-\\\"??_);_(@_)\"<P>\n *        0x2c, \"_($*#,##0.00_);_($*(#,##0.00);_($*\\\"-\\\"??_);_(@_)\"<P>\n *        0x2d, \"mm:ss\"<P>\n *        0x2e, \"[h]:mm:ss\"<P>\n *        0x2f, \"mm:ss.0\"<P>\n *        0x30, \"##0.0E+0\"<P>\n *        0x31, \"@\" - This is text format.<P>\n *        0x31  \"text\" - Alias for \"@\"<P>\n *\n *  @author  Andrew C. Oliver (acoliver at apache dot org)\n *  @author  Shawn M. Laubach (slaubach at apache dot org)\n */\npublic class HSSFDataFormat {\n\n    private static List builtinFormats = createBuiltinFormats();\n\n    private Vector formats = new Vector();\n\n    private Workbook workbook;\n\n    // Flag to see if need to\n    private boolean movedBuiltins = false;\n\n    // check the built in list\n    // or if the regular list\n    // has all entries.\n    /**\n     * Construncts a new data formatter.  It takes a workbook to have\n     * access to the workbooks format records.\n     * @param workbook the workbook the formats are tied to.\n     */\n    public HSSFDataFormat(Workbook workbook) {\n        this.workbook = workbook;\n        Iterator i = workbook.getFormats().iterator();\n        while (i.hasNext()) {\n            FormatRecord r = (FormatRecord) i.next();\n            if (formats.size() < r.getIndexCode() + 1) {\n                formats.setSize(r.getIndexCode() + 1);\n            }\n            formats.set(r.getIndexCode(), r.getFormatString());\n        }\n    }\n\n    private static synchronized List createBuiltinFormats() {\n        List builtinFormats = new Vector();\n        builtinFormats.add(0, \"General\");\n        builtinFormats.add(1, \"0\");\n        builtinFormats.add(2, \"0.00\");\n        builtinFormats.add(3, \"#,##0\");\n        builtinFormats.add(4, \"#,##0.00\");\n        builtinFormats.add(5, \"$#,##0_);($#,##0)\");\n        builtinFormats.add(6, \"$#,##0_);[Red]($#,##0)\");\n        builtinFormats.add(7, \"$#,##0.00_);($#,##0.00)\");\n        builtinFormats.add(8, \"$#,##0.00_);[Red]($#,##0.00)\");\n        builtinFormats.add(9, \"0%\");\n        builtinFormats.add(0xa, \"0.00%\");\n        builtinFormats.add(0xb, \"0.00E+00\");\n        builtinFormats.add(0xc, \"# ?/?\");\n        builtinFormats.add(0xd, \"# ??/??\");\n        builtinFormats.add(0xe, \"m/d/yy\");\n        builtinFormats.add(0xf, \"d-mmm-yy\");\n        builtinFormats.add(0x10, \"d-mmm\");\n        builtinFormats.add(0x11, \"mmm-yy\");\n        builtinFormats.add(0x12, \"h:mm AM/PM\");\n        builtinFormats.add(0x13, \"h:mm:ss AM/PM\");\n        builtinFormats.add(0x14, \"h:mm\");\n        builtinFormats.add(0x15, \"h:mm:ss\");\n        builtinFormats.add(0x16, \"m/d/yy h:mm\");\n        // 0x17 - 0x24 reserved for international and undocumented\n        builtinFormats.add(0x17, \"0x17\");\n        builtinFormats.add(0x18, \"0x18\");\n        builtinFormats.add(0x19, \"0x19\");\n        builtinFormats.add(0x1a, \"0x1a\");\n        builtinFormats.add(0x1b, \"0x1b\");\n        builtinFormats.add(0x1c, \"0x1c\");\n        builtinFormats.add(0x1d, \"0x1d\");\n        builtinFormats.add(0x1e, \"0x1e\");\n        builtinFormats.add(0x1f, \"0x1f\");\n        builtinFormats.add(0x20, \"0x20\");\n        builtinFormats.add(0x21, \"0x21\");\n        builtinFormats.add(0x22, \"0x22\");\n        builtinFormats.add(0x23, \"0x23\");\n        builtinFormats.add(0x24, \"0x24\");\n        // 0x17 - 0x24 reserved for international and undocumented\n        builtinFormats.add(0x25, \"#,##0_);(#,##0)\");\n        builtinFormats.add(0x26, \"#,##0_);[Red](#,##0)\");\n        builtinFormats.add(0x27, \"#,##0.00_);(#,##0.00)\");\n        builtinFormats.add(0x28, \"#,##0.00_);[Red](#,##0.00)\");\n        builtinFormats.add(0x29, \"*#,##0_);_(*(#,##0);_(* \\\"-\\\"_);_(@_)\");\n        builtinFormats.add(0x2a, \"$*#,##0_);_($*(#,##0);_($* \\\"-\\\"_);_(@_)\");\n        builtinFormats.add(0x2b, \"*#,##0.00_);_(*(#,##0.00);_(*\\\"-\\\"??_);_(@_)\");\n        builtinFormats.add(0x2c, \"_($*#,##0.00_);_($*(#,##0.00);_($*\\\"-\\\"??_);_(@_)\");\n        builtinFormats.add(0x2d, \"mm:ss\");\n        builtinFormats.add(0x2e, \"[h]:mm:ss\");\n        builtinFormats.add(0x2f, \"mm:ss.0\");\n        builtinFormats.add(0x30, \"##0.0E+0\");\n        builtinFormats.add(0x31, \"@\");\n        return builtinFormats;\n    }\n\n    public static List getBuiltinFormats() {\n        return builtinFormats;\n    }\n\n    /**\n     * get the format index that matches the given format string<p>\n     * Automatically converts \"text\" to excel's format string to represent text.\n     * @param format string matching a built in format\n     * @return index of format or -1 if undefined.\n     */\n    public static short getBuiltinFormat(String format) {\n        if (format.toUpperCase().equals(\"TEXT\"))\n            format = \"@\";\n        short retval = -1;\n        for (short k = 0; k <= 0x31; k++) {\n            String nformat = (String) builtinFormats.get(k);\n            if ((nformat != null) && nformat.equals(format)) {\n                retval = k;\n                break;\n            }\n        }\n        return retval;\n    }\n\n    /**\n     * Get the format index that matches the given format\n     *  string, creating a new format entry if required.\n     * Aliases text to the proper format as required.\n     * @param format string matching a built in format\n     * @return index of format.\n     */\n    public short getFormat(String format) {\n        ListIterator i;\n        int ind;\n        if (format.toUpperCase().equals(\"TEXT\"))\n            format = \"@\";\n        if (!movedBuiltins) {\n            i = builtinFormats.listIterator();\n            while (i.hasNext()) {\n                ind = i.nextIndex();\n                if (formats.size() < ind + 1) {\n                    formats.setSize(ind + 1);\n                }\n                formats.set(ind, i.next());\n            }\n            movedBuiltins = true;\n        }\n        i = formats.listIterator();\n        while (i.hasNext()) {\n            ind = i.nextIndex();\n            if (format.equals(i.next()))\n                return (short) ind;\n        }\n        ind = workbook.getFormat(format, true);\n        if (formats.size() <= ind)\n            formats.setSize(ind + 1);\n        formats.set(ind, format);\n        return (short) ind;\n    }\n\n    /**\n     * get the format string that matches the given format index\n     * @param index of a format\n     * @return string represented at index of format or null if there is not a  format at that index\n     */\n    public String getFormat(short index) {\n        if (movedBuiltins)\n            return (String) formats.get(index);\n        else\n            return (String) (builtinFormats.size() > index && builtinFormats.get(index) != null ? builtinFormats.get(index) : formats.get(index));\n    }\n\n    /**\n     * get the format string that matches the given format index\n     * @param index of a built in format\n     * @return string represented at index of format or null if there is not a builtin format at that index\n     * @throws ArrayOutOfBoundsException when the index exceeds the number of builtin formats.\n     */\n    public static String getBuiltinFormat(short index) {\n        return (String) builtinFormats.get(index);\n    }\n\n    /**\n     * get the number of builtin and reserved builtinFormats\n     * @return number of builtin and reserved builtinFormats\n     */\n    public static int getNumberOfBuiltinBuiltinFormats() {\n        return builtinFormats.size();\n    }\n}\n",
    "test_prompt": "// HSSFDataFormat_2Test.java\n/*\n * HSSFDataFormat.java\n *\n * Created on December 18, 2001, 12:42 PM\n */\npackage org.apache.poi.hssf.usermodel;\n\nimport org.apache.poi.hssf.model.Workbook;\nimport org.apache.poi.hssf.record.FormatRecord;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HSSFDataFormat}.\n* It contains one unit test case for the {@link HSSFDataFormat#getFormat(String)} method.\n*/\nclass HSSFDataFormat_2Test {",
    "time_taken": -1
}
]