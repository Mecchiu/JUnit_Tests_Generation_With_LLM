[
{
    "choices": [
        {
            "text": "@SuppressWarnings(\"unused\")\n\tprivate final static String source = \"testApp\";\n\t@SuppressWarnings(\"javadoc\")\n\tprivate final static String application  = \"testApp\";\n\n\t/**\n\t * Tests retrieving quota details of application deployed in Google AppEngine.\n\t *\n\t * @throws Exception in case of failure.\n\t */\n\t@Test\n\tvoid testRetrieveAppQuotaDetails() throws Exception{\n        Manager manager = new Manager();\n        manager.setAuthenticationHandler(new GoogleLoginAuthHandler());\n\t\tQuotaDetails quotaDetails = manager.retrieveAppQuotaDetails(LogonHelper.getUserId(), LogonHelper.getPassword(), LogonHelper.getSource(), application);\n        // Verify the result of QuotsApi.get\n        assertNotNull(quotaDetails);\n        // Verification of QuotsApi.getAppQuota\n        assertNotNull(quotaDetails.getAppQuota());\n        assertEquals(quotaDetails.getAppQuota().getAppId(), application);\n        assertEquals(quotaDetails.getAppQuota().getAppName(), source);\n        // Verification of QuotsApi.updateAppQuota\n        assertEquals(quotaDetails.getAppQuota().getQuota(), 100);\n\n    }\n}",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t\t * Assertion.\n\t\t */\n\t\t@Test\n\t\tvoid testRetrieveAppQuotaDetails() {\n\t\t\tManager manager = new Manager();\n\n\t\t\t// retrieve quota details of application deployed in Google App Engine\n\t\t\tString result = manager.retrieveAppQuotaDetails(LogonHelper.getUsername(), LogonHelper.getPassword(\"\"), \"\", \"\");\n\n\t\t\tassertNotNull(result);\n\t\t\tLogonHelper.clean();\n\t\t}\n\n\t}\n",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n         * Unit test for <code>retrieveAppQuotaDetails()</code> method.\n         */\n    @Test\n    public void testRetrieveAppQuotaDetails()  throws Exception {\n        Manager manager = new Manager();\n        assertNotNull(manager.<QuotaDetails>retrieveAppQuotaDetails(\"username-test@gmail.com\", \"thespoonpaso_sp_\", \"test\", \"gaeappmanager.google.appengine.test.\"));\n    }\n\t}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t/**\n\t * Tests retrieval of quota details of application deployed in Google App Engine.\n\t*/\n   @Test\n   public void testRetrieveAppQuotaDetails() throws Exception {\n       try {\n           assertNotNull(Manager.retrieveAppQuotaDetails(\"userid\", \"password\", \"source\", \"appid\"));\n           assertNotNull(Manager.retrieveAppQuotaDetails(\"userid\", \"password\", \"source2\", \"appid\"));\n       } finally {\n           Manager.deleteAppQuotaDetails(\"userid\", \"password\", \"source\", \"appid\");\n       }\n   }\n}",
            "finish_reason": "stop"
        },
        {
            "text": "\n    /**\n     * Tests retrieving quota details in Google App Engine.\n     *\n     * @throws Exception\n     *             in case of failure\n     */\n    @Test\n    void testRetrieveAppQuotaDetails() throws Exception {\n\n        QuotaDetails appQuotaDetails = QuotaDetailsParser.parse(\"cGoxpO5lB4Y0y2P6bFcqQzB5PFo3uOvf2hcYJ\");\n        assertNotNull(\"QuotaDetails object is null\", appQuotaDetails);\n\n        String authCookie = LogonHelper.loginToGoogleAppEngine(\"me@example.com\", \"passwd\", \"test\");\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            HttpGet get = new HttpGet(\"https://appengine.google.com/dashboard/quotadata\");\n            get.setHeader(\"Cookie\", \"ACSID=\" + authCookie);\n            HttpResponse response = client.execute(get);\n            appQuotaDetails = new QuotaDetailsParser().parse(response.getEntity().getContent());\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n\n        assertNotNull(\"QuotaDetails object is null in Google App Engine\", appQuotaDetails);\n        assertEquals(\"Non-matching application was created.\", appQuotaDetails.application, \"test\");\n        assertEquals(\"Non-matching application was created.\", appQuotaDetails.source, \"test\");\n        assertEquals(\"Non-matching application was created.\", appQuotaDetails.instance, \"application\");\n        assertEquals(\"Non-matching quota details for application.\", appQuotaDetails.total, \"1234\");\n        assertEquals(\"Non-matching quota details for application.\", appQuotaDetails.instanceSize, \"1234\");\n        assertEquals(\"Non-matching quota details for application.\", appQuotaDetails.totalSize, \"1234\");\n        assertEquals(\"Non-matching quota details for application size.\", appQuotaDetails.instanceSize, \"1234\");\n\n        assertEquals(\"Non-matching quota details for client-deployed application.\", appQuotaDetails.totalSize, \"2456\");\n        assertEquals(\"Non-matching quota details for client-deployed application size.\", appQuotaDetails.instanceSize, \"2048\");\n        assertEquals(\"Non-matching quota details for client-deployed application.\", appQuotaDetails.totalSize, \"2048\");\n    }\n\n    /**\n     * Tests retrieval of user details in Google App Engine.\n     *\n     * @throws Exception\n     *             in case of failure\n     * @return user details of application belonging to Google App Engine\n     */\n    @Test\n    void testRetrieveAppUser() throws Exception {\n\n        String authCookie = LogonHelper.loginToGoogleAppEngine(\"me@example.com\", \"passwd\", \"test\");\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            HttpGet get = new HttpGet(\"https://appengine.google.com/datastore/v1/applications/example.com\");\n            get.setHeader(\"Cookie\", \"ACSID=\" + authCookie);\n\n            HttpResponse response = client.execute(get);\n            if (response.getEntity()!= null) {\n                LogonHelper.parseUserDetails(response.getEntity().getContent(), client);\n            }\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n\n    /**\n     * Tests retreival of client-deployed quota details.\n     *\n     * @throws Exception\n     *             in case of failure\n     */\n    @Test\n    void testRetrieveAppQuotaDetailsForClientDeployed() throws Exception {\n\n        String authCookie = LogonHelper.loginToGoogleAppEngine(\"me@example.com\", \"passwd\", \"test\");\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            HttpGet get = new HttpGet(\"https://appengine.google.com/datastore/v1/apps/example.com/quotas?service=apps\" + \"&key=\" + \"app=app1\" + \"&app_deployed=true\");\n            get.setHeader(\"Cookie\", \"ACSID=\" + authCookie);\n\n            HttpResponse response = client.execute(get);\n            assertNotNull(\"QuotaDetails object is null\", response.getEntity().getContent());\n\n            String content = response.getEntity().getContent().toString();\n\n            assertEquals(\"Non-matching quota details for client deployed application was created.\",\n                     response.getEntity().getContent().toString(),\n                     \"app=\" + content + \",\\ncp=\\\"\" + content + \"\\\"\");\n            assertNotNull(\"Non-matching quota details for client deployed application does not exist.\",\n                          response.getEntity().getHeader(\"X-App-Quota-Details\"));\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "/**\n\t\t * Test class for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)}.\n\t\t */\n\t// @Test\n//\t\tpublic void getDetails() {\n//\t\t\t// Arrange\n//\t\t}\n        /**\n         * Test class for {@link Manager#retrieveAppQuotaDetails(String, String, String, String)}.\n         */\n        @Test\n//\t\tpublic void getAppDetailsByUserId() {\n//\t\t\t// Arrange\n//\t\t}\n        private static final String app = ApplicationType.GOOGLE_STANDARD.getValue();\n        private static GoogleAppEngineManager manager = new GoogleAppEngineManager();\n    @Test\n    public void getDetailsByUser() {\n        // Arrange\n        GCSettings settings = new GCSettings();\n        // Act\n        logout();\n        manager.setAppName(app);\n        return manager.buildRetrieveAppQuotaDetails(SettingsManagerTest.USERNAME, SettingsManagerTest.PASSWORD, SettingsManagerTest.SOURCE, app);\n    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t@Test\n\tvoid login_ShouldGetQuotaDetails() throws Exception {\n\t\t// Check that all app quota details was successfully retrieved\n\t\tString userid = LogonHelper.loginToGoogleAppEngine(\"\", \"\", \"\");\n\t\tassertDoesNotThrow(() -> Query.getAppQuotas(userid).build().list());\n\t\t// Check that new app quota details was successfully retrieved\n\t\tassertDoesNotThrow(() -> {\n\t\t\tString userid = LogonHelper.loginToGoogleAppEngine(\"\", \"\", \"\");\n\t\t\tLogonHelper.updateQuota(userid, 30, 30);\n\t\t});\n\t}\n}",
            "finish_reason": "stop"
        },
        {
            "text": "//ManagerTest.java\n    /**\n     * @param args\n     */\n    public static final void main(String args[]) {\n     ManagerTest suite = new ManagerTest();\n    suite.run();\n    }\n\t\tpublic void run() {\n    \t// TODO Auto-generated method stub\n\n    \tManager manager = new Manager();\n    \t\n    \t// 1. check quota details\n    \t\n\t\t\t// 2. call this method\n\t\t\tQuotaDetails quotaDetails = manager.retrieveAppQuotaDetails(\"\", \"\", \"\", \"MyApp\");\n\t\t\t\n\t\t\t// 3. Test 2\n\t\t\t\n\t    // 4. 1. test 2.2\n\t\t\t\n            if (quotaDetails!= null) {\n    \t\t\tLog.d(\"Number of apps deployed = \", quotaDetails.getNumApps());\n    \t\t\tLog.w(\"Number of applications deployed = \", quotaDetails.getApps().size());\n    \t\t\tLog.w(\"Total number of apps deployed = \", quotaDetails.getApps().size());\n        } else {\n        \tLog.e(\"App cache never filled!\", \"There is no cached information\");\n            }\n\t\t\t\n    }\n}",
            "finish_reason": "stop"
        },
        {
            "text": "@Test\n\t    public void appQuotaDetails() throws Exception {\n\t\tint currentQuotaCount = 0;\n\t\t\t\ttry {\n            HttpGet get = new HttpGet(\"http://appengine.google.com/api/appengine/quota?key=\"+LogonHelper.getInstance().getApiKey()+\"&q=\"+\"/apps/GAC_1_0.apps-apps-ga.apps.appspot.com/apps/GAC_1_0.apps-apps-ga.apps-\");\n            get.setHeader(\"Cookie\", \"ACSID=\"+LogonHelper.loginToGoogleAppEngine(\"testid\", \"password\", LogonHelper.getInstance().getSource()));\n\t\t\tnew DefaultHttpClient().execute(get);\n\t\t\tcurrentQuotaCount = (int)get.getFirstHeader(\"Quota-count\").getValue();\n\t\t\t\n\t\t} catch (Exception ex) {\n\t\t\tcurrentQuotaCount = 0;\n\t\t}\n\t\t\t\tassertEquals(\"App Quotas - Quotas count not returned\", 20, currentQuotaCount);\n\t    }\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "\n\t/**\n\t* Tests retrieving quota details of application deployed under Google App Engine application as well as under\n\t* non-Google App Engine application.\n     * @throws Exception in case of failure\n\t*/\n\t@Test\n\tvoid RetrieveAppQuotaDetails() throws Exception {\n        Manager manager = new Manager();\n\n        // Retrieve quota details of application deployed under Google App Engine application.\n        String source = \"My Google App Engine application\";\n        int appID = 123;\n        QuotaDetails appDetails = manager.findAppQuotaDetails(source, appID);\n        assertTrue(appDetails!= null);\n        assertEquals(source, appDetails.getSource());\n        assertEquals(appID, appDetails.getApplicationID());\n        assertEquals(new QuotaDetailsParser().getAppQuota(), appDetails.getAppQuota());\n        assertEquals(8, appDetails.getMaxBid());\n\n        // Retrieve quota details of non-Google App Engine application.\n        source = \"Non Google App Engine application\";\n        appID = 123;\n        List<String> appNames = new ArrayList<>();\n        appNames.add(\"Non Google App Engine application\");\n        appDetails = manager.findAppQuotaDetails(source, appID);\n        appDetails = manager.retrieveAppQuotaDetails(source, password, appNames.get(0), appNames.get(1));\n        assertTrue(appDetails!= null);\n        assertEquals(source, appDetails.getSource());\n        assertEquals(appID, appDetails.getApplicationID());\n        assertFalse(appDetails.getMaxBid().equals(new QuotaDetailsParser().getAppQuota()));\n        assertEquals(8, appDetails.getMaxBid());\n\n        // Retrieve quota details for Google App Engine application when appName starts with 'My'.\n        appDetails = manager.retrieveAppQuotaDetails(\"My Google App Engine application\", password, source, appDetails.getApplicationID().toString());\n        assertTrue(appDetails!= null);\n        assertEquals(source, appDetails.getSource());\n        assertEquals(appID, appDetails.getApplicationID());\n        assertEquals(new QuotaDetailsParser().getAppQuota(), appDetails.getAppQuota());\n\t}\n\n\n}\n",
            "finish_reason": "stop"
        }
    ],
    "id": "b3039d2d-60a1-4e54-98ac-62c755691715",
    "prompt_id": "/EvoSuiteBenchmark/original/67_gae-app-manager/src/main/java/net/sf/gaeappmanager/google/appengine/Manager.java",
    "original_code": "// Manager.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport net.sf.gaeappmanager.google.LogonHelper;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\n\n/**\n * Google App Engine application manager.\n *\n * @author Alois Belaska\n */\npublic class Manager {\n\n    /**\n     * Retrieve quota details of application deployed in Google App Engine.\n     *\n     * @param userid\n     *            full gmail address for user\n     * @param password\n     *            gmail account password\n     * @param source\n     *            name of application requesting quota details\n     * @param application\n     *            appspot application name\n     * @return quota details of application\n     * @throws Exception\n     *             in case of failure\n     */\n    public static QuotaDetails retrieveAppQuotaDetails(String userid, String password, String source, String application) throws Exception {\n        String authCookie = LogonHelper.loginToGoogleAppEngine(userid, password, source);\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            HttpGet get = new HttpGet(\"https://appengine.google.com/dashboard/quotadetails?&app_id=\" + application);\n            get.setHeader(\"Cookie\", \"ACSID=\" + authCookie);\n            HttpResponse response = client.execute(get);\n            return new QuotaDetailsParser().parse(response.getEntity().getContent());\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n}\n",
    "test_prompt": "// ManagerTest.java\npackage net.sf.gaeappmanager.google.appengine;\n\nimport net.sf.gaeappmanager.google.LogonHelper;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Manager}.\n* It contains one unit test case for the {@link Manager#retrieveAppQuotaDetails(String, String, String, String)} method.\n*/\nclass ManagerTest {",
    "time_taken": 43.15333318710327,
    "usage": {
        "prompt_tokens": 564
    }
},
{
    "choices": [
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid\n     *            full gmail address for user\n     * @param password\n     *            password\n     * @param source\n     *            name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception\n     *             if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n\n    private static String getAuthToken(InputStream inputStream) throws Exception {\n        LineNumberReader reader = new LineNumberReader(new BufferedReader(new InputStreamReader(inputStream)));\n        String line = reader.readLine();\n        while (line!= null) {\n            line = line.trim();\n            if (line.startsWith(\"Auth=\")) {\n                return line.substring(5);\n            }\n            line = reader.readLine();\n        }\n        throw new Exception(\"Could not find Auth token\");\n    }\n\n    private LogonHelper() {\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\t\n    @Test\n    void loginToGoogleAppEngine() throws Exception {\n        String userid = \"admin@admin.com\";\n        String password = \"password\";\n        String source = \"Google App\";\n        String acsilogon = \"ACS_SIGNATURE\";\n        String return_url = \"http://example.com/ret\";\n        String access_granted_url = \"http://example.com/test_url\";\n        String acs_signature = \"ACS_SIGNATURE\";\n        String acs_credentials = \"ACS_CREDENTIALS\";\n        String acs_scope = \"ACS_SCOPE\";\n        String acs_ex = \"ACS_EX\";\n        String acs_version = \"ACS_VERSION\";\n        String acs_retries = \"ACS_RETRIES\";\n        String acs_duration = \"ACS_DURATION\";\n        String acs_dnd = \"ACS_DND\";\n        String acs_cid = \"ACS_CID\";\n        String acs_client_version = \"ClientVersion\";\n        String acs_client_key = \"Client_Key\";\n        String acs_id = \"AG_ID\";\n        LogonHelper.LogonHelper.logonToGoogleAppEngine(userid, password, source);\n\n        // Verify client_id and acs_cid values\n\n        verifyFields(\"acs_cid\", 2, \"AG_ID\", 3, \"ClientID\");\n        verifyFields(\"acs_credentials\", 8, \"ACS_CREDENTIALS\", \"AUTH_TOKEN_CLIENT\", \"CLIENT_TOKEN_KEY\");\n\n        // Verify ACS key (AKA user@google.com)\n        verifyKey(\"ACS_KEY\", 8, \"AUTH_TOKEN_CLIENT\", \"ACS_CREDENTIALS\", \"AUTH_TOKEN_USER\");\n\n        // Verify ACS signature\n        verifySignature(\"ACS_SIGNATURE\");\n\n\n\n        // Verify return URL (AKA gmail.com/ret)\n        verifyUrl(\"returnUrl\", return_url, \"http://example.com/ret\");\n\n//      System.out.println(acs_credentials);\n        assertNotNull(acs_credentials);\n\n        // Verify acs_scope\n        verifyScope(\"acs_scope\");\n        assertNotNull(acs_scope);\n\n        // Verify acs_ex\n        verifyEx(\"acs_ex\", 7);\n        assertNotNull(acs_ex);\n\n        // Verify acs_dnd\n        verifyDnd(\"acs_dnd\", 10, 10);\n        assertNotNull(acs_dnd);\n\n        // Verify acs_client_ex\n        verifyClientEx(\"acs_ex\", 10, 10);\n        assertNotNull(acs_ex);\n        assertNotNull(acs_ex);\n        assertEquals(\"10\", acs_ex);\n        assertNotNull(acs_cid);\n        assertNotNull(acs_client_version);\n        assertNotNull(acs_client_key);\n\n        // Verify acs_client_cid\n        verifyClientCID(\"ACS_CID\", 0, 20);\n        assertNotNull(acs_cid);\n\n        // Verify acs_client_ver\n        verifyClientVer(\"ACS_CLIENT\", 3, 4, 3",
            "finish_reason": "length"
        },
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid\n     *            full gmail address for user\n     * @param password\n     *            password\n     * @param source\n     *            name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception\n     *             if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n\n    private static String getAuthToken(InputStream inputStream) throws Exception {\n        LineNumberReader reader = new LineNumberReader(new BufferedReader(new InputStreamReader(inputStream)));\n        String line = reader.readLine();\n        while (line!= null) {\n            line = line.trim();\n            if (line.startsWith(\"Auth=\")) {\n                return line.substring(5);\n            }\n            line = reader.readLine();\n        }\n        throw new Exception(\"Could not find Auth token\");\n    }\n\n    private LogonHelper() {\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\t\n\t@Test\n\tpublic void testLoginToGoogleAppEngine() throws Exception {\n\t\tString auth =\"AUTHENTICATE \" + \n\t\t\t\t\t\"X-MSEARCH-APPKEY=\" + \"F39F0EFC1D9F0726FCE8C99B10CC6FD0E\";\n\t\tString authz = \"X-OAUTH-AUTHORIZATION=\" + auth;\n\t\tList<NameValuePair> nvps1 = new ArrayList<NameValuePair>();\n        nvps1.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n        nvps1.add(new BasicNameValuePair(\"service\", \"ah\"));\n        nvps1.add(new BasicNameValuePair(\"source\", \"user\"));\n        nvps1.add(new BasicNameValuePair(\"password\", \"F39F0EFC1D9F0726FCE8C99B10CC6FD0E\"));\n        nbHtml = new StringBuffer().append(\"<html></html>\").toString();\n        nbPas = new StringBuffer().append(\"Pas de gazoteur, \").append(\"l'utilisateur n'est pas pas connect\u00e9 avec Le Mesafique.\\n\\n\").append(\"<p>Succ\u00e8s, il vous pla\u00eet connecter. Veuillez enfonclerz une commande.</p>\").toString();\n\t\n        final String[] nvps = { auth, authz, \"password\" };\n        List<NameValuePair> nvps1 = new ArrayList<NameValuePair>(System.getProperty(\"os.name\").equals(\"WINDOWS\")? nvps : nvps1);\n        LogonHelper.loginToGoogleAppEngine(nvps, \"password\", \"Gazoteur\");\n        \n        final String[] nvps2 = { auth, authz, \"password\", \"Gazoteur\" };\n\t\n\n\t\tfinal String[] nvps3 = { auth, authz, \"password\", \"Gazoteur\", \"F39F0EFC1D9F0726FCE8C99B10CC6FD0E\" };\n\t\tfinal String[] nvps4 = { auth, authz, \"password\", \"Gazoteur\", \"F39F0EFC1D9F0726FCE8C99B10CC6FD0E\", \"\" };\n\n        final String[] nvps5 = { auth, authz, \"password\", \"Gazoteur\", \"F39F0EFC1D9F0726FCE8C99B10CC6FD0E\", \"f39f0efc1d9f0726fce8c99b10cc6fd0e_0\" };\n        final String[] nvps6 = { auth, authz, \"password\", \"Gazoteur\", \"F39F0EFC1D9F0726FCE8C99B10CC6FD0E\", \"f39f0efc1d9f0726fce8c99b10cc6fd0e_1\", \"\"};\n        //final String[] nvps8 = { auth, authz, \"password\", \"Gazoteur\", \"F39F0EFC1D9F0726FCE8C99B10CC6FD0E\", \"f39f0efc1d9f",
            "finish_reason": "length"
        },
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid\n     *            full gmail address for user\n     * @param password\n     *            password\n     * @param source\n     *            name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception\n     *             if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n\n    private static String getAuthToken(InputStream inputStream) throws Exception {\n        LineNumberReader reader = new LineNumberReader(new BufferedReader(new InputStreamReader(inputStream)));\n        String line = reader.readLine();\n        while (line!= null) {\n            line = line.trim();\n            if (line.startsWith(\"Auth=\")) {\n                return line.substring(5);\n            }\n            line = reader.readLine();\n        }\n        throw new Exception(\"Could not find Auth token\");\n    }\n\n    private LogonHelper() {\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\t\n\t/**\n\t* Test with a {@link DefaultHttpClient}.\n\t*/\n    @Test\n    void testDefaultHttpClient(){\n        assertNotNull(new DefaultHttpClient());\n    }\n\n\t/**\n\t* Test with a {@link HttpClient}.\n\t*/\n    @Test\n    void testHttpClient(){\n        assertNotNull(new HttpClient());\n    }\n\n\t@Test\n\tvoid loginToGoogleAppEngine_validPwd(){\n\t\tfinal List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n\t\t\n\t\tInputStream inputStream =\n\t\t\t\tLogonHelperTest.class.getResourceAsStream(\"/email.txt\");\n\t\tLineNumberReader reader = new LineNumberReader(new BufferedReader(\n\t\t\t\tnew InputStreamReader(inputStream)));\n\t\t\n\t\tString line = reader.readLine();\n\t\twhile (line!= null){\n\t\t\tline = reader.readLine();\n\t\t\tString[] split = line.split(\" \");\n\t\t\tif (split.length == 3){\n\t\t\t\tString userid = split[0];\n\t\t\t\tString password = split[1];\n\t\t\t\tString source = split[2];\n\t\t\t\tnameValuePair nv = new BasicNameValuePair(userid, password);\n\t\t\t\tUser user = new User(userid, password, source);\n\t\t\t\tList<User> users = new ArrayList<User>(1);\n\t\t\t\tusers.add(user);\n\t\t\t\tnvps.add(new BasicNameValuePair(\"nameValuePairs\", nameValuePair(users)));\n\t\t\t\tHttpPost post = new HttpPost(\"https://api.google.com/uas/v1/user\");\n\t\t\t\tpost.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n\t\t\t\t\n\t\t\t\tHttpResponse response = client.execute(post);\n\t\t\t\tif (response.getStatusLine().getStatusCode()!= 200) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tline = reader.readLine();\n\t\t}\n\t\t\n\t\tassertEquals(1, nvps.size());\n\t\tassertEquals(nvps.get(0).getValue(), nvps.get(0).getNameValue().get(0).getValue());\n\t}\n}\n",
            "finish_reason": "stop"
        },
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid\n     *            full gmail address for user\n     * @param password\n     *            password\n     * @param source\n     *            name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception\n     *             if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n\n    private static String getAuthToken(InputStream inputStream) throws Exception {\n        LineNumberReader reader = new LineNumberReader(new BufferedReader(new InputStreamReader(inputStream)));\n        String line = reader.readLine();\n        while (line!= null) {\n            line = line.trim();\n            if (line.startsWith(\"Auth=\")) {\n                return line.substring(5);\n            }\n            line = reader.readLine();\n        }\n        throw new Exception(\"Could not find Auth token\");\n    }\n\n    private LogonHelper() {\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\t/**\n\t\t * It is not possible to use an instance of LogonHelper\n\t\t */\n\tprivate final LogonHelper logger = new LogonHelper();\n\n\tprivate void checkAuthToken(String authToken) throws Exception {\n\t\tcheckAuthToken(authToken, 401);\n\t}\n\n\tprivate void checkAuthToken(String authToken, int expectedStatusCode) throws Exception {\n\t\tHttpResponse response = logger.loginToGoogleAppEngine(authToken, \"Aesdsa\", \"client123\");\n\t\tassertEquals(\"Was expecting HTTP Response code 500 when connecting to Google\", expectedStatusCode, response.getStatusLine().getStatusCode());\n\t\tList<Cookie> result = getCookies(response);\n\t\tassertTrue(\"Unexpected cookie\", result.size() == 1, message);\n\t\tCookie resultCookie = result.get(0);\n\t\tassertTrue(\"Unexpected cookie\", resultCookie.getName().equals(\"AccessToken\"));\n\t\tassertTrue(\"Unexpected cookie\", resultCookie.getExpiry() == null);\n\t}\n\n\tprivate void checkAuthToken(String authToken, String expectedUser, String expectedPassword) throws Exception {\n\t\tHttpResponse response = logger.loginToGoogleAppEngine(authToken, expectedUser, expectedPassword);\n\t\tList<Cookie> result = getCookies(response);\n\t\tassertTrue(\"Unexpected cookie\", result.size() >= 1, message);\n\t\tCookie resultCookie = result.get(0);\n\t\tassertTrue(\"Unexpected cookie\", resultCookie.getName().equals(\"ACSID\"));\n\t\tassertTrue(\"Unexpected cookie\", resultCookie.getValue().equals(authToken));\n\t}\n\n\tprivate List<Cookie> getCookies(HttpResponse response) throws Exception {\n\t\tList<Cookie> result = new ArrayList<Cookie>();\n\t\tNameValuePair[] nvps = response.getAllHeaders();\n\t\tStringBuffer buf = new StringBuffer();\n\t\tLineNumberReader reader = new LineNumberReader(new BufferedReader(new InputStreamReader(response.getEntity().getContent())));\n\t\twhile (reader.ready()) {\n\t\t\tString line = reader.readLine();\n\t\t\tbuf.append(line);\n\t\t}\n\t\twhile (reader.ready()) {\n\t\t\tString line = reader.readLine();\n\t\t\tif (buf.toString().startsWith(\"Set-Cookie:\")) {\n\t\t\t\tCookie c = new Cookie(\"ACSID\", buf.toString());\n\t\t\t\tc.setMaxAge(-1);\n\t\t\t\tresult.add(c);\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t\treturn result;\n\t}\n\n\n\t/**\n\t * Test for {@link LogonHelper#loginToGoogleAppEngine(String, String, String)}\n\t * and {@link LogonHelper#loginToGoogleAppServer(String, String, String)} methods\n\t * where the first method calls the other method and all subsequent calls\n\t * call the second function.\n\t */\n\t@Test\n\tvoid testLoginToGoogleAppEngine() throws Exception {\n\t\tString authToken = \"myAuthToken\";\n\t\t// Check login to GoogleAppEngine method\n\t\tlogger.loginToGoogleAppEngine(authToken, \"\", \"client2\");\n\t\tcheckAuthToken(authToken);\n\t\tcheckAuthToken(authToken, 401);\n\t\t\n\t\tList<Cookie> result = logger.loginToGoogleAppServer(authToken, \"\", \"masterapp2\");\n\t\tlogger.loginToGoogleAppServer",
            "finish_reason": "length"
        },
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid\n     *            full gmail address for user\n     * @param password\n     *            password\n     * @param source\n     *            name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception\n     *             if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n\n    private static String getAuthToken(InputStream inputStream) throws Exception {\n        LineNumberReader reader = new LineNumberReader(new BufferedReader(new InputStreamReader(inputStream)));\n        String line = reader.readLine();\n        while (line!= null) {\n            line = line.trim();\n            if (line.startsWith(\"Auth=\")) {\n                return line.substring(5);\n            }\n            line = reader.readLine();\n        }\n        throw new Exception(\"Could not find Auth token\");\n    }\n\n    private LogonHelper() {\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\tpublic String userid = \"al\";\n\t\tpublic String password = \"pass\";\n\t\t\n  \t@Test\n    public void testLoginToGoogleAppEngine(){\n    \tString accountType = \"HOSTED_OR_GOOGLE\";\n    \tInputStream is = LogonHelper.class.getClassLoader().getResourceAsStream(\"/WEB-INF/auth.txt\");\n        BufferedReader br = new BufferedReader(new InputStreamReader(is));\n        String line = br.readLine();\n      \n        assertEquals(\"ACSID\", line);\n        while (line!= null) {\n        \tline = br.readLine();\n        \tassertNotNull(line);\n        }\n      \n    }\n\t\t\n  \t@Test\n  \tpublic void testLoginToGoogleAppEngineWithUncachedAccountType(){\n  \t\tDefaultHttpClient client = new DefaultHttpClient();\n  \t\ttry {\n  \t\t\tURLGOOGLE  urlGoogle = new URL(new URL(\"https://www.google.com/?gcl=https://www.google.com/accounts/ClientLogin#uncached\"));\n  \t\t\tList<NameValuePair> nvps = new ArrayList<NameValuePair>();\n  \t\t\tnvps.add(new BasicNameValuePair(\"uncached\", \"false\"));\n  \t\t\tHttpPost postRequest = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n  \t\t\tpostRequest.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n  \t\t\tHttpResponse response = client.execute(postRequest);\n  \t\t\tif (response.getStatusLine().getStatusCode()!= 200) {\n  \t\t\t\tthrow new Exception(\"Error obtaining ACSID\");\n  \t\t\t}\n  \t\t\tHttpGet get = new HttpGet(\"https://www.google.com/accounts/ClientLogin\");\n  \t\t\tresponse = client.execute(get);\n  \t\t\treturn;\n  \t\t} finally {\n  \t\t\tclient.getConnectionManager().shutdown();\n  \t\t}\n  \t}\n  \n  \t/**\n  \t * Creates an Authorization header according to https://tools.ietf.org/html/draft-ietf-oauth-v2-16#section-4\n  \t *\n  \t * @param userid the unique identifier of user\n  \t * @return the Authorization header\n  \t *\n  \t * @throws Exception if the header generation fails\n  \t */\n  \t@Test\n  \tpublic void testAuthorizationFieldGeneration(){\n  \t\tDefaultHttpClient client = new DefaultHttpClient();\n  \t\ttry {\n  \t\t\tList<NameValuePair> nvps = new ArrayList<NameValuePair>();\n  \t\t\tnvps.add(new BasicNameValuePair(\"uncached\", String.valueOf(true)));\n  \t\t\tHttpPost postRequest = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n  \t\t\tpostRequest.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n  \t\t\tHttpResponse response = client.execute(postRequest);\n  \t\t\tassertEquals(200, response.getStatusLine().getStatusCode());\n  \t\t\t\n  \t\t\t\n  \t\t\tList<Cookie> cookies =\n  \t\t\t\tclient.getCookieStore().getCookies();\n  \t\t\tassertNotNull(cookies);\n  \t\t\tString authHeader = new StringBuilder().append(\"OAuth \"",
            "finish_reason": "length"
        },
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid\n     *            full gmail address for user\n     * @param password\n     *            password\n     * @param source\n     *            name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception\n     *             if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n\n    private static String getAuthToken(InputStream inputStream) throws Exception {\n        LineNumberReader reader = new LineNumberReader(new BufferedReader(new InputStreamReader(inputStream)));\n        String line = reader.readLine();\n        while (line!= null) {\n            line = line.trim();\n            if (line.startsWith(\"Auth=\")) {\n                return line.substring(5);\n            }\n            line = reader.readLine();\n        }\n        throw new Exception(\"Could not find Auth token\");\n    }\n\n    private LogonHelper() {\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\t\n    private static final String API_KEY = \"AIzaSyBzZNQ1t4jRqrP2zv3FQcwE2S5kfIaW4EoE\";                 \n                 \n\t/**\n\t * Login to Google App Engine.\n\t * @throws Exception if authentication fails\n\t * @throws Exception\n\t */\n    @Test\n    public void loginToGoogleAppEngine_Test() throws Exception {\n        // Setup the login to Google App Engine.  This needs to happen inside of a try {\n        logonToGoogleAppEngine();\n        // }\n        // Catch any other Exception if anything is thrown in here, if not, the callers \n        // of the test will fail.\n\t\t\n        assertFalse(\"APIKey was not loaded\",API_KEY.isEmpty());\n        \n        // login to Yahoo\n        HttpPost post = new HttpPost(\"https://accounts.google.com/o/oauth2/v2/auth\");\n        post.addHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        post.setEntity(new UrlEncodedFormEntity(new ArrayList<NameValuePair>(), HTTP.UTF_8));\n        assertEquals(\"Returned wrong content-type for type\", \"application/x-www-form-urlencoded\", \n                getContentType(post));    \n        HttpResponse response = new DefaultHttpClient().execute(post);\t\t\n        assertEquals(\"Returned wrong status code\", 200, response.getStatusLine().getStatusCode());\n        assertEquals(\"Returned wrong content-type\", \"application/x-www-form-urlencoded; charset=UTF8\", \n                getContentType(response));\n    }\n    \n    private String getContentType(HttpResponse response) {\n        assertEquals(\"Returned wrong content-type for type\", \"text/html; charset=UTF-8\", response.getHeaders(HTTP.CONTENT_TYPE).get(0).getValue());\n        return getContentType(response.getEntity().getContent());\n    }\n    \n\tprivate String loginToGoogleAppEngine() throws Exception {\n        // Setup the login to Google App Engine.  This needs to happen inside of a try {\n        LogonHelper logonHelper = new LogonHelper();\n        HttpGet get = new HttpGet(logonHelper.getAuthTokenUrl());\n        get.setHeader(\"User-Agent\", \"google app engine login\");\n        HttpResponse response = new DefaultHttpClient().execute(get);\n        assertEquals(\"Returned wrong content-type\", \"application/x-www-form-urlencoded\", \n                get.getHeaders(HTTP.CONTENT_TYPE).get(0).getValue());\n        String content = \"\";\n        try {\n            content = response.getEntity().getContent().toString();\n            get.abort();\n        } catch (Exception e) {\n            if (e.getMessage().startsWith(\"google apps engine response code 5\")) {\n                // this is an unknown error in the google app engine service, so just give it back to the client\n                get = new HttpGet(logonHelper.getAuthTokenUrl());\n                get.setHeader(\"User-Agent\", \"google app engine login\");\n                requestFailureLogging(get, e);\n                response = new DefaultHttpClient().execute(get);\n                content = \"\";\n            }\n        }\n        ",
            "finish_reason": "length"
        },
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid\n     *            full gmail address for user\n     * @param password\n     *            password\n     * @param source\n     *            name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception\n     *             if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n\n    private static String getAuthToken(InputStream inputStream) throws Exception {\n        LineNumberReader reader = new LineNumberReader(new BufferedReader(new InputStreamReader(inputStream)));\n        String line = reader.readLine();\n        while (line!= null) {\n            line = line.trim();\n            if (line.startsWith(\"Auth=\")) {\n                return line.substring(5);\n            }\n            line = reader.readLine();\n        }\n        throw new Exception(\"Could not find Auth token\");\n    }\n\n    private LogonHelper() {\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\t\n\t/**\n\t * Test method for {@link LogonHelper#LoginHelper(String, String)}.\n\t * \n\t * @throws Exception\n\t */\n\t@Test\n\tvoid testLogin() throws Exception {\n\t\t// Login to Google app engine\n\t\tString response = loginToGoogleAppEngine(\"bob@example.com\", \"password\", \"google\");\n\t\tassertNotNull(response);\n\t\t// Login to Google app engine again\n\t\tresponse = loginToGoogleAppEngine(\"bob@example.com\", \"password\", \"google\");\n\t\tassertNotNull(response);\n\n\t\tassertEquals(1, getRequestCount(\"google\"));\n\t\tassertEquals(1, getRequestCount(\"google\", 0, 0));\n\t}\n\n\t/**\n\t * Test method for {@link LogonHelper#LoginHelper(InputStream, String)}.\n\t * \n\t * @throws Exception\n\t */\n\t@Test\n\tvoid testLoginInputStream() throws Exception {\n\t\tbyte[] body = new byte[(int) 1024 * 1024 * 3];\n\t\tInputStream input = new BufferedInputStream(new ByteArrayInputStream(body));\n\t\tLoginHelper login = new LoginHelper(input, \"Google Identity\");\n\t\tString response = login.loginToGoogleAppEngine(\"bob@example.com\", \"password\", \"google\");\n\t\tassertNotNull(response);\n\t}\n\n\t/**\n\t * Test method for {@link LogonHelper#getRequestCount(String)}.\n\t * \n\t * @throws Exception\n\t */\n\t@Test\n\tvoid getRequestCount() throws Exception {\n\n\t\tint requestCount = getRequestCount(\"google\");\n\t\tassertTrue(requestCount > 0);\n\n\t\tint clientRequestCount = getRequestCount(\"google\", 0, 0);\n\t\tassertTrue(clientRequestCount > 0);\n\t}\n\n\t/**\n\t * Test method for {@link LogonHelper#getRequestCount(String, int, int)}.\n\t * \n\t * @throws Exception\n\t */\n\t@Test\n\tvoid getRequestCountIArgs() throws Exception {\n\t\tInteger i =  new Integer(2);\n\t\tInteger count = getRequestCount(\"google\", i, i);\n\t\tassertTrue(count.intValue() > 0);\n\t\tassertTrue(getRequestCount(\"google\", i, i).intValue() > 0);\n\t}\n\n\t/**\n\t * Test method for {@link LogonHelper#getRequestCount(String)}.\n\t * \n\t * @throws Exception\n\t */\n\t@Test\n\tvoid getRequestCountNull() throws Exception {\n\t\tInteger count = getRequestCount(\"google\", null, null);\n\t\tassertTrue(count.intValue() > 0);\n\t\tassertTrue(getRequestCount(\"google\", null, null).intValue() > 0);\n\t}\n\n\t/**\n\t * Test method for {@link LogonHelper#getRequestCount(String, HttpResponse)}.\n\t * \n\t * @throws Exception\n\t */\n\t@Test\n\tvoid getRequestCountHttpResponse() throws Exception {\n\t\tHttpResponse response = getRequestCount(\"google\", null, null);\n\t\tassertTrue(response.getStatusLine().getStatusCode()!= 200);\n\n\t\tassertTrue(response.getStatusLine().getStatusCode()!= 503);\n\n\t\tresponse = getRequestCount(\"google\", null, null, \"text\", null);\n\t\tassertTrue(response.getStatusLine().getStatusCode()!= 200);\n\n\t\tresponse = getRequestCount",
            "finish_reason": "length"
        },
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid\n     *            full gmail address for user\n     * @param password\n     *            password\n     * @param source\n     *            name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception\n     *             if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n\n    private static String getAuthToken(InputStream inputStream) throws Exception {\n        LineNumberReader reader = new LineNumberReader(new BufferedReader(new InputStreamReader(inputStream)));\n        String line = reader.readLine();\n        while (line!= null) {\n            line = line.trim();\n            if (line.startsWith(\"Auth=\")) {\n                return line.substring(5);\n            }\n            line = reader.readLine();\n        }\n        throw new Exception(\"Could not find Auth token\");\n    }\n\n    private LogonHelper() {\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\tprivate final static String LOGGING_ON = \"on\";\n\t\t\n\t\t@Test\n\t\tvoid loginToGoogleAppEngine_Success() throws Exception {\n\t\t\tDefaultHttpClient client = new DefaultHttpClient();\n\t\t\ttry {\n\t\t\t\tList<NameValuePair> nvps = new ArrayList<NameValuePair>();\n\t\t\t\tnvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n\t\t\t\t// TODO test other params\n\t\t\t\tHttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n\t\t\t\tpost.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n\t\t\t\tHttpResponse response = client.execute(post);\n\t\t\t\tassertEquals(200, response.getStatusLine().getStatusCode());\n\t\t\t\tassertNotNull(\"The session is missing.\", client.getSession());\n\t\t\t\tassertNotNull(\"The Client Login credentials is missing.\", client.getCredentials());\n\t\t\t\tassertSame(\"ACS ID should not be null.\", client.getCredentials().get(HTTP.ACSID), \"A509B5F1A0BFFE2E89D0F3CCC0C2F5F0B3\"); // no need to assert this one in here because we are testing it anyway\n\t\t\t\tassertNotNull(\"No AuthToken should not be null.\", client.getCredentials().get(APPLICATION_DOMAIN));\n\n\t\t\t} finally {\n\t\t\t\tclient.getConnectionManager().shutdown();\n\t\t\t}\n\t\t}\n\t\t\n\t\t@Test\n\t\tvoid loginToGoogleAppEngine_AccountExpired() throws Exception {\n\t\t\tDefaultHttpClient client = new DefaultHttpClient();\n\t\t\ttry {\n\t\t\t\t// Get the ACSID\n\t\t\t\tHttpGet get = new HttpGet(\"https://www.google.com/accounts/ClientLogin?auth=A4bEcXg6p-0L7pX7bxFZv_3SqHh2bwQg-nSrVVuFn3XVpD_eRdvQj3PvHmFyBp5fXkfB1-VVg2\");\n\t\t\t\t// Execute the request\n\t\t\t\tHttpResponse response = client.execute(get);\n\t\t\t\tassertEquals(407, response.getStatusLine().getStatusCode());\n\t\t\t\tassertNotNull(\"The session is missing.\", client.getSession());\n\t\t\t\tassertNotNull(\"No AuthToken should not be null.\", client.getCredentials());\n\t\t\t\tassertSame(\"Account Expiration should not be expired.\", client.getCredentials().get(HTTP.ACSID), \"A509B5F1A0BFFE2E89D0F3CCC0C2F5F0B3\"); // no need to assert this one in here because we are testing it anyway\n\t\t\t\tassertNotNull(\"No AuthToken should not be null.\", client.getCredentials().get(APPLICATION_DOMAIN));\n\n\t\t\t\t// Get the ACSID\n\t\t\t\tget = new HttpGet(\"https://www.google.com/accounts/ClientLogin?auth=A4bEcXg6p-0L7pX7bxFZv_3SqHh2bwQg-nSrVVuFn3XVpD_eRdvQj3PvHmFyBp5fXkfB1-VVg2\");\n\t\t\t\tHttpResponse loginResponse = client.execute",
            "finish_reason": "length"
        },
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid\n     *            full gmail address for user\n     * @param password\n     *            password\n     * @param source\n     *            name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception\n     *             if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n\n    private static String getAuthToken(InputStream inputStream) throws Exception {\n        LineNumberReader reader = new LineNumberReader(new BufferedReader(new InputStreamReader(inputStream)));\n        String line = reader.readLine();\n        while (line!= null) {\n            line = line.trim();\n            if (line.startsWith(\"Auth=\")) {\n                return line.substring(5);\n            }\n            line = reader.readLine();\n        }\n        throw new Exception(\"Could not find Auth token\");\n    }\n\n    private LogonHelper() {\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\t/**\n\t\t * Test method for {@link LogonHelper#loginToGoogleAppEngine(String, String, String)}.\n\t\t * @throws Exception exception.\n\t\t */\n\t@Test\n\tpublic void testLoginToGoogleAppEngine() throws Exception {\n\t\tLogonHelper.loginToGoogleAppEngine(\"test\", \"test\", \"googleappmanager\");\n\t}\n\n\t/**\n\t * Test method for {@link LogonHelper#loginToGoogleAppEngine(String, String, String, InputStream, boolean)}\n\t * {@literal @Test}\n\t * @throws Exception exception.\n\t */\n\t@Test\n\tpublic void testLoginToGoogleAppEngineInputStream() throws Exception {\n\t\tDefaultHttpClient client = new DefaultHttpClient(true);\n\t\tLogonHelper.loginToGoogleAppEngine(null, \"test\", \"yahoo\", new InputStreamReader(new byte[] {0, 1, 2, 3}), false);\n\t}\n\n\t/**\n\t * Test method for {@link LogonHelper#loginToGoogleAppEngine(String, String, String, InputStream, boolean)}.\n\t * @throws Exception exception.\n\t */\n\t@Test\n\tpublic void testLoginToGoogleAppEngineInputStreamNoAuth() throws Exception {\n\t\tfinal String invalidClientId = \"invalid-clientid\";\n\t\tDefaultHttpClient client = new DefaultHttpClient(true);\n\t\tassertTrue(client.execute(new HttpGet(\"https://www.google.com/_ah/clientid/invalid\")) < 0);\n\t\tassertTrue(client.execute(new HttpGet(\"https://www.google.com/_ah/clientid/invalid\")) < 0);\n\t\tLogonHelper.loginToGoogleAppEngine(invalidClientId, \"test\", \"yahoo\", new InputStreamReader(new byte[] {0, 1, 2, 3}), false);\n\t}\n\n\t/**\n\t * Test method for {@link LogonHelper#loginToGoogleAppEngine(String, String, String, InputStream, boolean)}\n\t * {@literal @Test}\n\t */\n\t@Test\n\tpublic void testLoginToGoogleAppEngineInputStreamNoAuth2() throws Exception {\n\t\tfinal String invalidClientId = \"invalid-clientid\";\n\t\tDefaultHttpClient client = new DefaultHttpClient(true);\n\t\tassertTrue(client.execute(new HttpGet(\"https://www.google.com/_ah/clientid/invalid\")) < 0);\n\t\tassertTrue(client.execute(new HttpGet(\"https://www.google.com/_ah/clientid/invalid\")) < 0);\n\t\tLogonHelper.loginToGoogleAppEngine(null, \"test\", \"yahoo\", new InputStreamReader(new byte[] {0, 1, 2, 3}), false);\n\t}\n\n\t/**\n\t * Test method for {@link LogonHelper#loginToGoogleAppEngine(String, String, String, InputStream, boolean)}.\n\t * @throws Exception exception.\n\t */\n\t@Test\n\tpublic void testLoginToGoogleAppEngineInputStreamNoClient() throws Exception {\n\t\tfinal String invalidClientId = \"invalid-clientid\";\n\t\tDefaultHttpClient client = new DefaultHttpClient(true);\n\t\tassertTrue(client.execute(new HttpGet(\"https://www.google.com/_ah/clientid/invalid\")) < 0);\n\t\tassertTrue(client.execute(new HttpGet(\"https://www.google.com/_ah/clientid/invalid\")) < 0);",
            "finish_reason": "length"
        },
        {
            "text": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid\n     *            full gmail address for user\n     * @param password\n     *            password\n     * @param source\n     *            name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception\n     *             if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode()!= 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n\n    private static String getAuthToken(InputStream inputStream) throws Exception {\n        LineNumberReader reader = new LineNumberReader(new BufferedReader(new InputStreamReader(inputStream)));\n        String line = reader.readLine();\n        while (line!= null) {\n            line = line.trim();\n            if (line.startsWith(\"Auth=\")) {\n                return line.substring(5);\n            }\n            line = reader.readLine();\n        }\n        throw new Exception(\"Could not find Auth token\");\n    }\n\n    private LogonHelper() {\n    }\n}\n\n// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {\n\t\t\n\tprivate static final String TEST_USERNAME = \"root\";\n\t\t\n\tprivate static final String TEST_PASSWORD = \"test:password\";\n\tprivate static final String TESTOOL = \"http://dev.gdrive.google-apps.googleusercontent.com/oauth2/auth?key=AIjTnD5T3g-0_zsWLjhf9QeSgA0pX8_r_MkTfE6-k%2B5Tl-A%2B0t%2BCz%3D\";\n\t\n\tprivate static String getUrl(String url);\n\t\n\t@Test\n\tpublic void testLoginToGoogleAppEngine() throws Exception {\n\t\tDefaultHttpClient client = new DefaultHttpClient();\n\t\tString login = LogonHelper.loginToGoogleAppEngine(TEST_USERNAME, TEST_PASSWORD, \"android\");\n\t\tassertTrue(login.equals(TEST_USERNAME + \" : \" + TEST_PASSWORD));\n\t\tassertTrue(client.getCookieStore().getCookies().size() == 1);\n\t\tassertTrue(client.getCookieStore().getCookies().get(TEST_USERNAME + \" : \" + TEST_PASSWORD).getPath()\n\t\t\t\t== \"/oauth2/auth/oauth?\");\n\t\tString authToken = getAuthToken(new FileInputStream(new File(\"dummy.txt\")));\n\t\tassertEquals(authToken, \"AIjTnD5T3g-0_zsWLjhf9QeSgA0pX8_r_MkTfE6-k%2B5Tl-A%2B0t%2BCz%3D\");\n\t\tassertTrue(client.getCookieStore().getCookies().size() == 0);\n\t}\n\n\t@Test\n\tpublic void testLoginToGoogleAppEngineFromStream() throws Exception {\n\t\tInputStream in = new FileInputStream(new File(\"dummy.txt\"));\n\t\tDefaultHttpClient client = new DefaultHttpClient();\n\t\tString login = LogonHelper.loginToGoogleAppEngine(TEST_USERNAME, TEST_PASSWORD, in);\n\t\tassertTrue(login.equals(TEST_USERNAME + \" : \" + TEST_PASSWORD));\n\t\tassertTrue(client.getCookieStore().getCookies().size() == 1);\n\t\tassertTrue(client.getCookieStore().getCookies().get(TEST_USERNAME + \" : \" + TEST_PASSWORD).getPath()\n\t\t\t\t== \"/oauth2/auth/oauth?\");\n\t\tString authToken = getAuthToken(in);\n\t\tassertEquals(authToken, \"AIjTnD5T3g-0_zsWLjhf9QeSgA0pX8_r_MkTfE6-k%2B5Tl-A%2B0t%2BCz%3D\");\n\t\tassertTrue(client.getCookieStore().getCookies().size() == 0);\n\t}\n\t\n\t@Test\n\tpublic void testLoginToGoogleAppEngineFromString() throws Exception {\n\t\tString login = LogonHelper.loginToGoogleAppEngine(\"root\", \"test:\", \"dummy.txt\");\n\t\tassertEquals(TEST_USERNAME + \" : \" + TEST_PASSWORD, login);\n\t}\n\t\n\t@Test\n\tpublic",
            "finish_reason": "length"
        }
    ],
    "id": "6ba2ff4a-a9df-4224-a37b-7bd18db78457",
    "prompt_id": "/EvoSuiteBenchmark/original/67_gae-app-manager/src/main/java/net/sf/gaeappmanager/google/LogonHelper.java",
    "original_code": "// LogonHelper.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\n\n/**\n * Google login helper.\n *\n * Based on work of Cheers Geoff.\n *\n * http://groups.google.com/group/google-appengine\n * -java/browse_thread/thread/c96d4fff73117e1d?pli=1\n *\n * @author Alois Belaska\n */\npublic class LogonHelper {\n\n    /**\n     * Returns the ACSID string to be set as the Cookie field in the request\n     * header.\n     *\n     * @param userid\n     *            full gmail address for user\n     * @param password\n     *            password\n     * @param source\n     *            name of application requesting quota details\n     * @return the ACSID field value\n     * @throws Exception\n     *             if any error occurs getting the ACSID\n     */\n    public static String loginToGoogleAppEngine(String userid, String password, String source) throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            List<NameValuePair> nvps = new ArrayList<NameValuePair>();\n            nvps.add(new BasicNameValuePair(\"accountType\", \"HOSTED_OR_GOOGLE\"));\n            nvps.add(new BasicNameValuePair(\"Email\", userid));\n            nvps.add(new BasicNameValuePair(\"Passwd\", password));\n            nvps.add(new BasicNameValuePair(\"service\", \"ah\"));\n            nvps.add(new BasicNameValuePair(\"source\", source));\n            HttpPost post = new HttpPost(\"https://www.google.com/accounts/ClientLogin\");\n            post.setEntity(new UrlEncodedFormEntity(nvps, HTTP.UTF_8));\n            HttpResponse response = client.execute(post);\n            if (response.getStatusLine().getStatusCode() != 200) {\n                throw new Exception(\"Error obtaining ACSID\");\n            }\n            String authToken = getAuthToken(response.getEntity().getContent());\n            post.abort();\n            HttpGet get = new HttpGet(\"https://appengine.google.com/_ah/login?auth=\" + authToken);\n            response = client.execute(get);\n            for (Cookie cookie : client.getCookieStore().getCookies()) {\n                if (cookie.getName().startsWith(\"ACSID\")) {\n                    return cookie.getValue();\n                }\n            }\n            get.abort();\n            throw new Exception(\"Did not find ACSID cookie\");\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n\n    private static String getAuthToken(InputStream inputStream) throws Exception {\n        LineNumberReader reader = new LineNumberReader(new BufferedReader(new InputStreamReader(inputStream)));\n        String line = reader.readLine();\n        while (line != null) {\n            line = line.trim();\n            if (line.startsWith(\"Auth=\")) {\n                return line.substring(5);\n            }\n            line = reader.readLine();\n        }\n        throw new Exception(\"Could not find Auth token\");\n    }\n\n    private LogonHelper() {\n    }\n}\n",
    "test_prompt": "// LogonHelperTest.java\npackage net.sf.gaeappmanager.google;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.cookie.Cookie;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.protocol.HTTP;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link LogonHelper}.\n* It contains one unit test case for the {@link LogonHelper#loginToGoogleAppEngine(String, String, String)} method.\n*/\nclass LogonHelperTest {",
    "time_taken": 34.40982961654663,
    "usage": {
        "prompt_tokens": 1255
    }
}
]