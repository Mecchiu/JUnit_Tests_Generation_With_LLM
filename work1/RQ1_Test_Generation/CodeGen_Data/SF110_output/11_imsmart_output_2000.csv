ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
8184a5d2-73cd-4316-956d-2741403a5226,/EvoSuiteBenchmark/original/11_imsmart/src/main/java/com/imsmart/servlet/HTMLFilter.java,52.04851412773132,stop,"// HTMLFilter.java
/*
* Licensed to the Apache Software Foundation (ASF) under one or more
* contributor license agreements.  See the NOTICE file distributed with
* this work for additional information regarding copyright ownership.
* The ASF licenses this file to You under the Apache License, Version 2.0
* (the ""License""); you may not use this file except in compliance with
* the License.  You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an ""AS IS"" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package com.imsmart.servlet;

/**
 * HTML filter utility.
 *
 * @author Craig R. McClanahan
 * @author Tim Tye
 * @version $Revision: 467217 $ $Date: 2006-10-24 05:14:34 +0200 (mar., 24 oct. 2006) $
 */
public final class HTMLFilter {

    /**
     * Filter the specified message string for characters that are sensitive
     * in HTML.  This avoids potential attacks caused by including JavaScript
     * codes in the request URL that is often reported in error messages.
     *
     * @param message The message string to be filtered
     */
    public static String filter(String message) {
        if (message == null)
            return (null);
        char[] content = new char[message.length()];
        message.getChars(0, message.length(), content, 0);
        StringBuffer result = new StringBuffer(content.length + 50);
        for (int i = 0; i < content.length; i++) {
            switch(content[i]) {
                case '<':
                    result.append(""&lt;"");
                    break;
                case '>':
                    result.append(""&gt;"");
                    break;
                case '&':
                    result.append(""&amp;"");
                    break;
                case '""':
                    result.append(""&quot;"");
                    break;
                default:
                    result.append(content[i]);
            }
        }
        return (result.toString());
    }
}
","// HTMLFilterTest.java
package com.imsmart.servlet;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HTMLFilter}.
* It contains one unit test case for the {@link HTMLFilter#filter(String)} method.
*/
class HTMLFilterTest {","// HTMLFilterTest.java
package com.imsmart.servlet;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link HTMLFilter}.
* It contains one unit test case for the {@link HTMLFilter#filter(String)} method.
*/
class HTMLFilterTest {
/**
		* String with the filter test as parameters.
		*/
	public final String testString = ""<HTML><B>Hello, I'm </B>"" +
	""<b>World!</b></HTML>"";
	/**
	* String with the filter test as result.
	*/
	public final String testResult = ""This content is "" +
	""HTML filtered by HTMLFilter"";




  /**
   * Test method for {@link HTMLFilter#filter(String)}.
   */
  @Test
  public final void testFilter() {
    assertTrue (filter(testString)!= null);
    assertTrue (filter(testString) + ""!= Test."",
      filter(testString).equals(testResult));
  }
}


"
