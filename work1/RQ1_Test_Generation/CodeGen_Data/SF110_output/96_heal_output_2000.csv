ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
50e1d74a-b6b2-4ed2-b6b2-4c37202429ef,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/approver/ModifyApprovalQueueEntryAction.java,38.80773949623108,length,"// ModifyApprovalQueueEntryAction.java
package org.heal.servlet.approver;

import org.heal.module.catalog.QueueDAO;
import org.heal.module.catalog.QueuedRecordBean;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * Modifies an approval queue entry.
 *
 * @author Brad Schaefer (<A HREF=""mailto:schaefer@lib.med.utah.edu"">schaefer@lib.med.utah.edu</A>)
 */
public class ModifyApprovalQueueEntryAction implements Action {

    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        final String approvalQueueEntryId = request.getParameter(""approvalQueueEntryId"");
        final String status = request.getParameter(""status"");
        if (false == AuthenticationTools.isApprover(request) || null == approvalQueueEntryId || null == status) {
            // The user does not have the access to view this page
            // or an Approval Queue entry id or status is missing
            // so we go no further, and redirect them to an access denied page
            // TODO instead of hardcoding page locations, this should be in config files somewhere
            response.sendRedirect(""/error/accessDenied.jsp"");
            return;
        }
        // Creates an QueuedRecordBean based on the form data
        final QueuedRecordBean approvalEntry = new QueuedRecordBean();
        approvalEntry.setQueuedRecordId(approvalQueueEntryId);
        approvalEntry.setComments(request.getParameter(""comment""));
        approvalEntry.getShortMetadata().setMetadataId(request.getParameter(""metadataId""));
        approvalEntry.setStatus(status);
        final QueueDAO queueManager = (QueueDAO) servlet.getServletContext().getAttribute(""QueueDAO"");
        final String statusTest = status.toLowerCase();
        if (""waiting"".equals(statusTest)) {
            // If the status is 'waiting', then we just save the approval queue entry
            approvalEntry.setType(QueueDAO.TYPE_APPROVAL);
            queueManager.saveQueuedRecord(approvalEntry);
        } else if (""approved"".equals(statusTest)) {
            approvalEntry.setType(QueueDAO.TYPE_CATALOG);
            approvalEntry.setStatus(""Waiting"");
            queueManager.markRecordApproved(approvalEntry.getShortMetadata().getMetadataId());
            queueManager.saveQueuedRecord(approvalEntry);
        } else if (""rejected"".equals(statusTest)) {
            // If the status is 'rejected', we mark it as such in the database
            queueManager.rejectRecord(approvalEntry.getShortMetadata().getMetadataId());
            queueManager.dequeue(approvalEntry.getQueuedRecordId());
        }
        // TODO instead of hardcoding page locations, this should be in config files somewhere
        response.sendRedirect(""showApprovalQueue"");
    }

    /**
     * @return <code>true</code>
     */
    public boolean actionRequiresLogin() {
        return true;
    }
}
","// ModifyApprovalQueueEntryActionTest.java
package org.heal.servlet.approver;

import org.heal.module.catalog.QueueDAO;
import org.heal.module.catalog.QueuedRecordBean;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifyApprovalQueueEntryAction}.
* It contains one unit test case for the {@link ModifyApprovalQueueEntryAction#actionRequiresLogin()} method.
*/
class ModifyApprovalQueueEntryActionTest {","// ModifyApprovalQueueEntryActionTest.java
package org.heal.servlet.approver;

import org.heal.module.catalog.QueueDAO;
import org.heal.module.catalog.QueuedRecordBean;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifyApprovalQueueEntryAction}.
* It contains one unit test case for the {@link ModifyApprovalQueueEntryAction#actionRequiresLogin()} method.
*/
class ModifyApprovalQueueEntryActionTest {
// ModifyApprovalQueueEntryAction.java
package org.heal.servlet.approver;

import org.heal.module.catalog.QueueDAO;
import org.heal.module.catalog.QueuedRecordBean;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * Modifies an approval queue entry.
 *
 * @author Brad Schaefer (<A HREF=""mailto:schaefer@lib.med.utah.edu"">schaefer@lib.med.utah.edu</A>)
 */
public class ModifyApprovalQueueEntryAction implements Action {

    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        final String approvalQueueEntryId = request.getParameter(""approvalQueueEntryId"");
        final String status = request.getParameter(""status"");
        if (false == AuthenticationTools.isApprover(request) || null == approvalQueueEntryId || null == status) {
            // The user does not have the access to view this page
            // or an Approval Queue entry id or status is missing
            // so we go no further, and redirect them to an access denied page
            // TODO instead of hardcoding page locations, this should be in config files somewhere
            response.sendRedirect(""/error/accessDenied.jsp"");
            return;
        }
        // Creates an QueuedRecordBean based on the form data
        final QueuedRecordBean approvalEntry = new QueuedRecordBean();
        approvalEntry.setQueuedRecordId(approvalQueueEntryId);
        approvalEntry.setComments(request.getParameter(""comment""));
        approvalEntry.getShortMetadata().setMetadataId(request.getParameter(""metadataId""));
        approvalEntry.setStatus(status);
        final QueueDAO queueManager = (QueueDAO) servlet.getServletContext().getAttribute(""QueueDAO"");
        final String statusTest = status.toLowerCase();
        if (""waiting"".equals(statusTest)) {
            // If the status is 'waiting', then we just save the approval queue entry
            approvalEntry.setType(QueueDAO.TYPE_APPROVAL);
            queueManager.saveQueuedRecord(approvalEntry);
        } else if (""approved"".equals(statusTest)) {
            approvalEntry.setType(QueueDAO.TYPE_CATALOG);
            approvalEntry.setStatus(""Waiting"");
            queueManager.markRecordApproved(approvalEntry.getShortMetadata().getMetadataId());
            queueManager.saveQueuedRecord(approvalEntry);
        } else if (""rejected"".equals(statusTest)) {
            // If the status is'rejected', we mark it as such in the database
            queueManager.rejectRecord(approvalEntry.getShortMetadata().getMetadataId());
            queueManager.dequeue(approvalEntry.getQueuedRecordId());
        }
        // TODO instead of hardcoding page locations, this should be in config files somewhere
        response.sendRedirect(""showApprovalQueue"");
    }

    /**
     * @return <code>true</code>
     */
    public boolean actionRequiresLogin() {
        return true;
    }
}

// ModifyApprovalQueueEntryActionTest.java
package org.heal.servlet.approver;

import org.heal.module.catalog.QueueDAO;
import org.heal.module.catalog.QueuedRecordBean;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifyApprovalQueueEntryAction}.
* It contains one unit test case for the {@link ModifyApprovalQueueEntryAction#actionRequiresLogin()} method.
*/
class ModifyApprovalQueueEntryActionTest {
		
	/** The action that does the modification on the catalog and queue records. */
	private ModifyApprovalQueueEntryAction action;
	
    static {  
        AuthenticationTools.setDefaultRealm(""defaultCATALOG"");
    }
			
	
	/**
	 * @param action the action that does the modification on the catalog and queue records.
	 */
	public ModifyApprovalQueueEntryActionTest(ModifyApprovalQueueEntryAction action) {
		this.action = action;
	}
	
	/**
	 * {@link #isAccessDenied(HttpServletRequest) isAccessDenied()} should return <code>true</code>.
	 * @throws ServletException
	 * @throws IOException
	 * @see ModifyApprovalQueueEntryAction#actionRequiresLogin()
	 */
	@Test
	public void testIsAccessDeniedCATALOG() throws ServletException, IOException {
		// This just checks a couple of things that are expected to happen

        action.actionRequiresLogin();
		assertFalse(""There should not be a catalog access denied in the application"", AuthenticationTools.isAccessDenied(null));
		assertFalse(""The access is denied if there isn't a catalog access denied in the application"", AuthenticationTools.isAccessDenied(new HttpServletRequest()));
	}
	
	/**
	 * {@link #isApprovalPicked(HttpServletRequest, QueuedRecordBean) isApprovalPicked()} should return <code>true</code>.
	 * @throws ServletException
	 * @throws IOException
	 * @see ModifyApprovalQueueEntryAction#actionRequiresLogin()
	 */
	@Test
	public void testIsApprovalPickedCATALOG() throws ServletException, IOException {
		// this just checks a couple of things that are expected to happen

		QueueDAO queueManager = QueueDAO.getInstance(LoginTests.authenticationTools).getQueueDAO();
		QueuedRecordBean approvedByUser = queueManager.markRecordApproved(""approvedByUsr"");
		QueueDAO queueManager1 = QueueDAO.getInstance(LoginTests.authenticationTools).getQueueDAO();
		assertTrue(""Queue should be visible and has approved items"", queueManager.isQueueVisible(""approvedByUsr""));
		assertFalse(""Queue should not be visible after approval"", queueManager1.isQueueVisible(""approvedByUsr""));
		QueueDAO approvedQueue = queueManager.markRecordApproved(approvedByUser.getShortMetadata().getMetadataId());
		assertTrue(""Queue should be visible and has approved items"", queueManager.isQueueVisible(""approvedByUsr""));
		assertTrue(""Queue should be approved"", queueManager1.isQueueApproved(""approvedByUsr""));
		assertFalse(""Queue should not be visible after approval"", queueManager1.isQueueVisible(""approvedByUsr""));
	}

	/**
	 * {@link #isApprovalRecovered(HttpServletRequest, QueuedRecordBean) isApprovalRecovered()} should return <code>true</code>.
	 * @throws ServletException
	 * @throws IOException
	 * @see ModifyApprovalQueueEntryAction#actionRequiresLogin()
	 */
	@Test
	public void testIsApprovalRecoveredCATALOG() throws ServletException, IOException {
		// this just checks a couple of things that are expected to happen

		QueueDAO queueManager = QueueDAO.getInstance(LoginTests.authenticationTools).getQueueDAO();
		QueuedRecordBean approvedByUser = queueManager.markRecordApproved(""approvedByUsr"");
		QueuedRecordBean approvedByServer = queueManager.markRecordApproved(""approvedByServer"");
		assertTrue(""Queue should be visible and has approved items"", queueManager.isQueueVisible(""approvedByUsr""));
"
43287184-c547-4eda-b98c-2d7f9624c68c,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/approver/ShowApprovalQueueAction.java,38.584914207458496,stop,"// ShowApprovalQueueAction.java
package org.heal.servlet.approver;

import org.heal.module.catalog.QueueDAO;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
 * An {@link org.heal.servlet.Action} which fetches the information needed to
 * display the approval queue.
 *
 * @author Brad Schaefer (<A HREF=""mailto:schaefer@lib.med.utah.edu"">schaefer@lib.med.utah.edu</A>)
 */
public class ShowApprovalQueueAction implements Action {

    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        if (false == AuthenticationTools.isApprover(request)) {
            // The user does not have the access to view this page
            // so we go no further, and redirect them to an access denied page
            // TODO instead of hardcoding page locations, this should be in config files somewhere
            response.sendRedirect(""/error/accessDenied.jsp"");
            return;
        }
        final QueueDAO queueManager = (QueueDAO) servlet.getServletContext().getAttribute(""QueueDAO"");
        final List queue = queueManager.getApprovalQueue();
        request.setAttribute(""approvalQueue"", queue);
        // TODO instead of hardcoding page locations, this should be in config files somewhere
        RequestDispatcher rd = request.getRequestDispatcher(""/approval/viewqueue.jsp"");
        rd.forward(request, response);
    }

    /**
     * @return <code>true</code>
     */
    public boolean actionRequiresLogin() {
        return true;
    }
}
","// ShowApprovalQueueActionTest.java
package org.heal.servlet.approver;

import org.heal.module.catalog.QueueDAO;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ShowApprovalQueueAction}.
* It contains one unit test case for the {@link ShowApprovalQueueAction#actionRequiresLogin()} method.
*/
class ShowApprovalQueueActionTest {","// ShowApprovalQueueActionTest.java
package org.heal.servlet.approver;

import org.heal.module.catalog.QueueDAO;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ShowApprovalQueueAction}.
* It contains one unit test case for the {@link ShowApprovalQueueAction#actionRequiresLogin()} method.
*/
class ShowApprovalQueueActionTest {

	@org.junit.jupiter.api.Test
	void testWithoutLogin() throws IOException, ServletException {
		assertNotNull(QueueDAO.dao);
		assertNotNull(QueueDAO.dao.findApprovalQueue());
	}


	@org.junit.jupiter.api.Test
	void testWithAuthentification() throws IOException, ServletException {
		assertNotNull(QueueDAO.dao);
		assertNotNull(QueueDAO.dao.findApprovalQueue());

		AuthenticationTools.authenticate(SessionUtils.getCurrentJwt(request));
		verifyRequest();
	}


	@org.junit.jupiter.api.Test
	void testWithAuthentificationAndWrongPassword() throws IOException, ServletException {
		assertNotNull(QueueDAO.dao);
		assertNotNull(QueueDAO.dao.findApprovalQueue());

		AuthenticationTools.authenticate(SessionUtils.getCurrentJwt(request), ""wrongpasswd"");
		fail();
	}


	@Test
	void testWithSimpleAccessDeniedException() throws IOException, ServletException {
		assertNotNull(QueueDAO.dao);
		final List approvalQueue = QueueDAO.dao.getApprovalQueue();
		assertNotNull(approvalQueue);
		assertTrue(approvalQueue.isEmpty());

		// try {
			Thread.sleep(30000l);
		// } catch (InterruptedException e) { fail(e.getMessage()); }
	}


	@Test
	void testWithSimpleAccessDeniedExceptionWithEmptyQueue() throws IOException, ServletException {
		assertNotNull(QueueDAO.dao);
		final List approvalQueue = QueueDAO.dao.getApprovalQueue();
		assertNotNull(approvalQueue);
		assertNotEquals(approvalQueue.size(), 0);

		// try {
			Thread.sleep(30000l);
		// } catch (InterruptedException e) { fail(e.getMessage()); }
	}


	@Test
	void testWithSimpleAccessDeniedExceptionWithOverLimit() throws IOException, ServletException {
		assertNotNull(QueueDAO.dao);
		final List approvalQueue = QueueDAO.dao.getApprovalQueue();
		assertNotNull(approvalQueue);
		assertFalse(approvalQueue.isEmpty());
		assertTrue(approvalQueue.size() > 10000);
		assertNotEquals(approvalQueue.size(), 0);

		//
		List approvalQueue = QueueDAO.dao.getApprovalQueue();
		
		int size = approvalQueue.size();
		// the number of apps that have been marked to be active since the last time the app was marked
		int approvalStart = queueManager.getApprovalState(approvalQueue.get(0)).getActiveAppCount() - 1;
		// set up
		advanceApprovalQueue(approvalQueue, approvalStart);
		assertTrue(queueManager.getApprovalState(approvalQueue.get(approvalQueue.size() - 1)).getActiveAppCount() == approvalStart);

		// try {
			Thread.sleep(30000l);
		// } catch (InterruptedException e) { fail(e.getMessage()); }
	}


	@Test
	void testWithSimpleAccessDeniedExceptionAndWrongApprovalQueueOrderAsc() throws IOException, ServletException {
		assertNotNull(QueueDAO.dao);
		final List approvalQueue = QueueDAO.dao.getApprovalQueue();
		assertNotNull(approvalQueue);
		assertTrue(approvalQueue.isEmpty());

		//
		List approvalQueue = QueueDAO.dao.getApprovalQueue();
		advanceApprovalQueue(approvalQueue, approvalQueue.size() - 1);
		assertTrue(approvalQueue.size() == 0);

	}


	void advanceApprovalQueue(List approvalQueue, int i) {
		for (int j = 0; j < i && i > 0; j++) {
			approvalQueue.add(approvalQueue.get(i - 1));
		}
	}
}
"
5162a9ba-9b3e-4f41-acd6-0030614854fc,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/EditContextURLAction.java,48.39878988265991,stop,"// EditContextURLAction.java
package org.heal.servlet.cataloger;

import org.heal.servlet.Action;
import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.ContextURLBean;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import java.io.IOException;
import java.util.Iterator;

/**
 * An {@link Action} which is called to edit a Context URL.  If
 * there isn't an existing Context URL which can be found to edit,
 * we assume that a new Context URL should be edited.
 */
public class EditContextURLAction implements Action {

    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        // We skip the usual authentication-checking stuff since this
        // already should've been done by ModifyMetadataAction
        final CompleteMetadataBean cmb = (CompleteMetadataBean) request.getSession().getAttribute(""metadata"");
        final String selectedId = request.getParameter(""selectedId"");
        // This shouldn't be necessary, but it won't hurt to check
        if (null == cmb || null == selectedId) {
            response.sendRedirect(""/error/accessDenied.jsp"");
            return;
        }
        ContextURLBean cubToEdit = new ContextURLBean();
        for (Iterator iter = cmb.getContextURLs().iterator(); iter.hasNext(); ) {
            ContextURLBean testCub = (ContextURLBean) iter.next();
            if (testCub.getContextURLId().equals(selectedId)) {
                cubToEdit = testCub;
                break;
            }
        }
        request.setAttribute(""ContextURLBean"", cubToEdit);
        RequestDispatcher rd = request.getRequestDispatcher(""/catalog/editContextURL.jsp"");
        rd.forward(request, response);
    }

    /**
     * @return <code>true</code>
     */
    public boolean actionRequiresLogin() {
        return true;
    }
}
","// EditContextURLActionTest.java
package org.heal.servlet.cataloger;

import org.heal.servlet.Action;
import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.ContextURLBean;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import java.io.IOException;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EditContextURLAction}.
* It contains one unit test case for the {@link EditContextURLAction#actionRequiresLogin()} method.
*/
class EditContextURLActionTest {","// EditContextURLActionTest.java
package org.heal.servlet.cataloger;

import org.heal.servlet.Action;
import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.ContextURLBean;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import java.io.IOException;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EditContextURLAction}.
* It contains one unit test case for the {@link EditContextURLAction#actionRequiresLogin()} method.
*/
class EditContextURLActionTest {
/**
		* Test case which tests the behaviour of the {@link EditContextURLAction#perform(HttpServletRequest, HttpServletResponse)} method.
		*/
		@Test public void test_perform_requiresLogin() throws ServletException, IOException {
			HttpServlet servlet = new HttpServlet() {
				@Override
				protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException {
					// TODO Auto-generated method stub
				}
			};
			EditContextURLAction editcontextURLAction = new EditContextURLAction();
			Iterator it = editcontextURLAction.getContextURLBean().getMetadataBean().getContextURLs().iterator();
			while (it.hasNext()) {
				ContextURLBean testCub = (ContextURLBean) it.next();
				if (!editcontextURLAction.actionRequiresLogin() &&!testCub.getContextURLId().equals("""")) {
					break;
				}
			}
			assertFalse(editcontextURLAction.actionRequiresLogin());
		}

		/**
		* Test case which tests the behaviour of the {@link EditContextURLAction#action(HttpServletRequest, HttpServletResponse)} method.
		*/
		@Test public void test_action_allowsLogin() throws ServletException, IOException {
			HttpServlet servlet = new HttpServlet() {
				@Override
				protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException {
					// TODO Auto-generated method stub
				}
			};
			EditContextURLAction editcontextURLAction = new EditContextURLAction();
			try {
				editcontextURLAction.action(req, resp);
			} catch (final ServletException se) {
				if (!editcontextURLAction.actionRequiresLogin()) {
					throw se;
				}
			}
		}
}"
2c2dd6a8-0cbb-47be-9cb6-462e99699e4a,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/ModifyMetadataAction.java,27.884650468826294,length,"// ModifyMetadataAction.java
package org.heal.servlet.cataloger;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

/**
 * <p>An {@link Action} that saves the metadata from a form into
 * the session's {@link CompleteMetadataBean} by mapping {@link MetadataModifier}s
 * to forms.  The {@link MetadataModifier} which matches the form determines
 * the next {@link Action} to execute.</p>
 *
 * <p>The mapping is currently defined as:</p>
 *
 * <ul><li>'metadata' : {@link MetadataRecordModifier}
 * <li>'contextURL' : {@link ContextURLRecordModifier}
 * <li>'contributor' : {@link ContributorRecordModifier}
 * <li>'copyrightHolder' : {@link CopyrightHolderRecordModifier}
 * <li>'controlledVocabulary' : {@link ControlledVocabularyRecordModifier}
 * <li>'requirement' : {@link RequirementRecordModifier}
 * </ul>
 */
public class ModifyMetadataAction implements Action {

    private final Map modifierMap;

    public ModifyMetadataAction() {
        // Initializes the action map
        Map modifierMap = new HashMap();
        modifierMap.put(""metadata"", new MetadataRecordModifier());
        modifierMap.put(""contextURL"", new ContextURLRecordModifier());
        modifierMap.put(""contributor"", new ContributorRecordModifier());
        modifierMap.put(""copyrightHolder"", new CopyrightHolderRecordModifier());
        modifierMap.put(""controlledVocabulary"", new ControlledVocabularyRecordModifier());
        modifierMap.put(""requirement"", new RequirementRecordModifier());
        modifierMap.put(""relation"", new RelationRecordModifier());
        modifierMap.put(""metametadataIdentifier"", new MetametadataIdentifierRecordModifier());
        modifierMap.put(""metametadataContributor"", new MetametadataContributorRecordModifier());
        // This guarantees that the action map will not be modified after initialization
        this.modifierMap = Collections.unmodifiableMap(modifierMap);
    }

    /**
     * <p>This perform method uses the <code>""type""</code> parameter to save the
     * metadata modifications from the <code>request</code> in the
     * {@link CompleteMetadataBean} that is in the session.  If the type or
     * <code>CompleteMetadataBean</code> doesn't exist, the <code>response</code> is
     * redirected to an error page.</o>
     *
     * <p>When a valid type and a <code>CompleteMetadataBean</code> is available
     * in the session, this method uses the appropriate {@link MetadataModifier}
     * to save the motifications to the metadata and to perform the subsequent
     * {@link Action}.</p>
     */
    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        if (!AuthenticationTools.isCataloger(request)) {
            // The user does not have the access to view this page
            // so we go no further, and redirect them to an access denied page
            // TODO instead of hardcoding page locations, this should be in config files somewhere
            response.sendRedirect(""/error/accessDenied.jsp"");
            return;
        }
        final String modifierKey = request.getParameter(""type"");
        final CompleteMetadataBean cmb = (CompleteMetadataBean) request.getSession().getAttribute(""metadata"");
        if (null == cmb || !modifierMap.containsKey(modifierKey)) {
            // Not enough information in the form and/or session to process this request
            response.sendRedirect(""/error/accessDenied.jsp"");
            return;
        }
        final MetadataModifier modifier = (MetadataModifier) modifierMap.get(modifierKey);
        modifier.updateMetadata(cmb, request);
        Action nextAction = modifier.getNextAction(request);
        nextAction.perform(servlet, request, response);
    }

    /**
     * @return <code>true</code>
     */
    public boolean actionRequiresLogin() {
        return true;
    }
}
","// ModifyMetadataActionTest.java
package org.heal.servlet.cataloger;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifyMetadataAction}.
* It contains one unit test case for the {@link ModifyMetadataAction#actionRequiresLogin()} method.
*/
class ModifyMetadataActionTest {","// ModifyMetadataActionTest.java
package org.heal.servlet.cataloger;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifyMetadataAction}.
* It contains one unit test case for the {@link ModifyMetadataAction#actionRequiresLogin()} method.
*/
class ModifyMetadataActionTest {
// ModifyMetadataAction.java
package org.heal.servlet.cataloger;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

/**
 * <p>An {@link Action} that saves the metadata from a form into
 * the session's {@link CompleteMetadataBean} by mapping {@link MetadataModifier}s
 * to forms.  The {@link MetadataModifier} which matches the form determines
 * the next {@link Action} to execute.</p>
 *
 * <p>The mapping is currently defined as:</p>
 *
 * <ul><li>'metadata' : {@link MetadataRecordModifier}
 * <li>'contextURL' : {@link ContextURLRecordModifier}
 * <li>'contributor' : {@link ContributorRecordModifier}
 * <li>'copyrightHolder' : {@link CopyrightHolderRecordModifier}
 * <li>'controlledVocabulary' : {@link ControlledVocabularyRecordModifier}
 * <li>'requirement' : {@link RequirementRecordModifier}
 * </ul>
 */
public class ModifyMetadataAction implements Action {

    private final Map modifierMap;

    public ModifyMetadataAction() {
        // Initializes the action map
        Map modifierMap = new HashMap();
        modifierMap.put(""metadata"", new MetadataRecordModifier());
        modifierMap.put(""contextURL"", new ContextURLRecordModifier());
        modifierMap.put(""contributor"", new ContributorRecordModifier());
        modifierMap.put(""copyrightHolder"", new CopyrightHolderRecordModifier());
        modifierMap.put(""controlledVocabulary"", new ControlledVocabularyRecordModifier());
        modifierMap.put(""requirement"", new RequirementRecordModifier());
        modifierMap.put(""relation"", new RelationRecordModifier());
        modifierMap.put(""metametadataIdentifier"", new MetametadataIdentifierRecordModifier());
        modifierMap.put(""metametadataContributor"", new MetametadataContributorRecordModifier());
        // This guarantees that the action map will not be modified after initialization
        this.modifierMap = Collections.unmodifiableMap(modifierMap);
    }

    /**
     * <p>This perform method uses the <code>""type""</code> parameter to save the
     * metadata modifications from the <code>request</code> in the
     * {@link CompleteMetadataBean} that is in the session.  If the type or
     * <code>CompleteMetadataBean</code> doesn't exist, the <code>response</code> is
     * redirected to an error page.</o>
     *
     * <p>When a valid type and a <code>CompleteMetadataBean</code> is available
     * in the session, this method uses the appropriate {@link MetadataModifier}
     * to save the motifications to the metadata and to perform the subsequent
     * {@link Action}.</p>
     */
    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        if (!AuthenticationTools.isCataloger(request)) {
            // The user does not have the access to view this page
            // so we go no further, and redirect them to an access denied page
            // TODO instead of hardcoding page locations, this should be in config files somewhere
            response.sendRedirect(""/error/accessDenied.jsp"");
            return;
        }
        final String modifierKey = request.getParameter(""type"");
        final CompleteMetadataBean cmb = (CompleteMetadataBean) request.getSession().getAttribute(""metadata"");
        if (null == cmb ||!modifierMap.containsKey(modifierKey)) {
            // Not enough information in the form and/or session to process this request
            response.sendRedirect(""/error/accessDenied.jsp"");
            return;
        }
        final MetadataModifier modifier = (MetadataModifier) modifierMap.get(modifierKey);
        modifier.updateMetadata(cmb, request);
        Action nextAction = modifier.getNextAction(request);
        nextAction.perform(servlet, request, response);
    }

    /**
     * @return <code>true</code>
     */
    public boolean actionRequiresLogin() {
        return true;
    }
}

// ModifyMetadataActionTest.java
package org.heal.servlet.cataloger;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifyMetadataAction}.
* It contains one unit test case for the {@link ModifyMetadataAction#actionRequiresLogin()} method.
*/
class ModifyMetadataActionTest {
		private final Map modifierMap;

			/**
			 * <p>Constructs an instance of {@link ModifyMetadataActionTest} with the name
			 * of the class and to which the {@link ModifyMetadataAction} it must use.
			 * 
			 * <p>The name is the type of the <code>CatalogingTest</code> class to which the
			 * ModicateMetadataAction must be applied.</p>
			 * 
			 * @param catalog
			 */
	ModifyMetadataActionTest(Class<?> catalog) {
		this.modifierMap =
			new HashMap<String, Map<String,?>>();
		Map<String, Object> properties = catalog.getProperties();
		for (Map.Entry<String, Object> property : properties.entrySet()) {
			String propertyKey = property.getKey();
			Map<String,?> valueMapping = (Map)property.getValue();
			this.modifierMap.put(catalog.getSimpleName() + '.' + propertyKey, valueMapping);
		}
	}

	@Test
	void testNoParameterMappings() throws ServletException, IOException {
		Action action = ModifyMetadataAction.instance();
		StringBuilder cb = new StringBuilder(512);
		cb.append(""&type=modifyMetadata"");
		String nextAction = action.getNextAction(null);
		Map<String,?> params =
			Collections.singletonMap(""type"", cb.toString()).getEntry(nextAction);
		assertFalse(""next action contains parameters"", params == null);
		ParameterMappingActionParams paramMappingAction = (ParameterMappingActionParams) params.get(""type"");
		assertTrue(paramMappingAction.getActionNeeded(nextAction).equals(this.modifyMetadataAction));
		assertTrue(""hasNextAction does not return null"", paramMappingAction.hasNextAction());
		Action nextAction1 = paramMappingAction.getNextAction(nextAction);
		assertNull(nextAction1);
		Map<String, Object> cb2 = new HashMap<String, Object>();
		Map<String,?> paramMapping1 =
			Collections.singletonMap(""type"", cb2).getEntry(""modifyMetadata"");
		assertNull(""hasNextAction returns first parameter"", paramMapping1.get(""nextAction""));

		// The test action should not return the parameters and never be executed after
		// it and should return the first parameter
		action = nextAction1;
		cb = new StringBuilder(512);
		cb.append(""&type=modifyMetadata"");"
e0c9f708-71c9-49c1-867d-b39fc4ac9e0c,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/SaveMetadataAction.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// SaveMetadataAction.java
package org.heal.servlet.cataloger;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.MetadataDAO;
import org.heal.module.metadata.ContextURLBean;
import org.heal.module.metadata.CopyrightHolderBean;
import org.heal.module.metadata.ContributorBean;
import org.heal.module.metadata.TaxonPathBean;
import org.heal.module.metadata.TaxonBean;
import org.heal.module.metadata.RequirementBean;
import org.heal.module.metadata.RelationBean;
import org.heal.module.metadata.MetametadataIdentifierBean;
import org.heal.module.metadata.MetametadataContributorBean;
import org.heal.module.catalog.QueueDAO;
import org.heal.servlet.Action;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Iterator;

/**
 * An {@link org.heal.servlet.Action Action} used to save metadata
 * records.
 */
public class SaveMetadataAction implements Action {

    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        // We skip the usual authentication-checking stuff since this
        // already should've been done by ModifyMetadataAction
        final CompleteMetadataBean metadata = (CompleteMetadataBean) request.getSession().getAttribute(""metadata"");
        // This shouldn't be necessary, but it won't hurt to check
        if (null == metadata) {
            response.sendRedirect(""/error/accessDenied.jsp"");
            return;
        }
        // Makes a best effort to prevent the session metadata object from
        // being changed and then having a stale edit metadata form submitted,
        // which would save bad data
        final String metadataId = metadata.getMetadataId();
        final String formMetadataId = request.getParameter(""metadataId"");
        if (!(null == metadataId && 0 == formMetadataId.length()) && !formMetadataId.equals(metadataId)) {
            request.setAttribute(""reason"", ""Session metadataId doesn't match metadataId submitted with form."");
            RequestDispatcher rd = request.getRequestDispatcher(""/error/accessDenied.jsp"");
            rd.forward(request, response);
            return;
        }
        final MetadataDAO metadataServices = (MetadataDAO) servlet.getServletContext().getAttribute(""MetadataDAO"");
        scrubMetadata(metadata);
        try {
            metadataServices.saveEditMetadataForm(metadata);
        } catch (SQLException e) {
            throw new ServletException(e);
        }
        if (null == metadataId) {
            // This is a new record, so we add it to the approval queue
            final QueueDAO queueManager = (QueueDAO) servlet.getServletContext().getAttribute(""QueueDAO"");
            queueManager.enqueue(QueueDAO.TYPE_APPROVAL, metadata.getMetadataId());
        }
        request.getSession().setAttribute(""metadata"", null);
        response.sendRedirect(""showMetadata?metadataId="" + metadata.getMetadataId());
    }

    /**
     * Since we have been using negative numbers to give unique id's to
     * complicated metadata information, this method will turn all those
     * negative ids back to <code>null</code> values so that the metadata
     * gets saved correctly.
     *
     * @param cmb The {@link CompleteMetadataBean} to scrub.
     */
    private void scrubMetadata(CompleteMetadataBean cmb) {
        // scrubs Context URLs
        for (Iterator iter = cmb.getContextURLs().iterator(); iter.hasNext(); ) {
            final ContextURLBean cub = (ContextURLBean) iter.next();
            final String cubId = cub.getContextURLId();
            if (null != cubId && 0 > Integer.parseInt(cubId)) {
                cub.setContextURLId(null);
            }
        }
        // scrubs Contributors
        for (Iterator iter = cmb.getContributorList().iterator(); iter.hasNext(); ) {
            final ContributorBean cb = (ContributorBean) iter.next();
            final String cbId = cb.getContributorId();
            if (null != cbId && 0 > Integer.parseInt(cbId)) {
                cb.setContributorId(null);
            }
        }
        // scrubs Controlled Vocab
        for (Iterator iterOne = cmb.getTaxonPaths().iterator(); iterOne.hasNext(); ) {
            final TaxonPathBean tpb = (TaxonPathBean) iterOne.next();
            final String tpbId = tpb.getTaxonPathId();
            if (null != tpbId && 0 > Integer.parseInt(tpbId)) {
                tpb.setTaxonPathId(null);
            }
            for (Iterator iterTwo = tpb.getTaxons().iterator(); iterTwo.hasNext(); ) {
                final TaxonBean tb = (TaxonBean) iterTwo.next();
                final String tbId = tb.getTaxonId();
                if (null != tbId && 0 > Integer.parseInt(tbId)) {
                    tb.setTaxonId(null);
                }
            }
        }
        // scrubs Copyright holders
        for (Iterator iter = cmb.getCopyrightHolders().iterator(); iter.hasNext(); ) {
            final CopyrightHolderBean chb = (CopyrightHolderBean) iter.next();
            final String chbId = chb.getCopyrightHolderId();
            if (null != chbId && 0 > Integer.parseInt(chbId)) {
                chb.setCopyrightHolderId(null);
            }
        }
        // scrubs metametadata identifiers
        for (Object o : cmb.getMetametadataIdentifiers()) {
            final MetametadataIdentifierBean mib = (MetametadataIdentifierBean) o;
            final String mibId = mib.getMetametadataIdentifierId();
            if (null != mibId && 0 > Integer.parseInt(mibId)) {
                mib.setMetametadataIdentifierId(null);
            }
        }
        // scrubs metametadata contributors
        for (Object o : cmb.getMetametadataContributors()) {
            final MetametadataContributorBean mcb = (MetametadataContributorBean) o;
            final String mcbId = mcb.getMetametadataContributorId();
            if (null != mcbId && 0 > Integer.parseInt(mcbId)) {
                mcb.setMetametadataContributorId(null);
            }
        }
        // scrubs requirements
        for (Iterator iter = cmb.getRequirements().iterator(); iter.hasNext(); ) {
            final RequirementBean rb = (RequirementBean) iter.next();
            final String rbId = rb.getRequirementId();
            if (null != rbId && 0 > Integer.parseInt(rbId)) {
                rb.setRequirementId(null);
            }
        }
        // scrubs relations
        for (Iterator iter = cmb.getRelations().iterator(); iter.hasNext(); ) {
            final RelationBean rb = (RelationBean) iter.next();
            final String rbId = rb.getRelationId();
            if (null != rbId && 0 > Integer.parseInt(rbId)) {
                rb.setRelationId(null);
            }
        }
    }

    /**
     * @return <code>true</code>
     */
    public boolean actionRequiresLogin() {
        return true;
    }
}
","// SaveMetadataActionTest.java
package org.heal.servlet.cataloger;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.MetadataDAO;
import org.heal.module.metadata.ContextURLBean;
import org.heal.module.metadata.CopyrightHolderBean;
import org.heal.module.metadata.ContributorBean;
import org.heal.module.metadata.TaxonPathBean;
import org.heal.module.metadata.TaxonBean;
import org.heal.module.metadata.RequirementBean;
import org.heal.module.metadata.RelationBean;
import org.heal.module.metadata.MetametadataIdentifierBean;
import org.heal.module.metadata.MetametadataContributorBean;
import org.heal.module.catalog.QueueDAO;
import org.heal.servlet.Action;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SaveMetadataAction}.
* It contains one unit test case for the {@link SaveMetadataAction#actionRequiresLogin()} method.
*/
class SaveMetadataActionTest {","// SaveMetadataActionTest.java
package org.heal.servlet.cataloger;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.MetadataDAO;
import org.heal.module.metadata.ContextURLBean;
import org.heal.module.metadata.CopyrightHolderBean;
import org.heal.module.metadata.ContributorBean;
import org.heal.module.metadata.TaxonPathBean;
import org.heal.module.metadata.TaxonBean;
import org.heal.module.metadata.RequirementBean;
import org.heal.module.metadata.RelationBean;
import org.heal.module.metadata.MetametadataIdentifierBean;
import org.heal.module.metadata.MetametadataContributorBean;
import org.heal.module.catalog.QueueDAO;
import org.heal.servlet.Action;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SaveMetadataAction}.
* It contains one unit test case for the {@link SaveMetadataAction#actionRequiresLogin()} method.
*/
class SaveMetadataActionTest {
"
551ce695-5fc2-4218-98cd-87283dc20d7f,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/CreateMetadataAction.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// CreateMetadataAction.java
package org.heal.servlet.cataloger;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.MetadataDAO;
import org.heal.module.metadata.TaxonBean;
import org.heal.module.metadata.TaxonPathBean;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Method;
import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * An {@link Action} which creates a new metadata record to edit,
 * puts it into the session, and then directs the user to the editing
 * page.
 */
public class CreateMetadataAction implements Action {

    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        if (!AuthenticationTools.isCataloger(request)) {
            // The user does not have the access to view this page
            // so we go no further, and redirect them to an access denied page
            // TODO instead of hardcoding page locations, this should be in config files somewhere
            response.sendRedirect(""/error/accessDenied.jsp"");
            return;
        }
        final HttpSession session = request.getSession();
        CompleteMetadataBean cmb = (CompleteMetadataBean) session.getAttribute(""metadata"");
        if (null != cmb) {
            response.sendRedirect(""../catalog/concurrentMetadataEditError.jsp"");
            return;
        }
        final String metadataId = request.getParameter(""basedOnMetadataId"");
        if (null == metadataId) {
            cmb = new CompleteMetadataBean();
        } else {
            final MetadataDAO metadataServices = (MetadataDAO) servlet.getServletContext().getAttribute(""MetadataDAO"");
            try {
                cmb = metadataServices.getCompleteMetadata(metadataId);
            } catch (SQLException e) {
                throw new ServletException(e);
            }
            clearIds(cmb);
            cmb.setLocation(null);
            cmb.setCatalogDate(null);
            cmb.setApproveDate(null);
            if (null != cmb.getThumbnail()) {
                cmb.setThumbnail(null);
            }
            cmb.setFileSize(null);
            cmb.setFileHeight(null);
            cmb.setFileWidth(null);
        }
        cmb.setContributeDate(new Date());
        session.setAttribute(""metadata"", cmb);
        RequestDispatcher rd = request.getRequestDispatcher(""/healapp/editMetadata"");
        rd.forward(request, response);
    }

    /**
     * Since this {@link Action} creates <em>new</em> metadata records, we
     * must clear the ids from an existing {@link CompleteMetadataBean} that
     * this new record is based on.
     *
     * @param cmb
     */
    private static void clearIds(CompleteMetadataBean cmb) throws ServletException {
        cmb.setMetadataId(null);
        cmb.setGlobalId(null);
        clearIdsFromList(cmb.getContextURLs());
        clearIdsFromList(cmb.getContributorList());
        clearIdsFromList(cmb.getCopyrightHolders());
        clearIdsFromList(cmb.getCopyrights());
        clearIdsFromList(cmb.getDiseaseDiagnoses());
        clearIdsFromList(cmb.getFormats());
        clearIdsFromList(cmb.getKeywords());
        clearIdsFromList(cmb.getRelations());
        clearIdsFromList(cmb.getRequirements());
        clearIdsFromList(cmb.getTargetUserGroups());
        // Taxons/TaxonPaths need to be handled a bit differently since
        // they have an unusual association going on
        String nextTaxonId = ""-1"";
        String nextTaxonPathId = ""-1"";
        for (Iterator iterOne = cmb.getTaxonPaths().iterator(); iterOne.hasNext(); ) {
            final TaxonPathBean taxonPath = (TaxonPathBean) iterOne.next();
            taxonPath.setMetadataId(null);
            taxonPath.setTaxonPathId(nextTaxonPathId);
            for (Iterator iterTwo = taxonPath.getTaxons().iterator(); iterTwo.hasNext(); ) {
                final TaxonBean taxon = (TaxonBean) iterTwo.next();
                taxon.setTaxonId(nextTaxonId);
                taxon.setTaxonPathId(null);
                nextTaxonId = String.valueOf(Integer.parseInt(nextTaxonId) - 1);
            }
            nextTaxonPathId = String.valueOf(Integer.parseInt(nextTaxonPathId) - 1);
        }
    }

    private static void clearIdsFromList(List objects) throws ServletException {
        Map ids = new HashMap();
        for (Iterator iter = objects.iterator(); iter.hasNext(); ) {
            Object ob = iter.next();
            Method[] methods = ob.getClass().getMethods();
            for (int i = 0; i < methods.length; ++i) {
                final String methodName = methods[i].getName();
                Object[] args = new Object[1];
                if (""setMetadataId"".equals(methodName)) {
                    args[0] = null;
                } else if (methodName.matches(""^set.+Id"")) {
                    String id;
                    if (!ids.containsKey(methodName)) {
                        id = ""-1"";
                    } else {
                        id = String.valueOf(Integer.parseInt((String) ids.get(methodName)) - 1);
                    }
                    args[0] = id;
                    ids.put(methodName, id);
                } else {
                    continue;
                }
                Class[] parameters = methods[i].getParameterTypes();
                if (1 != parameters.length || !parameters[0].equals(String.class)) {
                    // Constructs method signature for error message
                    StringBuffer argString = new StringBuffer(""("");
                    for (int j = 0; j < parameters.length; ++j) {
                        argString.append(parameters[j].getName());
                        if (j < parameters.length - 1) {
                            argString.append("", "");
                        }
                    }
                    argString.append("")"");
                    throw new ServletException(""Unexpected setXXXId method found: "" + methodName + argString.toString());
                }
                try {
                    methods[i].invoke(ob, args);
                } catch (Exception e) {
                    throw new ServletException(e);
                }
            }
        }
    }

    /**
     * @return <code>true</code>
     */
    public boolean actionRequiresLogin() {
        return true;
    }
}
","// CreateMetadataActionTest.java
package org.heal.servlet.cataloger;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.MetadataDAO;
import org.heal.module.metadata.TaxonBean;
import org.heal.module.metadata.TaxonPathBean;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Method;
import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CreateMetadataAction}.
* It contains one unit test case for the {@link CreateMetadataAction#actionRequiresLogin()} method.
*/
class CreateMetadataActionTest {","// CreateMetadataActionTest.java
package org.heal.servlet.cataloger;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.MetadataDAO;
import org.heal.module.metadata.TaxonBean;
import org.heal.module.metadata.TaxonPathBean;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.lang.reflect.Method;
import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CreateMetadataAction}.
* It contains one unit test case for the {@link CreateMetadataAction#actionRequiresLogin()} method.
*/
class CreateMetadataActionTest {
"
6a8517a2-249e-425d-8143-e23b2aa56ecc,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/ModifyCatalogQueueEntryAction.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// ModifyCatalogQueueEntryAction.java
package org.heal.servlet.cataloger;

import org.heal.module.catalog.QueueDAO;
import org.heal.module.catalog.QueuedRecordBean;
import org.heal.module.metadata.MetadataDAO;
import org.heal.module.metadata.ShortMetadataBean;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import org.heal.util.FileLocator;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.sql.SQLException;

/**
 * An {@link org.heal.servlet.Action Action} which is called in order to edit a metadata item which is in
 * the catalog queue.
 *
 * @author Brad Schaefer (<A HREF=""mailto:schaefer@lib.med.utah.edu"">schaefer@lib.med.utah.edu</A>)
 * @version 1.0
 */
public class ModifyCatalogQueueEntryAction implements Action {

    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        final String catalogQueueEntryId = request.getParameter(""catalogQueueEntryId"");
        final String status = request.getParameter(""status"");
        if (!AuthenticationTools.isCataloger(request) || null == catalogQueueEntryId || null == status) {
            // The user does not have the access to view this page
            // or the Catalog Queue entry id or status is missing,
            // so we go no further, and redirect them to an access denied page
            // TODO instead of hardcoding page locations, this should be in config files somewhere
            response.sendRedirect(""/error/accessDenied.jsp"");
            return;
        }
        final String metadataId = request.getParameter(""metadataId"");
        final QueueDAO queueManager = (QueueDAO) servlet.getServletContext().getAttribute(""QueueDAO"");
        try {
            final String statusTest = status.toLowerCase();
            if (""waiting"".equals(statusTest) || ""incomplete"".equals(statusTest)) {
                // If the status is 'waiting', or incomplete, we just save the catalog queue entry
                // Creates an QueuedRecordBean based on the form data
                final QueuedRecordBean catalogEntry = new QueuedRecordBean();
                catalogEntry.setQueuedRecordId(catalogQueueEntryId);
                catalogEntry.setComments(request.getParameter(""comment""));
                catalogEntry.getShortMetadata().setMetadataId(metadataId);
                catalogEntry.setStatus(status);
                catalogEntry.setType(QueueDAO.TYPE_CATALOG);
                queueManager.saveQueuedRecord(catalogEntry);
            } else if (""cataloged"".equals(statusTest)) {
                // If the status is 'cataloged' we mark it as such in the database,
                // and copy the file to the content directory
                MetadataDAO metadataServices = (MetadataDAO) servlet.getServletContext().getAttribute(""MetadataDAO"");
                FileLocator fileLocator = (FileLocator) servlet.getServletContext().getAttribute(""healFileLocator"");
                ShortMetadataBean metadata = metadataServices.getShortMetadata(metadataId);
                queueManager.markRecordCataloged(metadataId);
                queueManager.dequeue(catalogQueueEntryId);
                String sourceFile = fileLocator.getUploadFilePath(metadata.getLocation());
                String destinationFile = fileLocator.getContentFilePath(metadata.getLocation());
                if (!new File(destinationFile).exists()) {
                    copyFile(sourceFile, destinationFile);
                }
            }
        } catch (SQLException e) {
            // TODO logging?
        }
        // TODO instead of hardcoding page locations, this should be in config files somewhere
        response.sendRedirect(""showCatalogQueue"");
    }

    /**
     * Copies a file from a sourceLocation to a destinationLocation.
     *
     * @param sourceLocation
     * @param destinationLocation
     */
    private static void copyFile(String sourceLocation, String destinationLocation) {
        FileChannel srcChannel = null;
        FileChannel dstChannel = null;
        try {
            // Create channel on the source
            srcChannel = new FileInputStream(sourceLocation).getChannel();
            // Create channel on the destination
            dstChannel = new FileOutputStream(destinationLocation).getChannel();
            // Copy file contents from source to destination
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            // Close the channels
            if (null != srcChannel) {
                try {
                    srcChannel.close();
                } catch (IOException e) {
                }
            }
            if (null != dstChannel) {
                try {
                    dstChannel.close();
                } catch (IOException e) {
                }
            }
        }
    }

    /**
     * @return <code>true</code>
     */
    public boolean actionRequiresLogin() {
        return true;
    }
}
","// ModifyCatalogQueueEntryActionTest.java
package org.heal.servlet.cataloger;

import org.heal.module.catalog.QueueDAO;
import org.heal.module.catalog.QueuedRecordBean;
import org.heal.module.metadata.MetadataDAO;
import org.heal.module.metadata.ShortMetadataBean;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import org.heal.util.FileLocator;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.sql.SQLException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifyCatalogQueueEntryAction}.
* It contains one unit test case for the {@link ModifyCatalogQueueEntryAction#actionRequiresLogin()} method.
*/
class ModifyCatalogQueueEntryActionTest {","// ModifyCatalogQueueEntryActionTest.java
package org.heal.servlet.cataloger;

import org.heal.module.catalog.QueueDAO;
import org.heal.module.catalog.QueuedRecordBean;
import org.heal.module.metadata.MetadataDAO;
import org.heal.module.metadata.ShortMetadataBean;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import org.heal.util.FileLocator;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.sql.SQLException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ModifyCatalogQueueEntryAction}.
* It contains one unit test case for the {@link ModifyCatalogQueueEntryAction#actionRequiresLogin()} method.
*/
class ModifyCatalogQueueEntryActionTest {
"
2f4ba0d0-0ed5-444a-80c0-6165cbbcbd48,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/RelationRecordModifier_0Test.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// RelationRecordModifier.java
package org.heal.servlet.cataloger;

import org.heal.servlet.Action;
import org.heal.module.metadata.RelationBean;
import org.heal.module.metadata.CompleteMetadataBean;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.RequestDispatcher;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;

/**
 * Saves changes to a {@link RelationBean} and acts as
 * an {@link Action} which is called to edit a Relation.  If
 * there isn't an existing Relation which can be found to edit,
 * we assume that a new Relation should be edited.
 */
public class RelationRecordModifier implements Action, MetadataModifier {

    private static Action NEXT_ACTION = new EditMetadataAction();

    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        // We skip the usual authentication-checking stuff since this
        // already should've been done by ModifyMetadataAction
        final CompleteMetadataBean cmb = (CompleteMetadataBean) request.getSession().getAttribute(""metadata"");
        final String selectedId = request.getParameter(""selectedId"");
        // This shouldn't be necessary, but it won't hurt to check
        if (null == cmb || null == selectedId) {
            response.sendRedirect(""/error/accessDenied.jsp"");
            return;
        }
        RelationBean rbToEdit = findRelationBean(cmb.getRelations(), selectedId);
        if (null == rbToEdit) {
            rbToEdit = new RelationBean();
        }
        request.setAttribute(""RelationBean"", rbToEdit);
        RequestDispatcher rd = request.getRequestDispatcher(""/catalog/editRelation.jsp"");
        rd.forward(request, response);
    }

    /**
     * @return <code>true</code>
     */
    public boolean actionRequiresLogin() {
        return true;
    }

    public void updateMetadata(CompleteMetadataBean cmb, ServletRequest request) {
        final String relationId = request.getParameter(""relationId"");
        final String resource = request.getParameter(""resource"");
        final String kind = request.getParameter(""kind"");
        final String description = request.getParameter(""description"");
        final String catalogue = request.getParameter(""catalogue"");
        final String entry = request.getParameter(""entry"");
        RelationBean rb = findRelationBean(cmb.getRelations(), relationId);
        if (null == rb) {
            int lowestRelationId = 0;
            for (Iterator iter = cmb.getRelations().iterator(); iter.hasNext(); ) {
                final RelationBean temp = (RelationBean) iter.next();
                final int tempId = Integer.parseInt(temp.getRelationId());
                if (tempId < lowestRelationId) {
                    lowestRelationId = tempId;
                }
            }
            rb = new RelationBean();
            rb.setRelationId(String.valueOf(lowestRelationId - 1));
            cmb.addRelation(rb);
        }
        rb.setResource(resource);
        rb.setKind(kind);
        rb.setDescription(description);
        rb.setCatalogue(catalogue);
        rb.setEntry(entry);
    }

    public Action getNextAction(ServletRequest request) {
        return NEXT_ACTION;
    }

    private RelationBean findRelationBean(final List relations, final String relationId) {
        RelationBean ret = null;
        for (Iterator iter = relations.iterator(); iter.hasNext(); ) {
            RelationBean temp = (RelationBean) iter.next();
            if ((null == relationId && null == temp.getRelationId()) || (null != relationId && relationId.equals(temp.getRelationId()))) {
                ret = temp;
            }
        }
        return ret;
    }
}
","// RelationRecordModifier_0Test.java
package org.heal.servlet.cataloger;

import org.heal.servlet.Action;
import org.heal.module.metadata.RelationBean;
import org.heal.module.metadata.CompleteMetadataBean;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.RequestDispatcher;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RelationRecordModifier}.
* It contains one unit test case for the {@link RelationRecordModifier#actionRequiresLogin()} method.
*/
class RelationRecordModifier_0Test {","// RelationRecordModifier_0Test.java
package org.heal.servlet.cataloger;

import org.heal.servlet.Action;
import org.heal.module.metadata.RelationBean;
import org.heal.module.metadata.CompleteMetadataBean;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.RequestDispatcher;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link RelationRecordModifier}.
* It contains one unit test case for the {@link RelationRecordModifier#actionRequiresLogin()} method.
*/
class RelationRecordModifier_0Test {
"
6526c705-52b2-442e-b383-72b19dfde870,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/CancelEditMetadataAction.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// CancelEditMetadataAction.java
package org.heal.servlet.cataloger;

import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import java.io.IOException;

/**
 * A simple {@link Action} which clears the session variable used
 * for editing metadata.
 */
public class CancelEditMetadataAction implements Action {

    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        if (!AuthenticationTools.isCataloger(request)) {
            // The user does not have the access to view this page
            // so we go no further, and redirect them to an access denied page
            // TODO instead of hardcoding page locations, this should be in config files somewhere
            response.sendRedirect(""/error/accessDenied.jsp"");
            return;
        }
        HttpSession session = request.getSession(false);
        if (null != session) {
            session.removeAttribute(""metadata"");
        }
        RequestDispatcher rd = request.getRequestDispatcher(""/catalog/editCancelled.jsp"");
        rd.forward(request, response);
    }

    /**
     * @return <code>false</code>
     */
    public boolean actionRequiresLogin() {
        return false;
    }
}
","// CancelEditMetadataActionTest.java
package org.heal.servlet.cataloger;

import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CancelEditMetadataAction}.
* It contains one unit test case for the {@link CancelEditMetadataAction#actionRequiresLogin()} method.
*/
class CancelEditMetadataActionTest {","// CancelEditMetadataActionTest.java
package org.heal.servlet.cataloger;

import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import java.io.IOException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link CancelEditMetadataAction}.
* It contains one unit test case for the {@link CancelEditMetadataAction#actionRequiresLogin()} method.
*/
class CancelEditMetadataActionTest {
"
8ac8d4b9-107c-4d59-b716-8b36371ffada,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/EditControlledVocabularyAction.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// EditControlledVocabularyAction.java
package org.heal.servlet.cataloger;

import org.heal.servlet.Action;
import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.TaxonBean;
import org.heal.module.metadata.TaxonPathBean;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import java.io.IOException;
import java.util.Iterator;

/**
 * An {@link Action} which is called to edit a Controlled Vocabulary item.  If
 * there isn't an existing Controlled Vocabulary item which can be found to edit,
 * we assume that a new Controlled Vocabulary entry should be edited.
 */
public class EditControlledVocabularyAction implements Action {

    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        // We skip the usual authentication-checking stuff since this
        // already should've been done by ModifyMetadataAction
        final CompleteMetadataBean cmb = (CompleteMetadataBean) request.getSession().getAttribute(""metadata"");
        final String selectedId = request.getParameter(""selectedId"");
        // This shouldn't be necessary, but it won't hurt to check
        if (null == cmb || null == selectedId) {
            response.sendRedirect(""/error/accessDenied.jsp"");
            return;
        }
        TaxonBean taxonToEdit = new TaxonBean();
        TaxonPathBean taxonPathToEdit = new TaxonPathBean();
        if (null != selectedId && 0 < selectedId.length()) {
            for (Iterator iterOne = cmb.getTaxonPaths().iterator(); iterOne.hasNext(); ) {
                final TaxonPathBean tempTaxonPath = (TaxonPathBean) iterOne.next();
                for (Iterator iterTwo = tempTaxonPath.getTaxons().iterator(); iterTwo.hasNext(); ) {
                    final TaxonBean tempTaxon = (TaxonBean) iterTwo.next();
                    if (tempTaxon.getTaxonId().equals(selectedId)) {
                        taxonToEdit = tempTaxon;
                        taxonPathToEdit = tempTaxonPath;
                    }
                }
            }
        }
        request.setAttribute(""TaxonBean"", taxonToEdit);
        request.setAttribute(""TaxonPathBean"", taxonPathToEdit);
        RequestDispatcher rd = request.getRequestDispatcher(""/catalog/editControlledVocabulary.jsp"");
        rd.forward(request, response);
    }

    /**
     * @return <code>true</code>
     */
    public boolean actionRequiresLogin() {
        return true;
    }
}
","// EditControlledVocabularyActionTest.java
package org.heal.servlet.cataloger;

import org.heal.servlet.Action;
import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.TaxonBean;
import org.heal.module.metadata.TaxonPathBean;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import java.io.IOException;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EditControlledVocabularyAction}.
* It contains one unit test case for the {@link EditControlledVocabularyAction#actionRequiresLogin()} method.
*/
class EditControlledVocabularyActionTest {","// EditControlledVocabularyActionTest.java
package org.heal.servlet.cataloger;

import org.heal.servlet.Action;
import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.TaxonBean;
import org.heal.module.metadata.TaxonPathBean;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import java.io.IOException;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EditControlledVocabularyAction}.
* It contains one unit test case for the {@link EditControlledVocabularyAction#actionRequiresLogin()} method.
*/
class EditControlledVocabularyActionTest {
"
f23118d5-73bf-4eca-922a-662b804c8619,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/MetadataRecordModifier.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// MetadataRecordModifier.java
package org.heal.servlet.cataloger;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.ContextURLBean;
import org.heal.module.metadata.ContributorBean;
import org.heal.module.metadata.CopyrightBean;
import org.heal.module.metadata.CopyrightHolderBean;
import org.heal.module.metadata.CopyrightTextBean;
import org.heal.module.metadata.DiseaseDiagnosisBean;
import org.heal.module.metadata.FormatBean;
import org.heal.module.metadata.KeywordBean;
import org.heal.module.metadata.RelationBean;
import org.heal.module.metadata.RequirementBean;
import org.heal.module.metadata.TargetUserGroupBean;
import org.heal.module.metadata.TaxonBean;
import org.heal.module.metadata.TaxonPathBean;
import org.heal.module.metadata.ThumbnailBean;
import org.heal.module.metadata.MetametadataIdentifierBean;
import org.heal.module.metadata.MetametadataContributorBean;
import org.heal.servlet.Action;
import org.heal.util.DateTools;
import javax.servlet.ServletRequest;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;

/**
 * <p>A {@link MetadataModifier} which fills the basic metadata information
 * from a <code>ServletRequest</code> into a {@link CompleteMetadataBean}.</p>
 */
public class MetadataRecordModifier implements MetadataModifier {

    private static final Map nextActionMap;

    private static final Action NEXT_ACTION_DEFAULT = new EditMetadataAction();

    static {
        Map temp = new HashMap();
        temp.put(""editContextURL"", new EditContextURLAction());
        temp.put(""editContributor"", new EditContributorAction());
        temp.put(""editCopyrightHolder"", new EditCopyrightHolderAction());
        temp.put(""editControlledVocab"", new EditControlledVocabularyAction());
        temp.put(""editRequirement"", new EditRequirementAction());
        temp.put(""editRelation"", new RelationRecordModifier());
        temp.put(""editMetametadataIdentifier"", new MetametadataIdentifierRecordModifier());
        temp.put(""editMetametadataContributor"", new MetametadataContributorRecordModifier());
        temp.put(""saveMetadata"", new SaveMetadataAction());
        nextActionMap = Collections.unmodifiableMap(temp);
    }

    public MetadataRecordModifier() {
    }

    public void updateMetadata(CompleteMetadataBean cmb, ServletRequest request) {
        // Fills the complete metadata bean with the form information
        cmb.setAnnotated(request.getParameter(""annotated""));
        cmb.setApproveDate(DateTools.parse(request.getParameter(""approveDate"")));
        cmb.setArchived(request.getParameter(""archived""));
        cmb.setCatalogDate(DateTools.parse(request.getParameter(""catalogDate"")));
        cmb.setClinicalHistory(request.getParameter(""clinicalHistory""));
        // Removes any deleted Context URLs
        List oldContextURLs = cmb.getContextURLs();
        ArrayList updatedContextURLs = new ArrayList();
        String[] contextURLs = request.getParameterValues(""contextURLs"");
        if (null != contextURLs) {
            for (int i = 0; i < contextURLs.length; ++i) {
                final String contextURLId = contextURLs[i];
                for (Iterator iter = oldContextURLs.iterator(); iter.hasNext(); ) {
                    ContextURLBean cub = (ContextURLBean) iter.next();
                    if (cub.getContextURLId().equals(contextURLId)) {
                        updatedContextURLs.add(cub);
                        break;
                    }
                }
            }
        }
        cmb.setContextURLs(updatedContextURLs);
        cmb.setContributeDate(DateTools.parse(request.getParameter(""contributeDate"")));
        // Removes any deleted Contributors
        List oldContributors = cmb.getContributorList();
        cmb.setContributors(new TreeMap());
        String[] contributors = request.getParameterValues(""contributors"");
        if (null != contributors) {
            for (int i = 0; i < contributors.length; ++i) {
                final String contributorId = contributors[i];
                for (Iterator iter = oldContributors.iterator(); iter.hasNext(); ) {
                    ContributorBean cb = (ContributorBean) iter.next();
                    if (cb.getContributorId().equals(contributorId)) {
                        cmb.addContributor(cb);
                        break;
                    }
                }
            }
        }
        // Removes any deleted Copyright Holders
        List oldCopyrightHolders = cmb.getCopyrightHolders();
        cmb.setCopyrightHolders(new ArrayList());
        String[] copyrightHolders = request.getParameterValues(""copyrightHolders"");
        if (null != copyrightHolders) {
            for (int i = 0; i < copyrightHolders.length; ++i) {
                final String copyrightHolderId = copyrightHolders[i];
                for (Iterator iter = oldCopyrightHolders.iterator(); iter.hasNext(); ) {
                    CopyrightHolderBean chb = (CopyrightHolderBean) iter.next();
                    if (chb.getCopyrightHolderId().equals(copyrightHolderId)) {
                        cmb.addCopyrightHolder(chb);
                        break;
                    }
                }
            }
        }
        // Removes any deleted Controlled Vocabulary items
        List oldTaxonPaths = cmb.getTaxonPaths();
        cmb.setTaxonPaths(new ArrayList());
        String[] taxons = request.getParameterValues(""controlledVocab"");
        if (null != taxons) {
            for (Iterator iterOne = oldTaxonPaths.iterator(); iterOne.hasNext(); ) {
                final TaxonPathBean taxonPath = (TaxonPathBean) iterOne.next();
                SortedSet taxonSet = new TreeSet();
                for (Iterator iterTwo = taxonPath.getTaxons().iterator(); iterTwo.hasNext(); ) {
                    final TaxonBean taxon = (TaxonBean) iterTwo.next();
                    for (int i = 0; i < taxons.length; ++i) {
                        final String taxonId = taxons[i];
                        if (taxonId.equals(taxon.getTaxonId())) {
                            taxonSet.add(taxon);
                            break;
                        }
                    }
                }
                if (0 < taxonSet.size()) {
                    taxonPath.setTaxons(taxonSet);
                    cmb.addTaxonPath(taxonPath);
                }
            }
        }
        String[] copyrightValues = request.getParameterValues(""copyrights"");
        ArrayList copyrights = new ArrayList();
        if (null != copyrightValues) {
            for (int i = 0; i < copyrightValues.length; ++i) {
                CopyrightTextBean ctb = new CopyrightTextBean();
                ctb.setCopyrightText(copyrightValues[i]);
                CopyrightBean cb = new CopyrightBean();
                cb.setCopyrightText(ctb);
                copyrights.add(cb);
            }
        }
        cmb.setCopyrights(copyrights);
        cmb.setCreationDate(DateTools.parse(request.getParameter(""creationDate"")));
        cmb.setDescription(request.getParameter(""description""));
        String[] diseaseDxValues = request.getParameterValues(""diseaseDiagnoses"");
        ArrayList diseaseDiagnoses = new ArrayList();
        if (null != diseaseDxValues) {
            for (int i = 0; i < diseaseDxValues.length; ++i) {
                DiseaseDiagnosisBean ddb = new DiseaseDiagnosisBean();
                ddb.setDiseaseDiagnosis(diseaseDxValues[i]);
                diseaseDiagnoses.add(ddb);
            }
        }
        cmb.setDiseaseDiagnoses(diseaseDiagnoses);
        cmb.setDuration(request.getParameter(""duration""));
        cmb.setFileHeight(request.getParameter(""fileHeight""));
        cmb.setFileWidth(request.getParameter(""fileWidth""));
        cmb.setFileName(request.getParameter(""filename""));
        cmb.setFileSize(request.getParameter(""fileSize""));
        String[] formatValues = request.getParameterValues(""formats"");
        ArrayList formats = new ArrayList();
        if (null != formatValues) {
            for (int i = 0; i < formatValues.length; ++i) {
                FormatBean fb = new FormatBean();
                fb.setFormat(formatValues[i]);
                formats.add(fb);
            }
        }
        cmb.setFormats(formats);
        cmb.setGlobalId(request.getParameter(""globalId""));
        String[] keywordValues = request.getParameterValues(""keywords"");
        ArrayList keywords = new ArrayList();
        if (null != keywordValues) {
            for (int i = 0; i < keywordValues.length; ++i) {
                KeywordBean kb = new KeywordBean();
                kb.setKeyword(keywordValues[i]);
                keywords.add(kb);
            }
        }
        cmb.setKeywords(keywords);
        cmb.setLearningResourceType(request.getParameter(""learningResourceType""));
        cmb.setLocation(request.getParameter(""location""));
        cmb.setMagnification(request.getParameter(""magnification""));
        // Removes any deleted Metametadata Identifiers
        List oldMmIdentifiers = cmb.getMetametadataIdentifiers();
        List<MetametadataIdentifierBean> updatedMmIdentifiers = new ArrayList<MetametadataIdentifierBean>();
        String[] mmIdentifiers = request.getParameterValues(""metametadataIdentifiers"");
        if (null != mmIdentifiers) {
            for (int i = 0; i < mmIdentifiers.length; ++i) {
                final String metametadataIdentifierId = mmIdentifiers[i];
                for (Object o : oldMmIdentifiers) {
                    MetametadataIdentifierBean mib = (MetametadataIdentifierBean) o;
                    if (metametadataIdentifierId.equals(mib.getMetametadataIdentifierId())) {
                        updatedMmIdentifiers.add(mib);
                        break;
                    }
                }
            }
        }
        cmb.setMetametadataIdentifiers(updatedMmIdentifiers);
        // Removes any deleted Metametadata Contributors
        List oldMmContributors = cmb.getMetametadataContributors();
        List<MetametadataContributorBean> updatedMmContributors = new ArrayList<MetametadataContributorBean>();
        String[] mmContributors = request.getParameterValues(""metametadataContributors"");
        if (null != mmContributors) {
            for (int i = 0; i < mmContributors.length; ++i) {
                final String metametadataContributorId = mmContributors[i];
                for (Object o : oldMmContributors) {
                    MetametadataContributorBean mcb = (MetametadataContributorBean) o;
                    if (metametadataContributorId.equals(mcb.getMetametadataContributorId())) {
                        updatedMmContributors.add(mcb);
                        break;
                    }
                }
            }
        }
        cmb.setMetametadataContributors(updatedMmContributors);
        cmb.setOrientation(request.getParameter(""orientation""));
        cmb.setPrivate(request.getParameter(""private""));
        cmb.setPublicationName(request.getParameter(""publicationName""));
        cmb.setRadiographType(request.getParameter(""radiographType""));
        // TODO Removes any deleted Relations
        List oldRelations = cmb.getRelations();
        ArrayList updatedRelations = new ArrayList();
        String[] relations = request.getParameterValues(""relations"");
        if (null != relations) {
            for (int i = 0; i < relations.length; ++i) {
                final String relationId = relations[i];
                for (Iterator iter = oldRelations.iterator(); iter.hasNext(); ) {
                    RelationBean rb = (RelationBean) iter.next();
                    if (relationId.equals(rb.getRelationId())) {
                        updatedRelations.add(rb);
                        break;
                    }
                }
            }
        }
        cmb.setRelations(updatedRelations);
        // Removes any deleted Requirements
        List oldRequirements = cmb.getRequirements();
        ArrayList updatedRequirements = new ArrayList();
        String[] requirements = request.getParameterValues(""requirements"");
        if (null != requirements) {
            for (int i = 0; i < requirements.length; ++i) {
                final String requirementId = requirements[i];
                for (Iterator iter = oldRequirements.iterator(); iter.hasNext(); ) {
                    RequirementBean rb = (RequirementBean) iter.next();
                    if (rb.getRequirementId().equals(requirementId)) {
                        updatedRequirements.add(rb);
                        break;
                    }
                }
            }
        }
        cmb.setRequirements(updatedRequirements);
        cmb.setRejectDate(DateTools.parse(request.getParameter(""rejectedDate"")));
        cmb.setSourceCollection(request.getParameter(""sourceCollection""));
        cmb.setSourceCollectionId(request.getParameter(""sourceCollectionId""));
        cmb.setSpecimenType(request.getParameter(""specimenType""));
        cmb.setTitle(request.getParameter(""title""));
        String[] targetUserGroupValues = request.getParameterValues(""targetUserGroups"");
        ArrayList targetUserGroups = new ArrayList();
        if (null != targetUserGroupValues) {
            for (int i = 0; i < targetUserGroupValues.length; ++i) {
                TargetUserGroupBean tug = new TargetUserGroupBean();
                tug.setTargetUserGroup(targetUserGroupValues[i]);
                targetUserGroups.add(tug);
            }
        }
        cmb.setTargetUserGroups(targetUserGroups);
        if (null != request.getParameter(""thumbnailLocation"")) {
            ThumbnailBean tb = new ThumbnailBean();
            tb.setLocation(request.getParameter(""thumbnailLocation""));
            tb.setFileHeight(request.getParameter(""thumbnailFileHeight""));
            tb.setFileWidth(request.getParameter(""thumbnailFileWidth""));
            cmb.setThumbnail(tb);
        }
    }

    /**
     * @param request Used to get the parameter <code>""nextAction""</code>, which
     * 		determines what the next {@link Action} to take will be.  If no
     * 		<code>""nextAction""</code> exists, a valid {@link Action} will still
     * 		be returned.
     * @return The next {@link Action} to take after saving the metadata from
     * 		the form.
     */
    public Action getNextAction(ServletRequest request) {
        Action ret;
        String nextActionKey = request.getParameter(""nextAction"");
        if (nextActionMap.containsKey(nextActionKey)) {
            ret = (Action) nextActionMap.get(nextActionKey);
        } else {
            ret = NEXT_ACTION_DEFAULT;
        }
        return ret;
    }
}
","// MetadataRecordModifierTest.java
package org.heal.servlet.cataloger;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.ContextURLBean;
import org.heal.module.metadata.ContributorBean;
import org.heal.module.metadata.CopyrightBean;
import org.heal.module.metadata.CopyrightHolderBean;
import org.heal.module.metadata.CopyrightTextBean;
import org.heal.module.metadata.DiseaseDiagnosisBean;
import org.heal.module.metadata.FormatBean;
import org.heal.module.metadata.KeywordBean;
import org.heal.module.metadata.RelationBean;
import org.heal.module.metadata.RequirementBean;
import org.heal.module.metadata.TargetUserGroupBean;
import org.heal.module.metadata.TaxonBean;
import org.heal.module.metadata.TaxonPathBean;
import org.heal.module.metadata.ThumbnailBean;
import org.heal.module.metadata.MetametadataIdentifierBean;
import org.heal.module.metadata.MetametadataContributorBean;
import org.heal.servlet.Action;
import org.heal.util.DateTools;
import javax.servlet.ServletRequest;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MetadataRecordModifier}.
* It contains one unit test case for the {@link MetadataRecordModifier#getNextAction(ServletRequest)} method.
*/
class MetadataRecordModifierTest {","// MetadataRecordModifierTest.java
package org.heal.servlet.cataloger;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.ContextURLBean;
import org.heal.module.metadata.ContributorBean;
import org.heal.module.metadata.CopyrightBean;
import org.heal.module.metadata.CopyrightHolderBean;
import org.heal.module.metadata.CopyrightTextBean;
import org.heal.module.metadata.DiseaseDiagnosisBean;
import org.heal.module.metadata.FormatBean;
import org.heal.module.metadata.KeywordBean;
import org.heal.module.metadata.RelationBean;
import org.heal.module.metadata.RequirementBean;
import org.heal.module.metadata.TargetUserGroupBean;
import org.heal.module.metadata.TaxonBean;
import org.heal.module.metadata.TaxonPathBean;
import org.heal.module.metadata.ThumbnailBean;
import org.heal.module.metadata.MetametadataIdentifierBean;
import org.heal.module.metadata.MetametadataContributorBean;
import org.heal.servlet.Action;
import org.heal.util.DateTools;
import javax.servlet.ServletRequest;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link MetadataRecordModifier}.
* It contains one unit test case for the {@link MetadataRecordModifier#getNextAction(ServletRequest)} method.
*/
class MetadataRecordModifierTest {
"
9c66667f-be37-43c9-ad79-f01e892a45a2,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/EditMetadataAction.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// EditMetadataAction.java
package org.heal.servlet.cataloger;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.MetadataDAO;
import org.heal.module.metadata.TargetUserGroupBean;
import org.heal.module.metadata.ContributorBean;
import org.heal.module.metadata.CopyrightHolderBean;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import org.heal.util.VCardBean;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

/**
 * An {@link org.heal.servlet.Action Action} used to edit metadata
 * records.
 *
 * @author Brad Schaefer (<A HREF=""mailto:schaefer@lib.med.utah.edu"">schaefer@lib.med.utah.edu</A>)
 * @version 1.0
 */
public class EditMetadataAction implements Action {

    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        if (!AuthenticationTools.isCataloger(request)) {
            // The user does not have the access to view this page
            // so we go no further, and redirect them to an access denied page
            // TODO instead of hardcoding page locations, this should be in config files somewhere
            response.sendRedirect(""/error/accessDenied.jsp"");
            return;
        }
        final String metadataId = request.getParameter(""metadataId"");
        CompleteMetadataBean cmb = (CompleteMetadataBean) request.getSession().getAttribute(""metadata"");
        if (null == cmb) {
            if (null != metadataId) {
                // If there's no CompleteMetadataBean in the session, we try to retrieve one from
                // the database based on the metadataId parameter
                final MetadataDAO metadataServices = (MetadataDAO) servlet.getServletContext().getAttribute(""MetadataDAO"");
                try {
                    cmb = metadataServices.getCompleteMetadata(metadataId);
                    request.getSession().setAttribute(""metadata"", cmb);
                } catch (SQLException e) {
                    throw new ServletException(e);
                    // TODO Logging?
                }
            } else {
                request.setAttribute(""reason"", ""No metadata record available to edit."");
                RequestDispatcher rd = request.getRequestDispatcher(""/error/accessDenied.jsp"");
                rd.forward(request, response);
                return;
            }
        } else {
            if (null != metadataId) {
                response.sendRedirect(""../catalog/concurrentMetadataEditError.jsp"");
                return;
            }
        }
        if (null != cmb) {
            // We must add target user groups to the request as a Map so that
            // the JSP EL can easily determine whether checkboxes should be checked
            Map targetUserGroups = new HashMap();
            for (Iterator iter = cmb.getTargetUserGroups().iterator(); iter.hasNext(); ) {
                TargetUserGroupBean tug = (TargetUserGroupBean) iter.next();
                targetUserGroups.put(tug.getTargetUserGroup().toLowerCase(), new Object());
            }
            request.setAttribute(""targetUserGroups"", targetUserGroups);
            // We add names for contributors so that they can be
            // printed out nicely in the jsp
            VCardBean vCard = new VCardBean();
            List contributors = cmb.getContributorList();
            for (Iterator iter = contributors.iterator(); iter.hasNext(); ) {
                ContributorBean cb = (ContributorBean) iter.next();
                vCard.setVCard(cb.getVCard());
                if (vCard.isValidVCard()) {
                    if (null != vCard.getFormattedName()) {
                        cb.setTitle(vCard.getFormattedName());
                    } else {
                        cb.setTitle(vCard.getFirstName() + "" "" + vCard.getLastName());
                    }
                } else {
                    cb.setTitle(cb.getVCard());
                }
            }
            // We add names for copyright holders so that they can be
            // printed out nicely in the jsp
            for (Iterator iter = cmb.getCopyrightHolders().iterator(); iter.hasNext(); ) {
                CopyrightHolderBean chb = (CopyrightHolderBean) iter.next();
                vCard.setVCard(chb.getVCard());
                if (vCard.isValidVCard()) {
                    if (null != vCard.getFormattedName()) {
                        chb.setTitle(vCard.getFormattedName());
                    } else {
                        chb.setTitle(vCard.getFirstName() + "" "" + chb.getLastName());
                    }
                } else {
                    chb.setTitle(chb.getVCard());
                }
            }
        }
        // TODO instead of hardcoding page locations, this should be in config files somewhere
        RequestDispatcher rd = request.getRequestDispatcher(""/catalog/editMetadata.jsp"");
        rd.forward(request, response);
    }

    /**
     * @return <code>true</code>
     */
    public boolean actionRequiresLogin() {
        return true;
    }
}
","// EditMetadataActionTest.java
package org.heal.servlet.cataloger;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.MetadataDAO;
import org.heal.module.metadata.TargetUserGroupBean;
import org.heal.module.metadata.ContributorBean;
import org.heal.module.metadata.CopyrightHolderBean;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import org.heal.util.VCardBean;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EditMetadataAction}.
* It contains one unit test case for the {@link EditMetadataAction#actionRequiresLogin()} method.
*/
class EditMetadataActionTest {","// EditMetadataActionTest.java
package org.heal.servlet.cataloger;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.MetadataDAO;
import org.heal.module.metadata.TargetUserGroupBean;
import org.heal.module.metadata.ContributorBean;
import org.heal.module.metadata.CopyrightHolderBean;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import org.heal.util.VCardBean;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EditMetadataAction}.
* It contains one unit test case for the {@link EditMetadataAction#actionRequiresLogin()} method.
*/
class EditMetadataActionTest {
"
d88ce662-5c50-42cc-956f-ee48cd726f1e,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/EditContributorAction.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// EditContributorAction.java
package org.heal.servlet.cataloger;

import org.heal.servlet.Action;
import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.ContributorBean;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import java.io.IOException;
import java.util.Iterator;

/**
 * An {@link Action} which is called to edit a Contributor.  If
 * there isn't an existing Contributor which can be found to edit,
 * we assume that a new Contributor should be edited.
 */
public class EditContributorAction implements Action {

    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        // We skip the usual authentication-checking stuff since this
        // already should've been done by ModifyMetadataAction
        final CompleteMetadataBean cmb = (CompleteMetadataBean) request.getSession().getAttribute(""metadata"");
        final String selectedId = request.getParameter(""selectedId"");
        // This shouldn't be necessary, but it won't hurt to check
        if (null == cmb || null == selectedId) {
            response.sendRedirect(""/error/accessDenied.jsp"");
            return;
        }
        ContributorBean cbToEdit = new ContributorBean();
        for (Iterator iter = cmb.getContributorList().iterator(); iter.hasNext(); ) {
            ContributorBean tempCb = (ContributorBean) iter.next();
            if (tempCb.getContributorId().equals(selectedId)) {
                cbToEdit = tempCb;
                break;
            }
        }
        request.setAttribute(""ContributorBean"", cbToEdit);
        RequestDispatcher rd = request.getRequestDispatcher(""/catalog/editContributor.jsp"");
        rd.forward(request, response);
    }

    /**
     * @return <code>true</code>
     */
    public boolean actionRequiresLogin() {
        return true;
    }
}
","// EditContributorActionTest.java
package org.heal.servlet.cataloger;

import org.heal.servlet.Action;
import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.ContributorBean;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import java.io.IOException;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EditContributorAction}.
* It contains one unit test case for the {@link EditContributorAction#actionRequiresLogin()} method.
*/
class EditContributorActionTest {","// EditContributorActionTest.java
package org.heal.servlet.cataloger;

import org.heal.servlet.Action;
import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.ContributorBean;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import java.io.IOException;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EditContributorAction}.
* It contains one unit test case for the {@link EditContributorAction#actionRequiresLogin()} method.
*/
class EditContributorActionTest {
"
bab4ed8d-0da7-41ba-8673-51804ae0052e,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/ShowCatalogQueueAction.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// ShowCatalogQueueAction.java
package org.heal.servlet.cataloger;

import org.heal.module.catalog.QueueDAO;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

/**
 * An {@link org.heal.servlet.Action} which fetches the information needed to
 * display the catalog queue.
 *
 * @author Brad Schaefer (<A HREF=""mailto:schaefer@lib.med.utah.edu"">schaefer@lib.med.utah.edu</A>)
 */
public class ShowCatalogQueueAction implements Action {

    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        if (!AuthenticationTools.isCataloger(request)) {
            // The user does not have the access to view this page
            // so we go no further, and redirect them to an access denied page
            // TODO instead of hardcoding page locations, this should be in config files somewhere
            response.sendRedirect(""/error/accessDenied.jsp"");
            return;
        }
        final QueueDAO queueManager = (QueueDAO) servlet.getServletContext().getAttribute(""QueueDAO"");
        final List queue = queueManager.getCatalogQueue();
        request.setAttribute(""catalogQueue"", queue);
        // TODO instead of hardcoding page locations, this should be in config files somewhere
        RequestDispatcher rd = request.getRequestDispatcher(""/catalog/viewqueue.jsp"");
        rd.forward(request, response);
    }

    /**
     * @return <code>true</code>
     */
    public boolean actionRequiresLogin() {
        return true;
    }
}
","// ShowCatalogQueueActionTest.java
package org.heal.servlet.cataloger;

import org.heal.module.catalog.QueueDAO;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ShowCatalogQueueAction}.
* It contains one unit test case for the {@link ShowCatalogQueueAction#actionRequiresLogin()} method.
*/
class ShowCatalogQueueActionTest {","// ShowCatalogQueueActionTest.java
package org.heal.servlet.cataloger;

import org.heal.module.catalog.QueueDAO;
import org.heal.servlet.Action;
import org.heal.util.AuthenticationTools;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ShowCatalogQueueAction}.
* It contains one unit test case for the {@link ShowCatalogQueueAction#actionRequiresLogin()} method.
*/
class ShowCatalogQueueActionTest {
"
057d3502-973b-4255-9165-60aae6e5459d,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/cataloger/EditCopyrightHolderAction.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// EditCopyrightHolderAction.java
package org.heal.servlet.cataloger;

import org.heal.servlet.Action;
import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.CopyrightHolderBean;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import java.io.IOException;
import java.util.Iterator;

/**
 * An {@link Action} which is called to edit a Copyright Holder.  If
 * there isn't an existing Copyright Holder which can be found to edit,
 * we assume that a new Copyright Holder should be edited.
 */
public class EditCopyrightHolderAction implements Action {

    public void perform(HttpServlet servlet, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        // We skip the usual authentication-checking stuff since this
        // already should've been done by ModifyMetadataAction
        final CompleteMetadataBean cmb = (CompleteMetadataBean) request.getSession().getAttribute(""metadata"");
        final String selectedId = request.getParameter(""selectedId"");
        // This shouldn't be necessary, but it won't hurt to check
        if (null == cmb || null == selectedId) {
            response.sendRedirect(""/error/accessDenied.jsp"");
            return;
        }
        CopyrightHolderBean chbToEdit = new CopyrightHolderBean();
        for (Iterator iter = cmb.getCopyrightHolders().iterator(); iter.hasNext(); ) {
            CopyrightHolderBean tempChb = (CopyrightHolderBean) iter.next();
            if (tempChb.getCopyrightHolderId().equals(selectedId)) {
                chbToEdit = tempChb;
                break;
            }
        }
        request.setAttribute(""CopyrightHolderBean"", chbToEdit);
        RequestDispatcher rd = request.getRequestDispatcher(""/catalog/editCopyrightHolder.jsp"");
        rd.forward(request, response);
    }

    /**
     * @return <code>true</code>
     */
    public boolean actionRequiresLogin() {
        return true;
    }
}
","// EditCopyrightHolderActionTest.java
package org.heal.servlet.cataloger;

import org.heal.servlet.Action;
import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.CopyrightHolderBean;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import java.io.IOException;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EditCopyrightHolderAction}.
* It contains one unit test case for the {@link EditCopyrightHolderAction#actionRequiresLogin()} method.
*/
class EditCopyrightHolderActionTest {","// EditCopyrightHolderActionTest.java
package org.heal.servlet.cataloger;

import org.heal.servlet.Action;
import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.CopyrightHolderBean;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import java.io.IOException;
import java.util.Iterator;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link EditCopyrightHolderAction}.
* It contains one unit test case for the {@link EditCopyrightHolderAction#actionRequiresLogin()} method.
*/
class EditCopyrightHolderActionTest {
"
4fa639da-a954-4a0b-9991-f1f55695019e,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/servlet/upload/AlphanumericFileRenamePolicy.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// AlphanumericFileRenamePolicy.java
package org.heal.servlet.upload;

import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import java.io.File;

/**
 * A FileRenamePolicy that strips non-alphanumeric characters.
 */
public class AlphanumericFileRenamePolicy extends DefaultFileRenamePolicy {

    /**
     * Eliminates non-alphanumeric characters from filenames.  Exceptions
     * include <code>' '</code>, <code>'.'</code> and <code>'_'</code>
     *
     * @param original Original file reference.
     * @return File reference stripped of non-alphanumeric characters.
     */
    public File rename(File original) {
        File ret = new File(stripSpecialCharacters(original.getPath()));
        return super.rename(ret);
    }

    String stripSpecialCharacters(String filename) {
        // Removes all non-alphanumeric characters (except for '.' and ' ')
        return filename.substring(0, filename.lastIndexOf(File.separator) + 1) + filename.substring(filename.lastIndexOf(File.separator) + 1).replaceAll(""[^\\w\\. ]"", """");
    }
}
","// AlphanumericFileRenamePolicyTest.java
package org.heal.servlet.upload;

import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import java.io.File;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AlphanumericFileRenamePolicy}.
* It contains one unit test case for the {@link AlphanumericFileRenamePolicy#rename(File)} method.
*/
class AlphanumericFileRenamePolicyTest {","// AlphanumericFileRenamePolicyTest.java
package org.heal.servlet.upload;

import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import java.io.File;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link AlphanumericFileRenamePolicy}.
* It contains one unit test case for the {@link AlphanumericFileRenamePolicy#rename(File)} method.
*/
class AlphanumericFileRenamePolicyTest {
"
1ed5a40a-7c01-41cb-9cc8-c4062f47f08d,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/util/DateTools_0Test.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// DateTools.java
package org.heal.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * A general utility class for dealing with dates.
 */
public class DateTools {

    public static final String DEFAULT_DATE_FORMAT = new String(""yyyy-MM-dd"");

    public static final String LONG_DATE_FORMAT = new String(""yyyy-MM-dd HH:mm:ss"");

    private static final String[] POSSIBLE_DATE_FORMATS = new String[] { DEFAULT_DATE_FORMAT, LONG_DATE_FORMAT, ""MM/dd/yyyy"", ""MM-dd-yyyy"", ""yyyy"" };

    private DateTools() {
    }

    /**
     * @param date A {@link Date} to format.
     * @return A String representation of the date parameter in
     * 		the {@link #DEFAULT_DATE_FORMAT default format}.
     */
    public static String format(Date date) {
        if (null == date) {
            return null;
        }
        SimpleDateFormat formatter = new SimpleDateFormat(DEFAULT_DATE_FORMAT);
        return formatter.format(date);
    }

    /**
     * @param date A {@link Date} to format.
     * @param format A format (corresponding to {@link SimpleDateFormat}'s syntax)
     * 		to convert the date to.
     * @return A String representation of the date parameter in the
     * 		specified format, or null if the given date is null.
     */
    public static String format(Date date, String format) {
        if (null == date) {
            return null;
        }
        SimpleDateFormat formatter = new SimpleDateFormat(format);
        return formatter.format(date);
    }

    /**
     * @param dateString A String to parse into a {@link Date} object.
     * @return A {@link Date} representation of the String when possible,
     * 		or <code>null</code> if the date cannot be parsed.
     */
    public static Date parse(String dateString) {
        Date ret = null;
        if (null != dateString) {
            boolean match = false;
            SimpleDateFormat formatter = new SimpleDateFormat();
            formatter.setLenient(false);
            for (int i = 0; i < POSSIBLE_DATE_FORMATS.length && !match; ++i) {
                formatter.applyPattern(POSSIBLE_DATE_FORMATS[i]);
                try {
                    ret = formatter.parse(dateString);
                    match = true;
                } catch (ParseException e) {
                    // do nothing
                }
            }
        }
        return ret;
    }

    /**
     * @param dateString A String to parse into a {@link Date} object.
     * @param format A format to use to parse the date parameter with.
     * @return A {@link Date} representation of the String when possible,
     * 		or <code>null</code> if the date cannot be parsed with the
     * 		given format.
     */
    public static Date parse(String dateString, String format) {
        Date ret = null;
        if (null != dateString) {
            SimpleDateFormat formatter = new SimpleDateFormat(format);
            formatter.setLenient(false);
            try {
                ret = formatter.parse(dateString);
            } catch (ParseException e) {
                // do nothing
            }
        }
        return ret;
    }

    /**
     * @param dateString A String that may or may not represent a
     * 		{@link Date} that can be parsed.
     * @return <code>true</code> if a {@link Date} can be parsed from
     * 		the String, or <code>false</code> otherwise.
     * @see #parse(String dateString)
     */
    public static boolean isValidDate(String dateString) {
        boolean match = false;
        if (null != dateString) {
            SimpleDateFormat formatter = new SimpleDateFormat();
            formatter.setLenient(false);
            for (int i = 0; i < POSSIBLE_DATE_FORMATS.length && !match; ++i) {
                formatter.applyPattern(POSSIBLE_DATE_FORMATS[i]);
                try {
                    formatter.parse(dateString);
                    match = true;
                } catch (ParseException e) {
                    // do nothing
                }
            }
        }
        return match;
    }

    /**
     * @param dateString A String that may or may not represent a
     * 		{@link Date} that can be parsed with the given format.
     * @param format A format to use to check if the String can
     * 		be parsed into a {@link Date}.
     * @return <code>true</code> if a {@link Date} can be parsed from
     * 		the String in the given format, or <code>false</code>
     * 		otherwise.
     * @see #parse(String dateString, String format)
     */
    public static boolean isValidDate(String dateString, String format) {
        boolean match = false;
        SimpleDateFormat formatter = new SimpleDateFormat(format);
        formatter.setLenient(false);
        try {
            formatter.parse(dateString);
            match = true;
        } catch (ParseException e) {
            // do nothing
        }
        return match;
    }
}
","// DateTools_0Test.java
package org.heal.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DateTools}.
* It contains one unit test case for the {@link DateTools#format(Date)} method.
*/
class DateTools_0Test {","// DateTools_0Test.java
package org.heal.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DateTools}.
* It contains one unit test case for the {@link DateTools#format(Date)} method.
*/
class DateTools_0Test {
"
ce1592f7-0628-4cb0-883c-07c0aac18dbb,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/util/DateTools_1Test.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// DateTools.java
package org.heal.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * A general utility class for dealing with dates.
 */
public class DateTools {

    public static final String DEFAULT_DATE_FORMAT = new String(""yyyy-MM-dd"");

    public static final String LONG_DATE_FORMAT = new String(""yyyy-MM-dd HH:mm:ss"");

    private static final String[] POSSIBLE_DATE_FORMATS = new String[] { DEFAULT_DATE_FORMAT, LONG_DATE_FORMAT, ""MM/dd/yyyy"", ""MM-dd-yyyy"", ""yyyy"" };

    private DateTools() {
    }

    /**
     * @param date A {@link Date} to format.
     * @return A String representation of the date parameter in
     * 		the {@link #DEFAULT_DATE_FORMAT default format}.
     */
    public static String format(Date date) {
        if (null == date) {
            return null;
        }
        SimpleDateFormat formatter = new SimpleDateFormat(DEFAULT_DATE_FORMAT);
        return formatter.format(date);
    }

    /**
     * @param date A {@link Date} to format.
     * @param format A format (corresponding to {@link SimpleDateFormat}'s syntax)
     * 		to convert the date to.
     * @return A String representation of the date parameter in the
     * 		specified format, or null if the given date is null.
     */
    public static String format(Date date, String format) {
        if (null == date) {
            return null;
        }
        SimpleDateFormat formatter = new SimpleDateFormat(format);
        return formatter.format(date);
    }

    /**
     * @param dateString A String to parse into a {@link Date} object.
     * @return A {@link Date} representation of the String when possible,
     * 		or <code>null</code> if the date cannot be parsed.
     */
    public static Date parse(String dateString) {
        Date ret = null;
        if (null != dateString) {
            boolean match = false;
            SimpleDateFormat formatter = new SimpleDateFormat();
            formatter.setLenient(false);
            for (int i = 0; i < POSSIBLE_DATE_FORMATS.length && !match; ++i) {
                formatter.applyPattern(POSSIBLE_DATE_FORMATS[i]);
                try {
                    ret = formatter.parse(dateString);
                    match = true;
                } catch (ParseException e) {
                    // do nothing
                }
            }
        }
        return ret;
    }

    /**
     * @param dateString A String to parse into a {@link Date} object.
     * @param format A format to use to parse the date parameter with.
     * @return A {@link Date} representation of the String when possible,
     * 		or <code>null</code> if the date cannot be parsed with the
     * 		given format.
     */
    public static Date parse(String dateString, String format) {
        Date ret = null;
        if (null != dateString) {
            SimpleDateFormat formatter = new SimpleDateFormat(format);
            formatter.setLenient(false);
            try {
                ret = formatter.parse(dateString);
            } catch (ParseException e) {
                // do nothing
            }
        }
        return ret;
    }

    /**
     * @param dateString A String that may or may not represent a
     * 		{@link Date} that can be parsed.
     * @return <code>true</code> if a {@link Date} can be parsed from
     * 		the String, or <code>false</code> otherwise.
     * @see #parse(String dateString)
     */
    public static boolean isValidDate(String dateString) {
        boolean match = false;
        if (null != dateString) {
            SimpleDateFormat formatter = new SimpleDateFormat();
            formatter.setLenient(false);
            for (int i = 0; i < POSSIBLE_DATE_FORMATS.length && !match; ++i) {
                formatter.applyPattern(POSSIBLE_DATE_FORMATS[i]);
                try {
                    formatter.parse(dateString);
                    match = true;
                } catch (ParseException e) {
                    // do nothing
                }
            }
        }
        return match;
    }

    /**
     * @param dateString A String that may or may not represent a
     * 		{@link Date} that can be parsed with the given format.
     * @param format A format to use to check if the String can
     * 		be parsed into a {@link Date}.
     * @return <code>true</code> if a {@link Date} can be parsed from
     * 		the String in the given format, or <code>false</code>
     * 		otherwise.
     * @see #parse(String dateString, String format)
     */
    public static boolean isValidDate(String dateString, String format) {
        boolean match = false;
        SimpleDateFormat formatter = new SimpleDateFormat(format);
        formatter.setLenient(false);
        try {
            formatter.parse(dateString);
            match = true;
        } catch (ParseException e) {
            // do nothing
        }
        return match;
    }
}
","// DateTools_1Test.java
package org.heal.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DateTools}.
* It contains one unit test case for the {@link DateTools#format(Date, String)} method.
*/
class DateTools_1Test {","// DateTools_1Test.java
package org.heal.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DateTools}.
* It contains one unit test case for the {@link DateTools#format(Date, String)} method.
*/
class DateTools_1Test {
"
6e4f9afd-3741-4eab-8f69-82a1a4cad477,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/util/DateTools_2Test.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// DateTools.java
package org.heal.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * A general utility class for dealing with dates.
 */
public class DateTools {

    public static final String DEFAULT_DATE_FORMAT = new String(""yyyy-MM-dd"");

    public static final String LONG_DATE_FORMAT = new String(""yyyy-MM-dd HH:mm:ss"");

    private static final String[] POSSIBLE_DATE_FORMATS = new String[] { DEFAULT_DATE_FORMAT, LONG_DATE_FORMAT, ""MM/dd/yyyy"", ""MM-dd-yyyy"", ""yyyy"" };

    private DateTools() {
    }

    /**
     * @param date A {@link Date} to format.
     * @return A String representation of the date parameter in
     * 		the {@link #DEFAULT_DATE_FORMAT default format}.
     */
    public static String format(Date date) {
        if (null == date) {
            return null;
        }
        SimpleDateFormat formatter = new SimpleDateFormat(DEFAULT_DATE_FORMAT);
        return formatter.format(date);
    }

    /**
     * @param date A {@link Date} to format.
     * @param format A format (corresponding to {@link SimpleDateFormat}'s syntax)
     * 		to convert the date to.
     * @return A String representation of the date parameter in the
     * 		specified format, or null if the given date is null.
     */
    public static String format(Date date, String format) {
        if (null == date) {
            return null;
        }
        SimpleDateFormat formatter = new SimpleDateFormat(format);
        return formatter.format(date);
    }

    /**
     * @param dateString A String to parse into a {@link Date} object.
     * @return A {@link Date} representation of the String when possible,
     * 		or <code>null</code> if the date cannot be parsed.
     */
    public static Date parse(String dateString) {
        Date ret = null;
        if (null != dateString) {
            boolean match = false;
            SimpleDateFormat formatter = new SimpleDateFormat();
            formatter.setLenient(false);
            for (int i = 0; i < POSSIBLE_DATE_FORMATS.length && !match; ++i) {
                formatter.applyPattern(POSSIBLE_DATE_FORMATS[i]);
                try {
                    ret = formatter.parse(dateString);
                    match = true;
                } catch (ParseException e) {
                    // do nothing
                }
            }
        }
        return ret;
    }

    /**
     * @param dateString A String to parse into a {@link Date} object.
     * @param format A format to use to parse the date parameter with.
     * @return A {@link Date} representation of the String when possible,
     * 		or <code>null</code> if the date cannot be parsed with the
     * 		given format.
     */
    public static Date parse(String dateString, String format) {
        Date ret = null;
        if (null != dateString) {
            SimpleDateFormat formatter = new SimpleDateFormat(format);
            formatter.setLenient(false);
            try {
                ret = formatter.parse(dateString);
            } catch (ParseException e) {
                // do nothing
            }
        }
        return ret;
    }

    /**
     * @param dateString A String that may or may not represent a
     * 		{@link Date} that can be parsed.
     * @return <code>true</code> if a {@link Date} can be parsed from
     * 		the String, or <code>false</code> otherwise.
     * @see #parse(String dateString)
     */
    public static boolean isValidDate(String dateString) {
        boolean match = false;
        if (null != dateString) {
            SimpleDateFormat formatter = new SimpleDateFormat();
            formatter.setLenient(false);
            for (int i = 0; i < POSSIBLE_DATE_FORMATS.length && !match; ++i) {
                formatter.applyPattern(POSSIBLE_DATE_FORMATS[i]);
                try {
                    formatter.parse(dateString);
                    match = true;
                } catch (ParseException e) {
                    // do nothing
                }
            }
        }
        return match;
    }

    /**
     * @param dateString A String that may or may not represent a
     * 		{@link Date} that can be parsed with the given format.
     * @param format A format to use to check if the String can
     * 		be parsed into a {@link Date}.
     * @return <code>true</code> if a {@link Date} can be parsed from
     * 		the String in the given format, or <code>false</code>
     * 		otherwise.
     * @see #parse(String dateString, String format)
     */
    public static boolean isValidDate(String dateString, String format) {
        boolean match = false;
        SimpleDateFormat formatter = new SimpleDateFormat(format);
        formatter.setLenient(false);
        try {
            formatter.parse(dateString);
            match = true;
        } catch (ParseException e) {
            // do nothing
        }
        return match;
    }
}
","// DateTools_2Test.java
package org.heal.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DateTools}.
* It contains one unit test case for the {@link DateTools#parse(String)} method.
*/
class DateTools_2Test {","// DateTools_2Test.java
package org.heal.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DateTools}.
* It contains one unit test case for the {@link DateTools#parse(String)} method.
*/
class DateTools_2Test {
"
684cc150-c1c5-4ca1-8ca1-fb0f6dd68758,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/util/DateTools_3Test.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// DateTools.java
package org.heal.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * A general utility class for dealing with dates.
 */
public class DateTools {

    public static final String DEFAULT_DATE_FORMAT = new String(""yyyy-MM-dd"");

    public static final String LONG_DATE_FORMAT = new String(""yyyy-MM-dd HH:mm:ss"");

    private static final String[] POSSIBLE_DATE_FORMATS = new String[] { DEFAULT_DATE_FORMAT, LONG_DATE_FORMAT, ""MM/dd/yyyy"", ""MM-dd-yyyy"", ""yyyy"" };

    private DateTools() {
    }

    /**
     * @param date A {@link Date} to format.
     * @return A String representation of the date parameter in
     * 		the {@link #DEFAULT_DATE_FORMAT default format}.
     */
    public static String format(Date date) {
        if (null == date) {
            return null;
        }
        SimpleDateFormat formatter = new SimpleDateFormat(DEFAULT_DATE_FORMAT);
        return formatter.format(date);
    }

    /**
     * @param date A {@link Date} to format.
     * @param format A format (corresponding to {@link SimpleDateFormat}'s syntax)
     * 		to convert the date to.
     * @return A String representation of the date parameter in the
     * 		specified format, or null if the given date is null.
     */
    public static String format(Date date, String format) {
        if (null == date) {
            return null;
        }
        SimpleDateFormat formatter = new SimpleDateFormat(format);
        return formatter.format(date);
    }

    /**
     * @param dateString A String to parse into a {@link Date} object.
     * @return A {@link Date} representation of the String when possible,
     * 		or <code>null</code> if the date cannot be parsed.
     */
    public static Date parse(String dateString) {
        Date ret = null;
        if (null != dateString) {
            boolean match = false;
            SimpleDateFormat formatter = new SimpleDateFormat();
            formatter.setLenient(false);
            for (int i = 0; i < POSSIBLE_DATE_FORMATS.length && !match; ++i) {
                formatter.applyPattern(POSSIBLE_DATE_FORMATS[i]);
                try {
                    ret = formatter.parse(dateString);
                    match = true;
                } catch (ParseException e) {
                    // do nothing
                }
            }
        }
        return ret;
    }

    /**
     * @param dateString A String to parse into a {@link Date} object.
     * @param format A format to use to parse the date parameter with.
     * @return A {@link Date} representation of the String when possible,
     * 		or <code>null</code> if the date cannot be parsed with the
     * 		given format.
     */
    public static Date parse(String dateString, String format) {
        Date ret = null;
        if (null != dateString) {
            SimpleDateFormat formatter = new SimpleDateFormat(format);
            formatter.setLenient(false);
            try {
                ret = formatter.parse(dateString);
            } catch (ParseException e) {
                // do nothing
            }
        }
        return ret;
    }

    /**
     * @param dateString A String that may or may not represent a
     * 		{@link Date} that can be parsed.
     * @return <code>true</code> if a {@link Date} can be parsed from
     * 		the String, or <code>false</code> otherwise.
     * @see #parse(String dateString)
     */
    public static boolean isValidDate(String dateString) {
        boolean match = false;
        if (null != dateString) {
            SimpleDateFormat formatter = new SimpleDateFormat();
            formatter.setLenient(false);
            for (int i = 0; i < POSSIBLE_DATE_FORMATS.length && !match; ++i) {
                formatter.applyPattern(POSSIBLE_DATE_FORMATS[i]);
                try {
                    formatter.parse(dateString);
                    match = true;
                } catch (ParseException e) {
                    // do nothing
                }
            }
        }
        return match;
    }

    /**
     * @param dateString A String that may or may not represent a
     * 		{@link Date} that can be parsed with the given format.
     * @param format A format to use to check if the String can
     * 		be parsed into a {@link Date}.
     * @return <code>true</code> if a {@link Date} can be parsed from
     * 		the String in the given format, or <code>false</code>
     * 		otherwise.
     * @see #parse(String dateString, String format)
     */
    public static boolean isValidDate(String dateString, String format) {
        boolean match = false;
        SimpleDateFormat formatter = new SimpleDateFormat(format);
        formatter.setLenient(false);
        try {
            formatter.parse(dateString);
            match = true;
        } catch (ParseException e) {
            // do nothing
        }
        return match;
    }
}
","// DateTools_3Test.java
package org.heal.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DateTools}.
* It contains one unit test case for the {@link DateTools#parse(String, String)} method.
*/
class DateTools_3Test {","// DateTools_3Test.java
package org.heal.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DateTools}.
* It contains one unit test case for the {@link DateTools#parse(String, String)} method.
*/
class DateTools_3Test {
"
21a9206a-f3e0-4d2e-9e57-02da5d9ea15d,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/util/DateTools_4Test.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// DateTools.java
package org.heal.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * A general utility class for dealing with dates.
 */
public class DateTools {

    public static final String DEFAULT_DATE_FORMAT = new String(""yyyy-MM-dd"");

    public static final String LONG_DATE_FORMAT = new String(""yyyy-MM-dd HH:mm:ss"");

    private static final String[] POSSIBLE_DATE_FORMATS = new String[] { DEFAULT_DATE_FORMAT, LONG_DATE_FORMAT, ""MM/dd/yyyy"", ""MM-dd-yyyy"", ""yyyy"" };

    private DateTools() {
    }

    /**
     * @param date A {@link Date} to format.
     * @return A String representation of the date parameter in
     * 		the {@link #DEFAULT_DATE_FORMAT default format}.
     */
    public static String format(Date date) {
        if (null == date) {
            return null;
        }
        SimpleDateFormat formatter = new SimpleDateFormat(DEFAULT_DATE_FORMAT);
        return formatter.format(date);
    }

    /**
     * @param date A {@link Date} to format.
     * @param format A format (corresponding to {@link SimpleDateFormat}'s syntax)
     * 		to convert the date to.
     * @return A String representation of the date parameter in the
     * 		specified format, or null if the given date is null.
     */
    public static String format(Date date, String format) {
        if (null == date) {
            return null;
        }
        SimpleDateFormat formatter = new SimpleDateFormat(format);
        return formatter.format(date);
    }

    /**
     * @param dateString A String to parse into a {@link Date} object.
     * @return A {@link Date} representation of the String when possible,
     * 		or <code>null</code> if the date cannot be parsed.
     */
    public static Date parse(String dateString) {
        Date ret = null;
        if (null != dateString) {
            boolean match = false;
            SimpleDateFormat formatter = new SimpleDateFormat();
            formatter.setLenient(false);
            for (int i = 0; i < POSSIBLE_DATE_FORMATS.length && !match; ++i) {
                formatter.applyPattern(POSSIBLE_DATE_FORMATS[i]);
                try {
                    ret = formatter.parse(dateString);
                    match = true;
                } catch (ParseException e) {
                    // do nothing
                }
            }
        }
        return ret;
    }

    /**
     * @param dateString A String to parse into a {@link Date} object.
     * @param format A format to use to parse the date parameter with.
     * @return A {@link Date} representation of the String when possible,
     * 		or <code>null</code> if the date cannot be parsed with the
     * 		given format.
     */
    public static Date parse(String dateString, String format) {
        Date ret = null;
        if (null != dateString) {
            SimpleDateFormat formatter = new SimpleDateFormat(format);
            formatter.setLenient(false);
            try {
                ret = formatter.parse(dateString);
            } catch (ParseException e) {
                // do nothing
            }
        }
        return ret;
    }

    /**
     * @param dateString A String that may or may not represent a
     * 		{@link Date} that can be parsed.
     * @return <code>true</code> if a {@link Date} can be parsed from
     * 		the String, or <code>false</code> otherwise.
     * @see #parse(String dateString)
     */
    public static boolean isValidDate(String dateString) {
        boolean match = false;
        if (null != dateString) {
            SimpleDateFormat formatter = new SimpleDateFormat();
            formatter.setLenient(false);
            for (int i = 0; i < POSSIBLE_DATE_FORMATS.length && !match; ++i) {
                formatter.applyPattern(POSSIBLE_DATE_FORMATS[i]);
                try {
                    formatter.parse(dateString);
                    match = true;
                } catch (ParseException e) {
                    // do nothing
                }
            }
        }
        return match;
    }

    /**
     * @param dateString A String that may or may not represent a
     * 		{@link Date} that can be parsed with the given format.
     * @param format A format to use to check if the String can
     * 		be parsed into a {@link Date}.
     * @return <code>true</code> if a {@link Date} can be parsed from
     * 		the String in the given format, or <code>false</code>
     * 		otherwise.
     * @see #parse(String dateString, String format)
     */
    public static boolean isValidDate(String dateString, String format) {
        boolean match = false;
        SimpleDateFormat formatter = new SimpleDateFormat(format);
        formatter.setLenient(false);
        try {
            formatter.parse(dateString);
            match = true;
        } catch (ParseException e) {
            // do nothing
        }
        return match;
    }
}
","// DateTools_4Test.java
package org.heal.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DateTools}.
* It contains one unit test case for the {@link DateTools#isValidDate(String)} method.
*/
class DateTools_4Test {","// DateTools_4Test.java
package org.heal.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DateTools}.
* It contains one unit test case for the {@link DateTools#isValidDate(String)} method.
*/
class DateTools_4Test {
"
371fb188-c50a-491b-8abe-854452bcbbe1,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/util/DateTools_5Test.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// DateTools.java
package org.heal.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * A general utility class for dealing with dates.
 */
public class DateTools {

    public static final String DEFAULT_DATE_FORMAT = new String(""yyyy-MM-dd"");

    public static final String LONG_DATE_FORMAT = new String(""yyyy-MM-dd HH:mm:ss"");

    private static final String[] POSSIBLE_DATE_FORMATS = new String[] { DEFAULT_DATE_FORMAT, LONG_DATE_FORMAT, ""MM/dd/yyyy"", ""MM-dd-yyyy"", ""yyyy"" };

    private DateTools() {
    }

    /**
     * @param date A {@link Date} to format.
     * @return A String representation of the date parameter in
     * 		the {@link #DEFAULT_DATE_FORMAT default format}.
     */
    public static String format(Date date) {
        if (null == date) {
            return null;
        }
        SimpleDateFormat formatter = new SimpleDateFormat(DEFAULT_DATE_FORMAT);
        return formatter.format(date);
    }

    /**
     * @param date A {@link Date} to format.
     * @param format A format (corresponding to {@link SimpleDateFormat}'s syntax)
     * 		to convert the date to.
     * @return A String representation of the date parameter in the
     * 		specified format, or null if the given date is null.
     */
    public static String format(Date date, String format) {
        if (null == date) {
            return null;
        }
        SimpleDateFormat formatter = new SimpleDateFormat(format);
        return formatter.format(date);
    }

    /**
     * @param dateString A String to parse into a {@link Date} object.
     * @return A {@link Date} representation of the String when possible,
     * 		or <code>null</code> if the date cannot be parsed.
     */
    public static Date parse(String dateString) {
        Date ret = null;
        if (null != dateString) {
            boolean match = false;
            SimpleDateFormat formatter = new SimpleDateFormat();
            formatter.setLenient(false);
            for (int i = 0; i < POSSIBLE_DATE_FORMATS.length && !match; ++i) {
                formatter.applyPattern(POSSIBLE_DATE_FORMATS[i]);
                try {
                    ret = formatter.parse(dateString);
                    match = true;
                } catch (ParseException e) {
                    // do nothing
                }
            }
        }
        return ret;
    }

    /**
     * @param dateString A String to parse into a {@link Date} object.
     * @param format A format to use to parse the date parameter with.
     * @return A {@link Date} representation of the String when possible,
     * 		or <code>null</code> if the date cannot be parsed with the
     * 		given format.
     */
    public static Date parse(String dateString, String format) {
        Date ret = null;
        if (null != dateString) {
            SimpleDateFormat formatter = new SimpleDateFormat(format);
            formatter.setLenient(false);
            try {
                ret = formatter.parse(dateString);
            } catch (ParseException e) {
                // do nothing
            }
        }
        return ret;
    }

    /**
     * @param dateString A String that may or may not represent a
     * 		{@link Date} that can be parsed.
     * @return <code>true</code> if a {@link Date} can be parsed from
     * 		the String, or <code>false</code> otherwise.
     * @see #parse(String dateString)
     */
    public static boolean isValidDate(String dateString) {
        boolean match = false;
        if (null != dateString) {
            SimpleDateFormat formatter = new SimpleDateFormat();
            formatter.setLenient(false);
            for (int i = 0; i < POSSIBLE_DATE_FORMATS.length && !match; ++i) {
                formatter.applyPattern(POSSIBLE_DATE_FORMATS[i]);
                try {
                    formatter.parse(dateString);
                    match = true;
                } catch (ParseException e) {
                    // do nothing
                }
            }
        }
        return match;
    }

    /**
     * @param dateString A String that may or may not represent a
     * 		{@link Date} that can be parsed with the given format.
     * @param format A format to use to check if the String can
     * 		be parsed into a {@link Date}.
     * @return <code>true</code> if a {@link Date} can be parsed from
     * 		the String in the given format, or <code>false</code>
     * 		otherwise.
     * @see #parse(String dateString, String format)
     */
    public static boolean isValidDate(String dateString, String format) {
        boolean match = false;
        SimpleDateFormat formatter = new SimpleDateFormat(format);
        formatter.setLenient(false);
        try {
            formatter.parse(dateString);
            match = true;
        } catch (ParseException e) {
            // do nothing
        }
        return match;
    }
}
","// DateTools_5Test.java
package org.heal.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DateTools}.
* It contains one unit test case for the {@link DateTools#isValidDate(String, String)} method.
*/
class DateTools_5Test {","// DateTools_5Test.java
package org.heal.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DateTools}.
* It contains one unit test case for the {@link DateTools#isValidDate(String, String)} method.
*/
class DateTools_5Test {
"
afda8310-7099-43a1-bf13-10ff8134a8e3,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/module/catalog/QueueDAO_0Test.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// QueueDAO.java
package org.heal.module.catalog;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.MetadataDAO;
import org.heal.util.CommonDAO;
import javax.sql.DataSource;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * A DAO for managing queues stored in the database
 */
public class QueueDAO implements Serializable {

    public QueueDAO() {
    }

    public static final String TYPE_APPROVAL = new String(""approval"");

    public static final String TYPE_CATALOG = new String(""catalog"");

    private DataSource dataSource;

    private CommonDAO cd = new CommonDAO();

    private MetadataDAO md = new MetadataDAO();

    private static final String SELECT_QUEUE_BY_TYPE = ""SELECT QueuedRecordId,"" + "" MetadataId, Status, Comments FROM QueuedRecords WHERE Type LIKE ?"";

    private static final String INSERT_QUEUE_ENTRY = ""INSERT INTO QueuedRecords"" + "" (Type, MetadataId, Status, Comments) VALUES (?, ?, ?, ?)"";

    private static final String UPDATE_QUEUE_ENTRY = ""UPDATE QueuedRecords"" + "" SET Type = ?, MetadataId = ?, Status = ?, Comments = ? WHERE"" + "" QueuedRecordId = ?"";

    private static final String DELETE_QUEUE_ENTRY = ""DELETE FROM QueuedRecords"" + "" WHERE QueuedRecordId = ?"";

    public void setDataSource(final DataSource dataSource) {
        this.dataSource = dataSource;
        cd.setDataSource(dataSource);
        md.setDataSource(dataSource);
    }

    /**
     * @param type The type of QueuedRecordBeans to get.
     *
     * @return A List of QueuedRecordBeans.
     */
    public List<QueuedRecordBean> getQueueByType(final String type) {
        List<QueuedRecordBean> result = null;
        Connection conn = null;
        try {
            conn = dataSource.getConnection();
            result = getQueue(type, conn);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (null != conn) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    /**
     * @return The List of QueuedRecordBeans representing the catalog queue.
     */
    public List<QueuedRecordBean> getCatalogQueue() {
        return getQueueByType(TYPE_CATALOG);
    }

    /**
     * @return The List of QueuedRecordBeans representing the approval queue.
     */
    public List<QueuedRecordBean> getApprovalQueue() {
        return getQueueByType(TYPE_APPROVAL);
    }

    public List<QueuedRecordBean> getQueue(final String type, final Connection conn) throws SQLException {
        final List<QueuedRecordBean> result = new ArrayList<QueuedRecordBean>();
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SELECT_QUEUE_BY_TYPE);
            ps.setString(1, type);
            rs = ps.executeQuery();
            while (rs.next()) {
                final QueuedRecordBean queueMember = new QueuedRecordBean();
                queueMember.setQueuedRecordId(rs.getString(1));
                queueMember.getShortMetadata().setMetadataId(rs.getString(2));
                queueMember.setStatus(rs.getString(3));
                queueMember.setComments(rs.getString(4));
                result.add(queueMember);
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (ps != null) {
                ps.close();
            }
        }
        for (QueuedRecordBean temp : result) {
            final String metadataId = temp.getShortMetadata().getMetadataId();
            // Here we're putting a MetadataBean into a ShortMetadataBean reference
            // because it's necessary for the queue display pages
            temp.setShortMetadata(md.getMetadata(metadataId));
        }
        return result;
    }

    /**
     * Saves a {@link QueuedRecordBean} to the database.
     *
     * @param queuedRecord A non-null QueuedRecordBean to save.
     *
     * @return <code>true</code> if the save is successful, false otherwise.
     */
    public boolean saveQueuedRecord(final QueuedRecordBean queuedRecord) {
        boolean result = false;
        if (null == queuedRecord) {
            throw new IllegalArgumentException(""queuedRecord argument must be non-null"");
        }
        if (null == queuedRecord.getType()) {
            throw new IllegalArgumentException(""Cannot save a QueuedRecordBean without a type"");
        }
        if (null == queuedRecord.getShortMetadata() || null == queuedRecord.getShortMetadata().getMetadataId()) {
            throw new IllegalArgumentException(""Cannot save a queued record without a metadataId"");
        }
        Connection conn = null;
        try {
            conn = dataSource.getConnection();
            saveQueuedRecord(queuedRecord, conn);
            result = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (null != conn) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public void saveQueuedRecord(final QueuedRecordBean queuedRecord, final Connection conn) throws SQLException {
        final boolean isUpdate = null != queuedRecord.getQueuedRecordId();
        final String sql = isUpdate ? UPDATE_QUEUE_ENTRY : INSERT_QUEUE_ENTRY;
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1, queuedRecord.getType());
            ps.setString(2, queuedRecord.getShortMetadata().getMetadataId());
            ps.setString(3, queuedRecord.getStatus());
            ps.setString(4, queuedRecord.getComments());
            if (isUpdate) {
                ps.setString(5, queuedRecord.getQueuedRecordId());
            }
            ps.executeUpdate();
        } finally {
            if (null != ps) {
                ps.close();
            }
        }
    }

    public boolean enqueue(final String type, final String metadataId) {
        boolean result = false;
        Connection conn = null;
        try {
            conn = dataSource.getConnection();
            final QueuedRecordBean temp = new QueuedRecordBean();
            temp.setType(type);
            temp.getShortMetadata().setMetadataId(metadataId);
            saveQueuedRecord(temp, conn);
            result = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (null != conn) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public boolean dequeue(final String queuedRecordId) {
        boolean result = false;
        Connection conn = null;
        try {
            conn = dataSource.getConnection();
            dequeue(queuedRecordId, conn);
            result = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (null != conn) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public void dequeue(final String queuedRecordId, final Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(DELETE_QUEUE_ENTRY);
            ps.setString(1, queuedRecordId);
            ps.executeUpdate();
        } finally {
            if (null != ps) {
                ps.close();
            }
        }
    }

    public boolean markRecordApproved(final String metadataId) {
        boolean result = false;
        Connection conn = null;
        try {
            conn = dataSource.getConnection();
            cd.updateMetadataTimestampProperty(""ApproveDate"", new Timestamp(System.currentTimeMillis()), metadataId, conn);
            result = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (null != conn) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public boolean markRecordCataloged(final String metadataId) {
        boolean result = false;
        Connection conn = null;
        try {
            conn = dataSource.getConnection();
            final CompleteMetadataBean cmb = md.getCompleteMetadata(metadataId, conn);
            final Date now = new Date();
            cmb.setCatalogDate(now);
            cmb.setPublicationDate(now);
            cmb.setPrivate(false);
            md.saveCompleteMetadata(cmb, conn);
            result = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (null != conn) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public boolean rejectRecord(final String metadataId) {
        boolean result = false;
        Connection conn = null;
        try {
            conn = dataSource.getConnection();
            cd.updateMetadataTimestampProperty(""RejectDate"", new Timestamp(System.currentTimeMillis()), metadataId, conn);
            result = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (null != conn) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }
}
","// QueueDAO_0Test.java
package org.heal.module.catalog;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.MetadataDAO;
import org.heal.util.CommonDAO;
import javax.sql.DataSource;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QueueDAO}.
* It contains one unit test case for the {@link QueueDAO#getQueueByType(String)} method.
*/
class QueueDAO_0Test {","// QueueDAO_0Test.java
package org.heal.module.catalog;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.MetadataDAO;
import org.heal.util.CommonDAO;
import javax.sql.DataSource;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QueueDAO}.
* It contains one unit test case for the {@link QueueDAO#getQueueByType(String)} method.
*/
class QueueDAO_0Test {
"
dd7878e9-7262-47cb-9f32-e0794454b4eb,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/module/catalog/QueueDAO_2Test.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// QueueDAO.java
package org.heal.module.catalog;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.MetadataDAO;
import org.heal.util.CommonDAO;
import javax.sql.DataSource;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * A DAO for managing queues stored in the database
 */
public class QueueDAO implements Serializable {

    public QueueDAO() {
    }

    public static final String TYPE_APPROVAL = new String(""approval"");

    public static final String TYPE_CATALOG = new String(""catalog"");

    private DataSource dataSource;

    private CommonDAO cd = new CommonDAO();

    private MetadataDAO md = new MetadataDAO();

    private static final String SELECT_QUEUE_BY_TYPE = ""SELECT QueuedRecordId,"" + "" MetadataId, Status, Comments FROM QueuedRecords WHERE Type LIKE ?"";

    private static final String INSERT_QUEUE_ENTRY = ""INSERT INTO QueuedRecords"" + "" (Type, MetadataId, Status, Comments) VALUES (?, ?, ?, ?)"";

    private static final String UPDATE_QUEUE_ENTRY = ""UPDATE QueuedRecords"" + "" SET Type = ?, MetadataId = ?, Status = ?, Comments = ? WHERE"" + "" QueuedRecordId = ?"";

    private static final String DELETE_QUEUE_ENTRY = ""DELETE FROM QueuedRecords"" + "" WHERE QueuedRecordId = ?"";

    public void setDataSource(final DataSource dataSource) {
        this.dataSource = dataSource;
        cd.setDataSource(dataSource);
        md.setDataSource(dataSource);
    }

    /**
     * @param type The type of QueuedRecordBeans to get.
     *
     * @return A List of QueuedRecordBeans.
     */
    public List<QueuedRecordBean> getQueueByType(final String type) {
        List<QueuedRecordBean> result = null;
        Connection conn = null;
        try {
            conn = dataSource.getConnection();
            result = getQueue(type, conn);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (null != conn) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    /**
     * @return The List of QueuedRecordBeans representing the catalog queue.
     */
    public List<QueuedRecordBean> getCatalogQueue() {
        return getQueueByType(TYPE_CATALOG);
    }

    /**
     * @return The List of QueuedRecordBeans representing the approval queue.
     */
    public List<QueuedRecordBean> getApprovalQueue() {
        return getQueueByType(TYPE_APPROVAL);
    }

    public List<QueuedRecordBean> getQueue(final String type, final Connection conn) throws SQLException {
        final List<QueuedRecordBean> result = new ArrayList<QueuedRecordBean>();
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SELECT_QUEUE_BY_TYPE);
            ps.setString(1, type);
            rs = ps.executeQuery();
            while (rs.next()) {
                final QueuedRecordBean queueMember = new QueuedRecordBean();
                queueMember.setQueuedRecordId(rs.getString(1));
                queueMember.getShortMetadata().setMetadataId(rs.getString(2));
                queueMember.setStatus(rs.getString(3));
                queueMember.setComments(rs.getString(4));
                result.add(queueMember);
            }
        } finally {
            if (rs != null) {
                rs.close();
            }
            if (ps != null) {
                ps.close();
            }
        }
        for (QueuedRecordBean temp : result) {
            final String metadataId = temp.getShortMetadata().getMetadataId();
            // Here we're putting a MetadataBean into a ShortMetadataBean reference
            // because it's necessary for the queue display pages
            temp.setShortMetadata(md.getMetadata(metadataId));
        }
        return result;
    }

    /**
     * Saves a {@link QueuedRecordBean} to the database.
     *
     * @param queuedRecord A non-null QueuedRecordBean to save.
     *
     * @return <code>true</code> if the save is successful, false otherwise.
     */
    public boolean saveQueuedRecord(final QueuedRecordBean queuedRecord) {
        boolean result = false;
        if (null == queuedRecord) {
            throw new IllegalArgumentException(""queuedRecord argument must be non-null"");
        }
        if (null == queuedRecord.getType()) {
            throw new IllegalArgumentException(""Cannot save a QueuedRecordBean without a type"");
        }
        if (null == queuedRecord.getShortMetadata() || null == queuedRecord.getShortMetadata().getMetadataId()) {
            throw new IllegalArgumentException(""Cannot save a queued record without a metadataId"");
        }
        Connection conn = null;
        try {
            conn = dataSource.getConnection();
            saveQueuedRecord(queuedRecord, conn);
            result = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (null != conn) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public void saveQueuedRecord(final QueuedRecordBean queuedRecord, final Connection conn) throws SQLException {
        final boolean isUpdate = null != queuedRecord.getQueuedRecordId();
        final String sql = isUpdate ? UPDATE_QUEUE_ENTRY : INSERT_QUEUE_ENTRY;
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1, queuedRecord.getType());
            ps.setString(2, queuedRecord.getShortMetadata().getMetadataId());
            ps.setString(3, queuedRecord.getStatus());
            ps.setString(4, queuedRecord.getComments());
            if (isUpdate) {
                ps.setString(5, queuedRecord.getQueuedRecordId());
            }
            ps.executeUpdate();
        } finally {
            if (null != ps) {
                ps.close();
            }
        }
    }

    public boolean enqueue(final String type, final String metadataId) {
        boolean result = false;
        Connection conn = null;
        try {
            conn = dataSource.getConnection();
            final QueuedRecordBean temp = new QueuedRecordBean();
            temp.setType(type);
            temp.getShortMetadata().setMetadataId(metadataId);
            saveQueuedRecord(temp, conn);
            result = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (null != conn) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public boolean dequeue(final String queuedRecordId) {
        boolean result = false;
        Connection conn = null;
        try {
            conn = dataSource.getConnection();
            dequeue(queuedRecordId, conn);
            result = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (null != conn) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public void dequeue(final String queuedRecordId, final Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(DELETE_QUEUE_ENTRY);
            ps.setString(1, queuedRecordId);
            ps.executeUpdate();
        } finally {
            if (null != ps) {
                ps.close();
            }
        }
    }

    public boolean markRecordApproved(final String metadataId) {
        boolean result = false;
        Connection conn = null;
        try {
            conn = dataSource.getConnection();
            cd.updateMetadataTimestampProperty(""ApproveDate"", new Timestamp(System.currentTimeMillis()), metadataId, conn);
            result = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (null != conn) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public boolean markRecordCataloged(final String metadataId) {
        boolean result = false;
        Connection conn = null;
        try {
            conn = dataSource.getConnection();
            final CompleteMetadataBean cmb = md.getCompleteMetadata(metadataId, conn);
            final Date now = new Date();
            cmb.setCatalogDate(now);
            cmb.setPublicationDate(now);
            cmb.setPrivate(false);
            md.saveCompleteMetadata(cmb, conn);
            result = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (null != conn) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }

    public boolean rejectRecord(final String metadataId) {
        boolean result = false;
        Connection conn = null;
        try {
            conn = dataSource.getConnection();
            cd.updateMetadataTimestampProperty(""RejectDate"", new Timestamp(System.currentTimeMillis()), metadataId, conn);
            result = true;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            if (null != conn) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return result;
    }
}
","// QueueDAO_2Test.java
package org.heal.module.catalog;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.MetadataDAO;
import org.heal.util.CommonDAO;
import javax.sql.DataSource;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QueueDAO}.
* It contains one unit test case for the {@link QueueDAO#saveQueuedRecord(QueuedRecordBean)} method.
*/
class QueueDAO_2Test {","// QueueDAO_2Test.java
package org.heal.module.catalog;

import org.heal.module.metadata.CompleteMetadataBean;
import org.heal.module.metadata.MetadataDAO;
import org.heal.util.CommonDAO;
import javax.sql.DataSource;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link QueueDAO}.
* It contains one unit test case for the {@link QueueDAO#saveQueuedRecord(QueuedRecordBean)} method.
*/
class QueueDAO_2Test {
"
4e143d48-b3cb-4b61-ba3d-0f12dff010bb,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/module/search/ParameterBean_1Test.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// ParameterBean.java
package org.heal.module.search;

import java.util.*;

/**
 * This ParameterBean class stores an ArrayList of searchParameters and
 * tableList The search Parameters stores a array of ParameterNode that contains
 * information on user input in the format of columnInfo, value and relation to
 * next ParameterNode.
 * The tableList stores a list of tables that are needed to form the query. It
 * is parsed from the searchParameters.
 *
 * @author Julie Zhu
 *         Modify by Grace: Added String[] sourceCollection, rights and PrimaryArray
 *         Modified by Julie: Added Boolean variable for Hidden;
 */
public class ParameterBean {

    private ArrayList searchParameters = null;

    private ArrayList tableList = null;

    private String[] filterArray = null;

    private String[] sourceCollection = null;

    private String[] publicationNames = null;

    private String[] publicationIds = null;

    private String rights = null;

    private String[] primaryArray = null;

    private boolean hidden = false;

    private String[] imaging = null;

    private String[] disease = null;

    /**
     * Constructor
     */
    public ParameterBean() {
        searchParameters = new ArrayList();
        tableList = new ArrayList();
    }

    /**
     * New constructor
     */
    public ParameterBean(String keywordString) {
        searchParameters = new ArrayList();
        tableList = new ArrayList();
        makeParameterBean(keywordString);
    }

    /**
     * Accessor method, returns the parameterNode at specified position
     *
     * @param position
     *
     * @return ParameterNode
     */
    public ParameterNode getParameters(int position) {
        return (ParameterNode) searchParameters.get(position);
    }

    /**
     * Accessor method, returns the searchParameter size
     *
     * @return int
     */
    public int size() {
        return searchParameters.size();
    }

    /**
     * return the filterArray
     *
     * @return
     */
    public String[] getFilterArray() {
        return filterArray;
    }

    /**
     * return the diseasePrecess array
     * @return disease
     */
    public String[] getDisease() {
        return disease;
    }

    /**
     * return the imaging technique Array
     * @return imaging
     */
    public String[] getImaging() {
        return imaging;
    }

    /**
     * return the Source collection Array
     *
     * @return sourceCollection
     */
    public String[] getSourceCollection() {
        return sourceCollection;
    }

    /**
     * return the usage rights array
     *
     * @return rights
     */
    public String getUsageRight() {
        return rights;
    }

    /**
     * return the primary audience Array
     *
     * @return primary
     */
    public String[] getPrimaryArray() {
        return primaryArray;
    }

    /**
     * Return the value for hidden
     *
     * @return
     */
    public boolean getHidden() {
        return hidden;
    }

    /**
     * Adds parameterNode into the ArrayList
     *
     * @param input
     */
    public void addParameters(ParameterNode input) {
        searchParameters.add(input);
    }

    /**
     * Adds filter array into the parameterBean
     *
     * @param filter
     */
    public void setFilterArray(String[] filter) {
        filterArray = filter;
    }

    /**
     * Adds source collection array into the parameterBean
     *
     * @param source
     */
    public void setSourceCollection(String[] source) {
        sourceCollection = source;
    }

    /**
     * Adds usage rights array into the parameterBean
     *
     * @param rts
     */
    public void setUsageRights(String rts) {
        rights = rts;
    }

    /**
     * Adds primary audience array into the parameterBean
     *
     * @param primary
     */
    public void setPrimaryArray(String[] primary) {
        primaryArray = primary;
    }

    /**
     * Adds imaging technique array into the parameterBean
     * @param source
     */
    public void setImaging(String[] imgs) {
        imaging = imgs;
    }

    /**
     * Adds disease precess array into the parameterBean
     * @param rts
     */
    public void setDisease(String[] dis) {
        disease = dis;
    }

    /**
     * sets the value for hidden
     *
     * @param value
     */
    public void setHidden(boolean value) {
        hidden = value;
    }

    /**
     * This is a wrapper that calls for functions to parse the table name.
     * If the tableList is empty, it calls for function to create the tableList,
     * else it returns the tableList as ArrayList.
     *
     * @return ArrayList of tableName
     */
    public ArrayList getTableList() {
        if (tableList.isEmpty()) {
            makeTableList();
        }
        return tableList;
    }

    /**
     * Checks if the table name already exists in the tableList. If not, adds the
     * table name into the tableList.
     *
     * @param table
     *
     * @return boolean
     */
    private boolean tableNotFound(String table) {
        int temp = tableList.size();
        int i = 0;
        boolean notFound = true;
        while ((i < temp) && (notFound)) {
            if (((String) tableList.get(i)).compareTo(table) == 0) {
                notFound = false;
            } else {
                i++;
            }
        }
        return notFound;
    }

    /**
     * main function to create the tableList. Parses through the searchParameter
     * one by one and checks for the table name.
     */
    private void makeTableList() {
        int temp = searchParameters.size();
        for (int i = 0; i < temp; i++) {
            ParameterNode input = (ParameterNode) searchParameters.get(i);
            String table = input.getTableName();
            if (tableNotFound(table)) {
                tableList.add(input.getTableName());
            }
        }
    }

    public void setPublicationNames(String[] names) {
        publicationNames = names;
    }

    public String[] getPublicationNames() {
        return publicationNames;
    }

    public void setPublicationIds(String[] publicationIds) {
        this.publicationIds = publicationIds;
    }

    public String[] getPublicationIds() {
        return publicationIds;
    }

    public ParameterBean makeParameterBean(String keywordString) {
        ParameterBean param = new ParameterBean();
        ParameterNode pam = new ParameterNode();
        String keywords = """";
        boolean stype = false;
        if (keywordString.equals("""")) {
            keywordString = ""%"";
            //System.out.print(keywordString);
        }
        String relation = ""AND"";
        //dummy variable
        String columInfo = ""ALL.ALL"";
        this.setHidden(false);
        keywordString = keywordString.trim();
        //mapping the terms from the interface to the database tablename and columns
        if (keywordString.length() > 0) {
            //switch to lower case
            keywordString = keywordString.toLowerCase();
            //make ' into two 's so that it does not cause error for database
            keywordString = keywordString.replaceAll(""\'"", ""''"");
            //System.out.println(keywordString);
            //make "" separate so that it becomes a token
            keywordString = keywordString.replaceAll(""\"""", "" \"" "");
            StringBuffer buf = new StringBuffer();
            StringTokenizer tk = new StringTokenizer(keywordString);
            String key;
            while (tk.hasMoreTokens()) {
                key = tk.nextToken();
                if (//if "" means exact match
                key.compareTo(""\"""") == 0) {
                    buf.delete(0, buf.length());
                    boolean end = false;
                    while (//attach the string until the ending "" is found
                    tk.hasMoreTokens() && end == false) {
                        key = tk.nextToken();
                        if (key.compareTo(""\"""") == 0) {
                            end = true;
                            key = buf.toString();
                            stype = true;
                        } else
                            buf.append(key + "" "");
                    }
                    key = buf.toString();
                    key = key.trim();
                    if (//if there is ending "", take as exact match
                    end) {
                        pam = new ParameterNode(columInfo, key, relation, stype);
                        this.addParameters(pam);
                    } else //if there is no ending "", take as default ""and"" and parse the word
                    {
                        StringTokenizer token = new StringTokenizer(key);
                        while (token.hasMoreTokens()) {
                            key = token.nextToken();
                            if (key.compareTo(""or"") == 0) {
                                relation = ""OR"";
                            } else if (key.compareTo(""and"") == 0) {
                                relation = ""AND"";
                            } else if (key.compareTo(""NOT"") == 0) {
                                relation = ""NOT"";
                            } else {
                                pam = new ParameterNode(columInfo, key, relation);
                                this.addParameters(pam);
                                relation = ""AND"";
                            }
                        }
                    }
                } else if (key.compareTo(""or"") == 0) {
                    relation = ""OR"";
                } else if (key.compareTo(""and"") == 0) {
                    relation = ""AND"";
                } else if (key.compareTo(""not"") == 0) {
                    relation = ""NOT"";
                } else //treat as individual keyword and passes it into the parameterbean
                {
                    pam = new ParameterNode(columInfo, key, relation);
                    this.addParameters(pam);
                    relation = ""AND"";
                }
                //end of if else
            }
            //end of while
        }
        return param;
    }
}
","// ParameterBean_1Test.java
package org.heal.module.search;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParameterBean}.
* It contains one unit test case for the {@link ParameterBean#size()} method.
*/
class ParameterBean_1Test {","// ParameterBean_1Test.java
package org.heal.module.search;

import java.util.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link ParameterBean}.
* It contains one unit test case for the {@link ParameterBean#size()} method.
*/
class ParameterBean_1Test {
"
32f87592-8b2c-4f78-a1d3-9d379d19f443,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/module/download/DownloadQueueBean_3Test.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// DownloadQueueBean.java
package org.heal.module.download;

import java.io.File;
import java.io.Serializable;
import java.util.Collection;
import java.util.TreeSet;

/**
 * Stores a list of contentIds and a package file location and url.
 *
 * @author Seth Wright
 * @version 0.1
 */
public class DownloadQueueBean implements Serializable {

    TreeSet contentSet = new TreeSet();

    String packageFileLocation = null;

    String packageURL = null;

    boolean packageModifiedSinceFileCreated = true;

    int packageFormat = -1;

    /**
     * Get a collection of content Ids.
     */
    public Collection getContentIds() {
        return contentSet;
    }

    /**
     * Returns true if the package has not been modified,
     * the package file location is not null, the
     * package URL is set, and the format of the
     * package is the same as that provided and
     * the package file exists on disk.
     */
    public boolean isPackageFileUpToDate(int format) {
        if (packageModifiedSinceFileCreated || packageFileLocation == null || packageURL == null || format != packageFormat || !(new File(packageFileLocation)).exists()) {
            return false;
        }
        return true;
    }

    /**
     * Returns the format for the package associated with this queue.
     * The value will be one of the static values defined in
     * DownloadServicesBean (ZIPFORMAT, GZIPFORMAT), or -1 if there
     * is no package associated with this queue.
     */
    public int getPackageFormat() {
        return packageFormat;
    }

    /**
     * Sets the format for the package associated with this queue.
     * This value should be one of the static values defined in
     * DownloadServicesBean (ZIPFORMAT, GZIPFORMAT), or -1 if there
     * is no package associated with this queue.
     */
    public void setPackageFormat(int newPackageFormat) {
        packageFormat = newPackageFormat;
    }

    /**
     * Returns the file path to be used to access the package for this queue.
     */
    public String getPackageFileLocation() {
        return packageFileLocation;
    }

    public void setPackageFileLocation(String newPackageFileLocation) {
        packageFileLocation = newPackageFileLocation;
    }

    /**
     * Returns the URL to be used to access the package for this queue.
     */
    public String getPackageURL() {
        return packageURL;
    }

    /**
     * Sets the url used to access this package file.
     */
    public void setPackageURL(String newPackageURL) {
        packageURL = newPackageURL;
    }

    /**
     * call this method right after the package file is created.
     * This is used to track whether or not the queue has been modified
     * since the last time the associated file was created.
     */
    public void setPackageFileCreated() {
        packageModifiedSinceFileCreated = false;
    }

    /**
     * Checks whether or not the queue has changed since the last time
     * the package was generated.  If the queue has had metadata entries
     * added or removed since the last time the package has been
     * generated or the package has not yet been generated yet, then this
     * method will return true
     * otherwise, it will return false
     */
    public boolean isPackageModified() {
        return packageModifiedSinceFileCreated;
    }

    /**
     * Adds a metadata id to the list of content to include in the package
     * generated for this queue.
     */
    public boolean addToQueue(String contentId) {
        packageModifiedSinceFileCreated = true;
        contentSet.add(contentId);
        return true;
    }

    /**
     * Removes a metadata id from the list of content to include in the package
     * generated for this queue.
     */
    public boolean removeFromQueue(String contentId) {
        packageModifiedSinceFileCreated = true;
        return contentSet.remove(contentId);
    }

    /**
     * Removes all metadata id from the list of content to include in the
     * package generated for this queue.
     */
    public boolean removeAllFromQueue() {
        packageModifiedSinceFileCreated = true;
        contentSet.clear();
        return true;
    }

    /**
     * Deletes all package file settings (last modified, location, url)
     * but leaves the queue of id's intact.
     * Returns true on success.
     */
    public boolean clearPackageFileSettings() {
        packageFileLocation = null;
        packageURL = null;
        packageModifiedSinceFileCreated = true;
        packageFormat = -1;
        return true;
    }

    /**
     * Returns true if the specified metadataId is already in the queue.
     * Otherwise, it returns false.
     */
    public boolean isQueuedAlready(String contentId) {
        return contentSet.contains(contentId);
    }

    /**
     * Returns the number of items queued for download.
     */
    public int getNumEntries() {
        return contentSet.size();
    }
}
","// DownloadQueueBean_3Test.java
package org.heal.module.download;

import java.io.File;
import java.io.Serializable;
import java.util.Collection;
import java.util.TreeSet;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DownloadQueueBean}.
* It contains one unit test case for the {@link DownloadQueueBean#removeAllFromQueue()} method.
*/
class DownloadQueueBean_3Test {","// DownloadQueueBean_3Test.java
package org.heal.module.download;

import java.io.File;
import java.io.Serializable;
import java.util.Collection;
import java.util.TreeSet;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DownloadQueueBean}.
* It contains one unit test case for the {@link DownloadQueueBean#removeAllFromQueue()} method.
*/
class DownloadQueueBean_3Test {
"
26e90114-3b81-4d79-a84f-d1d28056dc83,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/module/download/DownloadQueueBean_4Test.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// DownloadQueueBean.java
package org.heal.module.download;

import java.io.File;
import java.io.Serializable;
import java.util.Collection;
import java.util.TreeSet;

/**
 * Stores a list of contentIds and a package file location and url.
 *
 * @author Seth Wright
 * @version 0.1
 */
public class DownloadQueueBean implements Serializable {

    TreeSet contentSet = new TreeSet();

    String packageFileLocation = null;

    String packageURL = null;

    boolean packageModifiedSinceFileCreated = true;

    int packageFormat = -1;

    /**
     * Get a collection of content Ids.
     */
    public Collection getContentIds() {
        return contentSet;
    }

    /**
     * Returns true if the package has not been modified,
     * the package file location is not null, the
     * package URL is set, and the format of the
     * package is the same as that provided and
     * the package file exists on disk.
     */
    public boolean isPackageFileUpToDate(int format) {
        if (packageModifiedSinceFileCreated || packageFileLocation == null || packageURL == null || format != packageFormat || !(new File(packageFileLocation)).exists()) {
            return false;
        }
        return true;
    }

    /**
     * Returns the format for the package associated with this queue.
     * The value will be one of the static values defined in
     * DownloadServicesBean (ZIPFORMAT, GZIPFORMAT), or -1 if there
     * is no package associated with this queue.
     */
    public int getPackageFormat() {
        return packageFormat;
    }

    /**
     * Sets the format for the package associated with this queue.
     * This value should be one of the static values defined in
     * DownloadServicesBean (ZIPFORMAT, GZIPFORMAT), or -1 if there
     * is no package associated with this queue.
     */
    public void setPackageFormat(int newPackageFormat) {
        packageFormat = newPackageFormat;
    }

    /**
     * Returns the file path to be used to access the package for this queue.
     */
    public String getPackageFileLocation() {
        return packageFileLocation;
    }

    public void setPackageFileLocation(String newPackageFileLocation) {
        packageFileLocation = newPackageFileLocation;
    }

    /**
     * Returns the URL to be used to access the package for this queue.
     */
    public String getPackageURL() {
        return packageURL;
    }

    /**
     * Sets the url used to access this package file.
     */
    public void setPackageURL(String newPackageURL) {
        packageURL = newPackageURL;
    }

    /**
     * call this method right after the package file is created.
     * This is used to track whether or not the queue has been modified
     * since the last time the associated file was created.
     */
    public void setPackageFileCreated() {
        packageModifiedSinceFileCreated = false;
    }

    /**
     * Checks whether or not the queue has changed since the last time
     * the package was generated.  If the queue has had metadata entries
     * added or removed since the last time the package has been
     * generated or the package has not yet been generated yet, then this
     * method will return true
     * otherwise, it will return false
     */
    public boolean isPackageModified() {
        return packageModifiedSinceFileCreated;
    }

    /**
     * Adds a metadata id to the list of content to include in the package
     * generated for this queue.
     */
    public boolean addToQueue(String contentId) {
        packageModifiedSinceFileCreated = true;
        contentSet.add(contentId);
        return true;
    }

    /**
     * Removes a metadata id from the list of content to include in the package
     * generated for this queue.
     */
    public boolean removeFromQueue(String contentId) {
        packageModifiedSinceFileCreated = true;
        return contentSet.remove(contentId);
    }

    /**
     * Removes all metadata id from the list of content to include in the
     * package generated for this queue.
     */
    public boolean removeAllFromQueue() {
        packageModifiedSinceFileCreated = true;
        contentSet.clear();
        return true;
    }

    /**
     * Deletes all package file settings (last modified, location, url)
     * but leaves the queue of id's intact.
     * Returns true on success.
     */
    public boolean clearPackageFileSettings() {
        packageFileLocation = null;
        packageURL = null;
        packageModifiedSinceFileCreated = true;
        packageFormat = -1;
        return true;
    }

    /**
     * Returns true if the specified metadataId is already in the queue.
     * Otherwise, it returns false.
     */
    public boolean isQueuedAlready(String contentId) {
        return contentSet.contains(contentId);
    }

    /**
     * Returns the number of items queued for download.
     */
    public int getNumEntries() {
        return contentSet.size();
    }
}
","// DownloadQueueBean_4Test.java
package org.heal.module.download;

import java.io.File;
import java.io.Serializable;
import java.util.Collection;
import java.util.TreeSet;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DownloadQueueBean}.
* It contains one unit test case for the {@link DownloadQueueBean#clearPackageFileSettings()} method.
*/
class DownloadQueueBean_4Test {","// DownloadQueueBean_4Test.java
package org.heal.module.download;

import java.io.File;
import java.io.Serializable;
import java.util.Collection;
import java.util.TreeSet;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DownloadQueueBean}.
* It contains one unit test case for the {@link DownloadQueueBean#clearPackageFileSettings()} method.
*/
class DownloadQueueBean_4Test {
"
22176cbf-74a5-4348-803d-2f1ddc6ec0b7,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/tag/download/DownloadFolderTag_0Test.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// DownloadFolderTag.java
package org.heal.tag.download;

import org.heal.module.download.DownloadQueueBean;
import org.heal.module.metadata.ShortMetadataBean;
import org.heal.util.FileLocator;
import javax.servlet.jsp.tagext.TagSupport;

/**
 * A tag which is basically acts as a container for attributes which
 * nested tags will utilize.
 *
 * @version 1.0
 * @author Brad Schaefer (<A HREF=""mailto:schaefer@lib.med.utah.edu"">schaefer@lib.med.utah.edu</A>)
 * @see org.heal.tag.download.DownloadFolderActionTag
 */
public class DownloadFolderTag extends TagSupport {

    public static final int UNKNOWN = -1;

    public static final int UNAVAILABLE = 0;

    public static final int ADD = 1;

    public static final int REMOVE = 2;

    public static final int REMOTE_IMAGE = 3;

    private DownloadQueueBean downloadQueue = null;

    private ShortMetadataBean shortMetadata = null;

    private int downloadFolderType = UNAVAILABLE;

    public void setDownloadQueue(DownloadQueueBean downloadQueue) {
        this.downloadQueue = downloadQueue;
    }

    public void setShortMetadata(ShortMetadataBean shortMetadata) {
        this.shortMetadata = shortMetadata;
    }

    /**
     * This is perhaps poorly named, but this will return an
     * integer representing whether or not a metadata record may
     * be added to the download folder, removed from the download folder,
     * or if the download folder is unavailable for the metadata record.
     *
     * @return {@link #UNAVAILABLE DownloadFolderTag.UNAVAILABLE} or
     * {@link #ADD DownloadFolderTag.ADD} or {@link #REMOVE DownloadFolderTag.REMOVE} or
     * {@link #REMOTE_IMAGE DownloadFolderTag.REMOTE_IMAGE}.
     */
    public int getDownloadFolderType() {
        return downloadFolderType;
    }

    /**
     * Parses the attributes so as to initialize the
     * {@link #getDownloadFolderType() download folder type} for child tags
     * to use.
     *
     * @return Always returns <code>TagSupport.EVAL_BODY_INCLUDE</code>
     */
    public int doStartTag() {
        FileLocator locator = (FileLocator) pageContext.getServletContext().getAttribute(""healFileLocator"");
        if (""web page"".equals(shortMetadata.getFormat().toLowerCase()) || !shortMetadata.getLocation().toLowerCase().startsWith(locator.getServerBaseURL())) {
            if (""image"".equals(shortMetadata.getFormat().toLowerCase())) {
                downloadFolderType = REMOTE_IMAGE;
            } else {
                downloadFolderType = UNAVAILABLE;
            }
        } else if (downloadQueue.isQueuedAlready(shortMetadata.getMetadataId())) {
            downloadFolderType = REMOVE;
        } else {
            downloadFolderType = ADD;
        }
        return TagSupport.EVAL_BODY_INCLUDE;
    }

    /**
     * Resets the internal state of the tag.
     *
     * @return Always returns <code>TagSupport.EVAL_PAGE</code>
     */
    public int doEndTag() {
        // In case the servlet container re-uses this object
        resetTag();
        return EVAL_PAGE;
    }

    /**
     * Resets the tag to its initial state.
     */
    private void resetTag() {
        downloadFolderType = UNAVAILABLE;
        downloadQueue = null;
        shortMetadata = null;
    }
}
","// DownloadFolderTag_0Test.java
package org.heal.tag.download;

import org.heal.module.download.DownloadQueueBean;
import org.heal.module.metadata.ShortMetadataBean;
import org.heal.util.FileLocator;
import javax.servlet.jsp.tagext.TagSupport;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DownloadFolderTag}.
* It contains one unit test case for the {@link DownloadFolderTag#doStartTag()} method.
*/
class DownloadFolderTag_0Test {","// DownloadFolderTag_0Test.java
package org.heal.tag.download;

import org.heal.module.download.DownloadQueueBean;
import org.heal.module.metadata.ShortMetadataBean;
import org.heal.util.FileLocator;
import javax.servlet.jsp.tagext.TagSupport;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DownloadFolderTag}.
* It contains one unit test case for the {@link DownloadFolderTag#doStartTag()} method.
*/
class DownloadFolderTag_0Test {
"
4e83fa89-13fb-483e-91e5-053e0605b1f1,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/heal/tag/download/DownloadFolderTag_1Test.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// DownloadFolderTag.java
package org.heal.tag.download;

import org.heal.module.download.DownloadQueueBean;
import org.heal.module.metadata.ShortMetadataBean;
import org.heal.util.FileLocator;
import javax.servlet.jsp.tagext.TagSupport;

/**
 * A tag which is basically acts as a container for attributes which
 * nested tags will utilize.
 *
 * @version 1.0
 * @author Brad Schaefer (<A HREF=""mailto:schaefer@lib.med.utah.edu"">schaefer@lib.med.utah.edu</A>)
 * @see org.heal.tag.download.DownloadFolderActionTag
 */
public class DownloadFolderTag extends TagSupport {

    public static final int UNKNOWN = -1;

    public static final int UNAVAILABLE = 0;

    public static final int ADD = 1;

    public static final int REMOVE = 2;

    public static final int REMOTE_IMAGE = 3;

    private DownloadQueueBean downloadQueue = null;

    private ShortMetadataBean shortMetadata = null;

    private int downloadFolderType = UNAVAILABLE;

    public void setDownloadQueue(DownloadQueueBean downloadQueue) {
        this.downloadQueue = downloadQueue;
    }

    public void setShortMetadata(ShortMetadataBean shortMetadata) {
        this.shortMetadata = shortMetadata;
    }

    /**
     * This is perhaps poorly named, but this will return an
     * integer representing whether or not a metadata record may
     * be added to the download folder, removed from the download folder,
     * or if the download folder is unavailable for the metadata record.
     *
     * @return {@link #UNAVAILABLE DownloadFolderTag.UNAVAILABLE} or
     * {@link #ADD DownloadFolderTag.ADD} or {@link #REMOVE DownloadFolderTag.REMOVE} or
     * {@link #REMOTE_IMAGE DownloadFolderTag.REMOTE_IMAGE}.
     */
    public int getDownloadFolderType() {
        return downloadFolderType;
    }

    /**
     * Parses the attributes so as to initialize the
     * {@link #getDownloadFolderType() download folder type} for child tags
     * to use.
     *
     * @return Always returns <code>TagSupport.EVAL_BODY_INCLUDE</code>
     */
    public int doStartTag() {
        FileLocator locator = (FileLocator) pageContext.getServletContext().getAttribute(""healFileLocator"");
        if (""web page"".equals(shortMetadata.getFormat().toLowerCase()) || !shortMetadata.getLocation().toLowerCase().startsWith(locator.getServerBaseURL())) {
            if (""image"".equals(shortMetadata.getFormat().toLowerCase())) {
                downloadFolderType = REMOTE_IMAGE;
            } else {
                downloadFolderType = UNAVAILABLE;
            }
        } else if (downloadQueue.isQueuedAlready(shortMetadata.getMetadataId())) {
            downloadFolderType = REMOVE;
        } else {
            downloadFolderType = ADD;
        }
        return TagSupport.EVAL_BODY_INCLUDE;
    }

    /**
     * Resets the internal state of the tag.
     *
     * @return Always returns <code>TagSupport.EVAL_PAGE</code>
     */
    public int doEndTag() {
        // In case the servlet container re-uses this object
        resetTag();
        return EVAL_PAGE;
    }

    /**
     * Resets the tag to its initial state.
     */
    private void resetTag() {
        downloadFolderType = UNAVAILABLE;
        downloadQueue = null;
        shortMetadata = null;
    }
}
","// DownloadFolderTag_1Test.java
package org.heal.tag.download;

import org.heal.module.download.DownloadQueueBean;
import org.heal.module.metadata.ShortMetadataBean;
import org.heal.util.FileLocator;
import javax.servlet.jsp.tagext.TagSupport;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DownloadFolderTag}.
* It contains one unit test case for the {@link DownloadFolderTag#doEndTag()} method.
*/
class DownloadFolderTag_1Test {","// DownloadFolderTag_1Test.java
package org.heal.tag.download;

import org.heal.module.download.DownloadQueueBean;
import org.heal.module.metadata.ShortMetadataBean;
import org.heal.util.FileLocator;
import javax.servlet.jsp.tagext.TagSupport;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link DownloadFolderTag}.
* It contains one unit test case for the {@link DownloadFolderTag#doEndTag()} method.
*/
class DownloadFolderTag_1Test {
"
7274c470-9404-42dd-8589-abf198607173,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/merlot/fedsearch/type/SearchResult_1Test.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// SearchResult.java
/**
 * SearchResult.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis 1.2 May 03, 2005 (02:20:24 EDT) WSDL2Java emitter.
 */
package org.merlot.fedsearch.type;

public class SearchResult implements java.io.Serializable {

    private java.lang.String category;

    private java.lang.String comments;

    private int endIndex;

    private java.lang.String query;

    private org.merlot.fedsearch.type.SearchResultElement[] resultElements;

    private float searchTime;

    private int startIndex;

    private int totalResultsCount;

    public SearchResult() {
    }

    public SearchResult(java.lang.String category, java.lang.String comments, int endIndex, java.lang.String query, org.merlot.fedsearch.type.SearchResultElement[] resultElements, float searchTime, int startIndex, int totalResultsCount) {
        this.category = category;
        this.comments = comments;
        this.endIndex = endIndex;
        this.query = query;
        this.resultElements = resultElements;
        this.searchTime = searchTime;
        this.startIndex = startIndex;
        this.totalResultsCount = totalResultsCount;
    }

    /**
     * Gets the category value for this SearchResult.
     *
     * @return category
     */
    public java.lang.String getCategory() {
        return category;
    }

    /**
     * Sets the category value for this SearchResult.
     *
     * @param category
     */
    public void setCategory(java.lang.String category) {
        this.category = category;
    }

    /**
     * Gets the comments value for this SearchResult.
     *
     * @return comments
     */
    public java.lang.String getComments() {
        return comments;
    }

    /**
     * Sets the comments value for this SearchResult.
     *
     * @param comments
     */
    public void setComments(java.lang.String comments) {
        this.comments = comments;
    }

    /**
     * Gets the endIndex value for this SearchResult.
     *
     * @return endIndex
     */
    public int getEndIndex() {
        return endIndex;
    }

    /**
     * Sets the endIndex value for this SearchResult.
     *
     * @param endIndex
     */
    public void setEndIndex(int endIndex) {
        this.endIndex = endIndex;
    }

    /**
     * Gets the query value for this SearchResult.
     *
     * @return query
     */
    public java.lang.String getQuery() {
        return query;
    }

    /**
     * Sets the query value for this SearchResult.
     *
     * @param query
     */
    public void setQuery(java.lang.String query) {
        this.query = query;
    }

    /**
     * Gets the resultElements value for this SearchResult.
     *
     * @return resultElements
     */
    public org.merlot.fedsearch.type.SearchResultElement[] getResultElements() {
        return resultElements;
    }

    /**
     * Sets the resultElements value for this SearchResult.
     *
     * @param resultElements
     */
    public void setResultElements(org.merlot.fedsearch.type.SearchResultElement[] resultElements) {
        this.resultElements = resultElements;
    }

    /**
     * Gets the searchTime value for this SearchResult.
     *
     * @return searchTime
     */
    public float getSearchTime() {
        return searchTime;
    }

    /**
     * Sets the searchTime value for this SearchResult.
     *
     * @param searchTime
     */
    public void setSearchTime(float searchTime) {
        this.searchTime = searchTime;
    }

    /**
     * Gets the startIndex value for this SearchResult.
     *
     * @return startIndex
     */
    public int getStartIndex() {
        return startIndex;
    }

    /**
     * Sets the startIndex value for this SearchResult.
     *
     * @param startIndex
     */
    public void setStartIndex(int startIndex) {
        this.startIndex = startIndex;
    }

    /**
     * Gets the totalResultsCount value for this SearchResult.
     *
     * @return totalResultsCount
     */
    public int getTotalResultsCount() {
        return totalResultsCount;
    }

    /**
     * Sets the totalResultsCount value for this SearchResult.
     *
     * @param totalResultsCount
     */
    public void setTotalResultsCount(int totalResultsCount) {
        this.totalResultsCount = totalResultsCount;
    }

    private java.lang.Object __equalsCalc = null;

    public synchronized boolean equals(java.lang.Object obj) {
        if (!(obj instanceof SearchResult))
            return false;
        SearchResult other = (SearchResult) obj;
        if (obj == null)
            return false;
        if (this == obj)
            return true;
        if (__equalsCalc != null) {
            return (__equalsCalc == obj);
        }
        __equalsCalc = obj;
        boolean _equals;
        _equals = true && ((this.category == null && other.getCategory() == null) || (this.category != null && this.category.equals(other.getCategory()))) && ((this.comments == null && other.getComments() == null) || (this.comments != null && this.comments.equals(other.getComments()))) && this.endIndex == other.getEndIndex() && ((this.query == null && other.getQuery() == null) || (this.query != null && this.query.equals(other.getQuery()))) && ((this.resultElements == null && other.getResultElements() == null) || (this.resultElements != null && java.util.Arrays.equals(this.resultElements, other.getResultElements()))) && this.searchTime == other.getSearchTime() && this.startIndex == other.getStartIndex() && this.totalResultsCount == other.getTotalResultsCount();
        __equalsCalc = null;
        return _equals;
    }

    private boolean __hashCodeCalc = false;

    public synchronized int hashCode() {
        if (__hashCodeCalc) {
            return 0;
        }
        __hashCodeCalc = true;
        int _hashCode = 1;
        if (getCategory() != null) {
            _hashCode += getCategory().hashCode();
        }
        if (getComments() != null) {
            _hashCode += getComments().hashCode();
        }
        _hashCode += getEndIndex();
        if (getQuery() != null) {
            _hashCode += getQuery().hashCode();
        }
        if (getResultElements() != null) {
            for (int i = 0; i < java.lang.reflect.Array.getLength(getResultElements()); i++) {
                java.lang.Object obj = java.lang.reflect.Array.get(getResultElements(), i);
                if (obj != null && !obj.getClass().isArray()) {
                    _hashCode += obj.hashCode();
                }
            }
        }
        _hashCode += new Float(getSearchTime()).hashCode();
        _hashCode += getStartIndex();
        _hashCode += getTotalResultsCount();
        __hashCodeCalc = false;
        return _hashCode;
    }

    // Type metadata
    private static org.apache.axis.description.TypeDesc typeDesc = new org.apache.axis.description.TypeDesc(SearchResult.class, true);

    static {
        typeDesc.setXmlType(new javax.xml.namespace.QName(""http://fedsearch.merlot.org/type"", ""SearchResult""));
        org.apache.axis.description.ElementDesc elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""category"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""category""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""string""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""comments"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""comments""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""string""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""endIndex"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""endIndex""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""int""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""query"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""query""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""string""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""resultElements"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""resultElements""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://fedsearch.merlot.org/type"", ""SearchResultElement""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""searchTime"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""searchTime""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""float""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""startIndex"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""startIndex""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""int""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""totalResultsCount"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""totalResultsCount""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""int""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
    }

    /**
     * Return type metadata object
     */
    public static org.apache.axis.description.TypeDesc getTypeDesc() {
        return typeDesc;
    }

    /**
     * Get Custom Serializer
     */
    public static org.apache.axis.encoding.Serializer getSerializer(java.lang.String mechType, java.lang.Class _javaType, javax.xml.namespace.QName _xmlType) {
        return new org.apache.axis.encoding.ser.BeanSerializer(_javaType, _xmlType, typeDesc);
    }

    /**
     * Get Custom Deserializer
     */
    public static org.apache.axis.encoding.Deserializer getDeserializer(java.lang.String mechType, java.lang.Class _javaType, javax.xml.namespace.QName _xmlType) {
        return new org.apache.axis.encoding.ser.BeanDeserializer(_javaType, _xmlType, typeDesc);
    }
}
","// SearchResult_1Test.java
package org.merlot.fedsearch.type;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SearchResult}.
* It contains one unit test case for the {@link SearchResult#getTypeDesc()} method.
*/
class SearchResult_1Test {","// SearchResult_1Test.java
package org.merlot.fedsearch.type;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SearchResult}.
* It contains one unit test case for the {@link SearchResult#getTypeDesc()} method.
*/
class SearchResult_1Test {
"
9b4a85c4-3612-4424-9fb5-3b4fbe43a58b,/EvoSuiteBenchmark/original/96_heal/src/main/java/org/merlot/fedsearch/type/SearchResultElement_1Test.java,-1,"ERROR - CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.","// SearchResultElement.java
/**
 * SearchResultElement.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis 1.2 May 03, 2005 (02:20:24 EDT) WSDL2Java emitter.
 */
package org.merlot.fedsearch.type;

public class SearchResultElement implements java.io.Serializable {

    private java.lang.String URL;

    private java.lang.String assignmentsURL;

    private java.lang.String authorName;

    private int avgComments;

    private int avgPeerReviews;

    private java.lang.String award;

    private java.lang.String commentsURL;

    private java.lang.String creationDate;

    private java.lang.String description;

    private java.lang.String detailURL;

    private java.lang.String itemType;

    private int numAssignments;

    private int numComments;

    private int numPeerReviews;

    private java.lang.String peerReviewsURL;

    private int relevanceRanking;

    private java.lang.String title;

    public SearchResultElement() {
    }

    public SearchResultElement(java.lang.String URL, java.lang.String assignmentsURL, java.lang.String authorName, int avgComments, int avgPeerReviews, java.lang.String award, java.lang.String commentsURL, java.lang.String creationDate, java.lang.String description, java.lang.String detailURL, java.lang.String itemType, int numAssignments, int numComments, int numPeerReviews, java.lang.String peerReviewsURL, int relevanceRanking, java.lang.String title) {
        this.URL = URL;
        this.assignmentsURL = assignmentsURL;
        this.authorName = authorName;
        this.avgComments = avgComments;
        this.avgPeerReviews = avgPeerReviews;
        this.award = award;
        this.commentsURL = commentsURL;
        this.creationDate = creationDate;
        this.description = description;
        this.detailURL = detailURL;
        this.itemType = itemType;
        this.numAssignments = numAssignments;
        this.numComments = numComments;
        this.numPeerReviews = numPeerReviews;
        this.peerReviewsURL = peerReviewsURL;
        this.relevanceRanking = relevanceRanking;
        this.title = title;
    }

    /**
     * Gets the URL value for this SearchResultElement.
     *
     * @return URL
     */
    public java.lang.String getURL() {
        return URL;
    }

    /**
     * Sets the URL value for this SearchResultElement.
     *
     * @param URL
     */
    public void setURL(java.lang.String URL) {
        this.URL = URL;
    }

    /**
     * Gets the assignmentsURL value for this SearchResultElement.
     *
     * @return assignmentsURL
     */
    public java.lang.String getAssignmentsURL() {
        return assignmentsURL;
    }

    /**
     * Sets the assignmentsURL value for this SearchResultElement.
     *
     * @param assignmentsURL
     */
    public void setAssignmentsURL(java.lang.String assignmentsURL) {
        this.assignmentsURL = assignmentsURL;
    }

    /**
     * Gets the authorName value for this SearchResultElement.
     *
     * @return authorName
     */
    public java.lang.String getAuthorName() {
        return authorName;
    }

    /**
     * Sets the authorName value for this SearchResultElement.
     *
     * @param authorName
     */
    public void setAuthorName(java.lang.String authorName) {
        this.authorName = authorName;
    }

    /**
     * Gets the avgComments value for this SearchResultElement.
     *
     * @return avgComments
     */
    public int getAvgComments() {
        return avgComments;
    }

    /**
     * Sets the avgComments value for this SearchResultElement.
     *
     * @param avgComments
     */
    public void setAvgComments(int avgComments) {
        this.avgComments = avgComments;
    }

    /**
     * Gets the avgPeerReviews value for this SearchResultElement.
     *
     * @return avgPeerReviews
     */
    public int getAvgPeerReviews() {
        return avgPeerReviews;
    }

    /**
     * Sets the avgPeerReviews value for this SearchResultElement.
     *
     * @param avgPeerReviews
     */
    public void setAvgPeerReviews(int avgPeerReviews) {
        this.avgPeerReviews = avgPeerReviews;
    }

    /**
     * Gets the award value for this SearchResultElement.
     *
     * @return award
     */
    public java.lang.String getAward() {
        return award;
    }

    /**
     * Sets the award value for this SearchResultElement.
     *
     * @param award
     */
    public void setAward(java.lang.String award) {
        this.award = award;
    }

    /**
     * Gets the commentsURL value for this SearchResultElement.
     *
     * @return commentsURL
     */
    public java.lang.String getCommentsURL() {
        return commentsURL;
    }

    /**
     * Sets the commentsURL value for this SearchResultElement.
     *
     * @param commentsURL
     */
    public void setCommentsURL(java.lang.String commentsURL) {
        this.commentsURL = commentsURL;
    }

    /**
     * Gets the creationDate value for this SearchResultElement.
     *
     * @return creationDate
     */
    public java.lang.String getCreationDate() {
        return creationDate;
    }

    /**
     * Sets the creationDate value for this SearchResultElement.
     *
     * @param creationDate
     */
    public void setCreationDate(java.lang.String creationDate) {
        this.creationDate = creationDate;
    }

    /**
     * Gets the description value for this SearchResultElement.
     *
     * @return description
     */
    public java.lang.String getDescription() {
        return description;
    }

    /**
     * Sets the description value for this SearchResultElement.
     *
     * @param description
     */
    public void setDescription(java.lang.String description) {
        this.description = description;
    }

    /**
     * Gets the detailURL value for this SearchResultElement.
     *
     * @return detailURL
     */
    public java.lang.String getDetailURL() {
        return detailURL;
    }

    /**
     * Sets the detailURL value for this SearchResultElement.
     *
     * @param detailURL
     */
    public void setDetailURL(java.lang.String detailURL) {
        this.detailURL = detailURL;
    }

    /**
     * Gets the itemType value for this SearchResultElement.
     *
     * @return itemType
     */
    public java.lang.String getItemType() {
        return itemType;
    }

    /**
     * Sets the itemType value for this SearchResultElement.
     *
     * @param itemType
     */
    public void setItemType(java.lang.String itemType) {
        this.itemType = itemType;
    }

    /**
     * Gets the numAssignments value for this SearchResultElement.
     *
     * @return numAssignments
     */
    public int getNumAssignments() {
        return numAssignments;
    }

    /**
     * Sets the numAssignments value for this SearchResultElement.
     *
     * @param numAssignments
     */
    public void setNumAssignments(int numAssignments) {
        this.numAssignments = numAssignments;
    }

    /**
     * Gets the numComments value for this SearchResultElement.
     *
     * @return numComments
     */
    public int getNumComments() {
        return numComments;
    }

    /**
     * Sets the numComments value for this SearchResultElement.
     *
     * @param numComments
     */
    public void setNumComments(int numComments) {
        this.numComments = numComments;
    }

    /**
     * Gets the numPeerReviews value for this SearchResultElement.
     *
     * @return numPeerReviews
     */
    public int getNumPeerReviews() {
        return numPeerReviews;
    }

    /**
     * Sets the numPeerReviews value for this SearchResultElement.
     *
     * @param numPeerReviews
     */
    public void setNumPeerReviews(int numPeerReviews) {
        this.numPeerReviews = numPeerReviews;
    }

    /**
     * Gets the peerReviewsURL value for this SearchResultElement.
     *
     * @return peerReviewsURL
     */
    public java.lang.String getPeerReviewsURL() {
        return peerReviewsURL;
    }

    /**
     * Sets the peerReviewsURL value for this SearchResultElement.
     *
     * @param peerReviewsURL
     */
    public void setPeerReviewsURL(java.lang.String peerReviewsURL) {
        this.peerReviewsURL = peerReviewsURL;
    }

    /**
     * Gets the relevanceRanking value for this SearchResultElement.
     *
     * @return relevanceRanking
     */
    public int getRelevanceRanking() {
        return relevanceRanking;
    }

    /**
     * Sets the relevanceRanking value for this SearchResultElement.
     *
     * @param relevanceRanking
     */
    public void setRelevanceRanking(int relevanceRanking) {
        this.relevanceRanking = relevanceRanking;
    }

    /**
     * Gets the title value for this SearchResultElement.
     *
     * @return title
     */
    public java.lang.String getTitle() {
        return title;
    }

    /**
     * Sets the title value for this SearchResultElement.
     *
     * @param title
     */
    public void setTitle(java.lang.String title) {
        this.title = title;
    }

    private java.lang.Object __equalsCalc = null;

    public synchronized boolean equals(java.lang.Object obj) {
        if (!(obj instanceof SearchResultElement))
            return false;
        SearchResultElement other = (SearchResultElement) obj;
        if (obj == null)
            return false;
        if (this == obj)
            return true;
        if (__equalsCalc != null) {
            return (__equalsCalc == obj);
        }
        __equalsCalc = obj;
        boolean _equals;
        _equals = true && ((this.URL == null && other.getURL() == null) || (this.URL != null && this.URL.equals(other.getURL()))) && ((this.assignmentsURL == null && other.getAssignmentsURL() == null) || (this.assignmentsURL != null && this.assignmentsURL.equals(other.getAssignmentsURL()))) && ((this.authorName == null && other.getAuthorName() == null) || (this.authorName != null && this.authorName.equals(other.getAuthorName()))) && this.avgComments == other.getAvgComments() && this.avgPeerReviews == other.getAvgPeerReviews() && ((this.award == null && other.getAward() == null) || (this.award != null && this.award.equals(other.getAward()))) && ((this.commentsURL == null && other.getCommentsURL() == null) || (this.commentsURL != null && this.commentsURL.equals(other.getCommentsURL()))) && ((this.creationDate == null && other.getCreationDate() == null) || (this.creationDate != null && this.creationDate.equals(other.getCreationDate()))) && ((this.description == null && other.getDescription() == null) || (this.description != null && this.description.equals(other.getDescription()))) && ((this.detailURL == null && other.getDetailURL() == null) || (this.detailURL != null && this.detailURL.equals(other.getDetailURL()))) && ((this.itemType == null && other.getItemType() == null) || (this.itemType != null && this.itemType.equals(other.getItemType()))) && this.numAssignments == other.getNumAssignments() && this.numComments == other.getNumComments() && this.numPeerReviews == other.getNumPeerReviews() && ((this.peerReviewsURL == null && other.getPeerReviewsURL() == null) || (this.peerReviewsURL != null && this.peerReviewsURL.equals(other.getPeerReviewsURL()))) && this.relevanceRanking == other.getRelevanceRanking() && ((this.title == null && other.getTitle() == null) || (this.title != null && this.title.equals(other.getTitle())));
        __equalsCalc = null;
        return _equals;
    }

    private boolean __hashCodeCalc = false;

    public synchronized int hashCode() {
        if (__hashCodeCalc) {
            return 0;
        }
        __hashCodeCalc = true;
        int _hashCode = 1;
        if (getURL() != null) {
            _hashCode += getURL().hashCode();
        }
        if (getAssignmentsURL() != null) {
            _hashCode += getAssignmentsURL().hashCode();
        }
        if (getAuthorName() != null) {
            _hashCode += getAuthorName().hashCode();
        }
        _hashCode += getAvgComments();
        _hashCode += getAvgPeerReviews();
        if (getAward() != null) {
            _hashCode += getAward().hashCode();
        }
        if (getCommentsURL() != null) {
            _hashCode += getCommentsURL().hashCode();
        }
        if (getCreationDate() != null) {
            _hashCode += getCreationDate().hashCode();
        }
        if (getDescription() != null) {
            _hashCode += getDescription().hashCode();
        }
        if (getDetailURL() != null) {
            _hashCode += getDetailURL().hashCode();
        }
        if (getItemType() != null) {
            _hashCode += getItemType().hashCode();
        }
        _hashCode += getNumAssignments();
        _hashCode += getNumComments();
        _hashCode += getNumPeerReviews();
        if (getPeerReviewsURL() != null) {
            _hashCode += getPeerReviewsURL().hashCode();
        }
        _hashCode += getRelevanceRanking();
        if (getTitle() != null) {
            _hashCode += getTitle().hashCode();
        }
        __hashCodeCalc = false;
        return _hashCode;
    }

    // Type metadata
    private static org.apache.axis.description.TypeDesc typeDesc = new org.apache.axis.description.TypeDesc(SearchResultElement.class, true);

    static {
        typeDesc.setXmlType(new javax.xml.namespace.QName(""http://fedsearch.merlot.org/type"", ""SearchResultElement""));
        org.apache.axis.description.ElementDesc elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""URL"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""URL""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""string""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""assignmentsURL"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""assignmentsURL""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""string""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""authorName"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""authorName""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""string""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""avgComments"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""avgComments""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""int""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""avgPeerReviews"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""avgPeerReviews""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""int""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""award"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""award""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""string""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""commentsURL"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""commentsURL""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""string""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""creationDate"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""creationDate""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""string""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""description"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""description""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""string""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""detailURL"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""detailURL""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""string""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""itemType"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""itemType""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""string""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""numAssignments"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""numAssignments""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""int""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""numComments"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""numComments""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""int""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""numPeerReviews"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""numPeerReviews""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""int""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""peerReviewsURL"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""peerReviewsURL""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""string""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""relevanceRanking"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""relevanceRanking""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""int""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
        elemField = new org.apache.axis.description.ElementDesc();
        elemField.setFieldName(""title"");
        elemField.setXmlName(new javax.xml.namespace.QName("""", ""title""));
        elemField.setXmlType(new javax.xml.namespace.QName(""http://www.w3.org/2001/XMLSchema"", ""string""));
        elemField.setNillable(false);
        typeDesc.addFieldDesc(elemField);
    }

    /**
     * Return type metadata object
     */
    public static org.apache.axis.description.TypeDesc getTypeDesc() {
        return typeDesc;
    }

    /**
     * Get Custom Serializer
     */
    public static org.apache.axis.encoding.Serializer getSerializer(java.lang.String mechType, java.lang.Class _javaType, javax.xml.namespace.QName _xmlType) {
        return new org.apache.axis.encoding.ser.BeanSerializer(_javaType, _xmlType, typeDesc);
    }

    /**
     * Get Custom Deserializer
     */
    public static org.apache.axis.encoding.Deserializer getDeserializer(java.lang.String mechType, java.lang.Class _javaType, javax.xml.namespace.QName _xmlType) {
        return new org.apache.axis.encoding.ser.BeanDeserializer(_javaType, _xmlType, typeDesc);
    }
}
","// SearchResultElement_1Test.java
package org.merlot.fedsearch.type;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SearchResultElement}.
* It contains one unit test case for the {@link SearchResultElement#getTypeDesc()} method.
*/
class SearchResultElement_1Test {","// SearchResultElement_1Test.java
package org.merlot.fedsearch.type;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of {@link SearchResultElement}.
* It contains one unit test case for the {@link SearchResultElement#getTypeDesc()} method.
*/
class SearchResultElement_1Test {
"
