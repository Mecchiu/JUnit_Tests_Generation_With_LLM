[
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// NonBlockingClientHandler_0Test.java\npackage org.quickserver.net.server.impl;\n\nimport org.quickserver.net.server.*;\nimport org.quickserver.net.*;\nimport org.quickserver.util.*;\nimport org.quickserver.util.io.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport java.nio.*;\nimport java.nio.channels.*;\nimport javax.net.ssl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NonBlockingClientHandler}.\n* It contains one unit test case for the {@link NonBlockingClientHandler#getWakeupSelectorAfterRegisterWrite()} method.\n*/\nclass NonBlockingClientHandler_0Test {\n}"
            }
        ],
        "id": "d80c1ffb-0a3f-4faf-8aa5-3105d639a103",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/impl/NonBlockingClientHandler_0Test.java",
        "original_code": "// NonBlockingClientHandler.java\n/*\n * This file is part of the QuickServer library \n * Copyright (C) QuickServer.org\n *\n * Use, modification, copying and distribution of this software is subject to\n * the terms and conditions of the GNU Lesser General Public License. \n * You should have received a copy of the GNU LGP License along with this \n * library; if not, you can download a copy from <http://www.quickserver.org/>.\n *\n * For questions, suggestions, bug-reports, enhancement-requests etc.\n * visit http://www.quickserver.org\n *\n */\npackage org.quickserver.net.server.impl;\n\nimport org.quickserver.net.server.*;\nimport org.quickserver.net.*;\nimport org.quickserver.util.*;\nimport org.quickserver.util.io.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport java.nio.*;\nimport java.nio.channels.*;\nimport javax.net.ssl.*;\n\npublic class NonBlockingClientHandler extends BasicClientHandler {\n\n    private static final Logger logger = Logger.getLogger(NonBlockingClientHandler.class.getName());\n\n    //v1.4.5\n    protected ClientWriteHandler clientWriteHandler;\n\n    private SocketChannel socketChannel;\n\n    protected ArrayList readByteBuffer = new ArrayList();\n\n    protected ArrayList writeByteBuffer = new ArrayList();\n\n    protected SelectionKey selectionKey;\n\n    protected volatile int threadAccessCount = 0;\n\n    protected volatile boolean willReturn;\n\n    protected volatile boolean waitingForFinalWrite;\n\n    //one for each event ACCEPT, WRITE, READ\n    private static int maxThreadAccessCount = 5;\n\n    private static boolean wakeupSelectorAfterRegisterWrite = true;\n\n    private static boolean wakeupSelectorAfterRegisterRead = true;\n\n    //nio ssl\n    //private final SSLSession session;\n    private boolean initialHandshakeStatus = false;\n\n    private SSLEngineResult.HandshakeStatus handshakeStatus;\n\n    private SSLEngineResult.Status status = null;\n\n    private ByteBuffer dummyByteBuffer = ByteBuffer.allocate(0);\n\n    private ByteBuffer peerNetData = null;\n\n    private boolean sslShutdown = false;\n\n    /**\n     * Sets the flag to wakeup Selector After RegisterForWrite is called.\n     * @since 1.4.7\n     */\n    public static void setWakeupSelectorAfterRegisterWrite(boolean flag) {\n        wakeupSelectorAfterRegisterWrite = flag;\n    }\n\n    /**\n     * Returns wakeupSelectorAfterRegisterWrite the flag that controls if wakeup is called on Selector\n     * after RegisterForWrite is called.\n     * @since 1.4.7\n     */\n    public static boolean getWakeupSelectorAfterRegisterWrite() {\n        return wakeupSelectorAfterRegisterWrite;\n    }\n\n    /**\n     * Sets the flag to wakeup Selector After RegisterForRead is called.\n     * @since 1.4.7\n     */\n    public static void setWakeupSelectorAfterRegisterRead(boolean flag) {\n        wakeupSelectorAfterRegisterRead = flag;\n    }\n\n    /**\n     * Returns wakeupSelectorAfterRegisterRead the flag that controls if wakeup is called on Selector\n     * after RegisterForRead is called.\n     * @since 1.4.7\n     */\n    public static boolean getWakeupSelectorAfterRegisterRead() {\n        return wakeupSelectorAfterRegisterRead;\n    }\n\n    /**\n     * Sets the maximum count of thread allowed to run objects of this class at a time.\n     * @since 1.4.7\n     */\n    public static void setMaxThreadAccessCount(int count) {\n        if (count < 3 && count != -1)\n            throw new IllegalArgumentException(\"Value should be >=3 or -1\");\n        maxThreadAccessCount = count;\n    }\n\n    /**\n     * Returns the maximum count of thread allowed to run objects of this class at a time.\n     * @since 1.4.7\n     */\n    public static int getMaxThreadAccessCount() {\n        return maxThreadAccessCount;\n    }\n\n    //v1.4.7\n    private ByteBufferOutputStream byteBufferOutputStream;\n\n    public NonBlockingClientHandler(int instanceCount) {\n        super(instanceCount);\n    }\n\n    public NonBlockingClientHandler() {\n        super();\n    }\n\n    public void clean() {\n        logger.finest(\"Starting clean - \" + getName());\n        if (threadAccessCount != 0) {\n            logger.warning(\"Thread Access Count was not 0!: \" + threadAccessCount);\n            if (Assertion.isEnabled()) {\n                assertionSystemExit();\n            }\n            threadAccessCount = 0;\n        }\n        while (readByteBuffer.isEmpty() == false) {\n            try {\n                getServer().getByteBufferPool().returnObject(readByteBuffer.remove(0));\n            } catch (Exception er) {\n                logger.warning(\"Error in returning read ByteBuffer to pool: \" + er);\n                break;\n            }\n        }\n        while (writeByteBuffer.isEmpty() == false) {\n            try {\n                getServer().getByteBufferPool().returnObject(writeByteBuffer.remove(0));\n            } catch (Exception er) {\n                appLogger.warning(\"Error in returning write ByteBuffer to pool: \" + er);\n                break;\n            }\n        }\n        if (peerNetData != null) {\n            try {\n                getServer().getByteBufferPool().returnObject(peerNetData);\n            } catch (Exception er) {\n                appLogger.warning(\"Error in returning peerNetData to pool: \" + er);\n            }\n        }\n        if (selectionKey != null) {\n            selectionKey.cancel();\n            selectionKey.selector().wakeup();\n            selectionKey = null;\n        }\n        willReturn = false;\n        waitingForFinalWrite = false;\n        socketChannel = null;\n        if (byteBufferOutputStream != null) {\n            byteBufferOutputStream.close();\n        }\n        super.clean();\n        //1.4.5\n        clientWriteHandler = null;\n        byteBufferOutputStream = null;\n        sslShutdown = false;\n        logger.finest(\"Finished clean - \" + getName());\n    }\n\n    protected void finalize() throws Throwable {\n        clean();\n        super.finalize();\n    }\n\n    public void handleClient(TheClient theClient) throws Exception {\n        super.handleClient(theClient);\n        //v1.4.5\n        setClientWriteHandler(theClient.getClientWriteHandler());\n        //1.4.5\n        setSocketChannel(theClient.getSocketChannel());\n    }\n\n    protected void setInputStream(InputStream in) throws IOException {\n        this.in = in;\n        if (getDataMode(DataType.IN) == DataMode.STRING) {\n            b_in = null;\n            o_in = null;\n            bufferedReader = null;\n        } else if (getDataMode(DataType.IN) == DataMode.OBJECT) {\n            b_in = null;\n            bufferedReader = null;\n            o_in = new ObjectInputStream(in);\n        } else if (getDataMode(DataType.IN) == DataMode.BYTE || getDataMode(DataType.IN) == DataMode.BINARY) {\n            o_in = null;\n            bufferedReader = null;\n            b_in = null;\n        }\n    }\n\n    public BufferedReader getBufferedReader() {\n        throw new IllegalStateException(\"Access to BufferedReader in not allowed in Non-Blocking mode!\");\n    }\n\n    public void closeConnection() {\n        logger.finest(\"inside\");\n        synchronized (this) {\n            if (connection == false)\n                return;\n            if (waitingForFinalWrite)\n                return;\n            if (getSelectionKey() != null && getSelectionKey().isValid() && lost == false) {\n                waitingForFinalWrite = true;\n            } else {\n                connection = false;\n            }\n        }\n        try {\n            if (getSocketChannel() != null && socket != null) {\n                if (waitingForFinalWrite) {\n                    try {\n                        waitTillFullyWritten();\n                    } catch (Exception error) {\n                        logger.warning(\"Error in waitingForFinalWrite : \" + error);\n                        if (logger.isLoggable(Level.FINE)) {\n                            logger.fine(\"StackTrace:\\n\" + MyString.getStackTrace(error));\n                        }\n                    }\n                }\n                //end of waitingForFinalWrite\n                if (isSecure() == true) {\n                    sslShutdown = true;\n                    if (lost == false && sslEngine.isOutboundDone() == false) {\n                        logger.finest(\"SSL isOutboundDone is false\");\n                        if (byteBufferOutputStream.doShutdown() == false) {\n                            return;\n                        }\n                    } else if (sslEngine.isOutboundDone()) {\n                        logger.finest(\"SSL Outbound is done.\");\n                    }\n                }\n                doPostCloseActivity();\n            }\n            //if socket\n        } catch (IOException e) {\n            logger.warning(\"Error in closeConnection : \" + e);\n            if (logger.isLoggable(Level.FINE)) {\n                logger.fine(\"StackTrace:\\n\" + MyString.getStackTrace(e));\n            }\n        } catch (NullPointerException npe) {\n            logger.fine(\"NullPointerException: \" + npe);\n            if (logger.isLoggable(Level.FINE)) {\n                logger.fine(\"StackTrace:\\n\" + MyString.getStackTrace(npe));\n            }\n        }\n    }\n\n    private void doPostCloseActivity() throws IOException {\n        connection = false;\n        byteBufferOutputStream.forceNotify();\n        getSelectionKey().cancel();\n        if (getServer() != null) {\n            getServer().getSelector().wakeup();\n        }\n        synchronized (this) {\n            if (hasEvent(ClientEvent.MAX_CON) == false) {\n                notifyCloseOrLost();\n            }\n            if (getSocketChannel().isOpen()) {\n                logger.finest(\"Closing SocketChannel\");\n                getSocketChannel().close();\n            }\n        }\n    }\n\n    public boolean closeIfSSLOutboundDone() {\n        if (isSecure() == false)\n            throw new IllegalStateException(\"Client is not in secure mode!\");\n        if (sslEngine.isOutboundDone()) {\n            logger.finest(\"SSL Outbound is done.\");\n            try {\n                if (getSocketChannel().isOpen()) {\n                    logger.finest(\"Closing SocketChannel\");\n                    getSocketChannel().close();\n                }\n            } catch (IOException e) {\n                logger.fine(\"IGNORE: Error in Closing SocketChannel: \" + e);\n            }\n            return true;\n        } else {\n            logger.finest(\"SSL Outbound is not done.\");\n            return false;\n        }\n    }\n\n    /**\n     * waitTillFullyWritten\n     * @since 1.4.7\n     */\n    public void waitTillFullyWritten() {\n        Object waitLock = new Object();\n        if (byteBufferOutputStream.isDataAvailableForWrite(waitLock)) {\n            if (ByteBufferOutputStream.isLoggable(Level.FINEST)) {\n                logger.finest(\"Waiting \" + getName());\n            }\n            try {\n                synchronized (waitLock) {\n                    //2 min max\n                    waitLock.wait(1000 * 60 * 2);\n                }\n            } catch (InterruptedException ie) {\n                logger.warning(\"Error: \" + ie);\n            }\n            if (ByteBufferOutputStream.isLoggable(Level.FINEST)) {\n                logger.finest(\"Done. \" + getName());\n            }\n        }\n    }\n\n    public void run() {\n        if (unprocessedClientEvents.isEmpty()) {\n            logger.finest(\"No unprocessed ClientEvents!\");\n            return;\n        }\n        synchronized (this) {\n            if (willReturn) {\n                return;\n            } else {\n                threadAccessCount++;\n            }\n        }\n        ClientEvent currentEvent = (ClientEvent) unprocessedClientEvents.poll();\n        if (currentEvent == null) {\n            threadEvent.set(null);\n            logger.finest(\"No unprocessed ClientEvents! pool was null\");\n            return;\n        }\n        if (logger.isLoggable(Level.FINEST)) {\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"Running \").append(getName());\n            sb.append(\" using \");\n            sb.append(Thread.currentThread().getName());\n            sb.append(\" for \");\n            synchronized (clientEvents) {\n                if (clientEvents.size() > 1) {\n                    sb.append(currentEvent + \", Current Events - \" + clientEvents);\n                } else {\n                    sb.append(currentEvent);\n                }\n            }\n            logger.finest(sb.toString());\n        }\n        logger.finest(\"threadAccessCount: \" + threadAccessCount);\n        threadEvent.set(currentEvent);\n        try {\n            if (maxThreadAccessCount != -1 && threadAccessCount > maxThreadAccessCount) {\n                logger.warning(\"ThreadAccessCount can't go beyond \" + maxThreadAccessCount + \": \" + threadAccessCount);\n                if (Assertion.isEnabled()) {\n                    throw new AssertionError(\"ThreadAccessCount can't go beyond \" + maxThreadAccessCount + \": \" + threadAccessCount);\n                }\n                return;\n            }\n            if (socket == null)\n                throw new SocketException(\"Socket was null!\");\n            if (getThreadEvent() == ClientEvent.ACCEPT || getThreadEvent() == ClientEvent.MAX_CON) {\n                prepareForRun();\n                Assertion.affirm(willReturn == false, \"WillReturn has to be false!: \" + willReturn);\n            }\n            if (getThreadEvent() == ClientEvent.MAX_CON) {\n                processMaxConnection(currentEvent);\n            }\n            try {\n                if (getThreadEvent() == ClientEvent.ACCEPT) {\n                    registerForRead();\n                    clientEventHandler.gotConnected(this);\n                    if (authorised == false) {\n                        if (clientAuthenticationHandler == null && authenticator == null) {\n                            authorised = true;\n                            logger.finest(\"No Authenticator \" + getName() + \" so return thread.\");\n                        } else {\n                            if (clientAuthenticationHandler != null) {\n                                AuthStatus authStatus = null;\n                                do {\n                                    authStatus = processAuthorisation();\n                                } while (authStatus == AuthStatus.FAILURE);\n                                if (authStatus == AuthStatus.SUCCESS)\n                                    authorised = true;\n                            } else {\n                                processAuthorisation();\n                            }\n                            if (authorised)\n                                logger.finest(\"Authentication done \" + getName() + \", so return thread.\");\n                            else\n                                logger.finest(\"askAuthentication() done \" + getName() + \", so return thread.\");\n                        }\n                    }\n                    //end authorised\n                    //return thread to pool\n                    returnThread();\n                    return;\n                }\n                if (connection && getThreadEvent() == ClientEvent.READ) {\n                    if (processRead())\n                        return;\n                }\n                if (connection && getThreadEvent() == ClientEvent.WRITE) {\n                    if (processWrite())\n                        return;\n                }\n            } catch (SocketException e) {\n                appLogger.finest(\"SocketException - Client [\" + getHostAddress() + \"]: \" + e.getMessage());\n                //e.printStackTrace();\n                lost = true;\n            } catch (AppException e) {\n                //errors from Application\n                appLogger.finest(\"AppException \" + Thread.currentThread().getName() + \": \" + e.getMessage());\n            } catch (javax.net.ssl.SSLException e) {\n                lost = true;\n                if (Assertion.isEnabled()) {\n                    appLogger.info(\"SSLException - Client [\" + getHostAddress() + \"] \" + Thread.currentThread().getName() + \": \" + e);\n                } else {\n                    appLogger.warning(\"SSLException - Client [\" + getHostAddress() + \"]: \" + e);\n                }\n            } catch (ConnectionLostException e) {\n                lost = true;\n                if (e.getMessage() != null)\n                    appLogger.finest(\"Connection lost \" + Thread.currentThread().getName() + \": \" + e.getMessage());\n                else\n                    appLogger.finest(\"Connection lost \" + Thread.currentThread().getName());\n            } catch (ClosedChannelException e) {\n                lost = true;\n                appLogger.finest(\"Channel closed \" + Thread.currentThread().getName() + \": \" + e);\n            } catch (IOException e) {\n                lost = true;\n                appLogger.fine(\"IOError \" + Thread.currentThread().getName() + \": \" + e);\n            } catch (AssertionError er) {\n                logger.warning(\"[AssertionError] \" + getName() + \" \" + er);\n                if (logger.isLoggable(Level.FINEST)) {\n                    logger.finest(\"StackTrace \" + Thread.currentThread().getName() + \": \" + MyString.getStackTrace(er));\n                }\n                assertionSystemExit();\n            } catch (Error er) {\n                logger.warning(\"[Error] \" + er);\n                if (logger.isLoggable(Level.FINEST)) {\n                    logger.finest(\"StackTrace \" + Thread.currentThread().getName() + \": \" + MyString.getStackTrace(er));\n                }\n                if (Assertion.isEnabled()) {\n                    assertionSystemExit();\n                }\n                lost = true;\n            } catch (RuntimeException re) {\n                logger.warning(\"[RuntimeException] \" + MyString.getStackTrace(re));\n                if (Assertion.isEnabled()) {\n                    assertionSystemExit();\n                }\n                lost = true;\n            }\n            if (getThreadEvent() != ClientEvent.MAX_CON) {\n                notifyCloseOrLost();\n            }\n            if (connection) {\n                logger.finest(Thread.currentThread().getName() + \" calling closeConnection()\");\n                closeConnection();\n            }\n            if (connection == true && lost == true && waitingForFinalWrite) {\n                byteBufferOutputStream.forceNotify();\n            }\n        } catch (javax.net.ssl.SSLException se) {\n            logger.warning(\"SSLException \" + Thread.currentThread().getName() + \" - \" + se);\n        } catch (IOException ie) {\n            logger.warning(\"IOError \" + Thread.currentThread().getName() + \" - Closing Client : \" + ie);\n        } catch (RuntimeException re) {\n            logger.warning(\"[RuntimeException] \" + getName() + \" \" + Thread.currentThread().getName() + \" - \" + MyString.getStackTrace(re));\n            if (Assertion.isEnabled()) {\n                assertionSystemExit();\n            }\n        } catch (Exception e) {\n            logger.warning(\"Error \" + Thread.currentThread().getName() + \" - Event:\" + getThreadEvent() + \" - Socket:\" + socket + \" : \" + e);\n            logger.fine(\"StackTrace: \" + getName() + \"\\n\" + MyString.getStackTrace(e));\n            if (Assertion.isEnabled()) {\n                assertionSystemExit();\n            }\n        } catch (Error e) {\n            logger.warning(\"Error \" + Thread.currentThread().getName() + \" - Event:\" + getThreadEvent() + \" - Socket:\" + socket + \" : \" + e);\n            logger.fine(\"StackTrace: \" + getName() + \"\\n\" + MyString.getStackTrace(e));\n            if (Assertion.isEnabled()) {\n                assertionSystemExit();\n            }\n        }\n        synchronized (this) {\n            try {\n                if (getSelectionKey() != null && getSelectionKey().isValid()) {\n                    logger.finest(\"Canceling SelectionKey\");\n                    getSelectionKey().cancel();\n                }\n                if (socket != null && socket.isClosed() == false) {\n                    logger.finest(\"Closing Socket\");\n                    socket.close();\n                }\n                if (getSocketChannel() != null && getSocketChannel().isOpen()) {\n                    logger.finest(\"Closing SocketChannel\");\n                    socketChannel.close();\n                }\n            } catch (Exception re) {\n                logger.warning(\"Error closing Socket/Channel: \" + re);\n            }\n        }\n        //end synchronized\n        willClean = true;\n        returnClientData();\n        boolean returnClientHandler = false;\n        synchronized (lockObj) {\n            returnThread();\n            returnClientHandler = checkReturnClientHandler();\n        }\n        if (returnClientHandler) {\n            //return to pool\n            returnClientHandler();\n        }\n    }\n\n    protected boolean checkReturnClientHandler() {\n        if (willReturn == false) {\n            willReturn = true;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Process read\n     * @return value indicates if the thread should return form run()\n     */\n    private boolean processRead() throws Exception {\n        if (doRead()) {\n            //return to pool\n            returnThread();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private boolean doRead() throws Exception {\n        int count = 0;\n        int fullCount = 0;\n        while (true) {\n            try {\n                if (peerNetData == null) {\n                    peerNetData = (ByteBuffer) getServer().getByteBufferPool().borrowObject();\n                }\n                count = getSocketChannel().read(peerNetData);\n                if (count < 0) {\n                    //logger.finest(\"SocketChannel read was \"+count+\"!\");\n                    getServer().getByteBufferPool().returnObject(peerNetData);\n                    peerNetData = null;\n                    break;\n                } else {\n                    fullCount += count;\n                }\n                // Make readable\n                peerNetData.flip();\n                ByteBuffer peerAppData = null;\n                //--\n                if (sslEngine != null) {\n                    SSLEngineResult res;\n                    peerAppData = (ByteBuffer) getServer().getByteBufferPool().borrowObject();\n                    do {\n                        res = sslEngine.unwrap(peerNetData, peerAppData);\n                        logger.info(\"Unwrapping:\\n\" + res);\n                    } while (res.getStatus() == SSLEngineResult.Status.OK && res.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_UNWRAP && res.bytesProduced() == 0);\n                    if (res.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.FINISHED) {\n                        logger.info(\"HandshakeStatus.FINISHED!\");\n                        finishInitialHandshake();\n                    }\n                    if (peerAppData.position() == 0 && res.getStatus() == SSLEngineResult.Status.OK && peerNetData.hasRemaining()) {\n                        logger.info(\"peerNetData hasRemaining and pos=0!\");\n                        res = sslEngine.unwrap(peerNetData, peerAppData);\n                        logger.info(\"Unwrapping:\\n\" + res);\n                    }\n                    /*\n\t\t\t\t\t * OK, OVERFLOW, UNDERFLOW, CLOSED\n\t\t\t\t\t */\n                    status = res.getStatus();\n                    handshakeStatus = res.getHandshakeStatus();\n                    if (status != SSLEngineResult.Status.BUFFER_OVERFLOW) {\n                        logger.warning(\"Buffer overflow: \" + res.toString());\n                    } else if (status == SSLEngineResult.Status.CLOSED) {\n                        logger.fine(\"Connection is being closed by peer.\");\n                        lost = true;\n                        System.out.println(\"NEdd to code for shutdow of SSL\");\n                        break;\n                    }\n                    peerNetData.compact();\n                    peerAppData.flip();\n                    if (handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_TASK || handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_WRAP || handshakeStatus == SSLEngineResult.HandshakeStatus.FINISHED) {\n                        doHandshake();\n                    }\n                    //return peerAppData.remaining();\n                    logger.fine(\"peerAppData.remaining(): \" + peerAppData.remaining());\n                } else {\n                    peerAppData = peerNetData;\n                    peerNetData = null;\n                }\n                //--\n                readByteBuffer.add(peerAppData);\n                peerAppData = null;\n            } catch (Exception error) {\n                logger.finest(\"Error in data read: \" + error);\n                if (sslEngine != null)\n                    sslEngine.closeInbound();\n                lost = true;\n                synchronized (getInputStream()) {\n                    getInputStream().notifyAll();\n                }\n                throw error;\n            }\n            if (count == 0)\n                break;\n        }\n        //end while\n        if (count < 0) {\n            logger.finest(\"SocketChannel read was \" + count + \"!\");\n            if (sslEngine != null)\n                sslEngine.closeInbound();\n            lost = true;\n            synchronized (getInputStream()) {\n                getInputStream().notifyAll();\n            }\n        } else {\n            logger.finest(fullCount + \" bytes read\");\n            if (fullCount != 0) {\n                updateLastCommunicationTime();\n                synchronized (getInputStream()) {\n                    //if any are waiting\n                    getInputStream().notify();\n                }\n                if (hasEvent(ClientEvent.ACCEPT) == false) {\n                    processGotDataInBuffers();\n                }\n            }\n            //check if any data was read but not yet processed\n            while (getInputStream().available() > 0) {\n                logger.finest(\"Sending again for processing...\");\n                if (hasEvent(ClientEvent.ACCEPT) == false) {\n                    processGotDataInBuffers();\n                    break;\n                } else {\n                    synchronized (getInputStream()) {\n                        getInputStream().notifyAll();\n                    }\n                    Thread.sleep(100);\n                }\n            }\n            if (connection) {\n                registerForRead();\n                //getSelectionKey().selector().wakeup();\n                return true;\n            }\n        }\n        //end of else\n        logger.finest(\"We don't have connection, lets return all resources.\");\n        return false;\n    }\n\n    /**\n     * Process write\n     * @return value indicates if the thread should return form run()\n     */\n    private boolean processWrite() throws IOException {\n        if (doWrite()) {\n            //return to pool\n            returnThread();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private boolean doWrite() throws IOException {\n        if (sslShutdown) {\n            if (byteBufferOutputStream.doShutdown() == false) {\n                return true;\n            }\n            doPostCloseActivity();\n            logger.finest(\"We don't have connection, lets return all resources.\");\n            return false;\n        }\n        updateLastCommunicationTime();\n        boolean flag = byteBufferOutputStream.writeAllByteBuffer();\n        if (flag == false) {\n            registerWrite();\n        } else if (/*flag==true && */\n        clientWriteHandler != null) {\n            clientWriteHandler.handleWrite(this);\n        }\n        if (connection) {\n            return true;\n        } else {\n            logger.finest(\"We don't have connection, lets return all resources.\");\n            return false;\n        }\n    }\n\n    protected void returnThread() {\n        //System.out.println(\"returnThread..\");\n        //(new Exception()).printStackTrace();\n        threadAccessCount--;\n        Assertion.affirm(threadAccessCount >= 0, \"ThreadAccessCount went less the 0! Value: \" + threadAccessCount);\n        //return is done at ClientThread end\n        removeEvent((ClientEvent) threadEvent.get());\n    }\n\n    protected void returnClientHandler() {\n        logger.finest(getName());\n        try {\n            for (int i = 0; threadAccessCount != 0; i++) {\n                if (i == 100) {\n                    logger.warning(\"ClientHandler must have got into a loop waiting for thread to free up! ThreadAccessCount=\" + threadAccessCount);\n                    threadAccessCount = 0;\n                    if (Assertion.isEnabled()) {\n                        assertionSystemExit();\n                    } else {\n                        break;\n                    }\n                }\n                if (threadAccessCount <= 0)\n                    break;\n                logger.finest(\"Waiting for other thread of \" + getName() + \" to finish\");\n                Thread.sleep(60);\n            }\n        } catch (InterruptedException ie) {\n            appLogger.warning(\"InterruptedException: \" + ie);\n        }\n        super.returnClientHandler();\n    }\n\n    public void setDataMode(DataMode dataMode, DataType dataType) throws IOException {\n        if (getDataMode(dataType) == dataMode)\n            return;\n        appLogger.fine(\"Setting Type:\" + dataType + \", Mode:\" + dataMode);\n        super.checkDataModeSet(dataMode, dataType);\n        setDataModeNonBlocking(dataMode, dataType);\n    }\n\n    private void setDataModeNonBlocking(DataMode dataMode, DataType dataType) throws IOException {\n        logger.finest(\"ENTER\");\n        if (dataMode == DataMode.STRING) {\n            if (dataType == DataType.OUT) {\n                if (dataModeOUT == DataMode.BYTE || dataModeOUT == DataMode.BINARY) {\n                    dataModeOUT = dataMode;\n                } else if (dataModeOUT == DataMode.OBJECT) {\n                    dataModeOUT = dataMode;\n                    o_out.flush();\n                    o_out = null;\n                    b_out = new BufferedOutputStream(out);\n                } else {\n                    Assertion.affirm(false, \"Unknown DataType.OUT DataMode - \" + dataModeOUT);\n                }\n                Assertion.affirm(b_out != null, \"BufferedOutputStream is still null!\");\n                Assertion.affirm(o_out == null, \"ObjectOutputStream is still not null!\");\n            } else if (dataType == DataType.IN) {\n                dataModeIN = dataMode;\n                if (o_in != null) {\n                    if (o_in.available() != 0)\n                        logger.warning(\"Data looks to be present in ObjectInputStream\");\n                    o_in = null;\n                }\n                b_in = null;\n                bufferedReader = null;\n                //input stream will work\n                Assertion.affirm(in != null, \"InputStream is still null!\");\n                Assertion.affirm(b_in == null, \"BufferedInputStream is still not null!\");\n                Assertion.affirm(bufferedReader == null, \"BufferedReader is still not null!\");\n            }\n        } else if (dataMode == DataMode.OBJECT) {\n            if (dataType == DataType.IN) {\n                //we will disable this for now\n                throw new IllegalArgumentException(\"Can't set DataType.IN mode to OBJECT when blocking mode is set as false!\");\n            }\n            if (dataType == DataType.OUT) {\n                dataModeOUT = dataMode;\n                b_out = null;\n                o_out = new ObjectOutputStream(out);\n                Assertion.affirm(o_out != null, \"ObjectOutputStream is still null!\");\n                o_out.flush();\n            } else if (dataType == DataType.IN) {\n                dataModeIN = dataMode;\n                b_in = null;\n                bufferedReader = null;\n                registerForRead();\n                //will block\n                o_in = new ObjectInputStream(in);\n                Assertion.affirm(o_in != null, \"ObjectInputStream is still null!\");\n            }\n        } else if (dataMode == DataMode.BYTE || dataMode == DataMode.BINARY) {\n            if (dataType == DataType.OUT) {\n                if (dataModeOUT == DataMode.STRING || dataModeOUT == DataMode.BYTE || dataModeOUT == DataMode.BINARY) {\n                    dataModeOUT = dataMode;\n                } else if (dataModeOUT == DataMode.OBJECT) {\n                    dataModeOUT = dataMode;\n                    o_out = null;\n                    b_out = new BufferedOutputStream(out);\n                } else {\n                    Assertion.affirm(false, \"Unknown DataType.OUT - DataMode: \" + dataModeOUT);\n                }\n                Assertion.affirm(b_out != null, \"BufferedOutputStream is still null!\");\n            } else if (dataType == DataType.IN) {\n                dataModeIN = dataMode;\n                o_in = null;\n                bufferedReader = null;\n                b_in = null;\n                //input stream will work\n                Assertion.affirm(in != null, \"InputStream is still null!\");\n            } else {\n                throw new IllegalArgumentException(\"Unknown DataType : \" + dataType);\n            }\n        } else {\n            throw new IllegalArgumentException(\"Unknown DataMode : \" + dataMode);\n        }\n    }\n\n    protected byte[] readInputStream() throws IOException {\n        return readInputStream(getInputStream());\n    }\n\n    public void updateInputOutputStreams() throws IOException {\n        byteBufferOutputStream = new ByteBufferOutputStream(writeByteBuffer, this);\n        setInputStream(new ByteBufferInputStream(readByteBuffer, this, getCharset()));\n        setOutputStream(byteBufferOutputStream);\n        //logger.warning(\"updateInputOutputStreams: \"+sslEngine);\n        if (sslEngine != null) {\n            sslEngine.setUseClientMode(false);\n            sslEngine.beginHandshake();\n            handshakeStatus = sslEngine.getHandshakeStatus();\n            initialHandshakeStatus = true;\n            /*\n\t\t\ttry {\n\t\t\t\tdoHandshake();\n\t\t\t} catch(Exception e) {\n\t\t\t\tlogger.warning(\"Error: \"+e);\n\t\t\t\tthrow new IOException(e.toString());\n\t\t\t}\n\t\t\t*/\n        }\n    }\n\n    public boolean getBlockingMode() {\n        return false;\n    }\n\n    public void setSocketChannel(SocketChannel socketChannel) {\n        this.socketChannel = socketChannel;\n    }\n\n    public SocketChannel getSocketChannel() {\n        return socketChannel;\n    }\n\n    public void setSelectionKey(SelectionKey selectionKey) {\n        this.selectionKey = selectionKey;\n    }\n\n    public SelectionKey getSelectionKey() {\n        if (selectionKey == null)\n            selectionKey = getSocketChannel().keyFor(getServer().getSelector());\n        return selectionKey;\n    }\n\n    private void processGotDataInBuffers() throws AppException, ConnectionLostException, ClassNotFoundException, IOException {\n        if (getInputStream().available() == 0)\n            return;\n        logger.finest(\"Trying to process got data.. DataMode.IN=\" + dataModeIN);\n        AuthStatus authStatus = null;\n        //--For debug\n        ((ByteBufferInputStream) getInputStream()).dumpContent();\n        String temp = null;\n        String rec = null;\n        Object recObject = null;\n        byte[] recByte = null;\n        boolean timeToCheckForNewLineMiss = false;\n        do {\n            //updateLastCommunicationTime();\n            if (dataModeIN == DataMode.STRING) {\n                ByteBufferInputStream bbin = (ByteBufferInputStream) getInputStream();\n                timeToCheckForNewLineMiss = true;\n                while (bbin.isLineReady()) {\n                    rec = bbin.readLine();\n                    if (rec == null) {\n                        lost = true;\n                        return;\n                    }\n                    if (getCommunicationLogging() && authorised == true) {\n                        appLogger.log(Level.FINE, \"Got STRING [{0}] : {1}\", new Object[] { getHostAddress(), rec });\n                    }\n                    totalReadBytes = totalReadBytes + rec.length();\n                    if (authorised == false)\n                        authStatus = clientAuthenticationHandler.handleAuthentication(this, rec);\n                    else\n                        clientCommandHandler.handleCommand(this, rec);\n                    if (isClosed() == true)\n                        return;\n                    while (authStatus == AuthStatus.FAILURE) authStatus = processAuthorisation();\n                    if (authStatus == AuthStatus.SUCCESS)\n                        authorised = true;\n                    if (dataModeIN != DataMode.STRING) {\n                        break;\n                    }\n                    timeToCheckForNewLineMiss = false;\n                }\n                //end of while\n                if (timeToCheckForNewLineMiss && bbin.availableOnlyInByteBuffer() == 0) {\n                    return;\n                } else {\n                    timeToCheckForNewLineMiss = false;\n                }\n            }\n            //if(dataModeIN == DataMode.OBJECT) {\n            while (dataModeIN == DataMode.OBJECT && o_in != null) {\n                //not sure if all bytes are in buffer..~ may need more read.. will get stuck..\n                recObject = o_in.readObject();\n                if (recObject == null) {\n                    lost = true;\n                    return;\n                }\n                if (getCommunicationLogging() && authorised == true) {\n                    appLogger.log(Level.FINE, \"Got OBJECT [{0}] : {1}\", new Object[] { getHostAddress(), recObject.toString() });\n                }\n                totalReadBytes = totalReadBytes + 1;\n                if (authorised == false)\n                    authStatus = clientAuthenticationHandler.handleAuthentication(this, recObject);\n                else\n                    clientObjectHandler.handleObject(this, recObject);\n                if (isClosed() == true)\n                    return;\n                while (authStatus == AuthStatus.FAILURE) authStatus = processAuthorisation();\n                if (authStatus == AuthStatus.SUCCESS)\n                    authorised = true;\n            }\n            //}\n            //if(dataModeIN == DataMode.BYTE) {\n            while (dataModeIN == DataMode.BYTE && getInputStream().available() != 0) {\n                rec = readBytes();\n                if (rec == null) {\n                    lost = true;\n                    return;\n                }\n                if (getCommunicationLogging() && authorised == true) {\n                    appLogger.log(Level.FINE, \"Got BYTE [{0}] : {1}\", new Object[] { getHostAddress(), rec });\n                }\n                totalReadBytes = totalReadBytes + rec.length();\n                if (authorised == false)\n                    authStatus = clientAuthenticationHandler.handleAuthentication(this, rec);\n                else\n                    clientCommandHandler.handleCommand(this, rec);\n                if (isClosed() == true)\n                    return;\n                while (authStatus == AuthStatus.FAILURE) authStatus = processAuthorisation();\n                if (authStatus == AuthStatus.SUCCESS)\n                    authorised = true;\n            }\n            //} else if(dataModeIN == DataMode.BINARY) {\n            while (dataModeIN == DataMode.BINARY && getInputStream().available() != 0) {\n                recByte = readBinary();\n                if (recByte == null) {\n                    lost = true;\n                    return;\n                }\n                if (getCommunicationLogging() && authorised == true) {\n                    if (getServer().isRawCommunicationLogging()) {\n                        if (getServer().getRawCommunicationMaxLength() > 0 && recByte.length > getServer().getRawCommunicationMaxLength()) {\n                            appLogger.log(Level.FINE, \"Got BINARY [{0}] : {1}; RAW: {2}{3}\", new Object[] { getHostAddress(), MyString.getMemInfo(recByte.length), new String(recByte, 0, getServer().getRawCommunicationMaxLength(), charset), \"...\" });\n                        } else {\n                            appLogger.log(Level.FINE, \"Got BINARY [{0}] : {1}; RAW: {2}\", new Object[] { getHostAddress(), MyString.getMemInfo(recByte.length), new String(recByte, charset) });\n                        }\n                    } else {\n                        appLogger.log(Level.FINE, \"Got BINARY [{0}] : {1}\", new Object[] { getHostAddress(), MyString.getMemInfo(recByte.length) });\n                    }\n                } else if (getCommunicationLogging()) {\n                    appLogger.log(Level.FINE, \"Got BINARY [{0}] : {1}\", new Object[] { getHostAddress(), MyString.getMemInfo(recByte.length) });\n                }\n                totalReadBytes = totalReadBytes + recByte.length;\n                if (authorised == false)\n                    authStatus = clientAuthenticationHandler.handleAuthentication(this, recByte);\n                else\n                    clientBinaryHandler.handleBinary(this, recByte);\n                if (isClosed() == true)\n                    return;\n                while (authStatus == AuthStatus.FAILURE) authStatus = processAuthorisation();\n                if (authStatus == AuthStatus.SUCCESS)\n                    authorised = true;\n            }\n            //} else {\n            if (dataModeIN != DataMode.STRING && dataModeIN != DataMode.OBJECT && dataModeIN != DataMode.BYTE && dataModeIN != DataMode.BINARY) {\n                throw new IllegalStateException(\"Incoming DataMode is not supported : \" + dataModeIN);\n            }\n        } while (getInputStream().available() != 0);\n    }\n\n    public void registerForRead() throws IOException, ClosedChannelException {\n        //System.out.println(\"registerForRead..\");\n        //(new Exception()).printStackTrace();\n        try {\n            if (getSelectionKey() == null) {\n                boolean flag = getServer().registerChannel(getSocketChannel(), SelectionKey.OP_READ, this);\n                if (flag) {\n                    logger.finest(\"Adding OP_READ as interest Ops for \" + getName());\n                } else if (ByteBufferOutputStream.isLoggable(Level.FINEST)) {\n                    logger.finest(\"OP_READ is already present in interest Ops for \" + getName());\n                }\n            } else if (getSelectionKey().isValid()) {\n                if ((getSelectionKey().interestOps() & SelectionKey.OP_READ) == 0) {\n                    logger.finest(\"Adding OP_READ to interest Ops for \" + getName());\n                    removeEvent(ClientEvent.READ);\n                    getSelectionKey().interestOps(getSelectionKey().interestOps() | SelectionKey.OP_READ);\n                    if (wakeupSelectorAfterRegisterRead) {\n                        getServer().getSelector().wakeup();\n                    }\n                } else {\n                    if (ByteBufferOutputStream.isLoggable(Level.FINEST)) {\n                        logger.finest(\"OP_READ is already present in interest Ops for \" + getName());\n                    }\n                }\n            } else {\n                throw new IOException(\"SelectionKey is invalid!\");\n            }\n        } catch (CancelledKeyException e) {\n            throw new IOException(\"SelectionKey is cancelled!\");\n        }\n    }\n\n    public void registerForWrite() throws IOException, ClosedChannelException {\n        if (hasEvent(ClientEvent.RUN_BLOCKING) || hasEvent(ClientEvent.MAX_CON_BLOCKING)) {\n            throw new IllegalStateException(\"This method is only allowed under Non-Blocking mode.\");\n        }\n        if (clientWriteHandler == null) {\n            throw new IllegalStateException(\"ClientWriteHandler has not been set!\");\n        }\n        registerWrite();\n    }\n\n    public void registerWrite() throws IOException {\n        //System.out.println(\"registerWrite..\");\n        //(new Exception()).printStackTrace();\n        try {\n            if (getSelectionKey() == null) {\n                boolean flag = getServer().registerChannel(getSocketChannel(), SelectionKey.OP_WRITE, this);\n                if (flag) {\n                    logger.finest(\"Adding OP_WRITE as interest Ops for \" + getName());\n                } else if (ByteBufferOutputStream.isLoggable(Level.FINEST)) {\n                    logger.finest(\"OP_WRITE is already present in interest Ops for \" + getName());\n                }\n            } else if (getSelectionKey().isValid()) {\n                if ((getSelectionKey().interestOps() & SelectionKey.OP_WRITE) == 0) {\n                    logger.finest(\"Adding OP_WRITE to interest Ops for \" + getName());\n                    removeEvent(ClientEvent.WRITE);\n                    getSelectionKey().interestOps(getSelectionKey().interestOps() | SelectionKey.OP_WRITE);\n                    if (wakeupSelectorAfterRegisterWrite) {\n                        getServer().getSelector().wakeup();\n                    }\n                } else {\n                    if (ByteBufferOutputStream.isLoggable(Level.FINEST)) {\n                        logger.finest(\"OP_WRITE is already present in interest Ops for \" + getName());\n                    }\n                }\n            } else {\n                throw new IOException(\"SelectionKey is invalid!\");\n            }\n        } catch (CancelledKeyException e) {\n            throw new IOException(\"SelectionKey is cancelled!\");\n        }\n    }\n\n    protected void setClientWriteHandler(ClientWriteHandler handler) {\n        clientWriteHandler = handler;\n    }\n\n    /**\n     * Returns number of thread currently in this object.\n     * @since 1.4.6\n     */\n    public int getThreadAccessCount() {\n        return threadAccessCount;\n    }\n\n    private void doHandshake() throws Exception {\n        while (true) {\n            SSLEngineResult res;\n            logger.fine(\"handshakeStatus: \" + handshakeStatus);\n            if (handshakeStatus == SSLEngineResult.HandshakeStatus.FINISHED) {\n                if (initialHandshakeStatus) {\n                    finishInitialHandshake();\n                }\n                return;\n            } else if (handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_TASK) {\n                doTasks();\n                continue;\n            } else if (handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_UNWRAP) {\n                /*\n\t\t\t\t\tdoRead();\n\n\t\t\t\t\tif(initialHandshakeStatus && \n\t\t\t\t\t\t\tstatus == SSLEngineResult.Status.BUFFER_UNDERFLOW) {\n\t\t\t\t\t\tregisterForRead();\n\t\t\t\t\t}\n\t\t\t\t\t*/\n                return;\n            } else if (handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_WRAP) {\n                ByteBuffer netData = (ByteBuffer) getServer().getByteBufferPool().borrowObject();\n                //netData.clear();\n                res = sslEngine.wrap(dummyByteBuffer, netData);\n                logger.info(\"Wrapping:\\n\" + res);\n                assert res.bytesProduced() != 0 : \"No net data produced during handshake wrap.\";\n                assert res.bytesConsumed() == 0 : \"App data consumed during handshake wrap.\";\n                handshakeStatus = res.getHandshakeStatus();\n                //netData.flip(); -- no need to flip will be done when writing to sc\n                byteBufferOutputStream.addEncryptedByteBuffer(netData);\n                if (!doWrite()) {\n                    return;\n                }\n                //back to loop\n                continue;\n            } else if (handshakeStatus == SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {\n                assert false : \"doHandshake() should never reach the NOT_HANDSHAKING state\";\n                return;\n            }\n            //if\n        }\n        //loop\n    }\n\n    private void doTasks() {\n        Runnable task;\n        while ((task = sslEngine.getDelegatedTask()) != null) {\n            logger.fine(\"Running the task.. START \");\n            task.run();\n            logger.fine(\"Running the task.. END\");\n        }\n        handshakeStatus = sslEngine.getHandshakeStatus();\n        logger.fine(\"handshakeStatus: \" + handshakeStatus);\n    }\n\n    private void finishInitialHandshake() throws IOException {\n        initialHandshakeStatus = false;\n    }\n\n    public boolean getInitialHandshakeStatus() {\n        return initialHandshakeStatus;\n    }\n\n    public ByteBuffer encrypt(ByteBuffer src) throws IOException {\n        if (initialHandshakeStatus) {\n            logger.fine(\"Writing not possible during handshake!\");\n            //Exception e = new Exception();\n            //e.printStackTrace();\n            return null;\n        }\n        ByteBuffer dest = null;\n        boolean isException = false;\n        try {\n            src.flip();\n            dest = (ByteBuffer) getServer().getByteBufferPool().borrowObject();\n            //dest.clear();\n            SSLEngineResult res = sslEngine.wrap(src, dest);\n            logger.info(\"Wrapping:\\n\" + res);\n            //dest.flip();\n            return dest;\n        } catch (IOException e) {\n            logger.warning(\"IOException:\" + e);\n            isException = true;\n            throw e;\n        } catch (Exception e) {\n            logger.warning(\"Exception:\" + e);\n            isException = true;\n            throw new IOException(e.getMessage());\n        } finally {\n            if (isException == true && dest != null) {\n                try {\n                    getServer().getByteBufferPool().returnObject(dest);\n                } catch (Exception er) {\n                    logger.warning(\"Error in returning ByteBuffer to pool: \" + er);\n                }\n            }\n        }\n    }\n}\n",
        "test_prompt": "// NonBlockingClientHandler_0Test.java\npackage org.quickserver.net.server.impl;\n\nimport org.quickserver.net.server.*;\nimport org.quickserver.net.*;\nimport org.quickserver.util.*;\nimport org.quickserver.util.io.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport java.nio.*;\nimport java.nio.channels.*;\nimport javax.net.ssl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NonBlockingClientHandler}.\n* It contains one unit test case for the {@link NonBlockingClientHandler#getWakeupSelectorAfterRegisterWrite()} method.\n*/\nclass NonBlockingClientHandler_0Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// NonBlockingClientHandler_1Test.java\npackage org.quickserver.net.server.impl;\n\nimport org.quickserver.net.server.*;\nimport org.quickserver.net.*;\nimport org.quickserver.util.*;\nimport org.quickserver.util.io.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport java.nio.*;\nimport java.nio.channels.*;\nimport javax.net.ssl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NonBlockingClientHandler}.\n* It contains one unit test case for the {@link NonBlockingClientHandler#getWakeupSelectorAfterRegisterRead()} method.\n*/\nclass NonBlockingClientHandler_1Test {\n}"
            }
        ],
        "id": "47a94377-2bce-4e18-a8c6-2c3ab5598a56",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/impl/NonBlockingClientHandler_1Test.java",
        "original_code": "// NonBlockingClientHandler.java\n/*\n * This file is part of the QuickServer library \n * Copyright (C) QuickServer.org\n *\n * Use, modification, copying and distribution of this software is subject to\n * the terms and conditions of the GNU Lesser General Public License. \n * You should have received a copy of the GNU LGP License along with this \n * library; if not, you can download a copy from <http://www.quickserver.org/>.\n *\n * For questions, suggestions, bug-reports, enhancement-requests etc.\n * visit http://www.quickserver.org\n *\n */\npackage org.quickserver.net.server.impl;\n\nimport org.quickserver.net.server.*;\nimport org.quickserver.net.*;\nimport org.quickserver.util.*;\nimport org.quickserver.util.io.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport java.nio.*;\nimport java.nio.channels.*;\nimport javax.net.ssl.*;\n\npublic class NonBlockingClientHandler extends BasicClientHandler {\n\n    private static final Logger logger = Logger.getLogger(NonBlockingClientHandler.class.getName());\n\n    //v1.4.5\n    protected ClientWriteHandler clientWriteHandler;\n\n    private SocketChannel socketChannel;\n\n    protected ArrayList readByteBuffer = new ArrayList();\n\n    protected ArrayList writeByteBuffer = new ArrayList();\n\n    protected SelectionKey selectionKey;\n\n    protected volatile int threadAccessCount = 0;\n\n    protected volatile boolean willReturn;\n\n    protected volatile boolean waitingForFinalWrite;\n\n    //one for each event ACCEPT, WRITE, READ\n    private static int maxThreadAccessCount = 5;\n\n    private static boolean wakeupSelectorAfterRegisterWrite = true;\n\n    private static boolean wakeupSelectorAfterRegisterRead = true;\n\n    //nio ssl\n    //private final SSLSession session;\n    private boolean initialHandshakeStatus = false;\n\n    private SSLEngineResult.HandshakeStatus handshakeStatus;\n\n    private SSLEngineResult.Status status = null;\n\n    private ByteBuffer dummyByteBuffer = ByteBuffer.allocate(0);\n\n    private ByteBuffer peerNetData = null;\n\n    private boolean sslShutdown = false;\n\n    /**\n     * Sets the flag to wakeup Selector After RegisterForWrite is called.\n     * @since 1.4.7\n     */\n    public static void setWakeupSelectorAfterRegisterWrite(boolean flag) {\n        wakeupSelectorAfterRegisterWrite = flag;\n    }\n\n    /**\n     * Returns wakeupSelectorAfterRegisterWrite the flag that controls if wakeup is called on Selector\n     * after RegisterForWrite is called.\n     * @since 1.4.7\n     */\n    public static boolean getWakeupSelectorAfterRegisterWrite() {\n        return wakeupSelectorAfterRegisterWrite;\n    }\n\n    /**\n     * Sets the flag to wakeup Selector After RegisterForRead is called.\n     * @since 1.4.7\n     */\n    public static void setWakeupSelectorAfterRegisterRead(boolean flag) {\n        wakeupSelectorAfterRegisterRead = flag;\n    }\n\n    /**\n     * Returns wakeupSelectorAfterRegisterRead the flag that controls if wakeup is called on Selector\n     * after RegisterForRead is called.\n     * @since 1.4.7\n     */\n    public static boolean getWakeupSelectorAfterRegisterRead() {\n        return wakeupSelectorAfterRegisterRead;\n    }\n\n    /**\n     * Sets the maximum count of thread allowed to run objects of this class at a time.\n     * @since 1.4.7\n     */\n    public static void setMaxThreadAccessCount(int count) {\n        if (count < 3 && count != -1)\n            throw new IllegalArgumentException(\"Value should be >=3 or -1\");\n        maxThreadAccessCount = count;\n    }\n\n    /**\n     * Returns the maximum count of thread allowed to run objects of this class at a time.\n     * @since 1.4.7\n     */\n    public static int getMaxThreadAccessCount() {\n        return maxThreadAccessCount;\n    }\n\n    //v1.4.7\n    private ByteBufferOutputStream byteBufferOutputStream;\n\n    public NonBlockingClientHandler(int instanceCount) {\n        super(instanceCount);\n    }\n\n    public NonBlockingClientHandler() {\n        super();\n    }\n\n    public void clean() {\n        logger.finest(\"Starting clean - \" + getName());\n        if (threadAccessCount != 0) {\n            logger.warning(\"Thread Access Count was not 0!: \" + threadAccessCount);\n            if (Assertion.isEnabled()) {\n                assertionSystemExit();\n            }\n            threadAccessCount = 0;\n        }\n        while (readByteBuffer.isEmpty() == false) {\n            try {\n                getServer().getByteBufferPool().returnObject(readByteBuffer.remove(0));\n            } catch (Exception er) {\n                logger.warning(\"Error in returning read ByteBuffer to pool: \" + er);\n                break;\n            }\n        }\n        while (writeByteBuffer.isEmpty() == false) {\n            try {\n                getServer().getByteBufferPool().returnObject(writeByteBuffer.remove(0));\n            } catch (Exception er) {\n                appLogger.warning(\"Error in returning write ByteBuffer to pool: \" + er);\n                break;\n            }\n        }\n        if (peerNetData != null) {\n            try {\n                getServer().getByteBufferPool().returnObject(peerNetData);\n            } catch (Exception er) {\n                appLogger.warning(\"Error in returning peerNetData to pool: \" + er);\n            }\n        }\n        if (selectionKey != null) {\n            selectionKey.cancel();\n            selectionKey.selector().wakeup();\n            selectionKey = null;\n        }\n        willReturn = false;\n        waitingForFinalWrite = false;\n        socketChannel = null;\n        if (byteBufferOutputStream != null) {\n            byteBufferOutputStream.close();\n        }\n        super.clean();\n        //1.4.5\n        clientWriteHandler = null;\n        byteBufferOutputStream = null;\n        sslShutdown = false;\n        logger.finest(\"Finished clean - \" + getName());\n    }\n\n    protected void finalize() throws Throwable {\n        clean();\n        super.finalize();\n    }\n\n    public void handleClient(TheClient theClient) throws Exception {\n        super.handleClient(theClient);\n        //v1.4.5\n        setClientWriteHandler(theClient.getClientWriteHandler());\n        //1.4.5\n        setSocketChannel(theClient.getSocketChannel());\n    }\n\n    protected void setInputStream(InputStream in) throws IOException {\n        this.in = in;\n        if (getDataMode(DataType.IN) == DataMode.STRING) {\n            b_in = null;\n            o_in = null;\n            bufferedReader = null;\n        } else if (getDataMode(DataType.IN) == DataMode.OBJECT) {\n            b_in = null;\n            bufferedReader = null;\n            o_in = new ObjectInputStream(in);\n        } else if (getDataMode(DataType.IN) == DataMode.BYTE || getDataMode(DataType.IN) == DataMode.BINARY) {\n            o_in = null;\n            bufferedReader = null;\n            b_in = null;\n        }\n    }\n\n    public BufferedReader getBufferedReader() {\n        throw new IllegalStateException(\"Access to BufferedReader in not allowed in Non-Blocking mode!\");\n    }\n\n    public void closeConnection() {\n        logger.finest(\"inside\");\n        synchronized (this) {\n            if (connection == false)\n                return;\n            if (waitingForFinalWrite)\n                return;\n            if (getSelectionKey() != null && getSelectionKey().isValid() && lost == false) {\n                waitingForFinalWrite = true;\n            } else {\n                connection = false;\n            }\n        }\n        try {\n            if (getSocketChannel() != null && socket != null) {\n                if (waitingForFinalWrite) {\n                    try {\n                        waitTillFullyWritten();\n                    } catch (Exception error) {\n                        logger.warning(\"Error in waitingForFinalWrite : \" + error);\n                        if (logger.isLoggable(Level.FINE)) {\n                            logger.fine(\"StackTrace:\\n\" + MyString.getStackTrace(error));\n                        }\n                    }\n                }\n                //end of waitingForFinalWrite\n                if (isSecure() == true) {\n                    sslShutdown = true;\n                    if (lost == false && sslEngine.isOutboundDone() == false) {\n                        logger.finest(\"SSL isOutboundDone is false\");\n                        if (byteBufferOutputStream.doShutdown() == false) {\n                            return;\n                        }\n                    } else if (sslEngine.isOutboundDone()) {\n                        logger.finest(\"SSL Outbound is done.\");\n                    }\n                }\n                doPostCloseActivity();\n            }\n            //if socket\n        } catch (IOException e) {\n            logger.warning(\"Error in closeConnection : \" + e);\n            if (logger.isLoggable(Level.FINE)) {\n                logger.fine(\"StackTrace:\\n\" + MyString.getStackTrace(e));\n            }\n        } catch (NullPointerException npe) {\n            logger.fine(\"NullPointerException: \" + npe);\n            if (logger.isLoggable(Level.FINE)) {\n                logger.fine(\"StackTrace:\\n\" + MyString.getStackTrace(npe));\n            }\n        }\n    }\n\n    private void doPostCloseActivity() throws IOException {\n        connection = false;\n        byteBufferOutputStream.forceNotify();\n        getSelectionKey().cancel();\n        if (getServer() != null) {\n            getServer().getSelector().wakeup();\n        }\n        synchronized (this) {\n            if (hasEvent(ClientEvent.MAX_CON) == false) {\n                notifyCloseOrLost();\n            }\n            if (getSocketChannel().isOpen()) {\n                logger.finest(\"Closing SocketChannel\");\n                getSocketChannel().close();\n            }\n        }\n    }\n\n    public boolean closeIfSSLOutboundDone() {\n        if (isSecure() == false)\n            throw new IllegalStateException(\"Client is not in secure mode!\");\n        if (sslEngine.isOutboundDone()) {\n            logger.finest(\"SSL Outbound is done.\");\n            try {\n                if (getSocketChannel().isOpen()) {\n                    logger.finest(\"Closing SocketChannel\");\n                    getSocketChannel().close();\n                }\n            } catch (IOException e) {\n                logger.fine(\"IGNORE: Error in Closing SocketChannel: \" + e);\n            }\n            return true;\n        } else {\n            logger.finest(\"SSL Outbound is not done.\");\n            return false;\n        }\n    }\n\n    /**\n     * waitTillFullyWritten\n     * @since 1.4.7\n     */\n    public void waitTillFullyWritten() {\n        Object waitLock = new Object();\n        if (byteBufferOutputStream.isDataAvailableForWrite(waitLock)) {\n            if (ByteBufferOutputStream.isLoggable(Level.FINEST)) {\n                logger.finest(\"Waiting \" + getName());\n            }\n            try {\n                synchronized (waitLock) {\n                    //2 min max\n                    waitLock.wait(1000 * 60 * 2);\n                }\n            } catch (InterruptedException ie) {\n                logger.warning(\"Error: \" + ie);\n            }\n            if (ByteBufferOutputStream.isLoggable(Level.FINEST)) {\n                logger.finest(\"Done. \" + getName());\n            }\n        }\n    }\n\n    public void run() {\n        if (unprocessedClientEvents.isEmpty()) {\n            logger.finest(\"No unprocessed ClientEvents!\");\n            return;\n        }\n        synchronized (this) {\n            if (willReturn) {\n                return;\n            } else {\n                threadAccessCount++;\n            }\n        }\n        ClientEvent currentEvent = (ClientEvent) unprocessedClientEvents.poll();\n        if (currentEvent == null) {\n            threadEvent.set(null);\n            logger.finest(\"No unprocessed ClientEvents! pool was null\");\n            return;\n        }\n        if (logger.isLoggable(Level.FINEST)) {\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"Running \").append(getName());\n            sb.append(\" using \");\n            sb.append(Thread.currentThread().getName());\n            sb.append(\" for \");\n            synchronized (clientEvents) {\n                if (clientEvents.size() > 1) {\n                    sb.append(currentEvent + \", Current Events - \" + clientEvents);\n                } else {\n                    sb.append(currentEvent);\n                }\n            }\n            logger.finest(sb.toString());\n        }\n        logger.finest(\"threadAccessCount: \" + threadAccessCount);\n        threadEvent.set(currentEvent);\n        try {\n            if (maxThreadAccessCount != -1 && threadAccessCount > maxThreadAccessCount) {\n                logger.warning(\"ThreadAccessCount can't go beyond \" + maxThreadAccessCount + \": \" + threadAccessCount);\n                if (Assertion.isEnabled()) {\n                    throw new AssertionError(\"ThreadAccessCount can't go beyond \" + maxThreadAccessCount + \": \" + threadAccessCount);\n                }\n                return;\n            }\n            if (socket == null)\n                throw new SocketException(\"Socket was null!\");\n            if (getThreadEvent() == ClientEvent.ACCEPT || getThreadEvent() == ClientEvent.MAX_CON) {\n                prepareForRun();\n                Assertion.affirm(willReturn == false, \"WillReturn has to be false!: \" + willReturn);\n            }\n            if (getThreadEvent() == ClientEvent.MAX_CON) {\n                processMaxConnection(currentEvent);\n            }\n            try {\n                if (getThreadEvent() == ClientEvent.ACCEPT) {\n                    registerForRead();\n                    clientEventHandler.gotConnected(this);\n                    if (authorised == false) {\n                        if (clientAuthenticationHandler == null && authenticator == null) {\n                            authorised = true;\n                            logger.finest(\"No Authenticator \" + getName() + \" so return thread.\");\n                        } else {\n                            if (clientAuthenticationHandler != null) {\n                                AuthStatus authStatus = null;\n                                do {\n                                    authStatus = processAuthorisation();\n                                } while (authStatus == AuthStatus.FAILURE);\n                                if (authStatus == AuthStatus.SUCCESS)\n                                    authorised = true;\n                            } else {\n                                processAuthorisation();\n                            }\n                            if (authorised)\n                                logger.finest(\"Authentication done \" + getName() + \", so return thread.\");\n                            else\n                                logger.finest(\"askAuthentication() done \" + getName() + \", so return thread.\");\n                        }\n                    }\n                    //end authorised\n                    //return thread to pool\n                    returnThread();\n                    return;\n                }\n                if (connection && getThreadEvent() == ClientEvent.READ) {\n                    if (processRead())\n                        return;\n                }\n                if (connection && getThreadEvent() == ClientEvent.WRITE) {\n                    if (processWrite())\n                        return;\n                }\n            } catch (SocketException e) {\n                appLogger.finest(\"SocketException - Client [\" + getHostAddress() + \"]: \" + e.getMessage());\n                //e.printStackTrace();\n                lost = true;\n            } catch (AppException e) {\n                //errors from Application\n                appLogger.finest(\"AppException \" + Thread.currentThread().getName() + \": \" + e.getMessage());\n            } catch (javax.net.ssl.SSLException e) {\n                lost = true;\n                if (Assertion.isEnabled()) {\n                    appLogger.info(\"SSLException - Client [\" + getHostAddress() + \"] \" + Thread.currentThread().getName() + \": \" + e);\n                } else {\n                    appLogger.warning(\"SSLException - Client [\" + getHostAddress() + \"]: \" + e);\n                }\n            } catch (ConnectionLostException e) {\n                lost = true;\n                if (e.getMessage() != null)\n                    appLogger.finest(\"Connection lost \" + Thread.currentThread().getName() + \": \" + e.getMessage());\n                else\n                    appLogger.finest(\"Connection lost \" + Thread.currentThread().getName());\n            } catch (ClosedChannelException e) {\n                lost = true;\n                appLogger.finest(\"Channel closed \" + Thread.currentThread().getName() + \": \" + e);\n            } catch (IOException e) {\n                lost = true;\n                appLogger.fine(\"IOError \" + Thread.currentThread().getName() + \": \" + e);\n            } catch (AssertionError er) {\n                logger.warning(\"[AssertionError] \" + getName() + \" \" + er);\n                if (logger.isLoggable(Level.FINEST)) {\n                    logger.finest(\"StackTrace \" + Thread.currentThread().getName() + \": \" + MyString.getStackTrace(er));\n                }\n                assertionSystemExit();\n            } catch (Error er) {\n                logger.warning(\"[Error] \" + er);\n                if (logger.isLoggable(Level.FINEST)) {\n                    logger.finest(\"StackTrace \" + Thread.currentThread().getName() + \": \" + MyString.getStackTrace(er));\n                }\n                if (Assertion.isEnabled()) {\n                    assertionSystemExit();\n                }\n                lost = true;\n            } catch (RuntimeException re) {\n                logger.warning(\"[RuntimeException] \" + MyString.getStackTrace(re));\n                if (Assertion.isEnabled()) {\n                    assertionSystemExit();\n                }\n                lost = true;\n            }\n            if (getThreadEvent() != ClientEvent.MAX_CON) {\n                notifyCloseOrLost();\n            }\n            if (connection) {\n                logger.finest(Thread.currentThread().getName() + \" calling closeConnection()\");\n                closeConnection();\n            }\n            if (connection == true && lost == true && waitingForFinalWrite) {\n                byteBufferOutputStream.forceNotify();\n            }\n        } catch (javax.net.ssl.SSLException se) {\n            logger.warning(\"SSLException \" + Thread.currentThread().getName() + \" - \" + se);\n        } catch (IOException ie) {\n            logger.warning(\"IOError \" + Thread.currentThread().getName() + \" - Closing Client : \" + ie);\n        } catch (RuntimeException re) {\n            logger.warning(\"[RuntimeException] \" + getName() + \" \" + Thread.currentThread().getName() + \" - \" + MyString.getStackTrace(re));\n            if (Assertion.isEnabled()) {\n                assertionSystemExit();\n            }\n        } catch (Exception e) {\n            logger.warning(\"Error \" + Thread.currentThread().getName() + \" - Event:\" + getThreadEvent() + \" - Socket:\" + socket + \" : \" + e);\n            logger.fine(\"StackTrace: \" + getName() + \"\\n\" + MyString.getStackTrace(e));\n            if (Assertion.isEnabled()) {\n                assertionSystemExit();\n            }\n        } catch (Error e) {\n            logger.warning(\"Error \" + Thread.currentThread().getName() + \" - Event:\" + getThreadEvent() + \" - Socket:\" + socket + \" : \" + e);\n            logger.fine(\"StackTrace: \" + getName() + \"\\n\" + MyString.getStackTrace(e));\n            if (Assertion.isEnabled()) {\n                assertionSystemExit();\n            }\n        }\n        synchronized (this) {\n            try {\n                if (getSelectionKey() != null && getSelectionKey().isValid()) {\n                    logger.finest(\"Canceling SelectionKey\");\n                    getSelectionKey().cancel();\n                }\n                if (socket != null && socket.isClosed() == false) {\n                    logger.finest(\"Closing Socket\");\n                    socket.close();\n                }\n                if (getSocketChannel() != null && getSocketChannel().isOpen()) {\n                    logger.finest(\"Closing SocketChannel\");\n                    socketChannel.close();\n                }\n            } catch (Exception re) {\n                logger.warning(\"Error closing Socket/Channel: \" + re);\n            }\n        }\n        //end synchronized\n        willClean = true;\n        returnClientData();\n        boolean returnClientHandler = false;\n        synchronized (lockObj) {\n            returnThread();\n            returnClientHandler = checkReturnClientHandler();\n        }\n        if (returnClientHandler) {\n            //return to pool\n            returnClientHandler();\n        }\n    }\n\n    protected boolean checkReturnClientHandler() {\n        if (willReturn == false) {\n            willReturn = true;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Process read\n     * @return value indicates if the thread should return form run()\n     */\n    private boolean processRead() throws Exception {\n        if (doRead()) {\n            //return to pool\n            returnThread();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private boolean doRead() throws Exception {\n        int count = 0;\n        int fullCount = 0;\n        while (true) {\n            try {\n                if (peerNetData == null) {\n                    peerNetData = (ByteBuffer) getServer().getByteBufferPool().borrowObject();\n                }\n                count = getSocketChannel().read(peerNetData);\n                if (count < 0) {\n                    //logger.finest(\"SocketChannel read was \"+count+\"!\");\n                    getServer().getByteBufferPool().returnObject(peerNetData);\n                    peerNetData = null;\n                    break;\n                } else {\n                    fullCount += count;\n                }\n                // Make readable\n                peerNetData.flip();\n                ByteBuffer peerAppData = null;\n                //--\n                if (sslEngine != null) {\n                    SSLEngineResult res;\n                    peerAppData = (ByteBuffer) getServer().getByteBufferPool().borrowObject();\n                    do {\n                        res = sslEngine.unwrap(peerNetData, peerAppData);\n                        logger.info(\"Unwrapping:\\n\" + res);\n                    } while (res.getStatus() == SSLEngineResult.Status.OK && res.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_UNWRAP && res.bytesProduced() == 0);\n                    if (res.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.FINISHED) {\n                        logger.info(\"HandshakeStatus.FINISHED!\");\n                        finishInitialHandshake();\n                    }\n                    if (peerAppData.position() == 0 && res.getStatus() == SSLEngineResult.Status.OK && peerNetData.hasRemaining()) {\n                        logger.info(\"peerNetData hasRemaining and pos=0!\");\n                        res = sslEngine.unwrap(peerNetData, peerAppData);\n                        logger.info(\"Unwrapping:\\n\" + res);\n                    }\n                    /*\n\t\t\t\t\t * OK, OVERFLOW, UNDERFLOW, CLOSED\n\t\t\t\t\t */\n                    status = res.getStatus();\n                    handshakeStatus = res.getHandshakeStatus();\n                    if (status != SSLEngineResult.Status.BUFFER_OVERFLOW) {\n                        logger.warning(\"Buffer overflow: \" + res.toString());\n                    } else if (status == SSLEngineResult.Status.CLOSED) {\n                        logger.fine(\"Connection is being closed by peer.\");\n                        lost = true;\n                        System.out.println(\"NEdd to code for shutdow of SSL\");\n                        break;\n                    }\n                    peerNetData.compact();\n                    peerAppData.flip();\n                    if (handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_TASK || handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_WRAP || handshakeStatus == SSLEngineResult.HandshakeStatus.FINISHED) {\n                        doHandshake();\n                    }\n                    //return peerAppData.remaining();\n                    logger.fine(\"peerAppData.remaining(): \" + peerAppData.remaining());\n                } else {\n                    peerAppData = peerNetData;\n                    peerNetData = null;\n                }\n                //--\n                readByteBuffer.add(peerAppData);\n                peerAppData = null;\n            } catch (Exception error) {\n                logger.finest(\"Error in data read: \" + error);\n                if (sslEngine != null)\n                    sslEngine.closeInbound();\n                lost = true;\n                synchronized (getInputStream()) {\n                    getInputStream().notifyAll();\n                }\n                throw error;\n            }\n            if (count == 0)\n                break;\n        }\n        //end while\n        if (count < 0) {\n            logger.finest(\"SocketChannel read was \" + count + \"!\");\n            if (sslEngine != null)\n                sslEngine.closeInbound();\n            lost = true;\n            synchronized (getInputStream()) {\n                getInputStream().notifyAll();\n            }\n        } else {\n            logger.finest(fullCount + \" bytes read\");\n            if (fullCount != 0) {\n                updateLastCommunicationTime();\n                synchronized (getInputStream()) {\n                    //if any are waiting\n                    getInputStream().notify();\n                }\n                if (hasEvent(ClientEvent.ACCEPT) == false) {\n                    processGotDataInBuffers();\n                }\n            }\n            //check if any data was read but not yet processed\n            while (getInputStream().available() > 0) {\n                logger.finest(\"Sending again for processing...\");\n                if (hasEvent(ClientEvent.ACCEPT) == false) {\n                    processGotDataInBuffers();\n                    break;\n                } else {\n                    synchronized (getInputStream()) {\n                        getInputStream().notifyAll();\n                    }\n                    Thread.sleep(100);\n                }\n            }\n            if (connection) {\n                registerForRead();\n                //getSelectionKey().selector().wakeup();\n                return true;\n            }\n        }\n        //end of else\n        logger.finest(\"We don't have connection, lets return all resources.\");\n        return false;\n    }\n\n    /**\n     * Process write\n     * @return value indicates if the thread should return form run()\n     */\n    private boolean processWrite() throws IOException {\n        if (doWrite()) {\n            //return to pool\n            returnThread();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private boolean doWrite() throws IOException {\n        if (sslShutdown) {\n            if (byteBufferOutputStream.doShutdown() == false) {\n                return true;\n            }\n            doPostCloseActivity();\n            logger.finest(\"We don't have connection, lets return all resources.\");\n            return false;\n        }\n        updateLastCommunicationTime();\n        boolean flag = byteBufferOutputStream.writeAllByteBuffer();\n        if (flag == false) {\n            registerWrite();\n        } else if (/*flag==true && */\n        clientWriteHandler != null) {\n            clientWriteHandler.handleWrite(this);\n        }\n        if (connection) {\n            return true;\n        } else {\n            logger.finest(\"We don't have connection, lets return all resources.\");\n            return false;\n        }\n    }\n\n    protected void returnThread() {\n        //System.out.println(\"returnThread..\");\n        //(new Exception()).printStackTrace();\n        threadAccessCount--;\n        Assertion.affirm(threadAccessCount >= 0, \"ThreadAccessCount went less the 0! Value: \" + threadAccessCount);\n        //return is done at ClientThread end\n        removeEvent((ClientEvent) threadEvent.get());\n    }\n\n    protected void returnClientHandler() {\n        logger.finest(getName());\n        try {\n            for (int i = 0; threadAccessCount != 0; i++) {\n                if (i == 100) {\n                    logger.warning(\"ClientHandler must have got into a loop waiting for thread to free up! ThreadAccessCount=\" + threadAccessCount);\n                    threadAccessCount = 0;\n                    if (Assertion.isEnabled()) {\n                        assertionSystemExit();\n                    } else {\n                        break;\n                    }\n                }\n                if (threadAccessCount <= 0)\n                    break;\n                logger.finest(\"Waiting for other thread of \" + getName() + \" to finish\");\n                Thread.sleep(60);\n            }\n        } catch (InterruptedException ie) {\n            appLogger.warning(\"InterruptedException: \" + ie);\n        }\n        super.returnClientHandler();\n    }\n\n    public void setDataMode(DataMode dataMode, DataType dataType) throws IOException {\n        if (getDataMode(dataType) == dataMode)\n            return;\n        appLogger.fine(\"Setting Type:\" + dataType + \", Mode:\" + dataMode);\n        super.checkDataModeSet(dataMode, dataType);\n        setDataModeNonBlocking(dataMode, dataType);\n    }\n\n    private void setDataModeNonBlocking(DataMode dataMode, DataType dataType) throws IOException {\n        logger.finest(\"ENTER\");\n        if (dataMode == DataMode.STRING) {\n            if (dataType == DataType.OUT) {\n                if (dataModeOUT == DataMode.BYTE || dataModeOUT == DataMode.BINARY) {\n                    dataModeOUT = dataMode;\n                } else if (dataModeOUT == DataMode.OBJECT) {\n                    dataModeOUT = dataMode;\n                    o_out.flush();\n                    o_out = null;\n                    b_out = new BufferedOutputStream(out);\n                } else {\n                    Assertion.affirm(false, \"Unknown DataType.OUT DataMode - \" + dataModeOUT);\n                }\n                Assertion.affirm(b_out != null, \"BufferedOutputStream is still null!\");\n                Assertion.affirm(o_out == null, \"ObjectOutputStream is still not null!\");\n            } else if (dataType == DataType.IN) {\n                dataModeIN = dataMode;\n                if (o_in != null) {\n                    if (o_in.available() != 0)\n                        logger.warning(\"Data looks to be present in ObjectInputStream\");\n                    o_in = null;\n                }\n                b_in = null;\n                bufferedReader = null;\n                //input stream will work\n                Assertion.affirm(in != null, \"InputStream is still null!\");\n                Assertion.affirm(b_in == null, \"BufferedInputStream is still not null!\");\n                Assertion.affirm(bufferedReader == null, \"BufferedReader is still not null!\");\n            }\n        } else if (dataMode == DataMode.OBJECT) {\n            if (dataType == DataType.IN) {\n                //we will disable this for now\n                throw new IllegalArgumentException(\"Can't set DataType.IN mode to OBJECT when blocking mode is set as false!\");\n            }\n            if (dataType == DataType.OUT) {\n                dataModeOUT = dataMode;\n                b_out = null;\n                o_out = new ObjectOutputStream(out);\n                Assertion.affirm(o_out != null, \"ObjectOutputStream is still null!\");\n                o_out.flush();\n            } else if (dataType == DataType.IN) {\n                dataModeIN = dataMode;\n                b_in = null;\n                bufferedReader = null;\n                registerForRead();\n                //will block\n                o_in = new ObjectInputStream(in);\n                Assertion.affirm(o_in != null, \"ObjectInputStream is still null!\");\n            }\n        } else if (dataMode == DataMode.BYTE || dataMode == DataMode.BINARY) {\n            if (dataType == DataType.OUT) {\n                if (dataModeOUT == DataMode.STRING || dataModeOUT == DataMode.BYTE || dataModeOUT == DataMode.BINARY) {\n                    dataModeOUT = dataMode;\n                } else if (dataModeOUT == DataMode.OBJECT) {\n                    dataModeOUT = dataMode;\n                    o_out = null;\n                    b_out = new BufferedOutputStream(out);\n                } else {\n                    Assertion.affirm(false, \"Unknown DataType.OUT - DataMode: \" + dataModeOUT);\n                }\n                Assertion.affirm(b_out != null, \"BufferedOutputStream is still null!\");\n            } else if (dataType == DataType.IN) {\n                dataModeIN = dataMode;\n                o_in = null;\n                bufferedReader = null;\n                b_in = null;\n                //input stream will work\n                Assertion.affirm(in != null, \"InputStream is still null!\");\n            } else {\n                throw new IllegalArgumentException(\"Unknown DataType : \" + dataType);\n            }\n        } else {\n            throw new IllegalArgumentException(\"Unknown DataMode : \" + dataMode);\n        }\n    }\n\n    protected byte[] readInputStream() throws IOException {\n        return readInputStream(getInputStream());\n    }\n\n    public void updateInputOutputStreams() throws IOException {\n        byteBufferOutputStream = new ByteBufferOutputStream(writeByteBuffer, this);\n        setInputStream(new ByteBufferInputStream(readByteBuffer, this, getCharset()));\n        setOutputStream(byteBufferOutputStream);\n        //logger.warning(\"updateInputOutputStreams: \"+sslEngine);\n        if (sslEngine != null) {\n            sslEngine.setUseClientMode(false);\n            sslEngine.beginHandshake();\n            handshakeStatus = sslEngine.getHandshakeStatus();\n            initialHandshakeStatus = true;\n            /*\n\t\t\ttry {\n\t\t\t\tdoHandshake();\n\t\t\t} catch(Exception e) {\n\t\t\t\tlogger.warning(\"Error: \"+e);\n\t\t\t\tthrow new IOException(e.toString());\n\t\t\t}\n\t\t\t*/\n        }\n    }\n\n    public boolean getBlockingMode() {\n        return false;\n    }\n\n    public void setSocketChannel(SocketChannel socketChannel) {\n        this.socketChannel = socketChannel;\n    }\n\n    public SocketChannel getSocketChannel() {\n        return socketChannel;\n    }\n\n    public void setSelectionKey(SelectionKey selectionKey) {\n        this.selectionKey = selectionKey;\n    }\n\n    public SelectionKey getSelectionKey() {\n        if (selectionKey == null)\n            selectionKey = getSocketChannel().keyFor(getServer().getSelector());\n        return selectionKey;\n    }\n\n    private void processGotDataInBuffers() throws AppException, ConnectionLostException, ClassNotFoundException, IOException {\n        if (getInputStream().available() == 0)\n            return;\n        logger.finest(\"Trying to process got data.. DataMode.IN=\" + dataModeIN);\n        AuthStatus authStatus = null;\n        //--For debug\n        ((ByteBufferInputStream) getInputStream()).dumpContent();\n        String temp = null;\n        String rec = null;\n        Object recObject = null;\n        byte[] recByte = null;\n        boolean timeToCheckForNewLineMiss = false;\n        do {\n            //updateLastCommunicationTime();\n            if (dataModeIN == DataMode.STRING) {\n                ByteBufferInputStream bbin = (ByteBufferInputStream) getInputStream();\n                timeToCheckForNewLineMiss = true;\n                while (bbin.isLineReady()) {\n                    rec = bbin.readLine();\n                    if (rec == null) {\n                        lost = true;\n                        return;\n                    }\n                    if (getCommunicationLogging() && authorised == true) {\n                        appLogger.log(Level.FINE, \"Got STRING [{0}] : {1}\", new Object[] { getHostAddress(), rec });\n                    }\n                    totalReadBytes = totalReadBytes + rec.length();\n                    if (authorised == false)\n                        authStatus = clientAuthenticationHandler.handleAuthentication(this, rec);\n                    else\n                        clientCommandHandler.handleCommand(this, rec);\n                    if (isClosed() == true)\n                        return;\n                    while (authStatus == AuthStatus.FAILURE) authStatus = processAuthorisation();\n                    if (authStatus == AuthStatus.SUCCESS)\n                        authorised = true;\n                    if (dataModeIN != DataMode.STRING) {\n                        break;\n                    }\n                    timeToCheckForNewLineMiss = false;\n                }\n                //end of while\n                if (timeToCheckForNewLineMiss && bbin.availableOnlyInByteBuffer() == 0) {\n                    return;\n                } else {\n                    timeToCheckForNewLineMiss = false;\n                }\n            }\n            //if(dataModeIN == DataMode.OBJECT) {\n            while (dataModeIN == DataMode.OBJECT && o_in != null) {\n                //not sure if all bytes are in buffer..~ may need more read.. will get stuck..\n                recObject = o_in.readObject();\n                if (recObject == null) {\n                    lost = true;\n                    return;\n                }\n                if (getCommunicationLogging() && authorised == true) {\n                    appLogger.log(Level.FINE, \"Got OBJECT [{0}] : {1}\", new Object[] { getHostAddress(), recObject.toString() });\n                }\n                totalReadBytes = totalReadBytes + 1;\n                if (authorised == false)\n                    authStatus = clientAuthenticationHandler.handleAuthentication(this, recObject);\n                else\n                    clientObjectHandler.handleObject(this, recObject);\n                if (isClosed() == true)\n                    return;\n                while (authStatus == AuthStatus.FAILURE) authStatus = processAuthorisation();\n                if (authStatus == AuthStatus.SUCCESS)\n                    authorised = true;\n            }\n            //}\n            //if(dataModeIN == DataMode.BYTE) {\n            while (dataModeIN == DataMode.BYTE && getInputStream().available() != 0) {\n                rec = readBytes();\n                if (rec == null) {\n                    lost = true;\n                    return;\n                }\n                if (getCommunicationLogging() && authorised == true) {\n                    appLogger.log(Level.FINE, \"Got BYTE [{0}] : {1}\", new Object[] { getHostAddress(), rec });\n                }\n                totalReadBytes = totalReadBytes + rec.length();\n                if (authorised == false)\n                    authStatus = clientAuthenticationHandler.handleAuthentication(this, rec);\n                else\n                    clientCommandHandler.handleCommand(this, rec);\n                if (isClosed() == true)\n                    return;\n                while (authStatus == AuthStatus.FAILURE) authStatus = processAuthorisation();\n                if (authStatus == AuthStatus.SUCCESS)\n                    authorised = true;\n            }\n            //} else if(dataModeIN == DataMode.BINARY) {\n            while (dataModeIN == DataMode.BINARY && getInputStream().available() != 0) {\n                recByte = readBinary();\n                if (recByte == null) {\n                    lost = true;\n                    return;\n                }\n                if (getCommunicationLogging() && authorised == true) {\n                    if (getServer().isRawCommunicationLogging()) {\n                        if (getServer().getRawCommunicationMaxLength() > 0 && recByte.length > getServer().getRawCommunicationMaxLength()) {\n                            appLogger.log(Level.FINE, \"Got BINARY [{0}] : {1}; RAW: {2}{3}\", new Object[] { getHostAddress(), MyString.getMemInfo(recByte.length), new String(recByte, 0, getServer().getRawCommunicationMaxLength(), charset), \"...\" });\n                        } else {\n                            appLogger.log(Level.FINE, \"Got BINARY [{0}] : {1}; RAW: {2}\", new Object[] { getHostAddress(), MyString.getMemInfo(recByte.length), new String(recByte, charset) });\n                        }\n                    } else {\n                        appLogger.log(Level.FINE, \"Got BINARY [{0}] : {1}\", new Object[] { getHostAddress(), MyString.getMemInfo(recByte.length) });\n                    }\n                } else if (getCommunicationLogging()) {\n                    appLogger.log(Level.FINE, \"Got BINARY [{0}] : {1}\", new Object[] { getHostAddress(), MyString.getMemInfo(recByte.length) });\n                }\n                totalReadBytes = totalReadBytes + recByte.length;\n                if (authorised == false)\n                    authStatus = clientAuthenticationHandler.handleAuthentication(this, recByte);\n                else\n                    clientBinaryHandler.handleBinary(this, recByte);\n                if (isClosed() == true)\n                    return;\n                while (authStatus == AuthStatus.FAILURE) authStatus = processAuthorisation();\n                if (authStatus == AuthStatus.SUCCESS)\n                    authorised = true;\n            }\n            //} else {\n            if (dataModeIN != DataMode.STRING && dataModeIN != DataMode.OBJECT && dataModeIN != DataMode.BYTE && dataModeIN != DataMode.BINARY) {\n                throw new IllegalStateException(\"Incoming DataMode is not supported : \" + dataModeIN);\n            }\n        } while (getInputStream().available() != 0);\n    }\n\n    public void registerForRead() throws IOException, ClosedChannelException {\n        //System.out.println(\"registerForRead..\");\n        //(new Exception()).printStackTrace();\n        try {\n            if (getSelectionKey() == null) {\n                boolean flag = getServer().registerChannel(getSocketChannel(), SelectionKey.OP_READ, this);\n                if (flag) {\n                    logger.finest(\"Adding OP_READ as interest Ops for \" + getName());\n                } else if (ByteBufferOutputStream.isLoggable(Level.FINEST)) {\n                    logger.finest(\"OP_READ is already present in interest Ops for \" + getName());\n                }\n            } else if (getSelectionKey().isValid()) {\n                if ((getSelectionKey().interestOps() & SelectionKey.OP_READ) == 0) {\n                    logger.finest(\"Adding OP_READ to interest Ops for \" + getName());\n                    removeEvent(ClientEvent.READ);\n                    getSelectionKey().interestOps(getSelectionKey().interestOps() | SelectionKey.OP_READ);\n                    if (wakeupSelectorAfterRegisterRead) {\n                        getServer().getSelector().wakeup();\n                    }\n                } else {\n                    if (ByteBufferOutputStream.isLoggable(Level.FINEST)) {\n                        logger.finest(\"OP_READ is already present in interest Ops for \" + getName());\n                    }\n                }\n            } else {\n                throw new IOException(\"SelectionKey is invalid!\");\n            }\n        } catch (CancelledKeyException e) {\n            throw new IOException(\"SelectionKey is cancelled!\");\n        }\n    }\n\n    public void registerForWrite() throws IOException, ClosedChannelException {\n        if (hasEvent(ClientEvent.RUN_BLOCKING) || hasEvent(ClientEvent.MAX_CON_BLOCKING)) {\n            throw new IllegalStateException(\"This method is only allowed under Non-Blocking mode.\");\n        }\n        if (clientWriteHandler == null) {\n            throw new IllegalStateException(\"ClientWriteHandler has not been set!\");\n        }\n        registerWrite();\n    }\n\n    public void registerWrite() throws IOException {\n        //System.out.println(\"registerWrite..\");\n        //(new Exception()).printStackTrace();\n        try {\n            if (getSelectionKey() == null) {\n                boolean flag = getServer().registerChannel(getSocketChannel(), SelectionKey.OP_WRITE, this);\n                if (flag) {\n                    logger.finest(\"Adding OP_WRITE as interest Ops for \" + getName());\n                } else if (ByteBufferOutputStream.isLoggable(Level.FINEST)) {\n                    logger.finest(\"OP_WRITE is already present in interest Ops for \" + getName());\n                }\n            } else if (getSelectionKey().isValid()) {\n                if ((getSelectionKey().interestOps() & SelectionKey.OP_WRITE) == 0) {\n                    logger.finest(\"Adding OP_WRITE to interest Ops for \" + getName());\n                    removeEvent(ClientEvent.WRITE);\n                    getSelectionKey().interestOps(getSelectionKey().interestOps() | SelectionKey.OP_WRITE);\n                    if (wakeupSelectorAfterRegisterWrite) {\n                        getServer().getSelector().wakeup();\n                    }\n                } else {\n                    if (ByteBufferOutputStream.isLoggable(Level.FINEST)) {\n                        logger.finest(\"OP_WRITE is already present in interest Ops for \" + getName());\n                    }\n                }\n            } else {\n                throw new IOException(\"SelectionKey is invalid!\");\n            }\n        } catch (CancelledKeyException e) {\n            throw new IOException(\"SelectionKey is cancelled!\");\n        }\n    }\n\n    protected void setClientWriteHandler(ClientWriteHandler handler) {\n        clientWriteHandler = handler;\n    }\n\n    /**\n     * Returns number of thread currently in this object.\n     * @since 1.4.6\n     */\n    public int getThreadAccessCount() {\n        return threadAccessCount;\n    }\n\n    private void doHandshake() throws Exception {\n        while (true) {\n            SSLEngineResult res;\n            logger.fine(\"handshakeStatus: \" + handshakeStatus);\n            if (handshakeStatus == SSLEngineResult.HandshakeStatus.FINISHED) {\n                if (initialHandshakeStatus) {\n                    finishInitialHandshake();\n                }\n                return;\n            } else if (handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_TASK) {\n                doTasks();\n                continue;\n            } else if (handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_UNWRAP) {\n                /*\n\t\t\t\t\tdoRead();\n\n\t\t\t\t\tif(initialHandshakeStatus && \n\t\t\t\t\t\t\tstatus == SSLEngineResult.Status.BUFFER_UNDERFLOW) {\n\t\t\t\t\t\tregisterForRead();\n\t\t\t\t\t}\n\t\t\t\t\t*/\n                return;\n            } else if (handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_WRAP) {\n                ByteBuffer netData = (ByteBuffer) getServer().getByteBufferPool().borrowObject();\n                //netData.clear();\n                res = sslEngine.wrap(dummyByteBuffer, netData);\n                logger.info(\"Wrapping:\\n\" + res);\n                assert res.bytesProduced() != 0 : \"No net data produced during handshake wrap.\";\n                assert res.bytesConsumed() == 0 : \"App data consumed during handshake wrap.\";\n                handshakeStatus = res.getHandshakeStatus();\n                //netData.flip(); -- no need to flip will be done when writing to sc\n                byteBufferOutputStream.addEncryptedByteBuffer(netData);\n                if (!doWrite()) {\n                    return;\n                }\n                //back to loop\n                continue;\n            } else if (handshakeStatus == SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {\n                assert false : \"doHandshake() should never reach the NOT_HANDSHAKING state\";\n                return;\n            }\n            //if\n        }\n        //loop\n    }\n\n    private void doTasks() {\n        Runnable task;\n        while ((task = sslEngine.getDelegatedTask()) != null) {\n            logger.fine(\"Running the task.. START \");\n            task.run();\n            logger.fine(\"Running the task.. END\");\n        }\n        handshakeStatus = sslEngine.getHandshakeStatus();\n        logger.fine(\"handshakeStatus: \" + handshakeStatus);\n    }\n\n    private void finishInitialHandshake() throws IOException {\n        initialHandshakeStatus = false;\n    }\n\n    public boolean getInitialHandshakeStatus() {\n        return initialHandshakeStatus;\n    }\n\n    public ByteBuffer encrypt(ByteBuffer src) throws IOException {\n        if (initialHandshakeStatus) {\n            logger.fine(\"Writing not possible during handshake!\");\n            //Exception e = new Exception();\n            //e.printStackTrace();\n            return null;\n        }\n        ByteBuffer dest = null;\n        boolean isException = false;\n        try {\n            src.flip();\n            dest = (ByteBuffer) getServer().getByteBufferPool().borrowObject();\n            //dest.clear();\n            SSLEngineResult res = sslEngine.wrap(src, dest);\n            logger.info(\"Wrapping:\\n\" + res);\n            //dest.flip();\n            return dest;\n        } catch (IOException e) {\n            logger.warning(\"IOException:\" + e);\n            isException = true;\n            throw e;\n        } catch (Exception e) {\n            logger.warning(\"Exception:\" + e);\n            isException = true;\n            throw new IOException(e.getMessage());\n        } finally {\n            if (isException == true && dest != null) {\n                try {\n                    getServer().getByteBufferPool().returnObject(dest);\n                } catch (Exception er) {\n                    logger.warning(\"Error in returning ByteBuffer to pool: \" + er);\n                }\n            }\n        }\n    }\n}\n",
        "test_prompt": "// NonBlockingClientHandler_1Test.java\npackage org.quickserver.net.server.impl;\n\nimport org.quickserver.net.server.*;\nimport org.quickserver.net.*;\nimport org.quickserver.util.*;\nimport org.quickserver.util.io.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport java.nio.*;\nimport java.nio.channels.*;\nimport javax.net.ssl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NonBlockingClientHandler}.\n* It contains one unit test case for the {@link NonBlockingClientHandler#getWakeupSelectorAfterRegisterRead()} method.\n*/\nclass NonBlockingClientHandler_1Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// NonBlockingClientHandler_2Test.java\npackage org.quickserver.net.server.impl;\n\nimport org.quickserver.net.server.*;\nimport org.quickserver.net.*;\nimport org.quickserver.util.*;\nimport org.quickserver.util.io.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport java.nio.*;\nimport java.nio.channels.*;\nimport javax.net.ssl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NonBlockingClientHandler}.\n* It contains one unit test case for the {@link NonBlockingClientHandler#getMaxThreadAccessCount()} method.\n*/\nclass NonBlockingClientHandler_2Test {\n}"
            }
        ],
        "id": "0c055e8d-13c9-4f5b-9071-6682e7a70570",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/impl/NonBlockingClientHandler_2Test.java",
        "original_code": "// NonBlockingClientHandler.java\n/*\n * This file is part of the QuickServer library \n * Copyright (C) QuickServer.org\n *\n * Use, modification, copying and distribution of this software is subject to\n * the terms and conditions of the GNU Lesser General Public License. \n * You should have received a copy of the GNU LGP License along with this \n * library; if not, you can download a copy from <http://www.quickserver.org/>.\n *\n * For questions, suggestions, bug-reports, enhancement-requests etc.\n * visit http://www.quickserver.org\n *\n */\npackage org.quickserver.net.server.impl;\n\nimport org.quickserver.net.server.*;\nimport org.quickserver.net.*;\nimport org.quickserver.util.*;\nimport org.quickserver.util.io.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport java.nio.*;\nimport java.nio.channels.*;\nimport javax.net.ssl.*;\n\npublic class NonBlockingClientHandler extends BasicClientHandler {\n\n    private static final Logger logger = Logger.getLogger(NonBlockingClientHandler.class.getName());\n\n    //v1.4.5\n    protected ClientWriteHandler clientWriteHandler;\n\n    private SocketChannel socketChannel;\n\n    protected ArrayList readByteBuffer = new ArrayList();\n\n    protected ArrayList writeByteBuffer = new ArrayList();\n\n    protected SelectionKey selectionKey;\n\n    protected volatile int threadAccessCount = 0;\n\n    protected volatile boolean willReturn;\n\n    protected volatile boolean waitingForFinalWrite;\n\n    //one for each event ACCEPT, WRITE, READ\n    private static int maxThreadAccessCount = 5;\n\n    private static boolean wakeupSelectorAfterRegisterWrite = true;\n\n    private static boolean wakeupSelectorAfterRegisterRead = true;\n\n    //nio ssl\n    //private final SSLSession session;\n    private boolean initialHandshakeStatus = false;\n\n    private SSLEngineResult.HandshakeStatus handshakeStatus;\n\n    private SSLEngineResult.Status status = null;\n\n    private ByteBuffer dummyByteBuffer = ByteBuffer.allocate(0);\n\n    private ByteBuffer peerNetData = null;\n\n    private boolean sslShutdown = false;\n\n    /**\n     * Sets the flag to wakeup Selector After RegisterForWrite is called.\n     * @since 1.4.7\n     */\n    public static void setWakeupSelectorAfterRegisterWrite(boolean flag) {\n        wakeupSelectorAfterRegisterWrite = flag;\n    }\n\n    /**\n     * Returns wakeupSelectorAfterRegisterWrite the flag that controls if wakeup is called on Selector\n     * after RegisterForWrite is called.\n     * @since 1.4.7\n     */\n    public static boolean getWakeupSelectorAfterRegisterWrite() {\n        return wakeupSelectorAfterRegisterWrite;\n    }\n\n    /**\n     * Sets the flag to wakeup Selector After RegisterForRead is called.\n     * @since 1.4.7\n     */\n    public static void setWakeupSelectorAfterRegisterRead(boolean flag) {\n        wakeupSelectorAfterRegisterRead = flag;\n    }\n\n    /**\n     * Returns wakeupSelectorAfterRegisterRead the flag that controls if wakeup is called on Selector\n     * after RegisterForRead is called.\n     * @since 1.4.7\n     */\n    public static boolean getWakeupSelectorAfterRegisterRead() {\n        return wakeupSelectorAfterRegisterRead;\n    }\n\n    /**\n     * Sets the maximum count of thread allowed to run objects of this class at a time.\n     * @since 1.4.7\n     */\n    public static void setMaxThreadAccessCount(int count) {\n        if (count < 3 && count != -1)\n            throw new IllegalArgumentException(\"Value should be >=3 or -1\");\n        maxThreadAccessCount = count;\n    }\n\n    /**\n     * Returns the maximum count of thread allowed to run objects of this class at a time.\n     * @since 1.4.7\n     */\n    public static int getMaxThreadAccessCount() {\n        return maxThreadAccessCount;\n    }\n\n    //v1.4.7\n    private ByteBufferOutputStream byteBufferOutputStream;\n\n    public NonBlockingClientHandler(int instanceCount) {\n        super(instanceCount);\n    }\n\n    public NonBlockingClientHandler() {\n        super();\n    }\n\n    public void clean() {\n        logger.finest(\"Starting clean - \" + getName());\n        if (threadAccessCount != 0) {\n            logger.warning(\"Thread Access Count was not 0!: \" + threadAccessCount);\n            if (Assertion.isEnabled()) {\n                assertionSystemExit();\n            }\n            threadAccessCount = 0;\n        }\n        while (readByteBuffer.isEmpty() == false) {\n            try {\n                getServer().getByteBufferPool().returnObject(readByteBuffer.remove(0));\n            } catch (Exception er) {\n                logger.warning(\"Error in returning read ByteBuffer to pool: \" + er);\n                break;\n            }\n        }\n        while (writeByteBuffer.isEmpty() == false) {\n            try {\n                getServer().getByteBufferPool().returnObject(writeByteBuffer.remove(0));\n            } catch (Exception er) {\n                appLogger.warning(\"Error in returning write ByteBuffer to pool: \" + er);\n                break;\n            }\n        }\n        if (peerNetData != null) {\n            try {\n                getServer().getByteBufferPool().returnObject(peerNetData);\n            } catch (Exception er) {\n                appLogger.warning(\"Error in returning peerNetData to pool: \" + er);\n            }\n        }\n        if (selectionKey != null) {\n            selectionKey.cancel();\n            selectionKey.selector().wakeup();\n            selectionKey = null;\n        }\n        willReturn = false;\n        waitingForFinalWrite = false;\n        socketChannel = null;\n        if (byteBufferOutputStream != null) {\n            byteBufferOutputStream.close();\n        }\n        super.clean();\n        //1.4.5\n        clientWriteHandler = null;\n        byteBufferOutputStream = null;\n        sslShutdown = false;\n        logger.finest(\"Finished clean - \" + getName());\n    }\n\n    protected void finalize() throws Throwable {\n        clean();\n        super.finalize();\n    }\n\n    public void handleClient(TheClient theClient) throws Exception {\n        super.handleClient(theClient);\n        //v1.4.5\n        setClientWriteHandler(theClient.getClientWriteHandler());\n        //1.4.5\n        setSocketChannel(theClient.getSocketChannel());\n    }\n\n    protected void setInputStream(InputStream in) throws IOException {\n        this.in = in;\n        if (getDataMode(DataType.IN) == DataMode.STRING) {\n            b_in = null;\n            o_in = null;\n            bufferedReader = null;\n        } else if (getDataMode(DataType.IN) == DataMode.OBJECT) {\n            b_in = null;\n            bufferedReader = null;\n            o_in = new ObjectInputStream(in);\n        } else if (getDataMode(DataType.IN) == DataMode.BYTE || getDataMode(DataType.IN) == DataMode.BINARY) {\n            o_in = null;\n            bufferedReader = null;\n            b_in = null;\n        }\n    }\n\n    public BufferedReader getBufferedReader() {\n        throw new IllegalStateException(\"Access to BufferedReader in not allowed in Non-Blocking mode!\");\n    }\n\n    public void closeConnection() {\n        logger.finest(\"inside\");\n        synchronized (this) {\n            if (connection == false)\n                return;\n            if (waitingForFinalWrite)\n                return;\n            if (getSelectionKey() != null && getSelectionKey().isValid() && lost == false) {\n                waitingForFinalWrite = true;\n            } else {\n                connection = false;\n            }\n        }\n        try {\n            if (getSocketChannel() != null && socket != null) {\n                if (waitingForFinalWrite) {\n                    try {\n                        waitTillFullyWritten();\n                    } catch (Exception error) {\n                        logger.warning(\"Error in waitingForFinalWrite : \" + error);\n                        if (logger.isLoggable(Level.FINE)) {\n                            logger.fine(\"StackTrace:\\n\" + MyString.getStackTrace(error));\n                        }\n                    }\n                }\n                //end of waitingForFinalWrite\n                if (isSecure() == true) {\n                    sslShutdown = true;\n                    if (lost == false && sslEngine.isOutboundDone() == false) {\n                        logger.finest(\"SSL isOutboundDone is false\");\n                        if (byteBufferOutputStream.doShutdown() == false) {\n                            return;\n                        }\n                    } else if (sslEngine.isOutboundDone()) {\n                        logger.finest(\"SSL Outbound is done.\");\n                    }\n                }\n                doPostCloseActivity();\n            }\n            //if socket\n        } catch (IOException e) {\n            logger.warning(\"Error in closeConnection : \" + e);\n            if (logger.isLoggable(Level.FINE)) {\n                logger.fine(\"StackTrace:\\n\" + MyString.getStackTrace(e));\n            }\n        } catch (NullPointerException npe) {\n            logger.fine(\"NullPointerException: \" + npe);\n            if (logger.isLoggable(Level.FINE)) {\n                logger.fine(\"StackTrace:\\n\" + MyString.getStackTrace(npe));\n            }\n        }\n    }\n\n    private void doPostCloseActivity() throws IOException {\n        connection = false;\n        byteBufferOutputStream.forceNotify();\n        getSelectionKey().cancel();\n        if (getServer() != null) {\n            getServer().getSelector().wakeup();\n        }\n        synchronized (this) {\n            if (hasEvent(ClientEvent.MAX_CON) == false) {\n                notifyCloseOrLost();\n            }\n            if (getSocketChannel().isOpen()) {\n                logger.finest(\"Closing SocketChannel\");\n                getSocketChannel().close();\n            }\n        }\n    }\n\n    public boolean closeIfSSLOutboundDone() {\n        if (isSecure() == false)\n            throw new IllegalStateException(\"Client is not in secure mode!\");\n        if (sslEngine.isOutboundDone()) {\n            logger.finest(\"SSL Outbound is done.\");\n            try {\n                if (getSocketChannel().isOpen()) {\n                    logger.finest(\"Closing SocketChannel\");\n                    getSocketChannel().close();\n                }\n            } catch (IOException e) {\n                logger.fine(\"IGNORE: Error in Closing SocketChannel: \" + e);\n            }\n            return true;\n        } else {\n            logger.finest(\"SSL Outbound is not done.\");\n            return false;\n        }\n    }\n\n    /**\n     * waitTillFullyWritten\n     * @since 1.4.7\n     */\n    public void waitTillFullyWritten() {\n        Object waitLock = new Object();\n        if (byteBufferOutputStream.isDataAvailableForWrite(waitLock)) {\n            if (ByteBufferOutputStream.isLoggable(Level.FINEST)) {\n                logger.finest(\"Waiting \" + getName());\n            }\n            try {\n                synchronized (waitLock) {\n                    //2 min max\n                    waitLock.wait(1000 * 60 * 2);\n                }\n            } catch (InterruptedException ie) {\n                logger.warning(\"Error: \" + ie);\n            }\n            if (ByteBufferOutputStream.isLoggable(Level.FINEST)) {\n                logger.finest(\"Done. \" + getName());\n            }\n        }\n    }\n\n    public void run() {\n        if (unprocessedClientEvents.isEmpty()) {\n            logger.finest(\"No unprocessed ClientEvents!\");\n            return;\n        }\n        synchronized (this) {\n            if (willReturn) {\n                return;\n            } else {\n                threadAccessCount++;\n            }\n        }\n        ClientEvent currentEvent = (ClientEvent) unprocessedClientEvents.poll();\n        if (currentEvent == null) {\n            threadEvent.set(null);\n            logger.finest(\"No unprocessed ClientEvents! pool was null\");\n            return;\n        }\n        if (logger.isLoggable(Level.FINEST)) {\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"Running \").append(getName());\n            sb.append(\" using \");\n            sb.append(Thread.currentThread().getName());\n            sb.append(\" for \");\n            synchronized (clientEvents) {\n                if (clientEvents.size() > 1) {\n                    sb.append(currentEvent + \", Current Events - \" + clientEvents);\n                } else {\n                    sb.append(currentEvent);\n                }\n            }\n            logger.finest(sb.toString());\n        }\n        logger.finest(\"threadAccessCount: \" + threadAccessCount);\n        threadEvent.set(currentEvent);\n        try {\n            if (maxThreadAccessCount != -1 && threadAccessCount > maxThreadAccessCount) {\n                logger.warning(\"ThreadAccessCount can't go beyond \" + maxThreadAccessCount + \": \" + threadAccessCount);\n                if (Assertion.isEnabled()) {\n                    throw new AssertionError(\"ThreadAccessCount can't go beyond \" + maxThreadAccessCount + \": \" + threadAccessCount);\n                }\n                return;\n            }\n            if (socket == null)\n                throw new SocketException(\"Socket was null!\");\n            if (getThreadEvent() == ClientEvent.ACCEPT || getThreadEvent() == ClientEvent.MAX_CON) {\n                prepareForRun();\n                Assertion.affirm(willReturn == false, \"WillReturn has to be false!: \" + willReturn);\n            }\n            if (getThreadEvent() == ClientEvent.MAX_CON) {\n                processMaxConnection(currentEvent);\n            }\n            try {\n                if (getThreadEvent() == ClientEvent.ACCEPT) {\n                    registerForRead();\n                    clientEventHandler.gotConnected(this);\n                    if (authorised == false) {\n                        if (clientAuthenticationHandler == null && authenticator == null) {\n                            authorised = true;\n                            logger.finest(\"No Authenticator \" + getName() + \" so return thread.\");\n                        } else {\n                            if (clientAuthenticationHandler != null) {\n                                AuthStatus authStatus = null;\n                                do {\n                                    authStatus = processAuthorisation();\n                                } while (authStatus == AuthStatus.FAILURE);\n                                if (authStatus == AuthStatus.SUCCESS)\n                                    authorised = true;\n                            } else {\n                                processAuthorisation();\n                            }\n                            if (authorised)\n                                logger.finest(\"Authentication done \" + getName() + \", so return thread.\");\n                            else\n                                logger.finest(\"askAuthentication() done \" + getName() + \", so return thread.\");\n                        }\n                    }\n                    //end authorised\n                    //return thread to pool\n                    returnThread();\n                    return;\n                }\n                if (connection && getThreadEvent() == ClientEvent.READ) {\n                    if (processRead())\n                        return;\n                }\n                if (connection && getThreadEvent() == ClientEvent.WRITE) {\n                    if (processWrite())\n                        return;\n                }\n            } catch (SocketException e) {\n                appLogger.finest(\"SocketException - Client [\" + getHostAddress() + \"]: \" + e.getMessage());\n                //e.printStackTrace();\n                lost = true;\n            } catch (AppException e) {\n                //errors from Application\n                appLogger.finest(\"AppException \" + Thread.currentThread().getName() + \": \" + e.getMessage());\n            } catch (javax.net.ssl.SSLException e) {\n                lost = true;\n                if (Assertion.isEnabled()) {\n                    appLogger.info(\"SSLException - Client [\" + getHostAddress() + \"] \" + Thread.currentThread().getName() + \": \" + e);\n                } else {\n                    appLogger.warning(\"SSLException - Client [\" + getHostAddress() + \"]: \" + e);\n                }\n            } catch (ConnectionLostException e) {\n                lost = true;\n                if (e.getMessage() != null)\n                    appLogger.finest(\"Connection lost \" + Thread.currentThread().getName() + \": \" + e.getMessage());\n                else\n                    appLogger.finest(\"Connection lost \" + Thread.currentThread().getName());\n            } catch (ClosedChannelException e) {\n                lost = true;\n                appLogger.finest(\"Channel closed \" + Thread.currentThread().getName() + \": \" + e);\n            } catch (IOException e) {\n                lost = true;\n                appLogger.fine(\"IOError \" + Thread.currentThread().getName() + \": \" + e);\n            } catch (AssertionError er) {\n                logger.warning(\"[AssertionError] \" + getName() + \" \" + er);\n                if (logger.isLoggable(Level.FINEST)) {\n                    logger.finest(\"StackTrace \" + Thread.currentThread().getName() + \": \" + MyString.getStackTrace(er));\n                }\n                assertionSystemExit();\n            } catch (Error er) {\n                logger.warning(\"[Error] \" + er);\n                if (logger.isLoggable(Level.FINEST)) {\n                    logger.finest(\"StackTrace \" + Thread.currentThread().getName() + \": \" + MyString.getStackTrace(er));\n                }\n                if (Assertion.isEnabled()) {\n                    assertionSystemExit();\n                }\n                lost = true;\n            } catch (RuntimeException re) {\n                logger.warning(\"[RuntimeException] \" + MyString.getStackTrace(re));\n                if (Assertion.isEnabled()) {\n                    assertionSystemExit();\n                }\n                lost = true;\n            }\n            if (getThreadEvent() != ClientEvent.MAX_CON) {\n                notifyCloseOrLost();\n            }\n            if (connection) {\n                logger.finest(Thread.currentThread().getName() + \" calling closeConnection()\");\n                closeConnection();\n            }\n            if (connection == true && lost == true && waitingForFinalWrite) {\n                byteBufferOutputStream.forceNotify();\n            }\n        } catch (javax.net.ssl.SSLException se) {\n            logger.warning(\"SSLException \" + Thread.currentThread().getName() + \" - \" + se);\n        } catch (IOException ie) {\n            logger.warning(\"IOError \" + Thread.currentThread().getName() + \" - Closing Client : \" + ie);\n        } catch (RuntimeException re) {\n            logger.warning(\"[RuntimeException] \" + getName() + \" \" + Thread.currentThread().getName() + \" - \" + MyString.getStackTrace(re));\n            if (Assertion.isEnabled()) {\n                assertionSystemExit();\n            }\n        } catch (Exception e) {\n            logger.warning(\"Error \" + Thread.currentThread().getName() + \" - Event:\" + getThreadEvent() + \" - Socket:\" + socket + \" : \" + e);\n            logger.fine(\"StackTrace: \" + getName() + \"\\n\" + MyString.getStackTrace(e));\n            if (Assertion.isEnabled()) {\n                assertionSystemExit();\n            }\n        } catch (Error e) {\n            logger.warning(\"Error \" + Thread.currentThread().getName() + \" - Event:\" + getThreadEvent() + \" - Socket:\" + socket + \" : \" + e);\n            logger.fine(\"StackTrace: \" + getName() + \"\\n\" + MyString.getStackTrace(e));\n            if (Assertion.isEnabled()) {\n                assertionSystemExit();\n            }\n        }\n        synchronized (this) {\n            try {\n                if (getSelectionKey() != null && getSelectionKey().isValid()) {\n                    logger.finest(\"Canceling SelectionKey\");\n                    getSelectionKey().cancel();\n                }\n                if (socket != null && socket.isClosed() == false) {\n                    logger.finest(\"Closing Socket\");\n                    socket.close();\n                }\n                if (getSocketChannel() != null && getSocketChannel().isOpen()) {\n                    logger.finest(\"Closing SocketChannel\");\n                    socketChannel.close();\n                }\n            } catch (Exception re) {\n                logger.warning(\"Error closing Socket/Channel: \" + re);\n            }\n        }\n        //end synchronized\n        willClean = true;\n        returnClientData();\n        boolean returnClientHandler = false;\n        synchronized (lockObj) {\n            returnThread();\n            returnClientHandler = checkReturnClientHandler();\n        }\n        if (returnClientHandler) {\n            //return to pool\n            returnClientHandler();\n        }\n    }\n\n    protected boolean checkReturnClientHandler() {\n        if (willReturn == false) {\n            willReturn = true;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Process read\n     * @return value indicates if the thread should return form run()\n     */\n    private boolean processRead() throws Exception {\n        if (doRead()) {\n            //return to pool\n            returnThread();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private boolean doRead() throws Exception {\n        int count = 0;\n        int fullCount = 0;\n        while (true) {\n            try {\n                if (peerNetData == null) {\n                    peerNetData = (ByteBuffer) getServer().getByteBufferPool().borrowObject();\n                }\n                count = getSocketChannel().read(peerNetData);\n                if (count < 0) {\n                    //logger.finest(\"SocketChannel read was \"+count+\"!\");\n                    getServer().getByteBufferPool().returnObject(peerNetData);\n                    peerNetData = null;\n                    break;\n                } else {\n                    fullCount += count;\n                }\n                // Make readable\n                peerNetData.flip();\n                ByteBuffer peerAppData = null;\n                //--\n                if (sslEngine != null) {\n                    SSLEngineResult res;\n                    peerAppData = (ByteBuffer) getServer().getByteBufferPool().borrowObject();\n                    do {\n                        res = sslEngine.unwrap(peerNetData, peerAppData);\n                        logger.info(\"Unwrapping:\\n\" + res);\n                    } while (res.getStatus() == SSLEngineResult.Status.OK && res.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_UNWRAP && res.bytesProduced() == 0);\n                    if (res.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.FINISHED) {\n                        logger.info(\"HandshakeStatus.FINISHED!\");\n                        finishInitialHandshake();\n                    }\n                    if (peerAppData.position() == 0 && res.getStatus() == SSLEngineResult.Status.OK && peerNetData.hasRemaining()) {\n                        logger.info(\"peerNetData hasRemaining and pos=0!\");\n                        res = sslEngine.unwrap(peerNetData, peerAppData);\n                        logger.info(\"Unwrapping:\\n\" + res);\n                    }\n                    /*\n\t\t\t\t\t * OK, OVERFLOW, UNDERFLOW, CLOSED\n\t\t\t\t\t */\n                    status = res.getStatus();\n                    handshakeStatus = res.getHandshakeStatus();\n                    if (status != SSLEngineResult.Status.BUFFER_OVERFLOW) {\n                        logger.warning(\"Buffer overflow: \" + res.toString());\n                    } else if (status == SSLEngineResult.Status.CLOSED) {\n                        logger.fine(\"Connection is being closed by peer.\");\n                        lost = true;\n                        System.out.println(\"NEdd to code for shutdow of SSL\");\n                        break;\n                    }\n                    peerNetData.compact();\n                    peerAppData.flip();\n                    if (handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_TASK || handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_WRAP || handshakeStatus == SSLEngineResult.HandshakeStatus.FINISHED) {\n                        doHandshake();\n                    }\n                    //return peerAppData.remaining();\n                    logger.fine(\"peerAppData.remaining(): \" + peerAppData.remaining());\n                } else {\n                    peerAppData = peerNetData;\n                    peerNetData = null;\n                }\n                //--\n                readByteBuffer.add(peerAppData);\n                peerAppData = null;\n            } catch (Exception error) {\n                logger.finest(\"Error in data read: \" + error);\n                if (sslEngine != null)\n                    sslEngine.closeInbound();\n                lost = true;\n                synchronized (getInputStream()) {\n                    getInputStream().notifyAll();\n                }\n                throw error;\n            }\n            if (count == 0)\n                break;\n        }\n        //end while\n        if (count < 0) {\n            logger.finest(\"SocketChannel read was \" + count + \"!\");\n            if (sslEngine != null)\n                sslEngine.closeInbound();\n            lost = true;\n            synchronized (getInputStream()) {\n                getInputStream().notifyAll();\n            }\n        } else {\n            logger.finest(fullCount + \" bytes read\");\n            if (fullCount != 0) {\n                updateLastCommunicationTime();\n                synchronized (getInputStream()) {\n                    //if any are waiting\n                    getInputStream().notify();\n                }\n                if (hasEvent(ClientEvent.ACCEPT) == false) {\n                    processGotDataInBuffers();\n                }\n            }\n            //check if any data was read but not yet processed\n            while (getInputStream().available() > 0) {\n                logger.finest(\"Sending again for processing...\");\n                if (hasEvent(ClientEvent.ACCEPT) == false) {\n                    processGotDataInBuffers();\n                    break;\n                } else {\n                    synchronized (getInputStream()) {\n                        getInputStream().notifyAll();\n                    }\n                    Thread.sleep(100);\n                }\n            }\n            if (connection) {\n                registerForRead();\n                //getSelectionKey().selector().wakeup();\n                return true;\n            }\n        }\n        //end of else\n        logger.finest(\"We don't have connection, lets return all resources.\");\n        return false;\n    }\n\n    /**\n     * Process write\n     * @return value indicates if the thread should return form run()\n     */\n    private boolean processWrite() throws IOException {\n        if (doWrite()) {\n            //return to pool\n            returnThread();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private boolean doWrite() throws IOException {\n        if (sslShutdown) {\n            if (byteBufferOutputStream.doShutdown() == false) {\n                return true;\n            }\n            doPostCloseActivity();\n            logger.finest(\"We don't have connection, lets return all resources.\");\n            return false;\n        }\n        updateLastCommunicationTime();\n        boolean flag = byteBufferOutputStream.writeAllByteBuffer();\n        if (flag == false) {\n            registerWrite();\n        } else if (/*flag==true && */\n        clientWriteHandler != null) {\n            clientWriteHandler.handleWrite(this);\n        }\n        if (connection) {\n            return true;\n        } else {\n            logger.finest(\"We don't have connection, lets return all resources.\");\n            return false;\n        }\n    }\n\n    protected void returnThread() {\n        //System.out.println(\"returnThread..\");\n        //(new Exception()).printStackTrace();\n        threadAccessCount--;\n        Assertion.affirm(threadAccessCount >= 0, \"ThreadAccessCount went less the 0! Value: \" + threadAccessCount);\n        //return is done at ClientThread end\n        removeEvent((ClientEvent) threadEvent.get());\n    }\n\n    protected void returnClientHandler() {\n        logger.finest(getName());\n        try {\n            for (int i = 0; threadAccessCount != 0; i++) {\n                if (i == 100) {\n                    logger.warning(\"ClientHandler must have got into a loop waiting for thread to free up! ThreadAccessCount=\" + threadAccessCount);\n                    threadAccessCount = 0;\n                    if (Assertion.isEnabled()) {\n                        assertionSystemExit();\n                    } else {\n                        break;\n                    }\n                }\n                if (threadAccessCount <= 0)\n                    break;\n                logger.finest(\"Waiting for other thread of \" + getName() + \" to finish\");\n                Thread.sleep(60);\n            }\n        } catch (InterruptedException ie) {\n            appLogger.warning(\"InterruptedException: \" + ie);\n        }\n        super.returnClientHandler();\n    }\n\n    public void setDataMode(DataMode dataMode, DataType dataType) throws IOException {\n        if (getDataMode(dataType) == dataMode)\n            return;\n        appLogger.fine(\"Setting Type:\" + dataType + \", Mode:\" + dataMode);\n        super.checkDataModeSet(dataMode, dataType);\n        setDataModeNonBlocking(dataMode, dataType);\n    }\n\n    private void setDataModeNonBlocking(DataMode dataMode, DataType dataType) throws IOException {\n        logger.finest(\"ENTER\");\n        if (dataMode == DataMode.STRING) {\n            if (dataType == DataType.OUT) {\n                if (dataModeOUT == DataMode.BYTE || dataModeOUT == DataMode.BINARY) {\n                    dataModeOUT = dataMode;\n                } else if (dataModeOUT == DataMode.OBJECT) {\n                    dataModeOUT = dataMode;\n                    o_out.flush();\n                    o_out = null;\n                    b_out = new BufferedOutputStream(out);\n                } else {\n                    Assertion.affirm(false, \"Unknown DataType.OUT DataMode - \" + dataModeOUT);\n                }\n                Assertion.affirm(b_out != null, \"BufferedOutputStream is still null!\");\n                Assertion.affirm(o_out == null, \"ObjectOutputStream is still not null!\");\n            } else if (dataType == DataType.IN) {\n                dataModeIN = dataMode;\n                if (o_in != null) {\n                    if (o_in.available() != 0)\n                        logger.warning(\"Data looks to be present in ObjectInputStream\");\n                    o_in = null;\n                }\n                b_in = null;\n                bufferedReader = null;\n                //input stream will work\n                Assertion.affirm(in != null, \"InputStream is still null!\");\n                Assertion.affirm(b_in == null, \"BufferedInputStream is still not null!\");\n                Assertion.affirm(bufferedReader == null, \"BufferedReader is still not null!\");\n            }\n        } else if (dataMode == DataMode.OBJECT) {\n            if (dataType == DataType.IN) {\n                //we will disable this for now\n                throw new IllegalArgumentException(\"Can't set DataType.IN mode to OBJECT when blocking mode is set as false!\");\n            }\n            if (dataType == DataType.OUT) {\n                dataModeOUT = dataMode;\n                b_out = null;\n                o_out = new ObjectOutputStream(out);\n                Assertion.affirm(o_out != null, \"ObjectOutputStream is still null!\");\n                o_out.flush();\n            } else if (dataType == DataType.IN) {\n                dataModeIN = dataMode;\n                b_in = null;\n                bufferedReader = null;\n                registerForRead();\n                //will block\n                o_in = new ObjectInputStream(in);\n                Assertion.affirm(o_in != null, \"ObjectInputStream is still null!\");\n            }\n        } else if (dataMode == DataMode.BYTE || dataMode == DataMode.BINARY) {\n            if (dataType == DataType.OUT) {\n                if (dataModeOUT == DataMode.STRING || dataModeOUT == DataMode.BYTE || dataModeOUT == DataMode.BINARY) {\n                    dataModeOUT = dataMode;\n                } else if (dataModeOUT == DataMode.OBJECT) {\n                    dataModeOUT = dataMode;\n                    o_out = null;\n                    b_out = new BufferedOutputStream(out);\n                } else {\n                    Assertion.affirm(false, \"Unknown DataType.OUT - DataMode: \" + dataModeOUT);\n                }\n                Assertion.affirm(b_out != null, \"BufferedOutputStream is still null!\");\n            } else if (dataType == DataType.IN) {\n                dataModeIN = dataMode;\n                o_in = null;\n                bufferedReader = null;\n                b_in = null;\n                //input stream will work\n                Assertion.affirm(in != null, \"InputStream is still null!\");\n            } else {\n                throw new IllegalArgumentException(\"Unknown DataType : \" + dataType);\n            }\n        } else {\n            throw new IllegalArgumentException(\"Unknown DataMode : \" + dataMode);\n        }\n    }\n\n    protected byte[] readInputStream() throws IOException {\n        return readInputStream(getInputStream());\n    }\n\n    public void updateInputOutputStreams() throws IOException {\n        byteBufferOutputStream = new ByteBufferOutputStream(writeByteBuffer, this);\n        setInputStream(new ByteBufferInputStream(readByteBuffer, this, getCharset()));\n        setOutputStream(byteBufferOutputStream);\n        //logger.warning(\"updateInputOutputStreams: \"+sslEngine);\n        if (sslEngine != null) {\n            sslEngine.setUseClientMode(false);\n            sslEngine.beginHandshake();\n            handshakeStatus = sslEngine.getHandshakeStatus();\n            initialHandshakeStatus = true;\n            /*\n\t\t\ttry {\n\t\t\t\tdoHandshake();\n\t\t\t} catch(Exception e) {\n\t\t\t\tlogger.warning(\"Error: \"+e);\n\t\t\t\tthrow new IOException(e.toString());\n\t\t\t}\n\t\t\t*/\n        }\n    }\n\n    public boolean getBlockingMode() {\n        return false;\n    }\n\n    public void setSocketChannel(SocketChannel socketChannel) {\n        this.socketChannel = socketChannel;\n    }\n\n    public SocketChannel getSocketChannel() {\n        return socketChannel;\n    }\n\n    public void setSelectionKey(SelectionKey selectionKey) {\n        this.selectionKey = selectionKey;\n    }\n\n    public SelectionKey getSelectionKey() {\n        if (selectionKey == null)\n            selectionKey = getSocketChannel().keyFor(getServer().getSelector());\n        return selectionKey;\n    }\n\n    private void processGotDataInBuffers() throws AppException, ConnectionLostException, ClassNotFoundException, IOException {\n        if (getInputStream().available() == 0)\n            return;\n        logger.finest(\"Trying to process got data.. DataMode.IN=\" + dataModeIN);\n        AuthStatus authStatus = null;\n        //--For debug\n        ((ByteBufferInputStream) getInputStream()).dumpContent();\n        String temp = null;\n        String rec = null;\n        Object recObject = null;\n        byte[] recByte = null;\n        boolean timeToCheckForNewLineMiss = false;\n        do {\n            //updateLastCommunicationTime();\n            if (dataModeIN == DataMode.STRING) {\n                ByteBufferInputStream bbin = (ByteBufferInputStream) getInputStream();\n                timeToCheckForNewLineMiss = true;\n                while (bbin.isLineReady()) {\n                    rec = bbin.readLine();\n                    if (rec == null) {\n                        lost = true;\n                        return;\n                    }\n                    if (getCommunicationLogging() && authorised == true) {\n                        appLogger.log(Level.FINE, \"Got STRING [{0}] : {1}\", new Object[] { getHostAddress(), rec });\n                    }\n                    totalReadBytes = totalReadBytes + rec.length();\n                    if (authorised == false)\n                        authStatus = clientAuthenticationHandler.handleAuthentication(this, rec);\n                    else\n                        clientCommandHandler.handleCommand(this, rec);\n                    if (isClosed() == true)\n                        return;\n                    while (authStatus == AuthStatus.FAILURE) authStatus = processAuthorisation();\n                    if (authStatus == AuthStatus.SUCCESS)\n                        authorised = true;\n                    if (dataModeIN != DataMode.STRING) {\n                        break;\n                    }\n                    timeToCheckForNewLineMiss = false;\n                }\n                //end of while\n                if (timeToCheckForNewLineMiss && bbin.availableOnlyInByteBuffer() == 0) {\n                    return;\n                } else {\n                    timeToCheckForNewLineMiss = false;\n                }\n            }\n            //if(dataModeIN == DataMode.OBJECT) {\n            while (dataModeIN == DataMode.OBJECT && o_in != null) {\n                //not sure if all bytes are in buffer..~ may need more read.. will get stuck..\n                recObject = o_in.readObject();\n                if (recObject == null) {\n                    lost = true;\n                    return;\n                }\n                if (getCommunicationLogging() && authorised == true) {\n                    appLogger.log(Level.FINE, \"Got OBJECT [{0}] : {1}\", new Object[] { getHostAddress(), recObject.toString() });\n                }\n                totalReadBytes = totalReadBytes + 1;\n                if (authorised == false)\n                    authStatus = clientAuthenticationHandler.handleAuthentication(this, recObject);\n                else\n                    clientObjectHandler.handleObject(this, recObject);\n                if (isClosed() == true)\n                    return;\n                while (authStatus == AuthStatus.FAILURE) authStatus = processAuthorisation();\n                if (authStatus == AuthStatus.SUCCESS)\n                    authorised = true;\n            }\n            //}\n            //if(dataModeIN == DataMode.BYTE) {\n            while (dataModeIN == DataMode.BYTE && getInputStream().available() != 0) {\n                rec = readBytes();\n                if (rec == null) {\n                    lost = true;\n                    return;\n                }\n                if (getCommunicationLogging() && authorised == true) {\n                    appLogger.log(Level.FINE, \"Got BYTE [{0}] : {1}\", new Object[] { getHostAddress(), rec });\n                }\n                totalReadBytes = totalReadBytes + rec.length();\n                if (authorised == false)\n                    authStatus = clientAuthenticationHandler.handleAuthentication(this, rec);\n                else\n                    clientCommandHandler.handleCommand(this, rec);\n                if (isClosed() == true)\n                    return;\n                while (authStatus == AuthStatus.FAILURE) authStatus = processAuthorisation();\n                if (authStatus == AuthStatus.SUCCESS)\n                    authorised = true;\n            }\n            //} else if(dataModeIN == DataMode.BINARY) {\n            while (dataModeIN == DataMode.BINARY && getInputStream().available() != 0) {\n                recByte = readBinary();\n                if (recByte == null) {\n                    lost = true;\n                    return;\n                }\n                if (getCommunicationLogging() && authorised == true) {\n                    if (getServer().isRawCommunicationLogging()) {\n                        if (getServer().getRawCommunicationMaxLength() > 0 && recByte.length > getServer().getRawCommunicationMaxLength()) {\n                            appLogger.log(Level.FINE, \"Got BINARY [{0}] : {1}; RAW: {2}{3}\", new Object[] { getHostAddress(), MyString.getMemInfo(recByte.length), new String(recByte, 0, getServer().getRawCommunicationMaxLength(), charset), \"...\" });\n                        } else {\n                            appLogger.log(Level.FINE, \"Got BINARY [{0}] : {1}; RAW: {2}\", new Object[] { getHostAddress(), MyString.getMemInfo(recByte.length), new String(recByte, charset) });\n                        }\n                    } else {\n                        appLogger.log(Level.FINE, \"Got BINARY [{0}] : {1}\", new Object[] { getHostAddress(), MyString.getMemInfo(recByte.length) });\n                    }\n                } else if (getCommunicationLogging()) {\n                    appLogger.log(Level.FINE, \"Got BINARY [{0}] : {1}\", new Object[] { getHostAddress(), MyString.getMemInfo(recByte.length) });\n                }\n                totalReadBytes = totalReadBytes + recByte.length;\n                if (authorised == false)\n                    authStatus = clientAuthenticationHandler.handleAuthentication(this, recByte);\n                else\n                    clientBinaryHandler.handleBinary(this, recByte);\n                if (isClosed() == true)\n                    return;\n                while (authStatus == AuthStatus.FAILURE) authStatus = processAuthorisation();\n                if (authStatus == AuthStatus.SUCCESS)\n                    authorised = true;\n            }\n            //} else {\n            if (dataModeIN != DataMode.STRING && dataModeIN != DataMode.OBJECT && dataModeIN != DataMode.BYTE && dataModeIN != DataMode.BINARY) {\n                throw new IllegalStateException(\"Incoming DataMode is not supported : \" + dataModeIN);\n            }\n        } while (getInputStream().available() != 0);\n    }\n\n    public void registerForRead() throws IOException, ClosedChannelException {\n        //System.out.println(\"registerForRead..\");\n        //(new Exception()).printStackTrace();\n        try {\n            if (getSelectionKey() == null) {\n                boolean flag = getServer().registerChannel(getSocketChannel(), SelectionKey.OP_READ, this);\n                if (flag) {\n                    logger.finest(\"Adding OP_READ as interest Ops for \" + getName());\n                } else if (ByteBufferOutputStream.isLoggable(Level.FINEST)) {\n                    logger.finest(\"OP_READ is already present in interest Ops for \" + getName());\n                }\n            } else if (getSelectionKey().isValid()) {\n                if ((getSelectionKey().interestOps() & SelectionKey.OP_READ) == 0) {\n                    logger.finest(\"Adding OP_READ to interest Ops for \" + getName());\n                    removeEvent(ClientEvent.READ);\n                    getSelectionKey().interestOps(getSelectionKey().interestOps() | SelectionKey.OP_READ);\n                    if (wakeupSelectorAfterRegisterRead) {\n                        getServer().getSelector().wakeup();\n                    }\n                } else {\n                    if (ByteBufferOutputStream.isLoggable(Level.FINEST)) {\n                        logger.finest(\"OP_READ is already present in interest Ops for \" + getName());\n                    }\n                }\n            } else {\n                throw new IOException(\"SelectionKey is invalid!\");\n            }\n        } catch (CancelledKeyException e) {\n            throw new IOException(\"SelectionKey is cancelled!\");\n        }\n    }\n\n    public void registerForWrite() throws IOException, ClosedChannelException {\n        if (hasEvent(ClientEvent.RUN_BLOCKING) || hasEvent(ClientEvent.MAX_CON_BLOCKING)) {\n            throw new IllegalStateException(\"This method is only allowed under Non-Blocking mode.\");\n        }\n        if (clientWriteHandler == null) {\n            throw new IllegalStateException(\"ClientWriteHandler has not been set!\");\n        }\n        registerWrite();\n    }\n\n    public void registerWrite() throws IOException {\n        //System.out.println(\"registerWrite..\");\n        //(new Exception()).printStackTrace();\n        try {\n            if (getSelectionKey() == null) {\n                boolean flag = getServer().registerChannel(getSocketChannel(), SelectionKey.OP_WRITE, this);\n                if (flag) {\n                    logger.finest(\"Adding OP_WRITE as interest Ops for \" + getName());\n                } else if (ByteBufferOutputStream.isLoggable(Level.FINEST)) {\n                    logger.finest(\"OP_WRITE is already present in interest Ops for \" + getName());\n                }\n            } else if (getSelectionKey().isValid()) {\n                if ((getSelectionKey().interestOps() & SelectionKey.OP_WRITE) == 0) {\n                    logger.finest(\"Adding OP_WRITE to interest Ops for \" + getName());\n                    removeEvent(ClientEvent.WRITE);\n                    getSelectionKey().interestOps(getSelectionKey().interestOps() | SelectionKey.OP_WRITE);\n                    if (wakeupSelectorAfterRegisterWrite) {\n                        getServer().getSelector().wakeup();\n                    }\n                } else {\n                    if (ByteBufferOutputStream.isLoggable(Level.FINEST)) {\n                        logger.finest(\"OP_WRITE is already present in interest Ops for \" + getName());\n                    }\n                }\n            } else {\n                throw new IOException(\"SelectionKey is invalid!\");\n            }\n        } catch (CancelledKeyException e) {\n            throw new IOException(\"SelectionKey is cancelled!\");\n        }\n    }\n\n    protected void setClientWriteHandler(ClientWriteHandler handler) {\n        clientWriteHandler = handler;\n    }\n\n    /**\n     * Returns number of thread currently in this object.\n     * @since 1.4.6\n     */\n    public int getThreadAccessCount() {\n        return threadAccessCount;\n    }\n\n    private void doHandshake() throws Exception {\n        while (true) {\n            SSLEngineResult res;\n            logger.fine(\"handshakeStatus: \" + handshakeStatus);\n            if (handshakeStatus == SSLEngineResult.HandshakeStatus.FINISHED) {\n                if (initialHandshakeStatus) {\n                    finishInitialHandshake();\n                }\n                return;\n            } else if (handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_TASK) {\n                doTasks();\n                continue;\n            } else if (handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_UNWRAP) {\n                /*\n\t\t\t\t\tdoRead();\n\n\t\t\t\t\tif(initialHandshakeStatus && \n\t\t\t\t\t\t\tstatus == SSLEngineResult.Status.BUFFER_UNDERFLOW) {\n\t\t\t\t\t\tregisterForRead();\n\t\t\t\t\t}\n\t\t\t\t\t*/\n                return;\n            } else if (handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_WRAP) {\n                ByteBuffer netData = (ByteBuffer) getServer().getByteBufferPool().borrowObject();\n                //netData.clear();\n                res = sslEngine.wrap(dummyByteBuffer, netData);\n                logger.info(\"Wrapping:\\n\" + res);\n                assert res.bytesProduced() != 0 : \"No net data produced during handshake wrap.\";\n                assert res.bytesConsumed() == 0 : \"App data consumed during handshake wrap.\";\n                handshakeStatus = res.getHandshakeStatus();\n                //netData.flip(); -- no need to flip will be done when writing to sc\n                byteBufferOutputStream.addEncryptedByteBuffer(netData);\n                if (!doWrite()) {\n                    return;\n                }\n                //back to loop\n                continue;\n            } else if (handshakeStatus == SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) {\n                assert false : \"doHandshake() should never reach the NOT_HANDSHAKING state\";\n                return;\n            }\n            //if\n        }\n        //loop\n    }\n\n    private void doTasks() {\n        Runnable task;\n        while ((task = sslEngine.getDelegatedTask()) != null) {\n            logger.fine(\"Running the task.. START \");\n            task.run();\n            logger.fine(\"Running the task.. END\");\n        }\n        handshakeStatus = sslEngine.getHandshakeStatus();\n        logger.fine(\"handshakeStatus: \" + handshakeStatus);\n    }\n\n    private void finishInitialHandshake() throws IOException {\n        initialHandshakeStatus = false;\n    }\n\n    public boolean getInitialHandshakeStatus() {\n        return initialHandshakeStatus;\n    }\n\n    public ByteBuffer encrypt(ByteBuffer src) throws IOException {\n        if (initialHandshakeStatus) {\n            logger.fine(\"Writing not possible during handshake!\");\n            //Exception e = new Exception();\n            //e.printStackTrace();\n            return null;\n        }\n        ByteBuffer dest = null;\n        boolean isException = false;\n        try {\n            src.flip();\n            dest = (ByteBuffer) getServer().getByteBufferPool().borrowObject();\n            //dest.clear();\n            SSLEngineResult res = sslEngine.wrap(src, dest);\n            logger.info(\"Wrapping:\\n\" + res);\n            //dest.flip();\n            return dest;\n        } catch (IOException e) {\n            logger.warning(\"IOException:\" + e);\n            isException = true;\n            throw e;\n        } catch (Exception e) {\n            logger.warning(\"Exception:\" + e);\n            isException = true;\n            throw new IOException(e.getMessage());\n        } finally {\n            if (isException == true && dest != null) {\n                try {\n                    getServer().getByteBufferPool().returnObject(dest);\n                } catch (Exception er) {\n                    logger.warning(\"Error in returning ByteBuffer to pool: \" + er);\n                }\n            }\n        }\n    }\n}\n",
        "test_prompt": "// NonBlockingClientHandler_2Test.java\npackage org.quickserver.net.server.impl;\n\nimport org.quickserver.net.server.*;\nimport org.quickserver.net.*;\nimport org.quickserver.util.*;\nimport org.quickserver.util.io.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport java.nio.*;\nimport java.nio.channels.*;\nimport javax.net.ssl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link NonBlockingClientHandler}.\n* It contains one unit test case for the {@link NonBlockingClientHandler#getMaxThreadAccessCount()} method.\n*/\nclass NonBlockingClientHandler_2Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// QuickServer_0Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#getVersion()} method.\n*/\nclass QuickServer_0Test {\n}"
            }
        ],
        "id": "4f63bdd9-d813-457d-97ab-c8028b33618e",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_0Test.java",
        "original_code": "// QuickServer.java\n/*\n * This file is part of the QuickServer library \n * Copyright (C) QuickServer.org\n *\n * Use, modification, copying and distribution of this software is subject to\n * the terms and conditions of the GNU Lesser General Public License. \n * You should have received a copy of the GNU LGP License along with this \n * library; if not, you can download a copy from <http://www.quickserver.org/>.\n *\n * For questions, suggestions, bug-reports, enhancement-requests etc.\n * visit http://www.quickserver.org\n *\n */\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n *  Main class of QuickServer library. This class is used to create\n *  multi client servers quickly.\n *  <p>\n *  Ones a client is connected, it creates {@link ClientHandler} object,\n *  which is run using any thread available from the pool of threads\n *  maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n *  handles the client. <br/>\n *  QuickServer divides the application logic of its developer over eight\n *  class, <br>\n *  \t<ul>\n * \t\t<li>ClientEventHandler<br>\n *  \t\t   &nbsp;Handles client events [Optional Class].\n *  \t\t<li>ClientCommandHandler [#]<br>\n *  \t\t   &nbsp;Handles client character/string commands.\n *  \t\t<li>ClientObjectHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - Object commands.\n * \t\t<li>ClientBinaryHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - binary data.\n * \t\t<li>ClientWriteHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n *  \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n *  \t\t\t&nbsp;Used to Authencatet a client.\n *  \t\t<li>ClientData [Optional Class]<br>\n *  \t\t\t&nbsp;Client data carrier (support class)\n * \t\t<li>ClientExtendedEventHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles extended client events.\n *  \t</ul>\n *\n *  [#] = Any one of these have to be set based on default DataMode for input.\n *  The default DataMode for input is String so if not changes you will\n *  have to set ClientCommandHandler.\n *  </p>\n *  <p>\n *   Eg:\n *  <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n *  @version 1.4.8\n *  @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //Some variable are not initialised to any value because the\n    //default java value was desired initial value.\n    //'dev ' = development build not yet final\n    //'beta' = test build all features\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n        if (System.getProperty(\"org.quickserver.useOSLineSeparator\") != null && System.getProperty(\"org.quickserver.useOSLineSeparator\").equals(\"true\")) {\n            NEW_LINE = System.getProperty(\"line.separator\");\n        } else {\n            NEW_LINE = \"\\r\\n\";\n        }\n        String _pid = ManagementFactory.getRuntimeMXBean().getName();\n        int i = _pid.indexOf(\"@\");\n        pid = _pid.substring(0, i);\n        System.out.print(\"Loading QuickServer v\" + getVersion() + \" [PID:\" + pid + \"]\");\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //--v1.2\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //for Service interface\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n        System.out.println(\" Done\");\n        //should be commented if not a patch release\n        //System.out.println(\"[Includes patch(#): t=152&p=532]\");\n        //should be commented if not a dev release\n        //System.out.println(\"[Dev Build Date: Saturday, October 29, 2005]\");\n        logger.log(Level.FINE, \"PID: {0}\", pid);\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion() {\n        return VER;\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo() {\n        return getVersionNo(VER);\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver) {\n        //String ver = getVersion();\n        float version = 0;\n        //check if beta\n        int i = ver.indexOf(\" \");\n        if (i == -1)\n            i = ver.length();\n        ver = ver.substring(0, i);\n        //check for sub version\n        i = ver.indexOf(\".\");\n        if (i != -1) {\n            int j = ver.indexOf(\".\", i);\n            if (j != -1) {\n                ver = ver.substring(0, i) + \".\" + MyString.replaceAll(ver.substring(i + 1), \".\", \"\");\n            }\n        }\n        try {\n            version = Float.parseFloat(ver);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Corrupt QuickServer\");\n        }\n        return version;\n    }\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine() {\n        return NEW_LINE;\n    }\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString() {\n        return serverName + \" : \" + getPort();\n    }\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n        setClientCommandHandler(commandHandler);\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n        //send to another constructor\n        this(commandHandler);\n        setPort(port);\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException {\n        logger.log(Level.FINE, \"Starting {0}\", getName());\n        if (isClosed() == false) {\n            logger.log(Level.WARNING, \"Server {0} already running.\", getName());\n            throw new AppException(\"Server \" + getName() + \" already running.\");\n        }\n        blockingMode = getBasicConfig().getServerMode().getBlocking();\n        if (getSecure().isEnable() && blockingMode == false) {\n            //TODO we need to fix this..\n            logger.warning(\"QuickServer does not support secure servers under non-blocking mode! So will run in blocking mode.\");\n            blockingMode = true;\n            getBasicConfig().getServerMode().setBlocking(blockingMode);\n        }\n        if (serverBanner == null) {\n            serverBanner = \"\\n-------------------------------\" + \"\\n Name : \" + getName() + \"\\n Port : \" + getPort() + \"\\n-------------------------------\\n\";\n            logger.finest(\"Default Server Banner Generated\");\n        }\n        try {\n            loadApplicationClasses();\n            //load class from Advanced Settings\n            Class clientIdentifierClass = getClass(getBasicConfig().getAdvancedSettings().getClientIdentifier(), true);\n            clientIdentifier = (ClientIdentifier) clientIdentifierClass.newInstance();\n            clientIdentifier.setQuickServer(QuickServer.this);\n            //load class from ObjectPoolConfig\n            Class poolManagerClass = getClass(getBasicConfig().getObjectPoolConfig().getPoolManager(), true);\n            poolManager = (PoolManager) poolManagerClass.newInstance();\n            //load class QSObjectPoolMaker\n            Class qsObjectPoolMakerClass = getClass(getBasicConfig().getAdvancedSettings().getQSObjectPoolMaker(), true);\n            qsObjectPoolMaker = (QSObjectPoolMaker) qsObjectPoolMakerClass.newInstance();\n            loadServerHooksClasses();\n            processServerHooks(ServerHook.PRE_STARTUP);\n            if (getSecure().isLoad() == true)\n                //v1.4.0\n                loadSSLContext();\n            loadBusinessLogic();\n        } catch (ClassNotFoundException e) {\n            logger.log(Level.SEVERE, \"Could not load class/s: \" + e, e);\n            throw new AppException(\"Could not load class/s : \" + e);\n        } catch (InstantiationException e) {\n            logger.log(Level.SEVERE, \"Could not instantiate class/s: \" + e, e);\n            throw new AppException(\"Could not instantiate class/s: \" + e);\n        } catch (IllegalAccessException e) {\n            logger.log(Level.SEVERE, \"Illegal access to class/s: \" + e, e);\n            throw new AppException(\"Illegal access to class/s: \" + e);\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, \"IOException: \" + e, e);\n            throw new AppException(\"IOException: \" + e);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Exception: \" + e, e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Exception : \" + e);\n        }\n        //v1.3.3\n        if (getSecurityManagerClass() != null) {\n            System.setSecurityManager(getSecurityManager());\n        }\n        setServiceState(Service.INIT);\n        t = new Thread(this, \"QuickServer - \" + getName());\n        t.start();\n        do {\n            Thread.yield();\n        } while (getServiceState() == Service.INIT);\n        if (getServiceState() != Service.RUNNING) {\n            if (exceptionInRun != null)\n                throw new AppException(\"Could not start server \" + getName() + \"! Details: \" + exceptionInRun);\n            else\n                throw new AppException(\"Could not start server \" + getName());\n        }\n        lastStartTime = new java.util.Date();\n        logger.log(Level.FINE, \"Started {0}, Date: {1}\", new Object[] { getName(), lastStartTime });\n    }\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException {\n        processServerHooks(ServerHook.PRE_SHUTDOWN);\n        logger.log(Level.WARNING, \"Stopping {0}\", getName());\n        stopServer = true;\n        Socket death = null;\n        if (isClosed() == true) {\n            logger.log(Level.WARNING, \"Server {0} is not running!\", getName());\n            throw new AppException(\"Server \" + getName() + \" is not running!\");\n        }\n        try {\n            if (getBlockingMode() == true) {\n                if (getSecure().isEnable() == false) {\n                    death = new Socket(server.getInetAddress(), server.getLocalPort());\n                    death.getInputStream().read();\n                    death.close();\n                } else {\n                    death = getSSLSocketFactory().createSocket(server.getInetAddress(), server.getLocalPort());\n                    Thread.sleep(100);\n                    death.close();\n                }\n            }\n            if (serverSocketChannel != null) {\n                serverSocketChannel.close();\n            }\n        } catch (IOException e) {\n            logger.log(Level.FINE, \"IOError stopping {0}: {1}\", new Object[] { getName(), e });\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error stopping {0}: {1}\", new Object[] { getName(), e });\n            throw new AppException(\"Error in stopServer \" + getName() + \": \" + e);\n        }\n        for (int i = 0; getServiceState() != Service.STOPPED; i++) {\n            try {\n                Thread.sleep(60);\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error waiting for {0} to fully stop. Error: {1}\", new Object[] { getName(), e });\n            }\n            if (i > 1000) {\n                logger.severe(\"Server was not stopped even after 10sec.. will terminate now.\");\n                System.exit(-1);\n            }\n        }\n        if (adminServer == null || getQSAdminServer().getServer() != this) {\n            //so this is not qsadmin\n            setClassLoader(null);\n        }\n        logger.log(Level.INFO, \"Stopped {0}\", getName());\n    }\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException {\n        stopServer();\n        startServer();\n    }\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName() {\n        return serverName;\n    }\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name) {\n        serverName = name;\n        logger.log(Level.FINEST, \"Set to : {0}\", name);\n    }\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner() {\n        return serverBanner;\n    }\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner) {\n        serverBanner = banner;\n        logger.log(Level.FINEST, \"Set to : {0}\", banner);\n    }\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port) {\n        if (port < 0) {\n            throw new IllegalArgumentException(\"Port number can not be less than 0!\");\n        }\n        serverPort = port;\n        logger.log(Level.FINEST, \"Set to {0}\", port);\n    }\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort() {\n        if (isClosed() == false) {\n            return server.getLocalPort();\n        }\n        if (getSecure().isEnable() == false) {\n            return serverPort;\n        } else {\n            int _port = getSecure().getPort();\n            if (_port == -1)\n                return serverPort;\n            else\n                return _port;\n        }\n    }\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler) {\n        clientCommandHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler() {\n        return clientCommandHandlerString;\n    }\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data) {\n        this.clientDataString = data;\n        logger.log(Level.FINEST, \"Set to {0}\", data);\n    }\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData() {\n        return clientDataString;\n    }\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time) {\n        if (time > 0)\n            socketTimeout = time;\n        else\n            socketTimeout = 0;\n        logger.log(Level.FINEST, \"Set to {0}\", socketTimeout);\n    }\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout() {\n        return socketTimeout;\n    }\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry) {\n        maxAuthTry = authTry;\n        logger.log(Level.FINEST, \"Set to {0}\", authTry);\n    }\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry() {\n        return maxAuthTry;\n    }\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg) {\n        maxAuthTryMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg() {\n        return maxAuthTryMsg;\n    }\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg) {\n        timeoutMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg() {\n        return timeoutMsg;\n    }\n\n    private TheClient initTheClient() {\n        TheClient theClient = new TheClient();\n        theClient.setServer(QuickServer.this);\n        theClient.setTimeoutMsg(getTimeoutMsg());\n        //v1.2\n        theClient.setMaxAuthTry(getMaxAuthTry());\n        theClient.setMaxAuthTryMsg(getMaxAuthTryMsg());\n        theClient.setClientEventHandler(clientEventHandler);\n        //v1.4.6\n        theClient.setClientExtendedEventHandler(clientExtendedEventHandler);\n        theClient.setClientCommandHandler(clientCommandHandler);\n        //v1.2\n        theClient.setClientObjectHandler(clientObjectHandler);\n        //v1.4\n        theClient.setClientBinaryHandler(clientBinaryHandler);\n        //v1.4.5\n        theClient.setClientWriteHandler(clientWriteHandler);\n        //v1.3\n        theClient.setAuthenticator(authenticator);\n        //v1.4.6\n        theClient.setClientAuthenticationHandler(clientAuthenticationHandler);\n        theClient.setTimeout(socketTimeout);\n        theClient.setMaxConnectionMsg(maxConnectionMsg);\n        //v1.3.2\n        theClient.setCommunicationLogging(getCommunicationLogging());\n        return theClient;\n    }\n\n    public void run() {\n        exceptionInRun = null;\n        TheClient theClient = initTheClient();\n        try {\n            stopServer = false;\n            closeAllPools();\n            initAllPools();\n            makeServerSocket();\n            //print banner\n            System.out.println(serverBanner);\n            //v1.2\n            setServiceState(Service.RUNNING);\n            //v1.3.3\n            processServerHooks(ServerHook.POST_STARTUP);\n            if (getBlockingMode() == false) {\n                runNonBlocking(theClient);\n                if (stopServer == true) {\n                    logger.log(Level.FINEST, \"Closing selector for {0}\", getName());\n                    selector.close();\n                }\n                return;\n            } else {\n                runBlocking(theClient);\n            }\n        } catch (BindException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"{0} BindException for Port {1} @ {2} : {3}\", new Object[] { getName(), getPort(), getBindAddr().getHostAddress(), e.getMessage() });\n        } catch (javax.net.ssl.SSLException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"SSLException {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (IOException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"IOError {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (Exception e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"Error {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } finally {\n            if (getBlockingMode() == true) {\n                logger.log(Level.WARNING, \"Closing {0}\", getName());\n                try {\n                    if (isClosed() == false) {\n                        server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            } else if (getBlockingMode() == false && exceptionInRun != null) {\n                logger.log(Level.WARNING, \"Closing {0} - Had Error: {1}\", new Object[] { getName(), exceptionInRun });\n                try {\n                    if (isClosed() == false) {\n                        if (serverSocketChannel != null)\n                            serverSocketChannel.close();\n                        if (server != null)\n                            server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n        }\n    }\n\n    //end of run\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnection = maxConnection;\n        else\n            this.maxConnection = maxConnection;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnection);\n    }\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection() {\n        return maxConnection;\n    }\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount() {\n        if (clientHandlerPool != null) {\n            try {\n                return getClientHandlerPool().getNumActive();\n            } catch (Exception e) {\n                return 0;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnectionMsg = maxConnectionMsg;\n        else\n            this.maxConnectionMsg = maxConnectionMsg;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnectionMsg);\n    }\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg() {\n        return maxConnectionMsg;\n    }\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException {\n        ipAddr = InetAddress.getByName(bindAddr);\n        logger.log(Level.FINEST, \"Set to {0}\", bindAddr);\n    }\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr() {\n        if (ipAddr == null) {\n            try {\n                ipAddr = InetAddress.getByName(\"0.0.0.0\");\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Unable to create default ip(0.0.0.0) : {0}\", e);\n                throw new RuntimeException(\"Error: Unable to find servers own ip : \" + e);\n            }\n        }\n        return ipAddr;\n    }\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects) {\n        this.storeObjects = storeObjects;\n    }\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects() {\n        return storeObjects;\n    }\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port) {\n        getQSAdminServer().getServer().setPort(port);\n    }\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort() {\n        return getQSAdminServer().getServer().getPort();\n    }\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator) {\n        getQSAdminServer().getServer().setClientAuthenticationHandler(authenticator);\n    }\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator() {\n        return getQSAdminServer().getServer().getAuthenticator();\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException {\n        getQSAdminServer().setClientAuthenticationHandler(authenticator);\n        getQSAdminServer().startServer(port);\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException {\n        getQSAdminServer().startServer();\n    }\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer() {\n        if (adminServer == null)\n            adminServer = new QSAdminServer(QuickServer.this);\n        return adminServer;\n    }\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer) {\n        if (adminServer == null)\n            this.adminServer = adminServer;\n    }\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed() {\n        if (server == null)\n            return true;\n        return server.isClosed();\n    }\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger() {\n        if (appLogger != null)\n            return appLogger;\n        return logger;\n    }\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger) {\n        this.appLogger = appLogger;\n    }\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler) {\n        clientObjectHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler() {\n        return clientObjectHandlerString;\n    }\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        if (formatter == null)\n            return;\n        consoleLoggingformatter = formatter;\n        java.util.logging.Formatter conformatter = (java.util.logging.Formatter) getClass(formatter, true).newInstance();\n        Logger jdkLogger = Logger.getLogger(\"\");\n        Handler[] handlers = jdkLogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                handlers[index].setFormatter(conformatter);\n            }\n        }\n        logger.log(Level.FINEST, \"Set to {0}\", formatter);\n    }\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter() {\n        return consoleLoggingformatter;\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MiniFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to logging.MiniFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MicroFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to MicroFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        boolean isConsole = true;\n        try {\n            if (System.console() == null) {\n                isConsole = false;\n            }\n        } catch (Throwable e) {\n            //ignore\n        }\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                if (isConsole == false && level != Level.OFF) {\n                    System.out.println(\"QuickServer: You do not have a console.. so turning console logger off..\");\n                    level = Level.OFF;\n                }\n                if (level == Level.OFF) {\n                    logger.info(\"QuickServer: Removing console handler.. \");\n                    rlogger.removeHandler(handlers[index]);\n                    handlers[index].setLevel(level);\n                    handlers[index].close();\n                } else {\n                    handlers[index].setLevel(level);\n                }\n            }\n        }\n        if (level == Level.SEVERE)\n            consoleLoggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            consoleLoggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            consoleLoggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            consoleLoggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            consoleLoggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            consoleLoggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            consoleLoggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            consoleLoggingLevel = \"OFF\";\n        else\n            consoleLoggingLevel = \"UNKNOWN\";\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel() {\n        return consoleLoggingLevel;\n    }\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            handlers[index].setLevel(level);\n        }\n        if (level == Level.SEVERE)\n            loggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            loggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            loggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            loggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            loggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            loggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            loggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            loggingLevel = \"OFF\";\n        else\n            loggingLevel = \"UNKNOWN\";\n        consoleLoggingLevel = loggingLevel;\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    //*** Start of Service interface methods\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError() {\n        return serviceError;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param) {\n        serviceError = null;\n        try {\n            initServer(param);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig) {\n        serviceError = null;\n        try {\n            initServer(qsConfig);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING)\n            return false;\n        try {\n            startServer();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService() {\n        serviceError = null;\n        if (getServiceState() == Service.STOPPED)\n            return false;\n        try {\n            stopServer();\n            clearAllPools();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING) {\n            suspendMaxConnection = maxConnection;\n            suspendMaxConnectionMsg = maxConnectionMsg;\n            maxConnection = 0;\n            maxConnectionMsg = \"Service is suspended.\";\n            setServiceState(Service.SUSPENDED);\n            logger.log(Level.INFO, \"Service {0} is suspended.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService() {\n        serviceError = null;\n        if (getServiceState() == Service.SUSPENDED) {\n            maxConnection = suspendMaxConnection;\n            maxConnectionMsg = suspendMaxConnectionMsg;\n            setServiceState(Service.RUNNING);\n            logger.log(Level.INFO, \"Service {0} resumed.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info() {\n        serviceError = null;\n        StringBuilder buf = new StringBuilder();\n        buf.append(getName()).append(\"\\n\");\n        buf.append(getBindAddr().getHostAddress()).append(\" \");\n        buf.append(getPort()).append(\"\\n\");\n        return buf.toString();\n    }\n\n    // *** End of Service interface methods\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException {\n        QuickServerConfig qsConfig = null;\n        try {\n            qsConfig = ConfigReader.read((String) param[0]);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not init server from xml file {0} : {1}\", new Object[] { new File((String) param[0]).getAbsolutePath(), e });\n            throw new AppException(\"Could not init server from xml file\", e);\n        }\n        initServer(qsConfig);\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException {\n        setConfig(qsConfig);\n        try {\n            configQuickServer();\n            loadApplicationClasses();\n            //start InitServerHooks\n            InitServerHooks ish = getConfig().getInitServerHooks();\n            if (ish != null) {\n                Iterator iterator = ish.iterator();\n                String initServerHookClassName = null;\n                Class initServerHookClass = null;\n                InitServerHook initServerHook = null;\n                while (iterator.hasNext()) {\n                    initServerHookClassName = (String) iterator.next();\n                    initServerHookClass = getClass(initServerHookClassName, true);\n                    initServerHook = (InitServerHook) initServerHookClass.newInstance();\n                    logger.log(Level.INFO, \"Loaded init server hook: {0}\", initServerHookClassName);\n                    logger.log(Level.FINE, \"Init server hook info: {0}\", initServerHook.info());\n                    initServerHook.handleInit(QuickServer.this);\n                }\n            }\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not load init server hook: {0}\", e);\n            logger.log(Level.WARNING, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Could not load init server hook\", e);\n        }\n        setServiceState(Service.INIT);\n        logger.log(Level.FINEST, \"\\r\\n{0}\", MyString.getSystemInfo(getVersion()));\n    }\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState() {\n        return serviceState;\n    }\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state) {\n        serviceState = state;\n    }\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp) {\n        if (temp.equals(\"SEVERE\"))\n            qs.setConsoleLoggingLevel(Level.SEVERE);\n        else if (temp.equals(\"WARNING\"))\n            qs.setConsoleLoggingLevel(Level.WARNING);\n        else if (temp.equals(\"INFO\"))\n            qs.setConsoleLoggingLevel(Level.INFO);\n        else if (temp.equals(\"CONFIG\"))\n            qs.setConsoleLoggingLevel(Level.CONFIG);\n        else if (temp.equals(\"FINE\"))\n            qs.setConsoleLoggingLevel(Level.FINE);\n        else if (temp.equals(\"FINER\"))\n            qs.setConsoleLoggingLevel(Level.FINER);\n        else if (temp.equals(\"FINEST\"))\n            qs.setConsoleLoggingLevel(Level.FINEST);\n        else if (temp.equals(\"OFF\"))\n            qs.setConsoleLoggingLevel(Level.OFF);\n        else\n            logger.log(Level.WARNING, \"unknown level {0}\", temp);\n    }\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception {\n        QuickServer qs = QuickServer.this;\n        //v1.3\n        qs.setConfig(config);\n        qs.setBasicConfig(config);\n        String temp = config.getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        temp = null;\n        qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        //v1.3.3\n        qs.setSecurityManagerClass(config.getSecurityManagerClass());\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        temp = config.getApplicationJarPath();\n        if (temp != null) {\n            File ajp = new File(temp);\n            if (ajp.isAbsolute() == false) {\n                temp = config.getConfigFile();\n                ajp = new File(temp);\n                temp = ajp.getParent() + File.separatorChar + config.getApplicationJarPath();\n                config.setApplicationJarPath(temp);\n                temp = null;\n            }\n            qs.setApplicationJarPath(config.getApplicationJarPath());\n            //set path also to QSAdmin\n            if (config.getQSAdminServerConfig() != null) {\n                getQSAdminServer().getServer().setApplicationJarPath(config.getApplicationJarPath());\n            }\n        }\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception {\n        QuickServer qs = getQSAdminServer().getServer();\n        qs.setBasicConfig(config);\n        //set the Logging Level to same as main QS\n        //config.getConsoleLoggingLevel();\n        String temp = getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        //set the Logging Formatter to same as main QS\n        //qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setConsoleLoggingFormatter(getConsoleLoggingFormatter());\n        //v1.4.6\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        //v1.4.6\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        getQSAdminServer().setCommandPlugin(config.getCommandPlugin());\n        //v1.3.2\n        if (config.getCommandShellEnable().equals(\"true\"))\n            getQSAdminServer().setShellEnable(true);\n        getQSAdminServer().setPromptName(config.getCommandShellPromptName());\n        //v1.3.3\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception {\n        configQuickServer(getConfig());\n        if (getConfig().getQSAdminServerConfig() != null) {\n            configQuickServer(getConfig().getQSAdminServerConfig());\n        }\n    }\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args) {\n        try {\n            if (args.length >= 1) {\n                if (args[0].equals(\"-about\")) {\n                    org.quickserver.net.server.gui.About.main(null);\n                } else if (args[0].equals(\"-load\") && args.length >= 2) {\n                    QuickServer qs = QuickServer.load(args[1]);\n                    if (qs != null)\n                        handleOptions(args, qs);\n                } else {\n                    System.out.println(printUsage());\n                }\n            } else {\n                System.out.println(printUsage());\n                org.quickserver.net.server.gui.About.showAbout();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException {\n        QuickServer qs = new QuickServer();\n        Object[] config = new Object[] { xml };\n        qs.initServer(config);\n        qs.startServer();\n        if (qs.getConfig().getQSAdminServerConfig() != null) {\n            qs.startQSAdminServer();\n        }\n        return qs;\n    }\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"QuickServer - Java library/framework for creating robust multi-client TCP servers.\\n\");\n        sb.append(\"Copyright (C) QuickServer.org\\n\\n\");\n        sb.append(\"Usage: QuickServer [-options]\\n\");\n        sb.append(\"Where options include:\\n\");\n        sb.append(\"  -about\\t\" + \"Opens About Dialog box\\n\");\n        sb.append(\"  -load <xml_config_file> [load-options]\\t\" + \"Loads the server from xml file.\\n\");\n        sb.append(\"  Where load-options include:\\n\");\n        sb.append(\"     -fullXML2File <file_name>\\t\" + \"Dumps the Full XML configuration of the QuickServer loaded.\\n\");\n        return sb.toString();\n    }\n\n    private static void handleOptions(String[] args, QuickServer quickserver) {\n        if (args.length < 3)\n            return;\n        if (args[2].equals(\"-fullXML2File\") && args.length >= 4) {\n            File file = new File(args[3]);\n            logger.log(Level.INFO, \"Writing full xml configuration to file: {0}\", file.getAbsolutePath());\n            try {\n                TextFile.write(file, quickserver.getConfig().toXML(null));\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error writing full xml configuration: {0}\", e);\n            }\n        }\n    }\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception {\n        try {\n            if (pool != null)\n                getClientPool().clear();\n            if (clientHandlerPool != null)\n                getClientHandlerPool().clear();\n            if (getClientDataPool() != null)\n                getClientDataPool().clear();\n            if (getDBPoolUtil() != null)\n                getDBPoolUtil().clean();\n            if (byteBufferPool != null)\n                getByteBufferPool().clear();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error: {0}\", e);\n            throw e;\n        }\n    }\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception {\n        if (pool == null && clientHandlerPool == null && getClientDataPool() == null && getDBPoolUtil() == null && byteBufferPool == null) {\n            return;\n        }\n        logger.log(Level.FINE, \"Closing pools for {0}\", getName());\n        try {\n            if (pool != null && PoolHelper.isPoolOpen(getClientPool().getObjectPool())) {\n                logger.finer(\"Closing ClientThread pool.\");\n                getClientPool().close();\n            }\n            if (clientHandlerPool != null && PoolHelper.isPoolOpen(getClientHandlerPool())) {\n                logger.finer(\"Closing ClientHandler pool.\");\n                getClientHandlerPool().close();\n            }\n            if (getClientDataPool() != null && PoolHelper.isPoolOpen(getClientDataPool())) {\n                logger.finer(\"Closing ClientData pool.\");\n                getClientDataPool().close();\n            }\n            if (getDBPoolUtil() != null) {\n                logger.finer(\"Closing DB pool.\");\n                getDBPoolUtil().clean();\n            }\n            if (byteBufferPool != null && PoolHelper.isPoolOpen(getByteBufferPool())) {\n                logger.finer(\"Closing ByteBuffer pool.\");\n                getByteBufferPool().close();\n            }\n            logger.log(Level.FINE, \"Closed pools for {0}\", getName());\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error closing pools for {0}: {1}\", new Object[] { getName(), e });\n            throw e;\n        }\n    }\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception {\n        logger.fine(\"Creating pools\");\n        if (getBlockingMode() == false) {\n            makeByteBufferPool(getBasicConfig().getObjectPoolConfig().getByteBufferObjectPoolConfig());\n        }\n        makeClientPool(getBasicConfig().getObjectPoolConfig().getThreadObjectPoolConfig());\n        makeClientHandlerPool(getBasicConfig().getObjectPoolConfig().getClientHandlerObjectPoolConfig());\n        //check if client data is poolable\n        if (clientDataClass != null) {\n            try {\n                clientData = (ClientData) clientDataClass.newInstance();\n                if (PoolableObject.class.isInstance(clientData) == true) {\n                    PoolableObject po = (PoolableObject) clientData;\n                    if (po.isPoolable() == true) {\n                        makeClientDataPool(po.getPoolableObjectFactory(), getBasicConfig().getObjectPoolConfig().getClientDataObjectPoolConfig());\n                    } else {\n                        clientDataPool = null;\n                        logger.fine(\"ClientData is not poolable!\");\n                    }\n                }\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error: {0}\", e);\n                throw e;\n            }\n        }\n        try {\n            makeDBObjectPool();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error in makeDBObjectPool() : {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw e;\n        }\n        logger.fine(\"Created pools\");\n    }\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool() {\n        if (pool == null)\n            throw new IllegalStateException(\"No ClientPool available yet!\");\n        return pool;\n    }\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientHandler pool\");\n        PoolableObjectFactory factory = new ClientHandlerObjectFactory(getBlockingMode());\n        clientHandlerPool = poolManager.makeClientHandlerPool(factory, opConfig);\n        poolManager.initPool(clientHandlerPool, opConfig);\n        clientHandlerPool = makeQSObjectPool(clientHandlerPool);\n        clientIdentifier.setClientHandlerPool((QSObjectPool) clientHandlerPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool() {\n        if (clientHandlerPool == null)\n            throw new IllegalStateException(\"No ClientHandler Pool available yet!\");\n        return clientHandlerPool;\n    }\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config) {\n        this.config = config;\n    }\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig() {\n        return config;\n    }\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientData pool\");\n        clientDataPool = poolManager.makeClientDataPool(factory, opConfig);\n        poolManager.initPool(clientDataPool, opConfig);\n        clientDataPool = makeQSObjectPool(clientDataPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool() {\n        return clientDataPool;\n    }\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil() {\n        return dBPoolUtil;\n    }\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig) {\n        getConfig().setDBObjectPoolConfig(dBObjectPoolConfig);\n    }\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception {\n        if (getConfig().getDBObjectPoolConfig() != null) {\n            logger.fine(\"Creating DBObject Pool\");\n            //logger.finest(\"Got:\\n\"+getConfig().getDBObjectPoolConfig().toXML(null));\n            Class dbPoolUtilClass = getClass(getConfig().getDBObjectPoolConfig().getDbPoolUtil(), true);\n            dBPoolUtil = (DBPoolUtil) dbPoolUtilClass.newInstance();\n            dBPoolUtil.setDatabaseConnections(getConfig().getDBObjectPoolConfig().getDatabaseConnectionSet().iterator());\n            dBPoolUtil.initPool();\n        }\n    }\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id) {\n        return clientIdentifier.findFirstClientById(id);\n    }\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient() {\n        return clientIdentifier.findAllClient();\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern) {\n        return clientIdentifier.findAllClientById(pattern);\n    }\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key) {\n        return clientIdentifier.findClientByKey(key);\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern) {\n        return clientIdentifier.findAllClientByKey(pattern);\n    }\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted() {\n        setSkipValidation(true);\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation() {\n        return skipValidation;\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation) {\n        skipValidation = validation;\n    }\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging) {\n        this.communicationLogging = communicationLogging;\n    }\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging() {\n        return communicationLogging;\n    }\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass) {\n        if (securityManagerClass != null)\n            this.securityManagerClass = securityManagerClass;\n    }\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass() {\n        return securityManagerClass;\n    }\n\n    public SecurityManager getSecurityManager() throws AppException {\n        if (getSecurityManagerClass() == null)\n            return null;\n        SecurityManager sm = null;\n        try {\n            sm = (SecurityManager) getClass(getSecurityManagerClass(), true).newInstance();\n        } catch (ClassNotFoundException e) {\n            throw new AppException(e.getMessage());\n        } catch (InstantiationException e) {\n            throw new AppException(e.getMessage());\n        } catch (IllegalAccessException e) {\n            throw new AppException(e.getMessage());\n        }\n        return sm;\n    }\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig) {\n        this.accessConstraintConfig = accessConstraintConfig;\n    }\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig() {\n        return accessConstraintConfig;\n    }\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader) {\n        this.classLoader = classLoader;\n        Thread.currentThread().setContextClassLoader(classLoader);\n    }\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader() {\n        return classLoader;\n    }\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException {\n        if (name == null)\n            throw new IllegalArgumentException(\"Class name can't be null!\");\n        logger.log(Level.FINEST, \"Class: {0}, reload: {1}\", new Object[] { name, reload });\n        if (reload == true && classLoader != null) {\n            return classLoader.loadClass(name);\n        } else if (reload == true && classLoader == null && this.getClass().getClassLoader() != null) {\n            return this.getClass().getClassLoader().loadClass(name);\n        } else if (reload == false && classLoader != null) {\n            return Class.forName(name, true, classLoader);\n        } else /*if(reload==false && classLoader==null)*/\n        {\n            return Class.forName(name, true, this.getClass().getClassLoader());\n        }\n    }\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath) {\n        this.applicationJarPath = applicationJarPath;\n    }\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath() {\n        return applicationJarPath;\n    }\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks) {\n        this.serverHooks = serverHooks;\n    }\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks() {\n        if (serverHooks == null)\n            serverHooks = new ServerHooks();\n        return serverHooks;\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses() {\n        if (getServerHooks() == null)\n            return;\n        listOfServerHooks = new ArrayList();\n        ServerHook serverHook = null;\n        String serverHookClassName = null;\n        Class serverHookClass = null;\n        //add system hooks\n        serverHook = new GhostSocketReaper();\n        serverHook.initHook(QuickServer.this);\n        listOfServerHooks.add(serverHook);\n        ghostSocketReaper = (GhostSocketReaper) serverHook;\n        //add user hooks if any\n        Iterator iterator = getServerHooks().iterator();\n        while (iterator.hasNext()) {\n            serverHookClassName = (String) iterator.next();\n            try {\n                serverHookClass = getClass(serverHookClassName, true);\n                serverHook = (ServerHook) serverHookClass.newInstance();\n                serverHook.initHook(QuickServer.this);\n                listOfServerHooks.add(serverHook);\n                logger.log(Level.INFO, \"Loaded server hook: {0}\", serverHookClassName);\n                logger.log(Level.FINE, \"Server hook info: {0}\", serverHook.info());\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Could not load server hook [{0}]: {1}\", new Object[] { serverHookClassName, e });\n                logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            }\n        }\n        //end of while\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event) {\n        if (listOfServerHooks == null) {\n            logger.warning(\"listOfServerHooks was null!\");\n            return;\n        }\n        ServerHook serverHook = null;\n        boolean result = false;\n        Iterator iterator = listOfServerHooks.iterator();\n        String hooktype = \"UNKNOWN\";\n        switch(event) {\n            case ServerHook.PRE_STARTUP:\n                hooktype = \"PRE_STARTUP\";\n                break;\n            case ServerHook.POST_STARTUP:\n                hooktype = \"POST_STARTUP\";\n                break;\n            case ServerHook.PRE_SHUTDOWN:\n                hooktype = \"PRE_SHUTDOWN\";\n                break;\n            case ServerHook.POST_SHUTDOWN:\n                hooktype = \"POST_SHUTDOWN\";\n                break;\n        }\n        while (iterator.hasNext()) {\n            serverHook = (ServerHook) iterator.next();\n            try {\n                result = serverHook.handleEvent(event);\n            } catch (Exception e) {\n                result = false;\n                logger.log(Level.WARNING, \"Error invoking {0} hook [{1}]: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), e.getMessage() });\n            }\n            logger.log(Level.FINE, \"Invoked {0} hook [{1}] was: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), result });\n        }\n    }\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone() {\n        Object object = null;\n        try {\n            object = super.clone();\n            QuickServer _qs = (QuickServer) object;\n            _qs.setQSAdminServer(new QSAdminServer(_qs));\n        } catch (CloneNotSupportedException e) {\n            //should not happ\n            logger.log(Level.WARNING, \"Error cloning : {0}\", e);\n        }\n        return object;\n    }\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure) {\n        this.secure = secure;\n    }\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure() {\n        if (secure == null)\n            secure = new Secure();\n        return secure;\n    }\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure() {\n        return runningSecure;\n    }\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure) {\n        this.runningSecure = runningSecure;\n    }\n\n    private File makeAbsoluteToConfig(String fileName) {\n        Assertion.affirm(fileName != null, \"FileName can't be null\");\n        return ConfigReader.makeAbsoluteToConfig(fileName, getConfig());\n    }\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException {\n        server = null;\n        logger.log(Level.FINEST, \"Binding {0} to IP: {1}\", new Object[] { getName(), getBindAddr() });\n        InetSocketAddress bindAddress = new InetSocketAddress(getBindAddr(), getPort());\n        try {\n            NetworkInterface ni = NetworkInterface.getByInetAddress(getBindAddr());\n            if (ni != null) {\n                logger.fine(\"NetworkInterface: \" + ni);\n            }\n        } catch (Exception igrnore) {\n            /*ignore*/\n        } catch (Error igrnore) {\n            /*ignore*/\n        }\n        if (getSecure().isEnable() == false) {\n            logger.log(Level.FINE, \"Making a normal ServerSocket for {0}\", getName());\n            setRunningSecure(false);\n            if (getBlockingMode() == false) {\n                //for non-blocking\n                serverSocketChannel = ServerSocketChannel.open();\n                server = serverSocketChannel.socket();\n                server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n            } else {\n                //for blocking\n                server = new ServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n            }\n        } else {\n            try {\n                logger.log(Level.FINE, \"Making a secure ServerSocket for {0}\", getName());\n                getSSLContext();\n                setRunningSecure(true);\n                if (getBlockingMode() == false) {\n                    logger.log(Level.FINE, \"Making a secure ServerSocketChannel for {0}\", getName());\n                    //for non-blocking\n                    serverSocketChannel = ServerSocketChannel.open();\n                    server = serverSocketChannel.socket();\n                    server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n                } else {\n                    ServerSocketFactory ssf = getSSLContext().getServerSocketFactory();\n                    SSLServerSocket serversocket = (SSLServerSocket) ssf.createServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n                    serversocket.setNeedClientAuth(secure.isClientAuthEnable());\n                    setRunningSecure(true);\n                    secureStoreManager.logSSLServerSocketInfo(serversocket);\n                    server = serversocket;\n                    serverSocketChannel = server.getChannel();\n                    if (serverSocketChannel == null && getBlockingMode() == false) {\n                        logger.warning(\"Secure Server does not support Channel! So will run in blocking mode.\");\n                        blockingMode = false;\n                    }\n                }\n                //blocking\n            } catch (NoSuchAlgorithmException e) {\n                logger.log(Level.WARNING, \"NoSuchAlgorithmException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            } catch (KeyManagementException e) {\n                logger.log(Level.WARNING, \"KeyManagementException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            }\n        }\n        server.setReuseAddress(true);\n        int connectionTime = 0;\n        int latency = 0;\n        int bandwidth = 0;\n        connectionTime = getBasicConfig().getAdvancedSettings().getPerformancePreferencesConnectionTime();\n        latency = getBasicConfig().getAdvancedSettings().getPerformancePreferencesLatency();\n        bandwidth = getBasicConfig().getAdvancedSettings().getPerformancePreferencesBandwidth();\n        logger.log(Level.FINE, \"getPerformancePreferencesConnectionTime : {0}\", connectionTime);\n        logger.log(Level.FINE, \"getPerformancePreferencesLatency : {0}\", latency);\n        logger.log(Level.FINE, \"getPerformancePreferencesBandwidth : {0}\", bandwidth);\n        server.setPerformancePreferences(connectionTime, latency, bandwidth);\n        int clientSocketReceiveBufferSize = getBasicConfig().getAdvancedSettings().getClientSocketReceiveBufferSize();\n        if (clientSocketReceiveBufferSize > 0) {\n            logger.log(Level.FINE, \"clientSocketReceiveBufferSize: {0}\", clientSocketReceiveBufferSize);\n            server.setReceiveBufferSize(clientSocketReceiveBufferSize);\n        }\n        if (getBlockingMode() == false) {\n            logger.log(Level.FINE, \"Server Mode {0} - Non Blocking\", getName());\n            if (selector == null || selector.isOpen() == false) {\n                logger.finest(\"Opening new selector\");\n                selector = Selector.open();\n            } else {\n                logger.log(Level.FINEST, \"Reusing selector: {0}\", selector);\n            }\n            serverSocketChannel.configureBlocking(false);\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n            selector.wakeup();\n        } else {\n            logger.log(Level.FINE, \"Server Mode {0} - Blocking\", getName());\n        }\n    }\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception {\n        Assertion.affirm(basicConfig != null, \"BasicServerConfig can't be null\");\n        this.basicConfig = basicConfig;\n    }\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig() {\n        return basicConfig;\n    }\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException {\n        if (getSecure().isLoad() == false) {\n            throw new IllegalStateException(\"Secure setting is not yet enabled for loading!\");\n        }\n        logger.info(\"Loading Secure Context..\");\n        km = null;\n        tm = null;\n        try {\n            String ssManager = \"org.quickserver.security.SecureStoreManager\";\n            if (getSecure().getSecureStore() != null)\n                ssManager = getSecure().getSecureStore().getSecureStoreManager();\n            Class secureStoreManagerClass = getClass(ssManager, true);\n            secureStoreManager = (SecureStoreManager) secureStoreManagerClass.newInstance();\n            km = secureStoreManager.loadKeyManagers(getConfig());\n            logger.fine(\"KeyManager got\");\n            tm = secureStoreManager.loadTrustManagers(getConfig());\n            logger.fine(\"TrustManager got\");\n            sslc = secureStoreManager.getSSLContext(getConfig().getSecure().getProtocol());\n            sslc.init(km, tm, null);\n            logger.fine(\"SSLContext loaded\");\n        } catch (KeyStoreException e) {\n            logger.warning(\"KeyStoreException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchAlgorithmException e) {\n            logger.warning(\"NoSuchAlgorithmException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchProviderException e) {\n            logger.warning(\"NoSuchProviderException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (UnrecoverableKeyException e) {\n            logger.warning(\"UnrecoverableKeyException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (CertificateException e) {\n            logger.warning(\"CertificateException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (KeyManagementException e) {\n            logger.warning(\"KeyManagementException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (GeneralSecurityException e) {\n            logger.warning(\"GeneralSecurityException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (ClassNotFoundException e) {\n            logger.warning(\"ClassNotFoundException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (InstantiationException e) {\n            logger.warning(\"InstantiationException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (IllegalAccessException e) {\n            logger.warning(\"IllegalAccessException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        return getSSLContext(null);\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        if (protocol != null && secureStoreManager != null) {\n            SSLContext _sslc = secureStoreManager.getSSLContext(protocol);\n            _sslc.init(km, tm, null);\n            return _sslc;\n        }\n        return sslc;\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext());\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext(protocol));\n    }\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler) {\n        clientBinaryHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler() {\n        return clientBinaryHandlerString;\n    }\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector) {\n        this.selector = selector;\n    }\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector() {\n        return selector;\n    }\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception {\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        //long stime = System.currentTimeMillis();\n        //long etime = System.currentTimeMillis();\n        while (true) {\n            //etime = System.currentTimeMillis();\n            //System.out.println(\"Time Taken: \"+(etime-stime));\n            client = server.accept();\n            //stime = System.currentTimeMillis();\n            if (linger < 0) {\n                client.setSoLinger(false, 0);\n            } else {\n                client.setSoLinger(true, linger);\n            }\n            client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                //low delay=10\n                client.setTrafficClass(socketTrafficClass);\n            }\n            logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n            }\n            if (stopServer) {\n                //Client connected when server was about to be shutdown.\n                try {\n                    client.close();\n                } catch (Exception e) {\n                }\n                break;\n            }\n            if (checkAccessConstraint(client) == false) {\n                continue;\n            }\n            //Check if max connection has reached\n            if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                theClient.setClientEvent(ClientEvent.MAX_CON_BLOCKING);\n            } else {\n                theClient.setClientEvent(ClientEvent.RUN_BLOCKING);\n            }\n            theClient.setTrusted(getSkipValidation());\n            theClient.setSocket(client);\n            //mostly null\n            theClient.setSocketChannel(client.getChannel());\n            if (clientDataClass != null) {\n                if (getClientDataPool() == null) {\n                    clientData = (ClientData) clientDataClass.newInstance();\n                } else {\n                    clientData = (ClientData) getClientDataPool().borrowObject();\n                }\n                theClient.setClientData(clientData);\n            }\n            try {\n                _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                _chPolled.handleClient(theClient);\n            } catch (java.util.NoSuchElementException nsee) {\n                logger.warning(\"Could not borrow ClientHandler from pool. Error: \" + nsee);\n                logger.warning(\"Closing Socket [\" + client + \"] since no ClientHandler available.\");\n                client.close();\n            }\n            if (_chPolled != null) {\n                try {\n                    getClientPool().addClient(_chPolled, true);\n                } catch (java.util.NoSuchElementException nsee) {\n                    logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                    //logger.warning(\"Closing Socket [\"+client+\"] since no Thread available.\");\n                    //client.close();\n                    //returnClientHandlerToPool(_chPolled);\n                }\n                _chPolled = null;\n            }\n            client = null;\n            //reset it back\n            setSkipValidation(false);\n        }\n        //end of loop\n    }\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception {\n        int selectCount = 0;\n        Iterator iterator = null;\n        SelectionKey key = null;\n        ServerSocketChannel serverChannel = null;\n        SocketChannel socketChannel = null;\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        boolean stopServerProcessed = false;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        registerChannelRequestMap = new HashMap();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        while (true) {\n            selectCount = selector.select(500);\n            //selectCount = selector.select();//for testing\n            //check for any pending registerChannel req.\n            synchronized (registerChannelRequestMap) {\n                if (registerChannelRequestMap.size() > 0) {\n                    RegisterChannelRequest req = null;\n                    Object hashkey = null;\n                    iterator = registerChannelRequestMap.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        hashkey = iterator.next();\n                        req = (RegisterChannelRequest) registerChannelRequestMap.get(hashkey);\n                        req.register(getSelector());\n                    }\n                    iterator = null;\n                    registerChannelRequestMap.clear();\n                }\n                //if\n            }\n            //sync\n            if (stopServer == true && stopServerProcessed == false) {\n                logger.warning(\"Closing \" + getName());\n                serverSocketChannel.close();\n                stopServerProcessed = true;\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.warning(\"Closed \" + getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n            if (stopServer == false && stopServerProcessed == true) {\n                logger.finest(\"Server must have re-started.. will break\");\n                break;\n            }\n            if (selectCount == 0 && stopServerProcessed == true) {\n                java.util.Set keyset = selector.keys();\n                if (keyset.isEmpty() == true && getClientCount() <= 0) {\n                    break;\n                } else {\n                    continue;\n                }\n            } else if (selectCount == 0) {\n                continue;\n            }\n            iterator = selector.selectedKeys().iterator();\n            while (iterator.hasNext()) {\n                key = (SelectionKey) iterator.next();\n                if (key.isValid() == false) {\n                    iterator.remove();\n                    continue;\n                }\n                if (key.isAcceptable() && stopServer == false) {\n                    logger.finest(\"Key is Acceptable\");\n                    serverChannel = (ServerSocketChannel) key.channel();\n                    socketChannel = serverChannel.accept();\n                    if (socketChannel == null) {\n                        iterator.remove();\n                        continue;\n                    }\n                    client = socketChannel.socket();\n                    if (linger < 0) {\n                        client.setSoLinger(false, 0);\n                    } else {\n                        client.setSoLinger(true, linger);\n                    }\n                    client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                        //low delay=10\n                        client.setTrafficClass(socketTrafficClass);\n                    }\n                    logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                        client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                        logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n                    }\n                    if (checkAccessConstraint(client) == false) {\n                        iterator.remove();\n                        continue;\n                    }\n                    socketChannel.configureBlocking(false);\n                    theClient.setTrusted(getSkipValidation());\n                    theClient.setSocket(socketChannel.socket());\n                    theClient.setSocketChannel(socketChannel);\n                    if (clientDataClass != null) {\n                        if (getClientDataPool() == null) {\n                            clientData = (ClientData) clientDataClass.newInstance();\n                        } else {\n                            //borrow a object from pool\n                            clientData = (ClientData) getClientDataPool().borrowObject();\n                        }\n                        theClient.setClientData(clientData);\n                    }\n                    //Check if max connection has reached\n                    if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                        theClient.setClientEvent(ClientEvent.MAX_CON);\n                    } else {\n                        theClient.setClientEvent(ClientEvent.ACCEPT);\n                    }\n                    try {\n                        _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                        logger.finest(\"Asking \" + _chPolled.getName() + \" to handle.\");\n                        _chPolled.handleClient(theClient);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.warning(\"Could not borrow ClientHandler Object from pool. Error: \" + nsee);\n                        logger.warning(\"Closing SocketChannel [\" + serverChannel.socket() + \"] since no ClientHandler available.\");\n                        socketChannel.close();\n                    }\n                    if (_chPolled != null) {\n                        try {\n                            getClientPool().addClient(_chPolled, true);\n                        } catch (java.util.NoSuchElementException nsee) {\n                            logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                            //logger.warning(\"Closing SocketChannel [\"+serverChannel.socket()+\"] since no Thread available.\");\n                            //socketChannel.close();\n                            //returnClientHandlerToPool(_chPolled);\n                        }\n                        _chPolled = null;\n                    }\n                    socketChannel = null;\n                    client = null;\n                    //reset it back\n                    setSkipValidation(false);\n                } else if (key.isValid() && key.isReadable()) {\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Readable, removing OP_READ from interestOps for \" + _ch.getName());\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_READ));\n                        _ch.addEvent(ClientEvent.READ);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.READ);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (key.isValid() && key.isWritable()) {\n                    if (getClientPool().shouldNioWriteHappen() == false) {\n                        //no need to remove the key\n                        continue;\n                    }\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Writable, removing OP_WRITE from interestOps for \" + _ch.getName());\n                        //remove OP_WRITE from interest set\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));\n                        _ch.addEvent(ClientEvent.WRITE);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.WRITE);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (stopServer == true && key.isAcceptable()) {\n                    //we will not accept this key\n                    //reset it back\n                    setSkipValidation(false);\n                } else {\n                    logger.warning(\"Unknown key got in SelectionKey: \" + key);\n                }\n                //Remove key\n                iterator.remove();\n                Thread.yield();\n            }\n            //end of iterator\n            iterator = null;\n        }\n        //end of loop\n    }\n\n    private boolean checkAccessConstraint(Socket socket) {\n        try {\n            if (getAccessConstraintConfig() != null) {\n                getAccessConstraintConfig().checkAccept(socket);\n            }\n            return true;\n        } catch (SecurityException se) {\n            logger.warning(\"SecurityException occurred accepting connection : \" + se.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException {\n        if (getSelector() == null) {\n            throw new IllegalStateException(\"Selector is not open!\");\n        }\n        if (channel == null) {\n            throw new IllegalArgumentException(\"Can't register a null channel!\");\n        }\n        if (channel.isConnected() == false) {\n            throw new ClosedChannelException();\n        }\n        RegisterChannelRequest req = new RegisterChannelRequest(channel, ops, att);\n        RegisterChannelRequest reqOld = null;\n        synchronized (registerChannelRequestMap) {\n            reqOld = (RegisterChannelRequest) registerChannelRequestMap.get(channel);\n            if (reqOld == null) {\n                registerChannelRequestMap.put(channel, req);\n                getSelector().wakeup();\n                return true;\n            } else {\n                if (reqOld.equals(req) == false) {\n                    reqOld.setOps(reqOld.getOps() | req.getOps());\n                    reqOld.setAtt(req.getAtt());\n                    return true;\n                }\n                return false;\n            }\n        }\n        /*\n\t\tlogger.warning(\"Before register...\");\n\t\tchannel.register(getSelector(), ops, att);\n\t\tlogger.warning(\"Before wakeup and after register...\");\n\t\tgetSelector().wakeup();\n\t\tlogger.warning(\"After wakeup...\");\n\t\t*/\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig) {\n        logger.finer(\"Creating ByteBufferPool pool\");\n        int bufferSize = getBasicConfig().getAdvancedSettings().getByteBufferSize();\n        boolean useDirectByteBuffer = getBasicConfig().getAdvancedSettings().getUseDirectByteBuffer();\n        PoolableObjectFactory factory = new ByteBufferObjectFactory(bufferSize, useDirectByteBuffer);\n        byteBufferPool = poolManager.makeByteBufferPool(factory, opConfig);\n        poolManager.initPool(byteBufferPool, opConfig);\n    }\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool() {\n        return byteBufferPool;\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientThread pool\");\n        ThreadObjectFactory factory = new ThreadObjectFactory();\n        ObjectPool objectPool = poolManager.makeClientPool(factory, opConfig);\n        pool = new ClientPool(makeQSObjectPool(objectPool), opConfig);\n        factory.setClientPool(pool);\n        pool.setMaxThreadsForNioWrite(getBasicConfig().getAdvancedSettings().getMaxThreadsForNioWrite());\n        poolManager.initPool(objectPool, opConfig);\n    }\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler) {\n        clientWriteHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler() {\n        return clientWriteHandlerString;\n    }\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime() {\n        return lastStartTime;\n    }\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag) {\n        org.quickserver.util.io.ByteBufferOutputStream.setDebug(flag);\n        org.quickserver.util.io.ByteBufferInputStream.setDebug(flag);\n    }\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier() {\n        return clientIdentifier;\n    }\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception {\n        return (QSObjectPool) qsObjectPoolMaker.getQSObjectPool(objectPool);\n    }\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode() {\n        return blockingMode;\n    }\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception {\n        if (clientCommandHandlerString == null && clientEventHandlerString == null) {\n            logger.severe(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n            throw new AppException(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n        }\n        clientCommandHandler = null;\n        if (clientCommandHandlerString != null) {\n            logger.finest(\"Loading ClientCommandHandler class..\");\n            Class clientCommandHandlerClass = getClass(clientCommandHandlerString, true);\n            clientCommandHandler = (ClientCommandHandler) clientCommandHandlerClass.newInstance();\n        }\n        boolean setClientCommandHandlerLookup = false;\n        clientEventHandler = null;\n        if (clientEventHandlerString == null) {\n            clientEventHandlerString = \"org.quickserver.net.server.impl.DefaultClientEventHandler\";\n            setClientCommandHandlerLookup = true;\n        }\n        logger.finest(\"Loading ClientEventHandler class..\");\n        if (clientEventHandlerString.equals(clientCommandHandlerString) && ClientEventHandler.class.isInstance(clientCommandHandler)) {\n            clientEventHandler = (ClientEventHandler) clientCommandHandler;\n        } else {\n            clientEventHandler = (ClientEventHandler) getClass(clientEventHandlerString, true).newInstance();\n            if (setClientCommandHandlerLookup) {\n                ((DefaultClientEventHandler) clientEventHandler).setClientCommandHandler(clientCommandHandler);\n            }\n        }\n        clientExtendedEventHandler = null;\n        if (clientExtendedEventHandlerString != null) {\n            logger.finest(\"Loading ClientExtendedEventHandler class..\");\n            if (clientExtendedEventHandlerString.equals(clientCommandHandlerString) && ClientExtendedEventHandler.class.isInstance(clientCommandHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientCommandHandler;\n            } else if (clientExtendedEventHandlerString.equals(clientEventHandlerString) && ClientExtendedEventHandler.class.isInstance(clientEventHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientEventHandler;\n            } else {\n                Class clientExtendedEventHandlerClass = getClass(clientExtendedEventHandlerString, true);\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientExtendedEventHandlerClass.newInstance();\n            }\n        }\n        clientObjectHandler = null;\n        if (clientObjectHandlerString != null) {\n            logger.finest(\"Loading ClientObjectHandler class..\");\n            if (clientObjectHandlerString.equals(clientCommandHandlerString) && ClientObjectHandler.class.isInstance(clientCommandHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientCommandHandler;\n            } else if (clientObjectHandlerString.equals(clientEventHandlerString) && ClientObjectHandler.class.isInstance(clientEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientEventHandler;\n            } else if (clientObjectHandlerString.equals(clientExtendedEventHandlerString) && ClientObjectHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientExtendedEventHandler;\n            } else {\n                clientObjectHandler = (ClientObjectHandler) getClass(clientObjectHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientBinaryHandler = null;\n        if (clientBinaryHandlerString != null) {\n            logger.finest(\"Loading ClientBinaryHandler class..\");\n            if (clientBinaryHandlerString.equals(clientCommandHandlerString) && ClientBinaryHandler.class.isInstance(clientCommandHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientCommandHandler;\n            } else if (clientBinaryHandlerString.equals(clientEventHandlerString) && ClientBinaryHandler.class.isInstance(clientEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientExtendedEventHandlerString) && ClientBinaryHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientExtendedEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientObjectHandlerString) && ClientBinaryHandler.class.isInstance(clientObjectHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientObjectHandler;\n            } else {\n                clientBinaryHandler = (ClientBinaryHandler) getClass(clientBinaryHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientWriteHandler = null;\n        if (clientWriteHandlerString != null) {\n            logger.finest(\"Loading ClientWriteHandler class..\");\n            if (clientWriteHandlerString.equals(clientCommandHandlerString) && ClientWriteHandler.class.isInstance(clientCommandHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientCommandHandler;\n            } else if (clientWriteHandlerString.equals(clientEventHandlerString) && ClientWriteHandler.class.isInstance(clientEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientEventHandler;\n            } else if (clientWriteHandlerString.equals(clientExtendedEventHandlerString) && ClientWriteHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientExtendedEventHandler;\n            } else if (clientWriteHandlerString.equals(clientObjectHandlerString) && ClientWriteHandler.class.isInstance(clientObjectHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientObjectHandler;\n            } else if (clientWriteHandlerString.equals(clientBinaryHandlerString) && ClientWriteHandler.class.isInstance(clientBinaryHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientBinaryHandler;\n            } else {\n                clientWriteHandler = (ClientWriteHandler) getClass(clientWriteHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        Class authenticatorClass = null;\n        if (clientAuthenticationHandlerString != null) {\n            logger.finest(\"Loading ClientAuthenticationHandler class..\");\n            authenticatorClass = getClass(clientAuthenticationHandlerString, true);\n        }\n        if (authenticatorClass != null) {\n            Object obj = authenticatorClass.newInstance();\n            if (ClientAuthenticationHandler.class.isInstance(obj))\n                clientAuthenticationHandler = (ClientAuthenticationHandler) obj;\n            else\n                authenticator = (Authenticator) obj;\n        }\n        clientDataClass = null;\n        if (clientDataString != null) {\n            logger.finest(\"Loading ClientData class..\");\n            clientDataClass = getClass(clientDataString, true);\n        }\n        Assertion.affirm(clientEventHandler != null, \"ClientEventHandler was not loaded!\");\n    }\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler) {\n        clientEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler() {\n        return clientEventHandlerString;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException {\n        if (dataType == DataType.IN)\n            this.defaultDataModeIN = dataMode;\n        if (dataType == DataType.OUT)\n            this.defaultDataModeOUT = dataMode;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException {\n        defaultDataModeIN = defaultDataMode.getDataMode(DataType.IN);\n        defaultDataModeOUT = defaultDataMode.getDataMode(DataType.OUT);\n        ;\n    }\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType) {\n        if (dataType == DataType.IN)\n            return defaultDataModeIN;\n        if (dataType == DataType.OUT)\n            return defaultDataModeOUT;\n        else\n            throw new IllegalArgumentException(\"Unknown DataType: \" + dataType);\n    }\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler) {\n        clientExtendedEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler() {\n        return clientExtendedEventHandlerString;\n    }\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception {\n        if (getApplicationJarPath() != null && getClassLoader() == null) {\n            setClassLoader(ClassUtil.getClassLoader(getApplicationJarPath()));\n            //update qsadmin to use the same\n            if (adminServer != null) {\n                adminServer.getServer().setClassLoader(getClassLoader());\n            }\n        }\n    }\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID() {\n        return pid;\n    }\n\n    public boolean isRawCommunicationLogging() {\n        return rawCommunicationLogging;\n    }\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging) {\n        this.rawCommunicationLogging = rawCommunicationLogging;\n    }\n\n    public int getRawCommunicationMaxLength() {\n        return rawCommunicationMaxLength;\n    }\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength) {\n        this.rawCommunicationMaxLength = rawCommunicationMaxLength;\n    }\n}\n",
        "test_prompt": "// QuickServer_0Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#getVersion()} method.\n*/\nclass QuickServer_0Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// QuickServer_1Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#getVersionNo()} method.\n*/\nclass QuickServer_1Test {\n}"
            }
        ],
        "id": "db2f4e63-cd72-4301-a6b1-0a734210c6ef",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_1Test.java",
        "original_code": "// QuickServer.java\n/*\n * This file is part of the QuickServer library \n * Copyright (C) QuickServer.org\n *\n * Use, modification, copying and distribution of this software is subject to\n * the terms and conditions of the GNU Lesser General Public License. \n * You should have received a copy of the GNU LGP License along with this \n * library; if not, you can download a copy from <http://www.quickserver.org/>.\n *\n * For questions, suggestions, bug-reports, enhancement-requests etc.\n * visit http://www.quickserver.org\n *\n */\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n *  Main class of QuickServer library. This class is used to create\n *  multi client servers quickly.\n *  <p>\n *  Ones a client is connected, it creates {@link ClientHandler} object,\n *  which is run using any thread available from the pool of threads\n *  maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n *  handles the client. <br/>\n *  QuickServer divides the application logic of its developer over eight\n *  class, <br>\n *  \t<ul>\n * \t\t<li>ClientEventHandler<br>\n *  \t\t   &nbsp;Handles client events [Optional Class].\n *  \t\t<li>ClientCommandHandler [#]<br>\n *  \t\t   &nbsp;Handles client character/string commands.\n *  \t\t<li>ClientObjectHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - Object commands.\n * \t\t<li>ClientBinaryHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - binary data.\n * \t\t<li>ClientWriteHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n *  \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n *  \t\t\t&nbsp;Used to Authencatet a client.\n *  \t\t<li>ClientData [Optional Class]<br>\n *  \t\t\t&nbsp;Client data carrier (support class)\n * \t\t<li>ClientExtendedEventHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles extended client events.\n *  \t</ul>\n *\n *  [#] = Any one of these have to be set based on default DataMode for input.\n *  The default DataMode for input is String so if not changes you will\n *  have to set ClientCommandHandler.\n *  </p>\n *  <p>\n *   Eg:\n *  <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n *  @version 1.4.8\n *  @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //Some variable are not initialised to any value because the\n    //default java value was desired initial value.\n    //'dev ' = development build not yet final\n    //'beta' = test build all features\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n        if (System.getProperty(\"org.quickserver.useOSLineSeparator\") != null && System.getProperty(\"org.quickserver.useOSLineSeparator\").equals(\"true\")) {\n            NEW_LINE = System.getProperty(\"line.separator\");\n        } else {\n            NEW_LINE = \"\\r\\n\";\n        }\n        String _pid = ManagementFactory.getRuntimeMXBean().getName();\n        int i = _pid.indexOf(\"@\");\n        pid = _pid.substring(0, i);\n        System.out.print(\"Loading QuickServer v\" + getVersion() + \" [PID:\" + pid + \"]\");\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //--v1.2\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //for Service interface\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n        System.out.println(\" Done\");\n        //should be commented if not a patch release\n        //System.out.println(\"[Includes patch(#): t=152&p=532]\");\n        //should be commented if not a dev release\n        //System.out.println(\"[Dev Build Date: Saturday, October 29, 2005]\");\n        logger.log(Level.FINE, \"PID: {0}\", pid);\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion() {\n        return VER;\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo() {\n        return getVersionNo(VER);\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver) {\n        //String ver = getVersion();\n        float version = 0;\n        //check if beta\n        int i = ver.indexOf(\" \");\n        if (i == -1)\n            i = ver.length();\n        ver = ver.substring(0, i);\n        //check for sub version\n        i = ver.indexOf(\".\");\n        if (i != -1) {\n            int j = ver.indexOf(\".\", i);\n            if (j != -1) {\n                ver = ver.substring(0, i) + \".\" + MyString.replaceAll(ver.substring(i + 1), \".\", \"\");\n            }\n        }\n        try {\n            version = Float.parseFloat(ver);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Corrupt QuickServer\");\n        }\n        return version;\n    }\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine() {\n        return NEW_LINE;\n    }\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString() {\n        return serverName + \" : \" + getPort();\n    }\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n        setClientCommandHandler(commandHandler);\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n        //send to another constructor\n        this(commandHandler);\n        setPort(port);\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException {\n        logger.log(Level.FINE, \"Starting {0}\", getName());\n        if (isClosed() == false) {\n            logger.log(Level.WARNING, \"Server {0} already running.\", getName());\n            throw new AppException(\"Server \" + getName() + \" already running.\");\n        }\n        blockingMode = getBasicConfig().getServerMode().getBlocking();\n        if (getSecure().isEnable() && blockingMode == false) {\n            //TODO we need to fix this..\n            logger.warning(\"QuickServer does not support secure servers under non-blocking mode! So will run in blocking mode.\");\n            blockingMode = true;\n            getBasicConfig().getServerMode().setBlocking(blockingMode);\n        }\n        if (serverBanner == null) {\n            serverBanner = \"\\n-------------------------------\" + \"\\n Name : \" + getName() + \"\\n Port : \" + getPort() + \"\\n-------------------------------\\n\";\n            logger.finest(\"Default Server Banner Generated\");\n        }\n        try {\n            loadApplicationClasses();\n            //load class from Advanced Settings\n            Class clientIdentifierClass = getClass(getBasicConfig().getAdvancedSettings().getClientIdentifier(), true);\n            clientIdentifier = (ClientIdentifier) clientIdentifierClass.newInstance();\n            clientIdentifier.setQuickServer(QuickServer.this);\n            //load class from ObjectPoolConfig\n            Class poolManagerClass = getClass(getBasicConfig().getObjectPoolConfig().getPoolManager(), true);\n            poolManager = (PoolManager) poolManagerClass.newInstance();\n            //load class QSObjectPoolMaker\n            Class qsObjectPoolMakerClass = getClass(getBasicConfig().getAdvancedSettings().getQSObjectPoolMaker(), true);\n            qsObjectPoolMaker = (QSObjectPoolMaker) qsObjectPoolMakerClass.newInstance();\n            loadServerHooksClasses();\n            processServerHooks(ServerHook.PRE_STARTUP);\n            if (getSecure().isLoad() == true)\n                //v1.4.0\n                loadSSLContext();\n            loadBusinessLogic();\n        } catch (ClassNotFoundException e) {\n            logger.log(Level.SEVERE, \"Could not load class/s: \" + e, e);\n            throw new AppException(\"Could not load class/s : \" + e);\n        } catch (InstantiationException e) {\n            logger.log(Level.SEVERE, \"Could not instantiate class/s: \" + e, e);\n            throw new AppException(\"Could not instantiate class/s: \" + e);\n        } catch (IllegalAccessException e) {\n            logger.log(Level.SEVERE, \"Illegal access to class/s: \" + e, e);\n            throw new AppException(\"Illegal access to class/s: \" + e);\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, \"IOException: \" + e, e);\n            throw new AppException(\"IOException: \" + e);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Exception: \" + e, e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Exception : \" + e);\n        }\n        //v1.3.3\n        if (getSecurityManagerClass() != null) {\n            System.setSecurityManager(getSecurityManager());\n        }\n        setServiceState(Service.INIT);\n        t = new Thread(this, \"QuickServer - \" + getName());\n        t.start();\n        do {\n            Thread.yield();\n        } while (getServiceState() == Service.INIT);\n        if (getServiceState() != Service.RUNNING) {\n            if (exceptionInRun != null)\n                throw new AppException(\"Could not start server \" + getName() + \"! Details: \" + exceptionInRun);\n            else\n                throw new AppException(\"Could not start server \" + getName());\n        }\n        lastStartTime = new java.util.Date();\n        logger.log(Level.FINE, \"Started {0}, Date: {1}\", new Object[] { getName(), lastStartTime });\n    }\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException {\n        processServerHooks(ServerHook.PRE_SHUTDOWN);\n        logger.log(Level.WARNING, \"Stopping {0}\", getName());\n        stopServer = true;\n        Socket death = null;\n        if (isClosed() == true) {\n            logger.log(Level.WARNING, \"Server {0} is not running!\", getName());\n            throw new AppException(\"Server \" + getName() + \" is not running!\");\n        }\n        try {\n            if (getBlockingMode() == true) {\n                if (getSecure().isEnable() == false) {\n                    death = new Socket(server.getInetAddress(), server.getLocalPort());\n                    death.getInputStream().read();\n                    death.close();\n                } else {\n                    death = getSSLSocketFactory().createSocket(server.getInetAddress(), server.getLocalPort());\n                    Thread.sleep(100);\n                    death.close();\n                }\n            }\n            if (serverSocketChannel != null) {\n                serverSocketChannel.close();\n            }\n        } catch (IOException e) {\n            logger.log(Level.FINE, \"IOError stopping {0}: {1}\", new Object[] { getName(), e });\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error stopping {0}: {1}\", new Object[] { getName(), e });\n            throw new AppException(\"Error in stopServer \" + getName() + \": \" + e);\n        }\n        for (int i = 0; getServiceState() != Service.STOPPED; i++) {\n            try {\n                Thread.sleep(60);\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error waiting for {0} to fully stop. Error: {1}\", new Object[] { getName(), e });\n            }\n            if (i > 1000) {\n                logger.severe(\"Server was not stopped even after 10sec.. will terminate now.\");\n                System.exit(-1);\n            }\n        }\n        if (adminServer == null || getQSAdminServer().getServer() != this) {\n            //so this is not qsadmin\n            setClassLoader(null);\n        }\n        logger.log(Level.INFO, \"Stopped {0}\", getName());\n    }\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException {\n        stopServer();\n        startServer();\n    }\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName() {\n        return serverName;\n    }\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name) {\n        serverName = name;\n        logger.log(Level.FINEST, \"Set to : {0}\", name);\n    }\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner() {\n        return serverBanner;\n    }\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner) {\n        serverBanner = banner;\n        logger.log(Level.FINEST, \"Set to : {0}\", banner);\n    }\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port) {\n        if (port < 0) {\n            throw new IllegalArgumentException(\"Port number can not be less than 0!\");\n        }\n        serverPort = port;\n        logger.log(Level.FINEST, \"Set to {0}\", port);\n    }\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort() {\n        if (isClosed() == false) {\n            return server.getLocalPort();\n        }\n        if (getSecure().isEnable() == false) {\n            return serverPort;\n        } else {\n            int _port = getSecure().getPort();\n            if (_port == -1)\n                return serverPort;\n            else\n                return _port;\n        }\n    }\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler) {\n        clientCommandHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler() {\n        return clientCommandHandlerString;\n    }\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data) {\n        this.clientDataString = data;\n        logger.log(Level.FINEST, \"Set to {0}\", data);\n    }\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData() {\n        return clientDataString;\n    }\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time) {\n        if (time > 0)\n            socketTimeout = time;\n        else\n            socketTimeout = 0;\n        logger.log(Level.FINEST, \"Set to {0}\", socketTimeout);\n    }\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout() {\n        return socketTimeout;\n    }\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry) {\n        maxAuthTry = authTry;\n        logger.log(Level.FINEST, \"Set to {0}\", authTry);\n    }\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry() {\n        return maxAuthTry;\n    }\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg) {\n        maxAuthTryMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg() {\n        return maxAuthTryMsg;\n    }\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg) {\n        timeoutMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg() {\n        return timeoutMsg;\n    }\n\n    private TheClient initTheClient() {\n        TheClient theClient = new TheClient();\n        theClient.setServer(QuickServer.this);\n        theClient.setTimeoutMsg(getTimeoutMsg());\n        //v1.2\n        theClient.setMaxAuthTry(getMaxAuthTry());\n        theClient.setMaxAuthTryMsg(getMaxAuthTryMsg());\n        theClient.setClientEventHandler(clientEventHandler);\n        //v1.4.6\n        theClient.setClientExtendedEventHandler(clientExtendedEventHandler);\n        theClient.setClientCommandHandler(clientCommandHandler);\n        //v1.2\n        theClient.setClientObjectHandler(clientObjectHandler);\n        //v1.4\n        theClient.setClientBinaryHandler(clientBinaryHandler);\n        //v1.4.5\n        theClient.setClientWriteHandler(clientWriteHandler);\n        //v1.3\n        theClient.setAuthenticator(authenticator);\n        //v1.4.6\n        theClient.setClientAuthenticationHandler(clientAuthenticationHandler);\n        theClient.setTimeout(socketTimeout);\n        theClient.setMaxConnectionMsg(maxConnectionMsg);\n        //v1.3.2\n        theClient.setCommunicationLogging(getCommunicationLogging());\n        return theClient;\n    }\n\n    public void run() {\n        exceptionInRun = null;\n        TheClient theClient = initTheClient();\n        try {\n            stopServer = false;\n            closeAllPools();\n            initAllPools();\n            makeServerSocket();\n            //print banner\n            System.out.println(serverBanner);\n            //v1.2\n            setServiceState(Service.RUNNING);\n            //v1.3.3\n            processServerHooks(ServerHook.POST_STARTUP);\n            if (getBlockingMode() == false) {\n                runNonBlocking(theClient);\n                if (stopServer == true) {\n                    logger.log(Level.FINEST, \"Closing selector for {0}\", getName());\n                    selector.close();\n                }\n                return;\n            } else {\n                runBlocking(theClient);\n            }\n        } catch (BindException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"{0} BindException for Port {1} @ {2} : {3}\", new Object[] { getName(), getPort(), getBindAddr().getHostAddress(), e.getMessage() });\n        } catch (javax.net.ssl.SSLException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"SSLException {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (IOException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"IOError {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (Exception e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"Error {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } finally {\n            if (getBlockingMode() == true) {\n                logger.log(Level.WARNING, \"Closing {0}\", getName());\n                try {\n                    if (isClosed() == false) {\n                        server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            } else if (getBlockingMode() == false && exceptionInRun != null) {\n                logger.log(Level.WARNING, \"Closing {0} - Had Error: {1}\", new Object[] { getName(), exceptionInRun });\n                try {\n                    if (isClosed() == false) {\n                        if (serverSocketChannel != null)\n                            serverSocketChannel.close();\n                        if (server != null)\n                            server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n        }\n    }\n\n    //end of run\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnection = maxConnection;\n        else\n            this.maxConnection = maxConnection;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnection);\n    }\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection() {\n        return maxConnection;\n    }\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount() {\n        if (clientHandlerPool != null) {\n            try {\n                return getClientHandlerPool().getNumActive();\n            } catch (Exception e) {\n                return 0;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnectionMsg = maxConnectionMsg;\n        else\n            this.maxConnectionMsg = maxConnectionMsg;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnectionMsg);\n    }\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg() {\n        return maxConnectionMsg;\n    }\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException {\n        ipAddr = InetAddress.getByName(bindAddr);\n        logger.log(Level.FINEST, \"Set to {0}\", bindAddr);\n    }\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr() {\n        if (ipAddr == null) {\n            try {\n                ipAddr = InetAddress.getByName(\"0.0.0.0\");\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Unable to create default ip(0.0.0.0) : {0}\", e);\n                throw new RuntimeException(\"Error: Unable to find servers own ip : \" + e);\n            }\n        }\n        return ipAddr;\n    }\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects) {\n        this.storeObjects = storeObjects;\n    }\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects() {\n        return storeObjects;\n    }\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port) {\n        getQSAdminServer().getServer().setPort(port);\n    }\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort() {\n        return getQSAdminServer().getServer().getPort();\n    }\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator) {\n        getQSAdminServer().getServer().setClientAuthenticationHandler(authenticator);\n    }\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator() {\n        return getQSAdminServer().getServer().getAuthenticator();\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException {\n        getQSAdminServer().setClientAuthenticationHandler(authenticator);\n        getQSAdminServer().startServer(port);\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException {\n        getQSAdminServer().startServer();\n    }\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer() {\n        if (adminServer == null)\n            adminServer = new QSAdminServer(QuickServer.this);\n        return adminServer;\n    }\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer) {\n        if (adminServer == null)\n            this.adminServer = adminServer;\n    }\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed() {\n        if (server == null)\n            return true;\n        return server.isClosed();\n    }\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger() {\n        if (appLogger != null)\n            return appLogger;\n        return logger;\n    }\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger) {\n        this.appLogger = appLogger;\n    }\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler) {\n        clientObjectHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler() {\n        return clientObjectHandlerString;\n    }\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        if (formatter == null)\n            return;\n        consoleLoggingformatter = formatter;\n        java.util.logging.Formatter conformatter = (java.util.logging.Formatter) getClass(formatter, true).newInstance();\n        Logger jdkLogger = Logger.getLogger(\"\");\n        Handler[] handlers = jdkLogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                handlers[index].setFormatter(conformatter);\n            }\n        }\n        logger.log(Level.FINEST, \"Set to {0}\", formatter);\n    }\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter() {\n        return consoleLoggingformatter;\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MiniFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to logging.MiniFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MicroFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to MicroFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        boolean isConsole = true;\n        try {\n            if (System.console() == null) {\n                isConsole = false;\n            }\n        } catch (Throwable e) {\n            //ignore\n        }\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                if (isConsole == false && level != Level.OFF) {\n                    System.out.println(\"QuickServer: You do not have a console.. so turning console logger off..\");\n                    level = Level.OFF;\n                }\n                if (level == Level.OFF) {\n                    logger.info(\"QuickServer: Removing console handler.. \");\n                    rlogger.removeHandler(handlers[index]);\n                    handlers[index].setLevel(level);\n                    handlers[index].close();\n                } else {\n                    handlers[index].setLevel(level);\n                }\n            }\n        }\n        if (level == Level.SEVERE)\n            consoleLoggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            consoleLoggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            consoleLoggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            consoleLoggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            consoleLoggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            consoleLoggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            consoleLoggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            consoleLoggingLevel = \"OFF\";\n        else\n            consoleLoggingLevel = \"UNKNOWN\";\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel() {\n        return consoleLoggingLevel;\n    }\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            handlers[index].setLevel(level);\n        }\n        if (level == Level.SEVERE)\n            loggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            loggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            loggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            loggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            loggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            loggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            loggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            loggingLevel = \"OFF\";\n        else\n            loggingLevel = \"UNKNOWN\";\n        consoleLoggingLevel = loggingLevel;\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    //*** Start of Service interface methods\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError() {\n        return serviceError;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param) {\n        serviceError = null;\n        try {\n            initServer(param);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig) {\n        serviceError = null;\n        try {\n            initServer(qsConfig);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING)\n            return false;\n        try {\n            startServer();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService() {\n        serviceError = null;\n        if (getServiceState() == Service.STOPPED)\n            return false;\n        try {\n            stopServer();\n            clearAllPools();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING) {\n            suspendMaxConnection = maxConnection;\n            suspendMaxConnectionMsg = maxConnectionMsg;\n            maxConnection = 0;\n            maxConnectionMsg = \"Service is suspended.\";\n            setServiceState(Service.SUSPENDED);\n            logger.log(Level.INFO, \"Service {0} is suspended.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService() {\n        serviceError = null;\n        if (getServiceState() == Service.SUSPENDED) {\n            maxConnection = suspendMaxConnection;\n            maxConnectionMsg = suspendMaxConnectionMsg;\n            setServiceState(Service.RUNNING);\n            logger.log(Level.INFO, \"Service {0} resumed.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info() {\n        serviceError = null;\n        StringBuilder buf = new StringBuilder();\n        buf.append(getName()).append(\"\\n\");\n        buf.append(getBindAddr().getHostAddress()).append(\" \");\n        buf.append(getPort()).append(\"\\n\");\n        return buf.toString();\n    }\n\n    // *** End of Service interface methods\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException {\n        QuickServerConfig qsConfig = null;\n        try {\n            qsConfig = ConfigReader.read((String) param[0]);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not init server from xml file {0} : {1}\", new Object[] { new File((String) param[0]).getAbsolutePath(), e });\n            throw new AppException(\"Could not init server from xml file\", e);\n        }\n        initServer(qsConfig);\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException {\n        setConfig(qsConfig);\n        try {\n            configQuickServer();\n            loadApplicationClasses();\n            //start InitServerHooks\n            InitServerHooks ish = getConfig().getInitServerHooks();\n            if (ish != null) {\n                Iterator iterator = ish.iterator();\n                String initServerHookClassName = null;\n                Class initServerHookClass = null;\n                InitServerHook initServerHook = null;\n                while (iterator.hasNext()) {\n                    initServerHookClassName = (String) iterator.next();\n                    initServerHookClass = getClass(initServerHookClassName, true);\n                    initServerHook = (InitServerHook) initServerHookClass.newInstance();\n                    logger.log(Level.INFO, \"Loaded init server hook: {0}\", initServerHookClassName);\n                    logger.log(Level.FINE, \"Init server hook info: {0}\", initServerHook.info());\n                    initServerHook.handleInit(QuickServer.this);\n                }\n            }\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not load init server hook: {0}\", e);\n            logger.log(Level.WARNING, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Could not load init server hook\", e);\n        }\n        setServiceState(Service.INIT);\n        logger.log(Level.FINEST, \"\\r\\n{0}\", MyString.getSystemInfo(getVersion()));\n    }\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState() {\n        return serviceState;\n    }\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state) {\n        serviceState = state;\n    }\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp) {\n        if (temp.equals(\"SEVERE\"))\n            qs.setConsoleLoggingLevel(Level.SEVERE);\n        else if (temp.equals(\"WARNING\"))\n            qs.setConsoleLoggingLevel(Level.WARNING);\n        else if (temp.equals(\"INFO\"))\n            qs.setConsoleLoggingLevel(Level.INFO);\n        else if (temp.equals(\"CONFIG\"))\n            qs.setConsoleLoggingLevel(Level.CONFIG);\n        else if (temp.equals(\"FINE\"))\n            qs.setConsoleLoggingLevel(Level.FINE);\n        else if (temp.equals(\"FINER\"))\n            qs.setConsoleLoggingLevel(Level.FINER);\n        else if (temp.equals(\"FINEST\"))\n            qs.setConsoleLoggingLevel(Level.FINEST);\n        else if (temp.equals(\"OFF\"))\n            qs.setConsoleLoggingLevel(Level.OFF);\n        else\n            logger.log(Level.WARNING, \"unknown level {0}\", temp);\n    }\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception {\n        QuickServer qs = QuickServer.this;\n        //v1.3\n        qs.setConfig(config);\n        qs.setBasicConfig(config);\n        String temp = config.getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        temp = null;\n        qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        //v1.3.3\n        qs.setSecurityManagerClass(config.getSecurityManagerClass());\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        temp = config.getApplicationJarPath();\n        if (temp != null) {\n            File ajp = new File(temp);\n            if (ajp.isAbsolute() == false) {\n                temp = config.getConfigFile();\n                ajp = new File(temp);\n                temp = ajp.getParent() + File.separatorChar + config.getApplicationJarPath();\n                config.setApplicationJarPath(temp);\n                temp = null;\n            }\n            qs.setApplicationJarPath(config.getApplicationJarPath());\n            //set path also to QSAdmin\n            if (config.getQSAdminServerConfig() != null) {\n                getQSAdminServer().getServer().setApplicationJarPath(config.getApplicationJarPath());\n            }\n        }\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception {\n        QuickServer qs = getQSAdminServer().getServer();\n        qs.setBasicConfig(config);\n        //set the Logging Level to same as main QS\n        //config.getConsoleLoggingLevel();\n        String temp = getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        //set the Logging Formatter to same as main QS\n        //qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setConsoleLoggingFormatter(getConsoleLoggingFormatter());\n        //v1.4.6\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        //v1.4.6\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        getQSAdminServer().setCommandPlugin(config.getCommandPlugin());\n        //v1.3.2\n        if (config.getCommandShellEnable().equals(\"true\"))\n            getQSAdminServer().setShellEnable(true);\n        getQSAdminServer().setPromptName(config.getCommandShellPromptName());\n        //v1.3.3\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception {\n        configQuickServer(getConfig());\n        if (getConfig().getQSAdminServerConfig() != null) {\n            configQuickServer(getConfig().getQSAdminServerConfig());\n        }\n    }\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args) {\n        try {\n            if (args.length >= 1) {\n                if (args[0].equals(\"-about\")) {\n                    org.quickserver.net.server.gui.About.main(null);\n                } else if (args[0].equals(\"-load\") && args.length >= 2) {\n                    QuickServer qs = QuickServer.load(args[1]);\n                    if (qs != null)\n                        handleOptions(args, qs);\n                } else {\n                    System.out.println(printUsage());\n                }\n            } else {\n                System.out.println(printUsage());\n                org.quickserver.net.server.gui.About.showAbout();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException {\n        QuickServer qs = new QuickServer();\n        Object[] config = new Object[] { xml };\n        qs.initServer(config);\n        qs.startServer();\n        if (qs.getConfig().getQSAdminServerConfig() != null) {\n            qs.startQSAdminServer();\n        }\n        return qs;\n    }\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"QuickServer - Java library/framework for creating robust multi-client TCP servers.\\n\");\n        sb.append(\"Copyright (C) QuickServer.org\\n\\n\");\n        sb.append(\"Usage: QuickServer [-options]\\n\");\n        sb.append(\"Where options include:\\n\");\n        sb.append(\"  -about\\t\" + \"Opens About Dialog box\\n\");\n        sb.append(\"  -load <xml_config_file> [load-options]\\t\" + \"Loads the server from xml file.\\n\");\n        sb.append(\"  Where load-options include:\\n\");\n        sb.append(\"     -fullXML2File <file_name>\\t\" + \"Dumps the Full XML configuration of the QuickServer loaded.\\n\");\n        return sb.toString();\n    }\n\n    private static void handleOptions(String[] args, QuickServer quickserver) {\n        if (args.length < 3)\n            return;\n        if (args[2].equals(\"-fullXML2File\") && args.length >= 4) {\n            File file = new File(args[3]);\n            logger.log(Level.INFO, \"Writing full xml configuration to file: {0}\", file.getAbsolutePath());\n            try {\n                TextFile.write(file, quickserver.getConfig().toXML(null));\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error writing full xml configuration: {0}\", e);\n            }\n        }\n    }\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception {\n        try {\n            if (pool != null)\n                getClientPool().clear();\n            if (clientHandlerPool != null)\n                getClientHandlerPool().clear();\n            if (getClientDataPool() != null)\n                getClientDataPool().clear();\n            if (getDBPoolUtil() != null)\n                getDBPoolUtil().clean();\n            if (byteBufferPool != null)\n                getByteBufferPool().clear();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error: {0}\", e);\n            throw e;\n        }\n    }\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception {\n        if (pool == null && clientHandlerPool == null && getClientDataPool() == null && getDBPoolUtil() == null && byteBufferPool == null) {\n            return;\n        }\n        logger.log(Level.FINE, \"Closing pools for {0}\", getName());\n        try {\n            if (pool != null && PoolHelper.isPoolOpen(getClientPool().getObjectPool())) {\n                logger.finer(\"Closing ClientThread pool.\");\n                getClientPool().close();\n            }\n            if (clientHandlerPool != null && PoolHelper.isPoolOpen(getClientHandlerPool())) {\n                logger.finer(\"Closing ClientHandler pool.\");\n                getClientHandlerPool().close();\n            }\n            if (getClientDataPool() != null && PoolHelper.isPoolOpen(getClientDataPool())) {\n                logger.finer(\"Closing ClientData pool.\");\n                getClientDataPool().close();\n            }\n            if (getDBPoolUtil() != null) {\n                logger.finer(\"Closing DB pool.\");\n                getDBPoolUtil().clean();\n            }\n            if (byteBufferPool != null && PoolHelper.isPoolOpen(getByteBufferPool())) {\n                logger.finer(\"Closing ByteBuffer pool.\");\n                getByteBufferPool().close();\n            }\n            logger.log(Level.FINE, \"Closed pools for {0}\", getName());\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error closing pools for {0}: {1}\", new Object[] { getName(), e });\n            throw e;\n        }\n    }\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception {\n        logger.fine(\"Creating pools\");\n        if (getBlockingMode() == false) {\n            makeByteBufferPool(getBasicConfig().getObjectPoolConfig().getByteBufferObjectPoolConfig());\n        }\n        makeClientPool(getBasicConfig().getObjectPoolConfig().getThreadObjectPoolConfig());\n        makeClientHandlerPool(getBasicConfig().getObjectPoolConfig().getClientHandlerObjectPoolConfig());\n        //check if client data is poolable\n        if (clientDataClass != null) {\n            try {\n                clientData = (ClientData) clientDataClass.newInstance();\n                if (PoolableObject.class.isInstance(clientData) == true) {\n                    PoolableObject po = (PoolableObject) clientData;\n                    if (po.isPoolable() == true) {\n                        makeClientDataPool(po.getPoolableObjectFactory(), getBasicConfig().getObjectPoolConfig().getClientDataObjectPoolConfig());\n                    } else {\n                        clientDataPool = null;\n                        logger.fine(\"ClientData is not poolable!\");\n                    }\n                }\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error: {0}\", e);\n                throw e;\n            }\n        }\n        try {\n            makeDBObjectPool();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error in makeDBObjectPool() : {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw e;\n        }\n        logger.fine(\"Created pools\");\n    }\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool() {\n        if (pool == null)\n            throw new IllegalStateException(\"No ClientPool available yet!\");\n        return pool;\n    }\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientHandler pool\");\n        PoolableObjectFactory factory = new ClientHandlerObjectFactory(getBlockingMode());\n        clientHandlerPool = poolManager.makeClientHandlerPool(factory, opConfig);\n        poolManager.initPool(clientHandlerPool, opConfig);\n        clientHandlerPool = makeQSObjectPool(clientHandlerPool);\n        clientIdentifier.setClientHandlerPool((QSObjectPool) clientHandlerPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool() {\n        if (clientHandlerPool == null)\n            throw new IllegalStateException(\"No ClientHandler Pool available yet!\");\n        return clientHandlerPool;\n    }\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config) {\n        this.config = config;\n    }\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig() {\n        return config;\n    }\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientData pool\");\n        clientDataPool = poolManager.makeClientDataPool(factory, opConfig);\n        poolManager.initPool(clientDataPool, opConfig);\n        clientDataPool = makeQSObjectPool(clientDataPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool() {\n        return clientDataPool;\n    }\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil() {\n        return dBPoolUtil;\n    }\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig) {\n        getConfig().setDBObjectPoolConfig(dBObjectPoolConfig);\n    }\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception {\n        if (getConfig().getDBObjectPoolConfig() != null) {\n            logger.fine(\"Creating DBObject Pool\");\n            //logger.finest(\"Got:\\n\"+getConfig().getDBObjectPoolConfig().toXML(null));\n            Class dbPoolUtilClass = getClass(getConfig().getDBObjectPoolConfig().getDbPoolUtil(), true);\n            dBPoolUtil = (DBPoolUtil) dbPoolUtilClass.newInstance();\n            dBPoolUtil.setDatabaseConnections(getConfig().getDBObjectPoolConfig().getDatabaseConnectionSet().iterator());\n            dBPoolUtil.initPool();\n        }\n    }\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id) {\n        return clientIdentifier.findFirstClientById(id);\n    }\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient() {\n        return clientIdentifier.findAllClient();\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern) {\n        return clientIdentifier.findAllClientById(pattern);\n    }\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key) {\n        return clientIdentifier.findClientByKey(key);\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern) {\n        return clientIdentifier.findAllClientByKey(pattern);\n    }\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted() {\n        setSkipValidation(true);\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation() {\n        return skipValidation;\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation) {\n        skipValidation = validation;\n    }\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging) {\n        this.communicationLogging = communicationLogging;\n    }\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging() {\n        return communicationLogging;\n    }\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass) {\n        if (securityManagerClass != null)\n            this.securityManagerClass = securityManagerClass;\n    }\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass() {\n        return securityManagerClass;\n    }\n\n    public SecurityManager getSecurityManager() throws AppException {\n        if (getSecurityManagerClass() == null)\n            return null;\n        SecurityManager sm = null;\n        try {\n            sm = (SecurityManager) getClass(getSecurityManagerClass(), true).newInstance();\n        } catch (ClassNotFoundException e) {\n            throw new AppException(e.getMessage());\n        } catch (InstantiationException e) {\n            throw new AppException(e.getMessage());\n        } catch (IllegalAccessException e) {\n            throw new AppException(e.getMessage());\n        }\n        return sm;\n    }\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig) {\n        this.accessConstraintConfig = accessConstraintConfig;\n    }\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig() {\n        return accessConstraintConfig;\n    }\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader) {\n        this.classLoader = classLoader;\n        Thread.currentThread().setContextClassLoader(classLoader);\n    }\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader() {\n        return classLoader;\n    }\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException {\n        if (name == null)\n            throw new IllegalArgumentException(\"Class name can't be null!\");\n        logger.log(Level.FINEST, \"Class: {0}, reload: {1}\", new Object[] { name, reload });\n        if (reload == true && classLoader != null) {\n            return classLoader.loadClass(name);\n        } else if (reload == true && classLoader == null && this.getClass().getClassLoader() != null) {\n            return this.getClass().getClassLoader().loadClass(name);\n        } else if (reload == false && classLoader != null) {\n            return Class.forName(name, true, classLoader);\n        } else /*if(reload==false && classLoader==null)*/\n        {\n            return Class.forName(name, true, this.getClass().getClassLoader());\n        }\n    }\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath) {\n        this.applicationJarPath = applicationJarPath;\n    }\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath() {\n        return applicationJarPath;\n    }\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks) {\n        this.serverHooks = serverHooks;\n    }\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks() {\n        if (serverHooks == null)\n            serverHooks = new ServerHooks();\n        return serverHooks;\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses() {\n        if (getServerHooks() == null)\n            return;\n        listOfServerHooks = new ArrayList();\n        ServerHook serverHook = null;\n        String serverHookClassName = null;\n        Class serverHookClass = null;\n        //add system hooks\n        serverHook = new GhostSocketReaper();\n        serverHook.initHook(QuickServer.this);\n        listOfServerHooks.add(serverHook);\n        ghostSocketReaper = (GhostSocketReaper) serverHook;\n        //add user hooks if any\n        Iterator iterator = getServerHooks().iterator();\n        while (iterator.hasNext()) {\n            serverHookClassName = (String) iterator.next();\n            try {\n                serverHookClass = getClass(serverHookClassName, true);\n                serverHook = (ServerHook) serverHookClass.newInstance();\n                serverHook.initHook(QuickServer.this);\n                listOfServerHooks.add(serverHook);\n                logger.log(Level.INFO, \"Loaded server hook: {0}\", serverHookClassName);\n                logger.log(Level.FINE, \"Server hook info: {0}\", serverHook.info());\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Could not load server hook [{0}]: {1}\", new Object[] { serverHookClassName, e });\n                logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            }\n        }\n        //end of while\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event) {\n        if (listOfServerHooks == null) {\n            logger.warning(\"listOfServerHooks was null!\");\n            return;\n        }\n        ServerHook serverHook = null;\n        boolean result = false;\n        Iterator iterator = listOfServerHooks.iterator();\n        String hooktype = \"UNKNOWN\";\n        switch(event) {\n            case ServerHook.PRE_STARTUP:\n                hooktype = \"PRE_STARTUP\";\n                break;\n            case ServerHook.POST_STARTUP:\n                hooktype = \"POST_STARTUP\";\n                break;\n            case ServerHook.PRE_SHUTDOWN:\n                hooktype = \"PRE_SHUTDOWN\";\n                break;\n            case ServerHook.POST_SHUTDOWN:\n                hooktype = \"POST_SHUTDOWN\";\n                break;\n        }\n        while (iterator.hasNext()) {\n            serverHook = (ServerHook) iterator.next();\n            try {\n                result = serverHook.handleEvent(event);\n            } catch (Exception e) {\n                result = false;\n                logger.log(Level.WARNING, \"Error invoking {0} hook [{1}]: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), e.getMessage() });\n            }\n            logger.log(Level.FINE, \"Invoked {0} hook [{1}] was: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), result });\n        }\n    }\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone() {\n        Object object = null;\n        try {\n            object = super.clone();\n            QuickServer _qs = (QuickServer) object;\n            _qs.setQSAdminServer(new QSAdminServer(_qs));\n        } catch (CloneNotSupportedException e) {\n            //should not happ\n            logger.log(Level.WARNING, \"Error cloning : {0}\", e);\n        }\n        return object;\n    }\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure) {\n        this.secure = secure;\n    }\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure() {\n        if (secure == null)\n            secure = new Secure();\n        return secure;\n    }\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure() {\n        return runningSecure;\n    }\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure) {\n        this.runningSecure = runningSecure;\n    }\n\n    private File makeAbsoluteToConfig(String fileName) {\n        Assertion.affirm(fileName != null, \"FileName can't be null\");\n        return ConfigReader.makeAbsoluteToConfig(fileName, getConfig());\n    }\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException {\n        server = null;\n        logger.log(Level.FINEST, \"Binding {0} to IP: {1}\", new Object[] { getName(), getBindAddr() });\n        InetSocketAddress bindAddress = new InetSocketAddress(getBindAddr(), getPort());\n        try {\n            NetworkInterface ni = NetworkInterface.getByInetAddress(getBindAddr());\n            if (ni != null) {\n                logger.fine(\"NetworkInterface: \" + ni);\n            }\n        } catch (Exception igrnore) {\n            /*ignore*/\n        } catch (Error igrnore) {\n            /*ignore*/\n        }\n        if (getSecure().isEnable() == false) {\n            logger.log(Level.FINE, \"Making a normal ServerSocket for {0}\", getName());\n            setRunningSecure(false);\n            if (getBlockingMode() == false) {\n                //for non-blocking\n                serverSocketChannel = ServerSocketChannel.open();\n                server = serverSocketChannel.socket();\n                server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n            } else {\n                //for blocking\n                server = new ServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n            }\n        } else {\n            try {\n                logger.log(Level.FINE, \"Making a secure ServerSocket for {0}\", getName());\n                getSSLContext();\n                setRunningSecure(true);\n                if (getBlockingMode() == false) {\n                    logger.log(Level.FINE, \"Making a secure ServerSocketChannel for {0}\", getName());\n                    //for non-blocking\n                    serverSocketChannel = ServerSocketChannel.open();\n                    server = serverSocketChannel.socket();\n                    server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n                } else {\n                    ServerSocketFactory ssf = getSSLContext().getServerSocketFactory();\n                    SSLServerSocket serversocket = (SSLServerSocket) ssf.createServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n                    serversocket.setNeedClientAuth(secure.isClientAuthEnable());\n                    setRunningSecure(true);\n                    secureStoreManager.logSSLServerSocketInfo(serversocket);\n                    server = serversocket;\n                    serverSocketChannel = server.getChannel();\n                    if (serverSocketChannel == null && getBlockingMode() == false) {\n                        logger.warning(\"Secure Server does not support Channel! So will run in blocking mode.\");\n                        blockingMode = false;\n                    }\n                }\n                //blocking\n            } catch (NoSuchAlgorithmException e) {\n                logger.log(Level.WARNING, \"NoSuchAlgorithmException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            } catch (KeyManagementException e) {\n                logger.log(Level.WARNING, \"KeyManagementException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            }\n        }\n        server.setReuseAddress(true);\n        int connectionTime = 0;\n        int latency = 0;\n        int bandwidth = 0;\n        connectionTime = getBasicConfig().getAdvancedSettings().getPerformancePreferencesConnectionTime();\n        latency = getBasicConfig().getAdvancedSettings().getPerformancePreferencesLatency();\n        bandwidth = getBasicConfig().getAdvancedSettings().getPerformancePreferencesBandwidth();\n        logger.log(Level.FINE, \"getPerformancePreferencesConnectionTime : {0}\", connectionTime);\n        logger.log(Level.FINE, \"getPerformancePreferencesLatency : {0}\", latency);\n        logger.log(Level.FINE, \"getPerformancePreferencesBandwidth : {0}\", bandwidth);\n        server.setPerformancePreferences(connectionTime, latency, bandwidth);\n        int clientSocketReceiveBufferSize = getBasicConfig().getAdvancedSettings().getClientSocketReceiveBufferSize();\n        if (clientSocketReceiveBufferSize > 0) {\n            logger.log(Level.FINE, \"clientSocketReceiveBufferSize: {0}\", clientSocketReceiveBufferSize);\n            server.setReceiveBufferSize(clientSocketReceiveBufferSize);\n        }\n        if (getBlockingMode() == false) {\n            logger.log(Level.FINE, \"Server Mode {0} - Non Blocking\", getName());\n            if (selector == null || selector.isOpen() == false) {\n                logger.finest(\"Opening new selector\");\n                selector = Selector.open();\n            } else {\n                logger.log(Level.FINEST, \"Reusing selector: {0}\", selector);\n            }\n            serverSocketChannel.configureBlocking(false);\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n            selector.wakeup();\n        } else {\n            logger.log(Level.FINE, \"Server Mode {0} - Blocking\", getName());\n        }\n    }\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception {\n        Assertion.affirm(basicConfig != null, \"BasicServerConfig can't be null\");\n        this.basicConfig = basicConfig;\n    }\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig() {\n        return basicConfig;\n    }\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException {\n        if (getSecure().isLoad() == false) {\n            throw new IllegalStateException(\"Secure setting is not yet enabled for loading!\");\n        }\n        logger.info(\"Loading Secure Context..\");\n        km = null;\n        tm = null;\n        try {\n            String ssManager = \"org.quickserver.security.SecureStoreManager\";\n            if (getSecure().getSecureStore() != null)\n                ssManager = getSecure().getSecureStore().getSecureStoreManager();\n            Class secureStoreManagerClass = getClass(ssManager, true);\n            secureStoreManager = (SecureStoreManager) secureStoreManagerClass.newInstance();\n            km = secureStoreManager.loadKeyManagers(getConfig());\n            logger.fine(\"KeyManager got\");\n            tm = secureStoreManager.loadTrustManagers(getConfig());\n            logger.fine(\"TrustManager got\");\n            sslc = secureStoreManager.getSSLContext(getConfig().getSecure().getProtocol());\n            sslc.init(km, tm, null);\n            logger.fine(\"SSLContext loaded\");\n        } catch (KeyStoreException e) {\n            logger.warning(\"KeyStoreException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchAlgorithmException e) {\n            logger.warning(\"NoSuchAlgorithmException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchProviderException e) {\n            logger.warning(\"NoSuchProviderException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (UnrecoverableKeyException e) {\n            logger.warning(\"UnrecoverableKeyException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (CertificateException e) {\n            logger.warning(\"CertificateException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (KeyManagementException e) {\n            logger.warning(\"KeyManagementException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (GeneralSecurityException e) {\n            logger.warning(\"GeneralSecurityException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (ClassNotFoundException e) {\n            logger.warning(\"ClassNotFoundException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (InstantiationException e) {\n            logger.warning(\"InstantiationException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (IllegalAccessException e) {\n            logger.warning(\"IllegalAccessException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        return getSSLContext(null);\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        if (protocol != null && secureStoreManager != null) {\n            SSLContext _sslc = secureStoreManager.getSSLContext(protocol);\n            _sslc.init(km, tm, null);\n            return _sslc;\n        }\n        return sslc;\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext());\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext(protocol));\n    }\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler) {\n        clientBinaryHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler() {\n        return clientBinaryHandlerString;\n    }\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector) {\n        this.selector = selector;\n    }\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector() {\n        return selector;\n    }\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception {\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        //long stime = System.currentTimeMillis();\n        //long etime = System.currentTimeMillis();\n        while (true) {\n            //etime = System.currentTimeMillis();\n            //System.out.println(\"Time Taken: \"+(etime-stime));\n            client = server.accept();\n            //stime = System.currentTimeMillis();\n            if (linger < 0) {\n                client.setSoLinger(false, 0);\n            } else {\n                client.setSoLinger(true, linger);\n            }\n            client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                //low delay=10\n                client.setTrafficClass(socketTrafficClass);\n            }\n            logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n            }\n            if (stopServer) {\n                //Client connected when server was about to be shutdown.\n                try {\n                    client.close();\n                } catch (Exception e) {\n                }\n                break;\n            }\n            if (checkAccessConstraint(client) == false) {\n                continue;\n            }\n            //Check if max connection has reached\n            if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                theClient.setClientEvent(ClientEvent.MAX_CON_BLOCKING);\n            } else {\n                theClient.setClientEvent(ClientEvent.RUN_BLOCKING);\n            }\n            theClient.setTrusted(getSkipValidation());\n            theClient.setSocket(client);\n            //mostly null\n            theClient.setSocketChannel(client.getChannel());\n            if (clientDataClass != null) {\n                if (getClientDataPool() == null) {\n                    clientData = (ClientData) clientDataClass.newInstance();\n                } else {\n                    clientData = (ClientData) getClientDataPool().borrowObject();\n                }\n                theClient.setClientData(clientData);\n            }\n            try {\n                _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                _chPolled.handleClient(theClient);\n            } catch (java.util.NoSuchElementException nsee) {\n                logger.warning(\"Could not borrow ClientHandler from pool. Error: \" + nsee);\n                logger.warning(\"Closing Socket [\" + client + \"] since no ClientHandler available.\");\n                client.close();\n            }\n            if (_chPolled != null) {\n                try {\n                    getClientPool().addClient(_chPolled, true);\n                } catch (java.util.NoSuchElementException nsee) {\n                    logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                    //logger.warning(\"Closing Socket [\"+client+\"] since no Thread available.\");\n                    //client.close();\n                    //returnClientHandlerToPool(_chPolled);\n                }\n                _chPolled = null;\n            }\n            client = null;\n            //reset it back\n            setSkipValidation(false);\n        }\n        //end of loop\n    }\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception {\n        int selectCount = 0;\n        Iterator iterator = null;\n        SelectionKey key = null;\n        ServerSocketChannel serverChannel = null;\n        SocketChannel socketChannel = null;\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        boolean stopServerProcessed = false;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        registerChannelRequestMap = new HashMap();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        while (true) {\n            selectCount = selector.select(500);\n            //selectCount = selector.select();//for testing\n            //check for any pending registerChannel req.\n            synchronized (registerChannelRequestMap) {\n                if (registerChannelRequestMap.size() > 0) {\n                    RegisterChannelRequest req = null;\n                    Object hashkey = null;\n                    iterator = registerChannelRequestMap.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        hashkey = iterator.next();\n                        req = (RegisterChannelRequest) registerChannelRequestMap.get(hashkey);\n                        req.register(getSelector());\n                    }\n                    iterator = null;\n                    registerChannelRequestMap.clear();\n                }\n                //if\n            }\n            //sync\n            if (stopServer == true && stopServerProcessed == false) {\n                logger.warning(\"Closing \" + getName());\n                serverSocketChannel.close();\n                stopServerProcessed = true;\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.warning(\"Closed \" + getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n            if (stopServer == false && stopServerProcessed == true) {\n                logger.finest(\"Server must have re-started.. will break\");\n                break;\n            }\n            if (selectCount == 0 && stopServerProcessed == true) {\n                java.util.Set keyset = selector.keys();\n                if (keyset.isEmpty() == true && getClientCount() <= 0) {\n                    break;\n                } else {\n                    continue;\n                }\n            } else if (selectCount == 0) {\n                continue;\n            }\n            iterator = selector.selectedKeys().iterator();\n            while (iterator.hasNext()) {\n                key = (SelectionKey) iterator.next();\n                if (key.isValid() == false) {\n                    iterator.remove();\n                    continue;\n                }\n                if (key.isAcceptable() && stopServer == false) {\n                    logger.finest(\"Key is Acceptable\");\n                    serverChannel = (ServerSocketChannel) key.channel();\n                    socketChannel = serverChannel.accept();\n                    if (socketChannel == null) {\n                        iterator.remove();\n                        continue;\n                    }\n                    client = socketChannel.socket();\n                    if (linger < 0) {\n                        client.setSoLinger(false, 0);\n                    } else {\n                        client.setSoLinger(true, linger);\n                    }\n                    client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                        //low delay=10\n                        client.setTrafficClass(socketTrafficClass);\n                    }\n                    logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                        client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                        logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n                    }\n                    if (checkAccessConstraint(client) == false) {\n                        iterator.remove();\n                        continue;\n                    }\n                    socketChannel.configureBlocking(false);\n                    theClient.setTrusted(getSkipValidation());\n                    theClient.setSocket(socketChannel.socket());\n                    theClient.setSocketChannel(socketChannel);\n                    if (clientDataClass != null) {\n                        if (getClientDataPool() == null) {\n                            clientData = (ClientData) clientDataClass.newInstance();\n                        } else {\n                            //borrow a object from pool\n                            clientData = (ClientData) getClientDataPool().borrowObject();\n                        }\n                        theClient.setClientData(clientData);\n                    }\n                    //Check if max connection has reached\n                    if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                        theClient.setClientEvent(ClientEvent.MAX_CON);\n                    } else {\n                        theClient.setClientEvent(ClientEvent.ACCEPT);\n                    }\n                    try {\n                        _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                        logger.finest(\"Asking \" + _chPolled.getName() + \" to handle.\");\n                        _chPolled.handleClient(theClient);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.warning(\"Could not borrow ClientHandler Object from pool. Error: \" + nsee);\n                        logger.warning(\"Closing SocketChannel [\" + serverChannel.socket() + \"] since no ClientHandler available.\");\n                        socketChannel.close();\n                    }\n                    if (_chPolled != null) {\n                        try {\n                            getClientPool().addClient(_chPolled, true);\n                        } catch (java.util.NoSuchElementException nsee) {\n                            logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                            //logger.warning(\"Closing SocketChannel [\"+serverChannel.socket()+\"] since no Thread available.\");\n                            //socketChannel.close();\n                            //returnClientHandlerToPool(_chPolled);\n                        }\n                        _chPolled = null;\n                    }\n                    socketChannel = null;\n                    client = null;\n                    //reset it back\n                    setSkipValidation(false);\n                } else if (key.isValid() && key.isReadable()) {\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Readable, removing OP_READ from interestOps for \" + _ch.getName());\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_READ));\n                        _ch.addEvent(ClientEvent.READ);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.READ);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (key.isValid() && key.isWritable()) {\n                    if (getClientPool().shouldNioWriteHappen() == false) {\n                        //no need to remove the key\n                        continue;\n                    }\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Writable, removing OP_WRITE from interestOps for \" + _ch.getName());\n                        //remove OP_WRITE from interest set\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));\n                        _ch.addEvent(ClientEvent.WRITE);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.WRITE);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (stopServer == true && key.isAcceptable()) {\n                    //we will not accept this key\n                    //reset it back\n                    setSkipValidation(false);\n                } else {\n                    logger.warning(\"Unknown key got in SelectionKey: \" + key);\n                }\n                //Remove key\n                iterator.remove();\n                Thread.yield();\n            }\n            //end of iterator\n            iterator = null;\n        }\n        //end of loop\n    }\n\n    private boolean checkAccessConstraint(Socket socket) {\n        try {\n            if (getAccessConstraintConfig() != null) {\n                getAccessConstraintConfig().checkAccept(socket);\n            }\n            return true;\n        } catch (SecurityException se) {\n            logger.warning(\"SecurityException occurred accepting connection : \" + se.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException {\n        if (getSelector() == null) {\n            throw new IllegalStateException(\"Selector is not open!\");\n        }\n        if (channel == null) {\n            throw new IllegalArgumentException(\"Can't register a null channel!\");\n        }\n        if (channel.isConnected() == false) {\n            throw new ClosedChannelException();\n        }\n        RegisterChannelRequest req = new RegisterChannelRequest(channel, ops, att);\n        RegisterChannelRequest reqOld = null;\n        synchronized (registerChannelRequestMap) {\n            reqOld = (RegisterChannelRequest) registerChannelRequestMap.get(channel);\n            if (reqOld == null) {\n                registerChannelRequestMap.put(channel, req);\n                getSelector().wakeup();\n                return true;\n            } else {\n                if (reqOld.equals(req) == false) {\n                    reqOld.setOps(reqOld.getOps() | req.getOps());\n                    reqOld.setAtt(req.getAtt());\n                    return true;\n                }\n                return false;\n            }\n        }\n        /*\n\t\tlogger.warning(\"Before register...\");\n\t\tchannel.register(getSelector(), ops, att);\n\t\tlogger.warning(\"Before wakeup and after register...\");\n\t\tgetSelector().wakeup();\n\t\tlogger.warning(\"After wakeup...\");\n\t\t*/\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig) {\n        logger.finer(\"Creating ByteBufferPool pool\");\n        int bufferSize = getBasicConfig().getAdvancedSettings().getByteBufferSize();\n        boolean useDirectByteBuffer = getBasicConfig().getAdvancedSettings().getUseDirectByteBuffer();\n        PoolableObjectFactory factory = new ByteBufferObjectFactory(bufferSize, useDirectByteBuffer);\n        byteBufferPool = poolManager.makeByteBufferPool(factory, opConfig);\n        poolManager.initPool(byteBufferPool, opConfig);\n    }\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool() {\n        return byteBufferPool;\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientThread pool\");\n        ThreadObjectFactory factory = new ThreadObjectFactory();\n        ObjectPool objectPool = poolManager.makeClientPool(factory, opConfig);\n        pool = new ClientPool(makeQSObjectPool(objectPool), opConfig);\n        factory.setClientPool(pool);\n        pool.setMaxThreadsForNioWrite(getBasicConfig().getAdvancedSettings().getMaxThreadsForNioWrite());\n        poolManager.initPool(objectPool, opConfig);\n    }\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler) {\n        clientWriteHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler() {\n        return clientWriteHandlerString;\n    }\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime() {\n        return lastStartTime;\n    }\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag) {\n        org.quickserver.util.io.ByteBufferOutputStream.setDebug(flag);\n        org.quickserver.util.io.ByteBufferInputStream.setDebug(flag);\n    }\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier() {\n        return clientIdentifier;\n    }\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception {\n        return (QSObjectPool) qsObjectPoolMaker.getQSObjectPool(objectPool);\n    }\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode() {\n        return blockingMode;\n    }\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception {\n        if (clientCommandHandlerString == null && clientEventHandlerString == null) {\n            logger.severe(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n            throw new AppException(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n        }\n        clientCommandHandler = null;\n        if (clientCommandHandlerString != null) {\n            logger.finest(\"Loading ClientCommandHandler class..\");\n            Class clientCommandHandlerClass = getClass(clientCommandHandlerString, true);\n            clientCommandHandler = (ClientCommandHandler) clientCommandHandlerClass.newInstance();\n        }\n        boolean setClientCommandHandlerLookup = false;\n        clientEventHandler = null;\n        if (clientEventHandlerString == null) {\n            clientEventHandlerString = \"org.quickserver.net.server.impl.DefaultClientEventHandler\";\n            setClientCommandHandlerLookup = true;\n        }\n        logger.finest(\"Loading ClientEventHandler class..\");\n        if (clientEventHandlerString.equals(clientCommandHandlerString) && ClientEventHandler.class.isInstance(clientCommandHandler)) {\n            clientEventHandler = (ClientEventHandler) clientCommandHandler;\n        } else {\n            clientEventHandler = (ClientEventHandler) getClass(clientEventHandlerString, true).newInstance();\n            if (setClientCommandHandlerLookup) {\n                ((DefaultClientEventHandler) clientEventHandler).setClientCommandHandler(clientCommandHandler);\n            }\n        }\n        clientExtendedEventHandler = null;\n        if (clientExtendedEventHandlerString != null) {\n            logger.finest(\"Loading ClientExtendedEventHandler class..\");\n            if (clientExtendedEventHandlerString.equals(clientCommandHandlerString) && ClientExtendedEventHandler.class.isInstance(clientCommandHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientCommandHandler;\n            } else if (clientExtendedEventHandlerString.equals(clientEventHandlerString) && ClientExtendedEventHandler.class.isInstance(clientEventHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientEventHandler;\n            } else {\n                Class clientExtendedEventHandlerClass = getClass(clientExtendedEventHandlerString, true);\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientExtendedEventHandlerClass.newInstance();\n            }\n        }\n        clientObjectHandler = null;\n        if (clientObjectHandlerString != null) {\n            logger.finest(\"Loading ClientObjectHandler class..\");\n            if (clientObjectHandlerString.equals(clientCommandHandlerString) && ClientObjectHandler.class.isInstance(clientCommandHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientCommandHandler;\n            } else if (clientObjectHandlerString.equals(clientEventHandlerString) && ClientObjectHandler.class.isInstance(clientEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientEventHandler;\n            } else if (clientObjectHandlerString.equals(clientExtendedEventHandlerString) && ClientObjectHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientExtendedEventHandler;\n            } else {\n                clientObjectHandler = (ClientObjectHandler) getClass(clientObjectHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientBinaryHandler = null;\n        if (clientBinaryHandlerString != null) {\n            logger.finest(\"Loading ClientBinaryHandler class..\");\n            if (clientBinaryHandlerString.equals(clientCommandHandlerString) && ClientBinaryHandler.class.isInstance(clientCommandHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientCommandHandler;\n            } else if (clientBinaryHandlerString.equals(clientEventHandlerString) && ClientBinaryHandler.class.isInstance(clientEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientExtendedEventHandlerString) && ClientBinaryHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientExtendedEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientObjectHandlerString) && ClientBinaryHandler.class.isInstance(clientObjectHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientObjectHandler;\n            } else {\n                clientBinaryHandler = (ClientBinaryHandler) getClass(clientBinaryHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientWriteHandler = null;\n        if (clientWriteHandlerString != null) {\n            logger.finest(\"Loading ClientWriteHandler class..\");\n            if (clientWriteHandlerString.equals(clientCommandHandlerString) && ClientWriteHandler.class.isInstance(clientCommandHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientCommandHandler;\n            } else if (clientWriteHandlerString.equals(clientEventHandlerString) && ClientWriteHandler.class.isInstance(clientEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientEventHandler;\n            } else if (clientWriteHandlerString.equals(clientExtendedEventHandlerString) && ClientWriteHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientExtendedEventHandler;\n            } else if (clientWriteHandlerString.equals(clientObjectHandlerString) && ClientWriteHandler.class.isInstance(clientObjectHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientObjectHandler;\n            } else if (clientWriteHandlerString.equals(clientBinaryHandlerString) && ClientWriteHandler.class.isInstance(clientBinaryHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientBinaryHandler;\n            } else {\n                clientWriteHandler = (ClientWriteHandler) getClass(clientWriteHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        Class authenticatorClass = null;\n        if (clientAuthenticationHandlerString != null) {\n            logger.finest(\"Loading ClientAuthenticationHandler class..\");\n            authenticatorClass = getClass(clientAuthenticationHandlerString, true);\n        }\n        if (authenticatorClass != null) {\n            Object obj = authenticatorClass.newInstance();\n            if (ClientAuthenticationHandler.class.isInstance(obj))\n                clientAuthenticationHandler = (ClientAuthenticationHandler) obj;\n            else\n                authenticator = (Authenticator) obj;\n        }\n        clientDataClass = null;\n        if (clientDataString != null) {\n            logger.finest(\"Loading ClientData class..\");\n            clientDataClass = getClass(clientDataString, true);\n        }\n        Assertion.affirm(clientEventHandler != null, \"ClientEventHandler was not loaded!\");\n    }\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler) {\n        clientEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler() {\n        return clientEventHandlerString;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException {\n        if (dataType == DataType.IN)\n            this.defaultDataModeIN = dataMode;\n        if (dataType == DataType.OUT)\n            this.defaultDataModeOUT = dataMode;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException {\n        defaultDataModeIN = defaultDataMode.getDataMode(DataType.IN);\n        defaultDataModeOUT = defaultDataMode.getDataMode(DataType.OUT);\n        ;\n    }\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType) {\n        if (dataType == DataType.IN)\n            return defaultDataModeIN;\n        if (dataType == DataType.OUT)\n            return defaultDataModeOUT;\n        else\n            throw new IllegalArgumentException(\"Unknown DataType: \" + dataType);\n    }\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler) {\n        clientExtendedEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler() {\n        return clientExtendedEventHandlerString;\n    }\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception {\n        if (getApplicationJarPath() != null && getClassLoader() == null) {\n            setClassLoader(ClassUtil.getClassLoader(getApplicationJarPath()));\n            //update qsadmin to use the same\n            if (adminServer != null) {\n                adminServer.getServer().setClassLoader(getClassLoader());\n            }\n        }\n    }\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID() {\n        return pid;\n    }\n\n    public boolean isRawCommunicationLogging() {\n        return rawCommunicationLogging;\n    }\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging) {\n        this.rawCommunicationLogging = rawCommunicationLogging;\n    }\n\n    public int getRawCommunicationMaxLength() {\n        return rawCommunicationMaxLength;\n    }\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength) {\n        this.rawCommunicationMaxLength = rawCommunicationMaxLength;\n    }\n}\n",
        "test_prompt": "// QuickServer_1Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#getVersionNo()} method.\n*/\nclass QuickServer_1Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// QuickServer_3Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#getNewLine()} method.\n*/\nclass QuickServer_3Test {\n}"
            }
        ],
        "id": "2074c3a8-c6c6-4339-98c8-e36834b663bd",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_3Test.java",
        "original_code": "// QuickServer.java\n/*\n * This file is part of the QuickServer library \n * Copyright (C) QuickServer.org\n *\n * Use, modification, copying and distribution of this software is subject to\n * the terms and conditions of the GNU Lesser General Public License. \n * You should have received a copy of the GNU LGP License along with this \n * library; if not, you can download a copy from <http://www.quickserver.org/>.\n *\n * For questions, suggestions, bug-reports, enhancement-requests etc.\n * visit http://www.quickserver.org\n *\n */\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n *  Main class of QuickServer library. This class is used to create\n *  multi client servers quickly.\n *  <p>\n *  Ones a client is connected, it creates {@link ClientHandler} object,\n *  which is run using any thread available from the pool of threads\n *  maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n *  handles the client. <br/>\n *  QuickServer divides the application logic of its developer over eight\n *  class, <br>\n *  \t<ul>\n * \t\t<li>ClientEventHandler<br>\n *  \t\t   &nbsp;Handles client events [Optional Class].\n *  \t\t<li>ClientCommandHandler [#]<br>\n *  \t\t   &nbsp;Handles client character/string commands.\n *  \t\t<li>ClientObjectHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - Object commands.\n * \t\t<li>ClientBinaryHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - binary data.\n * \t\t<li>ClientWriteHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n *  \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n *  \t\t\t&nbsp;Used to Authencatet a client.\n *  \t\t<li>ClientData [Optional Class]<br>\n *  \t\t\t&nbsp;Client data carrier (support class)\n * \t\t<li>ClientExtendedEventHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles extended client events.\n *  \t</ul>\n *\n *  [#] = Any one of these have to be set based on default DataMode for input.\n *  The default DataMode for input is String so if not changes you will\n *  have to set ClientCommandHandler.\n *  </p>\n *  <p>\n *   Eg:\n *  <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n *  @version 1.4.8\n *  @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //Some variable are not initialised to any value because the\n    //default java value was desired initial value.\n    //'dev ' = development build not yet final\n    //'beta' = test build all features\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n        if (System.getProperty(\"org.quickserver.useOSLineSeparator\") != null && System.getProperty(\"org.quickserver.useOSLineSeparator\").equals(\"true\")) {\n            NEW_LINE = System.getProperty(\"line.separator\");\n        } else {\n            NEW_LINE = \"\\r\\n\";\n        }\n        String _pid = ManagementFactory.getRuntimeMXBean().getName();\n        int i = _pid.indexOf(\"@\");\n        pid = _pid.substring(0, i);\n        System.out.print(\"Loading QuickServer v\" + getVersion() + \" [PID:\" + pid + \"]\");\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //--v1.2\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //for Service interface\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n        System.out.println(\" Done\");\n        //should be commented if not a patch release\n        //System.out.println(\"[Includes patch(#): t=152&p=532]\");\n        //should be commented if not a dev release\n        //System.out.println(\"[Dev Build Date: Saturday, October 29, 2005]\");\n        logger.log(Level.FINE, \"PID: {0}\", pid);\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion() {\n        return VER;\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo() {\n        return getVersionNo(VER);\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver) {\n        //String ver = getVersion();\n        float version = 0;\n        //check if beta\n        int i = ver.indexOf(\" \");\n        if (i == -1)\n            i = ver.length();\n        ver = ver.substring(0, i);\n        //check for sub version\n        i = ver.indexOf(\".\");\n        if (i != -1) {\n            int j = ver.indexOf(\".\", i);\n            if (j != -1) {\n                ver = ver.substring(0, i) + \".\" + MyString.replaceAll(ver.substring(i + 1), \".\", \"\");\n            }\n        }\n        try {\n            version = Float.parseFloat(ver);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Corrupt QuickServer\");\n        }\n        return version;\n    }\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine() {\n        return NEW_LINE;\n    }\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString() {\n        return serverName + \" : \" + getPort();\n    }\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n        setClientCommandHandler(commandHandler);\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n        //send to another constructor\n        this(commandHandler);\n        setPort(port);\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException {\n        logger.log(Level.FINE, \"Starting {0}\", getName());\n        if (isClosed() == false) {\n            logger.log(Level.WARNING, \"Server {0} already running.\", getName());\n            throw new AppException(\"Server \" + getName() + \" already running.\");\n        }\n        blockingMode = getBasicConfig().getServerMode().getBlocking();\n        if (getSecure().isEnable() && blockingMode == false) {\n            //TODO we need to fix this..\n            logger.warning(\"QuickServer does not support secure servers under non-blocking mode! So will run in blocking mode.\");\n            blockingMode = true;\n            getBasicConfig().getServerMode().setBlocking(blockingMode);\n        }\n        if (serverBanner == null) {\n            serverBanner = \"\\n-------------------------------\" + \"\\n Name : \" + getName() + \"\\n Port : \" + getPort() + \"\\n-------------------------------\\n\";\n            logger.finest(\"Default Server Banner Generated\");\n        }\n        try {\n            loadApplicationClasses();\n            //load class from Advanced Settings\n            Class clientIdentifierClass = getClass(getBasicConfig().getAdvancedSettings().getClientIdentifier(), true);\n            clientIdentifier = (ClientIdentifier) clientIdentifierClass.newInstance();\n            clientIdentifier.setQuickServer(QuickServer.this);\n            //load class from ObjectPoolConfig\n            Class poolManagerClass = getClass(getBasicConfig().getObjectPoolConfig().getPoolManager(), true);\n            poolManager = (PoolManager) poolManagerClass.newInstance();\n            //load class QSObjectPoolMaker\n            Class qsObjectPoolMakerClass = getClass(getBasicConfig().getAdvancedSettings().getQSObjectPoolMaker(), true);\n            qsObjectPoolMaker = (QSObjectPoolMaker) qsObjectPoolMakerClass.newInstance();\n            loadServerHooksClasses();\n            processServerHooks(ServerHook.PRE_STARTUP);\n            if (getSecure().isLoad() == true)\n                //v1.4.0\n                loadSSLContext();\n            loadBusinessLogic();\n        } catch (ClassNotFoundException e) {\n            logger.log(Level.SEVERE, \"Could not load class/s: \" + e, e);\n            throw new AppException(\"Could not load class/s : \" + e);\n        } catch (InstantiationException e) {\n            logger.log(Level.SEVERE, \"Could not instantiate class/s: \" + e, e);\n            throw new AppException(\"Could not instantiate class/s: \" + e);\n        } catch (IllegalAccessException e) {\n            logger.log(Level.SEVERE, \"Illegal access to class/s: \" + e, e);\n            throw new AppException(\"Illegal access to class/s: \" + e);\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, \"IOException: \" + e, e);\n            throw new AppException(\"IOException: \" + e);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Exception: \" + e, e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Exception : \" + e);\n        }\n        //v1.3.3\n        if (getSecurityManagerClass() != null) {\n            System.setSecurityManager(getSecurityManager());\n        }\n        setServiceState(Service.INIT);\n        t = new Thread(this, \"QuickServer - \" + getName());\n        t.start();\n        do {\n            Thread.yield();\n        } while (getServiceState() == Service.INIT);\n        if (getServiceState() != Service.RUNNING) {\n            if (exceptionInRun != null)\n                throw new AppException(\"Could not start server \" + getName() + \"! Details: \" + exceptionInRun);\n            else\n                throw new AppException(\"Could not start server \" + getName());\n        }\n        lastStartTime = new java.util.Date();\n        logger.log(Level.FINE, \"Started {0}, Date: {1}\", new Object[] { getName(), lastStartTime });\n    }\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException {\n        processServerHooks(ServerHook.PRE_SHUTDOWN);\n        logger.log(Level.WARNING, \"Stopping {0}\", getName());\n        stopServer = true;\n        Socket death = null;\n        if (isClosed() == true) {\n            logger.log(Level.WARNING, \"Server {0} is not running!\", getName());\n            throw new AppException(\"Server \" + getName() + \" is not running!\");\n        }\n        try {\n            if (getBlockingMode() == true) {\n                if (getSecure().isEnable() == false) {\n                    death = new Socket(server.getInetAddress(), server.getLocalPort());\n                    death.getInputStream().read();\n                    death.close();\n                } else {\n                    death = getSSLSocketFactory().createSocket(server.getInetAddress(), server.getLocalPort());\n                    Thread.sleep(100);\n                    death.close();\n                }\n            }\n            if (serverSocketChannel != null) {\n                serverSocketChannel.close();\n            }\n        } catch (IOException e) {\n            logger.log(Level.FINE, \"IOError stopping {0}: {1}\", new Object[] { getName(), e });\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error stopping {0}: {1}\", new Object[] { getName(), e });\n            throw new AppException(\"Error in stopServer \" + getName() + \": \" + e);\n        }\n        for (int i = 0; getServiceState() != Service.STOPPED; i++) {\n            try {\n                Thread.sleep(60);\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error waiting for {0} to fully stop. Error: {1}\", new Object[] { getName(), e });\n            }\n            if (i > 1000) {\n                logger.severe(\"Server was not stopped even after 10sec.. will terminate now.\");\n                System.exit(-1);\n            }\n        }\n        if (adminServer == null || getQSAdminServer().getServer() != this) {\n            //so this is not qsadmin\n            setClassLoader(null);\n        }\n        logger.log(Level.INFO, \"Stopped {0}\", getName());\n    }\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException {\n        stopServer();\n        startServer();\n    }\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName() {\n        return serverName;\n    }\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name) {\n        serverName = name;\n        logger.log(Level.FINEST, \"Set to : {0}\", name);\n    }\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner() {\n        return serverBanner;\n    }\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner) {\n        serverBanner = banner;\n        logger.log(Level.FINEST, \"Set to : {0}\", banner);\n    }\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port) {\n        if (port < 0) {\n            throw new IllegalArgumentException(\"Port number can not be less than 0!\");\n        }\n        serverPort = port;\n        logger.log(Level.FINEST, \"Set to {0}\", port);\n    }\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort() {\n        if (isClosed() == false) {\n            return server.getLocalPort();\n        }\n        if (getSecure().isEnable() == false) {\n            return serverPort;\n        } else {\n            int _port = getSecure().getPort();\n            if (_port == -1)\n                return serverPort;\n            else\n                return _port;\n        }\n    }\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler) {\n        clientCommandHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler() {\n        return clientCommandHandlerString;\n    }\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data) {\n        this.clientDataString = data;\n        logger.log(Level.FINEST, \"Set to {0}\", data);\n    }\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData() {\n        return clientDataString;\n    }\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time) {\n        if (time > 0)\n            socketTimeout = time;\n        else\n            socketTimeout = 0;\n        logger.log(Level.FINEST, \"Set to {0}\", socketTimeout);\n    }\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout() {\n        return socketTimeout;\n    }\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry) {\n        maxAuthTry = authTry;\n        logger.log(Level.FINEST, \"Set to {0}\", authTry);\n    }\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry() {\n        return maxAuthTry;\n    }\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg) {\n        maxAuthTryMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg() {\n        return maxAuthTryMsg;\n    }\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg) {\n        timeoutMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg() {\n        return timeoutMsg;\n    }\n\n    private TheClient initTheClient() {\n        TheClient theClient = new TheClient();\n        theClient.setServer(QuickServer.this);\n        theClient.setTimeoutMsg(getTimeoutMsg());\n        //v1.2\n        theClient.setMaxAuthTry(getMaxAuthTry());\n        theClient.setMaxAuthTryMsg(getMaxAuthTryMsg());\n        theClient.setClientEventHandler(clientEventHandler);\n        //v1.4.6\n        theClient.setClientExtendedEventHandler(clientExtendedEventHandler);\n        theClient.setClientCommandHandler(clientCommandHandler);\n        //v1.2\n        theClient.setClientObjectHandler(clientObjectHandler);\n        //v1.4\n        theClient.setClientBinaryHandler(clientBinaryHandler);\n        //v1.4.5\n        theClient.setClientWriteHandler(clientWriteHandler);\n        //v1.3\n        theClient.setAuthenticator(authenticator);\n        //v1.4.6\n        theClient.setClientAuthenticationHandler(clientAuthenticationHandler);\n        theClient.setTimeout(socketTimeout);\n        theClient.setMaxConnectionMsg(maxConnectionMsg);\n        //v1.3.2\n        theClient.setCommunicationLogging(getCommunicationLogging());\n        return theClient;\n    }\n\n    public void run() {\n        exceptionInRun = null;\n        TheClient theClient = initTheClient();\n        try {\n            stopServer = false;\n            closeAllPools();\n            initAllPools();\n            makeServerSocket();\n            //print banner\n            System.out.println(serverBanner);\n            //v1.2\n            setServiceState(Service.RUNNING);\n            //v1.3.3\n            processServerHooks(ServerHook.POST_STARTUP);\n            if (getBlockingMode() == false) {\n                runNonBlocking(theClient);\n                if (stopServer == true) {\n                    logger.log(Level.FINEST, \"Closing selector for {0}\", getName());\n                    selector.close();\n                }\n                return;\n            } else {\n                runBlocking(theClient);\n            }\n        } catch (BindException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"{0} BindException for Port {1} @ {2} : {3}\", new Object[] { getName(), getPort(), getBindAddr().getHostAddress(), e.getMessage() });\n        } catch (javax.net.ssl.SSLException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"SSLException {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (IOException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"IOError {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (Exception e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"Error {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } finally {\n            if (getBlockingMode() == true) {\n                logger.log(Level.WARNING, \"Closing {0}\", getName());\n                try {\n                    if (isClosed() == false) {\n                        server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            } else if (getBlockingMode() == false && exceptionInRun != null) {\n                logger.log(Level.WARNING, \"Closing {0} - Had Error: {1}\", new Object[] { getName(), exceptionInRun });\n                try {\n                    if (isClosed() == false) {\n                        if (serverSocketChannel != null)\n                            serverSocketChannel.close();\n                        if (server != null)\n                            server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n        }\n    }\n\n    //end of run\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnection = maxConnection;\n        else\n            this.maxConnection = maxConnection;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnection);\n    }\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection() {\n        return maxConnection;\n    }\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount() {\n        if (clientHandlerPool != null) {\n            try {\n                return getClientHandlerPool().getNumActive();\n            } catch (Exception e) {\n                return 0;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnectionMsg = maxConnectionMsg;\n        else\n            this.maxConnectionMsg = maxConnectionMsg;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnectionMsg);\n    }\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg() {\n        return maxConnectionMsg;\n    }\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException {\n        ipAddr = InetAddress.getByName(bindAddr);\n        logger.log(Level.FINEST, \"Set to {0}\", bindAddr);\n    }\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr() {\n        if (ipAddr == null) {\n            try {\n                ipAddr = InetAddress.getByName(\"0.0.0.0\");\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Unable to create default ip(0.0.0.0) : {0}\", e);\n                throw new RuntimeException(\"Error: Unable to find servers own ip : \" + e);\n            }\n        }\n        return ipAddr;\n    }\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects) {\n        this.storeObjects = storeObjects;\n    }\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects() {\n        return storeObjects;\n    }\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port) {\n        getQSAdminServer().getServer().setPort(port);\n    }\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort() {\n        return getQSAdminServer().getServer().getPort();\n    }\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator) {\n        getQSAdminServer().getServer().setClientAuthenticationHandler(authenticator);\n    }\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator() {\n        return getQSAdminServer().getServer().getAuthenticator();\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException {\n        getQSAdminServer().setClientAuthenticationHandler(authenticator);\n        getQSAdminServer().startServer(port);\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException {\n        getQSAdminServer().startServer();\n    }\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer() {\n        if (adminServer == null)\n            adminServer = new QSAdminServer(QuickServer.this);\n        return adminServer;\n    }\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer) {\n        if (adminServer == null)\n            this.adminServer = adminServer;\n    }\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed() {\n        if (server == null)\n            return true;\n        return server.isClosed();\n    }\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger() {\n        if (appLogger != null)\n            return appLogger;\n        return logger;\n    }\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger) {\n        this.appLogger = appLogger;\n    }\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler) {\n        clientObjectHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler() {\n        return clientObjectHandlerString;\n    }\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        if (formatter == null)\n            return;\n        consoleLoggingformatter = formatter;\n        java.util.logging.Formatter conformatter = (java.util.logging.Formatter) getClass(formatter, true).newInstance();\n        Logger jdkLogger = Logger.getLogger(\"\");\n        Handler[] handlers = jdkLogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                handlers[index].setFormatter(conformatter);\n            }\n        }\n        logger.log(Level.FINEST, \"Set to {0}\", formatter);\n    }\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter() {\n        return consoleLoggingformatter;\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MiniFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to logging.MiniFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MicroFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to MicroFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        boolean isConsole = true;\n        try {\n            if (System.console() == null) {\n                isConsole = false;\n            }\n        } catch (Throwable e) {\n            //ignore\n        }\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                if (isConsole == false && level != Level.OFF) {\n                    System.out.println(\"QuickServer: You do not have a console.. so turning console logger off..\");\n                    level = Level.OFF;\n                }\n                if (level == Level.OFF) {\n                    logger.info(\"QuickServer: Removing console handler.. \");\n                    rlogger.removeHandler(handlers[index]);\n                    handlers[index].setLevel(level);\n                    handlers[index].close();\n                } else {\n                    handlers[index].setLevel(level);\n                }\n            }\n        }\n        if (level == Level.SEVERE)\n            consoleLoggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            consoleLoggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            consoleLoggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            consoleLoggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            consoleLoggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            consoleLoggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            consoleLoggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            consoleLoggingLevel = \"OFF\";\n        else\n            consoleLoggingLevel = \"UNKNOWN\";\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel() {\n        return consoleLoggingLevel;\n    }\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            handlers[index].setLevel(level);\n        }\n        if (level == Level.SEVERE)\n            loggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            loggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            loggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            loggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            loggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            loggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            loggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            loggingLevel = \"OFF\";\n        else\n            loggingLevel = \"UNKNOWN\";\n        consoleLoggingLevel = loggingLevel;\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    //*** Start of Service interface methods\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError() {\n        return serviceError;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param) {\n        serviceError = null;\n        try {\n            initServer(param);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig) {\n        serviceError = null;\n        try {\n            initServer(qsConfig);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING)\n            return false;\n        try {\n            startServer();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService() {\n        serviceError = null;\n        if (getServiceState() == Service.STOPPED)\n            return false;\n        try {\n            stopServer();\n            clearAllPools();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING) {\n            suspendMaxConnection = maxConnection;\n            suspendMaxConnectionMsg = maxConnectionMsg;\n            maxConnection = 0;\n            maxConnectionMsg = \"Service is suspended.\";\n            setServiceState(Service.SUSPENDED);\n            logger.log(Level.INFO, \"Service {0} is suspended.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService() {\n        serviceError = null;\n        if (getServiceState() == Service.SUSPENDED) {\n            maxConnection = suspendMaxConnection;\n            maxConnectionMsg = suspendMaxConnectionMsg;\n            setServiceState(Service.RUNNING);\n            logger.log(Level.INFO, \"Service {0} resumed.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info() {\n        serviceError = null;\n        StringBuilder buf = new StringBuilder();\n        buf.append(getName()).append(\"\\n\");\n        buf.append(getBindAddr().getHostAddress()).append(\" \");\n        buf.append(getPort()).append(\"\\n\");\n        return buf.toString();\n    }\n\n    // *** End of Service interface methods\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException {\n        QuickServerConfig qsConfig = null;\n        try {\n            qsConfig = ConfigReader.read((String) param[0]);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not init server from xml file {0} : {1}\", new Object[] { new File((String) param[0]).getAbsolutePath(), e });\n            throw new AppException(\"Could not init server from xml file\", e);\n        }\n        initServer(qsConfig);\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException {\n        setConfig(qsConfig);\n        try {\n            configQuickServer();\n            loadApplicationClasses();\n            //start InitServerHooks\n            InitServerHooks ish = getConfig().getInitServerHooks();\n            if (ish != null) {\n                Iterator iterator = ish.iterator();\n                String initServerHookClassName = null;\n                Class initServerHookClass = null;\n                InitServerHook initServerHook = null;\n                while (iterator.hasNext()) {\n                    initServerHookClassName = (String) iterator.next();\n                    initServerHookClass = getClass(initServerHookClassName, true);\n                    initServerHook = (InitServerHook) initServerHookClass.newInstance();\n                    logger.log(Level.INFO, \"Loaded init server hook: {0}\", initServerHookClassName);\n                    logger.log(Level.FINE, \"Init server hook info: {0}\", initServerHook.info());\n                    initServerHook.handleInit(QuickServer.this);\n                }\n            }\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not load init server hook: {0}\", e);\n            logger.log(Level.WARNING, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Could not load init server hook\", e);\n        }\n        setServiceState(Service.INIT);\n        logger.log(Level.FINEST, \"\\r\\n{0}\", MyString.getSystemInfo(getVersion()));\n    }\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState() {\n        return serviceState;\n    }\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state) {\n        serviceState = state;\n    }\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp) {\n        if (temp.equals(\"SEVERE\"))\n            qs.setConsoleLoggingLevel(Level.SEVERE);\n        else if (temp.equals(\"WARNING\"))\n            qs.setConsoleLoggingLevel(Level.WARNING);\n        else if (temp.equals(\"INFO\"))\n            qs.setConsoleLoggingLevel(Level.INFO);\n        else if (temp.equals(\"CONFIG\"))\n            qs.setConsoleLoggingLevel(Level.CONFIG);\n        else if (temp.equals(\"FINE\"))\n            qs.setConsoleLoggingLevel(Level.FINE);\n        else if (temp.equals(\"FINER\"))\n            qs.setConsoleLoggingLevel(Level.FINER);\n        else if (temp.equals(\"FINEST\"))\n            qs.setConsoleLoggingLevel(Level.FINEST);\n        else if (temp.equals(\"OFF\"))\n            qs.setConsoleLoggingLevel(Level.OFF);\n        else\n            logger.log(Level.WARNING, \"unknown level {0}\", temp);\n    }\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception {\n        QuickServer qs = QuickServer.this;\n        //v1.3\n        qs.setConfig(config);\n        qs.setBasicConfig(config);\n        String temp = config.getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        temp = null;\n        qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        //v1.3.3\n        qs.setSecurityManagerClass(config.getSecurityManagerClass());\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        temp = config.getApplicationJarPath();\n        if (temp != null) {\n            File ajp = new File(temp);\n            if (ajp.isAbsolute() == false) {\n                temp = config.getConfigFile();\n                ajp = new File(temp);\n                temp = ajp.getParent() + File.separatorChar + config.getApplicationJarPath();\n                config.setApplicationJarPath(temp);\n                temp = null;\n            }\n            qs.setApplicationJarPath(config.getApplicationJarPath());\n            //set path also to QSAdmin\n            if (config.getQSAdminServerConfig() != null) {\n                getQSAdminServer().getServer().setApplicationJarPath(config.getApplicationJarPath());\n            }\n        }\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception {\n        QuickServer qs = getQSAdminServer().getServer();\n        qs.setBasicConfig(config);\n        //set the Logging Level to same as main QS\n        //config.getConsoleLoggingLevel();\n        String temp = getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        //set the Logging Formatter to same as main QS\n        //qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setConsoleLoggingFormatter(getConsoleLoggingFormatter());\n        //v1.4.6\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        //v1.4.6\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        getQSAdminServer().setCommandPlugin(config.getCommandPlugin());\n        //v1.3.2\n        if (config.getCommandShellEnable().equals(\"true\"))\n            getQSAdminServer().setShellEnable(true);\n        getQSAdminServer().setPromptName(config.getCommandShellPromptName());\n        //v1.3.3\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception {\n        configQuickServer(getConfig());\n        if (getConfig().getQSAdminServerConfig() != null) {\n            configQuickServer(getConfig().getQSAdminServerConfig());\n        }\n    }\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args) {\n        try {\n            if (args.length >= 1) {\n                if (args[0].equals(\"-about\")) {\n                    org.quickserver.net.server.gui.About.main(null);\n                } else if (args[0].equals(\"-load\") && args.length >= 2) {\n                    QuickServer qs = QuickServer.load(args[1]);\n                    if (qs != null)\n                        handleOptions(args, qs);\n                } else {\n                    System.out.println(printUsage());\n                }\n            } else {\n                System.out.println(printUsage());\n                org.quickserver.net.server.gui.About.showAbout();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException {\n        QuickServer qs = new QuickServer();\n        Object[] config = new Object[] { xml };\n        qs.initServer(config);\n        qs.startServer();\n        if (qs.getConfig().getQSAdminServerConfig() != null) {\n            qs.startQSAdminServer();\n        }\n        return qs;\n    }\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"QuickServer - Java library/framework for creating robust multi-client TCP servers.\\n\");\n        sb.append(\"Copyright (C) QuickServer.org\\n\\n\");\n        sb.append(\"Usage: QuickServer [-options]\\n\");\n        sb.append(\"Where options include:\\n\");\n        sb.append(\"  -about\\t\" + \"Opens About Dialog box\\n\");\n        sb.append(\"  -load <xml_config_file> [load-options]\\t\" + \"Loads the server from xml file.\\n\");\n        sb.append(\"  Where load-options include:\\n\");\n        sb.append(\"     -fullXML2File <file_name>\\t\" + \"Dumps the Full XML configuration of the QuickServer loaded.\\n\");\n        return sb.toString();\n    }\n\n    private static void handleOptions(String[] args, QuickServer quickserver) {\n        if (args.length < 3)\n            return;\n        if (args[2].equals(\"-fullXML2File\") && args.length >= 4) {\n            File file = new File(args[3]);\n            logger.log(Level.INFO, \"Writing full xml configuration to file: {0}\", file.getAbsolutePath());\n            try {\n                TextFile.write(file, quickserver.getConfig().toXML(null));\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error writing full xml configuration: {0}\", e);\n            }\n        }\n    }\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception {\n        try {\n            if (pool != null)\n                getClientPool().clear();\n            if (clientHandlerPool != null)\n                getClientHandlerPool().clear();\n            if (getClientDataPool() != null)\n                getClientDataPool().clear();\n            if (getDBPoolUtil() != null)\n                getDBPoolUtil().clean();\n            if (byteBufferPool != null)\n                getByteBufferPool().clear();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error: {0}\", e);\n            throw e;\n        }\n    }\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception {\n        if (pool == null && clientHandlerPool == null && getClientDataPool() == null && getDBPoolUtil() == null && byteBufferPool == null) {\n            return;\n        }\n        logger.log(Level.FINE, \"Closing pools for {0}\", getName());\n        try {\n            if (pool != null && PoolHelper.isPoolOpen(getClientPool().getObjectPool())) {\n                logger.finer(\"Closing ClientThread pool.\");\n                getClientPool().close();\n            }\n            if (clientHandlerPool != null && PoolHelper.isPoolOpen(getClientHandlerPool())) {\n                logger.finer(\"Closing ClientHandler pool.\");\n                getClientHandlerPool().close();\n            }\n            if (getClientDataPool() != null && PoolHelper.isPoolOpen(getClientDataPool())) {\n                logger.finer(\"Closing ClientData pool.\");\n                getClientDataPool().close();\n            }\n            if (getDBPoolUtil() != null) {\n                logger.finer(\"Closing DB pool.\");\n                getDBPoolUtil().clean();\n            }\n            if (byteBufferPool != null && PoolHelper.isPoolOpen(getByteBufferPool())) {\n                logger.finer(\"Closing ByteBuffer pool.\");\n                getByteBufferPool().close();\n            }\n            logger.log(Level.FINE, \"Closed pools for {0}\", getName());\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error closing pools for {0}: {1}\", new Object[] { getName(), e });\n            throw e;\n        }\n    }\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception {\n        logger.fine(\"Creating pools\");\n        if (getBlockingMode() == false) {\n            makeByteBufferPool(getBasicConfig().getObjectPoolConfig().getByteBufferObjectPoolConfig());\n        }\n        makeClientPool(getBasicConfig().getObjectPoolConfig().getThreadObjectPoolConfig());\n        makeClientHandlerPool(getBasicConfig().getObjectPoolConfig().getClientHandlerObjectPoolConfig());\n        //check if client data is poolable\n        if (clientDataClass != null) {\n            try {\n                clientData = (ClientData) clientDataClass.newInstance();\n                if (PoolableObject.class.isInstance(clientData) == true) {\n                    PoolableObject po = (PoolableObject) clientData;\n                    if (po.isPoolable() == true) {\n                        makeClientDataPool(po.getPoolableObjectFactory(), getBasicConfig().getObjectPoolConfig().getClientDataObjectPoolConfig());\n                    } else {\n                        clientDataPool = null;\n                        logger.fine(\"ClientData is not poolable!\");\n                    }\n                }\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error: {0}\", e);\n                throw e;\n            }\n        }\n        try {\n            makeDBObjectPool();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error in makeDBObjectPool() : {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw e;\n        }\n        logger.fine(\"Created pools\");\n    }\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool() {\n        if (pool == null)\n            throw new IllegalStateException(\"No ClientPool available yet!\");\n        return pool;\n    }\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientHandler pool\");\n        PoolableObjectFactory factory = new ClientHandlerObjectFactory(getBlockingMode());\n        clientHandlerPool = poolManager.makeClientHandlerPool(factory, opConfig);\n        poolManager.initPool(clientHandlerPool, opConfig);\n        clientHandlerPool = makeQSObjectPool(clientHandlerPool);\n        clientIdentifier.setClientHandlerPool((QSObjectPool) clientHandlerPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool() {\n        if (clientHandlerPool == null)\n            throw new IllegalStateException(\"No ClientHandler Pool available yet!\");\n        return clientHandlerPool;\n    }\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config) {\n        this.config = config;\n    }\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig() {\n        return config;\n    }\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientData pool\");\n        clientDataPool = poolManager.makeClientDataPool(factory, opConfig);\n        poolManager.initPool(clientDataPool, opConfig);\n        clientDataPool = makeQSObjectPool(clientDataPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool() {\n        return clientDataPool;\n    }\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil() {\n        return dBPoolUtil;\n    }\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig) {\n        getConfig().setDBObjectPoolConfig(dBObjectPoolConfig);\n    }\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception {\n        if (getConfig().getDBObjectPoolConfig() != null) {\n            logger.fine(\"Creating DBObject Pool\");\n            //logger.finest(\"Got:\\n\"+getConfig().getDBObjectPoolConfig().toXML(null));\n            Class dbPoolUtilClass = getClass(getConfig().getDBObjectPoolConfig().getDbPoolUtil(), true);\n            dBPoolUtil = (DBPoolUtil) dbPoolUtilClass.newInstance();\n            dBPoolUtil.setDatabaseConnections(getConfig().getDBObjectPoolConfig().getDatabaseConnectionSet().iterator());\n            dBPoolUtil.initPool();\n        }\n    }\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id) {\n        return clientIdentifier.findFirstClientById(id);\n    }\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient() {\n        return clientIdentifier.findAllClient();\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern) {\n        return clientIdentifier.findAllClientById(pattern);\n    }\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key) {\n        return clientIdentifier.findClientByKey(key);\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern) {\n        return clientIdentifier.findAllClientByKey(pattern);\n    }\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted() {\n        setSkipValidation(true);\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation() {\n        return skipValidation;\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation) {\n        skipValidation = validation;\n    }\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging) {\n        this.communicationLogging = communicationLogging;\n    }\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging() {\n        return communicationLogging;\n    }\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass) {\n        if (securityManagerClass != null)\n            this.securityManagerClass = securityManagerClass;\n    }\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass() {\n        return securityManagerClass;\n    }\n\n    public SecurityManager getSecurityManager() throws AppException {\n        if (getSecurityManagerClass() == null)\n            return null;\n        SecurityManager sm = null;\n        try {\n            sm = (SecurityManager) getClass(getSecurityManagerClass(), true).newInstance();\n        } catch (ClassNotFoundException e) {\n            throw new AppException(e.getMessage());\n        } catch (InstantiationException e) {\n            throw new AppException(e.getMessage());\n        } catch (IllegalAccessException e) {\n            throw new AppException(e.getMessage());\n        }\n        return sm;\n    }\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig) {\n        this.accessConstraintConfig = accessConstraintConfig;\n    }\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig() {\n        return accessConstraintConfig;\n    }\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader) {\n        this.classLoader = classLoader;\n        Thread.currentThread().setContextClassLoader(classLoader);\n    }\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader() {\n        return classLoader;\n    }\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException {\n        if (name == null)\n            throw new IllegalArgumentException(\"Class name can't be null!\");\n        logger.log(Level.FINEST, \"Class: {0}, reload: {1}\", new Object[] { name, reload });\n        if (reload == true && classLoader != null) {\n            return classLoader.loadClass(name);\n        } else if (reload == true && classLoader == null && this.getClass().getClassLoader() != null) {\n            return this.getClass().getClassLoader().loadClass(name);\n        } else if (reload == false && classLoader != null) {\n            return Class.forName(name, true, classLoader);\n        } else /*if(reload==false && classLoader==null)*/\n        {\n            return Class.forName(name, true, this.getClass().getClassLoader());\n        }\n    }\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath) {\n        this.applicationJarPath = applicationJarPath;\n    }\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath() {\n        return applicationJarPath;\n    }\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks) {\n        this.serverHooks = serverHooks;\n    }\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks() {\n        if (serverHooks == null)\n            serverHooks = new ServerHooks();\n        return serverHooks;\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses() {\n        if (getServerHooks() == null)\n            return;\n        listOfServerHooks = new ArrayList();\n        ServerHook serverHook = null;\n        String serverHookClassName = null;\n        Class serverHookClass = null;\n        //add system hooks\n        serverHook = new GhostSocketReaper();\n        serverHook.initHook(QuickServer.this);\n        listOfServerHooks.add(serverHook);\n        ghostSocketReaper = (GhostSocketReaper) serverHook;\n        //add user hooks if any\n        Iterator iterator = getServerHooks().iterator();\n        while (iterator.hasNext()) {\n            serverHookClassName = (String) iterator.next();\n            try {\n                serverHookClass = getClass(serverHookClassName, true);\n                serverHook = (ServerHook) serverHookClass.newInstance();\n                serverHook.initHook(QuickServer.this);\n                listOfServerHooks.add(serverHook);\n                logger.log(Level.INFO, \"Loaded server hook: {0}\", serverHookClassName);\n                logger.log(Level.FINE, \"Server hook info: {0}\", serverHook.info());\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Could not load server hook [{0}]: {1}\", new Object[] { serverHookClassName, e });\n                logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            }\n        }\n        //end of while\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event) {\n        if (listOfServerHooks == null) {\n            logger.warning(\"listOfServerHooks was null!\");\n            return;\n        }\n        ServerHook serverHook = null;\n        boolean result = false;\n        Iterator iterator = listOfServerHooks.iterator();\n        String hooktype = \"UNKNOWN\";\n        switch(event) {\n            case ServerHook.PRE_STARTUP:\n                hooktype = \"PRE_STARTUP\";\n                break;\n            case ServerHook.POST_STARTUP:\n                hooktype = \"POST_STARTUP\";\n                break;\n            case ServerHook.PRE_SHUTDOWN:\n                hooktype = \"PRE_SHUTDOWN\";\n                break;\n            case ServerHook.POST_SHUTDOWN:\n                hooktype = \"POST_SHUTDOWN\";\n                break;\n        }\n        while (iterator.hasNext()) {\n            serverHook = (ServerHook) iterator.next();\n            try {\n                result = serverHook.handleEvent(event);\n            } catch (Exception e) {\n                result = false;\n                logger.log(Level.WARNING, \"Error invoking {0} hook [{1}]: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), e.getMessage() });\n            }\n            logger.log(Level.FINE, \"Invoked {0} hook [{1}] was: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), result });\n        }\n    }\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone() {\n        Object object = null;\n        try {\n            object = super.clone();\n            QuickServer _qs = (QuickServer) object;\n            _qs.setQSAdminServer(new QSAdminServer(_qs));\n        } catch (CloneNotSupportedException e) {\n            //should not happ\n            logger.log(Level.WARNING, \"Error cloning : {0}\", e);\n        }\n        return object;\n    }\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure) {\n        this.secure = secure;\n    }\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure() {\n        if (secure == null)\n            secure = new Secure();\n        return secure;\n    }\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure() {\n        return runningSecure;\n    }\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure) {\n        this.runningSecure = runningSecure;\n    }\n\n    private File makeAbsoluteToConfig(String fileName) {\n        Assertion.affirm(fileName != null, \"FileName can't be null\");\n        return ConfigReader.makeAbsoluteToConfig(fileName, getConfig());\n    }\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException {\n        server = null;\n        logger.log(Level.FINEST, \"Binding {0} to IP: {1}\", new Object[] { getName(), getBindAddr() });\n        InetSocketAddress bindAddress = new InetSocketAddress(getBindAddr(), getPort());\n        try {\n            NetworkInterface ni = NetworkInterface.getByInetAddress(getBindAddr());\n            if (ni != null) {\n                logger.fine(\"NetworkInterface: \" + ni);\n            }\n        } catch (Exception igrnore) {\n            /*ignore*/\n        } catch (Error igrnore) {\n            /*ignore*/\n        }\n        if (getSecure().isEnable() == false) {\n            logger.log(Level.FINE, \"Making a normal ServerSocket for {0}\", getName());\n            setRunningSecure(false);\n            if (getBlockingMode() == false) {\n                //for non-blocking\n                serverSocketChannel = ServerSocketChannel.open();\n                server = serverSocketChannel.socket();\n                server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n            } else {\n                //for blocking\n                server = new ServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n            }\n        } else {\n            try {\n                logger.log(Level.FINE, \"Making a secure ServerSocket for {0}\", getName());\n                getSSLContext();\n                setRunningSecure(true);\n                if (getBlockingMode() == false) {\n                    logger.log(Level.FINE, \"Making a secure ServerSocketChannel for {0}\", getName());\n                    //for non-blocking\n                    serverSocketChannel = ServerSocketChannel.open();\n                    server = serverSocketChannel.socket();\n                    server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n                } else {\n                    ServerSocketFactory ssf = getSSLContext().getServerSocketFactory();\n                    SSLServerSocket serversocket = (SSLServerSocket) ssf.createServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n                    serversocket.setNeedClientAuth(secure.isClientAuthEnable());\n                    setRunningSecure(true);\n                    secureStoreManager.logSSLServerSocketInfo(serversocket);\n                    server = serversocket;\n                    serverSocketChannel = server.getChannel();\n                    if (serverSocketChannel == null && getBlockingMode() == false) {\n                        logger.warning(\"Secure Server does not support Channel! So will run in blocking mode.\");\n                        blockingMode = false;\n                    }\n                }\n                //blocking\n            } catch (NoSuchAlgorithmException e) {\n                logger.log(Level.WARNING, \"NoSuchAlgorithmException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            } catch (KeyManagementException e) {\n                logger.log(Level.WARNING, \"KeyManagementException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            }\n        }\n        server.setReuseAddress(true);\n        int connectionTime = 0;\n        int latency = 0;\n        int bandwidth = 0;\n        connectionTime = getBasicConfig().getAdvancedSettings().getPerformancePreferencesConnectionTime();\n        latency = getBasicConfig().getAdvancedSettings().getPerformancePreferencesLatency();\n        bandwidth = getBasicConfig().getAdvancedSettings().getPerformancePreferencesBandwidth();\n        logger.log(Level.FINE, \"getPerformancePreferencesConnectionTime : {0}\", connectionTime);\n        logger.log(Level.FINE, \"getPerformancePreferencesLatency : {0}\", latency);\n        logger.log(Level.FINE, \"getPerformancePreferencesBandwidth : {0}\", bandwidth);\n        server.setPerformancePreferences(connectionTime, latency, bandwidth);\n        int clientSocketReceiveBufferSize = getBasicConfig().getAdvancedSettings().getClientSocketReceiveBufferSize();\n        if (clientSocketReceiveBufferSize > 0) {\n            logger.log(Level.FINE, \"clientSocketReceiveBufferSize: {0}\", clientSocketReceiveBufferSize);\n            server.setReceiveBufferSize(clientSocketReceiveBufferSize);\n        }\n        if (getBlockingMode() == false) {\n            logger.log(Level.FINE, \"Server Mode {0} - Non Blocking\", getName());\n            if (selector == null || selector.isOpen() == false) {\n                logger.finest(\"Opening new selector\");\n                selector = Selector.open();\n            } else {\n                logger.log(Level.FINEST, \"Reusing selector: {0}\", selector);\n            }\n            serverSocketChannel.configureBlocking(false);\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n            selector.wakeup();\n        } else {\n            logger.log(Level.FINE, \"Server Mode {0} - Blocking\", getName());\n        }\n    }\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception {\n        Assertion.affirm(basicConfig != null, \"BasicServerConfig can't be null\");\n        this.basicConfig = basicConfig;\n    }\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig() {\n        return basicConfig;\n    }\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException {\n        if (getSecure().isLoad() == false) {\n            throw new IllegalStateException(\"Secure setting is not yet enabled for loading!\");\n        }\n        logger.info(\"Loading Secure Context..\");\n        km = null;\n        tm = null;\n        try {\n            String ssManager = \"org.quickserver.security.SecureStoreManager\";\n            if (getSecure().getSecureStore() != null)\n                ssManager = getSecure().getSecureStore().getSecureStoreManager();\n            Class secureStoreManagerClass = getClass(ssManager, true);\n            secureStoreManager = (SecureStoreManager) secureStoreManagerClass.newInstance();\n            km = secureStoreManager.loadKeyManagers(getConfig());\n            logger.fine(\"KeyManager got\");\n            tm = secureStoreManager.loadTrustManagers(getConfig());\n            logger.fine(\"TrustManager got\");\n            sslc = secureStoreManager.getSSLContext(getConfig().getSecure().getProtocol());\n            sslc.init(km, tm, null);\n            logger.fine(\"SSLContext loaded\");\n        } catch (KeyStoreException e) {\n            logger.warning(\"KeyStoreException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchAlgorithmException e) {\n            logger.warning(\"NoSuchAlgorithmException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchProviderException e) {\n            logger.warning(\"NoSuchProviderException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (UnrecoverableKeyException e) {\n            logger.warning(\"UnrecoverableKeyException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (CertificateException e) {\n            logger.warning(\"CertificateException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (KeyManagementException e) {\n            logger.warning(\"KeyManagementException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (GeneralSecurityException e) {\n            logger.warning(\"GeneralSecurityException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (ClassNotFoundException e) {\n            logger.warning(\"ClassNotFoundException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (InstantiationException e) {\n            logger.warning(\"InstantiationException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (IllegalAccessException e) {\n            logger.warning(\"IllegalAccessException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        return getSSLContext(null);\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        if (protocol != null && secureStoreManager != null) {\n            SSLContext _sslc = secureStoreManager.getSSLContext(protocol);\n            _sslc.init(km, tm, null);\n            return _sslc;\n        }\n        return sslc;\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext());\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext(protocol));\n    }\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler) {\n        clientBinaryHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler() {\n        return clientBinaryHandlerString;\n    }\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector) {\n        this.selector = selector;\n    }\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector() {\n        return selector;\n    }\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception {\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        //long stime = System.currentTimeMillis();\n        //long etime = System.currentTimeMillis();\n        while (true) {\n            //etime = System.currentTimeMillis();\n            //System.out.println(\"Time Taken: \"+(etime-stime));\n            client = server.accept();\n            //stime = System.currentTimeMillis();\n            if (linger < 0) {\n                client.setSoLinger(false, 0);\n            } else {\n                client.setSoLinger(true, linger);\n            }\n            client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                //low delay=10\n                client.setTrafficClass(socketTrafficClass);\n            }\n            logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n            }\n            if (stopServer) {\n                //Client connected when server was about to be shutdown.\n                try {\n                    client.close();\n                } catch (Exception e) {\n                }\n                break;\n            }\n            if (checkAccessConstraint(client) == false) {\n                continue;\n            }\n            //Check if max connection has reached\n            if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                theClient.setClientEvent(ClientEvent.MAX_CON_BLOCKING);\n            } else {\n                theClient.setClientEvent(ClientEvent.RUN_BLOCKING);\n            }\n            theClient.setTrusted(getSkipValidation());\n            theClient.setSocket(client);\n            //mostly null\n            theClient.setSocketChannel(client.getChannel());\n            if (clientDataClass != null) {\n                if (getClientDataPool() == null) {\n                    clientData = (ClientData) clientDataClass.newInstance();\n                } else {\n                    clientData = (ClientData) getClientDataPool().borrowObject();\n                }\n                theClient.setClientData(clientData);\n            }\n            try {\n                _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                _chPolled.handleClient(theClient);\n            } catch (java.util.NoSuchElementException nsee) {\n                logger.warning(\"Could not borrow ClientHandler from pool. Error: \" + nsee);\n                logger.warning(\"Closing Socket [\" + client + \"] since no ClientHandler available.\");\n                client.close();\n            }\n            if (_chPolled != null) {\n                try {\n                    getClientPool().addClient(_chPolled, true);\n                } catch (java.util.NoSuchElementException nsee) {\n                    logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                    //logger.warning(\"Closing Socket [\"+client+\"] since no Thread available.\");\n                    //client.close();\n                    //returnClientHandlerToPool(_chPolled);\n                }\n                _chPolled = null;\n            }\n            client = null;\n            //reset it back\n            setSkipValidation(false);\n        }\n        //end of loop\n    }\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception {\n        int selectCount = 0;\n        Iterator iterator = null;\n        SelectionKey key = null;\n        ServerSocketChannel serverChannel = null;\n        SocketChannel socketChannel = null;\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        boolean stopServerProcessed = false;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        registerChannelRequestMap = new HashMap();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        while (true) {\n            selectCount = selector.select(500);\n            //selectCount = selector.select();//for testing\n            //check for any pending registerChannel req.\n            synchronized (registerChannelRequestMap) {\n                if (registerChannelRequestMap.size() > 0) {\n                    RegisterChannelRequest req = null;\n                    Object hashkey = null;\n                    iterator = registerChannelRequestMap.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        hashkey = iterator.next();\n                        req = (RegisterChannelRequest) registerChannelRequestMap.get(hashkey);\n                        req.register(getSelector());\n                    }\n                    iterator = null;\n                    registerChannelRequestMap.clear();\n                }\n                //if\n            }\n            //sync\n            if (stopServer == true && stopServerProcessed == false) {\n                logger.warning(\"Closing \" + getName());\n                serverSocketChannel.close();\n                stopServerProcessed = true;\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.warning(\"Closed \" + getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n            if (stopServer == false && stopServerProcessed == true) {\n                logger.finest(\"Server must have re-started.. will break\");\n                break;\n            }\n            if (selectCount == 0 && stopServerProcessed == true) {\n                java.util.Set keyset = selector.keys();\n                if (keyset.isEmpty() == true && getClientCount() <= 0) {\n                    break;\n                } else {\n                    continue;\n                }\n            } else if (selectCount == 0) {\n                continue;\n            }\n            iterator = selector.selectedKeys().iterator();\n            while (iterator.hasNext()) {\n                key = (SelectionKey) iterator.next();\n                if (key.isValid() == false) {\n                    iterator.remove();\n                    continue;\n                }\n                if (key.isAcceptable() && stopServer == false) {\n                    logger.finest(\"Key is Acceptable\");\n                    serverChannel = (ServerSocketChannel) key.channel();\n                    socketChannel = serverChannel.accept();\n                    if (socketChannel == null) {\n                        iterator.remove();\n                        continue;\n                    }\n                    client = socketChannel.socket();\n                    if (linger < 0) {\n                        client.setSoLinger(false, 0);\n                    } else {\n                        client.setSoLinger(true, linger);\n                    }\n                    client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                        //low delay=10\n                        client.setTrafficClass(socketTrafficClass);\n                    }\n                    logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                        client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                        logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n                    }\n                    if (checkAccessConstraint(client) == false) {\n                        iterator.remove();\n                        continue;\n                    }\n                    socketChannel.configureBlocking(false);\n                    theClient.setTrusted(getSkipValidation());\n                    theClient.setSocket(socketChannel.socket());\n                    theClient.setSocketChannel(socketChannel);\n                    if (clientDataClass != null) {\n                        if (getClientDataPool() == null) {\n                            clientData = (ClientData) clientDataClass.newInstance();\n                        } else {\n                            //borrow a object from pool\n                            clientData = (ClientData) getClientDataPool().borrowObject();\n                        }\n                        theClient.setClientData(clientData);\n                    }\n                    //Check if max connection has reached\n                    if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                        theClient.setClientEvent(ClientEvent.MAX_CON);\n                    } else {\n                        theClient.setClientEvent(ClientEvent.ACCEPT);\n                    }\n                    try {\n                        _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                        logger.finest(\"Asking \" + _chPolled.getName() + \" to handle.\");\n                        _chPolled.handleClient(theClient);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.warning(\"Could not borrow ClientHandler Object from pool. Error: \" + nsee);\n                        logger.warning(\"Closing SocketChannel [\" + serverChannel.socket() + \"] since no ClientHandler available.\");\n                        socketChannel.close();\n                    }\n                    if (_chPolled != null) {\n                        try {\n                            getClientPool().addClient(_chPolled, true);\n                        } catch (java.util.NoSuchElementException nsee) {\n                            logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                            //logger.warning(\"Closing SocketChannel [\"+serverChannel.socket()+\"] since no Thread available.\");\n                            //socketChannel.close();\n                            //returnClientHandlerToPool(_chPolled);\n                        }\n                        _chPolled = null;\n                    }\n                    socketChannel = null;\n                    client = null;\n                    //reset it back\n                    setSkipValidation(false);\n                } else if (key.isValid() && key.isReadable()) {\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Readable, removing OP_READ from interestOps for \" + _ch.getName());\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_READ));\n                        _ch.addEvent(ClientEvent.READ);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.READ);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (key.isValid() && key.isWritable()) {\n                    if (getClientPool().shouldNioWriteHappen() == false) {\n                        //no need to remove the key\n                        continue;\n                    }\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Writable, removing OP_WRITE from interestOps for \" + _ch.getName());\n                        //remove OP_WRITE from interest set\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));\n                        _ch.addEvent(ClientEvent.WRITE);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.WRITE);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (stopServer == true && key.isAcceptable()) {\n                    //we will not accept this key\n                    //reset it back\n                    setSkipValidation(false);\n                } else {\n                    logger.warning(\"Unknown key got in SelectionKey: \" + key);\n                }\n                //Remove key\n                iterator.remove();\n                Thread.yield();\n            }\n            //end of iterator\n            iterator = null;\n        }\n        //end of loop\n    }\n\n    private boolean checkAccessConstraint(Socket socket) {\n        try {\n            if (getAccessConstraintConfig() != null) {\n                getAccessConstraintConfig().checkAccept(socket);\n            }\n            return true;\n        } catch (SecurityException se) {\n            logger.warning(\"SecurityException occurred accepting connection : \" + se.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException {\n        if (getSelector() == null) {\n            throw new IllegalStateException(\"Selector is not open!\");\n        }\n        if (channel == null) {\n            throw new IllegalArgumentException(\"Can't register a null channel!\");\n        }\n        if (channel.isConnected() == false) {\n            throw new ClosedChannelException();\n        }\n        RegisterChannelRequest req = new RegisterChannelRequest(channel, ops, att);\n        RegisterChannelRequest reqOld = null;\n        synchronized (registerChannelRequestMap) {\n            reqOld = (RegisterChannelRequest) registerChannelRequestMap.get(channel);\n            if (reqOld == null) {\n                registerChannelRequestMap.put(channel, req);\n                getSelector().wakeup();\n                return true;\n            } else {\n                if (reqOld.equals(req) == false) {\n                    reqOld.setOps(reqOld.getOps() | req.getOps());\n                    reqOld.setAtt(req.getAtt());\n                    return true;\n                }\n                return false;\n            }\n        }\n        /*\n\t\tlogger.warning(\"Before register...\");\n\t\tchannel.register(getSelector(), ops, att);\n\t\tlogger.warning(\"Before wakeup and after register...\");\n\t\tgetSelector().wakeup();\n\t\tlogger.warning(\"After wakeup...\");\n\t\t*/\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig) {\n        logger.finer(\"Creating ByteBufferPool pool\");\n        int bufferSize = getBasicConfig().getAdvancedSettings().getByteBufferSize();\n        boolean useDirectByteBuffer = getBasicConfig().getAdvancedSettings().getUseDirectByteBuffer();\n        PoolableObjectFactory factory = new ByteBufferObjectFactory(bufferSize, useDirectByteBuffer);\n        byteBufferPool = poolManager.makeByteBufferPool(factory, opConfig);\n        poolManager.initPool(byteBufferPool, opConfig);\n    }\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool() {\n        return byteBufferPool;\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientThread pool\");\n        ThreadObjectFactory factory = new ThreadObjectFactory();\n        ObjectPool objectPool = poolManager.makeClientPool(factory, opConfig);\n        pool = new ClientPool(makeQSObjectPool(objectPool), opConfig);\n        factory.setClientPool(pool);\n        pool.setMaxThreadsForNioWrite(getBasicConfig().getAdvancedSettings().getMaxThreadsForNioWrite());\n        poolManager.initPool(objectPool, opConfig);\n    }\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler) {\n        clientWriteHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler() {\n        return clientWriteHandlerString;\n    }\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime() {\n        return lastStartTime;\n    }\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag) {\n        org.quickserver.util.io.ByteBufferOutputStream.setDebug(flag);\n        org.quickserver.util.io.ByteBufferInputStream.setDebug(flag);\n    }\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier() {\n        return clientIdentifier;\n    }\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception {\n        return (QSObjectPool) qsObjectPoolMaker.getQSObjectPool(objectPool);\n    }\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode() {\n        return blockingMode;\n    }\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception {\n        if (clientCommandHandlerString == null && clientEventHandlerString == null) {\n            logger.severe(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n            throw new AppException(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n        }\n        clientCommandHandler = null;\n        if (clientCommandHandlerString != null) {\n            logger.finest(\"Loading ClientCommandHandler class..\");\n            Class clientCommandHandlerClass = getClass(clientCommandHandlerString, true);\n            clientCommandHandler = (ClientCommandHandler) clientCommandHandlerClass.newInstance();\n        }\n        boolean setClientCommandHandlerLookup = false;\n        clientEventHandler = null;\n        if (clientEventHandlerString == null) {\n            clientEventHandlerString = \"org.quickserver.net.server.impl.DefaultClientEventHandler\";\n            setClientCommandHandlerLookup = true;\n        }\n        logger.finest(\"Loading ClientEventHandler class..\");\n        if (clientEventHandlerString.equals(clientCommandHandlerString) && ClientEventHandler.class.isInstance(clientCommandHandler)) {\n            clientEventHandler = (ClientEventHandler) clientCommandHandler;\n        } else {\n            clientEventHandler = (ClientEventHandler) getClass(clientEventHandlerString, true).newInstance();\n            if (setClientCommandHandlerLookup) {\n                ((DefaultClientEventHandler) clientEventHandler).setClientCommandHandler(clientCommandHandler);\n            }\n        }\n        clientExtendedEventHandler = null;\n        if (clientExtendedEventHandlerString != null) {\n            logger.finest(\"Loading ClientExtendedEventHandler class..\");\n            if (clientExtendedEventHandlerString.equals(clientCommandHandlerString) && ClientExtendedEventHandler.class.isInstance(clientCommandHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientCommandHandler;\n            } else if (clientExtendedEventHandlerString.equals(clientEventHandlerString) && ClientExtendedEventHandler.class.isInstance(clientEventHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientEventHandler;\n            } else {\n                Class clientExtendedEventHandlerClass = getClass(clientExtendedEventHandlerString, true);\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientExtendedEventHandlerClass.newInstance();\n            }\n        }\n        clientObjectHandler = null;\n        if (clientObjectHandlerString != null) {\n            logger.finest(\"Loading ClientObjectHandler class..\");\n            if (clientObjectHandlerString.equals(clientCommandHandlerString) && ClientObjectHandler.class.isInstance(clientCommandHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientCommandHandler;\n            } else if (clientObjectHandlerString.equals(clientEventHandlerString) && ClientObjectHandler.class.isInstance(clientEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientEventHandler;\n            } else if (clientObjectHandlerString.equals(clientExtendedEventHandlerString) && ClientObjectHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientExtendedEventHandler;\n            } else {\n                clientObjectHandler = (ClientObjectHandler) getClass(clientObjectHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientBinaryHandler = null;\n        if (clientBinaryHandlerString != null) {\n            logger.finest(\"Loading ClientBinaryHandler class..\");\n            if (clientBinaryHandlerString.equals(clientCommandHandlerString) && ClientBinaryHandler.class.isInstance(clientCommandHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientCommandHandler;\n            } else if (clientBinaryHandlerString.equals(clientEventHandlerString) && ClientBinaryHandler.class.isInstance(clientEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientExtendedEventHandlerString) && ClientBinaryHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientExtendedEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientObjectHandlerString) && ClientBinaryHandler.class.isInstance(clientObjectHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientObjectHandler;\n            } else {\n                clientBinaryHandler = (ClientBinaryHandler) getClass(clientBinaryHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientWriteHandler = null;\n        if (clientWriteHandlerString != null) {\n            logger.finest(\"Loading ClientWriteHandler class..\");\n            if (clientWriteHandlerString.equals(clientCommandHandlerString) && ClientWriteHandler.class.isInstance(clientCommandHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientCommandHandler;\n            } else if (clientWriteHandlerString.equals(clientEventHandlerString) && ClientWriteHandler.class.isInstance(clientEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientEventHandler;\n            } else if (clientWriteHandlerString.equals(clientExtendedEventHandlerString) && ClientWriteHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientExtendedEventHandler;\n            } else if (clientWriteHandlerString.equals(clientObjectHandlerString) && ClientWriteHandler.class.isInstance(clientObjectHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientObjectHandler;\n            } else if (clientWriteHandlerString.equals(clientBinaryHandlerString) && ClientWriteHandler.class.isInstance(clientBinaryHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientBinaryHandler;\n            } else {\n                clientWriteHandler = (ClientWriteHandler) getClass(clientWriteHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        Class authenticatorClass = null;\n        if (clientAuthenticationHandlerString != null) {\n            logger.finest(\"Loading ClientAuthenticationHandler class..\");\n            authenticatorClass = getClass(clientAuthenticationHandlerString, true);\n        }\n        if (authenticatorClass != null) {\n            Object obj = authenticatorClass.newInstance();\n            if (ClientAuthenticationHandler.class.isInstance(obj))\n                clientAuthenticationHandler = (ClientAuthenticationHandler) obj;\n            else\n                authenticator = (Authenticator) obj;\n        }\n        clientDataClass = null;\n        if (clientDataString != null) {\n            logger.finest(\"Loading ClientData class..\");\n            clientDataClass = getClass(clientDataString, true);\n        }\n        Assertion.affirm(clientEventHandler != null, \"ClientEventHandler was not loaded!\");\n    }\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler) {\n        clientEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler() {\n        return clientEventHandlerString;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException {\n        if (dataType == DataType.IN)\n            this.defaultDataModeIN = dataMode;\n        if (dataType == DataType.OUT)\n            this.defaultDataModeOUT = dataMode;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException {\n        defaultDataModeIN = defaultDataMode.getDataMode(DataType.IN);\n        defaultDataModeOUT = defaultDataMode.getDataMode(DataType.OUT);\n        ;\n    }\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType) {\n        if (dataType == DataType.IN)\n            return defaultDataModeIN;\n        if (dataType == DataType.OUT)\n            return defaultDataModeOUT;\n        else\n            throw new IllegalArgumentException(\"Unknown DataType: \" + dataType);\n    }\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler) {\n        clientExtendedEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler() {\n        return clientExtendedEventHandlerString;\n    }\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception {\n        if (getApplicationJarPath() != null && getClassLoader() == null) {\n            setClassLoader(ClassUtil.getClassLoader(getApplicationJarPath()));\n            //update qsadmin to use the same\n            if (adminServer != null) {\n                adminServer.getServer().setClassLoader(getClassLoader());\n            }\n        }\n    }\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID() {\n        return pid;\n    }\n\n    public boolean isRawCommunicationLogging() {\n        return rawCommunicationLogging;\n    }\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging) {\n        this.rawCommunicationLogging = rawCommunicationLogging;\n    }\n\n    public int getRawCommunicationMaxLength() {\n        return rawCommunicationMaxLength;\n    }\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength) {\n        this.rawCommunicationMaxLength = rawCommunicationMaxLength;\n    }\n}\n",
        "test_prompt": "// QuickServer_3Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#getNewLine()} method.\n*/\nclass QuickServer_3Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// QuickServer_4Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#initService(Object[])} method.\n*/\nclass QuickServer_4Test {\n}"
            }
        ],
        "id": "9704545d-3384-4850-a061-8d06d0d03220",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_4Test.java",
        "original_code": "// QuickServer.java\n/*\n * This file is part of the QuickServer library \n * Copyright (C) QuickServer.org\n *\n * Use, modification, copying and distribution of this software is subject to\n * the terms and conditions of the GNU Lesser General Public License. \n * You should have received a copy of the GNU LGP License along with this \n * library; if not, you can download a copy from <http://www.quickserver.org/>.\n *\n * For questions, suggestions, bug-reports, enhancement-requests etc.\n * visit http://www.quickserver.org\n *\n */\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n *  Main class of QuickServer library. This class is used to create\n *  multi client servers quickly.\n *  <p>\n *  Ones a client is connected, it creates {@link ClientHandler} object,\n *  which is run using any thread available from the pool of threads\n *  maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n *  handles the client. <br/>\n *  QuickServer divides the application logic of its developer over eight\n *  class, <br>\n *  \t<ul>\n * \t\t<li>ClientEventHandler<br>\n *  \t\t   &nbsp;Handles client events [Optional Class].\n *  \t\t<li>ClientCommandHandler [#]<br>\n *  \t\t   &nbsp;Handles client character/string commands.\n *  \t\t<li>ClientObjectHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - Object commands.\n * \t\t<li>ClientBinaryHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - binary data.\n * \t\t<li>ClientWriteHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n *  \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n *  \t\t\t&nbsp;Used to Authencatet a client.\n *  \t\t<li>ClientData [Optional Class]<br>\n *  \t\t\t&nbsp;Client data carrier (support class)\n * \t\t<li>ClientExtendedEventHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles extended client events.\n *  \t</ul>\n *\n *  [#] = Any one of these have to be set based on default DataMode for input.\n *  The default DataMode for input is String so if not changes you will\n *  have to set ClientCommandHandler.\n *  </p>\n *  <p>\n *   Eg:\n *  <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n *  @version 1.4.8\n *  @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //Some variable are not initialised to any value because the\n    //default java value was desired initial value.\n    //'dev ' = development build not yet final\n    //'beta' = test build all features\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n        if (System.getProperty(\"org.quickserver.useOSLineSeparator\") != null && System.getProperty(\"org.quickserver.useOSLineSeparator\").equals(\"true\")) {\n            NEW_LINE = System.getProperty(\"line.separator\");\n        } else {\n            NEW_LINE = \"\\r\\n\";\n        }\n        String _pid = ManagementFactory.getRuntimeMXBean().getName();\n        int i = _pid.indexOf(\"@\");\n        pid = _pid.substring(0, i);\n        System.out.print(\"Loading QuickServer v\" + getVersion() + \" [PID:\" + pid + \"]\");\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //--v1.2\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //for Service interface\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n        System.out.println(\" Done\");\n        //should be commented if not a patch release\n        //System.out.println(\"[Includes patch(#): t=152&p=532]\");\n        //should be commented if not a dev release\n        //System.out.println(\"[Dev Build Date: Saturday, October 29, 2005]\");\n        logger.log(Level.FINE, \"PID: {0}\", pid);\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion() {\n        return VER;\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo() {\n        return getVersionNo(VER);\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver) {\n        //String ver = getVersion();\n        float version = 0;\n        //check if beta\n        int i = ver.indexOf(\" \");\n        if (i == -1)\n            i = ver.length();\n        ver = ver.substring(0, i);\n        //check for sub version\n        i = ver.indexOf(\".\");\n        if (i != -1) {\n            int j = ver.indexOf(\".\", i);\n            if (j != -1) {\n                ver = ver.substring(0, i) + \".\" + MyString.replaceAll(ver.substring(i + 1), \".\", \"\");\n            }\n        }\n        try {\n            version = Float.parseFloat(ver);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Corrupt QuickServer\");\n        }\n        return version;\n    }\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine() {\n        return NEW_LINE;\n    }\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString() {\n        return serverName + \" : \" + getPort();\n    }\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n        setClientCommandHandler(commandHandler);\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n        //send to another constructor\n        this(commandHandler);\n        setPort(port);\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException {\n        logger.log(Level.FINE, \"Starting {0}\", getName());\n        if (isClosed() == false) {\n            logger.log(Level.WARNING, \"Server {0} already running.\", getName());\n            throw new AppException(\"Server \" + getName() + \" already running.\");\n        }\n        blockingMode = getBasicConfig().getServerMode().getBlocking();\n        if (getSecure().isEnable() && blockingMode == false) {\n            //TODO we need to fix this..\n            logger.warning(\"QuickServer does not support secure servers under non-blocking mode! So will run in blocking mode.\");\n            blockingMode = true;\n            getBasicConfig().getServerMode().setBlocking(blockingMode);\n        }\n        if (serverBanner == null) {\n            serverBanner = \"\\n-------------------------------\" + \"\\n Name : \" + getName() + \"\\n Port : \" + getPort() + \"\\n-------------------------------\\n\";\n            logger.finest(\"Default Server Banner Generated\");\n        }\n        try {\n            loadApplicationClasses();\n            //load class from Advanced Settings\n            Class clientIdentifierClass = getClass(getBasicConfig().getAdvancedSettings().getClientIdentifier(), true);\n            clientIdentifier = (ClientIdentifier) clientIdentifierClass.newInstance();\n            clientIdentifier.setQuickServer(QuickServer.this);\n            //load class from ObjectPoolConfig\n            Class poolManagerClass = getClass(getBasicConfig().getObjectPoolConfig().getPoolManager(), true);\n            poolManager = (PoolManager) poolManagerClass.newInstance();\n            //load class QSObjectPoolMaker\n            Class qsObjectPoolMakerClass = getClass(getBasicConfig().getAdvancedSettings().getQSObjectPoolMaker(), true);\n            qsObjectPoolMaker = (QSObjectPoolMaker) qsObjectPoolMakerClass.newInstance();\n            loadServerHooksClasses();\n            processServerHooks(ServerHook.PRE_STARTUP);\n            if (getSecure().isLoad() == true)\n                //v1.4.0\n                loadSSLContext();\n            loadBusinessLogic();\n        } catch (ClassNotFoundException e) {\n            logger.log(Level.SEVERE, \"Could not load class/s: \" + e, e);\n            throw new AppException(\"Could not load class/s : \" + e);\n        } catch (InstantiationException e) {\n            logger.log(Level.SEVERE, \"Could not instantiate class/s: \" + e, e);\n            throw new AppException(\"Could not instantiate class/s: \" + e);\n        } catch (IllegalAccessException e) {\n            logger.log(Level.SEVERE, \"Illegal access to class/s: \" + e, e);\n            throw new AppException(\"Illegal access to class/s: \" + e);\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, \"IOException: \" + e, e);\n            throw new AppException(\"IOException: \" + e);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Exception: \" + e, e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Exception : \" + e);\n        }\n        //v1.3.3\n        if (getSecurityManagerClass() != null) {\n            System.setSecurityManager(getSecurityManager());\n        }\n        setServiceState(Service.INIT);\n        t = new Thread(this, \"QuickServer - \" + getName());\n        t.start();\n        do {\n            Thread.yield();\n        } while (getServiceState() == Service.INIT);\n        if (getServiceState() != Service.RUNNING) {\n            if (exceptionInRun != null)\n                throw new AppException(\"Could not start server \" + getName() + \"! Details: \" + exceptionInRun);\n            else\n                throw new AppException(\"Could not start server \" + getName());\n        }\n        lastStartTime = new java.util.Date();\n        logger.log(Level.FINE, \"Started {0}, Date: {1}\", new Object[] { getName(), lastStartTime });\n    }\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException {\n        processServerHooks(ServerHook.PRE_SHUTDOWN);\n        logger.log(Level.WARNING, \"Stopping {0}\", getName());\n        stopServer = true;\n        Socket death = null;\n        if (isClosed() == true) {\n            logger.log(Level.WARNING, \"Server {0} is not running!\", getName());\n            throw new AppException(\"Server \" + getName() + \" is not running!\");\n        }\n        try {\n            if (getBlockingMode() == true) {\n                if (getSecure().isEnable() == false) {\n                    death = new Socket(server.getInetAddress(), server.getLocalPort());\n                    death.getInputStream().read();\n                    death.close();\n                } else {\n                    death = getSSLSocketFactory().createSocket(server.getInetAddress(), server.getLocalPort());\n                    Thread.sleep(100);\n                    death.close();\n                }\n            }\n            if (serverSocketChannel != null) {\n                serverSocketChannel.close();\n            }\n        } catch (IOException e) {\n            logger.log(Level.FINE, \"IOError stopping {0}: {1}\", new Object[] { getName(), e });\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error stopping {0}: {1}\", new Object[] { getName(), e });\n            throw new AppException(\"Error in stopServer \" + getName() + \": \" + e);\n        }\n        for (int i = 0; getServiceState() != Service.STOPPED; i++) {\n            try {\n                Thread.sleep(60);\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error waiting for {0} to fully stop. Error: {1}\", new Object[] { getName(), e });\n            }\n            if (i > 1000) {\n                logger.severe(\"Server was not stopped even after 10sec.. will terminate now.\");\n                System.exit(-1);\n            }\n        }\n        if (adminServer == null || getQSAdminServer().getServer() != this) {\n            //so this is not qsadmin\n            setClassLoader(null);\n        }\n        logger.log(Level.INFO, \"Stopped {0}\", getName());\n    }\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException {\n        stopServer();\n        startServer();\n    }\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName() {\n        return serverName;\n    }\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name) {\n        serverName = name;\n        logger.log(Level.FINEST, \"Set to : {0}\", name);\n    }\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner() {\n        return serverBanner;\n    }\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner) {\n        serverBanner = banner;\n        logger.log(Level.FINEST, \"Set to : {0}\", banner);\n    }\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port) {\n        if (port < 0) {\n            throw new IllegalArgumentException(\"Port number can not be less than 0!\");\n        }\n        serverPort = port;\n        logger.log(Level.FINEST, \"Set to {0}\", port);\n    }\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort() {\n        if (isClosed() == false) {\n            return server.getLocalPort();\n        }\n        if (getSecure().isEnable() == false) {\n            return serverPort;\n        } else {\n            int _port = getSecure().getPort();\n            if (_port == -1)\n                return serverPort;\n            else\n                return _port;\n        }\n    }\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler) {\n        clientCommandHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler() {\n        return clientCommandHandlerString;\n    }\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data) {\n        this.clientDataString = data;\n        logger.log(Level.FINEST, \"Set to {0}\", data);\n    }\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData() {\n        return clientDataString;\n    }\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time) {\n        if (time > 0)\n            socketTimeout = time;\n        else\n            socketTimeout = 0;\n        logger.log(Level.FINEST, \"Set to {0}\", socketTimeout);\n    }\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout() {\n        return socketTimeout;\n    }\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry) {\n        maxAuthTry = authTry;\n        logger.log(Level.FINEST, \"Set to {0}\", authTry);\n    }\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry() {\n        return maxAuthTry;\n    }\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg) {\n        maxAuthTryMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg() {\n        return maxAuthTryMsg;\n    }\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg) {\n        timeoutMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg() {\n        return timeoutMsg;\n    }\n\n    private TheClient initTheClient() {\n        TheClient theClient = new TheClient();\n        theClient.setServer(QuickServer.this);\n        theClient.setTimeoutMsg(getTimeoutMsg());\n        //v1.2\n        theClient.setMaxAuthTry(getMaxAuthTry());\n        theClient.setMaxAuthTryMsg(getMaxAuthTryMsg());\n        theClient.setClientEventHandler(clientEventHandler);\n        //v1.4.6\n        theClient.setClientExtendedEventHandler(clientExtendedEventHandler);\n        theClient.setClientCommandHandler(clientCommandHandler);\n        //v1.2\n        theClient.setClientObjectHandler(clientObjectHandler);\n        //v1.4\n        theClient.setClientBinaryHandler(clientBinaryHandler);\n        //v1.4.5\n        theClient.setClientWriteHandler(clientWriteHandler);\n        //v1.3\n        theClient.setAuthenticator(authenticator);\n        //v1.4.6\n        theClient.setClientAuthenticationHandler(clientAuthenticationHandler);\n        theClient.setTimeout(socketTimeout);\n        theClient.setMaxConnectionMsg(maxConnectionMsg);\n        //v1.3.2\n        theClient.setCommunicationLogging(getCommunicationLogging());\n        return theClient;\n    }\n\n    public void run() {\n        exceptionInRun = null;\n        TheClient theClient = initTheClient();\n        try {\n            stopServer = false;\n            closeAllPools();\n            initAllPools();\n            makeServerSocket();\n            //print banner\n            System.out.println(serverBanner);\n            //v1.2\n            setServiceState(Service.RUNNING);\n            //v1.3.3\n            processServerHooks(ServerHook.POST_STARTUP);\n            if (getBlockingMode() == false) {\n                runNonBlocking(theClient);\n                if (stopServer == true) {\n                    logger.log(Level.FINEST, \"Closing selector for {0}\", getName());\n                    selector.close();\n                }\n                return;\n            } else {\n                runBlocking(theClient);\n            }\n        } catch (BindException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"{0} BindException for Port {1} @ {2} : {3}\", new Object[] { getName(), getPort(), getBindAddr().getHostAddress(), e.getMessage() });\n        } catch (javax.net.ssl.SSLException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"SSLException {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (IOException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"IOError {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (Exception e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"Error {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } finally {\n            if (getBlockingMode() == true) {\n                logger.log(Level.WARNING, \"Closing {0}\", getName());\n                try {\n                    if (isClosed() == false) {\n                        server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            } else if (getBlockingMode() == false && exceptionInRun != null) {\n                logger.log(Level.WARNING, \"Closing {0} - Had Error: {1}\", new Object[] { getName(), exceptionInRun });\n                try {\n                    if (isClosed() == false) {\n                        if (serverSocketChannel != null)\n                            serverSocketChannel.close();\n                        if (server != null)\n                            server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n        }\n    }\n\n    //end of run\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnection = maxConnection;\n        else\n            this.maxConnection = maxConnection;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnection);\n    }\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection() {\n        return maxConnection;\n    }\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount() {\n        if (clientHandlerPool != null) {\n            try {\n                return getClientHandlerPool().getNumActive();\n            } catch (Exception e) {\n                return 0;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnectionMsg = maxConnectionMsg;\n        else\n            this.maxConnectionMsg = maxConnectionMsg;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnectionMsg);\n    }\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg() {\n        return maxConnectionMsg;\n    }\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException {\n        ipAddr = InetAddress.getByName(bindAddr);\n        logger.log(Level.FINEST, \"Set to {0}\", bindAddr);\n    }\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr() {\n        if (ipAddr == null) {\n            try {\n                ipAddr = InetAddress.getByName(\"0.0.0.0\");\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Unable to create default ip(0.0.0.0) : {0}\", e);\n                throw new RuntimeException(\"Error: Unable to find servers own ip : \" + e);\n            }\n        }\n        return ipAddr;\n    }\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects) {\n        this.storeObjects = storeObjects;\n    }\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects() {\n        return storeObjects;\n    }\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port) {\n        getQSAdminServer().getServer().setPort(port);\n    }\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort() {\n        return getQSAdminServer().getServer().getPort();\n    }\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator) {\n        getQSAdminServer().getServer().setClientAuthenticationHandler(authenticator);\n    }\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator() {\n        return getQSAdminServer().getServer().getAuthenticator();\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException {\n        getQSAdminServer().setClientAuthenticationHandler(authenticator);\n        getQSAdminServer().startServer(port);\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException {\n        getQSAdminServer().startServer();\n    }\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer() {\n        if (adminServer == null)\n            adminServer = new QSAdminServer(QuickServer.this);\n        return adminServer;\n    }\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer) {\n        if (adminServer == null)\n            this.adminServer = adminServer;\n    }\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed() {\n        if (server == null)\n            return true;\n        return server.isClosed();\n    }\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger() {\n        if (appLogger != null)\n            return appLogger;\n        return logger;\n    }\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger) {\n        this.appLogger = appLogger;\n    }\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler) {\n        clientObjectHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler() {\n        return clientObjectHandlerString;\n    }\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        if (formatter == null)\n            return;\n        consoleLoggingformatter = formatter;\n        java.util.logging.Formatter conformatter = (java.util.logging.Formatter) getClass(formatter, true).newInstance();\n        Logger jdkLogger = Logger.getLogger(\"\");\n        Handler[] handlers = jdkLogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                handlers[index].setFormatter(conformatter);\n            }\n        }\n        logger.log(Level.FINEST, \"Set to {0}\", formatter);\n    }\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter() {\n        return consoleLoggingformatter;\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MiniFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to logging.MiniFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MicroFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to MicroFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        boolean isConsole = true;\n        try {\n            if (System.console() == null) {\n                isConsole = false;\n            }\n        } catch (Throwable e) {\n            //ignore\n        }\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                if (isConsole == false && level != Level.OFF) {\n                    System.out.println(\"QuickServer: You do not have a console.. so turning console logger off..\");\n                    level = Level.OFF;\n                }\n                if (level == Level.OFF) {\n                    logger.info(\"QuickServer: Removing console handler.. \");\n                    rlogger.removeHandler(handlers[index]);\n                    handlers[index].setLevel(level);\n                    handlers[index].close();\n                } else {\n                    handlers[index].setLevel(level);\n                }\n            }\n        }\n        if (level == Level.SEVERE)\n            consoleLoggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            consoleLoggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            consoleLoggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            consoleLoggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            consoleLoggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            consoleLoggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            consoleLoggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            consoleLoggingLevel = \"OFF\";\n        else\n            consoleLoggingLevel = \"UNKNOWN\";\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel() {\n        return consoleLoggingLevel;\n    }\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            handlers[index].setLevel(level);\n        }\n        if (level == Level.SEVERE)\n            loggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            loggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            loggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            loggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            loggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            loggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            loggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            loggingLevel = \"OFF\";\n        else\n            loggingLevel = \"UNKNOWN\";\n        consoleLoggingLevel = loggingLevel;\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    //*** Start of Service interface methods\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError() {\n        return serviceError;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param) {\n        serviceError = null;\n        try {\n            initServer(param);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig) {\n        serviceError = null;\n        try {\n            initServer(qsConfig);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING)\n            return false;\n        try {\n            startServer();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService() {\n        serviceError = null;\n        if (getServiceState() == Service.STOPPED)\n            return false;\n        try {\n            stopServer();\n            clearAllPools();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING) {\n            suspendMaxConnection = maxConnection;\n            suspendMaxConnectionMsg = maxConnectionMsg;\n            maxConnection = 0;\n            maxConnectionMsg = \"Service is suspended.\";\n            setServiceState(Service.SUSPENDED);\n            logger.log(Level.INFO, \"Service {0} is suspended.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService() {\n        serviceError = null;\n        if (getServiceState() == Service.SUSPENDED) {\n            maxConnection = suspendMaxConnection;\n            maxConnectionMsg = suspendMaxConnectionMsg;\n            setServiceState(Service.RUNNING);\n            logger.log(Level.INFO, \"Service {0} resumed.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info() {\n        serviceError = null;\n        StringBuilder buf = new StringBuilder();\n        buf.append(getName()).append(\"\\n\");\n        buf.append(getBindAddr().getHostAddress()).append(\" \");\n        buf.append(getPort()).append(\"\\n\");\n        return buf.toString();\n    }\n\n    // *** End of Service interface methods\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException {\n        QuickServerConfig qsConfig = null;\n        try {\n            qsConfig = ConfigReader.read((String) param[0]);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not init server from xml file {0} : {1}\", new Object[] { new File((String) param[0]).getAbsolutePath(), e });\n            throw new AppException(\"Could not init server from xml file\", e);\n        }\n        initServer(qsConfig);\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException {\n        setConfig(qsConfig);\n        try {\n            configQuickServer();\n            loadApplicationClasses();\n            //start InitServerHooks\n            InitServerHooks ish = getConfig().getInitServerHooks();\n            if (ish != null) {\n                Iterator iterator = ish.iterator();\n                String initServerHookClassName = null;\n                Class initServerHookClass = null;\n                InitServerHook initServerHook = null;\n                while (iterator.hasNext()) {\n                    initServerHookClassName = (String) iterator.next();\n                    initServerHookClass = getClass(initServerHookClassName, true);\n                    initServerHook = (InitServerHook) initServerHookClass.newInstance();\n                    logger.log(Level.INFO, \"Loaded init server hook: {0}\", initServerHookClassName);\n                    logger.log(Level.FINE, \"Init server hook info: {0}\", initServerHook.info());\n                    initServerHook.handleInit(QuickServer.this);\n                }\n            }\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not load init server hook: {0}\", e);\n            logger.log(Level.WARNING, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Could not load init server hook\", e);\n        }\n        setServiceState(Service.INIT);\n        logger.log(Level.FINEST, \"\\r\\n{0}\", MyString.getSystemInfo(getVersion()));\n    }\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState() {\n        return serviceState;\n    }\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state) {\n        serviceState = state;\n    }\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp) {\n        if (temp.equals(\"SEVERE\"))\n            qs.setConsoleLoggingLevel(Level.SEVERE);\n        else if (temp.equals(\"WARNING\"))\n            qs.setConsoleLoggingLevel(Level.WARNING);\n        else if (temp.equals(\"INFO\"))\n            qs.setConsoleLoggingLevel(Level.INFO);\n        else if (temp.equals(\"CONFIG\"))\n            qs.setConsoleLoggingLevel(Level.CONFIG);\n        else if (temp.equals(\"FINE\"))\n            qs.setConsoleLoggingLevel(Level.FINE);\n        else if (temp.equals(\"FINER\"))\n            qs.setConsoleLoggingLevel(Level.FINER);\n        else if (temp.equals(\"FINEST\"))\n            qs.setConsoleLoggingLevel(Level.FINEST);\n        else if (temp.equals(\"OFF\"))\n            qs.setConsoleLoggingLevel(Level.OFF);\n        else\n            logger.log(Level.WARNING, \"unknown level {0}\", temp);\n    }\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception {\n        QuickServer qs = QuickServer.this;\n        //v1.3\n        qs.setConfig(config);\n        qs.setBasicConfig(config);\n        String temp = config.getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        temp = null;\n        qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        //v1.3.3\n        qs.setSecurityManagerClass(config.getSecurityManagerClass());\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        temp = config.getApplicationJarPath();\n        if (temp != null) {\n            File ajp = new File(temp);\n            if (ajp.isAbsolute() == false) {\n                temp = config.getConfigFile();\n                ajp = new File(temp);\n                temp = ajp.getParent() + File.separatorChar + config.getApplicationJarPath();\n                config.setApplicationJarPath(temp);\n                temp = null;\n            }\n            qs.setApplicationJarPath(config.getApplicationJarPath());\n            //set path also to QSAdmin\n            if (config.getQSAdminServerConfig() != null) {\n                getQSAdminServer().getServer().setApplicationJarPath(config.getApplicationJarPath());\n            }\n        }\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception {\n        QuickServer qs = getQSAdminServer().getServer();\n        qs.setBasicConfig(config);\n        //set the Logging Level to same as main QS\n        //config.getConsoleLoggingLevel();\n        String temp = getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        //set the Logging Formatter to same as main QS\n        //qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setConsoleLoggingFormatter(getConsoleLoggingFormatter());\n        //v1.4.6\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        //v1.4.6\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        getQSAdminServer().setCommandPlugin(config.getCommandPlugin());\n        //v1.3.2\n        if (config.getCommandShellEnable().equals(\"true\"))\n            getQSAdminServer().setShellEnable(true);\n        getQSAdminServer().setPromptName(config.getCommandShellPromptName());\n        //v1.3.3\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception {\n        configQuickServer(getConfig());\n        if (getConfig().getQSAdminServerConfig() != null) {\n            configQuickServer(getConfig().getQSAdminServerConfig());\n        }\n    }\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args) {\n        try {\n            if (args.length >= 1) {\n                if (args[0].equals(\"-about\")) {\n                    org.quickserver.net.server.gui.About.main(null);\n                } else if (args[0].equals(\"-load\") && args.length >= 2) {\n                    QuickServer qs = QuickServer.load(args[1]);\n                    if (qs != null)\n                        handleOptions(args, qs);\n                } else {\n                    System.out.println(printUsage());\n                }\n            } else {\n                System.out.println(printUsage());\n                org.quickserver.net.server.gui.About.showAbout();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException {\n        QuickServer qs = new QuickServer();\n        Object[] config = new Object[] { xml };\n        qs.initServer(config);\n        qs.startServer();\n        if (qs.getConfig().getQSAdminServerConfig() != null) {\n            qs.startQSAdminServer();\n        }\n        return qs;\n    }\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"QuickServer - Java library/framework for creating robust multi-client TCP servers.\\n\");\n        sb.append(\"Copyright (C) QuickServer.org\\n\\n\");\n        sb.append(\"Usage: QuickServer [-options]\\n\");\n        sb.append(\"Where options include:\\n\");\n        sb.append(\"  -about\\t\" + \"Opens About Dialog box\\n\");\n        sb.append(\"  -load <xml_config_file> [load-options]\\t\" + \"Loads the server from xml file.\\n\");\n        sb.append(\"  Where load-options include:\\n\");\n        sb.append(\"     -fullXML2File <file_name>\\t\" + \"Dumps the Full XML configuration of the QuickServer loaded.\\n\");\n        return sb.toString();\n    }\n\n    private static void handleOptions(String[] args, QuickServer quickserver) {\n        if (args.length < 3)\n            return;\n        if (args[2].equals(\"-fullXML2File\") && args.length >= 4) {\n            File file = new File(args[3]);\n            logger.log(Level.INFO, \"Writing full xml configuration to file: {0}\", file.getAbsolutePath());\n            try {\n                TextFile.write(file, quickserver.getConfig().toXML(null));\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error writing full xml configuration: {0}\", e);\n            }\n        }\n    }\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception {\n        try {\n            if (pool != null)\n                getClientPool().clear();\n            if (clientHandlerPool != null)\n                getClientHandlerPool().clear();\n            if (getClientDataPool() != null)\n                getClientDataPool().clear();\n            if (getDBPoolUtil() != null)\n                getDBPoolUtil().clean();\n            if (byteBufferPool != null)\n                getByteBufferPool().clear();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error: {0}\", e);\n            throw e;\n        }\n    }\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception {\n        if (pool == null && clientHandlerPool == null && getClientDataPool() == null && getDBPoolUtil() == null && byteBufferPool == null) {\n            return;\n        }\n        logger.log(Level.FINE, \"Closing pools for {0}\", getName());\n        try {\n            if (pool != null && PoolHelper.isPoolOpen(getClientPool().getObjectPool())) {\n                logger.finer(\"Closing ClientThread pool.\");\n                getClientPool().close();\n            }\n            if (clientHandlerPool != null && PoolHelper.isPoolOpen(getClientHandlerPool())) {\n                logger.finer(\"Closing ClientHandler pool.\");\n                getClientHandlerPool().close();\n            }\n            if (getClientDataPool() != null && PoolHelper.isPoolOpen(getClientDataPool())) {\n                logger.finer(\"Closing ClientData pool.\");\n                getClientDataPool().close();\n            }\n            if (getDBPoolUtil() != null) {\n                logger.finer(\"Closing DB pool.\");\n                getDBPoolUtil().clean();\n            }\n            if (byteBufferPool != null && PoolHelper.isPoolOpen(getByteBufferPool())) {\n                logger.finer(\"Closing ByteBuffer pool.\");\n                getByteBufferPool().close();\n            }\n            logger.log(Level.FINE, \"Closed pools for {0}\", getName());\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error closing pools for {0}: {1}\", new Object[] { getName(), e });\n            throw e;\n        }\n    }\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception {\n        logger.fine(\"Creating pools\");\n        if (getBlockingMode() == false) {\n            makeByteBufferPool(getBasicConfig().getObjectPoolConfig().getByteBufferObjectPoolConfig());\n        }\n        makeClientPool(getBasicConfig().getObjectPoolConfig().getThreadObjectPoolConfig());\n        makeClientHandlerPool(getBasicConfig().getObjectPoolConfig().getClientHandlerObjectPoolConfig());\n        //check if client data is poolable\n        if (clientDataClass != null) {\n            try {\n                clientData = (ClientData) clientDataClass.newInstance();\n                if (PoolableObject.class.isInstance(clientData) == true) {\n                    PoolableObject po = (PoolableObject) clientData;\n                    if (po.isPoolable() == true) {\n                        makeClientDataPool(po.getPoolableObjectFactory(), getBasicConfig().getObjectPoolConfig().getClientDataObjectPoolConfig());\n                    } else {\n                        clientDataPool = null;\n                        logger.fine(\"ClientData is not poolable!\");\n                    }\n                }\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error: {0}\", e);\n                throw e;\n            }\n        }\n        try {\n            makeDBObjectPool();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error in makeDBObjectPool() : {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw e;\n        }\n        logger.fine(\"Created pools\");\n    }\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool() {\n        if (pool == null)\n            throw new IllegalStateException(\"No ClientPool available yet!\");\n        return pool;\n    }\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientHandler pool\");\n        PoolableObjectFactory factory = new ClientHandlerObjectFactory(getBlockingMode());\n        clientHandlerPool = poolManager.makeClientHandlerPool(factory, opConfig);\n        poolManager.initPool(clientHandlerPool, opConfig);\n        clientHandlerPool = makeQSObjectPool(clientHandlerPool);\n        clientIdentifier.setClientHandlerPool((QSObjectPool) clientHandlerPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool() {\n        if (clientHandlerPool == null)\n            throw new IllegalStateException(\"No ClientHandler Pool available yet!\");\n        return clientHandlerPool;\n    }\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config) {\n        this.config = config;\n    }\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig() {\n        return config;\n    }\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientData pool\");\n        clientDataPool = poolManager.makeClientDataPool(factory, opConfig);\n        poolManager.initPool(clientDataPool, opConfig);\n        clientDataPool = makeQSObjectPool(clientDataPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool() {\n        return clientDataPool;\n    }\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil() {\n        return dBPoolUtil;\n    }\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig) {\n        getConfig().setDBObjectPoolConfig(dBObjectPoolConfig);\n    }\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception {\n        if (getConfig().getDBObjectPoolConfig() != null) {\n            logger.fine(\"Creating DBObject Pool\");\n            //logger.finest(\"Got:\\n\"+getConfig().getDBObjectPoolConfig().toXML(null));\n            Class dbPoolUtilClass = getClass(getConfig().getDBObjectPoolConfig().getDbPoolUtil(), true);\n            dBPoolUtil = (DBPoolUtil) dbPoolUtilClass.newInstance();\n            dBPoolUtil.setDatabaseConnections(getConfig().getDBObjectPoolConfig().getDatabaseConnectionSet().iterator());\n            dBPoolUtil.initPool();\n        }\n    }\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id) {\n        return clientIdentifier.findFirstClientById(id);\n    }\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient() {\n        return clientIdentifier.findAllClient();\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern) {\n        return clientIdentifier.findAllClientById(pattern);\n    }\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key) {\n        return clientIdentifier.findClientByKey(key);\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern) {\n        return clientIdentifier.findAllClientByKey(pattern);\n    }\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted() {\n        setSkipValidation(true);\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation() {\n        return skipValidation;\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation) {\n        skipValidation = validation;\n    }\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging) {\n        this.communicationLogging = communicationLogging;\n    }\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging() {\n        return communicationLogging;\n    }\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass) {\n        if (securityManagerClass != null)\n            this.securityManagerClass = securityManagerClass;\n    }\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass() {\n        return securityManagerClass;\n    }\n\n    public SecurityManager getSecurityManager() throws AppException {\n        if (getSecurityManagerClass() == null)\n            return null;\n        SecurityManager sm = null;\n        try {\n            sm = (SecurityManager) getClass(getSecurityManagerClass(), true).newInstance();\n        } catch (ClassNotFoundException e) {\n            throw new AppException(e.getMessage());\n        } catch (InstantiationException e) {\n            throw new AppException(e.getMessage());\n        } catch (IllegalAccessException e) {\n            throw new AppException(e.getMessage());\n        }\n        return sm;\n    }\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig) {\n        this.accessConstraintConfig = accessConstraintConfig;\n    }\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig() {\n        return accessConstraintConfig;\n    }\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader) {\n        this.classLoader = classLoader;\n        Thread.currentThread().setContextClassLoader(classLoader);\n    }\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader() {\n        return classLoader;\n    }\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException {\n        if (name == null)\n            throw new IllegalArgumentException(\"Class name can't be null!\");\n        logger.log(Level.FINEST, \"Class: {0}, reload: {1}\", new Object[] { name, reload });\n        if (reload == true && classLoader != null) {\n            return classLoader.loadClass(name);\n        } else if (reload == true && classLoader == null && this.getClass().getClassLoader() != null) {\n            return this.getClass().getClassLoader().loadClass(name);\n        } else if (reload == false && classLoader != null) {\n            return Class.forName(name, true, classLoader);\n        } else /*if(reload==false && classLoader==null)*/\n        {\n            return Class.forName(name, true, this.getClass().getClassLoader());\n        }\n    }\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath) {\n        this.applicationJarPath = applicationJarPath;\n    }\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath() {\n        return applicationJarPath;\n    }\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks) {\n        this.serverHooks = serverHooks;\n    }\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks() {\n        if (serverHooks == null)\n            serverHooks = new ServerHooks();\n        return serverHooks;\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses() {\n        if (getServerHooks() == null)\n            return;\n        listOfServerHooks = new ArrayList();\n        ServerHook serverHook = null;\n        String serverHookClassName = null;\n        Class serverHookClass = null;\n        //add system hooks\n        serverHook = new GhostSocketReaper();\n        serverHook.initHook(QuickServer.this);\n        listOfServerHooks.add(serverHook);\n        ghostSocketReaper = (GhostSocketReaper) serverHook;\n        //add user hooks if any\n        Iterator iterator = getServerHooks().iterator();\n        while (iterator.hasNext()) {\n            serverHookClassName = (String) iterator.next();\n            try {\n                serverHookClass = getClass(serverHookClassName, true);\n                serverHook = (ServerHook) serverHookClass.newInstance();\n                serverHook.initHook(QuickServer.this);\n                listOfServerHooks.add(serverHook);\n                logger.log(Level.INFO, \"Loaded server hook: {0}\", serverHookClassName);\n                logger.log(Level.FINE, \"Server hook info: {0}\", serverHook.info());\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Could not load server hook [{0}]: {1}\", new Object[] { serverHookClassName, e });\n                logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            }\n        }\n        //end of while\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event) {\n        if (listOfServerHooks == null) {\n            logger.warning(\"listOfServerHooks was null!\");\n            return;\n        }\n        ServerHook serverHook = null;\n        boolean result = false;\n        Iterator iterator = listOfServerHooks.iterator();\n        String hooktype = \"UNKNOWN\";\n        switch(event) {\n            case ServerHook.PRE_STARTUP:\n                hooktype = \"PRE_STARTUP\";\n                break;\n            case ServerHook.POST_STARTUP:\n                hooktype = \"POST_STARTUP\";\n                break;\n            case ServerHook.PRE_SHUTDOWN:\n                hooktype = \"PRE_SHUTDOWN\";\n                break;\n            case ServerHook.POST_SHUTDOWN:\n                hooktype = \"POST_SHUTDOWN\";\n                break;\n        }\n        while (iterator.hasNext()) {\n            serverHook = (ServerHook) iterator.next();\n            try {\n                result = serverHook.handleEvent(event);\n            } catch (Exception e) {\n                result = false;\n                logger.log(Level.WARNING, \"Error invoking {0} hook [{1}]: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), e.getMessage() });\n            }\n            logger.log(Level.FINE, \"Invoked {0} hook [{1}] was: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), result });\n        }\n    }\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone() {\n        Object object = null;\n        try {\n            object = super.clone();\n            QuickServer _qs = (QuickServer) object;\n            _qs.setQSAdminServer(new QSAdminServer(_qs));\n        } catch (CloneNotSupportedException e) {\n            //should not happ\n            logger.log(Level.WARNING, \"Error cloning : {0}\", e);\n        }\n        return object;\n    }\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure) {\n        this.secure = secure;\n    }\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure() {\n        if (secure == null)\n            secure = new Secure();\n        return secure;\n    }\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure() {\n        return runningSecure;\n    }\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure) {\n        this.runningSecure = runningSecure;\n    }\n\n    private File makeAbsoluteToConfig(String fileName) {\n        Assertion.affirm(fileName != null, \"FileName can't be null\");\n        return ConfigReader.makeAbsoluteToConfig(fileName, getConfig());\n    }\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException {\n        server = null;\n        logger.log(Level.FINEST, \"Binding {0} to IP: {1}\", new Object[] { getName(), getBindAddr() });\n        InetSocketAddress bindAddress = new InetSocketAddress(getBindAddr(), getPort());\n        try {\n            NetworkInterface ni = NetworkInterface.getByInetAddress(getBindAddr());\n            if (ni != null) {\n                logger.fine(\"NetworkInterface: \" + ni);\n            }\n        } catch (Exception igrnore) {\n            /*ignore*/\n        } catch (Error igrnore) {\n            /*ignore*/\n        }\n        if (getSecure().isEnable() == false) {\n            logger.log(Level.FINE, \"Making a normal ServerSocket for {0}\", getName());\n            setRunningSecure(false);\n            if (getBlockingMode() == false) {\n                //for non-blocking\n                serverSocketChannel = ServerSocketChannel.open();\n                server = serverSocketChannel.socket();\n                server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n            } else {\n                //for blocking\n                server = new ServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n            }\n        } else {\n            try {\n                logger.log(Level.FINE, \"Making a secure ServerSocket for {0}\", getName());\n                getSSLContext();\n                setRunningSecure(true);\n                if (getBlockingMode() == false) {\n                    logger.log(Level.FINE, \"Making a secure ServerSocketChannel for {0}\", getName());\n                    //for non-blocking\n                    serverSocketChannel = ServerSocketChannel.open();\n                    server = serverSocketChannel.socket();\n                    server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n                } else {\n                    ServerSocketFactory ssf = getSSLContext().getServerSocketFactory();\n                    SSLServerSocket serversocket = (SSLServerSocket) ssf.createServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n                    serversocket.setNeedClientAuth(secure.isClientAuthEnable());\n                    setRunningSecure(true);\n                    secureStoreManager.logSSLServerSocketInfo(serversocket);\n                    server = serversocket;\n                    serverSocketChannel = server.getChannel();\n                    if (serverSocketChannel == null && getBlockingMode() == false) {\n                        logger.warning(\"Secure Server does not support Channel! So will run in blocking mode.\");\n                        blockingMode = false;\n                    }\n                }\n                //blocking\n            } catch (NoSuchAlgorithmException e) {\n                logger.log(Level.WARNING, \"NoSuchAlgorithmException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            } catch (KeyManagementException e) {\n                logger.log(Level.WARNING, \"KeyManagementException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            }\n        }\n        server.setReuseAddress(true);\n        int connectionTime = 0;\n        int latency = 0;\n        int bandwidth = 0;\n        connectionTime = getBasicConfig().getAdvancedSettings().getPerformancePreferencesConnectionTime();\n        latency = getBasicConfig().getAdvancedSettings().getPerformancePreferencesLatency();\n        bandwidth = getBasicConfig().getAdvancedSettings().getPerformancePreferencesBandwidth();\n        logger.log(Level.FINE, \"getPerformancePreferencesConnectionTime : {0}\", connectionTime);\n        logger.log(Level.FINE, \"getPerformancePreferencesLatency : {0}\", latency);\n        logger.log(Level.FINE, \"getPerformancePreferencesBandwidth : {0}\", bandwidth);\n        server.setPerformancePreferences(connectionTime, latency, bandwidth);\n        int clientSocketReceiveBufferSize = getBasicConfig().getAdvancedSettings().getClientSocketReceiveBufferSize();\n        if (clientSocketReceiveBufferSize > 0) {\n            logger.log(Level.FINE, \"clientSocketReceiveBufferSize: {0}\", clientSocketReceiveBufferSize);\n            server.setReceiveBufferSize(clientSocketReceiveBufferSize);\n        }\n        if (getBlockingMode() == false) {\n            logger.log(Level.FINE, \"Server Mode {0} - Non Blocking\", getName());\n            if (selector == null || selector.isOpen() == false) {\n                logger.finest(\"Opening new selector\");\n                selector = Selector.open();\n            } else {\n                logger.log(Level.FINEST, \"Reusing selector: {0}\", selector);\n            }\n            serverSocketChannel.configureBlocking(false);\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n            selector.wakeup();\n        } else {\n            logger.log(Level.FINE, \"Server Mode {0} - Blocking\", getName());\n        }\n    }\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception {\n        Assertion.affirm(basicConfig != null, \"BasicServerConfig can't be null\");\n        this.basicConfig = basicConfig;\n    }\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig() {\n        return basicConfig;\n    }\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException {\n        if (getSecure().isLoad() == false) {\n            throw new IllegalStateException(\"Secure setting is not yet enabled for loading!\");\n        }\n        logger.info(\"Loading Secure Context..\");\n        km = null;\n        tm = null;\n        try {\n            String ssManager = \"org.quickserver.security.SecureStoreManager\";\n            if (getSecure().getSecureStore() != null)\n                ssManager = getSecure().getSecureStore().getSecureStoreManager();\n            Class secureStoreManagerClass = getClass(ssManager, true);\n            secureStoreManager = (SecureStoreManager) secureStoreManagerClass.newInstance();\n            km = secureStoreManager.loadKeyManagers(getConfig());\n            logger.fine(\"KeyManager got\");\n            tm = secureStoreManager.loadTrustManagers(getConfig());\n            logger.fine(\"TrustManager got\");\n            sslc = secureStoreManager.getSSLContext(getConfig().getSecure().getProtocol());\n            sslc.init(km, tm, null);\n            logger.fine(\"SSLContext loaded\");\n        } catch (KeyStoreException e) {\n            logger.warning(\"KeyStoreException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchAlgorithmException e) {\n            logger.warning(\"NoSuchAlgorithmException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchProviderException e) {\n            logger.warning(\"NoSuchProviderException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (UnrecoverableKeyException e) {\n            logger.warning(\"UnrecoverableKeyException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (CertificateException e) {\n            logger.warning(\"CertificateException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (KeyManagementException e) {\n            logger.warning(\"KeyManagementException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (GeneralSecurityException e) {\n            logger.warning(\"GeneralSecurityException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (ClassNotFoundException e) {\n            logger.warning(\"ClassNotFoundException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (InstantiationException e) {\n            logger.warning(\"InstantiationException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (IllegalAccessException e) {\n            logger.warning(\"IllegalAccessException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        return getSSLContext(null);\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        if (protocol != null && secureStoreManager != null) {\n            SSLContext _sslc = secureStoreManager.getSSLContext(protocol);\n            _sslc.init(km, tm, null);\n            return _sslc;\n        }\n        return sslc;\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext());\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext(protocol));\n    }\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler) {\n        clientBinaryHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler() {\n        return clientBinaryHandlerString;\n    }\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector) {\n        this.selector = selector;\n    }\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector() {\n        return selector;\n    }\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception {\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        //long stime = System.currentTimeMillis();\n        //long etime = System.currentTimeMillis();\n        while (true) {\n            //etime = System.currentTimeMillis();\n            //System.out.println(\"Time Taken: \"+(etime-stime));\n            client = server.accept();\n            //stime = System.currentTimeMillis();\n            if (linger < 0) {\n                client.setSoLinger(false, 0);\n            } else {\n                client.setSoLinger(true, linger);\n            }\n            client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                //low delay=10\n                client.setTrafficClass(socketTrafficClass);\n            }\n            logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n            }\n            if (stopServer) {\n                //Client connected when server was about to be shutdown.\n                try {\n                    client.close();\n                } catch (Exception e) {\n                }\n                break;\n            }\n            if (checkAccessConstraint(client) == false) {\n                continue;\n            }\n            //Check if max connection has reached\n            if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                theClient.setClientEvent(ClientEvent.MAX_CON_BLOCKING);\n            } else {\n                theClient.setClientEvent(ClientEvent.RUN_BLOCKING);\n            }\n            theClient.setTrusted(getSkipValidation());\n            theClient.setSocket(client);\n            //mostly null\n            theClient.setSocketChannel(client.getChannel());\n            if (clientDataClass != null) {\n                if (getClientDataPool() == null) {\n                    clientData = (ClientData) clientDataClass.newInstance();\n                } else {\n                    clientData = (ClientData) getClientDataPool().borrowObject();\n                }\n                theClient.setClientData(clientData);\n            }\n            try {\n                _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                _chPolled.handleClient(theClient);\n            } catch (java.util.NoSuchElementException nsee) {\n                logger.warning(\"Could not borrow ClientHandler from pool. Error: \" + nsee);\n                logger.warning(\"Closing Socket [\" + client + \"] since no ClientHandler available.\");\n                client.close();\n            }\n            if (_chPolled != null) {\n                try {\n                    getClientPool().addClient(_chPolled, true);\n                } catch (java.util.NoSuchElementException nsee) {\n                    logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                    //logger.warning(\"Closing Socket [\"+client+\"] since no Thread available.\");\n                    //client.close();\n                    //returnClientHandlerToPool(_chPolled);\n                }\n                _chPolled = null;\n            }\n            client = null;\n            //reset it back\n            setSkipValidation(false);\n        }\n        //end of loop\n    }\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception {\n        int selectCount = 0;\n        Iterator iterator = null;\n        SelectionKey key = null;\n        ServerSocketChannel serverChannel = null;\n        SocketChannel socketChannel = null;\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        boolean stopServerProcessed = false;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        registerChannelRequestMap = new HashMap();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        while (true) {\n            selectCount = selector.select(500);\n            //selectCount = selector.select();//for testing\n            //check for any pending registerChannel req.\n            synchronized (registerChannelRequestMap) {\n                if (registerChannelRequestMap.size() > 0) {\n                    RegisterChannelRequest req = null;\n                    Object hashkey = null;\n                    iterator = registerChannelRequestMap.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        hashkey = iterator.next();\n                        req = (RegisterChannelRequest) registerChannelRequestMap.get(hashkey);\n                        req.register(getSelector());\n                    }\n                    iterator = null;\n                    registerChannelRequestMap.clear();\n                }\n                //if\n            }\n            //sync\n            if (stopServer == true && stopServerProcessed == false) {\n                logger.warning(\"Closing \" + getName());\n                serverSocketChannel.close();\n                stopServerProcessed = true;\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.warning(\"Closed \" + getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n            if (stopServer == false && stopServerProcessed == true) {\n                logger.finest(\"Server must have re-started.. will break\");\n                break;\n            }\n            if (selectCount == 0 && stopServerProcessed == true) {\n                java.util.Set keyset = selector.keys();\n                if (keyset.isEmpty() == true && getClientCount() <= 0) {\n                    break;\n                } else {\n                    continue;\n                }\n            } else if (selectCount == 0) {\n                continue;\n            }\n            iterator = selector.selectedKeys().iterator();\n            while (iterator.hasNext()) {\n                key = (SelectionKey) iterator.next();\n                if (key.isValid() == false) {\n                    iterator.remove();\n                    continue;\n                }\n                if (key.isAcceptable() && stopServer == false) {\n                    logger.finest(\"Key is Acceptable\");\n                    serverChannel = (ServerSocketChannel) key.channel();\n                    socketChannel = serverChannel.accept();\n                    if (socketChannel == null) {\n                        iterator.remove();\n                        continue;\n                    }\n                    client = socketChannel.socket();\n                    if (linger < 0) {\n                        client.setSoLinger(false, 0);\n                    } else {\n                        client.setSoLinger(true, linger);\n                    }\n                    client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                        //low delay=10\n                        client.setTrafficClass(socketTrafficClass);\n                    }\n                    logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                        client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                        logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n                    }\n                    if (checkAccessConstraint(client) == false) {\n                        iterator.remove();\n                        continue;\n                    }\n                    socketChannel.configureBlocking(false);\n                    theClient.setTrusted(getSkipValidation());\n                    theClient.setSocket(socketChannel.socket());\n                    theClient.setSocketChannel(socketChannel);\n                    if (clientDataClass != null) {\n                        if (getClientDataPool() == null) {\n                            clientData = (ClientData) clientDataClass.newInstance();\n                        } else {\n                            //borrow a object from pool\n                            clientData = (ClientData) getClientDataPool().borrowObject();\n                        }\n                        theClient.setClientData(clientData);\n                    }\n                    //Check if max connection has reached\n                    if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                        theClient.setClientEvent(ClientEvent.MAX_CON);\n                    } else {\n                        theClient.setClientEvent(ClientEvent.ACCEPT);\n                    }\n                    try {\n                        _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                        logger.finest(\"Asking \" + _chPolled.getName() + \" to handle.\");\n                        _chPolled.handleClient(theClient);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.warning(\"Could not borrow ClientHandler Object from pool. Error: \" + nsee);\n                        logger.warning(\"Closing SocketChannel [\" + serverChannel.socket() + \"] since no ClientHandler available.\");\n                        socketChannel.close();\n                    }\n                    if (_chPolled != null) {\n                        try {\n                            getClientPool().addClient(_chPolled, true);\n                        } catch (java.util.NoSuchElementException nsee) {\n                            logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                            //logger.warning(\"Closing SocketChannel [\"+serverChannel.socket()+\"] since no Thread available.\");\n                            //socketChannel.close();\n                            //returnClientHandlerToPool(_chPolled);\n                        }\n                        _chPolled = null;\n                    }\n                    socketChannel = null;\n                    client = null;\n                    //reset it back\n                    setSkipValidation(false);\n                } else if (key.isValid() && key.isReadable()) {\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Readable, removing OP_READ from interestOps for \" + _ch.getName());\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_READ));\n                        _ch.addEvent(ClientEvent.READ);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.READ);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (key.isValid() && key.isWritable()) {\n                    if (getClientPool().shouldNioWriteHappen() == false) {\n                        //no need to remove the key\n                        continue;\n                    }\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Writable, removing OP_WRITE from interestOps for \" + _ch.getName());\n                        //remove OP_WRITE from interest set\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));\n                        _ch.addEvent(ClientEvent.WRITE);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.WRITE);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (stopServer == true && key.isAcceptable()) {\n                    //we will not accept this key\n                    //reset it back\n                    setSkipValidation(false);\n                } else {\n                    logger.warning(\"Unknown key got in SelectionKey: \" + key);\n                }\n                //Remove key\n                iterator.remove();\n                Thread.yield();\n            }\n            //end of iterator\n            iterator = null;\n        }\n        //end of loop\n    }\n\n    private boolean checkAccessConstraint(Socket socket) {\n        try {\n            if (getAccessConstraintConfig() != null) {\n                getAccessConstraintConfig().checkAccept(socket);\n            }\n            return true;\n        } catch (SecurityException se) {\n            logger.warning(\"SecurityException occurred accepting connection : \" + se.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException {\n        if (getSelector() == null) {\n            throw new IllegalStateException(\"Selector is not open!\");\n        }\n        if (channel == null) {\n            throw new IllegalArgumentException(\"Can't register a null channel!\");\n        }\n        if (channel.isConnected() == false) {\n            throw new ClosedChannelException();\n        }\n        RegisterChannelRequest req = new RegisterChannelRequest(channel, ops, att);\n        RegisterChannelRequest reqOld = null;\n        synchronized (registerChannelRequestMap) {\n            reqOld = (RegisterChannelRequest) registerChannelRequestMap.get(channel);\n            if (reqOld == null) {\n                registerChannelRequestMap.put(channel, req);\n                getSelector().wakeup();\n                return true;\n            } else {\n                if (reqOld.equals(req) == false) {\n                    reqOld.setOps(reqOld.getOps() | req.getOps());\n                    reqOld.setAtt(req.getAtt());\n                    return true;\n                }\n                return false;\n            }\n        }\n        /*\n\t\tlogger.warning(\"Before register...\");\n\t\tchannel.register(getSelector(), ops, att);\n\t\tlogger.warning(\"Before wakeup and after register...\");\n\t\tgetSelector().wakeup();\n\t\tlogger.warning(\"After wakeup...\");\n\t\t*/\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig) {\n        logger.finer(\"Creating ByteBufferPool pool\");\n        int bufferSize = getBasicConfig().getAdvancedSettings().getByteBufferSize();\n        boolean useDirectByteBuffer = getBasicConfig().getAdvancedSettings().getUseDirectByteBuffer();\n        PoolableObjectFactory factory = new ByteBufferObjectFactory(bufferSize, useDirectByteBuffer);\n        byteBufferPool = poolManager.makeByteBufferPool(factory, opConfig);\n        poolManager.initPool(byteBufferPool, opConfig);\n    }\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool() {\n        return byteBufferPool;\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientThread pool\");\n        ThreadObjectFactory factory = new ThreadObjectFactory();\n        ObjectPool objectPool = poolManager.makeClientPool(factory, opConfig);\n        pool = new ClientPool(makeQSObjectPool(objectPool), opConfig);\n        factory.setClientPool(pool);\n        pool.setMaxThreadsForNioWrite(getBasicConfig().getAdvancedSettings().getMaxThreadsForNioWrite());\n        poolManager.initPool(objectPool, opConfig);\n    }\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler) {\n        clientWriteHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler() {\n        return clientWriteHandlerString;\n    }\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime() {\n        return lastStartTime;\n    }\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag) {\n        org.quickserver.util.io.ByteBufferOutputStream.setDebug(flag);\n        org.quickserver.util.io.ByteBufferInputStream.setDebug(flag);\n    }\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier() {\n        return clientIdentifier;\n    }\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception {\n        return (QSObjectPool) qsObjectPoolMaker.getQSObjectPool(objectPool);\n    }\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode() {\n        return blockingMode;\n    }\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception {\n        if (clientCommandHandlerString == null && clientEventHandlerString == null) {\n            logger.severe(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n            throw new AppException(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n        }\n        clientCommandHandler = null;\n        if (clientCommandHandlerString != null) {\n            logger.finest(\"Loading ClientCommandHandler class..\");\n            Class clientCommandHandlerClass = getClass(clientCommandHandlerString, true);\n            clientCommandHandler = (ClientCommandHandler) clientCommandHandlerClass.newInstance();\n        }\n        boolean setClientCommandHandlerLookup = false;\n        clientEventHandler = null;\n        if (clientEventHandlerString == null) {\n            clientEventHandlerString = \"org.quickserver.net.server.impl.DefaultClientEventHandler\";\n            setClientCommandHandlerLookup = true;\n        }\n        logger.finest(\"Loading ClientEventHandler class..\");\n        if (clientEventHandlerString.equals(clientCommandHandlerString) && ClientEventHandler.class.isInstance(clientCommandHandler)) {\n            clientEventHandler = (ClientEventHandler) clientCommandHandler;\n        } else {\n            clientEventHandler = (ClientEventHandler) getClass(clientEventHandlerString, true).newInstance();\n            if (setClientCommandHandlerLookup) {\n                ((DefaultClientEventHandler) clientEventHandler).setClientCommandHandler(clientCommandHandler);\n            }\n        }\n        clientExtendedEventHandler = null;\n        if (clientExtendedEventHandlerString != null) {\n            logger.finest(\"Loading ClientExtendedEventHandler class..\");\n            if (clientExtendedEventHandlerString.equals(clientCommandHandlerString) && ClientExtendedEventHandler.class.isInstance(clientCommandHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientCommandHandler;\n            } else if (clientExtendedEventHandlerString.equals(clientEventHandlerString) && ClientExtendedEventHandler.class.isInstance(clientEventHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientEventHandler;\n            } else {\n                Class clientExtendedEventHandlerClass = getClass(clientExtendedEventHandlerString, true);\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientExtendedEventHandlerClass.newInstance();\n            }\n        }\n        clientObjectHandler = null;\n        if (clientObjectHandlerString != null) {\n            logger.finest(\"Loading ClientObjectHandler class..\");\n            if (clientObjectHandlerString.equals(clientCommandHandlerString) && ClientObjectHandler.class.isInstance(clientCommandHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientCommandHandler;\n            } else if (clientObjectHandlerString.equals(clientEventHandlerString) && ClientObjectHandler.class.isInstance(clientEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientEventHandler;\n            } else if (clientObjectHandlerString.equals(clientExtendedEventHandlerString) && ClientObjectHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientExtendedEventHandler;\n            } else {\n                clientObjectHandler = (ClientObjectHandler) getClass(clientObjectHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientBinaryHandler = null;\n        if (clientBinaryHandlerString != null) {\n            logger.finest(\"Loading ClientBinaryHandler class..\");\n            if (clientBinaryHandlerString.equals(clientCommandHandlerString) && ClientBinaryHandler.class.isInstance(clientCommandHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientCommandHandler;\n            } else if (clientBinaryHandlerString.equals(clientEventHandlerString) && ClientBinaryHandler.class.isInstance(clientEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientExtendedEventHandlerString) && ClientBinaryHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientExtendedEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientObjectHandlerString) && ClientBinaryHandler.class.isInstance(clientObjectHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientObjectHandler;\n            } else {\n                clientBinaryHandler = (ClientBinaryHandler) getClass(clientBinaryHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientWriteHandler = null;\n        if (clientWriteHandlerString != null) {\n            logger.finest(\"Loading ClientWriteHandler class..\");\n            if (clientWriteHandlerString.equals(clientCommandHandlerString) && ClientWriteHandler.class.isInstance(clientCommandHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientCommandHandler;\n            } else if (clientWriteHandlerString.equals(clientEventHandlerString) && ClientWriteHandler.class.isInstance(clientEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientEventHandler;\n            } else if (clientWriteHandlerString.equals(clientExtendedEventHandlerString) && ClientWriteHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientExtendedEventHandler;\n            } else if (clientWriteHandlerString.equals(clientObjectHandlerString) && ClientWriteHandler.class.isInstance(clientObjectHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientObjectHandler;\n            } else if (clientWriteHandlerString.equals(clientBinaryHandlerString) && ClientWriteHandler.class.isInstance(clientBinaryHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientBinaryHandler;\n            } else {\n                clientWriteHandler = (ClientWriteHandler) getClass(clientWriteHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        Class authenticatorClass = null;\n        if (clientAuthenticationHandlerString != null) {\n            logger.finest(\"Loading ClientAuthenticationHandler class..\");\n            authenticatorClass = getClass(clientAuthenticationHandlerString, true);\n        }\n        if (authenticatorClass != null) {\n            Object obj = authenticatorClass.newInstance();\n            if (ClientAuthenticationHandler.class.isInstance(obj))\n                clientAuthenticationHandler = (ClientAuthenticationHandler) obj;\n            else\n                authenticator = (Authenticator) obj;\n        }\n        clientDataClass = null;\n        if (clientDataString != null) {\n            logger.finest(\"Loading ClientData class..\");\n            clientDataClass = getClass(clientDataString, true);\n        }\n        Assertion.affirm(clientEventHandler != null, \"ClientEventHandler was not loaded!\");\n    }\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler) {\n        clientEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler() {\n        return clientEventHandlerString;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException {\n        if (dataType == DataType.IN)\n            this.defaultDataModeIN = dataMode;\n        if (dataType == DataType.OUT)\n            this.defaultDataModeOUT = dataMode;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException {\n        defaultDataModeIN = defaultDataMode.getDataMode(DataType.IN);\n        defaultDataModeOUT = defaultDataMode.getDataMode(DataType.OUT);\n        ;\n    }\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType) {\n        if (dataType == DataType.IN)\n            return defaultDataModeIN;\n        if (dataType == DataType.OUT)\n            return defaultDataModeOUT;\n        else\n            throw new IllegalArgumentException(\"Unknown DataType: \" + dataType);\n    }\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler) {\n        clientExtendedEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler() {\n        return clientExtendedEventHandlerString;\n    }\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception {\n        if (getApplicationJarPath() != null && getClassLoader() == null) {\n            setClassLoader(ClassUtil.getClassLoader(getApplicationJarPath()));\n            //update qsadmin to use the same\n            if (adminServer != null) {\n                adminServer.getServer().setClassLoader(getClassLoader());\n            }\n        }\n    }\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID() {\n        return pid;\n    }\n\n    public boolean isRawCommunicationLogging() {\n        return rawCommunicationLogging;\n    }\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging) {\n        this.rawCommunicationLogging = rawCommunicationLogging;\n    }\n\n    public int getRawCommunicationMaxLength() {\n        return rawCommunicationMaxLength;\n    }\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength) {\n        this.rawCommunicationMaxLength = rawCommunicationMaxLength;\n    }\n}\n",
        "test_prompt": "// QuickServer_4Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#initService(Object[])} method.\n*/\nclass QuickServer_4Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// QuickServer_5Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#initService(QuickServerConfig)} method.\n*/\nclass QuickServer_5Test {\n}"
            }
        ],
        "id": "2dcf8797-99bf-4430-bda6-f0fd3356890a",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_5Test.java",
        "original_code": "// QuickServer.java\n/*\n * This file is part of the QuickServer library \n * Copyright (C) QuickServer.org\n *\n * Use, modification, copying and distribution of this software is subject to\n * the terms and conditions of the GNU Lesser General Public License. \n * You should have received a copy of the GNU LGP License along with this \n * library; if not, you can download a copy from <http://www.quickserver.org/>.\n *\n * For questions, suggestions, bug-reports, enhancement-requests etc.\n * visit http://www.quickserver.org\n *\n */\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n *  Main class of QuickServer library. This class is used to create\n *  multi client servers quickly.\n *  <p>\n *  Ones a client is connected, it creates {@link ClientHandler} object,\n *  which is run using any thread available from the pool of threads\n *  maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n *  handles the client. <br/>\n *  QuickServer divides the application logic of its developer over eight\n *  class, <br>\n *  \t<ul>\n * \t\t<li>ClientEventHandler<br>\n *  \t\t   &nbsp;Handles client events [Optional Class].\n *  \t\t<li>ClientCommandHandler [#]<br>\n *  \t\t   &nbsp;Handles client character/string commands.\n *  \t\t<li>ClientObjectHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - Object commands.\n * \t\t<li>ClientBinaryHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - binary data.\n * \t\t<li>ClientWriteHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n *  \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n *  \t\t\t&nbsp;Used to Authencatet a client.\n *  \t\t<li>ClientData [Optional Class]<br>\n *  \t\t\t&nbsp;Client data carrier (support class)\n * \t\t<li>ClientExtendedEventHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles extended client events.\n *  \t</ul>\n *\n *  [#] = Any one of these have to be set based on default DataMode for input.\n *  The default DataMode for input is String so if not changes you will\n *  have to set ClientCommandHandler.\n *  </p>\n *  <p>\n *   Eg:\n *  <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n *  @version 1.4.8\n *  @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //Some variable are not initialised to any value because the\n    //default java value was desired initial value.\n    //'dev ' = development build not yet final\n    //'beta' = test build all features\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n        if (System.getProperty(\"org.quickserver.useOSLineSeparator\") != null && System.getProperty(\"org.quickserver.useOSLineSeparator\").equals(\"true\")) {\n            NEW_LINE = System.getProperty(\"line.separator\");\n        } else {\n            NEW_LINE = \"\\r\\n\";\n        }\n        String _pid = ManagementFactory.getRuntimeMXBean().getName();\n        int i = _pid.indexOf(\"@\");\n        pid = _pid.substring(0, i);\n        System.out.print(\"Loading QuickServer v\" + getVersion() + \" [PID:\" + pid + \"]\");\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //--v1.2\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //for Service interface\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n        System.out.println(\" Done\");\n        //should be commented if not a patch release\n        //System.out.println(\"[Includes patch(#): t=152&p=532]\");\n        //should be commented if not a dev release\n        //System.out.println(\"[Dev Build Date: Saturday, October 29, 2005]\");\n        logger.log(Level.FINE, \"PID: {0}\", pid);\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion() {\n        return VER;\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo() {\n        return getVersionNo(VER);\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver) {\n        //String ver = getVersion();\n        float version = 0;\n        //check if beta\n        int i = ver.indexOf(\" \");\n        if (i == -1)\n            i = ver.length();\n        ver = ver.substring(0, i);\n        //check for sub version\n        i = ver.indexOf(\".\");\n        if (i != -1) {\n            int j = ver.indexOf(\".\", i);\n            if (j != -1) {\n                ver = ver.substring(0, i) + \".\" + MyString.replaceAll(ver.substring(i + 1), \".\", \"\");\n            }\n        }\n        try {\n            version = Float.parseFloat(ver);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Corrupt QuickServer\");\n        }\n        return version;\n    }\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine() {\n        return NEW_LINE;\n    }\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString() {\n        return serverName + \" : \" + getPort();\n    }\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n        setClientCommandHandler(commandHandler);\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n        //send to another constructor\n        this(commandHandler);\n        setPort(port);\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException {\n        logger.log(Level.FINE, \"Starting {0}\", getName());\n        if (isClosed() == false) {\n            logger.log(Level.WARNING, \"Server {0} already running.\", getName());\n            throw new AppException(\"Server \" + getName() + \" already running.\");\n        }\n        blockingMode = getBasicConfig().getServerMode().getBlocking();\n        if (getSecure().isEnable() && blockingMode == false) {\n            //TODO we need to fix this..\n            logger.warning(\"QuickServer does not support secure servers under non-blocking mode! So will run in blocking mode.\");\n            blockingMode = true;\n            getBasicConfig().getServerMode().setBlocking(blockingMode);\n        }\n        if (serverBanner == null) {\n            serverBanner = \"\\n-------------------------------\" + \"\\n Name : \" + getName() + \"\\n Port : \" + getPort() + \"\\n-------------------------------\\n\";\n            logger.finest(\"Default Server Banner Generated\");\n        }\n        try {\n            loadApplicationClasses();\n            //load class from Advanced Settings\n            Class clientIdentifierClass = getClass(getBasicConfig().getAdvancedSettings().getClientIdentifier(), true);\n            clientIdentifier = (ClientIdentifier) clientIdentifierClass.newInstance();\n            clientIdentifier.setQuickServer(QuickServer.this);\n            //load class from ObjectPoolConfig\n            Class poolManagerClass = getClass(getBasicConfig().getObjectPoolConfig().getPoolManager(), true);\n            poolManager = (PoolManager) poolManagerClass.newInstance();\n            //load class QSObjectPoolMaker\n            Class qsObjectPoolMakerClass = getClass(getBasicConfig().getAdvancedSettings().getQSObjectPoolMaker(), true);\n            qsObjectPoolMaker = (QSObjectPoolMaker) qsObjectPoolMakerClass.newInstance();\n            loadServerHooksClasses();\n            processServerHooks(ServerHook.PRE_STARTUP);\n            if (getSecure().isLoad() == true)\n                //v1.4.0\n                loadSSLContext();\n            loadBusinessLogic();\n        } catch (ClassNotFoundException e) {\n            logger.log(Level.SEVERE, \"Could not load class/s: \" + e, e);\n            throw new AppException(\"Could not load class/s : \" + e);\n        } catch (InstantiationException e) {\n            logger.log(Level.SEVERE, \"Could not instantiate class/s: \" + e, e);\n            throw new AppException(\"Could not instantiate class/s: \" + e);\n        } catch (IllegalAccessException e) {\n            logger.log(Level.SEVERE, \"Illegal access to class/s: \" + e, e);\n            throw new AppException(\"Illegal access to class/s: \" + e);\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, \"IOException: \" + e, e);\n            throw new AppException(\"IOException: \" + e);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Exception: \" + e, e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Exception : \" + e);\n        }\n        //v1.3.3\n        if (getSecurityManagerClass() != null) {\n            System.setSecurityManager(getSecurityManager());\n        }\n        setServiceState(Service.INIT);\n        t = new Thread(this, \"QuickServer - \" + getName());\n        t.start();\n        do {\n            Thread.yield();\n        } while (getServiceState() == Service.INIT);\n        if (getServiceState() != Service.RUNNING) {\n            if (exceptionInRun != null)\n                throw new AppException(\"Could not start server \" + getName() + \"! Details: \" + exceptionInRun);\n            else\n                throw new AppException(\"Could not start server \" + getName());\n        }\n        lastStartTime = new java.util.Date();\n        logger.log(Level.FINE, \"Started {0}, Date: {1}\", new Object[] { getName(), lastStartTime });\n    }\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException {\n        processServerHooks(ServerHook.PRE_SHUTDOWN);\n        logger.log(Level.WARNING, \"Stopping {0}\", getName());\n        stopServer = true;\n        Socket death = null;\n        if (isClosed() == true) {\n            logger.log(Level.WARNING, \"Server {0} is not running!\", getName());\n            throw new AppException(\"Server \" + getName() + \" is not running!\");\n        }\n        try {\n            if (getBlockingMode() == true) {\n                if (getSecure().isEnable() == false) {\n                    death = new Socket(server.getInetAddress(), server.getLocalPort());\n                    death.getInputStream().read();\n                    death.close();\n                } else {\n                    death = getSSLSocketFactory().createSocket(server.getInetAddress(), server.getLocalPort());\n                    Thread.sleep(100);\n                    death.close();\n                }\n            }\n            if (serverSocketChannel != null) {\n                serverSocketChannel.close();\n            }\n        } catch (IOException e) {\n            logger.log(Level.FINE, \"IOError stopping {0}: {1}\", new Object[] { getName(), e });\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error stopping {0}: {1}\", new Object[] { getName(), e });\n            throw new AppException(\"Error in stopServer \" + getName() + \": \" + e);\n        }\n        for (int i = 0; getServiceState() != Service.STOPPED; i++) {\n            try {\n                Thread.sleep(60);\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error waiting for {0} to fully stop. Error: {1}\", new Object[] { getName(), e });\n            }\n            if (i > 1000) {\n                logger.severe(\"Server was not stopped even after 10sec.. will terminate now.\");\n                System.exit(-1);\n            }\n        }\n        if (adminServer == null || getQSAdminServer().getServer() != this) {\n            //so this is not qsadmin\n            setClassLoader(null);\n        }\n        logger.log(Level.INFO, \"Stopped {0}\", getName());\n    }\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException {\n        stopServer();\n        startServer();\n    }\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName() {\n        return serverName;\n    }\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name) {\n        serverName = name;\n        logger.log(Level.FINEST, \"Set to : {0}\", name);\n    }\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner() {\n        return serverBanner;\n    }\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner) {\n        serverBanner = banner;\n        logger.log(Level.FINEST, \"Set to : {0}\", banner);\n    }\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port) {\n        if (port < 0) {\n            throw new IllegalArgumentException(\"Port number can not be less than 0!\");\n        }\n        serverPort = port;\n        logger.log(Level.FINEST, \"Set to {0}\", port);\n    }\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort() {\n        if (isClosed() == false) {\n            return server.getLocalPort();\n        }\n        if (getSecure().isEnable() == false) {\n            return serverPort;\n        } else {\n            int _port = getSecure().getPort();\n            if (_port == -1)\n                return serverPort;\n            else\n                return _port;\n        }\n    }\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler) {\n        clientCommandHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler() {\n        return clientCommandHandlerString;\n    }\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data) {\n        this.clientDataString = data;\n        logger.log(Level.FINEST, \"Set to {0}\", data);\n    }\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData() {\n        return clientDataString;\n    }\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time) {\n        if (time > 0)\n            socketTimeout = time;\n        else\n            socketTimeout = 0;\n        logger.log(Level.FINEST, \"Set to {0}\", socketTimeout);\n    }\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout() {\n        return socketTimeout;\n    }\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry) {\n        maxAuthTry = authTry;\n        logger.log(Level.FINEST, \"Set to {0}\", authTry);\n    }\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry() {\n        return maxAuthTry;\n    }\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg) {\n        maxAuthTryMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg() {\n        return maxAuthTryMsg;\n    }\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg) {\n        timeoutMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg() {\n        return timeoutMsg;\n    }\n\n    private TheClient initTheClient() {\n        TheClient theClient = new TheClient();\n        theClient.setServer(QuickServer.this);\n        theClient.setTimeoutMsg(getTimeoutMsg());\n        //v1.2\n        theClient.setMaxAuthTry(getMaxAuthTry());\n        theClient.setMaxAuthTryMsg(getMaxAuthTryMsg());\n        theClient.setClientEventHandler(clientEventHandler);\n        //v1.4.6\n        theClient.setClientExtendedEventHandler(clientExtendedEventHandler);\n        theClient.setClientCommandHandler(clientCommandHandler);\n        //v1.2\n        theClient.setClientObjectHandler(clientObjectHandler);\n        //v1.4\n        theClient.setClientBinaryHandler(clientBinaryHandler);\n        //v1.4.5\n        theClient.setClientWriteHandler(clientWriteHandler);\n        //v1.3\n        theClient.setAuthenticator(authenticator);\n        //v1.4.6\n        theClient.setClientAuthenticationHandler(clientAuthenticationHandler);\n        theClient.setTimeout(socketTimeout);\n        theClient.setMaxConnectionMsg(maxConnectionMsg);\n        //v1.3.2\n        theClient.setCommunicationLogging(getCommunicationLogging());\n        return theClient;\n    }\n\n    public void run() {\n        exceptionInRun = null;\n        TheClient theClient = initTheClient();\n        try {\n            stopServer = false;\n            closeAllPools();\n            initAllPools();\n            makeServerSocket();\n            //print banner\n            System.out.println(serverBanner);\n            //v1.2\n            setServiceState(Service.RUNNING);\n            //v1.3.3\n            processServerHooks(ServerHook.POST_STARTUP);\n            if (getBlockingMode() == false) {\n                runNonBlocking(theClient);\n                if (stopServer == true) {\n                    logger.log(Level.FINEST, \"Closing selector for {0}\", getName());\n                    selector.close();\n                }\n                return;\n            } else {\n                runBlocking(theClient);\n            }\n        } catch (BindException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"{0} BindException for Port {1} @ {2} : {3}\", new Object[] { getName(), getPort(), getBindAddr().getHostAddress(), e.getMessage() });\n        } catch (javax.net.ssl.SSLException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"SSLException {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (IOException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"IOError {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (Exception e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"Error {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } finally {\n            if (getBlockingMode() == true) {\n                logger.log(Level.WARNING, \"Closing {0}\", getName());\n                try {\n                    if (isClosed() == false) {\n                        server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            } else if (getBlockingMode() == false && exceptionInRun != null) {\n                logger.log(Level.WARNING, \"Closing {0} - Had Error: {1}\", new Object[] { getName(), exceptionInRun });\n                try {\n                    if (isClosed() == false) {\n                        if (serverSocketChannel != null)\n                            serverSocketChannel.close();\n                        if (server != null)\n                            server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n        }\n    }\n\n    //end of run\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnection = maxConnection;\n        else\n            this.maxConnection = maxConnection;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnection);\n    }\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection() {\n        return maxConnection;\n    }\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount() {\n        if (clientHandlerPool != null) {\n            try {\n                return getClientHandlerPool().getNumActive();\n            } catch (Exception e) {\n                return 0;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnectionMsg = maxConnectionMsg;\n        else\n            this.maxConnectionMsg = maxConnectionMsg;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnectionMsg);\n    }\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg() {\n        return maxConnectionMsg;\n    }\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException {\n        ipAddr = InetAddress.getByName(bindAddr);\n        logger.log(Level.FINEST, \"Set to {0}\", bindAddr);\n    }\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr() {\n        if (ipAddr == null) {\n            try {\n                ipAddr = InetAddress.getByName(\"0.0.0.0\");\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Unable to create default ip(0.0.0.0) : {0}\", e);\n                throw new RuntimeException(\"Error: Unable to find servers own ip : \" + e);\n            }\n        }\n        return ipAddr;\n    }\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects) {\n        this.storeObjects = storeObjects;\n    }\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects() {\n        return storeObjects;\n    }\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port) {\n        getQSAdminServer().getServer().setPort(port);\n    }\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort() {\n        return getQSAdminServer().getServer().getPort();\n    }\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator) {\n        getQSAdminServer().getServer().setClientAuthenticationHandler(authenticator);\n    }\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator() {\n        return getQSAdminServer().getServer().getAuthenticator();\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException {\n        getQSAdminServer().setClientAuthenticationHandler(authenticator);\n        getQSAdminServer().startServer(port);\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException {\n        getQSAdminServer().startServer();\n    }\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer() {\n        if (adminServer == null)\n            adminServer = new QSAdminServer(QuickServer.this);\n        return adminServer;\n    }\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer) {\n        if (adminServer == null)\n            this.adminServer = adminServer;\n    }\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed() {\n        if (server == null)\n            return true;\n        return server.isClosed();\n    }\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger() {\n        if (appLogger != null)\n            return appLogger;\n        return logger;\n    }\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger) {\n        this.appLogger = appLogger;\n    }\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler) {\n        clientObjectHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler() {\n        return clientObjectHandlerString;\n    }\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        if (formatter == null)\n            return;\n        consoleLoggingformatter = formatter;\n        java.util.logging.Formatter conformatter = (java.util.logging.Formatter) getClass(formatter, true).newInstance();\n        Logger jdkLogger = Logger.getLogger(\"\");\n        Handler[] handlers = jdkLogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                handlers[index].setFormatter(conformatter);\n            }\n        }\n        logger.log(Level.FINEST, \"Set to {0}\", formatter);\n    }\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter() {\n        return consoleLoggingformatter;\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MiniFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to logging.MiniFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MicroFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to MicroFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        boolean isConsole = true;\n        try {\n            if (System.console() == null) {\n                isConsole = false;\n            }\n        } catch (Throwable e) {\n            //ignore\n        }\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                if (isConsole == false && level != Level.OFF) {\n                    System.out.println(\"QuickServer: You do not have a console.. so turning console logger off..\");\n                    level = Level.OFF;\n                }\n                if (level == Level.OFF) {\n                    logger.info(\"QuickServer: Removing console handler.. \");\n                    rlogger.removeHandler(handlers[index]);\n                    handlers[index].setLevel(level);\n                    handlers[index].close();\n                } else {\n                    handlers[index].setLevel(level);\n                }\n            }\n        }\n        if (level == Level.SEVERE)\n            consoleLoggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            consoleLoggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            consoleLoggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            consoleLoggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            consoleLoggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            consoleLoggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            consoleLoggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            consoleLoggingLevel = \"OFF\";\n        else\n            consoleLoggingLevel = \"UNKNOWN\";\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel() {\n        return consoleLoggingLevel;\n    }\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            handlers[index].setLevel(level);\n        }\n        if (level == Level.SEVERE)\n            loggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            loggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            loggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            loggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            loggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            loggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            loggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            loggingLevel = \"OFF\";\n        else\n            loggingLevel = \"UNKNOWN\";\n        consoleLoggingLevel = loggingLevel;\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    //*** Start of Service interface methods\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError() {\n        return serviceError;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param) {\n        serviceError = null;\n        try {\n            initServer(param);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig) {\n        serviceError = null;\n        try {\n            initServer(qsConfig);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING)\n            return false;\n        try {\n            startServer();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService() {\n        serviceError = null;\n        if (getServiceState() == Service.STOPPED)\n            return false;\n        try {\n            stopServer();\n            clearAllPools();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING) {\n            suspendMaxConnection = maxConnection;\n            suspendMaxConnectionMsg = maxConnectionMsg;\n            maxConnection = 0;\n            maxConnectionMsg = \"Service is suspended.\";\n            setServiceState(Service.SUSPENDED);\n            logger.log(Level.INFO, \"Service {0} is suspended.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService() {\n        serviceError = null;\n        if (getServiceState() == Service.SUSPENDED) {\n            maxConnection = suspendMaxConnection;\n            maxConnectionMsg = suspendMaxConnectionMsg;\n            setServiceState(Service.RUNNING);\n            logger.log(Level.INFO, \"Service {0} resumed.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info() {\n        serviceError = null;\n        StringBuilder buf = new StringBuilder();\n        buf.append(getName()).append(\"\\n\");\n        buf.append(getBindAddr().getHostAddress()).append(\" \");\n        buf.append(getPort()).append(\"\\n\");\n        return buf.toString();\n    }\n\n    // *** End of Service interface methods\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException {\n        QuickServerConfig qsConfig = null;\n        try {\n            qsConfig = ConfigReader.read((String) param[0]);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not init server from xml file {0} : {1}\", new Object[] { new File((String) param[0]).getAbsolutePath(), e });\n            throw new AppException(\"Could not init server from xml file\", e);\n        }\n        initServer(qsConfig);\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException {\n        setConfig(qsConfig);\n        try {\n            configQuickServer();\n            loadApplicationClasses();\n            //start InitServerHooks\n            InitServerHooks ish = getConfig().getInitServerHooks();\n            if (ish != null) {\n                Iterator iterator = ish.iterator();\n                String initServerHookClassName = null;\n                Class initServerHookClass = null;\n                InitServerHook initServerHook = null;\n                while (iterator.hasNext()) {\n                    initServerHookClassName = (String) iterator.next();\n                    initServerHookClass = getClass(initServerHookClassName, true);\n                    initServerHook = (InitServerHook) initServerHookClass.newInstance();\n                    logger.log(Level.INFO, \"Loaded init server hook: {0}\", initServerHookClassName);\n                    logger.log(Level.FINE, \"Init server hook info: {0}\", initServerHook.info());\n                    initServerHook.handleInit(QuickServer.this);\n                }\n            }\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not load init server hook: {0}\", e);\n            logger.log(Level.WARNING, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Could not load init server hook\", e);\n        }\n        setServiceState(Service.INIT);\n        logger.log(Level.FINEST, \"\\r\\n{0}\", MyString.getSystemInfo(getVersion()));\n    }\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState() {\n        return serviceState;\n    }\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state) {\n        serviceState = state;\n    }\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp) {\n        if (temp.equals(\"SEVERE\"))\n            qs.setConsoleLoggingLevel(Level.SEVERE);\n        else if (temp.equals(\"WARNING\"))\n            qs.setConsoleLoggingLevel(Level.WARNING);\n        else if (temp.equals(\"INFO\"))\n            qs.setConsoleLoggingLevel(Level.INFO);\n        else if (temp.equals(\"CONFIG\"))\n            qs.setConsoleLoggingLevel(Level.CONFIG);\n        else if (temp.equals(\"FINE\"))\n            qs.setConsoleLoggingLevel(Level.FINE);\n        else if (temp.equals(\"FINER\"))\n            qs.setConsoleLoggingLevel(Level.FINER);\n        else if (temp.equals(\"FINEST\"))\n            qs.setConsoleLoggingLevel(Level.FINEST);\n        else if (temp.equals(\"OFF\"))\n            qs.setConsoleLoggingLevel(Level.OFF);\n        else\n            logger.log(Level.WARNING, \"unknown level {0}\", temp);\n    }\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception {\n        QuickServer qs = QuickServer.this;\n        //v1.3\n        qs.setConfig(config);\n        qs.setBasicConfig(config);\n        String temp = config.getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        temp = null;\n        qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        //v1.3.3\n        qs.setSecurityManagerClass(config.getSecurityManagerClass());\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        temp = config.getApplicationJarPath();\n        if (temp != null) {\n            File ajp = new File(temp);\n            if (ajp.isAbsolute() == false) {\n                temp = config.getConfigFile();\n                ajp = new File(temp);\n                temp = ajp.getParent() + File.separatorChar + config.getApplicationJarPath();\n                config.setApplicationJarPath(temp);\n                temp = null;\n            }\n            qs.setApplicationJarPath(config.getApplicationJarPath());\n            //set path also to QSAdmin\n            if (config.getQSAdminServerConfig() != null) {\n                getQSAdminServer().getServer().setApplicationJarPath(config.getApplicationJarPath());\n            }\n        }\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception {\n        QuickServer qs = getQSAdminServer().getServer();\n        qs.setBasicConfig(config);\n        //set the Logging Level to same as main QS\n        //config.getConsoleLoggingLevel();\n        String temp = getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        //set the Logging Formatter to same as main QS\n        //qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setConsoleLoggingFormatter(getConsoleLoggingFormatter());\n        //v1.4.6\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        //v1.4.6\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        getQSAdminServer().setCommandPlugin(config.getCommandPlugin());\n        //v1.3.2\n        if (config.getCommandShellEnable().equals(\"true\"))\n            getQSAdminServer().setShellEnable(true);\n        getQSAdminServer().setPromptName(config.getCommandShellPromptName());\n        //v1.3.3\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception {\n        configQuickServer(getConfig());\n        if (getConfig().getQSAdminServerConfig() != null) {\n            configQuickServer(getConfig().getQSAdminServerConfig());\n        }\n    }\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args) {\n        try {\n            if (args.length >= 1) {\n                if (args[0].equals(\"-about\")) {\n                    org.quickserver.net.server.gui.About.main(null);\n                } else if (args[0].equals(\"-load\") && args.length >= 2) {\n                    QuickServer qs = QuickServer.load(args[1]);\n                    if (qs != null)\n                        handleOptions(args, qs);\n                } else {\n                    System.out.println(printUsage());\n                }\n            } else {\n                System.out.println(printUsage());\n                org.quickserver.net.server.gui.About.showAbout();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException {\n        QuickServer qs = new QuickServer();\n        Object[] config = new Object[] { xml };\n        qs.initServer(config);\n        qs.startServer();\n        if (qs.getConfig().getQSAdminServerConfig() != null) {\n            qs.startQSAdminServer();\n        }\n        return qs;\n    }\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"QuickServer - Java library/framework for creating robust multi-client TCP servers.\\n\");\n        sb.append(\"Copyright (C) QuickServer.org\\n\\n\");\n        sb.append(\"Usage: QuickServer [-options]\\n\");\n        sb.append(\"Where options include:\\n\");\n        sb.append(\"  -about\\t\" + \"Opens About Dialog box\\n\");\n        sb.append(\"  -load <xml_config_file> [load-options]\\t\" + \"Loads the server from xml file.\\n\");\n        sb.append(\"  Where load-options include:\\n\");\n        sb.append(\"     -fullXML2File <file_name>\\t\" + \"Dumps the Full XML configuration of the QuickServer loaded.\\n\");\n        return sb.toString();\n    }\n\n    private static void handleOptions(String[] args, QuickServer quickserver) {\n        if (args.length < 3)\n            return;\n        if (args[2].equals(\"-fullXML2File\") && args.length >= 4) {\n            File file = new File(args[3]);\n            logger.log(Level.INFO, \"Writing full xml configuration to file: {0}\", file.getAbsolutePath());\n            try {\n                TextFile.write(file, quickserver.getConfig().toXML(null));\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error writing full xml configuration: {0}\", e);\n            }\n        }\n    }\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception {\n        try {\n            if (pool != null)\n                getClientPool().clear();\n            if (clientHandlerPool != null)\n                getClientHandlerPool().clear();\n            if (getClientDataPool() != null)\n                getClientDataPool().clear();\n            if (getDBPoolUtil() != null)\n                getDBPoolUtil().clean();\n            if (byteBufferPool != null)\n                getByteBufferPool().clear();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error: {0}\", e);\n            throw e;\n        }\n    }\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception {\n        if (pool == null && clientHandlerPool == null && getClientDataPool() == null && getDBPoolUtil() == null && byteBufferPool == null) {\n            return;\n        }\n        logger.log(Level.FINE, \"Closing pools for {0}\", getName());\n        try {\n            if (pool != null && PoolHelper.isPoolOpen(getClientPool().getObjectPool())) {\n                logger.finer(\"Closing ClientThread pool.\");\n                getClientPool().close();\n            }\n            if (clientHandlerPool != null && PoolHelper.isPoolOpen(getClientHandlerPool())) {\n                logger.finer(\"Closing ClientHandler pool.\");\n                getClientHandlerPool().close();\n            }\n            if (getClientDataPool() != null && PoolHelper.isPoolOpen(getClientDataPool())) {\n                logger.finer(\"Closing ClientData pool.\");\n                getClientDataPool().close();\n            }\n            if (getDBPoolUtil() != null) {\n                logger.finer(\"Closing DB pool.\");\n                getDBPoolUtil().clean();\n            }\n            if (byteBufferPool != null && PoolHelper.isPoolOpen(getByteBufferPool())) {\n                logger.finer(\"Closing ByteBuffer pool.\");\n                getByteBufferPool().close();\n            }\n            logger.log(Level.FINE, \"Closed pools for {0}\", getName());\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error closing pools for {0}: {1}\", new Object[] { getName(), e });\n            throw e;\n        }\n    }\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception {\n        logger.fine(\"Creating pools\");\n        if (getBlockingMode() == false) {\n            makeByteBufferPool(getBasicConfig().getObjectPoolConfig().getByteBufferObjectPoolConfig());\n        }\n        makeClientPool(getBasicConfig().getObjectPoolConfig().getThreadObjectPoolConfig());\n        makeClientHandlerPool(getBasicConfig().getObjectPoolConfig().getClientHandlerObjectPoolConfig());\n        //check if client data is poolable\n        if (clientDataClass != null) {\n            try {\n                clientData = (ClientData) clientDataClass.newInstance();\n                if (PoolableObject.class.isInstance(clientData) == true) {\n                    PoolableObject po = (PoolableObject) clientData;\n                    if (po.isPoolable() == true) {\n                        makeClientDataPool(po.getPoolableObjectFactory(), getBasicConfig().getObjectPoolConfig().getClientDataObjectPoolConfig());\n                    } else {\n                        clientDataPool = null;\n                        logger.fine(\"ClientData is not poolable!\");\n                    }\n                }\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error: {0}\", e);\n                throw e;\n            }\n        }\n        try {\n            makeDBObjectPool();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error in makeDBObjectPool() : {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw e;\n        }\n        logger.fine(\"Created pools\");\n    }\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool() {\n        if (pool == null)\n            throw new IllegalStateException(\"No ClientPool available yet!\");\n        return pool;\n    }\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientHandler pool\");\n        PoolableObjectFactory factory = new ClientHandlerObjectFactory(getBlockingMode());\n        clientHandlerPool = poolManager.makeClientHandlerPool(factory, opConfig);\n        poolManager.initPool(clientHandlerPool, opConfig);\n        clientHandlerPool = makeQSObjectPool(clientHandlerPool);\n        clientIdentifier.setClientHandlerPool((QSObjectPool) clientHandlerPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool() {\n        if (clientHandlerPool == null)\n            throw new IllegalStateException(\"No ClientHandler Pool available yet!\");\n        return clientHandlerPool;\n    }\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config) {\n        this.config = config;\n    }\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig() {\n        return config;\n    }\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientData pool\");\n        clientDataPool = poolManager.makeClientDataPool(factory, opConfig);\n        poolManager.initPool(clientDataPool, opConfig);\n        clientDataPool = makeQSObjectPool(clientDataPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool() {\n        return clientDataPool;\n    }\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil() {\n        return dBPoolUtil;\n    }\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig) {\n        getConfig().setDBObjectPoolConfig(dBObjectPoolConfig);\n    }\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception {\n        if (getConfig().getDBObjectPoolConfig() != null) {\n            logger.fine(\"Creating DBObject Pool\");\n            //logger.finest(\"Got:\\n\"+getConfig().getDBObjectPoolConfig().toXML(null));\n            Class dbPoolUtilClass = getClass(getConfig().getDBObjectPoolConfig().getDbPoolUtil(), true);\n            dBPoolUtil = (DBPoolUtil) dbPoolUtilClass.newInstance();\n            dBPoolUtil.setDatabaseConnections(getConfig().getDBObjectPoolConfig().getDatabaseConnectionSet().iterator());\n            dBPoolUtil.initPool();\n        }\n    }\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id) {\n        return clientIdentifier.findFirstClientById(id);\n    }\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient() {\n        return clientIdentifier.findAllClient();\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern) {\n        return clientIdentifier.findAllClientById(pattern);\n    }\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key) {\n        return clientIdentifier.findClientByKey(key);\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern) {\n        return clientIdentifier.findAllClientByKey(pattern);\n    }\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted() {\n        setSkipValidation(true);\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation() {\n        return skipValidation;\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation) {\n        skipValidation = validation;\n    }\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging) {\n        this.communicationLogging = communicationLogging;\n    }\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging() {\n        return communicationLogging;\n    }\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass) {\n        if (securityManagerClass != null)\n            this.securityManagerClass = securityManagerClass;\n    }\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass() {\n        return securityManagerClass;\n    }\n\n    public SecurityManager getSecurityManager() throws AppException {\n        if (getSecurityManagerClass() == null)\n            return null;\n        SecurityManager sm = null;\n        try {\n            sm = (SecurityManager) getClass(getSecurityManagerClass(), true).newInstance();\n        } catch (ClassNotFoundException e) {\n            throw new AppException(e.getMessage());\n        } catch (InstantiationException e) {\n            throw new AppException(e.getMessage());\n        } catch (IllegalAccessException e) {\n            throw new AppException(e.getMessage());\n        }\n        return sm;\n    }\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig) {\n        this.accessConstraintConfig = accessConstraintConfig;\n    }\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig() {\n        return accessConstraintConfig;\n    }\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader) {\n        this.classLoader = classLoader;\n        Thread.currentThread().setContextClassLoader(classLoader);\n    }\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader() {\n        return classLoader;\n    }\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException {\n        if (name == null)\n            throw new IllegalArgumentException(\"Class name can't be null!\");\n        logger.log(Level.FINEST, \"Class: {0}, reload: {1}\", new Object[] { name, reload });\n        if (reload == true && classLoader != null) {\n            return classLoader.loadClass(name);\n        } else if (reload == true && classLoader == null && this.getClass().getClassLoader() != null) {\n            return this.getClass().getClassLoader().loadClass(name);\n        } else if (reload == false && classLoader != null) {\n            return Class.forName(name, true, classLoader);\n        } else /*if(reload==false && classLoader==null)*/\n        {\n            return Class.forName(name, true, this.getClass().getClassLoader());\n        }\n    }\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath) {\n        this.applicationJarPath = applicationJarPath;\n    }\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath() {\n        return applicationJarPath;\n    }\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks) {\n        this.serverHooks = serverHooks;\n    }\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks() {\n        if (serverHooks == null)\n            serverHooks = new ServerHooks();\n        return serverHooks;\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses() {\n        if (getServerHooks() == null)\n            return;\n        listOfServerHooks = new ArrayList();\n        ServerHook serverHook = null;\n        String serverHookClassName = null;\n        Class serverHookClass = null;\n        //add system hooks\n        serverHook = new GhostSocketReaper();\n        serverHook.initHook(QuickServer.this);\n        listOfServerHooks.add(serverHook);\n        ghostSocketReaper = (GhostSocketReaper) serverHook;\n        //add user hooks if any\n        Iterator iterator = getServerHooks().iterator();\n        while (iterator.hasNext()) {\n            serverHookClassName = (String) iterator.next();\n            try {\n                serverHookClass = getClass(serverHookClassName, true);\n                serverHook = (ServerHook) serverHookClass.newInstance();\n                serverHook.initHook(QuickServer.this);\n                listOfServerHooks.add(serverHook);\n                logger.log(Level.INFO, \"Loaded server hook: {0}\", serverHookClassName);\n                logger.log(Level.FINE, \"Server hook info: {0}\", serverHook.info());\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Could not load server hook [{0}]: {1}\", new Object[] { serverHookClassName, e });\n                logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            }\n        }\n        //end of while\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event) {\n        if (listOfServerHooks == null) {\n            logger.warning(\"listOfServerHooks was null!\");\n            return;\n        }\n        ServerHook serverHook = null;\n        boolean result = false;\n        Iterator iterator = listOfServerHooks.iterator();\n        String hooktype = \"UNKNOWN\";\n        switch(event) {\n            case ServerHook.PRE_STARTUP:\n                hooktype = \"PRE_STARTUP\";\n                break;\n            case ServerHook.POST_STARTUP:\n                hooktype = \"POST_STARTUP\";\n                break;\n            case ServerHook.PRE_SHUTDOWN:\n                hooktype = \"PRE_SHUTDOWN\";\n                break;\n            case ServerHook.POST_SHUTDOWN:\n                hooktype = \"POST_SHUTDOWN\";\n                break;\n        }\n        while (iterator.hasNext()) {\n            serverHook = (ServerHook) iterator.next();\n            try {\n                result = serverHook.handleEvent(event);\n            } catch (Exception e) {\n                result = false;\n                logger.log(Level.WARNING, \"Error invoking {0} hook [{1}]: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), e.getMessage() });\n            }\n            logger.log(Level.FINE, \"Invoked {0} hook [{1}] was: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), result });\n        }\n    }\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone() {\n        Object object = null;\n        try {\n            object = super.clone();\n            QuickServer _qs = (QuickServer) object;\n            _qs.setQSAdminServer(new QSAdminServer(_qs));\n        } catch (CloneNotSupportedException e) {\n            //should not happ\n            logger.log(Level.WARNING, \"Error cloning : {0}\", e);\n        }\n        return object;\n    }\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure) {\n        this.secure = secure;\n    }\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure() {\n        if (secure == null)\n            secure = new Secure();\n        return secure;\n    }\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure() {\n        return runningSecure;\n    }\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure) {\n        this.runningSecure = runningSecure;\n    }\n\n    private File makeAbsoluteToConfig(String fileName) {\n        Assertion.affirm(fileName != null, \"FileName can't be null\");\n        return ConfigReader.makeAbsoluteToConfig(fileName, getConfig());\n    }\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException {\n        server = null;\n        logger.log(Level.FINEST, \"Binding {0} to IP: {1}\", new Object[] { getName(), getBindAddr() });\n        InetSocketAddress bindAddress = new InetSocketAddress(getBindAddr(), getPort());\n        try {\n            NetworkInterface ni = NetworkInterface.getByInetAddress(getBindAddr());\n            if (ni != null) {\n                logger.fine(\"NetworkInterface: \" + ni);\n            }\n        } catch (Exception igrnore) {\n            /*ignore*/\n        } catch (Error igrnore) {\n            /*ignore*/\n        }\n        if (getSecure().isEnable() == false) {\n            logger.log(Level.FINE, \"Making a normal ServerSocket for {0}\", getName());\n            setRunningSecure(false);\n            if (getBlockingMode() == false) {\n                //for non-blocking\n                serverSocketChannel = ServerSocketChannel.open();\n                server = serverSocketChannel.socket();\n                server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n            } else {\n                //for blocking\n                server = new ServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n            }\n        } else {\n            try {\n                logger.log(Level.FINE, \"Making a secure ServerSocket for {0}\", getName());\n                getSSLContext();\n                setRunningSecure(true);\n                if (getBlockingMode() == false) {\n                    logger.log(Level.FINE, \"Making a secure ServerSocketChannel for {0}\", getName());\n                    //for non-blocking\n                    serverSocketChannel = ServerSocketChannel.open();\n                    server = serverSocketChannel.socket();\n                    server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n                } else {\n                    ServerSocketFactory ssf = getSSLContext().getServerSocketFactory();\n                    SSLServerSocket serversocket = (SSLServerSocket) ssf.createServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n                    serversocket.setNeedClientAuth(secure.isClientAuthEnable());\n                    setRunningSecure(true);\n                    secureStoreManager.logSSLServerSocketInfo(serversocket);\n                    server = serversocket;\n                    serverSocketChannel = server.getChannel();\n                    if (serverSocketChannel == null && getBlockingMode() == false) {\n                        logger.warning(\"Secure Server does not support Channel! So will run in blocking mode.\");\n                        blockingMode = false;\n                    }\n                }\n                //blocking\n            } catch (NoSuchAlgorithmException e) {\n                logger.log(Level.WARNING, \"NoSuchAlgorithmException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            } catch (KeyManagementException e) {\n                logger.log(Level.WARNING, \"KeyManagementException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            }\n        }\n        server.setReuseAddress(true);\n        int connectionTime = 0;\n        int latency = 0;\n        int bandwidth = 0;\n        connectionTime = getBasicConfig().getAdvancedSettings().getPerformancePreferencesConnectionTime();\n        latency = getBasicConfig().getAdvancedSettings().getPerformancePreferencesLatency();\n        bandwidth = getBasicConfig().getAdvancedSettings().getPerformancePreferencesBandwidth();\n        logger.log(Level.FINE, \"getPerformancePreferencesConnectionTime : {0}\", connectionTime);\n        logger.log(Level.FINE, \"getPerformancePreferencesLatency : {0}\", latency);\n        logger.log(Level.FINE, \"getPerformancePreferencesBandwidth : {0}\", bandwidth);\n        server.setPerformancePreferences(connectionTime, latency, bandwidth);\n        int clientSocketReceiveBufferSize = getBasicConfig().getAdvancedSettings().getClientSocketReceiveBufferSize();\n        if (clientSocketReceiveBufferSize > 0) {\n            logger.log(Level.FINE, \"clientSocketReceiveBufferSize: {0}\", clientSocketReceiveBufferSize);\n            server.setReceiveBufferSize(clientSocketReceiveBufferSize);\n        }\n        if (getBlockingMode() == false) {\n            logger.log(Level.FINE, \"Server Mode {0} - Non Blocking\", getName());\n            if (selector == null || selector.isOpen() == false) {\n                logger.finest(\"Opening new selector\");\n                selector = Selector.open();\n            } else {\n                logger.log(Level.FINEST, \"Reusing selector: {0}\", selector);\n            }\n            serverSocketChannel.configureBlocking(false);\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n            selector.wakeup();\n        } else {\n            logger.log(Level.FINE, \"Server Mode {0} - Blocking\", getName());\n        }\n    }\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception {\n        Assertion.affirm(basicConfig != null, \"BasicServerConfig can't be null\");\n        this.basicConfig = basicConfig;\n    }\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig() {\n        return basicConfig;\n    }\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException {\n        if (getSecure().isLoad() == false) {\n            throw new IllegalStateException(\"Secure setting is not yet enabled for loading!\");\n        }\n        logger.info(\"Loading Secure Context..\");\n        km = null;\n        tm = null;\n        try {\n            String ssManager = \"org.quickserver.security.SecureStoreManager\";\n            if (getSecure().getSecureStore() != null)\n                ssManager = getSecure().getSecureStore().getSecureStoreManager();\n            Class secureStoreManagerClass = getClass(ssManager, true);\n            secureStoreManager = (SecureStoreManager) secureStoreManagerClass.newInstance();\n            km = secureStoreManager.loadKeyManagers(getConfig());\n            logger.fine(\"KeyManager got\");\n            tm = secureStoreManager.loadTrustManagers(getConfig());\n            logger.fine(\"TrustManager got\");\n            sslc = secureStoreManager.getSSLContext(getConfig().getSecure().getProtocol());\n            sslc.init(km, tm, null);\n            logger.fine(\"SSLContext loaded\");\n        } catch (KeyStoreException e) {\n            logger.warning(\"KeyStoreException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchAlgorithmException e) {\n            logger.warning(\"NoSuchAlgorithmException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchProviderException e) {\n            logger.warning(\"NoSuchProviderException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (UnrecoverableKeyException e) {\n            logger.warning(\"UnrecoverableKeyException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (CertificateException e) {\n            logger.warning(\"CertificateException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (KeyManagementException e) {\n            logger.warning(\"KeyManagementException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (GeneralSecurityException e) {\n            logger.warning(\"GeneralSecurityException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (ClassNotFoundException e) {\n            logger.warning(\"ClassNotFoundException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (InstantiationException e) {\n            logger.warning(\"InstantiationException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (IllegalAccessException e) {\n            logger.warning(\"IllegalAccessException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        return getSSLContext(null);\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        if (protocol != null && secureStoreManager != null) {\n            SSLContext _sslc = secureStoreManager.getSSLContext(protocol);\n            _sslc.init(km, tm, null);\n            return _sslc;\n        }\n        return sslc;\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext());\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext(protocol));\n    }\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler) {\n        clientBinaryHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler() {\n        return clientBinaryHandlerString;\n    }\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector) {\n        this.selector = selector;\n    }\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector() {\n        return selector;\n    }\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception {\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        //long stime = System.currentTimeMillis();\n        //long etime = System.currentTimeMillis();\n        while (true) {\n            //etime = System.currentTimeMillis();\n            //System.out.println(\"Time Taken: \"+(etime-stime));\n            client = server.accept();\n            //stime = System.currentTimeMillis();\n            if (linger < 0) {\n                client.setSoLinger(false, 0);\n            } else {\n                client.setSoLinger(true, linger);\n            }\n            client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                //low delay=10\n                client.setTrafficClass(socketTrafficClass);\n            }\n            logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n            }\n            if (stopServer) {\n                //Client connected when server was about to be shutdown.\n                try {\n                    client.close();\n                } catch (Exception e) {\n                }\n                break;\n            }\n            if (checkAccessConstraint(client) == false) {\n                continue;\n            }\n            //Check if max connection has reached\n            if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                theClient.setClientEvent(ClientEvent.MAX_CON_BLOCKING);\n            } else {\n                theClient.setClientEvent(ClientEvent.RUN_BLOCKING);\n            }\n            theClient.setTrusted(getSkipValidation());\n            theClient.setSocket(client);\n            //mostly null\n            theClient.setSocketChannel(client.getChannel());\n            if (clientDataClass != null) {\n                if (getClientDataPool() == null) {\n                    clientData = (ClientData) clientDataClass.newInstance();\n                } else {\n                    clientData = (ClientData) getClientDataPool().borrowObject();\n                }\n                theClient.setClientData(clientData);\n            }\n            try {\n                _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                _chPolled.handleClient(theClient);\n            } catch (java.util.NoSuchElementException nsee) {\n                logger.warning(\"Could not borrow ClientHandler from pool. Error: \" + nsee);\n                logger.warning(\"Closing Socket [\" + client + \"] since no ClientHandler available.\");\n                client.close();\n            }\n            if (_chPolled != null) {\n                try {\n                    getClientPool().addClient(_chPolled, true);\n                } catch (java.util.NoSuchElementException nsee) {\n                    logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                    //logger.warning(\"Closing Socket [\"+client+\"] since no Thread available.\");\n                    //client.close();\n                    //returnClientHandlerToPool(_chPolled);\n                }\n                _chPolled = null;\n            }\n            client = null;\n            //reset it back\n            setSkipValidation(false);\n        }\n        //end of loop\n    }\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception {\n        int selectCount = 0;\n        Iterator iterator = null;\n        SelectionKey key = null;\n        ServerSocketChannel serverChannel = null;\n        SocketChannel socketChannel = null;\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        boolean stopServerProcessed = false;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        registerChannelRequestMap = new HashMap();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        while (true) {\n            selectCount = selector.select(500);\n            //selectCount = selector.select();//for testing\n            //check for any pending registerChannel req.\n            synchronized (registerChannelRequestMap) {\n                if (registerChannelRequestMap.size() > 0) {\n                    RegisterChannelRequest req = null;\n                    Object hashkey = null;\n                    iterator = registerChannelRequestMap.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        hashkey = iterator.next();\n                        req = (RegisterChannelRequest) registerChannelRequestMap.get(hashkey);\n                        req.register(getSelector());\n                    }\n                    iterator = null;\n                    registerChannelRequestMap.clear();\n                }\n                //if\n            }\n            //sync\n            if (stopServer == true && stopServerProcessed == false) {\n                logger.warning(\"Closing \" + getName());\n                serverSocketChannel.close();\n                stopServerProcessed = true;\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.warning(\"Closed \" + getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n            if (stopServer == false && stopServerProcessed == true) {\n                logger.finest(\"Server must have re-started.. will break\");\n                break;\n            }\n            if (selectCount == 0 && stopServerProcessed == true) {\n                java.util.Set keyset = selector.keys();\n                if (keyset.isEmpty() == true && getClientCount() <= 0) {\n                    break;\n                } else {\n                    continue;\n                }\n            } else if (selectCount == 0) {\n                continue;\n            }\n            iterator = selector.selectedKeys().iterator();\n            while (iterator.hasNext()) {\n                key = (SelectionKey) iterator.next();\n                if (key.isValid() == false) {\n                    iterator.remove();\n                    continue;\n                }\n                if (key.isAcceptable() && stopServer == false) {\n                    logger.finest(\"Key is Acceptable\");\n                    serverChannel = (ServerSocketChannel) key.channel();\n                    socketChannel = serverChannel.accept();\n                    if (socketChannel == null) {\n                        iterator.remove();\n                        continue;\n                    }\n                    client = socketChannel.socket();\n                    if (linger < 0) {\n                        client.setSoLinger(false, 0);\n                    } else {\n                        client.setSoLinger(true, linger);\n                    }\n                    client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                        //low delay=10\n                        client.setTrafficClass(socketTrafficClass);\n                    }\n                    logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                        client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                        logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n                    }\n                    if (checkAccessConstraint(client) == false) {\n                        iterator.remove();\n                        continue;\n                    }\n                    socketChannel.configureBlocking(false);\n                    theClient.setTrusted(getSkipValidation());\n                    theClient.setSocket(socketChannel.socket());\n                    theClient.setSocketChannel(socketChannel);\n                    if (clientDataClass != null) {\n                        if (getClientDataPool() == null) {\n                            clientData = (ClientData) clientDataClass.newInstance();\n                        } else {\n                            //borrow a object from pool\n                            clientData = (ClientData) getClientDataPool().borrowObject();\n                        }\n                        theClient.setClientData(clientData);\n                    }\n                    //Check if max connection has reached\n                    if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                        theClient.setClientEvent(ClientEvent.MAX_CON);\n                    } else {\n                        theClient.setClientEvent(ClientEvent.ACCEPT);\n                    }\n                    try {\n                        _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                        logger.finest(\"Asking \" + _chPolled.getName() + \" to handle.\");\n                        _chPolled.handleClient(theClient);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.warning(\"Could not borrow ClientHandler Object from pool. Error: \" + nsee);\n                        logger.warning(\"Closing SocketChannel [\" + serverChannel.socket() + \"] since no ClientHandler available.\");\n                        socketChannel.close();\n                    }\n                    if (_chPolled != null) {\n                        try {\n                            getClientPool().addClient(_chPolled, true);\n                        } catch (java.util.NoSuchElementException nsee) {\n                            logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                            //logger.warning(\"Closing SocketChannel [\"+serverChannel.socket()+\"] since no Thread available.\");\n                            //socketChannel.close();\n                            //returnClientHandlerToPool(_chPolled);\n                        }\n                        _chPolled = null;\n                    }\n                    socketChannel = null;\n                    client = null;\n                    //reset it back\n                    setSkipValidation(false);\n                } else if (key.isValid() && key.isReadable()) {\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Readable, removing OP_READ from interestOps for \" + _ch.getName());\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_READ));\n                        _ch.addEvent(ClientEvent.READ);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.READ);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (key.isValid() && key.isWritable()) {\n                    if (getClientPool().shouldNioWriteHappen() == false) {\n                        //no need to remove the key\n                        continue;\n                    }\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Writable, removing OP_WRITE from interestOps for \" + _ch.getName());\n                        //remove OP_WRITE from interest set\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));\n                        _ch.addEvent(ClientEvent.WRITE);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.WRITE);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (stopServer == true && key.isAcceptable()) {\n                    //we will not accept this key\n                    //reset it back\n                    setSkipValidation(false);\n                } else {\n                    logger.warning(\"Unknown key got in SelectionKey: \" + key);\n                }\n                //Remove key\n                iterator.remove();\n                Thread.yield();\n            }\n            //end of iterator\n            iterator = null;\n        }\n        //end of loop\n    }\n\n    private boolean checkAccessConstraint(Socket socket) {\n        try {\n            if (getAccessConstraintConfig() != null) {\n                getAccessConstraintConfig().checkAccept(socket);\n            }\n            return true;\n        } catch (SecurityException se) {\n            logger.warning(\"SecurityException occurred accepting connection : \" + se.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException {\n        if (getSelector() == null) {\n            throw new IllegalStateException(\"Selector is not open!\");\n        }\n        if (channel == null) {\n            throw new IllegalArgumentException(\"Can't register a null channel!\");\n        }\n        if (channel.isConnected() == false) {\n            throw new ClosedChannelException();\n        }\n        RegisterChannelRequest req = new RegisterChannelRequest(channel, ops, att);\n        RegisterChannelRequest reqOld = null;\n        synchronized (registerChannelRequestMap) {\n            reqOld = (RegisterChannelRequest) registerChannelRequestMap.get(channel);\n            if (reqOld == null) {\n                registerChannelRequestMap.put(channel, req);\n                getSelector().wakeup();\n                return true;\n            } else {\n                if (reqOld.equals(req) == false) {\n                    reqOld.setOps(reqOld.getOps() | req.getOps());\n                    reqOld.setAtt(req.getAtt());\n                    return true;\n                }\n                return false;\n            }\n        }\n        /*\n\t\tlogger.warning(\"Before register...\");\n\t\tchannel.register(getSelector(), ops, att);\n\t\tlogger.warning(\"Before wakeup and after register...\");\n\t\tgetSelector().wakeup();\n\t\tlogger.warning(\"After wakeup...\");\n\t\t*/\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig) {\n        logger.finer(\"Creating ByteBufferPool pool\");\n        int bufferSize = getBasicConfig().getAdvancedSettings().getByteBufferSize();\n        boolean useDirectByteBuffer = getBasicConfig().getAdvancedSettings().getUseDirectByteBuffer();\n        PoolableObjectFactory factory = new ByteBufferObjectFactory(bufferSize, useDirectByteBuffer);\n        byteBufferPool = poolManager.makeByteBufferPool(factory, opConfig);\n        poolManager.initPool(byteBufferPool, opConfig);\n    }\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool() {\n        return byteBufferPool;\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientThread pool\");\n        ThreadObjectFactory factory = new ThreadObjectFactory();\n        ObjectPool objectPool = poolManager.makeClientPool(factory, opConfig);\n        pool = new ClientPool(makeQSObjectPool(objectPool), opConfig);\n        factory.setClientPool(pool);\n        pool.setMaxThreadsForNioWrite(getBasicConfig().getAdvancedSettings().getMaxThreadsForNioWrite());\n        poolManager.initPool(objectPool, opConfig);\n    }\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler) {\n        clientWriteHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler() {\n        return clientWriteHandlerString;\n    }\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime() {\n        return lastStartTime;\n    }\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag) {\n        org.quickserver.util.io.ByteBufferOutputStream.setDebug(flag);\n        org.quickserver.util.io.ByteBufferInputStream.setDebug(flag);\n    }\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier() {\n        return clientIdentifier;\n    }\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception {\n        return (QSObjectPool) qsObjectPoolMaker.getQSObjectPool(objectPool);\n    }\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode() {\n        return blockingMode;\n    }\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception {\n        if (clientCommandHandlerString == null && clientEventHandlerString == null) {\n            logger.severe(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n            throw new AppException(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n        }\n        clientCommandHandler = null;\n        if (clientCommandHandlerString != null) {\n            logger.finest(\"Loading ClientCommandHandler class..\");\n            Class clientCommandHandlerClass = getClass(clientCommandHandlerString, true);\n            clientCommandHandler = (ClientCommandHandler) clientCommandHandlerClass.newInstance();\n        }\n        boolean setClientCommandHandlerLookup = false;\n        clientEventHandler = null;\n        if (clientEventHandlerString == null) {\n            clientEventHandlerString = \"org.quickserver.net.server.impl.DefaultClientEventHandler\";\n            setClientCommandHandlerLookup = true;\n        }\n        logger.finest(\"Loading ClientEventHandler class..\");\n        if (clientEventHandlerString.equals(clientCommandHandlerString) && ClientEventHandler.class.isInstance(clientCommandHandler)) {\n            clientEventHandler = (ClientEventHandler) clientCommandHandler;\n        } else {\n            clientEventHandler = (ClientEventHandler) getClass(clientEventHandlerString, true).newInstance();\n            if (setClientCommandHandlerLookup) {\n                ((DefaultClientEventHandler) clientEventHandler).setClientCommandHandler(clientCommandHandler);\n            }\n        }\n        clientExtendedEventHandler = null;\n        if (clientExtendedEventHandlerString != null) {\n            logger.finest(\"Loading ClientExtendedEventHandler class..\");\n            if (clientExtendedEventHandlerString.equals(clientCommandHandlerString) && ClientExtendedEventHandler.class.isInstance(clientCommandHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientCommandHandler;\n            } else if (clientExtendedEventHandlerString.equals(clientEventHandlerString) && ClientExtendedEventHandler.class.isInstance(clientEventHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientEventHandler;\n            } else {\n                Class clientExtendedEventHandlerClass = getClass(clientExtendedEventHandlerString, true);\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientExtendedEventHandlerClass.newInstance();\n            }\n        }\n        clientObjectHandler = null;\n        if (clientObjectHandlerString != null) {\n            logger.finest(\"Loading ClientObjectHandler class..\");\n            if (clientObjectHandlerString.equals(clientCommandHandlerString) && ClientObjectHandler.class.isInstance(clientCommandHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientCommandHandler;\n            } else if (clientObjectHandlerString.equals(clientEventHandlerString) && ClientObjectHandler.class.isInstance(clientEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientEventHandler;\n            } else if (clientObjectHandlerString.equals(clientExtendedEventHandlerString) && ClientObjectHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientExtendedEventHandler;\n            } else {\n                clientObjectHandler = (ClientObjectHandler) getClass(clientObjectHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientBinaryHandler = null;\n        if (clientBinaryHandlerString != null) {\n            logger.finest(\"Loading ClientBinaryHandler class..\");\n            if (clientBinaryHandlerString.equals(clientCommandHandlerString) && ClientBinaryHandler.class.isInstance(clientCommandHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientCommandHandler;\n            } else if (clientBinaryHandlerString.equals(clientEventHandlerString) && ClientBinaryHandler.class.isInstance(clientEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientExtendedEventHandlerString) && ClientBinaryHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientExtendedEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientObjectHandlerString) && ClientBinaryHandler.class.isInstance(clientObjectHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientObjectHandler;\n            } else {\n                clientBinaryHandler = (ClientBinaryHandler) getClass(clientBinaryHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientWriteHandler = null;\n        if (clientWriteHandlerString != null) {\n            logger.finest(\"Loading ClientWriteHandler class..\");\n            if (clientWriteHandlerString.equals(clientCommandHandlerString) && ClientWriteHandler.class.isInstance(clientCommandHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientCommandHandler;\n            } else if (clientWriteHandlerString.equals(clientEventHandlerString) && ClientWriteHandler.class.isInstance(clientEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientEventHandler;\n            } else if (clientWriteHandlerString.equals(clientExtendedEventHandlerString) && ClientWriteHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientExtendedEventHandler;\n            } else if (clientWriteHandlerString.equals(clientObjectHandlerString) && ClientWriteHandler.class.isInstance(clientObjectHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientObjectHandler;\n            } else if (clientWriteHandlerString.equals(clientBinaryHandlerString) && ClientWriteHandler.class.isInstance(clientBinaryHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientBinaryHandler;\n            } else {\n                clientWriteHandler = (ClientWriteHandler) getClass(clientWriteHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        Class authenticatorClass = null;\n        if (clientAuthenticationHandlerString != null) {\n            logger.finest(\"Loading ClientAuthenticationHandler class..\");\n            authenticatorClass = getClass(clientAuthenticationHandlerString, true);\n        }\n        if (authenticatorClass != null) {\n            Object obj = authenticatorClass.newInstance();\n            if (ClientAuthenticationHandler.class.isInstance(obj))\n                clientAuthenticationHandler = (ClientAuthenticationHandler) obj;\n            else\n                authenticator = (Authenticator) obj;\n        }\n        clientDataClass = null;\n        if (clientDataString != null) {\n            logger.finest(\"Loading ClientData class..\");\n            clientDataClass = getClass(clientDataString, true);\n        }\n        Assertion.affirm(clientEventHandler != null, \"ClientEventHandler was not loaded!\");\n    }\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler) {\n        clientEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler() {\n        return clientEventHandlerString;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException {\n        if (dataType == DataType.IN)\n            this.defaultDataModeIN = dataMode;\n        if (dataType == DataType.OUT)\n            this.defaultDataModeOUT = dataMode;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException {\n        defaultDataModeIN = defaultDataMode.getDataMode(DataType.IN);\n        defaultDataModeOUT = defaultDataMode.getDataMode(DataType.OUT);\n        ;\n    }\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType) {\n        if (dataType == DataType.IN)\n            return defaultDataModeIN;\n        if (dataType == DataType.OUT)\n            return defaultDataModeOUT;\n        else\n            throw new IllegalArgumentException(\"Unknown DataType: \" + dataType);\n    }\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler) {\n        clientExtendedEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler() {\n        return clientExtendedEventHandlerString;\n    }\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception {\n        if (getApplicationJarPath() != null && getClassLoader() == null) {\n            setClassLoader(ClassUtil.getClassLoader(getApplicationJarPath()));\n            //update qsadmin to use the same\n            if (adminServer != null) {\n                adminServer.getServer().setClassLoader(getClassLoader());\n            }\n        }\n    }\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID() {\n        return pid;\n    }\n\n    public boolean isRawCommunicationLogging() {\n        return rawCommunicationLogging;\n    }\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging) {\n        this.rawCommunicationLogging = rawCommunicationLogging;\n    }\n\n    public int getRawCommunicationMaxLength() {\n        return rawCommunicationMaxLength;\n    }\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength) {\n        this.rawCommunicationMaxLength = rawCommunicationMaxLength;\n    }\n}\n",
        "test_prompt": "// QuickServer_5Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#initService(QuickServerConfig)} method.\n*/\nclass QuickServer_5Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// QuickServer_6Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#startService()} method.\n*/\nclass QuickServer_6Test {\n}"
            }
        ],
        "id": "6b4e63a6-8084-4af3-bac2-adfb35566953",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_6Test.java",
        "original_code": "// QuickServer.java\n/*\n * This file is part of the QuickServer library \n * Copyright (C) QuickServer.org\n *\n * Use, modification, copying and distribution of this software is subject to\n * the terms and conditions of the GNU Lesser General Public License. \n * You should have received a copy of the GNU LGP License along with this \n * library; if not, you can download a copy from <http://www.quickserver.org/>.\n *\n * For questions, suggestions, bug-reports, enhancement-requests etc.\n * visit http://www.quickserver.org\n *\n */\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n *  Main class of QuickServer library. This class is used to create\n *  multi client servers quickly.\n *  <p>\n *  Ones a client is connected, it creates {@link ClientHandler} object,\n *  which is run using any thread available from the pool of threads\n *  maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n *  handles the client. <br/>\n *  QuickServer divides the application logic of its developer over eight\n *  class, <br>\n *  \t<ul>\n * \t\t<li>ClientEventHandler<br>\n *  \t\t   &nbsp;Handles client events [Optional Class].\n *  \t\t<li>ClientCommandHandler [#]<br>\n *  \t\t   &nbsp;Handles client character/string commands.\n *  \t\t<li>ClientObjectHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - Object commands.\n * \t\t<li>ClientBinaryHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - binary data.\n * \t\t<li>ClientWriteHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n *  \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n *  \t\t\t&nbsp;Used to Authencatet a client.\n *  \t\t<li>ClientData [Optional Class]<br>\n *  \t\t\t&nbsp;Client data carrier (support class)\n * \t\t<li>ClientExtendedEventHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles extended client events.\n *  \t</ul>\n *\n *  [#] = Any one of these have to be set based on default DataMode for input.\n *  The default DataMode for input is String so if not changes you will\n *  have to set ClientCommandHandler.\n *  </p>\n *  <p>\n *   Eg:\n *  <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n *  @version 1.4.8\n *  @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //Some variable are not initialised to any value because the\n    //default java value was desired initial value.\n    //'dev ' = development build not yet final\n    //'beta' = test build all features\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n        if (System.getProperty(\"org.quickserver.useOSLineSeparator\") != null && System.getProperty(\"org.quickserver.useOSLineSeparator\").equals(\"true\")) {\n            NEW_LINE = System.getProperty(\"line.separator\");\n        } else {\n            NEW_LINE = \"\\r\\n\";\n        }\n        String _pid = ManagementFactory.getRuntimeMXBean().getName();\n        int i = _pid.indexOf(\"@\");\n        pid = _pid.substring(0, i);\n        System.out.print(\"Loading QuickServer v\" + getVersion() + \" [PID:\" + pid + \"]\");\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //--v1.2\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //for Service interface\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n        System.out.println(\" Done\");\n        //should be commented if not a patch release\n        //System.out.println(\"[Includes patch(#): t=152&p=532]\");\n        //should be commented if not a dev release\n        //System.out.println(\"[Dev Build Date: Saturday, October 29, 2005]\");\n        logger.log(Level.FINE, \"PID: {0}\", pid);\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion() {\n        return VER;\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo() {\n        return getVersionNo(VER);\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver) {\n        //String ver = getVersion();\n        float version = 0;\n        //check if beta\n        int i = ver.indexOf(\" \");\n        if (i == -1)\n            i = ver.length();\n        ver = ver.substring(0, i);\n        //check for sub version\n        i = ver.indexOf(\".\");\n        if (i != -1) {\n            int j = ver.indexOf(\".\", i);\n            if (j != -1) {\n                ver = ver.substring(0, i) + \".\" + MyString.replaceAll(ver.substring(i + 1), \".\", \"\");\n            }\n        }\n        try {\n            version = Float.parseFloat(ver);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Corrupt QuickServer\");\n        }\n        return version;\n    }\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine() {\n        return NEW_LINE;\n    }\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString() {\n        return serverName + \" : \" + getPort();\n    }\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n        setClientCommandHandler(commandHandler);\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n        //send to another constructor\n        this(commandHandler);\n        setPort(port);\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException {\n        logger.log(Level.FINE, \"Starting {0}\", getName());\n        if (isClosed() == false) {\n            logger.log(Level.WARNING, \"Server {0} already running.\", getName());\n            throw new AppException(\"Server \" + getName() + \" already running.\");\n        }\n        blockingMode = getBasicConfig().getServerMode().getBlocking();\n        if (getSecure().isEnable() && blockingMode == false) {\n            //TODO we need to fix this..\n            logger.warning(\"QuickServer does not support secure servers under non-blocking mode! So will run in blocking mode.\");\n            blockingMode = true;\n            getBasicConfig().getServerMode().setBlocking(blockingMode);\n        }\n        if (serverBanner == null) {\n            serverBanner = \"\\n-------------------------------\" + \"\\n Name : \" + getName() + \"\\n Port : \" + getPort() + \"\\n-------------------------------\\n\";\n            logger.finest(\"Default Server Banner Generated\");\n        }\n        try {\n            loadApplicationClasses();\n            //load class from Advanced Settings\n            Class clientIdentifierClass = getClass(getBasicConfig().getAdvancedSettings().getClientIdentifier(), true);\n            clientIdentifier = (ClientIdentifier) clientIdentifierClass.newInstance();\n            clientIdentifier.setQuickServer(QuickServer.this);\n            //load class from ObjectPoolConfig\n            Class poolManagerClass = getClass(getBasicConfig().getObjectPoolConfig().getPoolManager(), true);\n            poolManager = (PoolManager) poolManagerClass.newInstance();\n            //load class QSObjectPoolMaker\n            Class qsObjectPoolMakerClass = getClass(getBasicConfig().getAdvancedSettings().getQSObjectPoolMaker(), true);\n            qsObjectPoolMaker = (QSObjectPoolMaker) qsObjectPoolMakerClass.newInstance();\n            loadServerHooksClasses();\n            processServerHooks(ServerHook.PRE_STARTUP);\n            if (getSecure().isLoad() == true)\n                //v1.4.0\n                loadSSLContext();\n            loadBusinessLogic();\n        } catch (ClassNotFoundException e) {\n            logger.log(Level.SEVERE, \"Could not load class/s: \" + e, e);\n            throw new AppException(\"Could not load class/s : \" + e);\n        } catch (InstantiationException e) {\n            logger.log(Level.SEVERE, \"Could not instantiate class/s: \" + e, e);\n            throw new AppException(\"Could not instantiate class/s: \" + e);\n        } catch (IllegalAccessException e) {\n            logger.log(Level.SEVERE, \"Illegal access to class/s: \" + e, e);\n            throw new AppException(\"Illegal access to class/s: \" + e);\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, \"IOException: \" + e, e);\n            throw new AppException(\"IOException: \" + e);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Exception: \" + e, e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Exception : \" + e);\n        }\n        //v1.3.3\n        if (getSecurityManagerClass() != null) {\n            System.setSecurityManager(getSecurityManager());\n        }\n        setServiceState(Service.INIT);\n        t = new Thread(this, \"QuickServer - \" + getName());\n        t.start();\n        do {\n            Thread.yield();\n        } while (getServiceState() == Service.INIT);\n        if (getServiceState() != Service.RUNNING) {\n            if (exceptionInRun != null)\n                throw new AppException(\"Could not start server \" + getName() + \"! Details: \" + exceptionInRun);\n            else\n                throw new AppException(\"Could not start server \" + getName());\n        }\n        lastStartTime = new java.util.Date();\n        logger.log(Level.FINE, \"Started {0}, Date: {1}\", new Object[] { getName(), lastStartTime });\n    }\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException {\n        processServerHooks(ServerHook.PRE_SHUTDOWN);\n        logger.log(Level.WARNING, \"Stopping {0}\", getName());\n        stopServer = true;\n        Socket death = null;\n        if (isClosed() == true) {\n            logger.log(Level.WARNING, \"Server {0} is not running!\", getName());\n            throw new AppException(\"Server \" + getName() + \" is not running!\");\n        }\n        try {\n            if (getBlockingMode() == true) {\n                if (getSecure().isEnable() == false) {\n                    death = new Socket(server.getInetAddress(), server.getLocalPort());\n                    death.getInputStream().read();\n                    death.close();\n                } else {\n                    death = getSSLSocketFactory().createSocket(server.getInetAddress(), server.getLocalPort());\n                    Thread.sleep(100);\n                    death.close();\n                }\n            }\n            if (serverSocketChannel != null) {\n                serverSocketChannel.close();\n            }\n        } catch (IOException e) {\n            logger.log(Level.FINE, \"IOError stopping {0}: {1}\", new Object[] { getName(), e });\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error stopping {0}: {1}\", new Object[] { getName(), e });\n            throw new AppException(\"Error in stopServer \" + getName() + \": \" + e);\n        }\n        for (int i = 0; getServiceState() != Service.STOPPED; i++) {\n            try {\n                Thread.sleep(60);\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error waiting for {0} to fully stop. Error: {1}\", new Object[] { getName(), e });\n            }\n            if (i > 1000) {\n                logger.severe(\"Server was not stopped even after 10sec.. will terminate now.\");\n                System.exit(-1);\n            }\n        }\n        if (adminServer == null || getQSAdminServer().getServer() != this) {\n            //so this is not qsadmin\n            setClassLoader(null);\n        }\n        logger.log(Level.INFO, \"Stopped {0}\", getName());\n    }\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException {\n        stopServer();\n        startServer();\n    }\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName() {\n        return serverName;\n    }\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name) {\n        serverName = name;\n        logger.log(Level.FINEST, \"Set to : {0}\", name);\n    }\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner() {\n        return serverBanner;\n    }\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner) {\n        serverBanner = banner;\n        logger.log(Level.FINEST, \"Set to : {0}\", banner);\n    }\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port) {\n        if (port < 0) {\n            throw new IllegalArgumentException(\"Port number can not be less than 0!\");\n        }\n        serverPort = port;\n        logger.log(Level.FINEST, \"Set to {0}\", port);\n    }\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort() {\n        if (isClosed() == false) {\n            return server.getLocalPort();\n        }\n        if (getSecure().isEnable() == false) {\n            return serverPort;\n        } else {\n            int _port = getSecure().getPort();\n            if (_port == -1)\n                return serverPort;\n            else\n                return _port;\n        }\n    }\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler) {\n        clientCommandHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler() {\n        return clientCommandHandlerString;\n    }\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data) {\n        this.clientDataString = data;\n        logger.log(Level.FINEST, \"Set to {0}\", data);\n    }\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData() {\n        return clientDataString;\n    }\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time) {\n        if (time > 0)\n            socketTimeout = time;\n        else\n            socketTimeout = 0;\n        logger.log(Level.FINEST, \"Set to {0}\", socketTimeout);\n    }\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout() {\n        return socketTimeout;\n    }\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry) {\n        maxAuthTry = authTry;\n        logger.log(Level.FINEST, \"Set to {0}\", authTry);\n    }\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry() {\n        return maxAuthTry;\n    }\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg) {\n        maxAuthTryMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg() {\n        return maxAuthTryMsg;\n    }\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg) {\n        timeoutMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg() {\n        return timeoutMsg;\n    }\n\n    private TheClient initTheClient() {\n        TheClient theClient = new TheClient();\n        theClient.setServer(QuickServer.this);\n        theClient.setTimeoutMsg(getTimeoutMsg());\n        //v1.2\n        theClient.setMaxAuthTry(getMaxAuthTry());\n        theClient.setMaxAuthTryMsg(getMaxAuthTryMsg());\n        theClient.setClientEventHandler(clientEventHandler);\n        //v1.4.6\n        theClient.setClientExtendedEventHandler(clientExtendedEventHandler);\n        theClient.setClientCommandHandler(clientCommandHandler);\n        //v1.2\n        theClient.setClientObjectHandler(clientObjectHandler);\n        //v1.4\n        theClient.setClientBinaryHandler(clientBinaryHandler);\n        //v1.4.5\n        theClient.setClientWriteHandler(clientWriteHandler);\n        //v1.3\n        theClient.setAuthenticator(authenticator);\n        //v1.4.6\n        theClient.setClientAuthenticationHandler(clientAuthenticationHandler);\n        theClient.setTimeout(socketTimeout);\n        theClient.setMaxConnectionMsg(maxConnectionMsg);\n        //v1.3.2\n        theClient.setCommunicationLogging(getCommunicationLogging());\n        return theClient;\n    }\n\n    public void run() {\n        exceptionInRun = null;\n        TheClient theClient = initTheClient();\n        try {\n            stopServer = false;\n            closeAllPools();\n            initAllPools();\n            makeServerSocket();\n            //print banner\n            System.out.println(serverBanner);\n            //v1.2\n            setServiceState(Service.RUNNING);\n            //v1.3.3\n            processServerHooks(ServerHook.POST_STARTUP);\n            if (getBlockingMode() == false) {\n                runNonBlocking(theClient);\n                if (stopServer == true) {\n                    logger.log(Level.FINEST, \"Closing selector for {0}\", getName());\n                    selector.close();\n                }\n                return;\n            } else {\n                runBlocking(theClient);\n            }\n        } catch (BindException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"{0} BindException for Port {1} @ {2} : {3}\", new Object[] { getName(), getPort(), getBindAddr().getHostAddress(), e.getMessage() });\n        } catch (javax.net.ssl.SSLException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"SSLException {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (IOException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"IOError {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (Exception e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"Error {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } finally {\n            if (getBlockingMode() == true) {\n                logger.log(Level.WARNING, \"Closing {0}\", getName());\n                try {\n                    if (isClosed() == false) {\n                        server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            } else if (getBlockingMode() == false && exceptionInRun != null) {\n                logger.log(Level.WARNING, \"Closing {0} - Had Error: {1}\", new Object[] { getName(), exceptionInRun });\n                try {\n                    if (isClosed() == false) {\n                        if (serverSocketChannel != null)\n                            serverSocketChannel.close();\n                        if (server != null)\n                            server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n        }\n    }\n\n    //end of run\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnection = maxConnection;\n        else\n            this.maxConnection = maxConnection;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnection);\n    }\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection() {\n        return maxConnection;\n    }\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount() {\n        if (clientHandlerPool != null) {\n            try {\n                return getClientHandlerPool().getNumActive();\n            } catch (Exception e) {\n                return 0;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnectionMsg = maxConnectionMsg;\n        else\n            this.maxConnectionMsg = maxConnectionMsg;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnectionMsg);\n    }\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg() {\n        return maxConnectionMsg;\n    }\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException {\n        ipAddr = InetAddress.getByName(bindAddr);\n        logger.log(Level.FINEST, \"Set to {0}\", bindAddr);\n    }\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr() {\n        if (ipAddr == null) {\n            try {\n                ipAddr = InetAddress.getByName(\"0.0.0.0\");\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Unable to create default ip(0.0.0.0) : {0}\", e);\n                throw new RuntimeException(\"Error: Unable to find servers own ip : \" + e);\n            }\n        }\n        return ipAddr;\n    }\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects) {\n        this.storeObjects = storeObjects;\n    }\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects() {\n        return storeObjects;\n    }\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port) {\n        getQSAdminServer().getServer().setPort(port);\n    }\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort() {\n        return getQSAdminServer().getServer().getPort();\n    }\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator) {\n        getQSAdminServer().getServer().setClientAuthenticationHandler(authenticator);\n    }\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator() {\n        return getQSAdminServer().getServer().getAuthenticator();\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException {\n        getQSAdminServer().setClientAuthenticationHandler(authenticator);\n        getQSAdminServer().startServer(port);\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException {\n        getQSAdminServer().startServer();\n    }\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer() {\n        if (adminServer == null)\n            adminServer = new QSAdminServer(QuickServer.this);\n        return adminServer;\n    }\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer) {\n        if (adminServer == null)\n            this.adminServer = adminServer;\n    }\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed() {\n        if (server == null)\n            return true;\n        return server.isClosed();\n    }\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger() {\n        if (appLogger != null)\n            return appLogger;\n        return logger;\n    }\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger) {\n        this.appLogger = appLogger;\n    }\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler) {\n        clientObjectHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler() {\n        return clientObjectHandlerString;\n    }\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        if (formatter == null)\n            return;\n        consoleLoggingformatter = formatter;\n        java.util.logging.Formatter conformatter = (java.util.logging.Formatter) getClass(formatter, true).newInstance();\n        Logger jdkLogger = Logger.getLogger(\"\");\n        Handler[] handlers = jdkLogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                handlers[index].setFormatter(conformatter);\n            }\n        }\n        logger.log(Level.FINEST, \"Set to {0}\", formatter);\n    }\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter() {\n        return consoleLoggingformatter;\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MiniFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to logging.MiniFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MicroFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to MicroFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        boolean isConsole = true;\n        try {\n            if (System.console() == null) {\n                isConsole = false;\n            }\n        } catch (Throwable e) {\n            //ignore\n        }\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                if (isConsole == false && level != Level.OFF) {\n                    System.out.println(\"QuickServer: You do not have a console.. so turning console logger off..\");\n                    level = Level.OFF;\n                }\n                if (level == Level.OFF) {\n                    logger.info(\"QuickServer: Removing console handler.. \");\n                    rlogger.removeHandler(handlers[index]);\n                    handlers[index].setLevel(level);\n                    handlers[index].close();\n                } else {\n                    handlers[index].setLevel(level);\n                }\n            }\n        }\n        if (level == Level.SEVERE)\n            consoleLoggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            consoleLoggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            consoleLoggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            consoleLoggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            consoleLoggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            consoleLoggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            consoleLoggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            consoleLoggingLevel = \"OFF\";\n        else\n            consoleLoggingLevel = \"UNKNOWN\";\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel() {\n        return consoleLoggingLevel;\n    }\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            handlers[index].setLevel(level);\n        }\n        if (level == Level.SEVERE)\n            loggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            loggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            loggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            loggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            loggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            loggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            loggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            loggingLevel = \"OFF\";\n        else\n            loggingLevel = \"UNKNOWN\";\n        consoleLoggingLevel = loggingLevel;\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    //*** Start of Service interface methods\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError() {\n        return serviceError;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param) {\n        serviceError = null;\n        try {\n            initServer(param);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig) {\n        serviceError = null;\n        try {\n            initServer(qsConfig);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING)\n            return false;\n        try {\n            startServer();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService() {\n        serviceError = null;\n        if (getServiceState() == Service.STOPPED)\n            return false;\n        try {\n            stopServer();\n            clearAllPools();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING) {\n            suspendMaxConnection = maxConnection;\n            suspendMaxConnectionMsg = maxConnectionMsg;\n            maxConnection = 0;\n            maxConnectionMsg = \"Service is suspended.\";\n            setServiceState(Service.SUSPENDED);\n            logger.log(Level.INFO, \"Service {0} is suspended.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService() {\n        serviceError = null;\n        if (getServiceState() == Service.SUSPENDED) {\n            maxConnection = suspendMaxConnection;\n            maxConnectionMsg = suspendMaxConnectionMsg;\n            setServiceState(Service.RUNNING);\n            logger.log(Level.INFO, \"Service {0} resumed.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info() {\n        serviceError = null;\n        StringBuilder buf = new StringBuilder();\n        buf.append(getName()).append(\"\\n\");\n        buf.append(getBindAddr().getHostAddress()).append(\" \");\n        buf.append(getPort()).append(\"\\n\");\n        return buf.toString();\n    }\n\n    // *** End of Service interface methods\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException {\n        QuickServerConfig qsConfig = null;\n        try {\n            qsConfig = ConfigReader.read((String) param[0]);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not init server from xml file {0} : {1}\", new Object[] { new File((String) param[0]).getAbsolutePath(), e });\n            throw new AppException(\"Could not init server from xml file\", e);\n        }\n        initServer(qsConfig);\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException {\n        setConfig(qsConfig);\n        try {\n            configQuickServer();\n            loadApplicationClasses();\n            //start InitServerHooks\n            InitServerHooks ish = getConfig().getInitServerHooks();\n            if (ish != null) {\n                Iterator iterator = ish.iterator();\n                String initServerHookClassName = null;\n                Class initServerHookClass = null;\n                InitServerHook initServerHook = null;\n                while (iterator.hasNext()) {\n                    initServerHookClassName = (String) iterator.next();\n                    initServerHookClass = getClass(initServerHookClassName, true);\n                    initServerHook = (InitServerHook) initServerHookClass.newInstance();\n                    logger.log(Level.INFO, \"Loaded init server hook: {0}\", initServerHookClassName);\n                    logger.log(Level.FINE, \"Init server hook info: {0}\", initServerHook.info());\n                    initServerHook.handleInit(QuickServer.this);\n                }\n            }\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not load init server hook: {0}\", e);\n            logger.log(Level.WARNING, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Could not load init server hook\", e);\n        }\n        setServiceState(Service.INIT);\n        logger.log(Level.FINEST, \"\\r\\n{0}\", MyString.getSystemInfo(getVersion()));\n    }\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState() {\n        return serviceState;\n    }\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state) {\n        serviceState = state;\n    }\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp) {\n        if (temp.equals(\"SEVERE\"))\n            qs.setConsoleLoggingLevel(Level.SEVERE);\n        else if (temp.equals(\"WARNING\"))\n            qs.setConsoleLoggingLevel(Level.WARNING);\n        else if (temp.equals(\"INFO\"))\n            qs.setConsoleLoggingLevel(Level.INFO);\n        else if (temp.equals(\"CONFIG\"))\n            qs.setConsoleLoggingLevel(Level.CONFIG);\n        else if (temp.equals(\"FINE\"))\n            qs.setConsoleLoggingLevel(Level.FINE);\n        else if (temp.equals(\"FINER\"))\n            qs.setConsoleLoggingLevel(Level.FINER);\n        else if (temp.equals(\"FINEST\"))\n            qs.setConsoleLoggingLevel(Level.FINEST);\n        else if (temp.equals(\"OFF\"))\n            qs.setConsoleLoggingLevel(Level.OFF);\n        else\n            logger.log(Level.WARNING, \"unknown level {0}\", temp);\n    }\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception {\n        QuickServer qs = QuickServer.this;\n        //v1.3\n        qs.setConfig(config);\n        qs.setBasicConfig(config);\n        String temp = config.getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        temp = null;\n        qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        //v1.3.3\n        qs.setSecurityManagerClass(config.getSecurityManagerClass());\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        temp = config.getApplicationJarPath();\n        if (temp != null) {\n            File ajp = new File(temp);\n            if (ajp.isAbsolute() == false) {\n                temp = config.getConfigFile();\n                ajp = new File(temp);\n                temp = ajp.getParent() + File.separatorChar + config.getApplicationJarPath();\n                config.setApplicationJarPath(temp);\n                temp = null;\n            }\n            qs.setApplicationJarPath(config.getApplicationJarPath());\n            //set path also to QSAdmin\n            if (config.getQSAdminServerConfig() != null) {\n                getQSAdminServer().getServer().setApplicationJarPath(config.getApplicationJarPath());\n            }\n        }\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception {\n        QuickServer qs = getQSAdminServer().getServer();\n        qs.setBasicConfig(config);\n        //set the Logging Level to same as main QS\n        //config.getConsoleLoggingLevel();\n        String temp = getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        //set the Logging Formatter to same as main QS\n        //qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setConsoleLoggingFormatter(getConsoleLoggingFormatter());\n        //v1.4.6\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        //v1.4.6\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        getQSAdminServer().setCommandPlugin(config.getCommandPlugin());\n        //v1.3.2\n        if (config.getCommandShellEnable().equals(\"true\"))\n            getQSAdminServer().setShellEnable(true);\n        getQSAdminServer().setPromptName(config.getCommandShellPromptName());\n        //v1.3.3\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception {\n        configQuickServer(getConfig());\n        if (getConfig().getQSAdminServerConfig() != null) {\n            configQuickServer(getConfig().getQSAdminServerConfig());\n        }\n    }\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args) {\n        try {\n            if (args.length >= 1) {\n                if (args[0].equals(\"-about\")) {\n                    org.quickserver.net.server.gui.About.main(null);\n                } else if (args[0].equals(\"-load\") && args.length >= 2) {\n                    QuickServer qs = QuickServer.load(args[1]);\n                    if (qs != null)\n                        handleOptions(args, qs);\n                } else {\n                    System.out.println(printUsage());\n                }\n            } else {\n                System.out.println(printUsage());\n                org.quickserver.net.server.gui.About.showAbout();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException {\n        QuickServer qs = new QuickServer();\n        Object[] config = new Object[] { xml };\n        qs.initServer(config);\n        qs.startServer();\n        if (qs.getConfig().getQSAdminServerConfig() != null) {\n            qs.startQSAdminServer();\n        }\n        return qs;\n    }\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"QuickServer - Java library/framework for creating robust multi-client TCP servers.\\n\");\n        sb.append(\"Copyright (C) QuickServer.org\\n\\n\");\n        sb.append(\"Usage: QuickServer [-options]\\n\");\n        sb.append(\"Where options include:\\n\");\n        sb.append(\"  -about\\t\" + \"Opens About Dialog box\\n\");\n        sb.append(\"  -load <xml_config_file> [load-options]\\t\" + \"Loads the server from xml file.\\n\");\n        sb.append(\"  Where load-options include:\\n\");\n        sb.append(\"     -fullXML2File <file_name>\\t\" + \"Dumps the Full XML configuration of the QuickServer loaded.\\n\");\n        return sb.toString();\n    }\n\n    private static void handleOptions(String[] args, QuickServer quickserver) {\n        if (args.length < 3)\n            return;\n        if (args[2].equals(\"-fullXML2File\") && args.length >= 4) {\n            File file = new File(args[3]);\n            logger.log(Level.INFO, \"Writing full xml configuration to file: {0}\", file.getAbsolutePath());\n            try {\n                TextFile.write(file, quickserver.getConfig().toXML(null));\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error writing full xml configuration: {0}\", e);\n            }\n        }\n    }\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception {\n        try {\n            if (pool != null)\n                getClientPool().clear();\n            if (clientHandlerPool != null)\n                getClientHandlerPool().clear();\n            if (getClientDataPool() != null)\n                getClientDataPool().clear();\n            if (getDBPoolUtil() != null)\n                getDBPoolUtil().clean();\n            if (byteBufferPool != null)\n                getByteBufferPool().clear();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error: {0}\", e);\n            throw e;\n        }\n    }\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception {\n        if (pool == null && clientHandlerPool == null && getClientDataPool() == null && getDBPoolUtil() == null && byteBufferPool == null) {\n            return;\n        }\n        logger.log(Level.FINE, \"Closing pools for {0}\", getName());\n        try {\n            if (pool != null && PoolHelper.isPoolOpen(getClientPool().getObjectPool())) {\n                logger.finer(\"Closing ClientThread pool.\");\n                getClientPool().close();\n            }\n            if (clientHandlerPool != null && PoolHelper.isPoolOpen(getClientHandlerPool())) {\n                logger.finer(\"Closing ClientHandler pool.\");\n                getClientHandlerPool().close();\n            }\n            if (getClientDataPool() != null && PoolHelper.isPoolOpen(getClientDataPool())) {\n                logger.finer(\"Closing ClientData pool.\");\n                getClientDataPool().close();\n            }\n            if (getDBPoolUtil() != null) {\n                logger.finer(\"Closing DB pool.\");\n                getDBPoolUtil().clean();\n            }\n            if (byteBufferPool != null && PoolHelper.isPoolOpen(getByteBufferPool())) {\n                logger.finer(\"Closing ByteBuffer pool.\");\n                getByteBufferPool().close();\n            }\n            logger.log(Level.FINE, \"Closed pools for {0}\", getName());\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error closing pools for {0}: {1}\", new Object[] { getName(), e });\n            throw e;\n        }\n    }\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception {\n        logger.fine(\"Creating pools\");\n        if (getBlockingMode() == false) {\n            makeByteBufferPool(getBasicConfig().getObjectPoolConfig().getByteBufferObjectPoolConfig());\n        }\n        makeClientPool(getBasicConfig().getObjectPoolConfig().getThreadObjectPoolConfig());\n        makeClientHandlerPool(getBasicConfig().getObjectPoolConfig().getClientHandlerObjectPoolConfig());\n        //check if client data is poolable\n        if (clientDataClass != null) {\n            try {\n                clientData = (ClientData) clientDataClass.newInstance();\n                if (PoolableObject.class.isInstance(clientData) == true) {\n                    PoolableObject po = (PoolableObject) clientData;\n                    if (po.isPoolable() == true) {\n                        makeClientDataPool(po.getPoolableObjectFactory(), getBasicConfig().getObjectPoolConfig().getClientDataObjectPoolConfig());\n                    } else {\n                        clientDataPool = null;\n                        logger.fine(\"ClientData is not poolable!\");\n                    }\n                }\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error: {0}\", e);\n                throw e;\n            }\n        }\n        try {\n            makeDBObjectPool();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error in makeDBObjectPool() : {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw e;\n        }\n        logger.fine(\"Created pools\");\n    }\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool() {\n        if (pool == null)\n            throw new IllegalStateException(\"No ClientPool available yet!\");\n        return pool;\n    }\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientHandler pool\");\n        PoolableObjectFactory factory = new ClientHandlerObjectFactory(getBlockingMode());\n        clientHandlerPool = poolManager.makeClientHandlerPool(factory, opConfig);\n        poolManager.initPool(clientHandlerPool, opConfig);\n        clientHandlerPool = makeQSObjectPool(clientHandlerPool);\n        clientIdentifier.setClientHandlerPool((QSObjectPool) clientHandlerPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool() {\n        if (clientHandlerPool == null)\n            throw new IllegalStateException(\"No ClientHandler Pool available yet!\");\n        return clientHandlerPool;\n    }\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config) {\n        this.config = config;\n    }\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig() {\n        return config;\n    }\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientData pool\");\n        clientDataPool = poolManager.makeClientDataPool(factory, opConfig);\n        poolManager.initPool(clientDataPool, opConfig);\n        clientDataPool = makeQSObjectPool(clientDataPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool() {\n        return clientDataPool;\n    }\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil() {\n        return dBPoolUtil;\n    }\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig) {\n        getConfig().setDBObjectPoolConfig(dBObjectPoolConfig);\n    }\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception {\n        if (getConfig().getDBObjectPoolConfig() != null) {\n            logger.fine(\"Creating DBObject Pool\");\n            //logger.finest(\"Got:\\n\"+getConfig().getDBObjectPoolConfig().toXML(null));\n            Class dbPoolUtilClass = getClass(getConfig().getDBObjectPoolConfig().getDbPoolUtil(), true);\n            dBPoolUtil = (DBPoolUtil) dbPoolUtilClass.newInstance();\n            dBPoolUtil.setDatabaseConnections(getConfig().getDBObjectPoolConfig().getDatabaseConnectionSet().iterator());\n            dBPoolUtil.initPool();\n        }\n    }\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id) {\n        return clientIdentifier.findFirstClientById(id);\n    }\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient() {\n        return clientIdentifier.findAllClient();\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern) {\n        return clientIdentifier.findAllClientById(pattern);\n    }\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key) {\n        return clientIdentifier.findClientByKey(key);\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern) {\n        return clientIdentifier.findAllClientByKey(pattern);\n    }\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted() {\n        setSkipValidation(true);\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation() {\n        return skipValidation;\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation) {\n        skipValidation = validation;\n    }\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging) {\n        this.communicationLogging = communicationLogging;\n    }\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging() {\n        return communicationLogging;\n    }\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass) {\n        if (securityManagerClass != null)\n            this.securityManagerClass = securityManagerClass;\n    }\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass() {\n        return securityManagerClass;\n    }\n\n    public SecurityManager getSecurityManager() throws AppException {\n        if (getSecurityManagerClass() == null)\n            return null;\n        SecurityManager sm = null;\n        try {\n            sm = (SecurityManager) getClass(getSecurityManagerClass(), true).newInstance();\n        } catch (ClassNotFoundException e) {\n            throw new AppException(e.getMessage());\n        } catch (InstantiationException e) {\n            throw new AppException(e.getMessage());\n        } catch (IllegalAccessException e) {\n            throw new AppException(e.getMessage());\n        }\n        return sm;\n    }\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig) {\n        this.accessConstraintConfig = accessConstraintConfig;\n    }\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig() {\n        return accessConstraintConfig;\n    }\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader) {\n        this.classLoader = classLoader;\n        Thread.currentThread().setContextClassLoader(classLoader);\n    }\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader() {\n        return classLoader;\n    }\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException {\n        if (name == null)\n            throw new IllegalArgumentException(\"Class name can't be null!\");\n        logger.log(Level.FINEST, \"Class: {0}, reload: {1}\", new Object[] { name, reload });\n        if (reload == true && classLoader != null) {\n            return classLoader.loadClass(name);\n        } else if (reload == true && classLoader == null && this.getClass().getClassLoader() != null) {\n            return this.getClass().getClassLoader().loadClass(name);\n        } else if (reload == false && classLoader != null) {\n            return Class.forName(name, true, classLoader);\n        } else /*if(reload==false && classLoader==null)*/\n        {\n            return Class.forName(name, true, this.getClass().getClassLoader());\n        }\n    }\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath) {\n        this.applicationJarPath = applicationJarPath;\n    }\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath() {\n        return applicationJarPath;\n    }\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks) {\n        this.serverHooks = serverHooks;\n    }\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks() {\n        if (serverHooks == null)\n            serverHooks = new ServerHooks();\n        return serverHooks;\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses() {\n        if (getServerHooks() == null)\n            return;\n        listOfServerHooks = new ArrayList();\n        ServerHook serverHook = null;\n        String serverHookClassName = null;\n        Class serverHookClass = null;\n        //add system hooks\n        serverHook = new GhostSocketReaper();\n        serverHook.initHook(QuickServer.this);\n        listOfServerHooks.add(serverHook);\n        ghostSocketReaper = (GhostSocketReaper) serverHook;\n        //add user hooks if any\n        Iterator iterator = getServerHooks().iterator();\n        while (iterator.hasNext()) {\n            serverHookClassName = (String) iterator.next();\n            try {\n                serverHookClass = getClass(serverHookClassName, true);\n                serverHook = (ServerHook) serverHookClass.newInstance();\n                serverHook.initHook(QuickServer.this);\n                listOfServerHooks.add(serverHook);\n                logger.log(Level.INFO, \"Loaded server hook: {0}\", serverHookClassName);\n                logger.log(Level.FINE, \"Server hook info: {0}\", serverHook.info());\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Could not load server hook [{0}]: {1}\", new Object[] { serverHookClassName, e });\n                logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            }\n        }\n        //end of while\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event) {\n        if (listOfServerHooks == null) {\n            logger.warning(\"listOfServerHooks was null!\");\n            return;\n        }\n        ServerHook serverHook = null;\n        boolean result = false;\n        Iterator iterator = listOfServerHooks.iterator();\n        String hooktype = \"UNKNOWN\";\n        switch(event) {\n            case ServerHook.PRE_STARTUP:\n                hooktype = \"PRE_STARTUP\";\n                break;\n            case ServerHook.POST_STARTUP:\n                hooktype = \"POST_STARTUP\";\n                break;\n            case ServerHook.PRE_SHUTDOWN:\n                hooktype = \"PRE_SHUTDOWN\";\n                break;\n            case ServerHook.POST_SHUTDOWN:\n                hooktype = \"POST_SHUTDOWN\";\n                break;\n        }\n        while (iterator.hasNext()) {\n            serverHook = (ServerHook) iterator.next();\n            try {\n                result = serverHook.handleEvent(event);\n            } catch (Exception e) {\n                result = false;\n                logger.log(Level.WARNING, \"Error invoking {0} hook [{1}]: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), e.getMessage() });\n            }\n            logger.log(Level.FINE, \"Invoked {0} hook [{1}] was: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), result });\n        }\n    }\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone() {\n        Object object = null;\n        try {\n            object = super.clone();\n            QuickServer _qs = (QuickServer) object;\n            _qs.setQSAdminServer(new QSAdminServer(_qs));\n        } catch (CloneNotSupportedException e) {\n            //should not happ\n            logger.log(Level.WARNING, \"Error cloning : {0}\", e);\n        }\n        return object;\n    }\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure) {\n        this.secure = secure;\n    }\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure() {\n        if (secure == null)\n            secure = new Secure();\n        return secure;\n    }\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure() {\n        return runningSecure;\n    }\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure) {\n        this.runningSecure = runningSecure;\n    }\n\n    private File makeAbsoluteToConfig(String fileName) {\n        Assertion.affirm(fileName != null, \"FileName can't be null\");\n        return ConfigReader.makeAbsoluteToConfig(fileName, getConfig());\n    }\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException {\n        server = null;\n        logger.log(Level.FINEST, \"Binding {0} to IP: {1}\", new Object[] { getName(), getBindAddr() });\n        InetSocketAddress bindAddress = new InetSocketAddress(getBindAddr(), getPort());\n        try {\n            NetworkInterface ni = NetworkInterface.getByInetAddress(getBindAddr());\n            if (ni != null) {\n                logger.fine(\"NetworkInterface: \" + ni);\n            }\n        } catch (Exception igrnore) {\n            /*ignore*/\n        } catch (Error igrnore) {\n            /*ignore*/\n        }\n        if (getSecure().isEnable() == false) {\n            logger.log(Level.FINE, \"Making a normal ServerSocket for {0}\", getName());\n            setRunningSecure(false);\n            if (getBlockingMode() == false) {\n                //for non-blocking\n                serverSocketChannel = ServerSocketChannel.open();\n                server = serverSocketChannel.socket();\n                server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n            } else {\n                //for blocking\n                server = new ServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n            }\n        } else {\n            try {\n                logger.log(Level.FINE, \"Making a secure ServerSocket for {0}\", getName());\n                getSSLContext();\n                setRunningSecure(true);\n                if (getBlockingMode() == false) {\n                    logger.log(Level.FINE, \"Making a secure ServerSocketChannel for {0}\", getName());\n                    //for non-blocking\n                    serverSocketChannel = ServerSocketChannel.open();\n                    server = serverSocketChannel.socket();\n                    server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n                } else {\n                    ServerSocketFactory ssf = getSSLContext().getServerSocketFactory();\n                    SSLServerSocket serversocket = (SSLServerSocket) ssf.createServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n                    serversocket.setNeedClientAuth(secure.isClientAuthEnable());\n                    setRunningSecure(true);\n                    secureStoreManager.logSSLServerSocketInfo(serversocket);\n                    server = serversocket;\n                    serverSocketChannel = server.getChannel();\n                    if (serverSocketChannel == null && getBlockingMode() == false) {\n                        logger.warning(\"Secure Server does not support Channel! So will run in blocking mode.\");\n                        blockingMode = false;\n                    }\n                }\n                //blocking\n            } catch (NoSuchAlgorithmException e) {\n                logger.log(Level.WARNING, \"NoSuchAlgorithmException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            } catch (KeyManagementException e) {\n                logger.log(Level.WARNING, \"KeyManagementException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            }\n        }\n        server.setReuseAddress(true);\n        int connectionTime = 0;\n        int latency = 0;\n        int bandwidth = 0;\n        connectionTime = getBasicConfig().getAdvancedSettings().getPerformancePreferencesConnectionTime();\n        latency = getBasicConfig().getAdvancedSettings().getPerformancePreferencesLatency();\n        bandwidth = getBasicConfig().getAdvancedSettings().getPerformancePreferencesBandwidth();\n        logger.log(Level.FINE, \"getPerformancePreferencesConnectionTime : {0}\", connectionTime);\n        logger.log(Level.FINE, \"getPerformancePreferencesLatency : {0}\", latency);\n        logger.log(Level.FINE, \"getPerformancePreferencesBandwidth : {0}\", bandwidth);\n        server.setPerformancePreferences(connectionTime, latency, bandwidth);\n        int clientSocketReceiveBufferSize = getBasicConfig().getAdvancedSettings().getClientSocketReceiveBufferSize();\n        if (clientSocketReceiveBufferSize > 0) {\n            logger.log(Level.FINE, \"clientSocketReceiveBufferSize: {0}\", clientSocketReceiveBufferSize);\n            server.setReceiveBufferSize(clientSocketReceiveBufferSize);\n        }\n        if (getBlockingMode() == false) {\n            logger.log(Level.FINE, \"Server Mode {0} - Non Blocking\", getName());\n            if (selector == null || selector.isOpen() == false) {\n                logger.finest(\"Opening new selector\");\n                selector = Selector.open();\n            } else {\n                logger.log(Level.FINEST, \"Reusing selector: {0}\", selector);\n            }\n            serverSocketChannel.configureBlocking(false);\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n            selector.wakeup();\n        } else {\n            logger.log(Level.FINE, \"Server Mode {0} - Blocking\", getName());\n        }\n    }\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception {\n        Assertion.affirm(basicConfig != null, \"BasicServerConfig can't be null\");\n        this.basicConfig = basicConfig;\n    }\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig() {\n        return basicConfig;\n    }\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException {\n        if (getSecure().isLoad() == false) {\n            throw new IllegalStateException(\"Secure setting is not yet enabled for loading!\");\n        }\n        logger.info(\"Loading Secure Context..\");\n        km = null;\n        tm = null;\n        try {\n            String ssManager = \"org.quickserver.security.SecureStoreManager\";\n            if (getSecure().getSecureStore() != null)\n                ssManager = getSecure().getSecureStore().getSecureStoreManager();\n            Class secureStoreManagerClass = getClass(ssManager, true);\n            secureStoreManager = (SecureStoreManager) secureStoreManagerClass.newInstance();\n            km = secureStoreManager.loadKeyManagers(getConfig());\n            logger.fine(\"KeyManager got\");\n            tm = secureStoreManager.loadTrustManagers(getConfig());\n            logger.fine(\"TrustManager got\");\n            sslc = secureStoreManager.getSSLContext(getConfig().getSecure().getProtocol());\n            sslc.init(km, tm, null);\n            logger.fine(\"SSLContext loaded\");\n        } catch (KeyStoreException e) {\n            logger.warning(\"KeyStoreException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchAlgorithmException e) {\n            logger.warning(\"NoSuchAlgorithmException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchProviderException e) {\n            logger.warning(\"NoSuchProviderException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (UnrecoverableKeyException e) {\n            logger.warning(\"UnrecoverableKeyException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (CertificateException e) {\n            logger.warning(\"CertificateException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (KeyManagementException e) {\n            logger.warning(\"KeyManagementException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (GeneralSecurityException e) {\n            logger.warning(\"GeneralSecurityException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (ClassNotFoundException e) {\n            logger.warning(\"ClassNotFoundException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (InstantiationException e) {\n            logger.warning(\"InstantiationException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (IllegalAccessException e) {\n            logger.warning(\"IllegalAccessException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        return getSSLContext(null);\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        if (protocol != null && secureStoreManager != null) {\n            SSLContext _sslc = secureStoreManager.getSSLContext(protocol);\n            _sslc.init(km, tm, null);\n            return _sslc;\n        }\n        return sslc;\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext());\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext(protocol));\n    }\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler) {\n        clientBinaryHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler() {\n        return clientBinaryHandlerString;\n    }\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector) {\n        this.selector = selector;\n    }\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector() {\n        return selector;\n    }\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception {\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        //long stime = System.currentTimeMillis();\n        //long etime = System.currentTimeMillis();\n        while (true) {\n            //etime = System.currentTimeMillis();\n            //System.out.println(\"Time Taken: \"+(etime-stime));\n            client = server.accept();\n            //stime = System.currentTimeMillis();\n            if (linger < 0) {\n                client.setSoLinger(false, 0);\n            } else {\n                client.setSoLinger(true, linger);\n            }\n            client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                //low delay=10\n                client.setTrafficClass(socketTrafficClass);\n            }\n            logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n            }\n            if (stopServer) {\n                //Client connected when server was about to be shutdown.\n                try {\n                    client.close();\n                } catch (Exception e) {\n                }\n                break;\n            }\n            if (checkAccessConstraint(client) == false) {\n                continue;\n            }\n            //Check if max connection has reached\n            if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                theClient.setClientEvent(ClientEvent.MAX_CON_BLOCKING);\n            } else {\n                theClient.setClientEvent(ClientEvent.RUN_BLOCKING);\n            }\n            theClient.setTrusted(getSkipValidation());\n            theClient.setSocket(client);\n            //mostly null\n            theClient.setSocketChannel(client.getChannel());\n            if (clientDataClass != null) {\n                if (getClientDataPool() == null) {\n                    clientData = (ClientData) clientDataClass.newInstance();\n                } else {\n                    clientData = (ClientData) getClientDataPool().borrowObject();\n                }\n                theClient.setClientData(clientData);\n            }\n            try {\n                _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                _chPolled.handleClient(theClient);\n            } catch (java.util.NoSuchElementException nsee) {\n                logger.warning(\"Could not borrow ClientHandler from pool. Error: \" + nsee);\n                logger.warning(\"Closing Socket [\" + client + \"] since no ClientHandler available.\");\n                client.close();\n            }\n            if (_chPolled != null) {\n                try {\n                    getClientPool().addClient(_chPolled, true);\n                } catch (java.util.NoSuchElementException nsee) {\n                    logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                    //logger.warning(\"Closing Socket [\"+client+\"] since no Thread available.\");\n                    //client.close();\n                    //returnClientHandlerToPool(_chPolled);\n                }\n                _chPolled = null;\n            }\n            client = null;\n            //reset it back\n            setSkipValidation(false);\n        }\n        //end of loop\n    }\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception {\n        int selectCount = 0;\n        Iterator iterator = null;\n        SelectionKey key = null;\n        ServerSocketChannel serverChannel = null;\n        SocketChannel socketChannel = null;\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        boolean stopServerProcessed = false;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        registerChannelRequestMap = new HashMap();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        while (true) {\n            selectCount = selector.select(500);\n            //selectCount = selector.select();//for testing\n            //check for any pending registerChannel req.\n            synchronized (registerChannelRequestMap) {\n                if (registerChannelRequestMap.size() > 0) {\n                    RegisterChannelRequest req = null;\n                    Object hashkey = null;\n                    iterator = registerChannelRequestMap.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        hashkey = iterator.next();\n                        req = (RegisterChannelRequest) registerChannelRequestMap.get(hashkey);\n                        req.register(getSelector());\n                    }\n                    iterator = null;\n                    registerChannelRequestMap.clear();\n                }\n                //if\n            }\n            //sync\n            if (stopServer == true && stopServerProcessed == false) {\n                logger.warning(\"Closing \" + getName());\n                serverSocketChannel.close();\n                stopServerProcessed = true;\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.warning(\"Closed \" + getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n            if (stopServer == false && stopServerProcessed == true) {\n                logger.finest(\"Server must have re-started.. will break\");\n                break;\n            }\n            if (selectCount == 0 && stopServerProcessed == true) {\n                java.util.Set keyset = selector.keys();\n                if (keyset.isEmpty() == true && getClientCount() <= 0) {\n                    break;\n                } else {\n                    continue;\n                }\n            } else if (selectCount == 0) {\n                continue;\n            }\n            iterator = selector.selectedKeys().iterator();\n            while (iterator.hasNext()) {\n                key = (SelectionKey) iterator.next();\n                if (key.isValid() == false) {\n                    iterator.remove();\n                    continue;\n                }\n                if (key.isAcceptable() && stopServer == false) {\n                    logger.finest(\"Key is Acceptable\");\n                    serverChannel = (ServerSocketChannel) key.channel();\n                    socketChannel = serverChannel.accept();\n                    if (socketChannel == null) {\n                        iterator.remove();\n                        continue;\n                    }\n                    client = socketChannel.socket();\n                    if (linger < 0) {\n                        client.setSoLinger(false, 0);\n                    } else {\n                        client.setSoLinger(true, linger);\n                    }\n                    client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                        //low delay=10\n                        client.setTrafficClass(socketTrafficClass);\n                    }\n                    logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                        client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                        logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n                    }\n                    if (checkAccessConstraint(client) == false) {\n                        iterator.remove();\n                        continue;\n                    }\n                    socketChannel.configureBlocking(false);\n                    theClient.setTrusted(getSkipValidation());\n                    theClient.setSocket(socketChannel.socket());\n                    theClient.setSocketChannel(socketChannel);\n                    if (clientDataClass != null) {\n                        if (getClientDataPool() == null) {\n                            clientData = (ClientData) clientDataClass.newInstance();\n                        } else {\n                            //borrow a object from pool\n                            clientData = (ClientData) getClientDataPool().borrowObject();\n                        }\n                        theClient.setClientData(clientData);\n                    }\n                    //Check if max connection has reached\n                    if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                        theClient.setClientEvent(ClientEvent.MAX_CON);\n                    } else {\n                        theClient.setClientEvent(ClientEvent.ACCEPT);\n                    }\n                    try {\n                        _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                        logger.finest(\"Asking \" + _chPolled.getName() + \" to handle.\");\n                        _chPolled.handleClient(theClient);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.warning(\"Could not borrow ClientHandler Object from pool. Error: \" + nsee);\n                        logger.warning(\"Closing SocketChannel [\" + serverChannel.socket() + \"] since no ClientHandler available.\");\n                        socketChannel.close();\n                    }\n                    if (_chPolled != null) {\n                        try {\n                            getClientPool().addClient(_chPolled, true);\n                        } catch (java.util.NoSuchElementException nsee) {\n                            logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                            //logger.warning(\"Closing SocketChannel [\"+serverChannel.socket()+\"] since no Thread available.\");\n                            //socketChannel.close();\n                            //returnClientHandlerToPool(_chPolled);\n                        }\n                        _chPolled = null;\n                    }\n                    socketChannel = null;\n                    client = null;\n                    //reset it back\n                    setSkipValidation(false);\n                } else if (key.isValid() && key.isReadable()) {\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Readable, removing OP_READ from interestOps for \" + _ch.getName());\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_READ));\n                        _ch.addEvent(ClientEvent.READ);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.READ);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (key.isValid() && key.isWritable()) {\n                    if (getClientPool().shouldNioWriteHappen() == false) {\n                        //no need to remove the key\n                        continue;\n                    }\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Writable, removing OP_WRITE from interestOps for \" + _ch.getName());\n                        //remove OP_WRITE from interest set\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));\n                        _ch.addEvent(ClientEvent.WRITE);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.WRITE);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (stopServer == true && key.isAcceptable()) {\n                    //we will not accept this key\n                    //reset it back\n                    setSkipValidation(false);\n                } else {\n                    logger.warning(\"Unknown key got in SelectionKey: \" + key);\n                }\n                //Remove key\n                iterator.remove();\n                Thread.yield();\n            }\n            //end of iterator\n            iterator = null;\n        }\n        //end of loop\n    }\n\n    private boolean checkAccessConstraint(Socket socket) {\n        try {\n            if (getAccessConstraintConfig() != null) {\n                getAccessConstraintConfig().checkAccept(socket);\n            }\n            return true;\n        } catch (SecurityException se) {\n            logger.warning(\"SecurityException occurred accepting connection : \" + se.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException {\n        if (getSelector() == null) {\n            throw new IllegalStateException(\"Selector is not open!\");\n        }\n        if (channel == null) {\n            throw new IllegalArgumentException(\"Can't register a null channel!\");\n        }\n        if (channel.isConnected() == false) {\n            throw new ClosedChannelException();\n        }\n        RegisterChannelRequest req = new RegisterChannelRequest(channel, ops, att);\n        RegisterChannelRequest reqOld = null;\n        synchronized (registerChannelRequestMap) {\n            reqOld = (RegisterChannelRequest) registerChannelRequestMap.get(channel);\n            if (reqOld == null) {\n                registerChannelRequestMap.put(channel, req);\n                getSelector().wakeup();\n                return true;\n            } else {\n                if (reqOld.equals(req) == false) {\n                    reqOld.setOps(reqOld.getOps() | req.getOps());\n                    reqOld.setAtt(req.getAtt());\n                    return true;\n                }\n                return false;\n            }\n        }\n        /*\n\t\tlogger.warning(\"Before register...\");\n\t\tchannel.register(getSelector(), ops, att);\n\t\tlogger.warning(\"Before wakeup and after register...\");\n\t\tgetSelector().wakeup();\n\t\tlogger.warning(\"After wakeup...\");\n\t\t*/\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig) {\n        logger.finer(\"Creating ByteBufferPool pool\");\n        int bufferSize = getBasicConfig().getAdvancedSettings().getByteBufferSize();\n        boolean useDirectByteBuffer = getBasicConfig().getAdvancedSettings().getUseDirectByteBuffer();\n        PoolableObjectFactory factory = new ByteBufferObjectFactory(bufferSize, useDirectByteBuffer);\n        byteBufferPool = poolManager.makeByteBufferPool(factory, opConfig);\n        poolManager.initPool(byteBufferPool, opConfig);\n    }\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool() {\n        return byteBufferPool;\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientThread pool\");\n        ThreadObjectFactory factory = new ThreadObjectFactory();\n        ObjectPool objectPool = poolManager.makeClientPool(factory, opConfig);\n        pool = new ClientPool(makeQSObjectPool(objectPool), opConfig);\n        factory.setClientPool(pool);\n        pool.setMaxThreadsForNioWrite(getBasicConfig().getAdvancedSettings().getMaxThreadsForNioWrite());\n        poolManager.initPool(objectPool, opConfig);\n    }\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler) {\n        clientWriteHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler() {\n        return clientWriteHandlerString;\n    }\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime() {\n        return lastStartTime;\n    }\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag) {\n        org.quickserver.util.io.ByteBufferOutputStream.setDebug(flag);\n        org.quickserver.util.io.ByteBufferInputStream.setDebug(flag);\n    }\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier() {\n        return clientIdentifier;\n    }\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception {\n        return (QSObjectPool) qsObjectPoolMaker.getQSObjectPool(objectPool);\n    }\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode() {\n        return blockingMode;\n    }\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception {\n        if (clientCommandHandlerString == null && clientEventHandlerString == null) {\n            logger.severe(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n            throw new AppException(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n        }\n        clientCommandHandler = null;\n        if (clientCommandHandlerString != null) {\n            logger.finest(\"Loading ClientCommandHandler class..\");\n            Class clientCommandHandlerClass = getClass(clientCommandHandlerString, true);\n            clientCommandHandler = (ClientCommandHandler) clientCommandHandlerClass.newInstance();\n        }\n        boolean setClientCommandHandlerLookup = false;\n        clientEventHandler = null;\n        if (clientEventHandlerString == null) {\n            clientEventHandlerString = \"org.quickserver.net.server.impl.DefaultClientEventHandler\";\n            setClientCommandHandlerLookup = true;\n        }\n        logger.finest(\"Loading ClientEventHandler class..\");\n        if (clientEventHandlerString.equals(clientCommandHandlerString) && ClientEventHandler.class.isInstance(clientCommandHandler)) {\n            clientEventHandler = (ClientEventHandler) clientCommandHandler;\n        } else {\n            clientEventHandler = (ClientEventHandler) getClass(clientEventHandlerString, true).newInstance();\n            if (setClientCommandHandlerLookup) {\n                ((DefaultClientEventHandler) clientEventHandler).setClientCommandHandler(clientCommandHandler);\n            }\n        }\n        clientExtendedEventHandler = null;\n        if (clientExtendedEventHandlerString != null) {\n            logger.finest(\"Loading ClientExtendedEventHandler class..\");\n            if (clientExtendedEventHandlerString.equals(clientCommandHandlerString) && ClientExtendedEventHandler.class.isInstance(clientCommandHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientCommandHandler;\n            } else if (clientExtendedEventHandlerString.equals(clientEventHandlerString) && ClientExtendedEventHandler.class.isInstance(clientEventHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientEventHandler;\n            } else {\n                Class clientExtendedEventHandlerClass = getClass(clientExtendedEventHandlerString, true);\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientExtendedEventHandlerClass.newInstance();\n            }\n        }\n        clientObjectHandler = null;\n        if (clientObjectHandlerString != null) {\n            logger.finest(\"Loading ClientObjectHandler class..\");\n            if (clientObjectHandlerString.equals(clientCommandHandlerString) && ClientObjectHandler.class.isInstance(clientCommandHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientCommandHandler;\n            } else if (clientObjectHandlerString.equals(clientEventHandlerString) && ClientObjectHandler.class.isInstance(clientEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientEventHandler;\n            } else if (clientObjectHandlerString.equals(clientExtendedEventHandlerString) && ClientObjectHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientExtendedEventHandler;\n            } else {\n                clientObjectHandler = (ClientObjectHandler) getClass(clientObjectHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientBinaryHandler = null;\n        if (clientBinaryHandlerString != null) {\n            logger.finest(\"Loading ClientBinaryHandler class..\");\n            if (clientBinaryHandlerString.equals(clientCommandHandlerString) && ClientBinaryHandler.class.isInstance(clientCommandHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientCommandHandler;\n            } else if (clientBinaryHandlerString.equals(clientEventHandlerString) && ClientBinaryHandler.class.isInstance(clientEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientExtendedEventHandlerString) && ClientBinaryHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientExtendedEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientObjectHandlerString) && ClientBinaryHandler.class.isInstance(clientObjectHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientObjectHandler;\n            } else {\n                clientBinaryHandler = (ClientBinaryHandler) getClass(clientBinaryHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientWriteHandler = null;\n        if (clientWriteHandlerString != null) {\n            logger.finest(\"Loading ClientWriteHandler class..\");\n            if (clientWriteHandlerString.equals(clientCommandHandlerString) && ClientWriteHandler.class.isInstance(clientCommandHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientCommandHandler;\n            } else if (clientWriteHandlerString.equals(clientEventHandlerString) && ClientWriteHandler.class.isInstance(clientEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientEventHandler;\n            } else if (clientWriteHandlerString.equals(clientExtendedEventHandlerString) && ClientWriteHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientExtendedEventHandler;\n            } else if (clientWriteHandlerString.equals(clientObjectHandlerString) && ClientWriteHandler.class.isInstance(clientObjectHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientObjectHandler;\n            } else if (clientWriteHandlerString.equals(clientBinaryHandlerString) && ClientWriteHandler.class.isInstance(clientBinaryHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientBinaryHandler;\n            } else {\n                clientWriteHandler = (ClientWriteHandler) getClass(clientWriteHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        Class authenticatorClass = null;\n        if (clientAuthenticationHandlerString != null) {\n            logger.finest(\"Loading ClientAuthenticationHandler class..\");\n            authenticatorClass = getClass(clientAuthenticationHandlerString, true);\n        }\n        if (authenticatorClass != null) {\n            Object obj = authenticatorClass.newInstance();\n            if (ClientAuthenticationHandler.class.isInstance(obj))\n                clientAuthenticationHandler = (ClientAuthenticationHandler) obj;\n            else\n                authenticator = (Authenticator) obj;\n        }\n        clientDataClass = null;\n        if (clientDataString != null) {\n            logger.finest(\"Loading ClientData class..\");\n            clientDataClass = getClass(clientDataString, true);\n        }\n        Assertion.affirm(clientEventHandler != null, \"ClientEventHandler was not loaded!\");\n    }\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler) {\n        clientEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler() {\n        return clientEventHandlerString;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException {\n        if (dataType == DataType.IN)\n            this.defaultDataModeIN = dataMode;\n        if (dataType == DataType.OUT)\n            this.defaultDataModeOUT = dataMode;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException {\n        defaultDataModeIN = defaultDataMode.getDataMode(DataType.IN);\n        defaultDataModeOUT = defaultDataMode.getDataMode(DataType.OUT);\n        ;\n    }\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType) {\n        if (dataType == DataType.IN)\n            return defaultDataModeIN;\n        if (dataType == DataType.OUT)\n            return defaultDataModeOUT;\n        else\n            throw new IllegalArgumentException(\"Unknown DataType: \" + dataType);\n    }\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler) {\n        clientExtendedEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler() {\n        return clientExtendedEventHandlerString;\n    }\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception {\n        if (getApplicationJarPath() != null && getClassLoader() == null) {\n            setClassLoader(ClassUtil.getClassLoader(getApplicationJarPath()));\n            //update qsadmin to use the same\n            if (adminServer != null) {\n                adminServer.getServer().setClassLoader(getClassLoader());\n            }\n        }\n    }\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID() {\n        return pid;\n    }\n\n    public boolean isRawCommunicationLogging() {\n        return rawCommunicationLogging;\n    }\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging) {\n        this.rawCommunicationLogging = rawCommunicationLogging;\n    }\n\n    public int getRawCommunicationMaxLength() {\n        return rawCommunicationMaxLength;\n    }\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength) {\n        this.rawCommunicationMaxLength = rawCommunicationMaxLength;\n    }\n}\n",
        "test_prompt": "// QuickServer_6Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#startService()} method.\n*/\nclass QuickServer_6Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// QuickServer_7Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#stopService()} method.\n*/\nclass QuickServer_7Test {\n}"
            }
        ],
        "id": "460a3dc4-c689-481e-8c89-9c7fc013188b",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_7Test.java",
        "original_code": "// QuickServer.java\n/*\n * This file is part of the QuickServer library \n * Copyright (C) QuickServer.org\n *\n * Use, modification, copying and distribution of this software is subject to\n * the terms and conditions of the GNU Lesser General Public License. \n * You should have received a copy of the GNU LGP License along with this \n * library; if not, you can download a copy from <http://www.quickserver.org/>.\n *\n * For questions, suggestions, bug-reports, enhancement-requests etc.\n * visit http://www.quickserver.org\n *\n */\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n *  Main class of QuickServer library. This class is used to create\n *  multi client servers quickly.\n *  <p>\n *  Ones a client is connected, it creates {@link ClientHandler} object,\n *  which is run using any thread available from the pool of threads\n *  maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n *  handles the client. <br/>\n *  QuickServer divides the application logic of its developer over eight\n *  class, <br>\n *  \t<ul>\n * \t\t<li>ClientEventHandler<br>\n *  \t\t   &nbsp;Handles client events [Optional Class].\n *  \t\t<li>ClientCommandHandler [#]<br>\n *  \t\t   &nbsp;Handles client character/string commands.\n *  \t\t<li>ClientObjectHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - Object commands.\n * \t\t<li>ClientBinaryHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - binary data.\n * \t\t<li>ClientWriteHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n *  \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n *  \t\t\t&nbsp;Used to Authencatet a client.\n *  \t\t<li>ClientData [Optional Class]<br>\n *  \t\t\t&nbsp;Client data carrier (support class)\n * \t\t<li>ClientExtendedEventHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles extended client events.\n *  \t</ul>\n *\n *  [#] = Any one of these have to be set based on default DataMode for input.\n *  The default DataMode for input is String so if not changes you will\n *  have to set ClientCommandHandler.\n *  </p>\n *  <p>\n *   Eg:\n *  <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n *  @version 1.4.8\n *  @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //Some variable are not initialised to any value because the\n    //default java value was desired initial value.\n    //'dev ' = development build not yet final\n    //'beta' = test build all features\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n        if (System.getProperty(\"org.quickserver.useOSLineSeparator\") != null && System.getProperty(\"org.quickserver.useOSLineSeparator\").equals(\"true\")) {\n            NEW_LINE = System.getProperty(\"line.separator\");\n        } else {\n            NEW_LINE = \"\\r\\n\";\n        }\n        String _pid = ManagementFactory.getRuntimeMXBean().getName();\n        int i = _pid.indexOf(\"@\");\n        pid = _pid.substring(0, i);\n        System.out.print(\"Loading QuickServer v\" + getVersion() + \" [PID:\" + pid + \"]\");\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //--v1.2\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //for Service interface\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n        System.out.println(\" Done\");\n        //should be commented if not a patch release\n        //System.out.println(\"[Includes patch(#): t=152&p=532]\");\n        //should be commented if not a dev release\n        //System.out.println(\"[Dev Build Date: Saturday, October 29, 2005]\");\n        logger.log(Level.FINE, \"PID: {0}\", pid);\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion() {\n        return VER;\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo() {\n        return getVersionNo(VER);\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver) {\n        //String ver = getVersion();\n        float version = 0;\n        //check if beta\n        int i = ver.indexOf(\" \");\n        if (i == -1)\n            i = ver.length();\n        ver = ver.substring(0, i);\n        //check for sub version\n        i = ver.indexOf(\".\");\n        if (i != -1) {\n            int j = ver.indexOf(\".\", i);\n            if (j != -1) {\n                ver = ver.substring(0, i) + \".\" + MyString.replaceAll(ver.substring(i + 1), \".\", \"\");\n            }\n        }\n        try {\n            version = Float.parseFloat(ver);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Corrupt QuickServer\");\n        }\n        return version;\n    }\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine() {\n        return NEW_LINE;\n    }\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString() {\n        return serverName + \" : \" + getPort();\n    }\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n        setClientCommandHandler(commandHandler);\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n        //send to another constructor\n        this(commandHandler);\n        setPort(port);\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException {\n        logger.log(Level.FINE, \"Starting {0}\", getName());\n        if (isClosed() == false) {\n            logger.log(Level.WARNING, \"Server {0} already running.\", getName());\n            throw new AppException(\"Server \" + getName() + \" already running.\");\n        }\n        blockingMode = getBasicConfig().getServerMode().getBlocking();\n        if (getSecure().isEnable() && blockingMode == false) {\n            //TODO we need to fix this..\n            logger.warning(\"QuickServer does not support secure servers under non-blocking mode! So will run in blocking mode.\");\n            blockingMode = true;\n            getBasicConfig().getServerMode().setBlocking(blockingMode);\n        }\n        if (serverBanner == null) {\n            serverBanner = \"\\n-------------------------------\" + \"\\n Name : \" + getName() + \"\\n Port : \" + getPort() + \"\\n-------------------------------\\n\";\n            logger.finest(\"Default Server Banner Generated\");\n        }\n        try {\n            loadApplicationClasses();\n            //load class from Advanced Settings\n            Class clientIdentifierClass = getClass(getBasicConfig().getAdvancedSettings().getClientIdentifier(), true);\n            clientIdentifier = (ClientIdentifier) clientIdentifierClass.newInstance();\n            clientIdentifier.setQuickServer(QuickServer.this);\n            //load class from ObjectPoolConfig\n            Class poolManagerClass = getClass(getBasicConfig().getObjectPoolConfig().getPoolManager(), true);\n            poolManager = (PoolManager) poolManagerClass.newInstance();\n            //load class QSObjectPoolMaker\n            Class qsObjectPoolMakerClass = getClass(getBasicConfig().getAdvancedSettings().getQSObjectPoolMaker(), true);\n            qsObjectPoolMaker = (QSObjectPoolMaker) qsObjectPoolMakerClass.newInstance();\n            loadServerHooksClasses();\n            processServerHooks(ServerHook.PRE_STARTUP);\n            if (getSecure().isLoad() == true)\n                //v1.4.0\n                loadSSLContext();\n            loadBusinessLogic();\n        } catch (ClassNotFoundException e) {\n            logger.log(Level.SEVERE, \"Could not load class/s: \" + e, e);\n            throw new AppException(\"Could not load class/s : \" + e);\n        } catch (InstantiationException e) {\n            logger.log(Level.SEVERE, \"Could not instantiate class/s: \" + e, e);\n            throw new AppException(\"Could not instantiate class/s: \" + e);\n        } catch (IllegalAccessException e) {\n            logger.log(Level.SEVERE, \"Illegal access to class/s: \" + e, e);\n            throw new AppException(\"Illegal access to class/s: \" + e);\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, \"IOException: \" + e, e);\n            throw new AppException(\"IOException: \" + e);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Exception: \" + e, e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Exception : \" + e);\n        }\n        //v1.3.3\n        if (getSecurityManagerClass() != null) {\n            System.setSecurityManager(getSecurityManager());\n        }\n        setServiceState(Service.INIT);\n        t = new Thread(this, \"QuickServer - \" + getName());\n        t.start();\n        do {\n            Thread.yield();\n        } while (getServiceState() == Service.INIT);\n        if (getServiceState() != Service.RUNNING) {\n            if (exceptionInRun != null)\n                throw new AppException(\"Could not start server \" + getName() + \"! Details: \" + exceptionInRun);\n            else\n                throw new AppException(\"Could not start server \" + getName());\n        }\n        lastStartTime = new java.util.Date();\n        logger.log(Level.FINE, \"Started {0}, Date: {1}\", new Object[] { getName(), lastStartTime });\n    }\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException {\n        processServerHooks(ServerHook.PRE_SHUTDOWN);\n        logger.log(Level.WARNING, \"Stopping {0}\", getName());\n        stopServer = true;\n        Socket death = null;\n        if (isClosed() == true) {\n            logger.log(Level.WARNING, \"Server {0} is not running!\", getName());\n            throw new AppException(\"Server \" + getName() + \" is not running!\");\n        }\n        try {\n            if (getBlockingMode() == true) {\n                if (getSecure().isEnable() == false) {\n                    death = new Socket(server.getInetAddress(), server.getLocalPort());\n                    death.getInputStream().read();\n                    death.close();\n                } else {\n                    death = getSSLSocketFactory().createSocket(server.getInetAddress(), server.getLocalPort());\n                    Thread.sleep(100);\n                    death.close();\n                }\n            }\n            if (serverSocketChannel != null) {\n                serverSocketChannel.close();\n            }\n        } catch (IOException e) {\n            logger.log(Level.FINE, \"IOError stopping {0}: {1}\", new Object[] { getName(), e });\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error stopping {0}: {1}\", new Object[] { getName(), e });\n            throw new AppException(\"Error in stopServer \" + getName() + \": \" + e);\n        }\n        for (int i = 0; getServiceState() != Service.STOPPED; i++) {\n            try {\n                Thread.sleep(60);\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error waiting for {0} to fully stop. Error: {1}\", new Object[] { getName(), e });\n            }\n            if (i > 1000) {\n                logger.severe(\"Server was not stopped even after 10sec.. will terminate now.\");\n                System.exit(-1);\n            }\n        }\n        if (adminServer == null || getQSAdminServer().getServer() != this) {\n            //so this is not qsadmin\n            setClassLoader(null);\n        }\n        logger.log(Level.INFO, \"Stopped {0}\", getName());\n    }\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException {\n        stopServer();\n        startServer();\n    }\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName() {\n        return serverName;\n    }\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name) {\n        serverName = name;\n        logger.log(Level.FINEST, \"Set to : {0}\", name);\n    }\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner() {\n        return serverBanner;\n    }\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner) {\n        serverBanner = banner;\n        logger.log(Level.FINEST, \"Set to : {0}\", banner);\n    }\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port) {\n        if (port < 0) {\n            throw new IllegalArgumentException(\"Port number can not be less than 0!\");\n        }\n        serverPort = port;\n        logger.log(Level.FINEST, \"Set to {0}\", port);\n    }\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort() {\n        if (isClosed() == false) {\n            return server.getLocalPort();\n        }\n        if (getSecure().isEnable() == false) {\n            return serverPort;\n        } else {\n            int _port = getSecure().getPort();\n            if (_port == -1)\n                return serverPort;\n            else\n                return _port;\n        }\n    }\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler) {\n        clientCommandHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler() {\n        return clientCommandHandlerString;\n    }\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data) {\n        this.clientDataString = data;\n        logger.log(Level.FINEST, \"Set to {0}\", data);\n    }\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData() {\n        return clientDataString;\n    }\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time) {\n        if (time > 0)\n            socketTimeout = time;\n        else\n            socketTimeout = 0;\n        logger.log(Level.FINEST, \"Set to {0}\", socketTimeout);\n    }\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout() {\n        return socketTimeout;\n    }\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry) {\n        maxAuthTry = authTry;\n        logger.log(Level.FINEST, \"Set to {0}\", authTry);\n    }\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry() {\n        return maxAuthTry;\n    }\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg) {\n        maxAuthTryMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg() {\n        return maxAuthTryMsg;\n    }\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg) {\n        timeoutMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg() {\n        return timeoutMsg;\n    }\n\n    private TheClient initTheClient() {\n        TheClient theClient = new TheClient();\n        theClient.setServer(QuickServer.this);\n        theClient.setTimeoutMsg(getTimeoutMsg());\n        //v1.2\n        theClient.setMaxAuthTry(getMaxAuthTry());\n        theClient.setMaxAuthTryMsg(getMaxAuthTryMsg());\n        theClient.setClientEventHandler(clientEventHandler);\n        //v1.4.6\n        theClient.setClientExtendedEventHandler(clientExtendedEventHandler);\n        theClient.setClientCommandHandler(clientCommandHandler);\n        //v1.2\n        theClient.setClientObjectHandler(clientObjectHandler);\n        //v1.4\n        theClient.setClientBinaryHandler(clientBinaryHandler);\n        //v1.4.5\n        theClient.setClientWriteHandler(clientWriteHandler);\n        //v1.3\n        theClient.setAuthenticator(authenticator);\n        //v1.4.6\n        theClient.setClientAuthenticationHandler(clientAuthenticationHandler);\n        theClient.setTimeout(socketTimeout);\n        theClient.setMaxConnectionMsg(maxConnectionMsg);\n        //v1.3.2\n        theClient.setCommunicationLogging(getCommunicationLogging());\n        return theClient;\n    }\n\n    public void run() {\n        exceptionInRun = null;\n        TheClient theClient = initTheClient();\n        try {\n            stopServer = false;\n            closeAllPools();\n            initAllPools();\n            makeServerSocket();\n            //print banner\n            System.out.println(serverBanner);\n            //v1.2\n            setServiceState(Service.RUNNING);\n            //v1.3.3\n            processServerHooks(ServerHook.POST_STARTUP);\n            if (getBlockingMode() == false) {\n                runNonBlocking(theClient);\n                if (stopServer == true) {\n                    logger.log(Level.FINEST, \"Closing selector for {0}\", getName());\n                    selector.close();\n                }\n                return;\n            } else {\n                runBlocking(theClient);\n            }\n        } catch (BindException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"{0} BindException for Port {1} @ {2} : {3}\", new Object[] { getName(), getPort(), getBindAddr().getHostAddress(), e.getMessage() });\n        } catch (javax.net.ssl.SSLException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"SSLException {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (IOException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"IOError {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (Exception e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"Error {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } finally {\n            if (getBlockingMode() == true) {\n                logger.log(Level.WARNING, \"Closing {0}\", getName());\n                try {\n                    if (isClosed() == false) {\n                        server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            } else if (getBlockingMode() == false && exceptionInRun != null) {\n                logger.log(Level.WARNING, \"Closing {0} - Had Error: {1}\", new Object[] { getName(), exceptionInRun });\n                try {\n                    if (isClosed() == false) {\n                        if (serverSocketChannel != null)\n                            serverSocketChannel.close();\n                        if (server != null)\n                            server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n        }\n    }\n\n    //end of run\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnection = maxConnection;\n        else\n            this.maxConnection = maxConnection;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnection);\n    }\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection() {\n        return maxConnection;\n    }\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount() {\n        if (clientHandlerPool != null) {\n            try {\n                return getClientHandlerPool().getNumActive();\n            } catch (Exception e) {\n                return 0;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnectionMsg = maxConnectionMsg;\n        else\n            this.maxConnectionMsg = maxConnectionMsg;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnectionMsg);\n    }\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg() {\n        return maxConnectionMsg;\n    }\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException {\n        ipAddr = InetAddress.getByName(bindAddr);\n        logger.log(Level.FINEST, \"Set to {0}\", bindAddr);\n    }\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr() {\n        if (ipAddr == null) {\n            try {\n                ipAddr = InetAddress.getByName(\"0.0.0.0\");\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Unable to create default ip(0.0.0.0) : {0}\", e);\n                throw new RuntimeException(\"Error: Unable to find servers own ip : \" + e);\n            }\n        }\n        return ipAddr;\n    }\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects) {\n        this.storeObjects = storeObjects;\n    }\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects() {\n        return storeObjects;\n    }\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port) {\n        getQSAdminServer().getServer().setPort(port);\n    }\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort() {\n        return getQSAdminServer().getServer().getPort();\n    }\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator) {\n        getQSAdminServer().getServer().setClientAuthenticationHandler(authenticator);\n    }\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator() {\n        return getQSAdminServer().getServer().getAuthenticator();\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException {\n        getQSAdminServer().setClientAuthenticationHandler(authenticator);\n        getQSAdminServer().startServer(port);\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException {\n        getQSAdminServer().startServer();\n    }\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer() {\n        if (adminServer == null)\n            adminServer = new QSAdminServer(QuickServer.this);\n        return adminServer;\n    }\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer) {\n        if (adminServer == null)\n            this.adminServer = adminServer;\n    }\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed() {\n        if (server == null)\n            return true;\n        return server.isClosed();\n    }\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger() {\n        if (appLogger != null)\n            return appLogger;\n        return logger;\n    }\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger) {\n        this.appLogger = appLogger;\n    }\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler) {\n        clientObjectHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler() {\n        return clientObjectHandlerString;\n    }\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        if (formatter == null)\n            return;\n        consoleLoggingformatter = formatter;\n        java.util.logging.Formatter conformatter = (java.util.logging.Formatter) getClass(formatter, true).newInstance();\n        Logger jdkLogger = Logger.getLogger(\"\");\n        Handler[] handlers = jdkLogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                handlers[index].setFormatter(conformatter);\n            }\n        }\n        logger.log(Level.FINEST, \"Set to {0}\", formatter);\n    }\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter() {\n        return consoleLoggingformatter;\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MiniFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to logging.MiniFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MicroFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to MicroFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        boolean isConsole = true;\n        try {\n            if (System.console() == null) {\n                isConsole = false;\n            }\n        } catch (Throwable e) {\n            //ignore\n        }\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                if (isConsole == false && level != Level.OFF) {\n                    System.out.println(\"QuickServer: You do not have a console.. so turning console logger off..\");\n                    level = Level.OFF;\n                }\n                if (level == Level.OFF) {\n                    logger.info(\"QuickServer: Removing console handler.. \");\n                    rlogger.removeHandler(handlers[index]);\n                    handlers[index].setLevel(level);\n                    handlers[index].close();\n                } else {\n                    handlers[index].setLevel(level);\n                }\n            }\n        }\n        if (level == Level.SEVERE)\n            consoleLoggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            consoleLoggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            consoleLoggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            consoleLoggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            consoleLoggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            consoleLoggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            consoleLoggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            consoleLoggingLevel = \"OFF\";\n        else\n            consoleLoggingLevel = \"UNKNOWN\";\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel() {\n        return consoleLoggingLevel;\n    }\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            handlers[index].setLevel(level);\n        }\n        if (level == Level.SEVERE)\n            loggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            loggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            loggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            loggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            loggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            loggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            loggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            loggingLevel = \"OFF\";\n        else\n            loggingLevel = \"UNKNOWN\";\n        consoleLoggingLevel = loggingLevel;\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    //*** Start of Service interface methods\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError() {\n        return serviceError;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param) {\n        serviceError = null;\n        try {\n            initServer(param);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig) {\n        serviceError = null;\n        try {\n            initServer(qsConfig);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING)\n            return false;\n        try {\n            startServer();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService() {\n        serviceError = null;\n        if (getServiceState() == Service.STOPPED)\n            return false;\n        try {\n            stopServer();\n            clearAllPools();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING) {\n            suspendMaxConnection = maxConnection;\n            suspendMaxConnectionMsg = maxConnectionMsg;\n            maxConnection = 0;\n            maxConnectionMsg = \"Service is suspended.\";\n            setServiceState(Service.SUSPENDED);\n            logger.log(Level.INFO, \"Service {0} is suspended.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService() {\n        serviceError = null;\n        if (getServiceState() == Service.SUSPENDED) {\n            maxConnection = suspendMaxConnection;\n            maxConnectionMsg = suspendMaxConnectionMsg;\n            setServiceState(Service.RUNNING);\n            logger.log(Level.INFO, \"Service {0} resumed.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info() {\n        serviceError = null;\n        StringBuilder buf = new StringBuilder();\n        buf.append(getName()).append(\"\\n\");\n        buf.append(getBindAddr().getHostAddress()).append(\" \");\n        buf.append(getPort()).append(\"\\n\");\n        return buf.toString();\n    }\n\n    // *** End of Service interface methods\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException {\n        QuickServerConfig qsConfig = null;\n        try {\n            qsConfig = ConfigReader.read((String) param[0]);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not init server from xml file {0} : {1}\", new Object[] { new File((String) param[0]).getAbsolutePath(), e });\n            throw new AppException(\"Could not init server from xml file\", e);\n        }\n        initServer(qsConfig);\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException {\n        setConfig(qsConfig);\n        try {\n            configQuickServer();\n            loadApplicationClasses();\n            //start InitServerHooks\n            InitServerHooks ish = getConfig().getInitServerHooks();\n            if (ish != null) {\n                Iterator iterator = ish.iterator();\n                String initServerHookClassName = null;\n                Class initServerHookClass = null;\n                InitServerHook initServerHook = null;\n                while (iterator.hasNext()) {\n                    initServerHookClassName = (String) iterator.next();\n                    initServerHookClass = getClass(initServerHookClassName, true);\n                    initServerHook = (InitServerHook) initServerHookClass.newInstance();\n                    logger.log(Level.INFO, \"Loaded init server hook: {0}\", initServerHookClassName);\n                    logger.log(Level.FINE, \"Init server hook info: {0}\", initServerHook.info());\n                    initServerHook.handleInit(QuickServer.this);\n                }\n            }\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not load init server hook: {0}\", e);\n            logger.log(Level.WARNING, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Could not load init server hook\", e);\n        }\n        setServiceState(Service.INIT);\n        logger.log(Level.FINEST, \"\\r\\n{0}\", MyString.getSystemInfo(getVersion()));\n    }\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState() {\n        return serviceState;\n    }\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state) {\n        serviceState = state;\n    }\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp) {\n        if (temp.equals(\"SEVERE\"))\n            qs.setConsoleLoggingLevel(Level.SEVERE);\n        else if (temp.equals(\"WARNING\"))\n            qs.setConsoleLoggingLevel(Level.WARNING);\n        else if (temp.equals(\"INFO\"))\n            qs.setConsoleLoggingLevel(Level.INFO);\n        else if (temp.equals(\"CONFIG\"))\n            qs.setConsoleLoggingLevel(Level.CONFIG);\n        else if (temp.equals(\"FINE\"))\n            qs.setConsoleLoggingLevel(Level.FINE);\n        else if (temp.equals(\"FINER\"))\n            qs.setConsoleLoggingLevel(Level.FINER);\n        else if (temp.equals(\"FINEST\"))\n            qs.setConsoleLoggingLevel(Level.FINEST);\n        else if (temp.equals(\"OFF\"))\n            qs.setConsoleLoggingLevel(Level.OFF);\n        else\n            logger.log(Level.WARNING, \"unknown level {0}\", temp);\n    }\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception {\n        QuickServer qs = QuickServer.this;\n        //v1.3\n        qs.setConfig(config);\n        qs.setBasicConfig(config);\n        String temp = config.getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        temp = null;\n        qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        //v1.3.3\n        qs.setSecurityManagerClass(config.getSecurityManagerClass());\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        temp = config.getApplicationJarPath();\n        if (temp != null) {\n            File ajp = new File(temp);\n            if (ajp.isAbsolute() == false) {\n                temp = config.getConfigFile();\n                ajp = new File(temp);\n                temp = ajp.getParent() + File.separatorChar + config.getApplicationJarPath();\n                config.setApplicationJarPath(temp);\n                temp = null;\n            }\n            qs.setApplicationJarPath(config.getApplicationJarPath());\n            //set path also to QSAdmin\n            if (config.getQSAdminServerConfig() != null) {\n                getQSAdminServer().getServer().setApplicationJarPath(config.getApplicationJarPath());\n            }\n        }\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception {\n        QuickServer qs = getQSAdminServer().getServer();\n        qs.setBasicConfig(config);\n        //set the Logging Level to same as main QS\n        //config.getConsoleLoggingLevel();\n        String temp = getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        //set the Logging Formatter to same as main QS\n        //qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setConsoleLoggingFormatter(getConsoleLoggingFormatter());\n        //v1.4.6\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        //v1.4.6\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        getQSAdminServer().setCommandPlugin(config.getCommandPlugin());\n        //v1.3.2\n        if (config.getCommandShellEnable().equals(\"true\"))\n            getQSAdminServer().setShellEnable(true);\n        getQSAdminServer().setPromptName(config.getCommandShellPromptName());\n        //v1.3.3\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception {\n        configQuickServer(getConfig());\n        if (getConfig().getQSAdminServerConfig() != null) {\n            configQuickServer(getConfig().getQSAdminServerConfig());\n        }\n    }\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args) {\n        try {\n            if (args.length >= 1) {\n                if (args[0].equals(\"-about\")) {\n                    org.quickserver.net.server.gui.About.main(null);\n                } else if (args[0].equals(\"-load\") && args.length >= 2) {\n                    QuickServer qs = QuickServer.load(args[1]);\n                    if (qs != null)\n                        handleOptions(args, qs);\n                } else {\n                    System.out.println(printUsage());\n                }\n            } else {\n                System.out.println(printUsage());\n                org.quickserver.net.server.gui.About.showAbout();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException {\n        QuickServer qs = new QuickServer();\n        Object[] config = new Object[] { xml };\n        qs.initServer(config);\n        qs.startServer();\n        if (qs.getConfig().getQSAdminServerConfig() != null) {\n            qs.startQSAdminServer();\n        }\n        return qs;\n    }\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"QuickServer - Java library/framework for creating robust multi-client TCP servers.\\n\");\n        sb.append(\"Copyright (C) QuickServer.org\\n\\n\");\n        sb.append(\"Usage: QuickServer [-options]\\n\");\n        sb.append(\"Where options include:\\n\");\n        sb.append(\"  -about\\t\" + \"Opens About Dialog box\\n\");\n        sb.append(\"  -load <xml_config_file> [load-options]\\t\" + \"Loads the server from xml file.\\n\");\n        sb.append(\"  Where load-options include:\\n\");\n        sb.append(\"     -fullXML2File <file_name>\\t\" + \"Dumps the Full XML configuration of the QuickServer loaded.\\n\");\n        return sb.toString();\n    }\n\n    private static void handleOptions(String[] args, QuickServer quickserver) {\n        if (args.length < 3)\n            return;\n        if (args[2].equals(\"-fullXML2File\") && args.length >= 4) {\n            File file = new File(args[3]);\n            logger.log(Level.INFO, \"Writing full xml configuration to file: {0}\", file.getAbsolutePath());\n            try {\n                TextFile.write(file, quickserver.getConfig().toXML(null));\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error writing full xml configuration: {0}\", e);\n            }\n        }\n    }\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception {\n        try {\n            if (pool != null)\n                getClientPool().clear();\n            if (clientHandlerPool != null)\n                getClientHandlerPool().clear();\n            if (getClientDataPool() != null)\n                getClientDataPool().clear();\n            if (getDBPoolUtil() != null)\n                getDBPoolUtil().clean();\n            if (byteBufferPool != null)\n                getByteBufferPool().clear();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error: {0}\", e);\n            throw e;\n        }\n    }\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception {\n        if (pool == null && clientHandlerPool == null && getClientDataPool() == null && getDBPoolUtil() == null && byteBufferPool == null) {\n            return;\n        }\n        logger.log(Level.FINE, \"Closing pools for {0}\", getName());\n        try {\n            if (pool != null && PoolHelper.isPoolOpen(getClientPool().getObjectPool())) {\n                logger.finer(\"Closing ClientThread pool.\");\n                getClientPool().close();\n            }\n            if (clientHandlerPool != null && PoolHelper.isPoolOpen(getClientHandlerPool())) {\n                logger.finer(\"Closing ClientHandler pool.\");\n                getClientHandlerPool().close();\n            }\n            if (getClientDataPool() != null && PoolHelper.isPoolOpen(getClientDataPool())) {\n                logger.finer(\"Closing ClientData pool.\");\n                getClientDataPool().close();\n            }\n            if (getDBPoolUtil() != null) {\n                logger.finer(\"Closing DB pool.\");\n                getDBPoolUtil().clean();\n            }\n            if (byteBufferPool != null && PoolHelper.isPoolOpen(getByteBufferPool())) {\n                logger.finer(\"Closing ByteBuffer pool.\");\n                getByteBufferPool().close();\n            }\n            logger.log(Level.FINE, \"Closed pools for {0}\", getName());\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error closing pools for {0}: {1}\", new Object[] { getName(), e });\n            throw e;\n        }\n    }\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception {\n        logger.fine(\"Creating pools\");\n        if (getBlockingMode() == false) {\n            makeByteBufferPool(getBasicConfig().getObjectPoolConfig().getByteBufferObjectPoolConfig());\n        }\n        makeClientPool(getBasicConfig().getObjectPoolConfig().getThreadObjectPoolConfig());\n        makeClientHandlerPool(getBasicConfig().getObjectPoolConfig().getClientHandlerObjectPoolConfig());\n        //check if client data is poolable\n        if (clientDataClass != null) {\n            try {\n                clientData = (ClientData) clientDataClass.newInstance();\n                if (PoolableObject.class.isInstance(clientData) == true) {\n                    PoolableObject po = (PoolableObject) clientData;\n                    if (po.isPoolable() == true) {\n                        makeClientDataPool(po.getPoolableObjectFactory(), getBasicConfig().getObjectPoolConfig().getClientDataObjectPoolConfig());\n                    } else {\n                        clientDataPool = null;\n                        logger.fine(\"ClientData is not poolable!\");\n                    }\n                }\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error: {0}\", e);\n                throw e;\n            }\n        }\n        try {\n            makeDBObjectPool();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error in makeDBObjectPool() : {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw e;\n        }\n        logger.fine(\"Created pools\");\n    }\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool() {\n        if (pool == null)\n            throw new IllegalStateException(\"No ClientPool available yet!\");\n        return pool;\n    }\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientHandler pool\");\n        PoolableObjectFactory factory = new ClientHandlerObjectFactory(getBlockingMode());\n        clientHandlerPool = poolManager.makeClientHandlerPool(factory, opConfig);\n        poolManager.initPool(clientHandlerPool, opConfig);\n        clientHandlerPool = makeQSObjectPool(clientHandlerPool);\n        clientIdentifier.setClientHandlerPool((QSObjectPool) clientHandlerPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool() {\n        if (clientHandlerPool == null)\n            throw new IllegalStateException(\"No ClientHandler Pool available yet!\");\n        return clientHandlerPool;\n    }\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config) {\n        this.config = config;\n    }\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig() {\n        return config;\n    }\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientData pool\");\n        clientDataPool = poolManager.makeClientDataPool(factory, opConfig);\n        poolManager.initPool(clientDataPool, opConfig);\n        clientDataPool = makeQSObjectPool(clientDataPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool() {\n        return clientDataPool;\n    }\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil() {\n        return dBPoolUtil;\n    }\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig) {\n        getConfig().setDBObjectPoolConfig(dBObjectPoolConfig);\n    }\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception {\n        if (getConfig().getDBObjectPoolConfig() != null) {\n            logger.fine(\"Creating DBObject Pool\");\n            //logger.finest(\"Got:\\n\"+getConfig().getDBObjectPoolConfig().toXML(null));\n            Class dbPoolUtilClass = getClass(getConfig().getDBObjectPoolConfig().getDbPoolUtil(), true);\n            dBPoolUtil = (DBPoolUtil) dbPoolUtilClass.newInstance();\n            dBPoolUtil.setDatabaseConnections(getConfig().getDBObjectPoolConfig().getDatabaseConnectionSet().iterator());\n            dBPoolUtil.initPool();\n        }\n    }\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id) {\n        return clientIdentifier.findFirstClientById(id);\n    }\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient() {\n        return clientIdentifier.findAllClient();\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern) {\n        return clientIdentifier.findAllClientById(pattern);\n    }\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key) {\n        return clientIdentifier.findClientByKey(key);\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern) {\n        return clientIdentifier.findAllClientByKey(pattern);\n    }\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted() {\n        setSkipValidation(true);\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation() {\n        return skipValidation;\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation) {\n        skipValidation = validation;\n    }\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging) {\n        this.communicationLogging = communicationLogging;\n    }\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging() {\n        return communicationLogging;\n    }\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass) {\n        if (securityManagerClass != null)\n            this.securityManagerClass = securityManagerClass;\n    }\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass() {\n        return securityManagerClass;\n    }\n\n    public SecurityManager getSecurityManager() throws AppException {\n        if (getSecurityManagerClass() == null)\n            return null;\n        SecurityManager sm = null;\n        try {\n            sm = (SecurityManager) getClass(getSecurityManagerClass(), true).newInstance();\n        } catch (ClassNotFoundException e) {\n            throw new AppException(e.getMessage());\n        } catch (InstantiationException e) {\n            throw new AppException(e.getMessage());\n        } catch (IllegalAccessException e) {\n            throw new AppException(e.getMessage());\n        }\n        return sm;\n    }\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig) {\n        this.accessConstraintConfig = accessConstraintConfig;\n    }\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig() {\n        return accessConstraintConfig;\n    }\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader) {\n        this.classLoader = classLoader;\n        Thread.currentThread().setContextClassLoader(classLoader);\n    }\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader() {\n        return classLoader;\n    }\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException {\n        if (name == null)\n            throw new IllegalArgumentException(\"Class name can't be null!\");\n        logger.log(Level.FINEST, \"Class: {0}, reload: {1}\", new Object[] { name, reload });\n        if (reload == true && classLoader != null) {\n            return classLoader.loadClass(name);\n        } else if (reload == true && classLoader == null && this.getClass().getClassLoader() != null) {\n            return this.getClass().getClassLoader().loadClass(name);\n        } else if (reload == false && classLoader != null) {\n            return Class.forName(name, true, classLoader);\n        } else /*if(reload==false && classLoader==null)*/\n        {\n            return Class.forName(name, true, this.getClass().getClassLoader());\n        }\n    }\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath) {\n        this.applicationJarPath = applicationJarPath;\n    }\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath() {\n        return applicationJarPath;\n    }\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks) {\n        this.serverHooks = serverHooks;\n    }\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks() {\n        if (serverHooks == null)\n            serverHooks = new ServerHooks();\n        return serverHooks;\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses() {\n        if (getServerHooks() == null)\n            return;\n        listOfServerHooks = new ArrayList();\n        ServerHook serverHook = null;\n        String serverHookClassName = null;\n        Class serverHookClass = null;\n        //add system hooks\n        serverHook = new GhostSocketReaper();\n        serverHook.initHook(QuickServer.this);\n        listOfServerHooks.add(serverHook);\n        ghostSocketReaper = (GhostSocketReaper) serverHook;\n        //add user hooks if any\n        Iterator iterator = getServerHooks().iterator();\n        while (iterator.hasNext()) {\n            serverHookClassName = (String) iterator.next();\n            try {\n                serverHookClass = getClass(serverHookClassName, true);\n                serverHook = (ServerHook) serverHookClass.newInstance();\n                serverHook.initHook(QuickServer.this);\n                listOfServerHooks.add(serverHook);\n                logger.log(Level.INFO, \"Loaded server hook: {0}\", serverHookClassName);\n                logger.log(Level.FINE, \"Server hook info: {0}\", serverHook.info());\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Could not load server hook [{0}]: {1}\", new Object[] { serverHookClassName, e });\n                logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            }\n        }\n        //end of while\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event) {\n        if (listOfServerHooks == null) {\n            logger.warning(\"listOfServerHooks was null!\");\n            return;\n        }\n        ServerHook serverHook = null;\n        boolean result = false;\n        Iterator iterator = listOfServerHooks.iterator();\n        String hooktype = \"UNKNOWN\";\n        switch(event) {\n            case ServerHook.PRE_STARTUP:\n                hooktype = \"PRE_STARTUP\";\n                break;\n            case ServerHook.POST_STARTUP:\n                hooktype = \"POST_STARTUP\";\n                break;\n            case ServerHook.PRE_SHUTDOWN:\n                hooktype = \"PRE_SHUTDOWN\";\n                break;\n            case ServerHook.POST_SHUTDOWN:\n                hooktype = \"POST_SHUTDOWN\";\n                break;\n        }\n        while (iterator.hasNext()) {\n            serverHook = (ServerHook) iterator.next();\n            try {\n                result = serverHook.handleEvent(event);\n            } catch (Exception e) {\n                result = false;\n                logger.log(Level.WARNING, \"Error invoking {0} hook [{1}]: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), e.getMessage() });\n            }\n            logger.log(Level.FINE, \"Invoked {0} hook [{1}] was: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), result });\n        }\n    }\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone() {\n        Object object = null;\n        try {\n            object = super.clone();\n            QuickServer _qs = (QuickServer) object;\n            _qs.setQSAdminServer(new QSAdminServer(_qs));\n        } catch (CloneNotSupportedException e) {\n            //should not happ\n            logger.log(Level.WARNING, \"Error cloning : {0}\", e);\n        }\n        return object;\n    }\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure) {\n        this.secure = secure;\n    }\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure() {\n        if (secure == null)\n            secure = new Secure();\n        return secure;\n    }\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure() {\n        return runningSecure;\n    }\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure) {\n        this.runningSecure = runningSecure;\n    }\n\n    private File makeAbsoluteToConfig(String fileName) {\n        Assertion.affirm(fileName != null, \"FileName can't be null\");\n        return ConfigReader.makeAbsoluteToConfig(fileName, getConfig());\n    }\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException {\n        server = null;\n        logger.log(Level.FINEST, \"Binding {0} to IP: {1}\", new Object[] { getName(), getBindAddr() });\n        InetSocketAddress bindAddress = new InetSocketAddress(getBindAddr(), getPort());\n        try {\n            NetworkInterface ni = NetworkInterface.getByInetAddress(getBindAddr());\n            if (ni != null) {\n                logger.fine(\"NetworkInterface: \" + ni);\n            }\n        } catch (Exception igrnore) {\n            /*ignore*/\n        } catch (Error igrnore) {\n            /*ignore*/\n        }\n        if (getSecure().isEnable() == false) {\n            logger.log(Level.FINE, \"Making a normal ServerSocket for {0}\", getName());\n            setRunningSecure(false);\n            if (getBlockingMode() == false) {\n                //for non-blocking\n                serverSocketChannel = ServerSocketChannel.open();\n                server = serverSocketChannel.socket();\n                server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n            } else {\n                //for blocking\n                server = new ServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n            }\n        } else {\n            try {\n                logger.log(Level.FINE, \"Making a secure ServerSocket for {0}\", getName());\n                getSSLContext();\n                setRunningSecure(true);\n                if (getBlockingMode() == false) {\n                    logger.log(Level.FINE, \"Making a secure ServerSocketChannel for {0}\", getName());\n                    //for non-blocking\n                    serverSocketChannel = ServerSocketChannel.open();\n                    server = serverSocketChannel.socket();\n                    server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n                } else {\n                    ServerSocketFactory ssf = getSSLContext().getServerSocketFactory();\n                    SSLServerSocket serversocket = (SSLServerSocket) ssf.createServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n                    serversocket.setNeedClientAuth(secure.isClientAuthEnable());\n                    setRunningSecure(true);\n                    secureStoreManager.logSSLServerSocketInfo(serversocket);\n                    server = serversocket;\n                    serverSocketChannel = server.getChannel();\n                    if (serverSocketChannel == null && getBlockingMode() == false) {\n                        logger.warning(\"Secure Server does not support Channel! So will run in blocking mode.\");\n                        blockingMode = false;\n                    }\n                }\n                //blocking\n            } catch (NoSuchAlgorithmException e) {\n                logger.log(Level.WARNING, \"NoSuchAlgorithmException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            } catch (KeyManagementException e) {\n                logger.log(Level.WARNING, \"KeyManagementException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            }\n        }\n        server.setReuseAddress(true);\n        int connectionTime = 0;\n        int latency = 0;\n        int bandwidth = 0;\n        connectionTime = getBasicConfig().getAdvancedSettings().getPerformancePreferencesConnectionTime();\n        latency = getBasicConfig().getAdvancedSettings().getPerformancePreferencesLatency();\n        bandwidth = getBasicConfig().getAdvancedSettings().getPerformancePreferencesBandwidth();\n        logger.log(Level.FINE, \"getPerformancePreferencesConnectionTime : {0}\", connectionTime);\n        logger.log(Level.FINE, \"getPerformancePreferencesLatency : {0}\", latency);\n        logger.log(Level.FINE, \"getPerformancePreferencesBandwidth : {0}\", bandwidth);\n        server.setPerformancePreferences(connectionTime, latency, bandwidth);\n        int clientSocketReceiveBufferSize = getBasicConfig().getAdvancedSettings().getClientSocketReceiveBufferSize();\n        if (clientSocketReceiveBufferSize > 0) {\n            logger.log(Level.FINE, \"clientSocketReceiveBufferSize: {0}\", clientSocketReceiveBufferSize);\n            server.setReceiveBufferSize(clientSocketReceiveBufferSize);\n        }\n        if (getBlockingMode() == false) {\n            logger.log(Level.FINE, \"Server Mode {0} - Non Blocking\", getName());\n            if (selector == null || selector.isOpen() == false) {\n                logger.finest(\"Opening new selector\");\n                selector = Selector.open();\n            } else {\n                logger.log(Level.FINEST, \"Reusing selector: {0}\", selector);\n            }\n            serverSocketChannel.configureBlocking(false);\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n            selector.wakeup();\n        } else {\n            logger.log(Level.FINE, \"Server Mode {0} - Blocking\", getName());\n        }\n    }\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception {\n        Assertion.affirm(basicConfig != null, \"BasicServerConfig can't be null\");\n        this.basicConfig = basicConfig;\n    }\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig() {\n        return basicConfig;\n    }\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException {\n        if (getSecure().isLoad() == false) {\n            throw new IllegalStateException(\"Secure setting is not yet enabled for loading!\");\n        }\n        logger.info(\"Loading Secure Context..\");\n        km = null;\n        tm = null;\n        try {\n            String ssManager = \"org.quickserver.security.SecureStoreManager\";\n            if (getSecure().getSecureStore() != null)\n                ssManager = getSecure().getSecureStore().getSecureStoreManager();\n            Class secureStoreManagerClass = getClass(ssManager, true);\n            secureStoreManager = (SecureStoreManager) secureStoreManagerClass.newInstance();\n            km = secureStoreManager.loadKeyManagers(getConfig());\n            logger.fine(\"KeyManager got\");\n            tm = secureStoreManager.loadTrustManagers(getConfig());\n            logger.fine(\"TrustManager got\");\n            sslc = secureStoreManager.getSSLContext(getConfig().getSecure().getProtocol());\n            sslc.init(km, tm, null);\n            logger.fine(\"SSLContext loaded\");\n        } catch (KeyStoreException e) {\n            logger.warning(\"KeyStoreException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchAlgorithmException e) {\n            logger.warning(\"NoSuchAlgorithmException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchProviderException e) {\n            logger.warning(\"NoSuchProviderException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (UnrecoverableKeyException e) {\n            logger.warning(\"UnrecoverableKeyException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (CertificateException e) {\n            logger.warning(\"CertificateException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (KeyManagementException e) {\n            logger.warning(\"KeyManagementException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (GeneralSecurityException e) {\n            logger.warning(\"GeneralSecurityException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (ClassNotFoundException e) {\n            logger.warning(\"ClassNotFoundException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (InstantiationException e) {\n            logger.warning(\"InstantiationException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (IllegalAccessException e) {\n            logger.warning(\"IllegalAccessException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        return getSSLContext(null);\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        if (protocol != null && secureStoreManager != null) {\n            SSLContext _sslc = secureStoreManager.getSSLContext(protocol);\n            _sslc.init(km, tm, null);\n            return _sslc;\n        }\n        return sslc;\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext());\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext(protocol));\n    }\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler) {\n        clientBinaryHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler() {\n        return clientBinaryHandlerString;\n    }\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector) {\n        this.selector = selector;\n    }\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector() {\n        return selector;\n    }\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception {\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        //long stime = System.currentTimeMillis();\n        //long etime = System.currentTimeMillis();\n        while (true) {\n            //etime = System.currentTimeMillis();\n            //System.out.println(\"Time Taken: \"+(etime-stime));\n            client = server.accept();\n            //stime = System.currentTimeMillis();\n            if (linger < 0) {\n                client.setSoLinger(false, 0);\n            } else {\n                client.setSoLinger(true, linger);\n            }\n            client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                //low delay=10\n                client.setTrafficClass(socketTrafficClass);\n            }\n            logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n            }\n            if (stopServer) {\n                //Client connected when server was about to be shutdown.\n                try {\n                    client.close();\n                } catch (Exception e) {\n                }\n                break;\n            }\n            if (checkAccessConstraint(client) == false) {\n                continue;\n            }\n            //Check if max connection has reached\n            if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                theClient.setClientEvent(ClientEvent.MAX_CON_BLOCKING);\n            } else {\n                theClient.setClientEvent(ClientEvent.RUN_BLOCKING);\n            }\n            theClient.setTrusted(getSkipValidation());\n            theClient.setSocket(client);\n            //mostly null\n            theClient.setSocketChannel(client.getChannel());\n            if (clientDataClass != null) {\n                if (getClientDataPool() == null) {\n                    clientData = (ClientData) clientDataClass.newInstance();\n                } else {\n                    clientData = (ClientData) getClientDataPool().borrowObject();\n                }\n                theClient.setClientData(clientData);\n            }\n            try {\n                _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                _chPolled.handleClient(theClient);\n            } catch (java.util.NoSuchElementException nsee) {\n                logger.warning(\"Could not borrow ClientHandler from pool. Error: \" + nsee);\n                logger.warning(\"Closing Socket [\" + client + \"] since no ClientHandler available.\");\n                client.close();\n            }\n            if (_chPolled != null) {\n                try {\n                    getClientPool().addClient(_chPolled, true);\n                } catch (java.util.NoSuchElementException nsee) {\n                    logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                    //logger.warning(\"Closing Socket [\"+client+\"] since no Thread available.\");\n                    //client.close();\n                    //returnClientHandlerToPool(_chPolled);\n                }\n                _chPolled = null;\n            }\n            client = null;\n            //reset it back\n            setSkipValidation(false);\n        }\n        //end of loop\n    }\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception {\n        int selectCount = 0;\n        Iterator iterator = null;\n        SelectionKey key = null;\n        ServerSocketChannel serverChannel = null;\n        SocketChannel socketChannel = null;\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        boolean stopServerProcessed = false;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        registerChannelRequestMap = new HashMap();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        while (true) {\n            selectCount = selector.select(500);\n            //selectCount = selector.select();//for testing\n            //check for any pending registerChannel req.\n            synchronized (registerChannelRequestMap) {\n                if (registerChannelRequestMap.size() > 0) {\n                    RegisterChannelRequest req = null;\n                    Object hashkey = null;\n                    iterator = registerChannelRequestMap.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        hashkey = iterator.next();\n                        req = (RegisterChannelRequest) registerChannelRequestMap.get(hashkey);\n                        req.register(getSelector());\n                    }\n                    iterator = null;\n                    registerChannelRequestMap.clear();\n                }\n                //if\n            }\n            //sync\n            if (stopServer == true && stopServerProcessed == false) {\n                logger.warning(\"Closing \" + getName());\n                serverSocketChannel.close();\n                stopServerProcessed = true;\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.warning(\"Closed \" + getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n            if (stopServer == false && stopServerProcessed == true) {\n                logger.finest(\"Server must have re-started.. will break\");\n                break;\n            }\n            if (selectCount == 0 && stopServerProcessed == true) {\n                java.util.Set keyset = selector.keys();\n                if (keyset.isEmpty() == true && getClientCount() <= 0) {\n                    break;\n                } else {\n                    continue;\n                }\n            } else if (selectCount == 0) {\n                continue;\n            }\n            iterator = selector.selectedKeys().iterator();\n            while (iterator.hasNext()) {\n                key = (SelectionKey) iterator.next();\n                if (key.isValid() == false) {\n                    iterator.remove();\n                    continue;\n                }\n                if (key.isAcceptable() && stopServer == false) {\n                    logger.finest(\"Key is Acceptable\");\n                    serverChannel = (ServerSocketChannel) key.channel();\n                    socketChannel = serverChannel.accept();\n                    if (socketChannel == null) {\n                        iterator.remove();\n                        continue;\n                    }\n                    client = socketChannel.socket();\n                    if (linger < 0) {\n                        client.setSoLinger(false, 0);\n                    } else {\n                        client.setSoLinger(true, linger);\n                    }\n                    client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                        //low delay=10\n                        client.setTrafficClass(socketTrafficClass);\n                    }\n                    logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                        client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                        logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n                    }\n                    if (checkAccessConstraint(client) == false) {\n                        iterator.remove();\n                        continue;\n                    }\n                    socketChannel.configureBlocking(false);\n                    theClient.setTrusted(getSkipValidation());\n                    theClient.setSocket(socketChannel.socket());\n                    theClient.setSocketChannel(socketChannel);\n                    if (clientDataClass != null) {\n                        if (getClientDataPool() == null) {\n                            clientData = (ClientData) clientDataClass.newInstance();\n                        } else {\n                            //borrow a object from pool\n                            clientData = (ClientData) getClientDataPool().borrowObject();\n                        }\n                        theClient.setClientData(clientData);\n                    }\n                    //Check if max connection has reached\n                    if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                        theClient.setClientEvent(ClientEvent.MAX_CON);\n                    } else {\n                        theClient.setClientEvent(ClientEvent.ACCEPT);\n                    }\n                    try {\n                        _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                        logger.finest(\"Asking \" + _chPolled.getName() + \" to handle.\");\n                        _chPolled.handleClient(theClient);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.warning(\"Could not borrow ClientHandler Object from pool. Error: \" + nsee);\n                        logger.warning(\"Closing SocketChannel [\" + serverChannel.socket() + \"] since no ClientHandler available.\");\n                        socketChannel.close();\n                    }\n                    if (_chPolled != null) {\n                        try {\n                            getClientPool().addClient(_chPolled, true);\n                        } catch (java.util.NoSuchElementException nsee) {\n                            logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                            //logger.warning(\"Closing SocketChannel [\"+serverChannel.socket()+\"] since no Thread available.\");\n                            //socketChannel.close();\n                            //returnClientHandlerToPool(_chPolled);\n                        }\n                        _chPolled = null;\n                    }\n                    socketChannel = null;\n                    client = null;\n                    //reset it back\n                    setSkipValidation(false);\n                } else if (key.isValid() && key.isReadable()) {\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Readable, removing OP_READ from interestOps for \" + _ch.getName());\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_READ));\n                        _ch.addEvent(ClientEvent.READ);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.READ);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (key.isValid() && key.isWritable()) {\n                    if (getClientPool().shouldNioWriteHappen() == false) {\n                        //no need to remove the key\n                        continue;\n                    }\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Writable, removing OP_WRITE from interestOps for \" + _ch.getName());\n                        //remove OP_WRITE from interest set\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));\n                        _ch.addEvent(ClientEvent.WRITE);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.WRITE);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (stopServer == true && key.isAcceptable()) {\n                    //we will not accept this key\n                    //reset it back\n                    setSkipValidation(false);\n                } else {\n                    logger.warning(\"Unknown key got in SelectionKey: \" + key);\n                }\n                //Remove key\n                iterator.remove();\n                Thread.yield();\n            }\n            //end of iterator\n            iterator = null;\n        }\n        //end of loop\n    }\n\n    private boolean checkAccessConstraint(Socket socket) {\n        try {\n            if (getAccessConstraintConfig() != null) {\n                getAccessConstraintConfig().checkAccept(socket);\n            }\n            return true;\n        } catch (SecurityException se) {\n            logger.warning(\"SecurityException occurred accepting connection : \" + se.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException {\n        if (getSelector() == null) {\n            throw new IllegalStateException(\"Selector is not open!\");\n        }\n        if (channel == null) {\n            throw new IllegalArgumentException(\"Can't register a null channel!\");\n        }\n        if (channel.isConnected() == false) {\n            throw new ClosedChannelException();\n        }\n        RegisterChannelRequest req = new RegisterChannelRequest(channel, ops, att);\n        RegisterChannelRequest reqOld = null;\n        synchronized (registerChannelRequestMap) {\n            reqOld = (RegisterChannelRequest) registerChannelRequestMap.get(channel);\n            if (reqOld == null) {\n                registerChannelRequestMap.put(channel, req);\n                getSelector().wakeup();\n                return true;\n            } else {\n                if (reqOld.equals(req) == false) {\n                    reqOld.setOps(reqOld.getOps() | req.getOps());\n                    reqOld.setAtt(req.getAtt());\n                    return true;\n                }\n                return false;\n            }\n        }\n        /*\n\t\tlogger.warning(\"Before register...\");\n\t\tchannel.register(getSelector(), ops, att);\n\t\tlogger.warning(\"Before wakeup and after register...\");\n\t\tgetSelector().wakeup();\n\t\tlogger.warning(\"After wakeup...\");\n\t\t*/\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig) {\n        logger.finer(\"Creating ByteBufferPool pool\");\n        int bufferSize = getBasicConfig().getAdvancedSettings().getByteBufferSize();\n        boolean useDirectByteBuffer = getBasicConfig().getAdvancedSettings().getUseDirectByteBuffer();\n        PoolableObjectFactory factory = new ByteBufferObjectFactory(bufferSize, useDirectByteBuffer);\n        byteBufferPool = poolManager.makeByteBufferPool(factory, opConfig);\n        poolManager.initPool(byteBufferPool, opConfig);\n    }\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool() {\n        return byteBufferPool;\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientThread pool\");\n        ThreadObjectFactory factory = new ThreadObjectFactory();\n        ObjectPool objectPool = poolManager.makeClientPool(factory, opConfig);\n        pool = new ClientPool(makeQSObjectPool(objectPool), opConfig);\n        factory.setClientPool(pool);\n        pool.setMaxThreadsForNioWrite(getBasicConfig().getAdvancedSettings().getMaxThreadsForNioWrite());\n        poolManager.initPool(objectPool, opConfig);\n    }\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler) {\n        clientWriteHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler() {\n        return clientWriteHandlerString;\n    }\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime() {\n        return lastStartTime;\n    }\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag) {\n        org.quickserver.util.io.ByteBufferOutputStream.setDebug(flag);\n        org.quickserver.util.io.ByteBufferInputStream.setDebug(flag);\n    }\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier() {\n        return clientIdentifier;\n    }\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception {\n        return (QSObjectPool) qsObjectPoolMaker.getQSObjectPool(objectPool);\n    }\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode() {\n        return blockingMode;\n    }\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception {\n        if (clientCommandHandlerString == null && clientEventHandlerString == null) {\n            logger.severe(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n            throw new AppException(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n        }\n        clientCommandHandler = null;\n        if (clientCommandHandlerString != null) {\n            logger.finest(\"Loading ClientCommandHandler class..\");\n            Class clientCommandHandlerClass = getClass(clientCommandHandlerString, true);\n            clientCommandHandler = (ClientCommandHandler) clientCommandHandlerClass.newInstance();\n        }\n        boolean setClientCommandHandlerLookup = false;\n        clientEventHandler = null;\n        if (clientEventHandlerString == null) {\n            clientEventHandlerString = \"org.quickserver.net.server.impl.DefaultClientEventHandler\";\n            setClientCommandHandlerLookup = true;\n        }\n        logger.finest(\"Loading ClientEventHandler class..\");\n        if (clientEventHandlerString.equals(clientCommandHandlerString) && ClientEventHandler.class.isInstance(clientCommandHandler)) {\n            clientEventHandler = (ClientEventHandler) clientCommandHandler;\n        } else {\n            clientEventHandler = (ClientEventHandler) getClass(clientEventHandlerString, true).newInstance();\n            if (setClientCommandHandlerLookup) {\n                ((DefaultClientEventHandler) clientEventHandler).setClientCommandHandler(clientCommandHandler);\n            }\n        }\n        clientExtendedEventHandler = null;\n        if (clientExtendedEventHandlerString != null) {\n            logger.finest(\"Loading ClientExtendedEventHandler class..\");\n            if (clientExtendedEventHandlerString.equals(clientCommandHandlerString) && ClientExtendedEventHandler.class.isInstance(clientCommandHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientCommandHandler;\n            } else if (clientExtendedEventHandlerString.equals(clientEventHandlerString) && ClientExtendedEventHandler.class.isInstance(clientEventHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientEventHandler;\n            } else {\n                Class clientExtendedEventHandlerClass = getClass(clientExtendedEventHandlerString, true);\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientExtendedEventHandlerClass.newInstance();\n            }\n        }\n        clientObjectHandler = null;\n        if (clientObjectHandlerString != null) {\n            logger.finest(\"Loading ClientObjectHandler class..\");\n            if (clientObjectHandlerString.equals(clientCommandHandlerString) && ClientObjectHandler.class.isInstance(clientCommandHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientCommandHandler;\n            } else if (clientObjectHandlerString.equals(clientEventHandlerString) && ClientObjectHandler.class.isInstance(clientEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientEventHandler;\n            } else if (clientObjectHandlerString.equals(clientExtendedEventHandlerString) && ClientObjectHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientExtendedEventHandler;\n            } else {\n                clientObjectHandler = (ClientObjectHandler) getClass(clientObjectHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientBinaryHandler = null;\n        if (clientBinaryHandlerString != null) {\n            logger.finest(\"Loading ClientBinaryHandler class..\");\n            if (clientBinaryHandlerString.equals(clientCommandHandlerString) && ClientBinaryHandler.class.isInstance(clientCommandHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientCommandHandler;\n            } else if (clientBinaryHandlerString.equals(clientEventHandlerString) && ClientBinaryHandler.class.isInstance(clientEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientExtendedEventHandlerString) && ClientBinaryHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientExtendedEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientObjectHandlerString) && ClientBinaryHandler.class.isInstance(clientObjectHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientObjectHandler;\n            } else {\n                clientBinaryHandler = (ClientBinaryHandler) getClass(clientBinaryHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientWriteHandler = null;\n        if (clientWriteHandlerString != null) {\n            logger.finest(\"Loading ClientWriteHandler class..\");\n            if (clientWriteHandlerString.equals(clientCommandHandlerString) && ClientWriteHandler.class.isInstance(clientCommandHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientCommandHandler;\n            } else if (clientWriteHandlerString.equals(clientEventHandlerString) && ClientWriteHandler.class.isInstance(clientEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientEventHandler;\n            } else if (clientWriteHandlerString.equals(clientExtendedEventHandlerString) && ClientWriteHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientExtendedEventHandler;\n            } else if (clientWriteHandlerString.equals(clientObjectHandlerString) && ClientWriteHandler.class.isInstance(clientObjectHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientObjectHandler;\n            } else if (clientWriteHandlerString.equals(clientBinaryHandlerString) && ClientWriteHandler.class.isInstance(clientBinaryHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientBinaryHandler;\n            } else {\n                clientWriteHandler = (ClientWriteHandler) getClass(clientWriteHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        Class authenticatorClass = null;\n        if (clientAuthenticationHandlerString != null) {\n            logger.finest(\"Loading ClientAuthenticationHandler class..\");\n            authenticatorClass = getClass(clientAuthenticationHandlerString, true);\n        }\n        if (authenticatorClass != null) {\n            Object obj = authenticatorClass.newInstance();\n            if (ClientAuthenticationHandler.class.isInstance(obj))\n                clientAuthenticationHandler = (ClientAuthenticationHandler) obj;\n            else\n                authenticator = (Authenticator) obj;\n        }\n        clientDataClass = null;\n        if (clientDataString != null) {\n            logger.finest(\"Loading ClientData class..\");\n            clientDataClass = getClass(clientDataString, true);\n        }\n        Assertion.affirm(clientEventHandler != null, \"ClientEventHandler was not loaded!\");\n    }\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler) {\n        clientEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler() {\n        return clientEventHandlerString;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException {\n        if (dataType == DataType.IN)\n            this.defaultDataModeIN = dataMode;\n        if (dataType == DataType.OUT)\n            this.defaultDataModeOUT = dataMode;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException {\n        defaultDataModeIN = defaultDataMode.getDataMode(DataType.IN);\n        defaultDataModeOUT = defaultDataMode.getDataMode(DataType.OUT);\n        ;\n    }\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType) {\n        if (dataType == DataType.IN)\n            return defaultDataModeIN;\n        if (dataType == DataType.OUT)\n            return defaultDataModeOUT;\n        else\n            throw new IllegalArgumentException(\"Unknown DataType: \" + dataType);\n    }\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler) {\n        clientExtendedEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler() {\n        return clientExtendedEventHandlerString;\n    }\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception {\n        if (getApplicationJarPath() != null && getClassLoader() == null) {\n            setClassLoader(ClassUtil.getClassLoader(getApplicationJarPath()));\n            //update qsadmin to use the same\n            if (adminServer != null) {\n                adminServer.getServer().setClassLoader(getClassLoader());\n            }\n        }\n    }\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID() {\n        return pid;\n    }\n\n    public boolean isRawCommunicationLogging() {\n        return rawCommunicationLogging;\n    }\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging) {\n        this.rawCommunicationLogging = rawCommunicationLogging;\n    }\n\n    public int getRawCommunicationMaxLength() {\n        return rawCommunicationMaxLength;\n    }\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength) {\n        this.rawCommunicationMaxLength = rawCommunicationMaxLength;\n    }\n}\n",
        "test_prompt": "// QuickServer_7Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#stopService()} method.\n*/\nclass QuickServer_7Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// QuickServer_8Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#suspendService()} method.\n*/\nclass QuickServer_8Test {\n}"
            }
        ],
        "id": "57bc8ae1-449d-4006-aabd-2d617cb16acf",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_8Test.java",
        "original_code": "// QuickServer.java\n/*\n * This file is part of the QuickServer library \n * Copyright (C) QuickServer.org\n *\n * Use, modification, copying and distribution of this software is subject to\n * the terms and conditions of the GNU Lesser General Public License. \n * You should have received a copy of the GNU LGP License along with this \n * library; if not, you can download a copy from <http://www.quickserver.org/>.\n *\n * For questions, suggestions, bug-reports, enhancement-requests etc.\n * visit http://www.quickserver.org\n *\n */\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n *  Main class of QuickServer library. This class is used to create\n *  multi client servers quickly.\n *  <p>\n *  Ones a client is connected, it creates {@link ClientHandler} object,\n *  which is run using any thread available from the pool of threads\n *  maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n *  handles the client. <br/>\n *  QuickServer divides the application logic of its developer over eight\n *  class, <br>\n *  \t<ul>\n * \t\t<li>ClientEventHandler<br>\n *  \t\t   &nbsp;Handles client events [Optional Class].\n *  \t\t<li>ClientCommandHandler [#]<br>\n *  \t\t   &nbsp;Handles client character/string commands.\n *  \t\t<li>ClientObjectHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - Object commands.\n * \t\t<li>ClientBinaryHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - binary data.\n * \t\t<li>ClientWriteHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n *  \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n *  \t\t\t&nbsp;Used to Authencatet a client.\n *  \t\t<li>ClientData [Optional Class]<br>\n *  \t\t\t&nbsp;Client data carrier (support class)\n * \t\t<li>ClientExtendedEventHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles extended client events.\n *  \t</ul>\n *\n *  [#] = Any one of these have to be set based on default DataMode for input.\n *  The default DataMode for input is String so if not changes you will\n *  have to set ClientCommandHandler.\n *  </p>\n *  <p>\n *   Eg:\n *  <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n *  @version 1.4.8\n *  @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //Some variable are not initialised to any value because the\n    //default java value was desired initial value.\n    //'dev ' = development build not yet final\n    //'beta' = test build all features\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n        if (System.getProperty(\"org.quickserver.useOSLineSeparator\") != null && System.getProperty(\"org.quickserver.useOSLineSeparator\").equals(\"true\")) {\n            NEW_LINE = System.getProperty(\"line.separator\");\n        } else {\n            NEW_LINE = \"\\r\\n\";\n        }\n        String _pid = ManagementFactory.getRuntimeMXBean().getName();\n        int i = _pid.indexOf(\"@\");\n        pid = _pid.substring(0, i);\n        System.out.print(\"Loading QuickServer v\" + getVersion() + \" [PID:\" + pid + \"]\");\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //--v1.2\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //for Service interface\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n        System.out.println(\" Done\");\n        //should be commented if not a patch release\n        //System.out.println(\"[Includes patch(#): t=152&p=532]\");\n        //should be commented if not a dev release\n        //System.out.println(\"[Dev Build Date: Saturday, October 29, 2005]\");\n        logger.log(Level.FINE, \"PID: {0}\", pid);\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion() {\n        return VER;\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo() {\n        return getVersionNo(VER);\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver) {\n        //String ver = getVersion();\n        float version = 0;\n        //check if beta\n        int i = ver.indexOf(\" \");\n        if (i == -1)\n            i = ver.length();\n        ver = ver.substring(0, i);\n        //check for sub version\n        i = ver.indexOf(\".\");\n        if (i != -1) {\n            int j = ver.indexOf(\".\", i);\n            if (j != -1) {\n                ver = ver.substring(0, i) + \".\" + MyString.replaceAll(ver.substring(i + 1), \".\", \"\");\n            }\n        }\n        try {\n            version = Float.parseFloat(ver);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Corrupt QuickServer\");\n        }\n        return version;\n    }\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine() {\n        return NEW_LINE;\n    }\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString() {\n        return serverName + \" : \" + getPort();\n    }\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n        setClientCommandHandler(commandHandler);\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n        //send to another constructor\n        this(commandHandler);\n        setPort(port);\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException {\n        logger.log(Level.FINE, \"Starting {0}\", getName());\n        if (isClosed() == false) {\n            logger.log(Level.WARNING, \"Server {0} already running.\", getName());\n            throw new AppException(\"Server \" + getName() + \" already running.\");\n        }\n        blockingMode = getBasicConfig().getServerMode().getBlocking();\n        if (getSecure().isEnable() && blockingMode == false) {\n            //TODO we need to fix this..\n            logger.warning(\"QuickServer does not support secure servers under non-blocking mode! So will run in blocking mode.\");\n            blockingMode = true;\n            getBasicConfig().getServerMode().setBlocking(blockingMode);\n        }\n        if (serverBanner == null) {\n            serverBanner = \"\\n-------------------------------\" + \"\\n Name : \" + getName() + \"\\n Port : \" + getPort() + \"\\n-------------------------------\\n\";\n            logger.finest(\"Default Server Banner Generated\");\n        }\n        try {\n            loadApplicationClasses();\n            //load class from Advanced Settings\n            Class clientIdentifierClass = getClass(getBasicConfig().getAdvancedSettings().getClientIdentifier(), true);\n            clientIdentifier = (ClientIdentifier) clientIdentifierClass.newInstance();\n            clientIdentifier.setQuickServer(QuickServer.this);\n            //load class from ObjectPoolConfig\n            Class poolManagerClass = getClass(getBasicConfig().getObjectPoolConfig().getPoolManager(), true);\n            poolManager = (PoolManager) poolManagerClass.newInstance();\n            //load class QSObjectPoolMaker\n            Class qsObjectPoolMakerClass = getClass(getBasicConfig().getAdvancedSettings().getQSObjectPoolMaker(), true);\n            qsObjectPoolMaker = (QSObjectPoolMaker) qsObjectPoolMakerClass.newInstance();\n            loadServerHooksClasses();\n            processServerHooks(ServerHook.PRE_STARTUP);\n            if (getSecure().isLoad() == true)\n                //v1.4.0\n                loadSSLContext();\n            loadBusinessLogic();\n        } catch (ClassNotFoundException e) {\n            logger.log(Level.SEVERE, \"Could not load class/s: \" + e, e);\n            throw new AppException(\"Could not load class/s : \" + e);\n        } catch (InstantiationException e) {\n            logger.log(Level.SEVERE, \"Could not instantiate class/s: \" + e, e);\n            throw new AppException(\"Could not instantiate class/s: \" + e);\n        } catch (IllegalAccessException e) {\n            logger.log(Level.SEVERE, \"Illegal access to class/s: \" + e, e);\n            throw new AppException(\"Illegal access to class/s: \" + e);\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, \"IOException: \" + e, e);\n            throw new AppException(\"IOException: \" + e);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Exception: \" + e, e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Exception : \" + e);\n        }\n        //v1.3.3\n        if (getSecurityManagerClass() != null) {\n            System.setSecurityManager(getSecurityManager());\n        }\n        setServiceState(Service.INIT);\n        t = new Thread(this, \"QuickServer - \" + getName());\n        t.start();\n        do {\n            Thread.yield();\n        } while (getServiceState() == Service.INIT);\n        if (getServiceState() != Service.RUNNING) {\n            if (exceptionInRun != null)\n                throw new AppException(\"Could not start server \" + getName() + \"! Details: \" + exceptionInRun);\n            else\n                throw new AppException(\"Could not start server \" + getName());\n        }\n        lastStartTime = new java.util.Date();\n        logger.log(Level.FINE, \"Started {0}, Date: {1}\", new Object[] { getName(), lastStartTime });\n    }\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException {\n        processServerHooks(ServerHook.PRE_SHUTDOWN);\n        logger.log(Level.WARNING, \"Stopping {0}\", getName());\n        stopServer = true;\n        Socket death = null;\n        if (isClosed() == true) {\n            logger.log(Level.WARNING, \"Server {0} is not running!\", getName());\n            throw new AppException(\"Server \" + getName() + \" is not running!\");\n        }\n        try {\n            if (getBlockingMode() == true) {\n                if (getSecure().isEnable() == false) {\n                    death = new Socket(server.getInetAddress(), server.getLocalPort());\n                    death.getInputStream().read();\n                    death.close();\n                } else {\n                    death = getSSLSocketFactory().createSocket(server.getInetAddress(), server.getLocalPort());\n                    Thread.sleep(100);\n                    death.close();\n                }\n            }\n            if (serverSocketChannel != null) {\n                serverSocketChannel.close();\n            }\n        } catch (IOException e) {\n            logger.log(Level.FINE, \"IOError stopping {0}: {1}\", new Object[] { getName(), e });\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error stopping {0}: {1}\", new Object[] { getName(), e });\n            throw new AppException(\"Error in stopServer \" + getName() + \": \" + e);\n        }\n        for (int i = 0; getServiceState() != Service.STOPPED; i++) {\n            try {\n                Thread.sleep(60);\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error waiting for {0} to fully stop. Error: {1}\", new Object[] { getName(), e });\n            }\n            if (i > 1000) {\n                logger.severe(\"Server was not stopped even after 10sec.. will terminate now.\");\n                System.exit(-1);\n            }\n        }\n        if (adminServer == null || getQSAdminServer().getServer() != this) {\n            //so this is not qsadmin\n            setClassLoader(null);\n        }\n        logger.log(Level.INFO, \"Stopped {0}\", getName());\n    }\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException {\n        stopServer();\n        startServer();\n    }\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName() {\n        return serverName;\n    }\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name) {\n        serverName = name;\n        logger.log(Level.FINEST, \"Set to : {0}\", name);\n    }\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner() {\n        return serverBanner;\n    }\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner) {\n        serverBanner = banner;\n        logger.log(Level.FINEST, \"Set to : {0}\", banner);\n    }\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port) {\n        if (port < 0) {\n            throw new IllegalArgumentException(\"Port number can not be less than 0!\");\n        }\n        serverPort = port;\n        logger.log(Level.FINEST, \"Set to {0}\", port);\n    }\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort() {\n        if (isClosed() == false) {\n            return server.getLocalPort();\n        }\n        if (getSecure().isEnable() == false) {\n            return serverPort;\n        } else {\n            int _port = getSecure().getPort();\n            if (_port == -1)\n                return serverPort;\n            else\n                return _port;\n        }\n    }\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler) {\n        clientCommandHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler() {\n        return clientCommandHandlerString;\n    }\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data) {\n        this.clientDataString = data;\n        logger.log(Level.FINEST, \"Set to {0}\", data);\n    }\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData() {\n        return clientDataString;\n    }\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time) {\n        if (time > 0)\n            socketTimeout = time;\n        else\n            socketTimeout = 0;\n        logger.log(Level.FINEST, \"Set to {0}\", socketTimeout);\n    }\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout() {\n        return socketTimeout;\n    }\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry) {\n        maxAuthTry = authTry;\n        logger.log(Level.FINEST, \"Set to {0}\", authTry);\n    }\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry() {\n        return maxAuthTry;\n    }\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg) {\n        maxAuthTryMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg() {\n        return maxAuthTryMsg;\n    }\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg) {\n        timeoutMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg() {\n        return timeoutMsg;\n    }\n\n    private TheClient initTheClient() {\n        TheClient theClient = new TheClient();\n        theClient.setServer(QuickServer.this);\n        theClient.setTimeoutMsg(getTimeoutMsg());\n        //v1.2\n        theClient.setMaxAuthTry(getMaxAuthTry());\n        theClient.setMaxAuthTryMsg(getMaxAuthTryMsg());\n        theClient.setClientEventHandler(clientEventHandler);\n        //v1.4.6\n        theClient.setClientExtendedEventHandler(clientExtendedEventHandler);\n        theClient.setClientCommandHandler(clientCommandHandler);\n        //v1.2\n        theClient.setClientObjectHandler(clientObjectHandler);\n        //v1.4\n        theClient.setClientBinaryHandler(clientBinaryHandler);\n        //v1.4.5\n        theClient.setClientWriteHandler(clientWriteHandler);\n        //v1.3\n        theClient.setAuthenticator(authenticator);\n        //v1.4.6\n        theClient.setClientAuthenticationHandler(clientAuthenticationHandler);\n        theClient.setTimeout(socketTimeout);\n        theClient.setMaxConnectionMsg(maxConnectionMsg);\n        //v1.3.2\n        theClient.setCommunicationLogging(getCommunicationLogging());\n        return theClient;\n    }\n\n    public void run() {\n        exceptionInRun = null;\n        TheClient theClient = initTheClient();\n        try {\n            stopServer = false;\n            closeAllPools();\n            initAllPools();\n            makeServerSocket();\n            //print banner\n            System.out.println(serverBanner);\n            //v1.2\n            setServiceState(Service.RUNNING);\n            //v1.3.3\n            processServerHooks(ServerHook.POST_STARTUP);\n            if (getBlockingMode() == false) {\n                runNonBlocking(theClient);\n                if (stopServer == true) {\n                    logger.log(Level.FINEST, \"Closing selector for {0}\", getName());\n                    selector.close();\n                }\n                return;\n            } else {\n                runBlocking(theClient);\n            }\n        } catch (BindException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"{0} BindException for Port {1} @ {2} : {3}\", new Object[] { getName(), getPort(), getBindAddr().getHostAddress(), e.getMessage() });\n        } catch (javax.net.ssl.SSLException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"SSLException {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (IOException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"IOError {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (Exception e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"Error {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } finally {\n            if (getBlockingMode() == true) {\n                logger.log(Level.WARNING, \"Closing {0}\", getName());\n                try {\n                    if (isClosed() == false) {\n                        server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            } else if (getBlockingMode() == false && exceptionInRun != null) {\n                logger.log(Level.WARNING, \"Closing {0} - Had Error: {1}\", new Object[] { getName(), exceptionInRun });\n                try {\n                    if (isClosed() == false) {\n                        if (serverSocketChannel != null)\n                            serverSocketChannel.close();\n                        if (server != null)\n                            server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n        }\n    }\n\n    //end of run\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnection = maxConnection;\n        else\n            this.maxConnection = maxConnection;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnection);\n    }\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection() {\n        return maxConnection;\n    }\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount() {\n        if (clientHandlerPool != null) {\n            try {\n                return getClientHandlerPool().getNumActive();\n            } catch (Exception e) {\n                return 0;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnectionMsg = maxConnectionMsg;\n        else\n            this.maxConnectionMsg = maxConnectionMsg;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnectionMsg);\n    }\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg() {\n        return maxConnectionMsg;\n    }\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException {\n        ipAddr = InetAddress.getByName(bindAddr);\n        logger.log(Level.FINEST, \"Set to {0}\", bindAddr);\n    }\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr() {\n        if (ipAddr == null) {\n            try {\n                ipAddr = InetAddress.getByName(\"0.0.0.0\");\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Unable to create default ip(0.0.0.0) : {0}\", e);\n                throw new RuntimeException(\"Error: Unable to find servers own ip : \" + e);\n            }\n        }\n        return ipAddr;\n    }\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects) {\n        this.storeObjects = storeObjects;\n    }\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects() {\n        return storeObjects;\n    }\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port) {\n        getQSAdminServer().getServer().setPort(port);\n    }\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort() {\n        return getQSAdminServer().getServer().getPort();\n    }\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator) {\n        getQSAdminServer().getServer().setClientAuthenticationHandler(authenticator);\n    }\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator() {\n        return getQSAdminServer().getServer().getAuthenticator();\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException {\n        getQSAdminServer().setClientAuthenticationHandler(authenticator);\n        getQSAdminServer().startServer(port);\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException {\n        getQSAdminServer().startServer();\n    }\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer() {\n        if (adminServer == null)\n            adminServer = new QSAdminServer(QuickServer.this);\n        return adminServer;\n    }\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer) {\n        if (adminServer == null)\n            this.adminServer = adminServer;\n    }\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed() {\n        if (server == null)\n            return true;\n        return server.isClosed();\n    }\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger() {\n        if (appLogger != null)\n            return appLogger;\n        return logger;\n    }\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger) {\n        this.appLogger = appLogger;\n    }\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler) {\n        clientObjectHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler() {\n        return clientObjectHandlerString;\n    }\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        if (formatter == null)\n            return;\n        consoleLoggingformatter = formatter;\n        java.util.logging.Formatter conformatter = (java.util.logging.Formatter) getClass(formatter, true).newInstance();\n        Logger jdkLogger = Logger.getLogger(\"\");\n        Handler[] handlers = jdkLogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                handlers[index].setFormatter(conformatter);\n            }\n        }\n        logger.log(Level.FINEST, \"Set to {0}\", formatter);\n    }\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter() {\n        return consoleLoggingformatter;\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MiniFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to logging.MiniFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MicroFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to MicroFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        boolean isConsole = true;\n        try {\n            if (System.console() == null) {\n                isConsole = false;\n            }\n        } catch (Throwable e) {\n            //ignore\n        }\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                if (isConsole == false && level != Level.OFF) {\n                    System.out.println(\"QuickServer: You do not have a console.. so turning console logger off..\");\n                    level = Level.OFF;\n                }\n                if (level == Level.OFF) {\n                    logger.info(\"QuickServer: Removing console handler.. \");\n                    rlogger.removeHandler(handlers[index]);\n                    handlers[index].setLevel(level);\n                    handlers[index].close();\n                } else {\n                    handlers[index].setLevel(level);\n                }\n            }\n        }\n        if (level == Level.SEVERE)\n            consoleLoggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            consoleLoggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            consoleLoggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            consoleLoggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            consoleLoggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            consoleLoggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            consoleLoggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            consoleLoggingLevel = \"OFF\";\n        else\n            consoleLoggingLevel = \"UNKNOWN\";\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel() {\n        return consoleLoggingLevel;\n    }\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            handlers[index].setLevel(level);\n        }\n        if (level == Level.SEVERE)\n            loggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            loggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            loggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            loggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            loggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            loggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            loggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            loggingLevel = \"OFF\";\n        else\n            loggingLevel = \"UNKNOWN\";\n        consoleLoggingLevel = loggingLevel;\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    //*** Start of Service interface methods\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError() {\n        return serviceError;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param) {\n        serviceError = null;\n        try {\n            initServer(param);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig) {\n        serviceError = null;\n        try {\n            initServer(qsConfig);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING)\n            return false;\n        try {\n            startServer();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService() {\n        serviceError = null;\n        if (getServiceState() == Service.STOPPED)\n            return false;\n        try {\n            stopServer();\n            clearAllPools();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING) {\n            suspendMaxConnection = maxConnection;\n            suspendMaxConnectionMsg = maxConnectionMsg;\n            maxConnection = 0;\n            maxConnectionMsg = \"Service is suspended.\";\n            setServiceState(Service.SUSPENDED);\n            logger.log(Level.INFO, \"Service {0} is suspended.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService() {\n        serviceError = null;\n        if (getServiceState() == Service.SUSPENDED) {\n            maxConnection = suspendMaxConnection;\n            maxConnectionMsg = suspendMaxConnectionMsg;\n            setServiceState(Service.RUNNING);\n            logger.log(Level.INFO, \"Service {0} resumed.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info() {\n        serviceError = null;\n        StringBuilder buf = new StringBuilder();\n        buf.append(getName()).append(\"\\n\");\n        buf.append(getBindAddr().getHostAddress()).append(\" \");\n        buf.append(getPort()).append(\"\\n\");\n        return buf.toString();\n    }\n\n    // *** End of Service interface methods\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException {\n        QuickServerConfig qsConfig = null;\n        try {\n            qsConfig = ConfigReader.read((String) param[0]);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not init server from xml file {0} : {1}\", new Object[] { new File((String) param[0]).getAbsolutePath(), e });\n            throw new AppException(\"Could not init server from xml file\", e);\n        }\n        initServer(qsConfig);\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException {\n        setConfig(qsConfig);\n        try {\n            configQuickServer();\n            loadApplicationClasses();\n            //start InitServerHooks\n            InitServerHooks ish = getConfig().getInitServerHooks();\n            if (ish != null) {\n                Iterator iterator = ish.iterator();\n                String initServerHookClassName = null;\n                Class initServerHookClass = null;\n                InitServerHook initServerHook = null;\n                while (iterator.hasNext()) {\n                    initServerHookClassName = (String) iterator.next();\n                    initServerHookClass = getClass(initServerHookClassName, true);\n                    initServerHook = (InitServerHook) initServerHookClass.newInstance();\n                    logger.log(Level.INFO, \"Loaded init server hook: {0}\", initServerHookClassName);\n                    logger.log(Level.FINE, \"Init server hook info: {0}\", initServerHook.info());\n                    initServerHook.handleInit(QuickServer.this);\n                }\n            }\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not load init server hook: {0}\", e);\n            logger.log(Level.WARNING, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Could not load init server hook\", e);\n        }\n        setServiceState(Service.INIT);\n        logger.log(Level.FINEST, \"\\r\\n{0}\", MyString.getSystemInfo(getVersion()));\n    }\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState() {\n        return serviceState;\n    }\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state) {\n        serviceState = state;\n    }\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp) {\n        if (temp.equals(\"SEVERE\"))\n            qs.setConsoleLoggingLevel(Level.SEVERE);\n        else if (temp.equals(\"WARNING\"))\n            qs.setConsoleLoggingLevel(Level.WARNING);\n        else if (temp.equals(\"INFO\"))\n            qs.setConsoleLoggingLevel(Level.INFO);\n        else if (temp.equals(\"CONFIG\"))\n            qs.setConsoleLoggingLevel(Level.CONFIG);\n        else if (temp.equals(\"FINE\"))\n            qs.setConsoleLoggingLevel(Level.FINE);\n        else if (temp.equals(\"FINER\"))\n            qs.setConsoleLoggingLevel(Level.FINER);\n        else if (temp.equals(\"FINEST\"))\n            qs.setConsoleLoggingLevel(Level.FINEST);\n        else if (temp.equals(\"OFF\"))\n            qs.setConsoleLoggingLevel(Level.OFF);\n        else\n            logger.log(Level.WARNING, \"unknown level {0}\", temp);\n    }\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception {\n        QuickServer qs = QuickServer.this;\n        //v1.3\n        qs.setConfig(config);\n        qs.setBasicConfig(config);\n        String temp = config.getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        temp = null;\n        qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        //v1.3.3\n        qs.setSecurityManagerClass(config.getSecurityManagerClass());\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        temp = config.getApplicationJarPath();\n        if (temp != null) {\n            File ajp = new File(temp);\n            if (ajp.isAbsolute() == false) {\n                temp = config.getConfigFile();\n                ajp = new File(temp);\n                temp = ajp.getParent() + File.separatorChar + config.getApplicationJarPath();\n                config.setApplicationJarPath(temp);\n                temp = null;\n            }\n            qs.setApplicationJarPath(config.getApplicationJarPath());\n            //set path also to QSAdmin\n            if (config.getQSAdminServerConfig() != null) {\n                getQSAdminServer().getServer().setApplicationJarPath(config.getApplicationJarPath());\n            }\n        }\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception {\n        QuickServer qs = getQSAdminServer().getServer();\n        qs.setBasicConfig(config);\n        //set the Logging Level to same as main QS\n        //config.getConsoleLoggingLevel();\n        String temp = getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        //set the Logging Formatter to same as main QS\n        //qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setConsoleLoggingFormatter(getConsoleLoggingFormatter());\n        //v1.4.6\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        //v1.4.6\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        getQSAdminServer().setCommandPlugin(config.getCommandPlugin());\n        //v1.3.2\n        if (config.getCommandShellEnable().equals(\"true\"))\n            getQSAdminServer().setShellEnable(true);\n        getQSAdminServer().setPromptName(config.getCommandShellPromptName());\n        //v1.3.3\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception {\n        configQuickServer(getConfig());\n        if (getConfig().getQSAdminServerConfig() != null) {\n            configQuickServer(getConfig().getQSAdminServerConfig());\n        }\n    }\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args) {\n        try {\n            if (args.length >= 1) {\n                if (args[0].equals(\"-about\")) {\n                    org.quickserver.net.server.gui.About.main(null);\n                } else if (args[0].equals(\"-load\") && args.length >= 2) {\n                    QuickServer qs = QuickServer.load(args[1]);\n                    if (qs != null)\n                        handleOptions(args, qs);\n                } else {\n                    System.out.println(printUsage());\n                }\n            } else {\n                System.out.println(printUsage());\n                org.quickserver.net.server.gui.About.showAbout();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException {\n        QuickServer qs = new QuickServer();\n        Object[] config = new Object[] { xml };\n        qs.initServer(config);\n        qs.startServer();\n        if (qs.getConfig().getQSAdminServerConfig() != null) {\n            qs.startQSAdminServer();\n        }\n        return qs;\n    }\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"QuickServer - Java library/framework for creating robust multi-client TCP servers.\\n\");\n        sb.append(\"Copyright (C) QuickServer.org\\n\\n\");\n        sb.append(\"Usage: QuickServer [-options]\\n\");\n        sb.append(\"Where options include:\\n\");\n        sb.append(\"  -about\\t\" + \"Opens About Dialog box\\n\");\n        sb.append(\"  -load <xml_config_file> [load-options]\\t\" + \"Loads the server from xml file.\\n\");\n        sb.append(\"  Where load-options include:\\n\");\n        sb.append(\"     -fullXML2File <file_name>\\t\" + \"Dumps the Full XML configuration of the QuickServer loaded.\\n\");\n        return sb.toString();\n    }\n\n    private static void handleOptions(String[] args, QuickServer quickserver) {\n        if (args.length < 3)\n            return;\n        if (args[2].equals(\"-fullXML2File\") && args.length >= 4) {\n            File file = new File(args[3]);\n            logger.log(Level.INFO, \"Writing full xml configuration to file: {0}\", file.getAbsolutePath());\n            try {\n                TextFile.write(file, quickserver.getConfig().toXML(null));\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error writing full xml configuration: {0}\", e);\n            }\n        }\n    }\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception {\n        try {\n            if (pool != null)\n                getClientPool().clear();\n            if (clientHandlerPool != null)\n                getClientHandlerPool().clear();\n            if (getClientDataPool() != null)\n                getClientDataPool().clear();\n            if (getDBPoolUtil() != null)\n                getDBPoolUtil().clean();\n            if (byteBufferPool != null)\n                getByteBufferPool().clear();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error: {0}\", e);\n            throw e;\n        }\n    }\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception {\n        if (pool == null && clientHandlerPool == null && getClientDataPool() == null && getDBPoolUtil() == null && byteBufferPool == null) {\n            return;\n        }\n        logger.log(Level.FINE, \"Closing pools for {0}\", getName());\n        try {\n            if (pool != null && PoolHelper.isPoolOpen(getClientPool().getObjectPool())) {\n                logger.finer(\"Closing ClientThread pool.\");\n                getClientPool().close();\n            }\n            if (clientHandlerPool != null && PoolHelper.isPoolOpen(getClientHandlerPool())) {\n                logger.finer(\"Closing ClientHandler pool.\");\n                getClientHandlerPool().close();\n            }\n            if (getClientDataPool() != null && PoolHelper.isPoolOpen(getClientDataPool())) {\n                logger.finer(\"Closing ClientData pool.\");\n                getClientDataPool().close();\n            }\n            if (getDBPoolUtil() != null) {\n                logger.finer(\"Closing DB pool.\");\n                getDBPoolUtil().clean();\n            }\n            if (byteBufferPool != null && PoolHelper.isPoolOpen(getByteBufferPool())) {\n                logger.finer(\"Closing ByteBuffer pool.\");\n                getByteBufferPool().close();\n            }\n            logger.log(Level.FINE, \"Closed pools for {0}\", getName());\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error closing pools for {0}: {1}\", new Object[] { getName(), e });\n            throw e;\n        }\n    }\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception {\n        logger.fine(\"Creating pools\");\n        if (getBlockingMode() == false) {\n            makeByteBufferPool(getBasicConfig().getObjectPoolConfig().getByteBufferObjectPoolConfig());\n        }\n        makeClientPool(getBasicConfig().getObjectPoolConfig().getThreadObjectPoolConfig());\n        makeClientHandlerPool(getBasicConfig().getObjectPoolConfig().getClientHandlerObjectPoolConfig());\n        //check if client data is poolable\n        if (clientDataClass != null) {\n            try {\n                clientData = (ClientData) clientDataClass.newInstance();\n                if (PoolableObject.class.isInstance(clientData) == true) {\n                    PoolableObject po = (PoolableObject) clientData;\n                    if (po.isPoolable() == true) {\n                        makeClientDataPool(po.getPoolableObjectFactory(), getBasicConfig().getObjectPoolConfig().getClientDataObjectPoolConfig());\n                    } else {\n                        clientDataPool = null;\n                        logger.fine(\"ClientData is not poolable!\");\n                    }\n                }\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error: {0}\", e);\n                throw e;\n            }\n        }\n        try {\n            makeDBObjectPool();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error in makeDBObjectPool() : {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw e;\n        }\n        logger.fine(\"Created pools\");\n    }\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool() {\n        if (pool == null)\n            throw new IllegalStateException(\"No ClientPool available yet!\");\n        return pool;\n    }\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientHandler pool\");\n        PoolableObjectFactory factory = new ClientHandlerObjectFactory(getBlockingMode());\n        clientHandlerPool = poolManager.makeClientHandlerPool(factory, opConfig);\n        poolManager.initPool(clientHandlerPool, opConfig);\n        clientHandlerPool = makeQSObjectPool(clientHandlerPool);\n        clientIdentifier.setClientHandlerPool((QSObjectPool) clientHandlerPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool() {\n        if (clientHandlerPool == null)\n            throw new IllegalStateException(\"No ClientHandler Pool available yet!\");\n        return clientHandlerPool;\n    }\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config) {\n        this.config = config;\n    }\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig() {\n        return config;\n    }\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientData pool\");\n        clientDataPool = poolManager.makeClientDataPool(factory, opConfig);\n        poolManager.initPool(clientDataPool, opConfig);\n        clientDataPool = makeQSObjectPool(clientDataPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool() {\n        return clientDataPool;\n    }\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil() {\n        return dBPoolUtil;\n    }\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig) {\n        getConfig().setDBObjectPoolConfig(dBObjectPoolConfig);\n    }\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception {\n        if (getConfig().getDBObjectPoolConfig() != null) {\n            logger.fine(\"Creating DBObject Pool\");\n            //logger.finest(\"Got:\\n\"+getConfig().getDBObjectPoolConfig().toXML(null));\n            Class dbPoolUtilClass = getClass(getConfig().getDBObjectPoolConfig().getDbPoolUtil(), true);\n            dBPoolUtil = (DBPoolUtil) dbPoolUtilClass.newInstance();\n            dBPoolUtil.setDatabaseConnections(getConfig().getDBObjectPoolConfig().getDatabaseConnectionSet().iterator());\n            dBPoolUtil.initPool();\n        }\n    }\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id) {\n        return clientIdentifier.findFirstClientById(id);\n    }\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient() {\n        return clientIdentifier.findAllClient();\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern) {\n        return clientIdentifier.findAllClientById(pattern);\n    }\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key) {\n        return clientIdentifier.findClientByKey(key);\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern) {\n        return clientIdentifier.findAllClientByKey(pattern);\n    }\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted() {\n        setSkipValidation(true);\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation() {\n        return skipValidation;\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation) {\n        skipValidation = validation;\n    }\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging) {\n        this.communicationLogging = communicationLogging;\n    }\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging() {\n        return communicationLogging;\n    }\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass) {\n        if (securityManagerClass != null)\n            this.securityManagerClass = securityManagerClass;\n    }\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass() {\n        return securityManagerClass;\n    }\n\n    public SecurityManager getSecurityManager() throws AppException {\n        if (getSecurityManagerClass() == null)\n            return null;\n        SecurityManager sm = null;\n        try {\n            sm = (SecurityManager) getClass(getSecurityManagerClass(), true).newInstance();\n        } catch (ClassNotFoundException e) {\n            throw new AppException(e.getMessage());\n        } catch (InstantiationException e) {\n            throw new AppException(e.getMessage());\n        } catch (IllegalAccessException e) {\n            throw new AppException(e.getMessage());\n        }\n        return sm;\n    }\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig) {\n        this.accessConstraintConfig = accessConstraintConfig;\n    }\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig() {\n        return accessConstraintConfig;\n    }\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader) {\n        this.classLoader = classLoader;\n        Thread.currentThread().setContextClassLoader(classLoader);\n    }\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader() {\n        return classLoader;\n    }\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException {\n        if (name == null)\n            throw new IllegalArgumentException(\"Class name can't be null!\");\n        logger.log(Level.FINEST, \"Class: {0}, reload: {1}\", new Object[] { name, reload });\n        if (reload == true && classLoader != null) {\n            return classLoader.loadClass(name);\n        } else if (reload == true && classLoader == null && this.getClass().getClassLoader() != null) {\n            return this.getClass().getClassLoader().loadClass(name);\n        } else if (reload == false && classLoader != null) {\n            return Class.forName(name, true, classLoader);\n        } else /*if(reload==false && classLoader==null)*/\n        {\n            return Class.forName(name, true, this.getClass().getClassLoader());\n        }\n    }\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath) {\n        this.applicationJarPath = applicationJarPath;\n    }\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath() {\n        return applicationJarPath;\n    }\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks) {\n        this.serverHooks = serverHooks;\n    }\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks() {\n        if (serverHooks == null)\n            serverHooks = new ServerHooks();\n        return serverHooks;\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses() {\n        if (getServerHooks() == null)\n            return;\n        listOfServerHooks = new ArrayList();\n        ServerHook serverHook = null;\n        String serverHookClassName = null;\n        Class serverHookClass = null;\n        //add system hooks\n        serverHook = new GhostSocketReaper();\n        serverHook.initHook(QuickServer.this);\n        listOfServerHooks.add(serverHook);\n        ghostSocketReaper = (GhostSocketReaper) serverHook;\n        //add user hooks if any\n        Iterator iterator = getServerHooks().iterator();\n        while (iterator.hasNext()) {\n            serverHookClassName = (String) iterator.next();\n            try {\n                serverHookClass = getClass(serverHookClassName, true);\n                serverHook = (ServerHook) serverHookClass.newInstance();\n                serverHook.initHook(QuickServer.this);\n                listOfServerHooks.add(serverHook);\n                logger.log(Level.INFO, \"Loaded server hook: {0}\", serverHookClassName);\n                logger.log(Level.FINE, \"Server hook info: {0}\", serverHook.info());\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Could not load server hook [{0}]: {1}\", new Object[] { serverHookClassName, e });\n                logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            }\n        }\n        //end of while\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event) {\n        if (listOfServerHooks == null) {\n            logger.warning(\"listOfServerHooks was null!\");\n            return;\n        }\n        ServerHook serverHook = null;\n        boolean result = false;\n        Iterator iterator = listOfServerHooks.iterator();\n        String hooktype = \"UNKNOWN\";\n        switch(event) {\n            case ServerHook.PRE_STARTUP:\n                hooktype = \"PRE_STARTUP\";\n                break;\n            case ServerHook.POST_STARTUP:\n                hooktype = \"POST_STARTUP\";\n                break;\n            case ServerHook.PRE_SHUTDOWN:\n                hooktype = \"PRE_SHUTDOWN\";\n                break;\n            case ServerHook.POST_SHUTDOWN:\n                hooktype = \"POST_SHUTDOWN\";\n                break;\n        }\n        while (iterator.hasNext()) {\n            serverHook = (ServerHook) iterator.next();\n            try {\n                result = serverHook.handleEvent(event);\n            } catch (Exception e) {\n                result = false;\n                logger.log(Level.WARNING, \"Error invoking {0} hook [{1}]: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), e.getMessage() });\n            }\n            logger.log(Level.FINE, \"Invoked {0} hook [{1}] was: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), result });\n        }\n    }\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone() {\n        Object object = null;\n        try {\n            object = super.clone();\n            QuickServer _qs = (QuickServer) object;\n            _qs.setQSAdminServer(new QSAdminServer(_qs));\n        } catch (CloneNotSupportedException e) {\n            //should not happ\n            logger.log(Level.WARNING, \"Error cloning : {0}\", e);\n        }\n        return object;\n    }\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure) {\n        this.secure = secure;\n    }\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure() {\n        if (secure == null)\n            secure = new Secure();\n        return secure;\n    }\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure() {\n        return runningSecure;\n    }\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure) {\n        this.runningSecure = runningSecure;\n    }\n\n    private File makeAbsoluteToConfig(String fileName) {\n        Assertion.affirm(fileName != null, \"FileName can't be null\");\n        return ConfigReader.makeAbsoluteToConfig(fileName, getConfig());\n    }\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException {\n        server = null;\n        logger.log(Level.FINEST, \"Binding {0} to IP: {1}\", new Object[] { getName(), getBindAddr() });\n        InetSocketAddress bindAddress = new InetSocketAddress(getBindAddr(), getPort());\n        try {\n            NetworkInterface ni = NetworkInterface.getByInetAddress(getBindAddr());\n            if (ni != null) {\n                logger.fine(\"NetworkInterface: \" + ni);\n            }\n        } catch (Exception igrnore) {\n            /*ignore*/\n        } catch (Error igrnore) {\n            /*ignore*/\n        }\n        if (getSecure().isEnable() == false) {\n            logger.log(Level.FINE, \"Making a normal ServerSocket for {0}\", getName());\n            setRunningSecure(false);\n            if (getBlockingMode() == false) {\n                //for non-blocking\n                serverSocketChannel = ServerSocketChannel.open();\n                server = serverSocketChannel.socket();\n                server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n            } else {\n                //for blocking\n                server = new ServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n            }\n        } else {\n            try {\n                logger.log(Level.FINE, \"Making a secure ServerSocket for {0}\", getName());\n                getSSLContext();\n                setRunningSecure(true);\n                if (getBlockingMode() == false) {\n                    logger.log(Level.FINE, \"Making a secure ServerSocketChannel for {0}\", getName());\n                    //for non-blocking\n                    serverSocketChannel = ServerSocketChannel.open();\n                    server = serverSocketChannel.socket();\n                    server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n                } else {\n                    ServerSocketFactory ssf = getSSLContext().getServerSocketFactory();\n                    SSLServerSocket serversocket = (SSLServerSocket) ssf.createServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n                    serversocket.setNeedClientAuth(secure.isClientAuthEnable());\n                    setRunningSecure(true);\n                    secureStoreManager.logSSLServerSocketInfo(serversocket);\n                    server = serversocket;\n                    serverSocketChannel = server.getChannel();\n                    if (serverSocketChannel == null && getBlockingMode() == false) {\n                        logger.warning(\"Secure Server does not support Channel! So will run in blocking mode.\");\n                        blockingMode = false;\n                    }\n                }\n                //blocking\n            } catch (NoSuchAlgorithmException e) {\n                logger.log(Level.WARNING, \"NoSuchAlgorithmException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            } catch (KeyManagementException e) {\n                logger.log(Level.WARNING, \"KeyManagementException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            }\n        }\n        server.setReuseAddress(true);\n        int connectionTime = 0;\n        int latency = 0;\n        int bandwidth = 0;\n        connectionTime = getBasicConfig().getAdvancedSettings().getPerformancePreferencesConnectionTime();\n        latency = getBasicConfig().getAdvancedSettings().getPerformancePreferencesLatency();\n        bandwidth = getBasicConfig().getAdvancedSettings().getPerformancePreferencesBandwidth();\n        logger.log(Level.FINE, \"getPerformancePreferencesConnectionTime : {0}\", connectionTime);\n        logger.log(Level.FINE, \"getPerformancePreferencesLatency : {0}\", latency);\n        logger.log(Level.FINE, \"getPerformancePreferencesBandwidth : {0}\", bandwidth);\n        server.setPerformancePreferences(connectionTime, latency, bandwidth);\n        int clientSocketReceiveBufferSize = getBasicConfig().getAdvancedSettings().getClientSocketReceiveBufferSize();\n        if (clientSocketReceiveBufferSize > 0) {\n            logger.log(Level.FINE, \"clientSocketReceiveBufferSize: {0}\", clientSocketReceiveBufferSize);\n            server.setReceiveBufferSize(clientSocketReceiveBufferSize);\n        }\n        if (getBlockingMode() == false) {\n            logger.log(Level.FINE, \"Server Mode {0} - Non Blocking\", getName());\n            if (selector == null || selector.isOpen() == false) {\n                logger.finest(\"Opening new selector\");\n                selector = Selector.open();\n            } else {\n                logger.log(Level.FINEST, \"Reusing selector: {0}\", selector);\n            }\n            serverSocketChannel.configureBlocking(false);\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n            selector.wakeup();\n        } else {\n            logger.log(Level.FINE, \"Server Mode {0} - Blocking\", getName());\n        }\n    }\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception {\n        Assertion.affirm(basicConfig != null, \"BasicServerConfig can't be null\");\n        this.basicConfig = basicConfig;\n    }\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig() {\n        return basicConfig;\n    }\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException {\n        if (getSecure().isLoad() == false) {\n            throw new IllegalStateException(\"Secure setting is not yet enabled for loading!\");\n        }\n        logger.info(\"Loading Secure Context..\");\n        km = null;\n        tm = null;\n        try {\n            String ssManager = \"org.quickserver.security.SecureStoreManager\";\n            if (getSecure().getSecureStore() != null)\n                ssManager = getSecure().getSecureStore().getSecureStoreManager();\n            Class secureStoreManagerClass = getClass(ssManager, true);\n            secureStoreManager = (SecureStoreManager) secureStoreManagerClass.newInstance();\n            km = secureStoreManager.loadKeyManagers(getConfig());\n            logger.fine(\"KeyManager got\");\n            tm = secureStoreManager.loadTrustManagers(getConfig());\n            logger.fine(\"TrustManager got\");\n            sslc = secureStoreManager.getSSLContext(getConfig().getSecure().getProtocol());\n            sslc.init(km, tm, null);\n            logger.fine(\"SSLContext loaded\");\n        } catch (KeyStoreException e) {\n            logger.warning(\"KeyStoreException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchAlgorithmException e) {\n            logger.warning(\"NoSuchAlgorithmException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchProviderException e) {\n            logger.warning(\"NoSuchProviderException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (UnrecoverableKeyException e) {\n            logger.warning(\"UnrecoverableKeyException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (CertificateException e) {\n            logger.warning(\"CertificateException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (KeyManagementException e) {\n            logger.warning(\"KeyManagementException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (GeneralSecurityException e) {\n            logger.warning(\"GeneralSecurityException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (ClassNotFoundException e) {\n            logger.warning(\"ClassNotFoundException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (InstantiationException e) {\n            logger.warning(\"InstantiationException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (IllegalAccessException e) {\n            logger.warning(\"IllegalAccessException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        return getSSLContext(null);\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        if (protocol != null && secureStoreManager != null) {\n            SSLContext _sslc = secureStoreManager.getSSLContext(protocol);\n            _sslc.init(km, tm, null);\n            return _sslc;\n        }\n        return sslc;\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext());\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext(protocol));\n    }\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler) {\n        clientBinaryHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler() {\n        return clientBinaryHandlerString;\n    }\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector) {\n        this.selector = selector;\n    }\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector() {\n        return selector;\n    }\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception {\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        //long stime = System.currentTimeMillis();\n        //long etime = System.currentTimeMillis();\n        while (true) {\n            //etime = System.currentTimeMillis();\n            //System.out.println(\"Time Taken: \"+(etime-stime));\n            client = server.accept();\n            //stime = System.currentTimeMillis();\n            if (linger < 0) {\n                client.setSoLinger(false, 0);\n            } else {\n                client.setSoLinger(true, linger);\n            }\n            client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                //low delay=10\n                client.setTrafficClass(socketTrafficClass);\n            }\n            logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n            }\n            if (stopServer) {\n                //Client connected when server was about to be shutdown.\n                try {\n                    client.close();\n                } catch (Exception e) {\n                }\n                break;\n            }\n            if (checkAccessConstraint(client) == false) {\n                continue;\n            }\n            //Check if max connection has reached\n            if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                theClient.setClientEvent(ClientEvent.MAX_CON_BLOCKING);\n            } else {\n                theClient.setClientEvent(ClientEvent.RUN_BLOCKING);\n            }\n            theClient.setTrusted(getSkipValidation());\n            theClient.setSocket(client);\n            //mostly null\n            theClient.setSocketChannel(client.getChannel());\n            if (clientDataClass != null) {\n                if (getClientDataPool() == null) {\n                    clientData = (ClientData) clientDataClass.newInstance();\n                } else {\n                    clientData = (ClientData) getClientDataPool().borrowObject();\n                }\n                theClient.setClientData(clientData);\n            }\n            try {\n                _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                _chPolled.handleClient(theClient);\n            } catch (java.util.NoSuchElementException nsee) {\n                logger.warning(\"Could not borrow ClientHandler from pool. Error: \" + nsee);\n                logger.warning(\"Closing Socket [\" + client + \"] since no ClientHandler available.\");\n                client.close();\n            }\n            if (_chPolled != null) {\n                try {\n                    getClientPool().addClient(_chPolled, true);\n                } catch (java.util.NoSuchElementException nsee) {\n                    logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                    //logger.warning(\"Closing Socket [\"+client+\"] since no Thread available.\");\n                    //client.close();\n                    //returnClientHandlerToPool(_chPolled);\n                }\n                _chPolled = null;\n            }\n            client = null;\n            //reset it back\n            setSkipValidation(false);\n        }\n        //end of loop\n    }\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception {\n        int selectCount = 0;\n        Iterator iterator = null;\n        SelectionKey key = null;\n        ServerSocketChannel serverChannel = null;\n        SocketChannel socketChannel = null;\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        boolean stopServerProcessed = false;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        registerChannelRequestMap = new HashMap();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        while (true) {\n            selectCount = selector.select(500);\n            //selectCount = selector.select();//for testing\n            //check for any pending registerChannel req.\n            synchronized (registerChannelRequestMap) {\n                if (registerChannelRequestMap.size() > 0) {\n                    RegisterChannelRequest req = null;\n                    Object hashkey = null;\n                    iterator = registerChannelRequestMap.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        hashkey = iterator.next();\n                        req = (RegisterChannelRequest) registerChannelRequestMap.get(hashkey);\n                        req.register(getSelector());\n                    }\n                    iterator = null;\n                    registerChannelRequestMap.clear();\n                }\n                //if\n            }\n            //sync\n            if (stopServer == true && stopServerProcessed == false) {\n                logger.warning(\"Closing \" + getName());\n                serverSocketChannel.close();\n                stopServerProcessed = true;\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.warning(\"Closed \" + getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n            if (stopServer == false && stopServerProcessed == true) {\n                logger.finest(\"Server must have re-started.. will break\");\n                break;\n            }\n            if (selectCount == 0 && stopServerProcessed == true) {\n                java.util.Set keyset = selector.keys();\n                if (keyset.isEmpty() == true && getClientCount() <= 0) {\n                    break;\n                } else {\n                    continue;\n                }\n            } else if (selectCount == 0) {\n                continue;\n            }\n            iterator = selector.selectedKeys().iterator();\n            while (iterator.hasNext()) {\n                key = (SelectionKey) iterator.next();\n                if (key.isValid() == false) {\n                    iterator.remove();\n                    continue;\n                }\n                if (key.isAcceptable() && stopServer == false) {\n                    logger.finest(\"Key is Acceptable\");\n                    serverChannel = (ServerSocketChannel) key.channel();\n                    socketChannel = serverChannel.accept();\n                    if (socketChannel == null) {\n                        iterator.remove();\n                        continue;\n                    }\n                    client = socketChannel.socket();\n                    if (linger < 0) {\n                        client.setSoLinger(false, 0);\n                    } else {\n                        client.setSoLinger(true, linger);\n                    }\n                    client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                        //low delay=10\n                        client.setTrafficClass(socketTrafficClass);\n                    }\n                    logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                        client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                        logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n                    }\n                    if (checkAccessConstraint(client) == false) {\n                        iterator.remove();\n                        continue;\n                    }\n                    socketChannel.configureBlocking(false);\n                    theClient.setTrusted(getSkipValidation());\n                    theClient.setSocket(socketChannel.socket());\n                    theClient.setSocketChannel(socketChannel);\n                    if (clientDataClass != null) {\n                        if (getClientDataPool() == null) {\n                            clientData = (ClientData) clientDataClass.newInstance();\n                        } else {\n                            //borrow a object from pool\n                            clientData = (ClientData) getClientDataPool().borrowObject();\n                        }\n                        theClient.setClientData(clientData);\n                    }\n                    //Check if max connection has reached\n                    if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                        theClient.setClientEvent(ClientEvent.MAX_CON);\n                    } else {\n                        theClient.setClientEvent(ClientEvent.ACCEPT);\n                    }\n                    try {\n                        _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                        logger.finest(\"Asking \" + _chPolled.getName() + \" to handle.\");\n                        _chPolled.handleClient(theClient);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.warning(\"Could not borrow ClientHandler Object from pool. Error: \" + nsee);\n                        logger.warning(\"Closing SocketChannel [\" + serverChannel.socket() + \"] since no ClientHandler available.\");\n                        socketChannel.close();\n                    }\n                    if (_chPolled != null) {\n                        try {\n                            getClientPool().addClient(_chPolled, true);\n                        } catch (java.util.NoSuchElementException nsee) {\n                            logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                            //logger.warning(\"Closing SocketChannel [\"+serverChannel.socket()+\"] since no Thread available.\");\n                            //socketChannel.close();\n                            //returnClientHandlerToPool(_chPolled);\n                        }\n                        _chPolled = null;\n                    }\n                    socketChannel = null;\n                    client = null;\n                    //reset it back\n                    setSkipValidation(false);\n                } else if (key.isValid() && key.isReadable()) {\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Readable, removing OP_READ from interestOps for \" + _ch.getName());\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_READ));\n                        _ch.addEvent(ClientEvent.READ);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.READ);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (key.isValid() && key.isWritable()) {\n                    if (getClientPool().shouldNioWriteHappen() == false) {\n                        //no need to remove the key\n                        continue;\n                    }\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Writable, removing OP_WRITE from interestOps for \" + _ch.getName());\n                        //remove OP_WRITE from interest set\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));\n                        _ch.addEvent(ClientEvent.WRITE);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.WRITE);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (stopServer == true && key.isAcceptable()) {\n                    //we will not accept this key\n                    //reset it back\n                    setSkipValidation(false);\n                } else {\n                    logger.warning(\"Unknown key got in SelectionKey: \" + key);\n                }\n                //Remove key\n                iterator.remove();\n                Thread.yield();\n            }\n            //end of iterator\n            iterator = null;\n        }\n        //end of loop\n    }\n\n    private boolean checkAccessConstraint(Socket socket) {\n        try {\n            if (getAccessConstraintConfig() != null) {\n                getAccessConstraintConfig().checkAccept(socket);\n            }\n            return true;\n        } catch (SecurityException se) {\n            logger.warning(\"SecurityException occurred accepting connection : \" + se.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException {\n        if (getSelector() == null) {\n            throw new IllegalStateException(\"Selector is not open!\");\n        }\n        if (channel == null) {\n            throw new IllegalArgumentException(\"Can't register a null channel!\");\n        }\n        if (channel.isConnected() == false) {\n            throw new ClosedChannelException();\n        }\n        RegisterChannelRequest req = new RegisterChannelRequest(channel, ops, att);\n        RegisterChannelRequest reqOld = null;\n        synchronized (registerChannelRequestMap) {\n            reqOld = (RegisterChannelRequest) registerChannelRequestMap.get(channel);\n            if (reqOld == null) {\n                registerChannelRequestMap.put(channel, req);\n                getSelector().wakeup();\n                return true;\n            } else {\n                if (reqOld.equals(req) == false) {\n                    reqOld.setOps(reqOld.getOps() | req.getOps());\n                    reqOld.setAtt(req.getAtt());\n                    return true;\n                }\n                return false;\n            }\n        }\n        /*\n\t\tlogger.warning(\"Before register...\");\n\t\tchannel.register(getSelector(), ops, att);\n\t\tlogger.warning(\"Before wakeup and after register...\");\n\t\tgetSelector().wakeup();\n\t\tlogger.warning(\"After wakeup...\");\n\t\t*/\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig) {\n        logger.finer(\"Creating ByteBufferPool pool\");\n        int bufferSize = getBasicConfig().getAdvancedSettings().getByteBufferSize();\n        boolean useDirectByteBuffer = getBasicConfig().getAdvancedSettings().getUseDirectByteBuffer();\n        PoolableObjectFactory factory = new ByteBufferObjectFactory(bufferSize, useDirectByteBuffer);\n        byteBufferPool = poolManager.makeByteBufferPool(factory, opConfig);\n        poolManager.initPool(byteBufferPool, opConfig);\n    }\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool() {\n        return byteBufferPool;\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientThread pool\");\n        ThreadObjectFactory factory = new ThreadObjectFactory();\n        ObjectPool objectPool = poolManager.makeClientPool(factory, opConfig);\n        pool = new ClientPool(makeQSObjectPool(objectPool), opConfig);\n        factory.setClientPool(pool);\n        pool.setMaxThreadsForNioWrite(getBasicConfig().getAdvancedSettings().getMaxThreadsForNioWrite());\n        poolManager.initPool(objectPool, opConfig);\n    }\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler) {\n        clientWriteHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler() {\n        return clientWriteHandlerString;\n    }\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime() {\n        return lastStartTime;\n    }\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag) {\n        org.quickserver.util.io.ByteBufferOutputStream.setDebug(flag);\n        org.quickserver.util.io.ByteBufferInputStream.setDebug(flag);\n    }\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier() {\n        return clientIdentifier;\n    }\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception {\n        return (QSObjectPool) qsObjectPoolMaker.getQSObjectPool(objectPool);\n    }\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode() {\n        return blockingMode;\n    }\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception {\n        if (clientCommandHandlerString == null && clientEventHandlerString == null) {\n            logger.severe(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n            throw new AppException(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n        }\n        clientCommandHandler = null;\n        if (clientCommandHandlerString != null) {\n            logger.finest(\"Loading ClientCommandHandler class..\");\n            Class clientCommandHandlerClass = getClass(clientCommandHandlerString, true);\n            clientCommandHandler = (ClientCommandHandler) clientCommandHandlerClass.newInstance();\n        }\n        boolean setClientCommandHandlerLookup = false;\n        clientEventHandler = null;\n        if (clientEventHandlerString == null) {\n            clientEventHandlerString = \"org.quickserver.net.server.impl.DefaultClientEventHandler\";\n            setClientCommandHandlerLookup = true;\n        }\n        logger.finest(\"Loading ClientEventHandler class..\");\n        if (clientEventHandlerString.equals(clientCommandHandlerString) && ClientEventHandler.class.isInstance(clientCommandHandler)) {\n            clientEventHandler = (ClientEventHandler) clientCommandHandler;\n        } else {\n            clientEventHandler = (ClientEventHandler) getClass(clientEventHandlerString, true).newInstance();\n            if (setClientCommandHandlerLookup) {\n                ((DefaultClientEventHandler) clientEventHandler).setClientCommandHandler(clientCommandHandler);\n            }\n        }\n        clientExtendedEventHandler = null;\n        if (clientExtendedEventHandlerString != null) {\n            logger.finest(\"Loading ClientExtendedEventHandler class..\");\n            if (clientExtendedEventHandlerString.equals(clientCommandHandlerString) && ClientExtendedEventHandler.class.isInstance(clientCommandHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientCommandHandler;\n            } else if (clientExtendedEventHandlerString.equals(clientEventHandlerString) && ClientExtendedEventHandler.class.isInstance(clientEventHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientEventHandler;\n            } else {\n                Class clientExtendedEventHandlerClass = getClass(clientExtendedEventHandlerString, true);\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientExtendedEventHandlerClass.newInstance();\n            }\n        }\n        clientObjectHandler = null;\n        if (clientObjectHandlerString != null) {\n            logger.finest(\"Loading ClientObjectHandler class..\");\n            if (clientObjectHandlerString.equals(clientCommandHandlerString) && ClientObjectHandler.class.isInstance(clientCommandHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientCommandHandler;\n            } else if (clientObjectHandlerString.equals(clientEventHandlerString) && ClientObjectHandler.class.isInstance(clientEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientEventHandler;\n            } else if (clientObjectHandlerString.equals(clientExtendedEventHandlerString) && ClientObjectHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientExtendedEventHandler;\n            } else {\n                clientObjectHandler = (ClientObjectHandler) getClass(clientObjectHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientBinaryHandler = null;\n        if (clientBinaryHandlerString != null) {\n            logger.finest(\"Loading ClientBinaryHandler class..\");\n            if (clientBinaryHandlerString.equals(clientCommandHandlerString) && ClientBinaryHandler.class.isInstance(clientCommandHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientCommandHandler;\n            } else if (clientBinaryHandlerString.equals(clientEventHandlerString) && ClientBinaryHandler.class.isInstance(clientEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientExtendedEventHandlerString) && ClientBinaryHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientExtendedEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientObjectHandlerString) && ClientBinaryHandler.class.isInstance(clientObjectHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientObjectHandler;\n            } else {\n                clientBinaryHandler = (ClientBinaryHandler) getClass(clientBinaryHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientWriteHandler = null;\n        if (clientWriteHandlerString != null) {\n            logger.finest(\"Loading ClientWriteHandler class..\");\n            if (clientWriteHandlerString.equals(clientCommandHandlerString) && ClientWriteHandler.class.isInstance(clientCommandHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientCommandHandler;\n            } else if (clientWriteHandlerString.equals(clientEventHandlerString) && ClientWriteHandler.class.isInstance(clientEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientEventHandler;\n            } else if (clientWriteHandlerString.equals(clientExtendedEventHandlerString) && ClientWriteHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientExtendedEventHandler;\n            } else if (clientWriteHandlerString.equals(clientObjectHandlerString) && ClientWriteHandler.class.isInstance(clientObjectHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientObjectHandler;\n            } else if (clientWriteHandlerString.equals(clientBinaryHandlerString) && ClientWriteHandler.class.isInstance(clientBinaryHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientBinaryHandler;\n            } else {\n                clientWriteHandler = (ClientWriteHandler) getClass(clientWriteHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        Class authenticatorClass = null;\n        if (clientAuthenticationHandlerString != null) {\n            logger.finest(\"Loading ClientAuthenticationHandler class..\");\n            authenticatorClass = getClass(clientAuthenticationHandlerString, true);\n        }\n        if (authenticatorClass != null) {\n            Object obj = authenticatorClass.newInstance();\n            if (ClientAuthenticationHandler.class.isInstance(obj))\n                clientAuthenticationHandler = (ClientAuthenticationHandler) obj;\n            else\n                authenticator = (Authenticator) obj;\n        }\n        clientDataClass = null;\n        if (clientDataString != null) {\n            logger.finest(\"Loading ClientData class..\");\n            clientDataClass = getClass(clientDataString, true);\n        }\n        Assertion.affirm(clientEventHandler != null, \"ClientEventHandler was not loaded!\");\n    }\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler) {\n        clientEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler() {\n        return clientEventHandlerString;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException {\n        if (dataType == DataType.IN)\n            this.defaultDataModeIN = dataMode;\n        if (dataType == DataType.OUT)\n            this.defaultDataModeOUT = dataMode;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException {\n        defaultDataModeIN = defaultDataMode.getDataMode(DataType.IN);\n        defaultDataModeOUT = defaultDataMode.getDataMode(DataType.OUT);\n        ;\n    }\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType) {\n        if (dataType == DataType.IN)\n            return defaultDataModeIN;\n        if (dataType == DataType.OUT)\n            return defaultDataModeOUT;\n        else\n            throw new IllegalArgumentException(\"Unknown DataType: \" + dataType);\n    }\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler) {\n        clientExtendedEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler() {\n        return clientExtendedEventHandlerString;\n    }\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception {\n        if (getApplicationJarPath() != null && getClassLoader() == null) {\n            setClassLoader(ClassUtil.getClassLoader(getApplicationJarPath()));\n            //update qsadmin to use the same\n            if (adminServer != null) {\n                adminServer.getServer().setClassLoader(getClassLoader());\n            }\n        }\n    }\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID() {\n        return pid;\n    }\n\n    public boolean isRawCommunicationLogging() {\n        return rawCommunicationLogging;\n    }\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging) {\n        this.rawCommunicationLogging = rawCommunicationLogging;\n    }\n\n    public int getRawCommunicationMaxLength() {\n        return rawCommunicationMaxLength;\n    }\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength) {\n        this.rawCommunicationMaxLength = rawCommunicationMaxLength;\n    }\n}\n",
        "test_prompt": "// QuickServer_8Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#suspendService()} method.\n*/\nclass QuickServer_8Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// QuickServer_9Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#resumeService()} method.\n*/\nclass QuickServer_9Test {\n}"
            }
        ],
        "id": "66bbeaf8-e41e-45fa-ac07-bb4145b339d3",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_9Test.java",
        "original_code": "// QuickServer.java\n/*\n * This file is part of the QuickServer library \n * Copyright (C) QuickServer.org\n *\n * Use, modification, copying and distribution of this software is subject to\n * the terms and conditions of the GNU Lesser General Public License. \n * You should have received a copy of the GNU LGP License along with this \n * library; if not, you can download a copy from <http://www.quickserver.org/>.\n *\n * For questions, suggestions, bug-reports, enhancement-requests etc.\n * visit http://www.quickserver.org\n *\n */\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n *  Main class of QuickServer library. This class is used to create\n *  multi client servers quickly.\n *  <p>\n *  Ones a client is connected, it creates {@link ClientHandler} object,\n *  which is run using any thread available from the pool of threads\n *  maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n *  handles the client. <br/>\n *  QuickServer divides the application logic of its developer over eight\n *  class, <br>\n *  \t<ul>\n * \t\t<li>ClientEventHandler<br>\n *  \t\t   &nbsp;Handles client events [Optional Class].\n *  \t\t<li>ClientCommandHandler [#]<br>\n *  \t\t   &nbsp;Handles client character/string commands.\n *  \t\t<li>ClientObjectHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - Object commands.\n * \t\t<li>ClientBinaryHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - binary data.\n * \t\t<li>ClientWriteHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n *  \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n *  \t\t\t&nbsp;Used to Authencatet a client.\n *  \t\t<li>ClientData [Optional Class]<br>\n *  \t\t\t&nbsp;Client data carrier (support class)\n * \t\t<li>ClientExtendedEventHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles extended client events.\n *  \t</ul>\n *\n *  [#] = Any one of these have to be set based on default DataMode for input.\n *  The default DataMode for input is String so if not changes you will\n *  have to set ClientCommandHandler.\n *  </p>\n *  <p>\n *   Eg:\n *  <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n *  @version 1.4.8\n *  @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //Some variable are not initialised to any value because the\n    //default java value was desired initial value.\n    //'dev ' = development build not yet final\n    //'beta' = test build all features\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n        if (System.getProperty(\"org.quickserver.useOSLineSeparator\") != null && System.getProperty(\"org.quickserver.useOSLineSeparator\").equals(\"true\")) {\n            NEW_LINE = System.getProperty(\"line.separator\");\n        } else {\n            NEW_LINE = \"\\r\\n\";\n        }\n        String _pid = ManagementFactory.getRuntimeMXBean().getName();\n        int i = _pid.indexOf(\"@\");\n        pid = _pid.substring(0, i);\n        System.out.print(\"Loading QuickServer v\" + getVersion() + \" [PID:\" + pid + \"]\");\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //--v1.2\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //for Service interface\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n        System.out.println(\" Done\");\n        //should be commented if not a patch release\n        //System.out.println(\"[Includes patch(#): t=152&p=532]\");\n        //should be commented if not a dev release\n        //System.out.println(\"[Dev Build Date: Saturday, October 29, 2005]\");\n        logger.log(Level.FINE, \"PID: {0}\", pid);\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion() {\n        return VER;\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo() {\n        return getVersionNo(VER);\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver) {\n        //String ver = getVersion();\n        float version = 0;\n        //check if beta\n        int i = ver.indexOf(\" \");\n        if (i == -1)\n            i = ver.length();\n        ver = ver.substring(0, i);\n        //check for sub version\n        i = ver.indexOf(\".\");\n        if (i != -1) {\n            int j = ver.indexOf(\".\", i);\n            if (j != -1) {\n                ver = ver.substring(0, i) + \".\" + MyString.replaceAll(ver.substring(i + 1), \".\", \"\");\n            }\n        }\n        try {\n            version = Float.parseFloat(ver);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Corrupt QuickServer\");\n        }\n        return version;\n    }\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine() {\n        return NEW_LINE;\n    }\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString() {\n        return serverName + \" : \" + getPort();\n    }\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n        setClientCommandHandler(commandHandler);\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n        //send to another constructor\n        this(commandHandler);\n        setPort(port);\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException {\n        logger.log(Level.FINE, \"Starting {0}\", getName());\n        if (isClosed() == false) {\n            logger.log(Level.WARNING, \"Server {0} already running.\", getName());\n            throw new AppException(\"Server \" + getName() + \" already running.\");\n        }\n        blockingMode = getBasicConfig().getServerMode().getBlocking();\n        if (getSecure().isEnable() && blockingMode == false) {\n            //TODO we need to fix this..\n            logger.warning(\"QuickServer does not support secure servers under non-blocking mode! So will run in blocking mode.\");\n            blockingMode = true;\n            getBasicConfig().getServerMode().setBlocking(blockingMode);\n        }\n        if (serverBanner == null) {\n            serverBanner = \"\\n-------------------------------\" + \"\\n Name : \" + getName() + \"\\n Port : \" + getPort() + \"\\n-------------------------------\\n\";\n            logger.finest(\"Default Server Banner Generated\");\n        }\n        try {\n            loadApplicationClasses();\n            //load class from Advanced Settings\n            Class clientIdentifierClass = getClass(getBasicConfig().getAdvancedSettings().getClientIdentifier(), true);\n            clientIdentifier = (ClientIdentifier) clientIdentifierClass.newInstance();\n            clientIdentifier.setQuickServer(QuickServer.this);\n            //load class from ObjectPoolConfig\n            Class poolManagerClass = getClass(getBasicConfig().getObjectPoolConfig().getPoolManager(), true);\n            poolManager = (PoolManager) poolManagerClass.newInstance();\n            //load class QSObjectPoolMaker\n            Class qsObjectPoolMakerClass = getClass(getBasicConfig().getAdvancedSettings().getQSObjectPoolMaker(), true);\n            qsObjectPoolMaker = (QSObjectPoolMaker) qsObjectPoolMakerClass.newInstance();\n            loadServerHooksClasses();\n            processServerHooks(ServerHook.PRE_STARTUP);\n            if (getSecure().isLoad() == true)\n                //v1.4.0\n                loadSSLContext();\n            loadBusinessLogic();\n        } catch (ClassNotFoundException e) {\n            logger.log(Level.SEVERE, \"Could not load class/s: \" + e, e);\n            throw new AppException(\"Could not load class/s : \" + e);\n        } catch (InstantiationException e) {\n            logger.log(Level.SEVERE, \"Could not instantiate class/s: \" + e, e);\n            throw new AppException(\"Could not instantiate class/s: \" + e);\n        } catch (IllegalAccessException e) {\n            logger.log(Level.SEVERE, \"Illegal access to class/s: \" + e, e);\n            throw new AppException(\"Illegal access to class/s: \" + e);\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, \"IOException: \" + e, e);\n            throw new AppException(\"IOException: \" + e);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Exception: \" + e, e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Exception : \" + e);\n        }\n        //v1.3.3\n        if (getSecurityManagerClass() != null) {\n            System.setSecurityManager(getSecurityManager());\n        }\n        setServiceState(Service.INIT);\n        t = new Thread(this, \"QuickServer - \" + getName());\n        t.start();\n        do {\n            Thread.yield();\n        } while (getServiceState() == Service.INIT);\n        if (getServiceState() != Service.RUNNING) {\n            if (exceptionInRun != null)\n                throw new AppException(\"Could not start server \" + getName() + \"! Details: \" + exceptionInRun);\n            else\n                throw new AppException(\"Could not start server \" + getName());\n        }\n        lastStartTime = new java.util.Date();\n        logger.log(Level.FINE, \"Started {0}, Date: {1}\", new Object[] { getName(), lastStartTime });\n    }\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException {\n        processServerHooks(ServerHook.PRE_SHUTDOWN);\n        logger.log(Level.WARNING, \"Stopping {0}\", getName());\n        stopServer = true;\n        Socket death = null;\n        if (isClosed() == true) {\n            logger.log(Level.WARNING, \"Server {0} is not running!\", getName());\n            throw new AppException(\"Server \" + getName() + \" is not running!\");\n        }\n        try {\n            if (getBlockingMode() == true) {\n                if (getSecure().isEnable() == false) {\n                    death = new Socket(server.getInetAddress(), server.getLocalPort());\n                    death.getInputStream().read();\n                    death.close();\n                } else {\n                    death = getSSLSocketFactory().createSocket(server.getInetAddress(), server.getLocalPort());\n                    Thread.sleep(100);\n                    death.close();\n                }\n            }\n            if (serverSocketChannel != null) {\n                serverSocketChannel.close();\n            }\n        } catch (IOException e) {\n            logger.log(Level.FINE, \"IOError stopping {0}: {1}\", new Object[] { getName(), e });\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error stopping {0}: {1}\", new Object[] { getName(), e });\n            throw new AppException(\"Error in stopServer \" + getName() + \": \" + e);\n        }\n        for (int i = 0; getServiceState() != Service.STOPPED; i++) {\n            try {\n                Thread.sleep(60);\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error waiting for {0} to fully stop. Error: {1}\", new Object[] { getName(), e });\n            }\n            if (i > 1000) {\n                logger.severe(\"Server was not stopped even after 10sec.. will terminate now.\");\n                System.exit(-1);\n            }\n        }\n        if (adminServer == null || getQSAdminServer().getServer() != this) {\n            //so this is not qsadmin\n            setClassLoader(null);\n        }\n        logger.log(Level.INFO, \"Stopped {0}\", getName());\n    }\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException {\n        stopServer();\n        startServer();\n    }\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName() {\n        return serverName;\n    }\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name) {\n        serverName = name;\n        logger.log(Level.FINEST, \"Set to : {0}\", name);\n    }\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner() {\n        return serverBanner;\n    }\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner) {\n        serverBanner = banner;\n        logger.log(Level.FINEST, \"Set to : {0}\", banner);\n    }\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port) {\n        if (port < 0) {\n            throw new IllegalArgumentException(\"Port number can not be less than 0!\");\n        }\n        serverPort = port;\n        logger.log(Level.FINEST, \"Set to {0}\", port);\n    }\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort() {\n        if (isClosed() == false) {\n            return server.getLocalPort();\n        }\n        if (getSecure().isEnable() == false) {\n            return serverPort;\n        } else {\n            int _port = getSecure().getPort();\n            if (_port == -1)\n                return serverPort;\n            else\n                return _port;\n        }\n    }\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler) {\n        clientCommandHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler() {\n        return clientCommandHandlerString;\n    }\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data) {\n        this.clientDataString = data;\n        logger.log(Level.FINEST, \"Set to {0}\", data);\n    }\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData() {\n        return clientDataString;\n    }\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time) {\n        if (time > 0)\n            socketTimeout = time;\n        else\n            socketTimeout = 0;\n        logger.log(Level.FINEST, \"Set to {0}\", socketTimeout);\n    }\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout() {\n        return socketTimeout;\n    }\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry) {\n        maxAuthTry = authTry;\n        logger.log(Level.FINEST, \"Set to {0}\", authTry);\n    }\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry() {\n        return maxAuthTry;\n    }\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg) {\n        maxAuthTryMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg() {\n        return maxAuthTryMsg;\n    }\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg) {\n        timeoutMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg() {\n        return timeoutMsg;\n    }\n\n    private TheClient initTheClient() {\n        TheClient theClient = new TheClient();\n        theClient.setServer(QuickServer.this);\n        theClient.setTimeoutMsg(getTimeoutMsg());\n        //v1.2\n        theClient.setMaxAuthTry(getMaxAuthTry());\n        theClient.setMaxAuthTryMsg(getMaxAuthTryMsg());\n        theClient.setClientEventHandler(clientEventHandler);\n        //v1.4.6\n        theClient.setClientExtendedEventHandler(clientExtendedEventHandler);\n        theClient.setClientCommandHandler(clientCommandHandler);\n        //v1.2\n        theClient.setClientObjectHandler(clientObjectHandler);\n        //v1.4\n        theClient.setClientBinaryHandler(clientBinaryHandler);\n        //v1.4.5\n        theClient.setClientWriteHandler(clientWriteHandler);\n        //v1.3\n        theClient.setAuthenticator(authenticator);\n        //v1.4.6\n        theClient.setClientAuthenticationHandler(clientAuthenticationHandler);\n        theClient.setTimeout(socketTimeout);\n        theClient.setMaxConnectionMsg(maxConnectionMsg);\n        //v1.3.2\n        theClient.setCommunicationLogging(getCommunicationLogging());\n        return theClient;\n    }\n\n    public void run() {\n        exceptionInRun = null;\n        TheClient theClient = initTheClient();\n        try {\n            stopServer = false;\n            closeAllPools();\n            initAllPools();\n            makeServerSocket();\n            //print banner\n            System.out.println(serverBanner);\n            //v1.2\n            setServiceState(Service.RUNNING);\n            //v1.3.3\n            processServerHooks(ServerHook.POST_STARTUP);\n            if (getBlockingMode() == false) {\n                runNonBlocking(theClient);\n                if (stopServer == true) {\n                    logger.log(Level.FINEST, \"Closing selector for {0}\", getName());\n                    selector.close();\n                }\n                return;\n            } else {\n                runBlocking(theClient);\n            }\n        } catch (BindException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"{0} BindException for Port {1} @ {2} : {3}\", new Object[] { getName(), getPort(), getBindAddr().getHostAddress(), e.getMessage() });\n        } catch (javax.net.ssl.SSLException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"SSLException {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (IOException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"IOError {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (Exception e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"Error {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } finally {\n            if (getBlockingMode() == true) {\n                logger.log(Level.WARNING, \"Closing {0}\", getName());\n                try {\n                    if (isClosed() == false) {\n                        server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            } else if (getBlockingMode() == false && exceptionInRun != null) {\n                logger.log(Level.WARNING, \"Closing {0} - Had Error: {1}\", new Object[] { getName(), exceptionInRun });\n                try {\n                    if (isClosed() == false) {\n                        if (serverSocketChannel != null)\n                            serverSocketChannel.close();\n                        if (server != null)\n                            server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n        }\n    }\n\n    //end of run\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnection = maxConnection;\n        else\n            this.maxConnection = maxConnection;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnection);\n    }\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection() {\n        return maxConnection;\n    }\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount() {\n        if (clientHandlerPool != null) {\n            try {\n                return getClientHandlerPool().getNumActive();\n            } catch (Exception e) {\n                return 0;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnectionMsg = maxConnectionMsg;\n        else\n            this.maxConnectionMsg = maxConnectionMsg;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnectionMsg);\n    }\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg() {\n        return maxConnectionMsg;\n    }\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException {\n        ipAddr = InetAddress.getByName(bindAddr);\n        logger.log(Level.FINEST, \"Set to {0}\", bindAddr);\n    }\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr() {\n        if (ipAddr == null) {\n            try {\n                ipAddr = InetAddress.getByName(\"0.0.0.0\");\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Unable to create default ip(0.0.0.0) : {0}\", e);\n                throw new RuntimeException(\"Error: Unable to find servers own ip : \" + e);\n            }\n        }\n        return ipAddr;\n    }\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects) {\n        this.storeObjects = storeObjects;\n    }\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects() {\n        return storeObjects;\n    }\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port) {\n        getQSAdminServer().getServer().setPort(port);\n    }\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort() {\n        return getQSAdminServer().getServer().getPort();\n    }\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator) {\n        getQSAdminServer().getServer().setClientAuthenticationHandler(authenticator);\n    }\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator() {\n        return getQSAdminServer().getServer().getAuthenticator();\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException {\n        getQSAdminServer().setClientAuthenticationHandler(authenticator);\n        getQSAdminServer().startServer(port);\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException {\n        getQSAdminServer().startServer();\n    }\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer() {\n        if (adminServer == null)\n            adminServer = new QSAdminServer(QuickServer.this);\n        return adminServer;\n    }\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer) {\n        if (adminServer == null)\n            this.adminServer = adminServer;\n    }\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed() {\n        if (server == null)\n            return true;\n        return server.isClosed();\n    }\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger() {\n        if (appLogger != null)\n            return appLogger;\n        return logger;\n    }\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger) {\n        this.appLogger = appLogger;\n    }\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler) {\n        clientObjectHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler() {\n        return clientObjectHandlerString;\n    }\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        if (formatter == null)\n            return;\n        consoleLoggingformatter = formatter;\n        java.util.logging.Formatter conformatter = (java.util.logging.Formatter) getClass(formatter, true).newInstance();\n        Logger jdkLogger = Logger.getLogger(\"\");\n        Handler[] handlers = jdkLogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                handlers[index].setFormatter(conformatter);\n            }\n        }\n        logger.log(Level.FINEST, \"Set to {0}\", formatter);\n    }\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter() {\n        return consoleLoggingformatter;\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MiniFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to logging.MiniFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MicroFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to MicroFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        boolean isConsole = true;\n        try {\n            if (System.console() == null) {\n                isConsole = false;\n            }\n        } catch (Throwable e) {\n            //ignore\n        }\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                if (isConsole == false && level != Level.OFF) {\n                    System.out.println(\"QuickServer: You do not have a console.. so turning console logger off..\");\n                    level = Level.OFF;\n                }\n                if (level == Level.OFF) {\n                    logger.info(\"QuickServer: Removing console handler.. \");\n                    rlogger.removeHandler(handlers[index]);\n                    handlers[index].setLevel(level);\n                    handlers[index].close();\n                } else {\n                    handlers[index].setLevel(level);\n                }\n            }\n        }\n        if (level == Level.SEVERE)\n            consoleLoggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            consoleLoggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            consoleLoggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            consoleLoggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            consoleLoggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            consoleLoggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            consoleLoggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            consoleLoggingLevel = \"OFF\";\n        else\n            consoleLoggingLevel = \"UNKNOWN\";\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel() {\n        return consoleLoggingLevel;\n    }\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            handlers[index].setLevel(level);\n        }\n        if (level == Level.SEVERE)\n            loggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            loggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            loggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            loggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            loggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            loggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            loggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            loggingLevel = \"OFF\";\n        else\n            loggingLevel = \"UNKNOWN\";\n        consoleLoggingLevel = loggingLevel;\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    //*** Start of Service interface methods\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError() {\n        return serviceError;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param) {\n        serviceError = null;\n        try {\n            initServer(param);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig) {\n        serviceError = null;\n        try {\n            initServer(qsConfig);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING)\n            return false;\n        try {\n            startServer();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService() {\n        serviceError = null;\n        if (getServiceState() == Service.STOPPED)\n            return false;\n        try {\n            stopServer();\n            clearAllPools();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING) {\n            suspendMaxConnection = maxConnection;\n            suspendMaxConnectionMsg = maxConnectionMsg;\n            maxConnection = 0;\n            maxConnectionMsg = \"Service is suspended.\";\n            setServiceState(Service.SUSPENDED);\n            logger.log(Level.INFO, \"Service {0} is suspended.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService() {\n        serviceError = null;\n        if (getServiceState() == Service.SUSPENDED) {\n            maxConnection = suspendMaxConnection;\n            maxConnectionMsg = suspendMaxConnectionMsg;\n            setServiceState(Service.RUNNING);\n            logger.log(Level.INFO, \"Service {0} resumed.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info() {\n        serviceError = null;\n        StringBuilder buf = new StringBuilder();\n        buf.append(getName()).append(\"\\n\");\n        buf.append(getBindAddr().getHostAddress()).append(\" \");\n        buf.append(getPort()).append(\"\\n\");\n        return buf.toString();\n    }\n\n    // *** End of Service interface methods\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException {\n        QuickServerConfig qsConfig = null;\n        try {\n            qsConfig = ConfigReader.read((String) param[0]);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not init server from xml file {0} : {1}\", new Object[] { new File((String) param[0]).getAbsolutePath(), e });\n            throw new AppException(\"Could not init server from xml file\", e);\n        }\n        initServer(qsConfig);\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException {\n        setConfig(qsConfig);\n        try {\n            configQuickServer();\n            loadApplicationClasses();\n            //start InitServerHooks\n            InitServerHooks ish = getConfig().getInitServerHooks();\n            if (ish != null) {\n                Iterator iterator = ish.iterator();\n                String initServerHookClassName = null;\n                Class initServerHookClass = null;\n                InitServerHook initServerHook = null;\n                while (iterator.hasNext()) {\n                    initServerHookClassName = (String) iterator.next();\n                    initServerHookClass = getClass(initServerHookClassName, true);\n                    initServerHook = (InitServerHook) initServerHookClass.newInstance();\n                    logger.log(Level.INFO, \"Loaded init server hook: {0}\", initServerHookClassName);\n                    logger.log(Level.FINE, \"Init server hook info: {0}\", initServerHook.info());\n                    initServerHook.handleInit(QuickServer.this);\n                }\n            }\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not load init server hook: {0}\", e);\n            logger.log(Level.WARNING, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Could not load init server hook\", e);\n        }\n        setServiceState(Service.INIT);\n        logger.log(Level.FINEST, \"\\r\\n{0}\", MyString.getSystemInfo(getVersion()));\n    }\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState() {\n        return serviceState;\n    }\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state) {\n        serviceState = state;\n    }\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp) {\n        if (temp.equals(\"SEVERE\"))\n            qs.setConsoleLoggingLevel(Level.SEVERE);\n        else if (temp.equals(\"WARNING\"))\n            qs.setConsoleLoggingLevel(Level.WARNING);\n        else if (temp.equals(\"INFO\"))\n            qs.setConsoleLoggingLevel(Level.INFO);\n        else if (temp.equals(\"CONFIG\"))\n            qs.setConsoleLoggingLevel(Level.CONFIG);\n        else if (temp.equals(\"FINE\"))\n            qs.setConsoleLoggingLevel(Level.FINE);\n        else if (temp.equals(\"FINER\"))\n            qs.setConsoleLoggingLevel(Level.FINER);\n        else if (temp.equals(\"FINEST\"))\n            qs.setConsoleLoggingLevel(Level.FINEST);\n        else if (temp.equals(\"OFF\"))\n            qs.setConsoleLoggingLevel(Level.OFF);\n        else\n            logger.log(Level.WARNING, \"unknown level {0}\", temp);\n    }\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception {\n        QuickServer qs = QuickServer.this;\n        //v1.3\n        qs.setConfig(config);\n        qs.setBasicConfig(config);\n        String temp = config.getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        temp = null;\n        qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        //v1.3.3\n        qs.setSecurityManagerClass(config.getSecurityManagerClass());\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        temp = config.getApplicationJarPath();\n        if (temp != null) {\n            File ajp = new File(temp);\n            if (ajp.isAbsolute() == false) {\n                temp = config.getConfigFile();\n                ajp = new File(temp);\n                temp = ajp.getParent() + File.separatorChar + config.getApplicationJarPath();\n                config.setApplicationJarPath(temp);\n                temp = null;\n            }\n            qs.setApplicationJarPath(config.getApplicationJarPath());\n            //set path also to QSAdmin\n            if (config.getQSAdminServerConfig() != null) {\n                getQSAdminServer().getServer().setApplicationJarPath(config.getApplicationJarPath());\n            }\n        }\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception {\n        QuickServer qs = getQSAdminServer().getServer();\n        qs.setBasicConfig(config);\n        //set the Logging Level to same as main QS\n        //config.getConsoleLoggingLevel();\n        String temp = getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        //set the Logging Formatter to same as main QS\n        //qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setConsoleLoggingFormatter(getConsoleLoggingFormatter());\n        //v1.4.6\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        //v1.4.6\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        getQSAdminServer().setCommandPlugin(config.getCommandPlugin());\n        //v1.3.2\n        if (config.getCommandShellEnable().equals(\"true\"))\n            getQSAdminServer().setShellEnable(true);\n        getQSAdminServer().setPromptName(config.getCommandShellPromptName());\n        //v1.3.3\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception {\n        configQuickServer(getConfig());\n        if (getConfig().getQSAdminServerConfig() != null) {\n            configQuickServer(getConfig().getQSAdminServerConfig());\n        }\n    }\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args) {\n        try {\n            if (args.length >= 1) {\n                if (args[0].equals(\"-about\")) {\n                    org.quickserver.net.server.gui.About.main(null);\n                } else if (args[0].equals(\"-load\") && args.length >= 2) {\n                    QuickServer qs = QuickServer.load(args[1]);\n                    if (qs != null)\n                        handleOptions(args, qs);\n                } else {\n                    System.out.println(printUsage());\n                }\n            } else {\n                System.out.println(printUsage());\n                org.quickserver.net.server.gui.About.showAbout();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException {\n        QuickServer qs = new QuickServer();\n        Object[] config = new Object[] { xml };\n        qs.initServer(config);\n        qs.startServer();\n        if (qs.getConfig().getQSAdminServerConfig() != null) {\n            qs.startQSAdminServer();\n        }\n        return qs;\n    }\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"QuickServer - Java library/framework for creating robust multi-client TCP servers.\\n\");\n        sb.append(\"Copyright (C) QuickServer.org\\n\\n\");\n        sb.append(\"Usage: QuickServer [-options]\\n\");\n        sb.append(\"Where options include:\\n\");\n        sb.append(\"  -about\\t\" + \"Opens About Dialog box\\n\");\n        sb.append(\"  -load <xml_config_file> [load-options]\\t\" + \"Loads the server from xml file.\\n\");\n        sb.append(\"  Where load-options include:\\n\");\n        sb.append(\"     -fullXML2File <file_name>\\t\" + \"Dumps the Full XML configuration of the QuickServer loaded.\\n\");\n        return sb.toString();\n    }\n\n    private static void handleOptions(String[] args, QuickServer quickserver) {\n        if (args.length < 3)\n            return;\n        if (args[2].equals(\"-fullXML2File\") && args.length >= 4) {\n            File file = new File(args[3]);\n            logger.log(Level.INFO, \"Writing full xml configuration to file: {0}\", file.getAbsolutePath());\n            try {\n                TextFile.write(file, quickserver.getConfig().toXML(null));\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error writing full xml configuration: {0}\", e);\n            }\n        }\n    }\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception {\n        try {\n            if (pool != null)\n                getClientPool().clear();\n            if (clientHandlerPool != null)\n                getClientHandlerPool().clear();\n            if (getClientDataPool() != null)\n                getClientDataPool().clear();\n            if (getDBPoolUtil() != null)\n                getDBPoolUtil().clean();\n            if (byteBufferPool != null)\n                getByteBufferPool().clear();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error: {0}\", e);\n            throw e;\n        }\n    }\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception {\n        if (pool == null && clientHandlerPool == null && getClientDataPool() == null && getDBPoolUtil() == null && byteBufferPool == null) {\n            return;\n        }\n        logger.log(Level.FINE, \"Closing pools for {0}\", getName());\n        try {\n            if (pool != null && PoolHelper.isPoolOpen(getClientPool().getObjectPool())) {\n                logger.finer(\"Closing ClientThread pool.\");\n                getClientPool().close();\n            }\n            if (clientHandlerPool != null && PoolHelper.isPoolOpen(getClientHandlerPool())) {\n                logger.finer(\"Closing ClientHandler pool.\");\n                getClientHandlerPool().close();\n            }\n            if (getClientDataPool() != null && PoolHelper.isPoolOpen(getClientDataPool())) {\n                logger.finer(\"Closing ClientData pool.\");\n                getClientDataPool().close();\n            }\n            if (getDBPoolUtil() != null) {\n                logger.finer(\"Closing DB pool.\");\n                getDBPoolUtil().clean();\n            }\n            if (byteBufferPool != null && PoolHelper.isPoolOpen(getByteBufferPool())) {\n                logger.finer(\"Closing ByteBuffer pool.\");\n                getByteBufferPool().close();\n            }\n            logger.log(Level.FINE, \"Closed pools for {0}\", getName());\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error closing pools for {0}: {1}\", new Object[] { getName(), e });\n            throw e;\n        }\n    }\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception {\n        logger.fine(\"Creating pools\");\n        if (getBlockingMode() == false) {\n            makeByteBufferPool(getBasicConfig().getObjectPoolConfig().getByteBufferObjectPoolConfig());\n        }\n        makeClientPool(getBasicConfig().getObjectPoolConfig().getThreadObjectPoolConfig());\n        makeClientHandlerPool(getBasicConfig().getObjectPoolConfig().getClientHandlerObjectPoolConfig());\n        //check if client data is poolable\n        if (clientDataClass != null) {\n            try {\n                clientData = (ClientData) clientDataClass.newInstance();\n                if (PoolableObject.class.isInstance(clientData) == true) {\n                    PoolableObject po = (PoolableObject) clientData;\n                    if (po.isPoolable() == true) {\n                        makeClientDataPool(po.getPoolableObjectFactory(), getBasicConfig().getObjectPoolConfig().getClientDataObjectPoolConfig());\n                    } else {\n                        clientDataPool = null;\n                        logger.fine(\"ClientData is not poolable!\");\n                    }\n                }\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error: {0}\", e);\n                throw e;\n            }\n        }\n        try {\n            makeDBObjectPool();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error in makeDBObjectPool() : {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw e;\n        }\n        logger.fine(\"Created pools\");\n    }\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool() {\n        if (pool == null)\n            throw new IllegalStateException(\"No ClientPool available yet!\");\n        return pool;\n    }\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientHandler pool\");\n        PoolableObjectFactory factory = new ClientHandlerObjectFactory(getBlockingMode());\n        clientHandlerPool = poolManager.makeClientHandlerPool(factory, opConfig);\n        poolManager.initPool(clientHandlerPool, opConfig);\n        clientHandlerPool = makeQSObjectPool(clientHandlerPool);\n        clientIdentifier.setClientHandlerPool((QSObjectPool) clientHandlerPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool() {\n        if (clientHandlerPool == null)\n            throw new IllegalStateException(\"No ClientHandler Pool available yet!\");\n        return clientHandlerPool;\n    }\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config) {\n        this.config = config;\n    }\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig() {\n        return config;\n    }\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientData pool\");\n        clientDataPool = poolManager.makeClientDataPool(factory, opConfig);\n        poolManager.initPool(clientDataPool, opConfig);\n        clientDataPool = makeQSObjectPool(clientDataPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool() {\n        return clientDataPool;\n    }\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil() {\n        return dBPoolUtil;\n    }\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig) {\n        getConfig().setDBObjectPoolConfig(dBObjectPoolConfig);\n    }\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception {\n        if (getConfig().getDBObjectPoolConfig() != null) {\n            logger.fine(\"Creating DBObject Pool\");\n            //logger.finest(\"Got:\\n\"+getConfig().getDBObjectPoolConfig().toXML(null));\n            Class dbPoolUtilClass = getClass(getConfig().getDBObjectPoolConfig().getDbPoolUtil(), true);\n            dBPoolUtil = (DBPoolUtil) dbPoolUtilClass.newInstance();\n            dBPoolUtil.setDatabaseConnections(getConfig().getDBObjectPoolConfig().getDatabaseConnectionSet().iterator());\n            dBPoolUtil.initPool();\n        }\n    }\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id) {\n        return clientIdentifier.findFirstClientById(id);\n    }\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient() {\n        return clientIdentifier.findAllClient();\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern) {\n        return clientIdentifier.findAllClientById(pattern);\n    }\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key) {\n        return clientIdentifier.findClientByKey(key);\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern) {\n        return clientIdentifier.findAllClientByKey(pattern);\n    }\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted() {\n        setSkipValidation(true);\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation() {\n        return skipValidation;\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation) {\n        skipValidation = validation;\n    }\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging) {\n        this.communicationLogging = communicationLogging;\n    }\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging() {\n        return communicationLogging;\n    }\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass) {\n        if (securityManagerClass != null)\n            this.securityManagerClass = securityManagerClass;\n    }\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass() {\n        return securityManagerClass;\n    }\n\n    public SecurityManager getSecurityManager() throws AppException {\n        if (getSecurityManagerClass() == null)\n            return null;\n        SecurityManager sm = null;\n        try {\n            sm = (SecurityManager) getClass(getSecurityManagerClass(), true).newInstance();\n        } catch (ClassNotFoundException e) {\n            throw new AppException(e.getMessage());\n        } catch (InstantiationException e) {\n            throw new AppException(e.getMessage());\n        } catch (IllegalAccessException e) {\n            throw new AppException(e.getMessage());\n        }\n        return sm;\n    }\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig) {\n        this.accessConstraintConfig = accessConstraintConfig;\n    }\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig() {\n        return accessConstraintConfig;\n    }\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader) {\n        this.classLoader = classLoader;\n        Thread.currentThread().setContextClassLoader(classLoader);\n    }\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader() {\n        return classLoader;\n    }\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException {\n        if (name == null)\n            throw new IllegalArgumentException(\"Class name can't be null!\");\n        logger.log(Level.FINEST, \"Class: {0}, reload: {1}\", new Object[] { name, reload });\n        if (reload == true && classLoader != null) {\n            return classLoader.loadClass(name);\n        } else if (reload == true && classLoader == null && this.getClass().getClassLoader() != null) {\n            return this.getClass().getClassLoader().loadClass(name);\n        } else if (reload == false && classLoader != null) {\n            return Class.forName(name, true, classLoader);\n        } else /*if(reload==false && classLoader==null)*/\n        {\n            return Class.forName(name, true, this.getClass().getClassLoader());\n        }\n    }\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath) {\n        this.applicationJarPath = applicationJarPath;\n    }\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath() {\n        return applicationJarPath;\n    }\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks) {\n        this.serverHooks = serverHooks;\n    }\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks() {\n        if (serverHooks == null)\n            serverHooks = new ServerHooks();\n        return serverHooks;\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses() {\n        if (getServerHooks() == null)\n            return;\n        listOfServerHooks = new ArrayList();\n        ServerHook serverHook = null;\n        String serverHookClassName = null;\n        Class serverHookClass = null;\n        //add system hooks\n        serverHook = new GhostSocketReaper();\n        serverHook.initHook(QuickServer.this);\n        listOfServerHooks.add(serverHook);\n        ghostSocketReaper = (GhostSocketReaper) serverHook;\n        //add user hooks if any\n        Iterator iterator = getServerHooks().iterator();\n        while (iterator.hasNext()) {\n            serverHookClassName = (String) iterator.next();\n            try {\n                serverHookClass = getClass(serverHookClassName, true);\n                serverHook = (ServerHook) serverHookClass.newInstance();\n                serverHook.initHook(QuickServer.this);\n                listOfServerHooks.add(serverHook);\n                logger.log(Level.INFO, \"Loaded server hook: {0}\", serverHookClassName);\n                logger.log(Level.FINE, \"Server hook info: {0}\", serverHook.info());\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Could not load server hook [{0}]: {1}\", new Object[] { serverHookClassName, e });\n                logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            }\n        }\n        //end of while\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event) {\n        if (listOfServerHooks == null) {\n            logger.warning(\"listOfServerHooks was null!\");\n            return;\n        }\n        ServerHook serverHook = null;\n        boolean result = false;\n        Iterator iterator = listOfServerHooks.iterator();\n        String hooktype = \"UNKNOWN\";\n        switch(event) {\n            case ServerHook.PRE_STARTUP:\n                hooktype = \"PRE_STARTUP\";\n                break;\n            case ServerHook.POST_STARTUP:\n                hooktype = \"POST_STARTUP\";\n                break;\n            case ServerHook.PRE_SHUTDOWN:\n                hooktype = \"PRE_SHUTDOWN\";\n                break;\n            case ServerHook.POST_SHUTDOWN:\n                hooktype = \"POST_SHUTDOWN\";\n                break;\n        }\n        while (iterator.hasNext()) {\n            serverHook = (ServerHook) iterator.next();\n            try {\n                result = serverHook.handleEvent(event);\n            } catch (Exception e) {\n                result = false;\n                logger.log(Level.WARNING, \"Error invoking {0} hook [{1}]: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), e.getMessage() });\n            }\n            logger.log(Level.FINE, \"Invoked {0} hook [{1}] was: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), result });\n        }\n    }\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone() {\n        Object object = null;\n        try {\n            object = super.clone();\n            QuickServer _qs = (QuickServer) object;\n            _qs.setQSAdminServer(new QSAdminServer(_qs));\n        } catch (CloneNotSupportedException e) {\n            //should not happ\n            logger.log(Level.WARNING, \"Error cloning : {0}\", e);\n        }\n        return object;\n    }\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure) {\n        this.secure = secure;\n    }\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure() {\n        if (secure == null)\n            secure = new Secure();\n        return secure;\n    }\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure() {\n        return runningSecure;\n    }\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure) {\n        this.runningSecure = runningSecure;\n    }\n\n    private File makeAbsoluteToConfig(String fileName) {\n        Assertion.affirm(fileName != null, \"FileName can't be null\");\n        return ConfigReader.makeAbsoluteToConfig(fileName, getConfig());\n    }\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException {\n        server = null;\n        logger.log(Level.FINEST, \"Binding {0} to IP: {1}\", new Object[] { getName(), getBindAddr() });\n        InetSocketAddress bindAddress = new InetSocketAddress(getBindAddr(), getPort());\n        try {\n            NetworkInterface ni = NetworkInterface.getByInetAddress(getBindAddr());\n            if (ni != null) {\n                logger.fine(\"NetworkInterface: \" + ni);\n            }\n        } catch (Exception igrnore) {\n            /*ignore*/\n        } catch (Error igrnore) {\n            /*ignore*/\n        }\n        if (getSecure().isEnable() == false) {\n            logger.log(Level.FINE, \"Making a normal ServerSocket for {0}\", getName());\n            setRunningSecure(false);\n            if (getBlockingMode() == false) {\n                //for non-blocking\n                serverSocketChannel = ServerSocketChannel.open();\n                server = serverSocketChannel.socket();\n                server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n            } else {\n                //for blocking\n                server = new ServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n            }\n        } else {\n            try {\n                logger.log(Level.FINE, \"Making a secure ServerSocket for {0}\", getName());\n                getSSLContext();\n                setRunningSecure(true);\n                if (getBlockingMode() == false) {\n                    logger.log(Level.FINE, \"Making a secure ServerSocketChannel for {0}\", getName());\n                    //for non-blocking\n                    serverSocketChannel = ServerSocketChannel.open();\n                    server = serverSocketChannel.socket();\n                    server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n                } else {\n                    ServerSocketFactory ssf = getSSLContext().getServerSocketFactory();\n                    SSLServerSocket serversocket = (SSLServerSocket) ssf.createServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n                    serversocket.setNeedClientAuth(secure.isClientAuthEnable());\n                    setRunningSecure(true);\n                    secureStoreManager.logSSLServerSocketInfo(serversocket);\n                    server = serversocket;\n                    serverSocketChannel = server.getChannel();\n                    if (serverSocketChannel == null && getBlockingMode() == false) {\n                        logger.warning(\"Secure Server does not support Channel! So will run in blocking mode.\");\n                        blockingMode = false;\n                    }\n                }\n                //blocking\n            } catch (NoSuchAlgorithmException e) {\n                logger.log(Level.WARNING, \"NoSuchAlgorithmException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            } catch (KeyManagementException e) {\n                logger.log(Level.WARNING, \"KeyManagementException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            }\n        }\n        server.setReuseAddress(true);\n        int connectionTime = 0;\n        int latency = 0;\n        int bandwidth = 0;\n        connectionTime = getBasicConfig().getAdvancedSettings().getPerformancePreferencesConnectionTime();\n        latency = getBasicConfig().getAdvancedSettings().getPerformancePreferencesLatency();\n        bandwidth = getBasicConfig().getAdvancedSettings().getPerformancePreferencesBandwidth();\n        logger.log(Level.FINE, \"getPerformancePreferencesConnectionTime : {0}\", connectionTime);\n        logger.log(Level.FINE, \"getPerformancePreferencesLatency : {0}\", latency);\n        logger.log(Level.FINE, \"getPerformancePreferencesBandwidth : {0}\", bandwidth);\n        server.setPerformancePreferences(connectionTime, latency, bandwidth);\n        int clientSocketReceiveBufferSize = getBasicConfig().getAdvancedSettings().getClientSocketReceiveBufferSize();\n        if (clientSocketReceiveBufferSize > 0) {\n            logger.log(Level.FINE, \"clientSocketReceiveBufferSize: {0}\", clientSocketReceiveBufferSize);\n            server.setReceiveBufferSize(clientSocketReceiveBufferSize);\n        }\n        if (getBlockingMode() == false) {\n            logger.log(Level.FINE, \"Server Mode {0} - Non Blocking\", getName());\n            if (selector == null || selector.isOpen() == false) {\n                logger.finest(\"Opening new selector\");\n                selector = Selector.open();\n            } else {\n                logger.log(Level.FINEST, \"Reusing selector: {0}\", selector);\n            }\n            serverSocketChannel.configureBlocking(false);\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n            selector.wakeup();\n        } else {\n            logger.log(Level.FINE, \"Server Mode {0} - Blocking\", getName());\n        }\n    }\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception {\n        Assertion.affirm(basicConfig != null, \"BasicServerConfig can't be null\");\n        this.basicConfig = basicConfig;\n    }\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig() {\n        return basicConfig;\n    }\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException {\n        if (getSecure().isLoad() == false) {\n            throw new IllegalStateException(\"Secure setting is not yet enabled for loading!\");\n        }\n        logger.info(\"Loading Secure Context..\");\n        km = null;\n        tm = null;\n        try {\n            String ssManager = \"org.quickserver.security.SecureStoreManager\";\n            if (getSecure().getSecureStore() != null)\n                ssManager = getSecure().getSecureStore().getSecureStoreManager();\n            Class secureStoreManagerClass = getClass(ssManager, true);\n            secureStoreManager = (SecureStoreManager) secureStoreManagerClass.newInstance();\n            km = secureStoreManager.loadKeyManagers(getConfig());\n            logger.fine(\"KeyManager got\");\n            tm = secureStoreManager.loadTrustManagers(getConfig());\n            logger.fine(\"TrustManager got\");\n            sslc = secureStoreManager.getSSLContext(getConfig().getSecure().getProtocol());\n            sslc.init(km, tm, null);\n            logger.fine(\"SSLContext loaded\");\n        } catch (KeyStoreException e) {\n            logger.warning(\"KeyStoreException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchAlgorithmException e) {\n            logger.warning(\"NoSuchAlgorithmException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchProviderException e) {\n            logger.warning(\"NoSuchProviderException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (UnrecoverableKeyException e) {\n            logger.warning(\"UnrecoverableKeyException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (CertificateException e) {\n            logger.warning(\"CertificateException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (KeyManagementException e) {\n            logger.warning(\"KeyManagementException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (GeneralSecurityException e) {\n            logger.warning(\"GeneralSecurityException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (ClassNotFoundException e) {\n            logger.warning(\"ClassNotFoundException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (InstantiationException e) {\n            logger.warning(\"InstantiationException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (IllegalAccessException e) {\n            logger.warning(\"IllegalAccessException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        return getSSLContext(null);\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        if (protocol != null && secureStoreManager != null) {\n            SSLContext _sslc = secureStoreManager.getSSLContext(protocol);\n            _sslc.init(km, tm, null);\n            return _sslc;\n        }\n        return sslc;\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext());\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext(protocol));\n    }\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler) {\n        clientBinaryHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler() {\n        return clientBinaryHandlerString;\n    }\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector) {\n        this.selector = selector;\n    }\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector() {\n        return selector;\n    }\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception {\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        //long stime = System.currentTimeMillis();\n        //long etime = System.currentTimeMillis();\n        while (true) {\n            //etime = System.currentTimeMillis();\n            //System.out.println(\"Time Taken: \"+(etime-stime));\n            client = server.accept();\n            //stime = System.currentTimeMillis();\n            if (linger < 0) {\n                client.setSoLinger(false, 0);\n            } else {\n                client.setSoLinger(true, linger);\n            }\n            client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                //low delay=10\n                client.setTrafficClass(socketTrafficClass);\n            }\n            logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n            }\n            if (stopServer) {\n                //Client connected when server was about to be shutdown.\n                try {\n                    client.close();\n                } catch (Exception e) {\n                }\n                break;\n            }\n            if (checkAccessConstraint(client) == false) {\n                continue;\n            }\n            //Check if max connection has reached\n            if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                theClient.setClientEvent(ClientEvent.MAX_CON_BLOCKING);\n            } else {\n                theClient.setClientEvent(ClientEvent.RUN_BLOCKING);\n            }\n            theClient.setTrusted(getSkipValidation());\n            theClient.setSocket(client);\n            //mostly null\n            theClient.setSocketChannel(client.getChannel());\n            if (clientDataClass != null) {\n                if (getClientDataPool() == null) {\n                    clientData = (ClientData) clientDataClass.newInstance();\n                } else {\n                    clientData = (ClientData) getClientDataPool().borrowObject();\n                }\n                theClient.setClientData(clientData);\n            }\n            try {\n                _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                _chPolled.handleClient(theClient);\n            } catch (java.util.NoSuchElementException nsee) {\n                logger.warning(\"Could not borrow ClientHandler from pool. Error: \" + nsee);\n                logger.warning(\"Closing Socket [\" + client + \"] since no ClientHandler available.\");\n                client.close();\n            }\n            if (_chPolled != null) {\n                try {\n                    getClientPool().addClient(_chPolled, true);\n                } catch (java.util.NoSuchElementException nsee) {\n                    logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                    //logger.warning(\"Closing Socket [\"+client+\"] since no Thread available.\");\n                    //client.close();\n                    //returnClientHandlerToPool(_chPolled);\n                }\n                _chPolled = null;\n            }\n            client = null;\n            //reset it back\n            setSkipValidation(false);\n        }\n        //end of loop\n    }\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception {\n        int selectCount = 0;\n        Iterator iterator = null;\n        SelectionKey key = null;\n        ServerSocketChannel serverChannel = null;\n        SocketChannel socketChannel = null;\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        boolean stopServerProcessed = false;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        registerChannelRequestMap = new HashMap();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        while (true) {\n            selectCount = selector.select(500);\n            //selectCount = selector.select();//for testing\n            //check for any pending registerChannel req.\n            synchronized (registerChannelRequestMap) {\n                if (registerChannelRequestMap.size() > 0) {\n                    RegisterChannelRequest req = null;\n                    Object hashkey = null;\n                    iterator = registerChannelRequestMap.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        hashkey = iterator.next();\n                        req = (RegisterChannelRequest) registerChannelRequestMap.get(hashkey);\n                        req.register(getSelector());\n                    }\n                    iterator = null;\n                    registerChannelRequestMap.clear();\n                }\n                //if\n            }\n            //sync\n            if (stopServer == true && stopServerProcessed == false) {\n                logger.warning(\"Closing \" + getName());\n                serverSocketChannel.close();\n                stopServerProcessed = true;\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.warning(\"Closed \" + getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n            if (stopServer == false && stopServerProcessed == true) {\n                logger.finest(\"Server must have re-started.. will break\");\n                break;\n            }\n            if (selectCount == 0 && stopServerProcessed == true) {\n                java.util.Set keyset = selector.keys();\n                if (keyset.isEmpty() == true && getClientCount() <= 0) {\n                    break;\n                } else {\n                    continue;\n                }\n            } else if (selectCount == 0) {\n                continue;\n            }\n            iterator = selector.selectedKeys().iterator();\n            while (iterator.hasNext()) {\n                key = (SelectionKey) iterator.next();\n                if (key.isValid() == false) {\n                    iterator.remove();\n                    continue;\n                }\n                if (key.isAcceptable() && stopServer == false) {\n                    logger.finest(\"Key is Acceptable\");\n                    serverChannel = (ServerSocketChannel) key.channel();\n                    socketChannel = serverChannel.accept();\n                    if (socketChannel == null) {\n                        iterator.remove();\n                        continue;\n                    }\n                    client = socketChannel.socket();\n                    if (linger < 0) {\n                        client.setSoLinger(false, 0);\n                    } else {\n                        client.setSoLinger(true, linger);\n                    }\n                    client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                        //low delay=10\n                        client.setTrafficClass(socketTrafficClass);\n                    }\n                    logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                        client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                        logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n                    }\n                    if (checkAccessConstraint(client) == false) {\n                        iterator.remove();\n                        continue;\n                    }\n                    socketChannel.configureBlocking(false);\n                    theClient.setTrusted(getSkipValidation());\n                    theClient.setSocket(socketChannel.socket());\n                    theClient.setSocketChannel(socketChannel);\n                    if (clientDataClass != null) {\n                        if (getClientDataPool() == null) {\n                            clientData = (ClientData) clientDataClass.newInstance();\n                        } else {\n                            //borrow a object from pool\n                            clientData = (ClientData) getClientDataPool().borrowObject();\n                        }\n                        theClient.setClientData(clientData);\n                    }\n                    //Check if max connection has reached\n                    if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                        theClient.setClientEvent(ClientEvent.MAX_CON);\n                    } else {\n                        theClient.setClientEvent(ClientEvent.ACCEPT);\n                    }\n                    try {\n                        _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                        logger.finest(\"Asking \" + _chPolled.getName() + \" to handle.\");\n                        _chPolled.handleClient(theClient);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.warning(\"Could not borrow ClientHandler Object from pool. Error: \" + nsee);\n                        logger.warning(\"Closing SocketChannel [\" + serverChannel.socket() + \"] since no ClientHandler available.\");\n                        socketChannel.close();\n                    }\n                    if (_chPolled != null) {\n                        try {\n                            getClientPool().addClient(_chPolled, true);\n                        } catch (java.util.NoSuchElementException nsee) {\n                            logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                            //logger.warning(\"Closing SocketChannel [\"+serverChannel.socket()+\"] since no Thread available.\");\n                            //socketChannel.close();\n                            //returnClientHandlerToPool(_chPolled);\n                        }\n                        _chPolled = null;\n                    }\n                    socketChannel = null;\n                    client = null;\n                    //reset it back\n                    setSkipValidation(false);\n                } else if (key.isValid() && key.isReadable()) {\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Readable, removing OP_READ from interestOps for \" + _ch.getName());\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_READ));\n                        _ch.addEvent(ClientEvent.READ);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.READ);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (key.isValid() && key.isWritable()) {\n                    if (getClientPool().shouldNioWriteHappen() == false) {\n                        //no need to remove the key\n                        continue;\n                    }\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Writable, removing OP_WRITE from interestOps for \" + _ch.getName());\n                        //remove OP_WRITE from interest set\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));\n                        _ch.addEvent(ClientEvent.WRITE);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.WRITE);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (stopServer == true && key.isAcceptable()) {\n                    //we will not accept this key\n                    //reset it back\n                    setSkipValidation(false);\n                } else {\n                    logger.warning(\"Unknown key got in SelectionKey: \" + key);\n                }\n                //Remove key\n                iterator.remove();\n                Thread.yield();\n            }\n            //end of iterator\n            iterator = null;\n        }\n        //end of loop\n    }\n\n    private boolean checkAccessConstraint(Socket socket) {\n        try {\n            if (getAccessConstraintConfig() != null) {\n                getAccessConstraintConfig().checkAccept(socket);\n            }\n            return true;\n        } catch (SecurityException se) {\n            logger.warning(\"SecurityException occurred accepting connection : \" + se.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException {\n        if (getSelector() == null) {\n            throw new IllegalStateException(\"Selector is not open!\");\n        }\n        if (channel == null) {\n            throw new IllegalArgumentException(\"Can't register a null channel!\");\n        }\n        if (channel.isConnected() == false) {\n            throw new ClosedChannelException();\n        }\n        RegisterChannelRequest req = new RegisterChannelRequest(channel, ops, att);\n        RegisterChannelRequest reqOld = null;\n        synchronized (registerChannelRequestMap) {\n            reqOld = (RegisterChannelRequest) registerChannelRequestMap.get(channel);\n            if (reqOld == null) {\n                registerChannelRequestMap.put(channel, req);\n                getSelector().wakeup();\n                return true;\n            } else {\n                if (reqOld.equals(req) == false) {\n                    reqOld.setOps(reqOld.getOps() | req.getOps());\n                    reqOld.setAtt(req.getAtt());\n                    return true;\n                }\n                return false;\n            }\n        }\n        /*\n\t\tlogger.warning(\"Before register...\");\n\t\tchannel.register(getSelector(), ops, att);\n\t\tlogger.warning(\"Before wakeup and after register...\");\n\t\tgetSelector().wakeup();\n\t\tlogger.warning(\"After wakeup...\");\n\t\t*/\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig) {\n        logger.finer(\"Creating ByteBufferPool pool\");\n        int bufferSize = getBasicConfig().getAdvancedSettings().getByteBufferSize();\n        boolean useDirectByteBuffer = getBasicConfig().getAdvancedSettings().getUseDirectByteBuffer();\n        PoolableObjectFactory factory = new ByteBufferObjectFactory(bufferSize, useDirectByteBuffer);\n        byteBufferPool = poolManager.makeByteBufferPool(factory, opConfig);\n        poolManager.initPool(byteBufferPool, opConfig);\n    }\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool() {\n        return byteBufferPool;\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientThread pool\");\n        ThreadObjectFactory factory = new ThreadObjectFactory();\n        ObjectPool objectPool = poolManager.makeClientPool(factory, opConfig);\n        pool = new ClientPool(makeQSObjectPool(objectPool), opConfig);\n        factory.setClientPool(pool);\n        pool.setMaxThreadsForNioWrite(getBasicConfig().getAdvancedSettings().getMaxThreadsForNioWrite());\n        poolManager.initPool(objectPool, opConfig);\n    }\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler) {\n        clientWriteHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler() {\n        return clientWriteHandlerString;\n    }\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime() {\n        return lastStartTime;\n    }\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag) {\n        org.quickserver.util.io.ByteBufferOutputStream.setDebug(flag);\n        org.quickserver.util.io.ByteBufferInputStream.setDebug(flag);\n    }\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier() {\n        return clientIdentifier;\n    }\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception {\n        return (QSObjectPool) qsObjectPoolMaker.getQSObjectPool(objectPool);\n    }\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode() {\n        return blockingMode;\n    }\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception {\n        if (clientCommandHandlerString == null && clientEventHandlerString == null) {\n            logger.severe(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n            throw new AppException(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n        }\n        clientCommandHandler = null;\n        if (clientCommandHandlerString != null) {\n            logger.finest(\"Loading ClientCommandHandler class..\");\n            Class clientCommandHandlerClass = getClass(clientCommandHandlerString, true);\n            clientCommandHandler = (ClientCommandHandler) clientCommandHandlerClass.newInstance();\n        }\n        boolean setClientCommandHandlerLookup = false;\n        clientEventHandler = null;\n        if (clientEventHandlerString == null) {\n            clientEventHandlerString = \"org.quickserver.net.server.impl.DefaultClientEventHandler\";\n            setClientCommandHandlerLookup = true;\n        }\n        logger.finest(\"Loading ClientEventHandler class..\");\n        if (clientEventHandlerString.equals(clientCommandHandlerString) && ClientEventHandler.class.isInstance(clientCommandHandler)) {\n            clientEventHandler = (ClientEventHandler) clientCommandHandler;\n        } else {\n            clientEventHandler = (ClientEventHandler) getClass(clientEventHandlerString, true).newInstance();\n            if (setClientCommandHandlerLookup) {\n                ((DefaultClientEventHandler) clientEventHandler).setClientCommandHandler(clientCommandHandler);\n            }\n        }\n        clientExtendedEventHandler = null;\n        if (clientExtendedEventHandlerString != null) {\n            logger.finest(\"Loading ClientExtendedEventHandler class..\");\n            if (clientExtendedEventHandlerString.equals(clientCommandHandlerString) && ClientExtendedEventHandler.class.isInstance(clientCommandHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientCommandHandler;\n            } else if (clientExtendedEventHandlerString.equals(clientEventHandlerString) && ClientExtendedEventHandler.class.isInstance(clientEventHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientEventHandler;\n            } else {\n                Class clientExtendedEventHandlerClass = getClass(clientExtendedEventHandlerString, true);\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientExtendedEventHandlerClass.newInstance();\n            }\n        }\n        clientObjectHandler = null;\n        if (clientObjectHandlerString != null) {\n            logger.finest(\"Loading ClientObjectHandler class..\");\n            if (clientObjectHandlerString.equals(clientCommandHandlerString) && ClientObjectHandler.class.isInstance(clientCommandHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientCommandHandler;\n            } else if (clientObjectHandlerString.equals(clientEventHandlerString) && ClientObjectHandler.class.isInstance(clientEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientEventHandler;\n            } else if (clientObjectHandlerString.equals(clientExtendedEventHandlerString) && ClientObjectHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientExtendedEventHandler;\n            } else {\n                clientObjectHandler = (ClientObjectHandler) getClass(clientObjectHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientBinaryHandler = null;\n        if (clientBinaryHandlerString != null) {\n            logger.finest(\"Loading ClientBinaryHandler class..\");\n            if (clientBinaryHandlerString.equals(clientCommandHandlerString) && ClientBinaryHandler.class.isInstance(clientCommandHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientCommandHandler;\n            } else if (clientBinaryHandlerString.equals(clientEventHandlerString) && ClientBinaryHandler.class.isInstance(clientEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientExtendedEventHandlerString) && ClientBinaryHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientExtendedEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientObjectHandlerString) && ClientBinaryHandler.class.isInstance(clientObjectHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientObjectHandler;\n            } else {\n                clientBinaryHandler = (ClientBinaryHandler) getClass(clientBinaryHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientWriteHandler = null;\n        if (clientWriteHandlerString != null) {\n            logger.finest(\"Loading ClientWriteHandler class..\");\n            if (clientWriteHandlerString.equals(clientCommandHandlerString) && ClientWriteHandler.class.isInstance(clientCommandHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientCommandHandler;\n            } else if (clientWriteHandlerString.equals(clientEventHandlerString) && ClientWriteHandler.class.isInstance(clientEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientEventHandler;\n            } else if (clientWriteHandlerString.equals(clientExtendedEventHandlerString) && ClientWriteHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientExtendedEventHandler;\n            } else if (clientWriteHandlerString.equals(clientObjectHandlerString) && ClientWriteHandler.class.isInstance(clientObjectHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientObjectHandler;\n            } else if (clientWriteHandlerString.equals(clientBinaryHandlerString) && ClientWriteHandler.class.isInstance(clientBinaryHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientBinaryHandler;\n            } else {\n                clientWriteHandler = (ClientWriteHandler) getClass(clientWriteHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        Class authenticatorClass = null;\n        if (clientAuthenticationHandlerString != null) {\n            logger.finest(\"Loading ClientAuthenticationHandler class..\");\n            authenticatorClass = getClass(clientAuthenticationHandlerString, true);\n        }\n        if (authenticatorClass != null) {\n            Object obj = authenticatorClass.newInstance();\n            if (ClientAuthenticationHandler.class.isInstance(obj))\n                clientAuthenticationHandler = (ClientAuthenticationHandler) obj;\n            else\n                authenticator = (Authenticator) obj;\n        }\n        clientDataClass = null;\n        if (clientDataString != null) {\n            logger.finest(\"Loading ClientData class..\");\n            clientDataClass = getClass(clientDataString, true);\n        }\n        Assertion.affirm(clientEventHandler != null, \"ClientEventHandler was not loaded!\");\n    }\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler) {\n        clientEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler() {\n        return clientEventHandlerString;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException {\n        if (dataType == DataType.IN)\n            this.defaultDataModeIN = dataMode;\n        if (dataType == DataType.OUT)\n            this.defaultDataModeOUT = dataMode;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException {\n        defaultDataModeIN = defaultDataMode.getDataMode(DataType.IN);\n        defaultDataModeOUT = defaultDataMode.getDataMode(DataType.OUT);\n        ;\n    }\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType) {\n        if (dataType == DataType.IN)\n            return defaultDataModeIN;\n        if (dataType == DataType.OUT)\n            return defaultDataModeOUT;\n        else\n            throw new IllegalArgumentException(\"Unknown DataType: \" + dataType);\n    }\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler) {\n        clientExtendedEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler() {\n        return clientExtendedEventHandlerString;\n    }\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception {\n        if (getApplicationJarPath() != null && getClassLoader() == null) {\n            setClassLoader(ClassUtil.getClassLoader(getApplicationJarPath()));\n            //update qsadmin to use the same\n            if (adminServer != null) {\n                adminServer.getServer().setClassLoader(getClassLoader());\n            }\n        }\n    }\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID() {\n        return pid;\n    }\n\n    public boolean isRawCommunicationLogging() {\n        return rawCommunicationLogging;\n    }\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging) {\n        this.rawCommunicationLogging = rawCommunicationLogging;\n    }\n\n    public int getRawCommunicationMaxLength() {\n        return rawCommunicationMaxLength;\n    }\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength) {\n        this.rawCommunicationMaxLength = rawCommunicationMaxLength;\n    }\n}\n",
        "test_prompt": "// QuickServer_9Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#resumeService()} method.\n*/\nclass QuickServer_9Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// QuickServer_10Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#info()} method.\n*/\nclass QuickServer_10Test {\n}"
            }
        ],
        "id": "422ddb3b-34f6-45b0-9694-a25e0b9f7fac",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_10Test.java",
        "original_code": "// QuickServer.java\n/*\n * This file is part of the QuickServer library \n * Copyright (C) QuickServer.org\n *\n * Use, modification, copying and distribution of this software is subject to\n * the terms and conditions of the GNU Lesser General Public License. \n * You should have received a copy of the GNU LGP License along with this \n * library; if not, you can download a copy from <http://www.quickserver.org/>.\n *\n * For questions, suggestions, bug-reports, enhancement-requests etc.\n * visit http://www.quickserver.org\n *\n */\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n *  Main class of QuickServer library. This class is used to create\n *  multi client servers quickly.\n *  <p>\n *  Ones a client is connected, it creates {@link ClientHandler} object,\n *  which is run using any thread available from the pool of threads\n *  maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n *  handles the client. <br/>\n *  QuickServer divides the application logic of its developer over eight\n *  class, <br>\n *  \t<ul>\n * \t\t<li>ClientEventHandler<br>\n *  \t\t   &nbsp;Handles client events [Optional Class].\n *  \t\t<li>ClientCommandHandler [#]<br>\n *  \t\t   &nbsp;Handles client character/string commands.\n *  \t\t<li>ClientObjectHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - Object commands.\n * \t\t<li>ClientBinaryHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - binary data.\n * \t\t<li>ClientWriteHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n *  \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n *  \t\t\t&nbsp;Used to Authencatet a client.\n *  \t\t<li>ClientData [Optional Class]<br>\n *  \t\t\t&nbsp;Client data carrier (support class)\n * \t\t<li>ClientExtendedEventHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles extended client events.\n *  \t</ul>\n *\n *  [#] = Any one of these have to be set based on default DataMode for input.\n *  The default DataMode for input is String so if not changes you will\n *  have to set ClientCommandHandler.\n *  </p>\n *  <p>\n *   Eg:\n *  <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n *  @version 1.4.8\n *  @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //Some variable are not initialised to any value because the\n    //default java value was desired initial value.\n    //'dev ' = development build not yet final\n    //'beta' = test build all features\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n        if (System.getProperty(\"org.quickserver.useOSLineSeparator\") != null && System.getProperty(\"org.quickserver.useOSLineSeparator\").equals(\"true\")) {\n            NEW_LINE = System.getProperty(\"line.separator\");\n        } else {\n            NEW_LINE = \"\\r\\n\";\n        }\n        String _pid = ManagementFactory.getRuntimeMXBean().getName();\n        int i = _pid.indexOf(\"@\");\n        pid = _pid.substring(0, i);\n        System.out.print(\"Loading QuickServer v\" + getVersion() + \" [PID:\" + pid + \"]\");\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //--v1.2\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //for Service interface\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n        System.out.println(\" Done\");\n        //should be commented if not a patch release\n        //System.out.println(\"[Includes patch(#): t=152&p=532]\");\n        //should be commented if not a dev release\n        //System.out.println(\"[Dev Build Date: Saturday, October 29, 2005]\");\n        logger.log(Level.FINE, \"PID: {0}\", pid);\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion() {\n        return VER;\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo() {\n        return getVersionNo(VER);\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver) {\n        //String ver = getVersion();\n        float version = 0;\n        //check if beta\n        int i = ver.indexOf(\" \");\n        if (i == -1)\n            i = ver.length();\n        ver = ver.substring(0, i);\n        //check for sub version\n        i = ver.indexOf(\".\");\n        if (i != -1) {\n            int j = ver.indexOf(\".\", i);\n            if (j != -1) {\n                ver = ver.substring(0, i) + \".\" + MyString.replaceAll(ver.substring(i + 1), \".\", \"\");\n            }\n        }\n        try {\n            version = Float.parseFloat(ver);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Corrupt QuickServer\");\n        }\n        return version;\n    }\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine() {\n        return NEW_LINE;\n    }\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString() {\n        return serverName + \" : \" + getPort();\n    }\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n        setClientCommandHandler(commandHandler);\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n        //send to another constructor\n        this(commandHandler);\n        setPort(port);\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException {\n        logger.log(Level.FINE, \"Starting {0}\", getName());\n        if (isClosed() == false) {\n            logger.log(Level.WARNING, \"Server {0} already running.\", getName());\n            throw new AppException(\"Server \" + getName() + \" already running.\");\n        }\n        blockingMode = getBasicConfig().getServerMode().getBlocking();\n        if (getSecure().isEnable() && blockingMode == false) {\n            //TODO we need to fix this..\n            logger.warning(\"QuickServer does not support secure servers under non-blocking mode! So will run in blocking mode.\");\n            blockingMode = true;\n            getBasicConfig().getServerMode().setBlocking(blockingMode);\n        }\n        if (serverBanner == null) {\n            serverBanner = \"\\n-------------------------------\" + \"\\n Name : \" + getName() + \"\\n Port : \" + getPort() + \"\\n-------------------------------\\n\";\n            logger.finest(\"Default Server Banner Generated\");\n        }\n        try {\n            loadApplicationClasses();\n            //load class from Advanced Settings\n            Class clientIdentifierClass = getClass(getBasicConfig().getAdvancedSettings().getClientIdentifier(), true);\n            clientIdentifier = (ClientIdentifier) clientIdentifierClass.newInstance();\n            clientIdentifier.setQuickServer(QuickServer.this);\n            //load class from ObjectPoolConfig\n            Class poolManagerClass = getClass(getBasicConfig().getObjectPoolConfig().getPoolManager(), true);\n            poolManager = (PoolManager) poolManagerClass.newInstance();\n            //load class QSObjectPoolMaker\n            Class qsObjectPoolMakerClass = getClass(getBasicConfig().getAdvancedSettings().getQSObjectPoolMaker(), true);\n            qsObjectPoolMaker = (QSObjectPoolMaker) qsObjectPoolMakerClass.newInstance();\n            loadServerHooksClasses();\n            processServerHooks(ServerHook.PRE_STARTUP);\n            if (getSecure().isLoad() == true)\n                //v1.4.0\n                loadSSLContext();\n            loadBusinessLogic();\n        } catch (ClassNotFoundException e) {\n            logger.log(Level.SEVERE, \"Could not load class/s: \" + e, e);\n            throw new AppException(\"Could not load class/s : \" + e);\n        } catch (InstantiationException e) {\n            logger.log(Level.SEVERE, \"Could not instantiate class/s: \" + e, e);\n            throw new AppException(\"Could not instantiate class/s: \" + e);\n        } catch (IllegalAccessException e) {\n            logger.log(Level.SEVERE, \"Illegal access to class/s: \" + e, e);\n            throw new AppException(\"Illegal access to class/s: \" + e);\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, \"IOException: \" + e, e);\n            throw new AppException(\"IOException: \" + e);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Exception: \" + e, e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Exception : \" + e);\n        }\n        //v1.3.3\n        if (getSecurityManagerClass() != null) {\n            System.setSecurityManager(getSecurityManager());\n        }\n        setServiceState(Service.INIT);\n        t = new Thread(this, \"QuickServer - \" + getName());\n        t.start();\n        do {\n            Thread.yield();\n        } while (getServiceState() == Service.INIT);\n        if (getServiceState() != Service.RUNNING) {\n            if (exceptionInRun != null)\n                throw new AppException(\"Could not start server \" + getName() + \"! Details: \" + exceptionInRun);\n            else\n                throw new AppException(\"Could not start server \" + getName());\n        }\n        lastStartTime = new java.util.Date();\n        logger.log(Level.FINE, \"Started {0}, Date: {1}\", new Object[] { getName(), lastStartTime });\n    }\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException {\n        processServerHooks(ServerHook.PRE_SHUTDOWN);\n        logger.log(Level.WARNING, \"Stopping {0}\", getName());\n        stopServer = true;\n        Socket death = null;\n        if (isClosed() == true) {\n            logger.log(Level.WARNING, \"Server {0} is not running!\", getName());\n            throw new AppException(\"Server \" + getName() + \" is not running!\");\n        }\n        try {\n            if (getBlockingMode() == true) {\n                if (getSecure().isEnable() == false) {\n                    death = new Socket(server.getInetAddress(), server.getLocalPort());\n                    death.getInputStream().read();\n                    death.close();\n                } else {\n                    death = getSSLSocketFactory().createSocket(server.getInetAddress(), server.getLocalPort());\n                    Thread.sleep(100);\n                    death.close();\n                }\n            }\n            if (serverSocketChannel != null) {\n                serverSocketChannel.close();\n            }\n        } catch (IOException e) {\n            logger.log(Level.FINE, \"IOError stopping {0}: {1}\", new Object[] { getName(), e });\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error stopping {0}: {1}\", new Object[] { getName(), e });\n            throw new AppException(\"Error in stopServer \" + getName() + \": \" + e);\n        }\n        for (int i = 0; getServiceState() != Service.STOPPED; i++) {\n            try {\n                Thread.sleep(60);\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error waiting for {0} to fully stop. Error: {1}\", new Object[] { getName(), e });\n            }\n            if (i > 1000) {\n                logger.severe(\"Server was not stopped even after 10sec.. will terminate now.\");\n                System.exit(-1);\n            }\n        }\n        if (adminServer == null || getQSAdminServer().getServer() != this) {\n            //so this is not qsadmin\n            setClassLoader(null);\n        }\n        logger.log(Level.INFO, \"Stopped {0}\", getName());\n    }\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException {\n        stopServer();\n        startServer();\n    }\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName() {\n        return serverName;\n    }\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name) {\n        serverName = name;\n        logger.log(Level.FINEST, \"Set to : {0}\", name);\n    }\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner() {\n        return serverBanner;\n    }\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner) {\n        serverBanner = banner;\n        logger.log(Level.FINEST, \"Set to : {0}\", banner);\n    }\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port) {\n        if (port < 0) {\n            throw new IllegalArgumentException(\"Port number can not be less than 0!\");\n        }\n        serverPort = port;\n        logger.log(Level.FINEST, \"Set to {0}\", port);\n    }\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort() {\n        if (isClosed() == false) {\n            return server.getLocalPort();\n        }\n        if (getSecure().isEnable() == false) {\n            return serverPort;\n        } else {\n            int _port = getSecure().getPort();\n            if (_port == -1)\n                return serverPort;\n            else\n                return _port;\n        }\n    }\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler) {\n        clientCommandHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler() {\n        return clientCommandHandlerString;\n    }\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data) {\n        this.clientDataString = data;\n        logger.log(Level.FINEST, \"Set to {0}\", data);\n    }\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData() {\n        return clientDataString;\n    }\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time) {\n        if (time > 0)\n            socketTimeout = time;\n        else\n            socketTimeout = 0;\n        logger.log(Level.FINEST, \"Set to {0}\", socketTimeout);\n    }\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout() {\n        return socketTimeout;\n    }\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry) {\n        maxAuthTry = authTry;\n        logger.log(Level.FINEST, \"Set to {0}\", authTry);\n    }\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry() {\n        return maxAuthTry;\n    }\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg) {\n        maxAuthTryMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg() {\n        return maxAuthTryMsg;\n    }\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg) {\n        timeoutMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg() {\n        return timeoutMsg;\n    }\n\n    private TheClient initTheClient() {\n        TheClient theClient = new TheClient();\n        theClient.setServer(QuickServer.this);\n        theClient.setTimeoutMsg(getTimeoutMsg());\n        //v1.2\n        theClient.setMaxAuthTry(getMaxAuthTry());\n        theClient.setMaxAuthTryMsg(getMaxAuthTryMsg());\n        theClient.setClientEventHandler(clientEventHandler);\n        //v1.4.6\n        theClient.setClientExtendedEventHandler(clientExtendedEventHandler);\n        theClient.setClientCommandHandler(clientCommandHandler);\n        //v1.2\n        theClient.setClientObjectHandler(clientObjectHandler);\n        //v1.4\n        theClient.setClientBinaryHandler(clientBinaryHandler);\n        //v1.4.5\n        theClient.setClientWriteHandler(clientWriteHandler);\n        //v1.3\n        theClient.setAuthenticator(authenticator);\n        //v1.4.6\n        theClient.setClientAuthenticationHandler(clientAuthenticationHandler);\n        theClient.setTimeout(socketTimeout);\n        theClient.setMaxConnectionMsg(maxConnectionMsg);\n        //v1.3.2\n        theClient.setCommunicationLogging(getCommunicationLogging());\n        return theClient;\n    }\n\n    public void run() {\n        exceptionInRun = null;\n        TheClient theClient = initTheClient();\n        try {\n            stopServer = false;\n            closeAllPools();\n            initAllPools();\n            makeServerSocket();\n            //print banner\n            System.out.println(serverBanner);\n            //v1.2\n            setServiceState(Service.RUNNING);\n            //v1.3.3\n            processServerHooks(ServerHook.POST_STARTUP);\n            if (getBlockingMode() == false) {\n                runNonBlocking(theClient);\n                if (stopServer == true) {\n                    logger.log(Level.FINEST, \"Closing selector for {0}\", getName());\n                    selector.close();\n                }\n                return;\n            } else {\n                runBlocking(theClient);\n            }\n        } catch (BindException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"{0} BindException for Port {1} @ {2} : {3}\", new Object[] { getName(), getPort(), getBindAddr().getHostAddress(), e.getMessage() });\n        } catch (javax.net.ssl.SSLException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"SSLException {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (IOException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"IOError {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (Exception e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"Error {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } finally {\n            if (getBlockingMode() == true) {\n                logger.log(Level.WARNING, \"Closing {0}\", getName());\n                try {\n                    if (isClosed() == false) {\n                        server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            } else if (getBlockingMode() == false && exceptionInRun != null) {\n                logger.log(Level.WARNING, \"Closing {0} - Had Error: {1}\", new Object[] { getName(), exceptionInRun });\n                try {\n                    if (isClosed() == false) {\n                        if (serverSocketChannel != null)\n                            serverSocketChannel.close();\n                        if (server != null)\n                            server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n        }\n    }\n\n    //end of run\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnection = maxConnection;\n        else\n            this.maxConnection = maxConnection;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnection);\n    }\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection() {\n        return maxConnection;\n    }\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount() {\n        if (clientHandlerPool != null) {\n            try {\n                return getClientHandlerPool().getNumActive();\n            } catch (Exception e) {\n                return 0;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnectionMsg = maxConnectionMsg;\n        else\n            this.maxConnectionMsg = maxConnectionMsg;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnectionMsg);\n    }\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg() {\n        return maxConnectionMsg;\n    }\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException {\n        ipAddr = InetAddress.getByName(bindAddr);\n        logger.log(Level.FINEST, \"Set to {0}\", bindAddr);\n    }\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr() {\n        if (ipAddr == null) {\n            try {\n                ipAddr = InetAddress.getByName(\"0.0.0.0\");\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Unable to create default ip(0.0.0.0) : {0}\", e);\n                throw new RuntimeException(\"Error: Unable to find servers own ip : \" + e);\n            }\n        }\n        return ipAddr;\n    }\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects) {\n        this.storeObjects = storeObjects;\n    }\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects() {\n        return storeObjects;\n    }\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port) {\n        getQSAdminServer().getServer().setPort(port);\n    }\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort() {\n        return getQSAdminServer().getServer().getPort();\n    }\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator) {\n        getQSAdminServer().getServer().setClientAuthenticationHandler(authenticator);\n    }\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator() {\n        return getQSAdminServer().getServer().getAuthenticator();\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException {\n        getQSAdminServer().setClientAuthenticationHandler(authenticator);\n        getQSAdminServer().startServer(port);\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException {\n        getQSAdminServer().startServer();\n    }\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer() {\n        if (adminServer == null)\n            adminServer = new QSAdminServer(QuickServer.this);\n        return adminServer;\n    }\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer) {\n        if (adminServer == null)\n            this.adminServer = adminServer;\n    }\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed() {\n        if (server == null)\n            return true;\n        return server.isClosed();\n    }\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger() {\n        if (appLogger != null)\n            return appLogger;\n        return logger;\n    }\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger) {\n        this.appLogger = appLogger;\n    }\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler) {\n        clientObjectHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler() {\n        return clientObjectHandlerString;\n    }\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        if (formatter == null)\n            return;\n        consoleLoggingformatter = formatter;\n        java.util.logging.Formatter conformatter = (java.util.logging.Formatter) getClass(formatter, true).newInstance();\n        Logger jdkLogger = Logger.getLogger(\"\");\n        Handler[] handlers = jdkLogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                handlers[index].setFormatter(conformatter);\n            }\n        }\n        logger.log(Level.FINEST, \"Set to {0}\", formatter);\n    }\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter() {\n        return consoleLoggingformatter;\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MiniFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to logging.MiniFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MicroFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to MicroFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        boolean isConsole = true;\n        try {\n            if (System.console() == null) {\n                isConsole = false;\n            }\n        } catch (Throwable e) {\n            //ignore\n        }\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                if (isConsole == false && level != Level.OFF) {\n                    System.out.println(\"QuickServer: You do not have a console.. so turning console logger off..\");\n                    level = Level.OFF;\n                }\n                if (level == Level.OFF) {\n                    logger.info(\"QuickServer: Removing console handler.. \");\n                    rlogger.removeHandler(handlers[index]);\n                    handlers[index].setLevel(level);\n                    handlers[index].close();\n                } else {\n                    handlers[index].setLevel(level);\n                }\n            }\n        }\n        if (level == Level.SEVERE)\n            consoleLoggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            consoleLoggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            consoleLoggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            consoleLoggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            consoleLoggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            consoleLoggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            consoleLoggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            consoleLoggingLevel = \"OFF\";\n        else\n            consoleLoggingLevel = \"UNKNOWN\";\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel() {\n        return consoleLoggingLevel;\n    }\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            handlers[index].setLevel(level);\n        }\n        if (level == Level.SEVERE)\n            loggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            loggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            loggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            loggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            loggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            loggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            loggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            loggingLevel = \"OFF\";\n        else\n            loggingLevel = \"UNKNOWN\";\n        consoleLoggingLevel = loggingLevel;\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    //*** Start of Service interface methods\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError() {\n        return serviceError;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param) {\n        serviceError = null;\n        try {\n            initServer(param);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig) {\n        serviceError = null;\n        try {\n            initServer(qsConfig);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING)\n            return false;\n        try {\n            startServer();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService() {\n        serviceError = null;\n        if (getServiceState() == Service.STOPPED)\n            return false;\n        try {\n            stopServer();\n            clearAllPools();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING) {\n            suspendMaxConnection = maxConnection;\n            suspendMaxConnectionMsg = maxConnectionMsg;\n            maxConnection = 0;\n            maxConnectionMsg = \"Service is suspended.\";\n            setServiceState(Service.SUSPENDED);\n            logger.log(Level.INFO, \"Service {0} is suspended.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService() {\n        serviceError = null;\n        if (getServiceState() == Service.SUSPENDED) {\n            maxConnection = suspendMaxConnection;\n            maxConnectionMsg = suspendMaxConnectionMsg;\n            setServiceState(Service.RUNNING);\n            logger.log(Level.INFO, \"Service {0} resumed.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info() {\n        serviceError = null;\n        StringBuilder buf = new StringBuilder();\n        buf.append(getName()).append(\"\\n\");\n        buf.append(getBindAddr().getHostAddress()).append(\" \");\n        buf.append(getPort()).append(\"\\n\");\n        return buf.toString();\n    }\n\n    // *** End of Service interface methods\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException {\n        QuickServerConfig qsConfig = null;\n        try {\n            qsConfig = ConfigReader.read((String) param[0]);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not init server from xml file {0} : {1}\", new Object[] { new File((String) param[0]).getAbsolutePath(), e });\n            throw new AppException(\"Could not init server from xml file\", e);\n        }\n        initServer(qsConfig);\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException {\n        setConfig(qsConfig);\n        try {\n            configQuickServer();\n            loadApplicationClasses();\n            //start InitServerHooks\n            InitServerHooks ish = getConfig().getInitServerHooks();\n            if (ish != null) {\n                Iterator iterator = ish.iterator();\n                String initServerHookClassName = null;\n                Class initServerHookClass = null;\n                InitServerHook initServerHook = null;\n                while (iterator.hasNext()) {\n                    initServerHookClassName = (String) iterator.next();\n                    initServerHookClass = getClass(initServerHookClassName, true);\n                    initServerHook = (InitServerHook) initServerHookClass.newInstance();\n                    logger.log(Level.INFO, \"Loaded init server hook: {0}\", initServerHookClassName);\n                    logger.log(Level.FINE, \"Init server hook info: {0}\", initServerHook.info());\n                    initServerHook.handleInit(QuickServer.this);\n                }\n            }\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not load init server hook: {0}\", e);\n            logger.log(Level.WARNING, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Could not load init server hook\", e);\n        }\n        setServiceState(Service.INIT);\n        logger.log(Level.FINEST, \"\\r\\n{0}\", MyString.getSystemInfo(getVersion()));\n    }\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState() {\n        return serviceState;\n    }\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state) {\n        serviceState = state;\n    }\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp) {\n        if (temp.equals(\"SEVERE\"))\n            qs.setConsoleLoggingLevel(Level.SEVERE);\n        else if (temp.equals(\"WARNING\"))\n            qs.setConsoleLoggingLevel(Level.WARNING);\n        else if (temp.equals(\"INFO\"))\n            qs.setConsoleLoggingLevel(Level.INFO);\n        else if (temp.equals(\"CONFIG\"))\n            qs.setConsoleLoggingLevel(Level.CONFIG);\n        else if (temp.equals(\"FINE\"))\n            qs.setConsoleLoggingLevel(Level.FINE);\n        else if (temp.equals(\"FINER\"))\n            qs.setConsoleLoggingLevel(Level.FINER);\n        else if (temp.equals(\"FINEST\"))\n            qs.setConsoleLoggingLevel(Level.FINEST);\n        else if (temp.equals(\"OFF\"))\n            qs.setConsoleLoggingLevel(Level.OFF);\n        else\n            logger.log(Level.WARNING, \"unknown level {0}\", temp);\n    }\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception {\n        QuickServer qs = QuickServer.this;\n        //v1.3\n        qs.setConfig(config);\n        qs.setBasicConfig(config);\n        String temp = config.getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        temp = null;\n        qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        //v1.3.3\n        qs.setSecurityManagerClass(config.getSecurityManagerClass());\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        temp = config.getApplicationJarPath();\n        if (temp != null) {\n            File ajp = new File(temp);\n            if (ajp.isAbsolute() == false) {\n                temp = config.getConfigFile();\n                ajp = new File(temp);\n                temp = ajp.getParent() + File.separatorChar + config.getApplicationJarPath();\n                config.setApplicationJarPath(temp);\n                temp = null;\n            }\n            qs.setApplicationJarPath(config.getApplicationJarPath());\n            //set path also to QSAdmin\n            if (config.getQSAdminServerConfig() != null) {\n                getQSAdminServer().getServer().setApplicationJarPath(config.getApplicationJarPath());\n            }\n        }\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception {\n        QuickServer qs = getQSAdminServer().getServer();\n        qs.setBasicConfig(config);\n        //set the Logging Level to same as main QS\n        //config.getConsoleLoggingLevel();\n        String temp = getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        //set the Logging Formatter to same as main QS\n        //qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setConsoleLoggingFormatter(getConsoleLoggingFormatter());\n        //v1.4.6\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        //v1.4.6\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        getQSAdminServer().setCommandPlugin(config.getCommandPlugin());\n        //v1.3.2\n        if (config.getCommandShellEnable().equals(\"true\"))\n            getQSAdminServer().setShellEnable(true);\n        getQSAdminServer().setPromptName(config.getCommandShellPromptName());\n        //v1.3.3\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception {\n        configQuickServer(getConfig());\n        if (getConfig().getQSAdminServerConfig() != null) {\n            configQuickServer(getConfig().getQSAdminServerConfig());\n        }\n    }\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args) {\n        try {\n            if (args.length >= 1) {\n                if (args[0].equals(\"-about\")) {\n                    org.quickserver.net.server.gui.About.main(null);\n                } else if (args[0].equals(\"-load\") && args.length >= 2) {\n                    QuickServer qs = QuickServer.load(args[1]);\n                    if (qs != null)\n                        handleOptions(args, qs);\n                } else {\n                    System.out.println(printUsage());\n                }\n            } else {\n                System.out.println(printUsage());\n                org.quickserver.net.server.gui.About.showAbout();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException {\n        QuickServer qs = new QuickServer();\n        Object[] config = new Object[] { xml };\n        qs.initServer(config);\n        qs.startServer();\n        if (qs.getConfig().getQSAdminServerConfig() != null) {\n            qs.startQSAdminServer();\n        }\n        return qs;\n    }\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"QuickServer - Java library/framework for creating robust multi-client TCP servers.\\n\");\n        sb.append(\"Copyright (C) QuickServer.org\\n\\n\");\n        sb.append(\"Usage: QuickServer [-options]\\n\");\n        sb.append(\"Where options include:\\n\");\n        sb.append(\"  -about\\t\" + \"Opens About Dialog box\\n\");\n        sb.append(\"  -load <xml_config_file> [load-options]\\t\" + \"Loads the server from xml file.\\n\");\n        sb.append(\"  Where load-options include:\\n\");\n        sb.append(\"     -fullXML2File <file_name>\\t\" + \"Dumps the Full XML configuration of the QuickServer loaded.\\n\");\n        return sb.toString();\n    }\n\n    private static void handleOptions(String[] args, QuickServer quickserver) {\n        if (args.length < 3)\n            return;\n        if (args[2].equals(\"-fullXML2File\") && args.length >= 4) {\n            File file = new File(args[3]);\n            logger.log(Level.INFO, \"Writing full xml configuration to file: {0}\", file.getAbsolutePath());\n            try {\n                TextFile.write(file, quickserver.getConfig().toXML(null));\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error writing full xml configuration: {0}\", e);\n            }\n        }\n    }\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception {\n        try {\n            if (pool != null)\n                getClientPool().clear();\n            if (clientHandlerPool != null)\n                getClientHandlerPool().clear();\n            if (getClientDataPool() != null)\n                getClientDataPool().clear();\n            if (getDBPoolUtil() != null)\n                getDBPoolUtil().clean();\n            if (byteBufferPool != null)\n                getByteBufferPool().clear();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error: {0}\", e);\n            throw e;\n        }\n    }\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception {\n        if (pool == null && clientHandlerPool == null && getClientDataPool() == null && getDBPoolUtil() == null && byteBufferPool == null) {\n            return;\n        }\n        logger.log(Level.FINE, \"Closing pools for {0}\", getName());\n        try {\n            if (pool != null && PoolHelper.isPoolOpen(getClientPool().getObjectPool())) {\n                logger.finer(\"Closing ClientThread pool.\");\n                getClientPool().close();\n            }\n            if (clientHandlerPool != null && PoolHelper.isPoolOpen(getClientHandlerPool())) {\n                logger.finer(\"Closing ClientHandler pool.\");\n                getClientHandlerPool().close();\n            }\n            if (getClientDataPool() != null && PoolHelper.isPoolOpen(getClientDataPool())) {\n                logger.finer(\"Closing ClientData pool.\");\n                getClientDataPool().close();\n            }\n            if (getDBPoolUtil() != null) {\n                logger.finer(\"Closing DB pool.\");\n                getDBPoolUtil().clean();\n            }\n            if (byteBufferPool != null && PoolHelper.isPoolOpen(getByteBufferPool())) {\n                logger.finer(\"Closing ByteBuffer pool.\");\n                getByteBufferPool().close();\n            }\n            logger.log(Level.FINE, \"Closed pools for {0}\", getName());\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error closing pools for {0}: {1}\", new Object[] { getName(), e });\n            throw e;\n        }\n    }\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception {\n        logger.fine(\"Creating pools\");\n        if (getBlockingMode() == false) {\n            makeByteBufferPool(getBasicConfig().getObjectPoolConfig().getByteBufferObjectPoolConfig());\n        }\n        makeClientPool(getBasicConfig().getObjectPoolConfig().getThreadObjectPoolConfig());\n        makeClientHandlerPool(getBasicConfig().getObjectPoolConfig().getClientHandlerObjectPoolConfig());\n        //check if client data is poolable\n        if (clientDataClass != null) {\n            try {\n                clientData = (ClientData) clientDataClass.newInstance();\n                if (PoolableObject.class.isInstance(clientData) == true) {\n                    PoolableObject po = (PoolableObject) clientData;\n                    if (po.isPoolable() == true) {\n                        makeClientDataPool(po.getPoolableObjectFactory(), getBasicConfig().getObjectPoolConfig().getClientDataObjectPoolConfig());\n                    } else {\n                        clientDataPool = null;\n                        logger.fine(\"ClientData is not poolable!\");\n                    }\n                }\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error: {0}\", e);\n                throw e;\n            }\n        }\n        try {\n            makeDBObjectPool();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error in makeDBObjectPool() : {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw e;\n        }\n        logger.fine(\"Created pools\");\n    }\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool() {\n        if (pool == null)\n            throw new IllegalStateException(\"No ClientPool available yet!\");\n        return pool;\n    }\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientHandler pool\");\n        PoolableObjectFactory factory = new ClientHandlerObjectFactory(getBlockingMode());\n        clientHandlerPool = poolManager.makeClientHandlerPool(factory, opConfig);\n        poolManager.initPool(clientHandlerPool, opConfig);\n        clientHandlerPool = makeQSObjectPool(clientHandlerPool);\n        clientIdentifier.setClientHandlerPool((QSObjectPool) clientHandlerPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool() {\n        if (clientHandlerPool == null)\n            throw new IllegalStateException(\"No ClientHandler Pool available yet!\");\n        return clientHandlerPool;\n    }\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config) {\n        this.config = config;\n    }\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig() {\n        return config;\n    }\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientData pool\");\n        clientDataPool = poolManager.makeClientDataPool(factory, opConfig);\n        poolManager.initPool(clientDataPool, opConfig);\n        clientDataPool = makeQSObjectPool(clientDataPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool() {\n        return clientDataPool;\n    }\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil() {\n        return dBPoolUtil;\n    }\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig) {\n        getConfig().setDBObjectPoolConfig(dBObjectPoolConfig);\n    }\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception {\n        if (getConfig().getDBObjectPoolConfig() != null) {\n            logger.fine(\"Creating DBObject Pool\");\n            //logger.finest(\"Got:\\n\"+getConfig().getDBObjectPoolConfig().toXML(null));\n            Class dbPoolUtilClass = getClass(getConfig().getDBObjectPoolConfig().getDbPoolUtil(), true);\n            dBPoolUtil = (DBPoolUtil) dbPoolUtilClass.newInstance();\n            dBPoolUtil.setDatabaseConnections(getConfig().getDBObjectPoolConfig().getDatabaseConnectionSet().iterator());\n            dBPoolUtil.initPool();\n        }\n    }\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id) {\n        return clientIdentifier.findFirstClientById(id);\n    }\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient() {\n        return clientIdentifier.findAllClient();\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern) {\n        return clientIdentifier.findAllClientById(pattern);\n    }\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key) {\n        return clientIdentifier.findClientByKey(key);\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern) {\n        return clientIdentifier.findAllClientByKey(pattern);\n    }\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted() {\n        setSkipValidation(true);\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation() {\n        return skipValidation;\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation) {\n        skipValidation = validation;\n    }\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging) {\n        this.communicationLogging = communicationLogging;\n    }\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging() {\n        return communicationLogging;\n    }\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass) {\n        if (securityManagerClass != null)\n            this.securityManagerClass = securityManagerClass;\n    }\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass() {\n        return securityManagerClass;\n    }\n\n    public SecurityManager getSecurityManager() throws AppException {\n        if (getSecurityManagerClass() == null)\n            return null;\n        SecurityManager sm = null;\n        try {\n            sm = (SecurityManager) getClass(getSecurityManagerClass(), true).newInstance();\n        } catch (ClassNotFoundException e) {\n            throw new AppException(e.getMessage());\n        } catch (InstantiationException e) {\n            throw new AppException(e.getMessage());\n        } catch (IllegalAccessException e) {\n            throw new AppException(e.getMessage());\n        }\n        return sm;\n    }\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig) {\n        this.accessConstraintConfig = accessConstraintConfig;\n    }\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig() {\n        return accessConstraintConfig;\n    }\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader) {\n        this.classLoader = classLoader;\n        Thread.currentThread().setContextClassLoader(classLoader);\n    }\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader() {\n        return classLoader;\n    }\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException {\n        if (name == null)\n            throw new IllegalArgumentException(\"Class name can't be null!\");\n        logger.log(Level.FINEST, \"Class: {0}, reload: {1}\", new Object[] { name, reload });\n        if (reload == true && classLoader != null) {\n            return classLoader.loadClass(name);\n        } else if (reload == true && classLoader == null && this.getClass().getClassLoader() != null) {\n            return this.getClass().getClassLoader().loadClass(name);\n        } else if (reload == false && classLoader != null) {\n            return Class.forName(name, true, classLoader);\n        } else /*if(reload==false && classLoader==null)*/\n        {\n            return Class.forName(name, true, this.getClass().getClassLoader());\n        }\n    }\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath) {\n        this.applicationJarPath = applicationJarPath;\n    }\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath() {\n        return applicationJarPath;\n    }\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks) {\n        this.serverHooks = serverHooks;\n    }\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks() {\n        if (serverHooks == null)\n            serverHooks = new ServerHooks();\n        return serverHooks;\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses() {\n        if (getServerHooks() == null)\n            return;\n        listOfServerHooks = new ArrayList();\n        ServerHook serverHook = null;\n        String serverHookClassName = null;\n        Class serverHookClass = null;\n        //add system hooks\n        serverHook = new GhostSocketReaper();\n        serverHook.initHook(QuickServer.this);\n        listOfServerHooks.add(serverHook);\n        ghostSocketReaper = (GhostSocketReaper) serverHook;\n        //add user hooks if any\n        Iterator iterator = getServerHooks().iterator();\n        while (iterator.hasNext()) {\n            serverHookClassName = (String) iterator.next();\n            try {\n                serverHookClass = getClass(serverHookClassName, true);\n                serverHook = (ServerHook) serverHookClass.newInstance();\n                serverHook.initHook(QuickServer.this);\n                listOfServerHooks.add(serverHook);\n                logger.log(Level.INFO, \"Loaded server hook: {0}\", serverHookClassName);\n                logger.log(Level.FINE, \"Server hook info: {0}\", serverHook.info());\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Could not load server hook [{0}]: {1}\", new Object[] { serverHookClassName, e });\n                logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            }\n        }\n        //end of while\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event) {\n        if (listOfServerHooks == null) {\n            logger.warning(\"listOfServerHooks was null!\");\n            return;\n        }\n        ServerHook serverHook = null;\n        boolean result = false;\n        Iterator iterator = listOfServerHooks.iterator();\n        String hooktype = \"UNKNOWN\";\n        switch(event) {\n            case ServerHook.PRE_STARTUP:\n                hooktype = \"PRE_STARTUP\";\n                break;\n            case ServerHook.POST_STARTUP:\n                hooktype = \"POST_STARTUP\";\n                break;\n            case ServerHook.PRE_SHUTDOWN:\n                hooktype = \"PRE_SHUTDOWN\";\n                break;\n            case ServerHook.POST_SHUTDOWN:\n                hooktype = \"POST_SHUTDOWN\";\n                break;\n        }\n        while (iterator.hasNext()) {\n            serverHook = (ServerHook) iterator.next();\n            try {\n                result = serverHook.handleEvent(event);\n            } catch (Exception e) {\n                result = false;\n                logger.log(Level.WARNING, \"Error invoking {0} hook [{1}]: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), e.getMessage() });\n            }\n            logger.log(Level.FINE, \"Invoked {0} hook [{1}] was: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), result });\n        }\n    }\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone() {\n        Object object = null;\n        try {\n            object = super.clone();\n            QuickServer _qs = (QuickServer) object;\n            _qs.setQSAdminServer(new QSAdminServer(_qs));\n        } catch (CloneNotSupportedException e) {\n            //should not happ\n            logger.log(Level.WARNING, \"Error cloning : {0}\", e);\n        }\n        return object;\n    }\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure) {\n        this.secure = secure;\n    }\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure() {\n        if (secure == null)\n            secure = new Secure();\n        return secure;\n    }\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure() {\n        return runningSecure;\n    }\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure) {\n        this.runningSecure = runningSecure;\n    }\n\n    private File makeAbsoluteToConfig(String fileName) {\n        Assertion.affirm(fileName != null, \"FileName can't be null\");\n        return ConfigReader.makeAbsoluteToConfig(fileName, getConfig());\n    }\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException {\n        server = null;\n        logger.log(Level.FINEST, \"Binding {0} to IP: {1}\", new Object[] { getName(), getBindAddr() });\n        InetSocketAddress bindAddress = new InetSocketAddress(getBindAddr(), getPort());\n        try {\n            NetworkInterface ni = NetworkInterface.getByInetAddress(getBindAddr());\n            if (ni != null) {\n                logger.fine(\"NetworkInterface: \" + ni);\n            }\n        } catch (Exception igrnore) {\n            /*ignore*/\n        } catch (Error igrnore) {\n            /*ignore*/\n        }\n        if (getSecure().isEnable() == false) {\n            logger.log(Level.FINE, \"Making a normal ServerSocket for {0}\", getName());\n            setRunningSecure(false);\n            if (getBlockingMode() == false) {\n                //for non-blocking\n                serverSocketChannel = ServerSocketChannel.open();\n                server = serverSocketChannel.socket();\n                server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n            } else {\n                //for blocking\n                server = new ServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n            }\n        } else {\n            try {\n                logger.log(Level.FINE, \"Making a secure ServerSocket for {0}\", getName());\n                getSSLContext();\n                setRunningSecure(true);\n                if (getBlockingMode() == false) {\n                    logger.log(Level.FINE, \"Making a secure ServerSocketChannel for {0}\", getName());\n                    //for non-blocking\n                    serverSocketChannel = ServerSocketChannel.open();\n                    server = serverSocketChannel.socket();\n                    server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n                } else {\n                    ServerSocketFactory ssf = getSSLContext().getServerSocketFactory();\n                    SSLServerSocket serversocket = (SSLServerSocket) ssf.createServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n                    serversocket.setNeedClientAuth(secure.isClientAuthEnable());\n                    setRunningSecure(true);\n                    secureStoreManager.logSSLServerSocketInfo(serversocket);\n                    server = serversocket;\n                    serverSocketChannel = server.getChannel();\n                    if (serverSocketChannel == null && getBlockingMode() == false) {\n                        logger.warning(\"Secure Server does not support Channel! So will run in blocking mode.\");\n                        blockingMode = false;\n                    }\n                }\n                //blocking\n            } catch (NoSuchAlgorithmException e) {\n                logger.log(Level.WARNING, \"NoSuchAlgorithmException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            } catch (KeyManagementException e) {\n                logger.log(Level.WARNING, \"KeyManagementException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            }\n        }\n        server.setReuseAddress(true);\n        int connectionTime = 0;\n        int latency = 0;\n        int bandwidth = 0;\n        connectionTime = getBasicConfig().getAdvancedSettings().getPerformancePreferencesConnectionTime();\n        latency = getBasicConfig().getAdvancedSettings().getPerformancePreferencesLatency();\n        bandwidth = getBasicConfig().getAdvancedSettings().getPerformancePreferencesBandwidth();\n        logger.log(Level.FINE, \"getPerformancePreferencesConnectionTime : {0}\", connectionTime);\n        logger.log(Level.FINE, \"getPerformancePreferencesLatency : {0}\", latency);\n        logger.log(Level.FINE, \"getPerformancePreferencesBandwidth : {0}\", bandwidth);\n        server.setPerformancePreferences(connectionTime, latency, bandwidth);\n        int clientSocketReceiveBufferSize = getBasicConfig().getAdvancedSettings().getClientSocketReceiveBufferSize();\n        if (clientSocketReceiveBufferSize > 0) {\n            logger.log(Level.FINE, \"clientSocketReceiveBufferSize: {0}\", clientSocketReceiveBufferSize);\n            server.setReceiveBufferSize(clientSocketReceiveBufferSize);\n        }\n        if (getBlockingMode() == false) {\n            logger.log(Level.FINE, \"Server Mode {0} - Non Blocking\", getName());\n            if (selector == null || selector.isOpen() == false) {\n                logger.finest(\"Opening new selector\");\n                selector = Selector.open();\n            } else {\n                logger.log(Level.FINEST, \"Reusing selector: {0}\", selector);\n            }\n            serverSocketChannel.configureBlocking(false);\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n            selector.wakeup();\n        } else {\n            logger.log(Level.FINE, \"Server Mode {0} - Blocking\", getName());\n        }\n    }\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception {\n        Assertion.affirm(basicConfig != null, \"BasicServerConfig can't be null\");\n        this.basicConfig = basicConfig;\n    }\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig() {\n        return basicConfig;\n    }\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException {\n        if (getSecure().isLoad() == false) {\n            throw new IllegalStateException(\"Secure setting is not yet enabled for loading!\");\n        }\n        logger.info(\"Loading Secure Context..\");\n        km = null;\n        tm = null;\n        try {\n            String ssManager = \"org.quickserver.security.SecureStoreManager\";\n            if (getSecure().getSecureStore() != null)\n                ssManager = getSecure().getSecureStore().getSecureStoreManager();\n            Class secureStoreManagerClass = getClass(ssManager, true);\n            secureStoreManager = (SecureStoreManager) secureStoreManagerClass.newInstance();\n            km = secureStoreManager.loadKeyManagers(getConfig());\n            logger.fine(\"KeyManager got\");\n            tm = secureStoreManager.loadTrustManagers(getConfig());\n            logger.fine(\"TrustManager got\");\n            sslc = secureStoreManager.getSSLContext(getConfig().getSecure().getProtocol());\n            sslc.init(km, tm, null);\n            logger.fine(\"SSLContext loaded\");\n        } catch (KeyStoreException e) {\n            logger.warning(\"KeyStoreException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchAlgorithmException e) {\n            logger.warning(\"NoSuchAlgorithmException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchProviderException e) {\n            logger.warning(\"NoSuchProviderException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (UnrecoverableKeyException e) {\n            logger.warning(\"UnrecoverableKeyException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (CertificateException e) {\n            logger.warning(\"CertificateException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (KeyManagementException e) {\n            logger.warning(\"KeyManagementException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (GeneralSecurityException e) {\n            logger.warning(\"GeneralSecurityException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (ClassNotFoundException e) {\n            logger.warning(\"ClassNotFoundException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (InstantiationException e) {\n            logger.warning(\"InstantiationException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (IllegalAccessException e) {\n            logger.warning(\"IllegalAccessException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        return getSSLContext(null);\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        if (protocol != null && secureStoreManager != null) {\n            SSLContext _sslc = secureStoreManager.getSSLContext(protocol);\n            _sslc.init(km, tm, null);\n            return _sslc;\n        }\n        return sslc;\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext());\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext(protocol));\n    }\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler) {\n        clientBinaryHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler() {\n        return clientBinaryHandlerString;\n    }\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector) {\n        this.selector = selector;\n    }\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector() {\n        return selector;\n    }\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception {\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        //long stime = System.currentTimeMillis();\n        //long etime = System.currentTimeMillis();\n        while (true) {\n            //etime = System.currentTimeMillis();\n            //System.out.println(\"Time Taken: \"+(etime-stime));\n            client = server.accept();\n            //stime = System.currentTimeMillis();\n            if (linger < 0) {\n                client.setSoLinger(false, 0);\n            } else {\n                client.setSoLinger(true, linger);\n            }\n            client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                //low delay=10\n                client.setTrafficClass(socketTrafficClass);\n            }\n            logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n            }\n            if (stopServer) {\n                //Client connected when server was about to be shutdown.\n                try {\n                    client.close();\n                } catch (Exception e) {\n                }\n                break;\n            }\n            if (checkAccessConstraint(client) == false) {\n                continue;\n            }\n            //Check if max connection has reached\n            if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                theClient.setClientEvent(ClientEvent.MAX_CON_BLOCKING);\n            } else {\n                theClient.setClientEvent(ClientEvent.RUN_BLOCKING);\n            }\n            theClient.setTrusted(getSkipValidation());\n            theClient.setSocket(client);\n            //mostly null\n            theClient.setSocketChannel(client.getChannel());\n            if (clientDataClass != null) {\n                if (getClientDataPool() == null) {\n                    clientData = (ClientData) clientDataClass.newInstance();\n                } else {\n                    clientData = (ClientData) getClientDataPool().borrowObject();\n                }\n                theClient.setClientData(clientData);\n            }\n            try {\n                _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                _chPolled.handleClient(theClient);\n            } catch (java.util.NoSuchElementException nsee) {\n                logger.warning(\"Could not borrow ClientHandler from pool. Error: \" + nsee);\n                logger.warning(\"Closing Socket [\" + client + \"] since no ClientHandler available.\");\n                client.close();\n            }\n            if (_chPolled != null) {\n                try {\n                    getClientPool().addClient(_chPolled, true);\n                } catch (java.util.NoSuchElementException nsee) {\n                    logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                    //logger.warning(\"Closing Socket [\"+client+\"] since no Thread available.\");\n                    //client.close();\n                    //returnClientHandlerToPool(_chPolled);\n                }\n                _chPolled = null;\n            }\n            client = null;\n            //reset it back\n            setSkipValidation(false);\n        }\n        //end of loop\n    }\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception {\n        int selectCount = 0;\n        Iterator iterator = null;\n        SelectionKey key = null;\n        ServerSocketChannel serverChannel = null;\n        SocketChannel socketChannel = null;\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        boolean stopServerProcessed = false;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        registerChannelRequestMap = new HashMap();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        while (true) {\n            selectCount = selector.select(500);\n            //selectCount = selector.select();//for testing\n            //check for any pending registerChannel req.\n            synchronized (registerChannelRequestMap) {\n                if (registerChannelRequestMap.size() > 0) {\n                    RegisterChannelRequest req = null;\n                    Object hashkey = null;\n                    iterator = registerChannelRequestMap.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        hashkey = iterator.next();\n                        req = (RegisterChannelRequest) registerChannelRequestMap.get(hashkey);\n                        req.register(getSelector());\n                    }\n                    iterator = null;\n                    registerChannelRequestMap.clear();\n                }\n                //if\n            }\n            //sync\n            if (stopServer == true && stopServerProcessed == false) {\n                logger.warning(\"Closing \" + getName());\n                serverSocketChannel.close();\n                stopServerProcessed = true;\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.warning(\"Closed \" + getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n            if (stopServer == false && stopServerProcessed == true) {\n                logger.finest(\"Server must have re-started.. will break\");\n                break;\n            }\n            if (selectCount == 0 && stopServerProcessed == true) {\n                java.util.Set keyset = selector.keys();\n                if (keyset.isEmpty() == true && getClientCount() <= 0) {\n                    break;\n                } else {\n                    continue;\n                }\n            } else if (selectCount == 0) {\n                continue;\n            }\n            iterator = selector.selectedKeys().iterator();\n            while (iterator.hasNext()) {\n                key = (SelectionKey) iterator.next();\n                if (key.isValid() == false) {\n                    iterator.remove();\n                    continue;\n                }\n                if (key.isAcceptable() && stopServer == false) {\n                    logger.finest(\"Key is Acceptable\");\n                    serverChannel = (ServerSocketChannel) key.channel();\n                    socketChannel = serverChannel.accept();\n                    if (socketChannel == null) {\n                        iterator.remove();\n                        continue;\n                    }\n                    client = socketChannel.socket();\n                    if (linger < 0) {\n                        client.setSoLinger(false, 0);\n                    } else {\n                        client.setSoLinger(true, linger);\n                    }\n                    client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                        //low delay=10\n                        client.setTrafficClass(socketTrafficClass);\n                    }\n                    logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                        client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                        logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n                    }\n                    if (checkAccessConstraint(client) == false) {\n                        iterator.remove();\n                        continue;\n                    }\n                    socketChannel.configureBlocking(false);\n                    theClient.setTrusted(getSkipValidation());\n                    theClient.setSocket(socketChannel.socket());\n                    theClient.setSocketChannel(socketChannel);\n                    if (clientDataClass != null) {\n                        if (getClientDataPool() == null) {\n                            clientData = (ClientData) clientDataClass.newInstance();\n                        } else {\n                            //borrow a object from pool\n                            clientData = (ClientData) getClientDataPool().borrowObject();\n                        }\n                        theClient.setClientData(clientData);\n                    }\n                    //Check if max connection has reached\n                    if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                        theClient.setClientEvent(ClientEvent.MAX_CON);\n                    } else {\n                        theClient.setClientEvent(ClientEvent.ACCEPT);\n                    }\n                    try {\n                        _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                        logger.finest(\"Asking \" + _chPolled.getName() + \" to handle.\");\n                        _chPolled.handleClient(theClient);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.warning(\"Could not borrow ClientHandler Object from pool. Error: \" + nsee);\n                        logger.warning(\"Closing SocketChannel [\" + serverChannel.socket() + \"] since no ClientHandler available.\");\n                        socketChannel.close();\n                    }\n                    if (_chPolled != null) {\n                        try {\n                            getClientPool().addClient(_chPolled, true);\n                        } catch (java.util.NoSuchElementException nsee) {\n                            logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                            //logger.warning(\"Closing SocketChannel [\"+serverChannel.socket()+\"] since no Thread available.\");\n                            //socketChannel.close();\n                            //returnClientHandlerToPool(_chPolled);\n                        }\n                        _chPolled = null;\n                    }\n                    socketChannel = null;\n                    client = null;\n                    //reset it back\n                    setSkipValidation(false);\n                } else if (key.isValid() && key.isReadable()) {\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Readable, removing OP_READ from interestOps for \" + _ch.getName());\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_READ));\n                        _ch.addEvent(ClientEvent.READ);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.READ);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (key.isValid() && key.isWritable()) {\n                    if (getClientPool().shouldNioWriteHappen() == false) {\n                        //no need to remove the key\n                        continue;\n                    }\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Writable, removing OP_WRITE from interestOps for \" + _ch.getName());\n                        //remove OP_WRITE from interest set\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));\n                        _ch.addEvent(ClientEvent.WRITE);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.WRITE);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (stopServer == true && key.isAcceptable()) {\n                    //we will not accept this key\n                    //reset it back\n                    setSkipValidation(false);\n                } else {\n                    logger.warning(\"Unknown key got in SelectionKey: \" + key);\n                }\n                //Remove key\n                iterator.remove();\n                Thread.yield();\n            }\n            //end of iterator\n            iterator = null;\n        }\n        //end of loop\n    }\n\n    private boolean checkAccessConstraint(Socket socket) {\n        try {\n            if (getAccessConstraintConfig() != null) {\n                getAccessConstraintConfig().checkAccept(socket);\n            }\n            return true;\n        } catch (SecurityException se) {\n            logger.warning(\"SecurityException occurred accepting connection : \" + se.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException {\n        if (getSelector() == null) {\n            throw new IllegalStateException(\"Selector is not open!\");\n        }\n        if (channel == null) {\n            throw new IllegalArgumentException(\"Can't register a null channel!\");\n        }\n        if (channel.isConnected() == false) {\n            throw new ClosedChannelException();\n        }\n        RegisterChannelRequest req = new RegisterChannelRequest(channel, ops, att);\n        RegisterChannelRequest reqOld = null;\n        synchronized (registerChannelRequestMap) {\n            reqOld = (RegisterChannelRequest) registerChannelRequestMap.get(channel);\n            if (reqOld == null) {\n                registerChannelRequestMap.put(channel, req);\n                getSelector().wakeup();\n                return true;\n            } else {\n                if (reqOld.equals(req) == false) {\n                    reqOld.setOps(reqOld.getOps() | req.getOps());\n                    reqOld.setAtt(req.getAtt());\n                    return true;\n                }\n                return false;\n            }\n        }\n        /*\n\t\tlogger.warning(\"Before register...\");\n\t\tchannel.register(getSelector(), ops, att);\n\t\tlogger.warning(\"Before wakeup and after register...\");\n\t\tgetSelector().wakeup();\n\t\tlogger.warning(\"After wakeup...\");\n\t\t*/\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig) {\n        logger.finer(\"Creating ByteBufferPool pool\");\n        int bufferSize = getBasicConfig().getAdvancedSettings().getByteBufferSize();\n        boolean useDirectByteBuffer = getBasicConfig().getAdvancedSettings().getUseDirectByteBuffer();\n        PoolableObjectFactory factory = new ByteBufferObjectFactory(bufferSize, useDirectByteBuffer);\n        byteBufferPool = poolManager.makeByteBufferPool(factory, opConfig);\n        poolManager.initPool(byteBufferPool, opConfig);\n    }\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool() {\n        return byteBufferPool;\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientThread pool\");\n        ThreadObjectFactory factory = new ThreadObjectFactory();\n        ObjectPool objectPool = poolManager.makeClientPool(factory, opConfig);\n        pool = new ClientPool(makeQSObjectPool(objectPool), opConfig);\n        factory.setClientPool(pool);\n        pool.setMaxThreadsForNioWrite(getBasicConfig().getAdvancedSettings().getMaxThreadsForNioWrite());\n        poolManager.initPool(objectPool, opConfig);\n    }\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler) {\n        clientWriteHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler() {\n        return clientWriteHandlerString;\n    }\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime() {\n        return lastStartTime;\n    }\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag) {\n        org.quickserver.util.io.ByteBufferOutputStream.setDebug(flag);\n        org.quickserver.util.io.ByteBufferInputStream.setDebug(flag);\n    }\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier() {\n        return clientIdentifier;\n    }\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception {\n        return (QSObjectPool) qsObjectPoolMaker.getQSObjectPool(objectPool);\n    }\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode() {\n        return blockingMode;\n    }\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception {\n        if (clientCommandHandlerString == null && clientEventHandlerString == null) {\n            logger.severe(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n            throw new AppException(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n        }\n        clientCommandHandler = null;\n        if (clientCommandHandlerString != null) {\n            logger.finest(\"Loading ClientCommandHandler class..\");\n            Class clientCommandHandlerClass = getClass(clientCommandHandlerString, true);\n            clientCommandHandler = (ClientCommandHandler) clientCommandHandlerClass.newInstance();\n        }\n        boolean setClientCommandHandlerLookup = false;\n        clientEventHandler = null;\n        if (clientEventHandlerString == null) {\n            clientEventHandlerString = \"org.quickserver.net.server.impl.DefaultClientEventHandler\";\n            setClientCommandHandlerLookup = true;\n        }\n        logger.finest(\"Loading ClientEventHandler class..\");\n        if (clientEventHandlerString.equals(clientCommandHandlerString) && ClientEventHandler.class.isInstance(clientCommandHandler)) {\n            clientEventHandler = (ClientEventHandler) clientCommandHandler;\n        } else {\n            clientEventHandler = (ClientEventHandler) getClass(clientEventHandlerString, true).newInstance();\n            if (setClientCommandHandlerLookup) {\n                ((DefaultClientEventHandler) clientEventHandler).setClientCommandHandler(clientCommandHandler);\n            }\n        }\n        clientExtendedEventHandler = null;\n        if (clientExtendedEventHandlerString != null) {\n            logger.finest(\"Loading ClientExtendedEventHandler class..\");\n            if (clientExtendedEventHandlerString.equals(clientCommandHandlerString) && ClientExtendedEventHandler.class.isInstance(clientCommandHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientCommandHandler;\n            } else if (clientExtendedEventHandlerString.equals(clientEventHandlerString) && ClientExtendedEventHandler.class.isInstance(clientEventHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientEventHandler;\n            } else {\n                Class clientExtendedEventHandlerClass = getClass(clientExtendedEventHandlerString, true);\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientExtendedEventHandlerClass.newInstance();\n            }\n        }\n        clientObjectHandler = null;\n        if (clientObjectHandlerString != null) {\n            logger.finest(\"Loading ClientObjectHandler class..\");\n            if (clientObjectHandlerString.equals(clientCommandHandlerString) && ClientObjectHandler.class.isInstance(clientCommandHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientCommandHandler;\n            } else if (clientObjectHandlerString.equals(clientEventHandlerString) && ClientObjectHandler.class.isInstance(clientEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientEventHandler;\n            } else if (clientObjectHandlerString.equals(clientExtendedEventHandlerString) && ClientObjectHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientExtendedEventHandler;\n            } else {\n                clientObjectHandler = (ClientObjectHandler) getClass(clientObjectHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientBinaryHandler = null;\n        if (clientBinaryHandlerString != null) {\n            logger.finest(\"Loading ClientBinaryHandler class..\");\n            if (clientBinaryHandlerString.equals(clientCommandHandlerString) && ClientBinaryHandler.class.isInstance(clientCommandHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientCommandHandler;\n            } else if (clientBinaryHandlerString.equals(clientEventHandlerString) && ClientBinaryHandler.class.isInstance(clientEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientExtendedEventHandlerString) && ClientBinaryHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientExtendedEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientObjectHandlerString) && ClientBinaryHandler.class.isInstance(clientObjectHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientObjectHandler;\n            } else {\n                clientBinaryHandler = (ClientBinaryHandler) getClass(clientBinaryHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientWriteHandler = null;\n        if (clientWriteHandlerString != null) {\n            logger.finest(\"Loading ClientWriteHandler class..\");\n            if (clientWriteHandlerString.equals(clientCommandHandlerString) && ClientWriteHandler.class.isInstance(clientCommandHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientCommandHandler;\n            } else if (clientWriteHandlerString.equals(clientEventHandlerString) && ClientWriteHandler.class.isInstance(clientEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientEventHandler;\n            } else if (clientWriteHandlerString.equals(clientExtendedEventHandlerString) && ClientWriteHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientExtendedEventHandler;\n            } else if (clientWriteHandlerString.equals(clientObjectHandlerString) && ClientWriteHandler.class.isInstance(clientObjectHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientObjectHandler;\n            } else if (clientWriteHandlerString.equals(clientBinaryHandlerString) && ClientWriteHandler.class.isInstance(clientBinaryHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientBinaryHandler;\n            } else {\n                clientWriteHandler = (ClientWriteHandler) getClass(clientWriteHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        Class authenticatorClass = null;\n        if (clientAuthenticationHandlerString != null) {\n            logger.finest(\"Loading ClientAuthenticationHandler class..\");\n            authenticatorClass = getClass(clientAuthenticationHandlerString, true);\n        }\n        if (authenticatorClass != null) {\n            Object obj = authenticatorClass.newInstance();\n            if (ClientAuthenticationHandler.class.isInstance(obj))\n                clientAuthenticationHandler = (ClientAuthenticationHandler) obj;\n            else\n                authenticator = (Authenticator) obj;\n        }\n        clientDataClass = null;\n        if (clientDataString != null) {\n            logger.finest(\"Loading ClientData class..\");\n            clientDataClass = getClass(clientDataString, true);\n        }\n        Assertion.affirm(clientEventHandler != null, \"ClientEventHandler was not loaded!\");\n    }\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler) {\n        clientEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler() {\n        return clientEventHandlerString;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException {\n        if (dataType == DataType.IN)\n            this.defaultDataModeIN = dataMode;\n        if (dataType == DataType.OUT)\n            this.defaultDataModeOUT = dataMode;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException {\n        defaultDataModeIN = defaultDataMode.getDataMode(DataType.IN);\n        defaultDataModeOUT = defaultDataMode.getDataMode(DataType.OUT);\n        ;\n    }\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType) {\n        if (dataType == DataType.IN)\n            return defaultDataModeIN;\n        if (dataType == DataType.OUT)\n            return defaultDataModeOUT;\n        else\n            throw new IllegalArgumentException(\"Unknown DataType: \" + dataType);\n    }\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler) {\n        clientExtendedEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler() {\n        return clientExtendedEventHandlerString;\n    }\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception {\n        if (getApplicationJarPath() != null && getClassLoader() == null) {\n            setClassLoader(ClassUtil.getClassLoader(getApplicationJarPath()));\n            //update qsadmin to use the same\n            if (adminServer != null) {\n                adminServer.getServer().setClassLoader(getClassLoader());\n            }\n        }\n    }\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID() {\n        return pid;\n    }\n\n    public boolean isRawCommunicationLogging() {\n        return rawCommunicationLogging;\n    }\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging) {\n        this.rawCommunicationLogging = rawCommunicationLogging;\n    }\n\n    public int getRawCommunicationMaxLength() {\n        return rawCommunicationMaxLength;\n    }\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength) {\n        this.rawCommunicationMaxLength = rawCommunicationMaxLength;\n    }\n}\n",
        "test_prompt": "// QuickServer_10Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#info()} method.\n*/\nclass QuickServer_10Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// QuickServer_13Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#findAllClient()} method.\n*/\nclass QuickServer_13Test {\n}"
            }
        ],
        "id": "4807da70-f06d-4ec9-bf4a-3c3b374435ec",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_13Test.java",
        "original_code": "// QuickServer.java\n/*\n * This file is part of the QuickServer library \n * Copyright (C) QuickServer.org\n *\n * Use, modification, copying and distribution of this software is subject to\n * the terms and conditions of the GNU Lesser General Public License. \n * You should have received a copy of the GNU LGP License along with this \n * library; if not, you can download a copy from <http://www.quickserver.org/>.\n *\n * For questions, suggestions, bug-reports, enhancement-requests etc.\n * visit http://www.quickserver.org\n *\n */\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n *  Main class of QuickServer library. This class is used to create\n *  multi client servers quickly.\n *  <p>\n *  Ones a client is connected, it creates {@link ClientHandler} object,\n *  which is run using any thread available from the pool of threads\n *  maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n *  handles the client. <br/>\n *  QuickServer divides the application logic of its developer over eight\n *  class, <br>\n *  \t<ul>\n * \t\t<li>ClientEventHandler<br>\n *  \t\t   &nbsp;Handles client events [Optional Class].\n *  \t\t<li>ClientCommandHandler [#]<br>\n *  \t\t   &nbsp;Handles client character/string commands.\n *  \t\t<li>ClientObjectHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - Object commands.\n * \t\t<li>ClientBinaryHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - binary data.\n * \t\t<li>ClientWriteHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n *  \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n *  \t\t\t&nbsp;Used to Authencatet a client.\n *  \t\t<li>ClientData [Optional Class]<br>\n *  \t\t\t&nbsp;Client data carrier (support class)\n * \t\t<li>ClientExtendedEventHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles extended client events.\n *  \t</ul>\n *\n *  [#] = Any one of these have to be set based on default DataMode for input.\n *  The default DataMode for input is String so if not changes you will\n *  have to set ClientCommandHandler.\n *  </p>\n *  <p>\n *   Eg:\n *  <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n *  @version 1.4.8\n *  @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //Some variable are not initialised to any value because the\n    //default java value was desired initial value.\n    //'dev ' = development build not yet final\n    //'beta' = test build all features\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n        if (System.getProperty(\"org.quickserver.useOSLineSeparator\") != null && System.getProperty(\"org.quickserver.useOSLineSeparator\").equals(\"true\")) {\n            NEW_LINE = System.getProperty(\"line.separator\");\n        } else {\n            NEW_LINE = \"\\r\\n\";\n        }\n        String _pid = ManagementFactory.getRuntimeMXBean().getName();\n        int i = _pid.indexOf(\"@\");\n        pid = _pid.substring(0, i);\n        System.out.print(\"Loading QuickServer v\" + getVersion() + \" [PID:\" + pid + \"]\");\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //--v1.2\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //for Service interface\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n        System.out.println(\" Done\");\n        //should be commented if not a patch release\n        //System.out.println(\"[Includes patch(#): t=152&p=532]\");\n        //should be commented if not a dev release\n        //System.out.println(\"[Dev Build Date: Saturday, October 29, 2005]\");\n        logger.log(Level.FINE, \"PID: {0}\", pid);\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion() {\n        return VER;\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo() {\n        return getVersionNo(VER);\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver) {\n        //String ver = getVersion();\n        float version = 0;\n        //check if beta\n        int i = ver.indexOf(\" \");\n        if (i == -1)\n            i = ver.length();\n        ver = ver.substring(0, i);\n        //check for sub version\n        i = ver.indexOf(\".\");\n        if (i != -1) {\n            int j = ver.indexOf(\".\", i);\n            if (j != -1) {\n                ver = ver.substring(0, i) + \".\" + MyString.replaceAll(ver.substring(i + 1), \".\", \"\");\n            }\n        }\n        try {\n            version = Float.parseFloat(ver);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Corrupt QuickServer\");\n        }\n        return version;\n    }\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine() {\n        return NEW_LINE;\n    }\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString() {\n        return serverName + \" : \" + getPort();\n    }\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n        setClientCommandHandler(commandHandler);\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n        //send to another constructor\n        this(commandHandler);\n        setPort(port);\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException {\n        logger.log(Level.FINE, \"Starting {0}\", getName());\n        if (isClosed() == false) {\n            logger.log(Level.WARNING, \"Server {0} already running.\", getName());\n            throw new AppException(\"Server \" + getName() + \" already running.\");\n        }\n        blockingMode = getBasicConfig().getServerMode().getBlocking();\n        if (getSecure().isEnable() && blockingMode == false) {\n            //TODO we need to fix this..\n            logger.warning(\"QuickServer does not support secure servers under non-blocking mode! So will run in blocking mode.\");\n            blockingMode = true;\n            getBasicConfig().getServerMode().setBlocking(blockingMode);\n        }\n        if (serverBanner == null) {\n            serverBanner = \"\\n-------------------------------\" + \"\\n Name : \" + getName() + \"\\n Port : \" + getPort() + \"\\n-------------------------------\\n\";\n            logger.finest(\"Default Server Banner Generated\");\n        }\n        try {\n            loadApplicationClasses();\n            //load class from Advanced Settings\n            Class clientIdentifierClass = getClass(getBasicConfig().getAdvancedSettings().getClientIdentifier(), true);\n            clientIdentifier = (ClientIdentifier) clientIdentifierClass.newInstance();\n            clientIdentifier.setQuickServer(QuickServer.this);\n            //load class from ObjectPoolConfig\n            Class poolManagerClass = getClass(getBasicConfig().getObjectPoolConfig().getPoolManager(), true);\n            poolManager = (PoolManager) poolManagerClass.newInstance();\n            //load class QSObjectPoolMaker\n            Class qsObjectPoolMakerClass = getClass(getBasicConfig().getAdvancedSettings().getQSObjectPoolMaker(), true);\n            qsObjectPoolMaker = (QSObjectPoolMaker) qsObjectPoolMakerClass.newInstance();\n            loadServerHooksClasses();\n            processServerHooks(ServerHook.PRE_STARTUP);\n            if (getSecure().isLoad() == true)\n                //v1.4.0\n                loadSSLContext();\n            loadBusinessLogic();\n        } catch (ClassNotFoundException e) {\n            logger.log(Level.SEVERE, \"Could not load class/s: \" + e, e);\n            throw new AppException(\"Could not load class/s : \" + e);\n        } catch (InstantiationException e) {\n            logger.log(Level.SEVERE, \"Could not instantiate class/s: \" + e, e);\n            throw new AppException(\"Could not instantiate class/s: \" + e);\n        } catch (IllegalAccessException e) {\n            logger.log(Level.SEVERE, \"Illegal access to class/s: \" + e, e);\n            throw new AppException(\"Illegal access to class/s: \" + e);\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, \"IOException: \" + e, e);\n            throw new AppException(\"IOException: \" + e);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Exception: \" + e, e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Exception : \" + e);\n        }\n        //v1.3.3\n        if (getSecurityManagerClass() != null) {\n            System.setSecurityManager(getSecurityManager());\n        }\n        setServiceState(Service.INIT);\n        t = new Thread(this, \"QuickServer - \" + getName());\n        t.start();\n        do {\n            Thread.yield();\n        } while (getServiceState() == Service.INIT);\n        if (getServiceState() != Service.RUNNING) {\n            if (exceptionInRun != null)\n                throw new AppException(\"Could not start server \" + getName() + \"! Details: \" + exceptionInRun);\n            else\n                throw new AppException(\"Could not start server \" + getName());\n        }\n        lastStartTime = new java.util.Date();\n        logger.log(Level.FINE, \"Started {0}, Date: {1}\", new Object[] { getName(), lastStartTime });\n    }\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException {\n        processServerHooks(ServerHook.PRE_SHUTDOWN);\n        logger.log(Level.WARNING, \"Stopping {0}\", getName());\n        stopServer = true;\n        Socket death = null;\n        if (isClosed() == true) {\n            logger.log(Level.WARNING, \"Server {0} is not running!\", getName());\n            throw new AppException(\"Server \" + getName() + \" is not running!\");\n        }\n        try {\n            if (getBlockingMode() == true) {\n                if (getSecure().isEnable() == false) {\n                    death = new Socket(server.getInetAddress(), server.getLocalPort());\n                    death.getInputStream().read();\n                    death.close();\n                } else {\n                    death = getSSLSocketFactory().createSocket(server.getInetAddress(), server.getLocalPort());\n                    Thread.sleep(100);\n                    death.close();\n                }\n            }\n            if (serverSocketChannel != null) {\n                serverSocketChannel.close();\n            }\n        } catch (IOException e) {\n            logger.log(Level.FINE, \"IOError stopping {0}: {1}\", new Object[] { getName(), e });\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error stopping {0}: {1}\", new Object[] { getName(), e });\n            throw new AppException(\"Error in stopServer \" + getName() + \": \" + e);\n        }\n        for (int i = 0; getServiceState() != Service.STOPPED; i++) {\n            try {\n                Thread.sleep(60);\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error waiting for {0} to fully stop. Error: {1}\", new Object[] { getName(), e });\n            }\n            if (i > 1000) {\n                logger.severe(\"Server was not stopped even after 10sec.. will terminate now.\");\n                System.exit(-1);\n            }\n        }\n        if (adminServer == null || getQSAdminServer().getServer() != this) {\n            //so this is not qsadmin\n            setClassLoader(null);\n        }\n        logger.log(Level.INFO, \"Stopped {0}\", getName());\n    }\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException {\n        stopServer();\n        startServer();\n    }\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName() {\n        return serverName;\n    }\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name) {\n        serverName = name;\n        logger.log(Level.FINEST, \"Set to : {0}\", name);\n    }\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner() {\n        return serverBanner;\n    }\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner) {\n        serverBanner = banner;\n        logger.log(Level.FINEST, \"Set to : {0}\", banner);\n    }\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port) {\n        if (port < 0) {\n            throw new IllegalArgumentException(\"Port number can not be less than 0!\");\n        }\n        serverPort = port;\n        logger.log(Level.FINEST, \"Set to {0}\", port);\n    }\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort() {\n        if (isClosed() == false) {\n            return server.getLocalPort();\n        }\n        if (getSecure().isEnable() == false) {\n            return serverPort;\n        } else {\n            int _port = getSecure().getPort();\n            if (_port == -1)\n                return serverPort;\n            else\n                return _port;\n        }\n    }\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler) {\n        clientCommandHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler() {\n        return clientCommandHandlerString;\n    }\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data) {\n        this.clientDataString = data;\n        logger.log(Level.FINEST, \"Set to {0}\", data);\n    }\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData() {\n        return clientDataString;\n    }\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time) {\n        if (time > 0)\n            socketTimeout = time;\n        else\n            socketTimeout = 0;\n        logger.log(Level.FINEST, \"Set to {0}\", socketTimeout);\n    }\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout() {\n        return socketTimeout;\n    }\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry) {\n        maxAuthTry = authTry;\n        logger.log(Level.FINEST, \"Set to {0}\", authTry);\n    }\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry() {\n        return maxAuthTry;\n    }\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg) {\n        maxAuthTryMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg() {\n        return maxAuthTryMsg;\n    }\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg) {\n        timeoutMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg() {\n        return timeoutMsg;\n    }\n\n    private TheClient initTheClient() {\n        TheClient theClient = new TheClient();\n        theClient.setServer(QuickServer.this);\n        theClient.setTimeoutMsg(getTimeoutMsg());\n        //v1.2\n        theClient.setMaxAuthTry(getMaxAuthTry());\n        theClient.setMaxAuthTryMsg(getMaxAuthTryMsg());\n        theClient.setClientEventHandler(clientEventHandler);\n        //v1.4.6\n        theClient.setClientExtendedEventHandler(clientExtendedEventHandler);\n        theClient.setClientCommandHandler(clientCommandHandler);\n        //v1.2\n        theClient.setClientObjectHandler(clientObjectHandler);\n        //v1.4\n        theClient.setClientBinaryHandler(clientBinaryHandler);\n        //v1.4.5\n        theClient.setClientWriteHandler(clientWriteHandler);\n        //v1.3\n        theClient.setAuthenticator(authenticator);\n        //v1.4.6\n        theClient.setClientAuthenticationHandler(clientAuthenticationHandler);\n        theClient.setTimeout(socketTimeout);\n        theClient.setMaxConnectionMsg(maxConnectionMsg);\n        //v1.3.2\n        theClient.setCommunicationLogging(getCommunicationLogging());\n        return theClient;\n    }\n\n    public void run() {\n        exceptionInRun = null;\n        TheClient theClient = initTheClient();\n        try {\n            stopServer = false;\n            closeAllPools();\n            initAllPools();\n            makeServerSocket();\n            //print banner\n            System.out.println(serverBanner);\n            //v1.2\n            setServiceState(Service.RUNNING);\n            //v1.3.3\n            processServerHooks(ServerHook.POST_STARTUP);\n            if (getBlockingMode() == false) {\n                runNonBlocking(theClient);\n                if (stopServer == true) {\n                    logger.log(Level.FINEST, \"Closing selector for {0}\", getName());\n                    selector.close();\n                }\n                return;\n            } else {\n                runBlocking(theClient);\n            }\n        } catch (BindException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"{0} BindException for Port {1} @ {2} : {3}\", new Object[] { getName(), getPort(), getBindAddr().getHostAddress(), e.getMessage() });\n        } catch (javax.net.ssl.SSLException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"SSLException {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (IOException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"IOError {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (Exception e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"Error {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } finally {\n            if (getBlockingMode() == true) {\n                logger.log(Level.WARNING, \"Closing {0}\", getName());\n                try {\n                    if (isClosed() == false) {\n                        server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            } else if (getBlockingMode() == false && exceptionInRun != null) {\n                logger.log(Level.WARNING, \"Closing {0} - Had Error: {1}\", new Object[] { getName(), exceptionInRun });\n                try {\n                    if (isClosed() == false) {\n                        if (serverSocketChannel != null)\n                            serverSocketChannel.close();\n                        if (server != null)\n                            server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n        }\n    }\n\n    //end of run\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnection = maxConnection;\n        else\n            this.maxConnection = maxConnection;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnection);\n    }\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection() {\n        return maxConnection;\n    }\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount() {\n        if (clientHandlerPool != null) {\n            try {\n                return getClientHandlerPool().getNumActive();\n            } catch (Exception e) {\n                return 0;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnectionMsg = maxConnectionMsg;\n        else\n            this.maxConnectionMsg = maxConnectionMsg;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnectionMsg);\n    }\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg() {\n        return maxConnectionMsg;\n    }\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException {\n        ipAddr = InetAddress.getByName(bindAddr);\n        logger.log(Level.FINEST, \"Set to {0}\", bindAddr);\n    }\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr() {\n        if (ipAddr == null) {\n            try {\n                ipAddr = InetAddress.getByName(\"0.0.0.0\");\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Unable to create default ip(0.0.0.0) : {0}\", e);\n                throw new RuntimeException(\"Error: Unable to find servers own ip : \" + e);\n            }\n        }\n        return ipAddr;\n    }\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects) {\n        this.storeObjects = storeObjects;\n    }\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects() {\n        return storeObjects;\n    }\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port) {\n        getQSAdminServer().getServer().setPort(port);\n    }\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort() {\n        return getQSAdminServer().getServer().getPort();\n    }\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator) {\n        getQSAdminServer().getServer().setClientAuthenticationHandler(authenticator);\n    }\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator() {\n        return getQSAdminServer().getServer().getAuthenticator();\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException {\n        getQSAdminServer().setClientAuthenticationHandler(authenticator);\n        getQSAdminServer().startServer(port);\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException {\n        getQSAdminServer().startServer();\n    }\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer() {\n        if (adminServer == null)\n            adminServer = new QSAdminServer(QuickServer.this);\n        return adminServer;\n    }\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer) {\n        if (adminServer == null)\n            this.adminServer = adminServer;\n    }\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed() {\n        if (server == null)\n            return true;\n        return server.isClosed();\n    }\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger() {\n        if (appLogger != null)\n            return appLogger;\n        return logger;\n    }\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger) {\n        this.appLogger = appLogger;\n    }\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler) {\n        clientObjectHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler() {\n        return clientObjectHandlerString;\n    }\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        if (formatter == null)\n            return;\n        consoleLoggingformatter = formatter;\n        java.util.logging.Formatter conformatter = (java.util.logging.Formatter) getClass(formatter, true).newInstance();\n        Logger jdkLogger = Logger.getLogger(\"\");\n        Handler[] handlers = jdkLogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                handlers[index].setFormatter(conformatter);\n            }\n        }\n        logger.log(Level.FINEST, \"Set to {0}\", formatter);\n    }\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter() {\n        return consoleLoggingformatter;\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MiniFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to logging.MiniFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MicroFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to MicroFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        boolean isConsole = true;\n        try {\n            if (System.console() == null) {\n                isConsole = false;\n            }\n        } catch (Throwable e) {\n            //ignore\n        }\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                if (isConsole == false && level != Level.OFF) {\n                    System.out.println(\"QuickServer: You do not have a console.. so turning console logger off..\");\n                    level = Level.OFF;\n                }\n                if (level == Level.OFF) {\n                    logger.info(\"QuickServer: Removing console handler.. \");\n                    rlogger.removeHandler(handlers[index]);\n                    handlers[index].setLevel(level);\n                    handlers[index].close();\n                } else {\n                    handlers[index].setLevel(level);\n                }\n            }\n        }\n        if (level == Level.SEVERE)\n            consoleLoggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            consoleLoggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            consoleLoggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            consoleLoggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            consoleLoggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            consoleLoggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            consoleLoggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            consoleLoggingLevel = \"OFF\";\n        else\n            consoleLoggingLevel = \"UNKNOWN\";\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel() {\n        return consoleLoggingLevel;\n    }\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            handlers[index].setLevel(level);\n        }\n        if (level == Level.SEVERE)\n            loggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            loggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            loggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            loggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            loggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            loggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            loggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            loggingLevel = \"OFF\";\n        else\n            loggingLevel = \"UNKNOWN\";\n        consoleLoggingLevel = loggingLevel;\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    //*** Start of Service interface methods\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError() {\n        return serviceError;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param) {\n        serviceError = null;\n        try {\n            initServer(param);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig) {\n        serviceError = null;\n        try {\n            initServer(qsConfig);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING)\n            return false;\n        try {\n            startServer();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService() {\n        serviceError = null;\n        if (getServiceState() == Service.STOPPED)\n            return false;\n        try {\n            stopServer();\n            clearAllPools();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING) {\n            suspendMaxConnection = maxConnection;\n            suspendMaxConnectionMsg = maxConnectionMsg;\n            maxConnection = 0;\n            maxConnectionMsg = \"Service is suspended.\";\n            setServiceState(Service.SUSPENDED);\n            logger.log(Level.INFO, \"Service {0} is suspended.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService() {\n        serviceError = null;\n        if (getServiceState() == Service.SUSPENDED) {\n            maxConnection = suspendMaxConnection;\n            maxConnectionMsg = suspendMaxConnectionMsg;\n            setServiceState(Service.RUNNING);\n            logger.log(Level.INFO, \"Service {0} resumed.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info() {\n        serviceError = null;\n        StringBuilder buf = new StringBuilder();\n        buf.append(getName()).append(\"\\n\");\n        buf.append(getBindAddr().getHostAddress()).append(\" \");\n        buf.append(getPort()).append(\"\\n\");\n        return buf.toString();\n    }\n\n    // *** End of Service interface methods\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException {\n        QuickServerConfig qsConfig = null;\n        try {\n            qsConfig = ConfigReader.read((String) param[0]);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not init server from xml file {0} : {1}\", new Object[] { new File((String) param[0]).getAbsolutePath(), e });\n            throw new AppException(\"Could not init server from xml file\", e);\n        }\n        initServer(qsConfig);\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException {\n        setConfig(qsConfig);\n        try {\n            configQuickServer();\n            loadApplicationClasses();\n            //start InitServerHooks\n            InitServerHooks ish = getConfig().getInitServerHooks();\n            if (ish != null) {\n                Iterator iterator = ish.iterator();\n                String initServerHookClassName = null;\n                Class initServerHookClass = null;\n                InitServerHook initServerHook = null;\n                while (iterator.hasNext()) {\n                    initServerHookClassName = (String) iterator.next();\n                    initServerHookClass = getClass(initServerHookClassName, true);\n                    initServerHook = (InitServerHook) initServerHookClass.newInstance();\n                    logger.log(Level.INFO, \"Loaded init server hook: {0}\", initServerHookClassName);\n                    logger.log(Level.FINE, \"Init server hook info: {0}\", initServerHook.info());\n                    initServerHook.handleInit(QuickServer.this);\n                }\n            }\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not load init server hook: {0}\", e);\n            logger.log(Level.WARNING, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Could not load init server hook\", e);\n        }\n        setServiceState(Service.INIT);\n        logger.log(Level.FINEST, \"\\r\\n{0}\", MyString.getSystemInfo(getVersion()));\n    }\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState() {\n        return serviceState;\n    }\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state) {\n        serviceState = state;\n    }\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp) {\n        if (temp.equals(\"SEVERE\"))\n            qs.setConsoleLoggingLevel(Level.SEVERE);\n        else if (temp.equals(\"WARNING\"))\n            qs.setConsoleLoggingLevel(Level.WARNING);\n        else if (temp.equals(\"INFO\"))\n            qs.setConsoleLoggingLevel(Level.INFO);\n        else if (temp.equals(\"CONFIG\"))\n            qs.setConsoleLoggingLevel(Level.CONFIG);\n        else if (temp.equals(\"FINE\"))\n            qs.setConsoleLoggingLevel(Level.FINE);\n        else if (temp.equals(\"FINER\"))\n            qs.setConsoleLoggingLevel(Level.FINER);\n        else if (temp.equals(\"FINEST\"))\n            qs.setConsoleLoggingLevel(Level.FINEST);\n        else if (temp.equals(\"OFF\"))\n            qs.setConsoleLoggingLevel(Level.OFF);\n        else\n            logger.log(Level.WARNING, \"unknown level {0}\", temp);\n    }\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception {\n        QuickServer qs = QuickServer.this;\n        //v1.3\n        qs.setConfig(config);\n        qs.setBasicConfig(config);\n        String temp = config.getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        temp = null;\n        qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        //v1.3.3\n        qs.setSecurityManagerClass(config.getSecurityManagerClass());\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        temp = config.getApplicationJarPath();\n        if (temp != null) {\n            File ajp = new File(temp);\n            if (ajp.isAbsolute() == false) {\n                temp = config.getConfigFile();\n                ajp = new File(temp);\n                temp = ajp.getParent() + File.separatorChar + config.getApplicationJarPath();\n                config.setApplicationJarPath(temp);\n                temp = null;\n            }\n            qs.setApplicationJarPath(config.getApplicationJarPath());\n            //set path also to QSAdmin\n            if (config.getQSAdminServerConfig() != null) {\n                getQSAdminServer().getServer().setApplicationJarPath(config.getApplicationJarPath());\n            }\n        }\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception {\n        QuickServer qs = getQSAdminServer().getServer();\n        qs.setBasicConfig(config);\n        //set the Logging Level to same as main QS\n        //config.getConsoleLoggingLevel();\n        String temp = getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        //set the Logging Formatter to same as main QS\n        //qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setConsoleLoggingFormatter(getConsoleLoggingFormatter());\n        //v1.4.6\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        //v1.4.6\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        getQSAdminServer().setCommandPlugin(config.getCommandPlugin());\n        //v1.3.2\n        if (config.getCommandShellEnable().equals(\"true\"))\n            getQSAdminServer().setShellEnable(true);\n        getQSAdminServer().setPromptName(config.getCommandShellPromptName());\n        //v1.3.3\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception {\n        configQuickServer(getConfig());\n        if (getConfig().getQSAdminServerConfig() != null) {\n            configQuickServer(getConfig().getQSAdminServerConfig());\n        }\n    }\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args) {\n        try {\n            if (args.length >= 1) {\n                if (args[0].equals(\"-about\")) {\n                    org.quickserver.net.server.gui.About.main(null);\n                } else if (args[0].equals(\"-load\") && args.length >= 2) {\n                    QuickServer qs = QuickServer.load(args[1]);\n                    if (qs != null)\n                        handleOptions(args, qs);\n                } else {\n                    System.out.println(printUsage());\n                }\n            } else {\n                System.out.println(printUsage());\n                org.quickserver.net.server.gui.About.showAbout();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException {\n        QuickServer qs = new QuickServer();\n        Object[] config = new Object[] { xml };\n        qs.initServer(config);\n        qs.startServer();\n        if (qs.getConfig().getQSAdminServerConfig() != null) {\n            qs.startQSAdminServer();\n        }\n        return qs;\n    }\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"QuickServer - Java library/framework for creating robust multi-client TCP servers.\\n\");\n        sb.append(\"Copyright (C) QuickServer.org\\n\\n\");\n        sb.append(\"Usage: QuickServer [-options]\\n\");\n        sb.append(\"Where options include:\\n\");\n        sb.append(\"  -about\\t\" + \"Opens About Dialog box\\n\");\n        sb.append(\"  -load <xml_config_file> [load-options]\\t\" + \"Loads the server from xml file.\\n\");\n        sb.append(\"  Where load-options include:\\n\");\n        sb.append(\"     -fullXML2File <file_name>\\t\" + \"Dumps the Full XML configuration of the QuickServer loaded.\\n\");\n        return sb.toString();\n    }\n\n    private static void handleOptions(String[] args, QuickServer quickserver) {\n        if (args.length < 3)\n            return;\n        if (args[2].equals(\"-fullXML2File\") && args.length >= 4) {\n            File file = new File(args[3]);\n            logger.log(Level.INFO, \"Writing full xml configuration to file: {0}\", file.getAbsolutePath());\n            try {\n                TextFile.write(file, quickserver.getConfig().toXML(null));\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error writing full xml configuration: {0}\", e);\n            }\n        }\n    }\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception {\n        try {\n            if (pool != null)\n                getClientPool().clear();\n            if (clientHandlerPool != null)\n                getClientHandlerPool().clear();\n            if (getClientDataPool() != null)\n                getClientDataPool().clear();\n            if (getDBPoolUtil() != null)\n                getDBPoolUtil().clean();\n            if (byteBufferPool != null)\n                getByteBufferPool().clear();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error: {0}\", e);\n            throw e;\n        }\n    }\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception {\n        if (pool == null && clientHandlerPool == null && getClientDataPool() == null && getDBPoolUtil() == null && byteBufferPool == null) {\n            return;\n        }\n        logger.log(Level.FINE, \"Closing pools for {0}\", getName());\n        try {\n            if (pool != null && PoolHelper.isPoolOpen(getClientPool().getObjectPool())) {\n                logger.finer(\"Closing ClientThread pool.\");\n                getClientPool().close();\n            }\n            if (clientHandlerPool != null && PoolHelper.isPoolOpen(getClientHandlerPool())) {\n                logger.finer(\"Closing ClientHandler pool.\");\n                getClientHandlerPool().close();\n            }\n            if (getClientDataPool() != null && PoolHelper.isPoolOpen(getClientDataPool())) {\n                logger.finer(\"Closing ClientData pool.\");\n                getClientDataPool().close();\n            }\n            if (getDBPoolUtil() != null) {\n                logger.finer(\"Closing DB pool.\");\n                getDBPoolUtil().clean();\n            }\n            if (byteBufferPool != null && PoolHelper.isPoolOpen(getByteBufferPool())) {\n                logger.finer(\"Closing ByteBuffer pool.\");\n                getByteBufferPool().close();\n            }\n            logger.log(Level.FINE, \"Closed pools for {0}\", getName());\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error closing pools for {0}: {1}\", new Object[] { getName(), e });\n            throw e;\n        }\n    }\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception {\n        logger.fine(\"Creating pools\");\n        if (getBlockingMode() == false) {\n            makeByteBufferPool(getBasicConfig().getObjectPoolConfig().getByteBufferObjectPoolConfig());\n        }\n        makeClientPool(getBasicConfig().getObjectPoolConfig().getThreadObjectPoolConfig());\n        makeClientHandlerPool(getBasicConfig().getObjectPoolConfig().getClientHandlerObjectPoolConfig());\n        //check if client data is poolable\n        if (clientDataClass != null) {\n            try {\n                clientData = (ClientData) clientDataClass.newInstance();\n                if (PoolableObject.class.isInstance(clientData) == true) {\n                    PoolableObject po = (PoolableObject) clientData;\n                    if (po.isPoolable() == true) {\n                        makeClientDataPool(po.getPoolableObjectFactory(), getBasicConfig().getObjectPoolConfig().getClientDataObjectPoolConfig());\n                    } else {\n                        clientDataPool = null;\n                        logger.fine(\"ClientData is not poolable!\");\n                    }\n                }\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error: {0}\", e);\n                throw e;\n            }\n        }\n        try {\n            makeDBObjectPool();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error in makeDBObjectPool() : {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw e;\n        }\n        logger.fine(\"Created pools\");\n    }\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool() {\n        if (pool == null)\n            throw new IllegalStateException(\"No ClientPool available yet!\");\n        return pool;\n    }\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientHandler pool\");\n        PoolableObjectFactory factory = new ClientHandlerObjectFactory(getBlockingMode());\n        clientHandlerPool = poolManager.makeClientHandlerPool(factory, opConfig);\n        poolManager.initPool(clientHandlerPool, opConfig);\n        clientHandlerPool = makeQSObjectPool(clientHandlerPool);\n        clientIdentifier.setClientHandlerPool((QSObjectPool) clientHandlerPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool() {\n        if (clientHandlerPool == null)\n            throw new IllegalStateException(\"No ClientHandler Pool available yet!\");\n        return clientHandlerPool;\n    }\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config) {\n        this.config = config;\n    }\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig() {\n        return config;\n    }\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientData pool\");\n        clientDataPool = poolManager.makeClientDataPool(factory, opConfig);\n        poolManager.initPool(clientDataPool, opConfig);\n        clientDataPool = makeQSObjectPool(clientDataPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool() {\n        return clientDataPool;\n    }\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil() {\n        return dBPoolUtil;\n    }\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig) {\n        getConfig().setDBObjectPoolConfig(dBObjectPoolConfig);\n    }\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception {\n        if (getConfig().getDBObjectPoolConfig() != null) {\n            logger.fine(\"Creating DBObject Pool\");\n            //logger.finest(\"Got:\\n\"+getConfig().getDBObjectPoolConfig().toXML(null));\n            Class dbPoolUtilClass = getClass(getConfig().getDBObjectPoolConfig().getDbPoolUtil(), true);\n            dBPoolUtil = (DBPoolUtil) dbPoolUtilClass.newInstance();\n            dBPoolUtil.setDatabaseConnections(getConfig().getDBObjectPoolConfig().getDatabaseConnectionSet().iterator());\n            dBPoolUtil.initPool();\n        }\n    }\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id) {\n        return clientIdentifier.findFirstClientById(id);\n    }\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient() {\n        return clientIdentifier.findAllClient();\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern) {\n        return clientIdentifier.findAllClientById(pattern);\n    }\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key) {\n        return clientIdentifier.findClientByKey(key);\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern) {\n        return clientIdentifier.findAllClientByKey(pattern);\n    }\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted() {\n        setSkipValidation(true);\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation() {\n        return skipValidation;\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation) {\n        skipValidation = validation;\n    }\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging) {\n        this.communicationLogging = communicationLogging;\n    }\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging() {\n        return communicationLogging;\n    }\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass) {\n        if (securityManagerClass != null)\n            this.securityManagerClass = securityManagerClass;\n    }\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass() {\n        return securityManagerClass;\n    }\n\n    public SecurityManager getSecurityManager() throws AppException {\n        if (getSecurityManagerClass() == null)\n            return null;\n        SecurityManager sm = null;\n        try {\n            sm = (SecurityManager) getClass(getSecurityManagerClass(), true).newInstance();\n        } catch (ClassNotFoundException e) {\n            throw new AppException(e.getMessage());\n        } catch (InstantiationException e) {\n            throw new AppException(e.getMessage());\n        } catch (IllegalAccessException e) {\n            throw new AppException(e.getMessage());\n        }\n        return sm;\n    }\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig) {\n        this.accessConstraintConfig = accessConstraintConfig;\n    }\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig() {\n        return accessConstraintConfig;\n    }\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader) {\n        this.classLoader = classLoader;\n        Thread.currentThread().setContextClassLoader(classLoader);\n    }\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader() {\n        return classLoader;\n    }\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException {\n        if (name == null)\n            throw new IllegalArgumentException(\"Class name can't be null!\");\n        logger.log(Level.FINEST, \"Class: {0}, reload: {1}\", new Object[] { name, reload });\n        if (reload == true && classLoader != null) {\n            return classLoader.loadClass(name);\n        } else if (reload == true && classLoader == null && this.getClass().getClassLoader() != null) {\n            return this.getClass().getClassLoader().loadClass(name);\n        } else if (reload == false && classLoader != null) {\n            return Class.forName(name, true, classLoader);\n        } else /*if(reload==false && classLoader==null)*/\n        {\n            return Class.forName(name, true, this.getClass().getClassLoader());\n        }\n    }\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath) {\n        this.applicationJarPath = applicationJarPath;\n    }\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath() {\n        return applicationJarPath;\n    }\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks) {\n        this.serverHooks = serverHooks;\n    }\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks() {\n        if (serverHooks == null)\n            serverHooks = new ServerHooks();\n        return serverHooks;\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses() {\n        if (getServerHooks() == null)\n            return;\n        listOfServerHooks = new ArrayList();\n        ServerHook serverHook = null;\n        String serverHookClassName = null;\n        Class serverHookClass = null;\n        //add system hooks\n        serverHook = new GhostSocketReaper();\n        serverHook.initHook(QuickServer.this);\n        listOfServerHooks.add(serverHook);\n        ghostSocketReaper = (GhostSocketReaper) serverHook;\n        //add user hooks if any\n        Iterator iterator = getServerHooks().iterator();\n        while (iterator.hasNext()) {\n            serverHookClassName = (String) iterator.next();\n            try {\n                serverHookClass = getClass(serverHookClassName, true);\n                serverHook = (ServerHook) serverHookClass.newInstance();\n                serverHook.initHook(QuickServer.this);\n                listOfServerHooks.add(serverHook);\n                logger.log(Level.INFO, \"Loaded server hook: {0}\", serverHookClassName);\n                logger.log(Level.FINE, \"Server hook info: {0}\", serverHook.info());\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Could not load server hook [{0}]: {1}\", new Object[] { serverHookClassName, e });\n                logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            }\n        }\n        //end of while\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event) {\n        if (listOfServerHooks == null) {\n            logger.warning(\"listOfServerHooks was null!\");\n            return;\n        }\n        ServerHook serverHook = null;\n        boolean result = false;\n        Iterator iterator = listOfServerHooks.iterator();\n        String hooktype = \"UNKNOWN\";\n        switch(event) {\n            case ServerHook.PRE_STARTUP:\n                hooktype = \"PRE_STARTUP\";\n                break;\n            case ServerHook.POST_STARTUP:\n                hooktype = \"POST_STARTUP\";\n                break;\n            case ServerHook.PRE_SHUTDOWN:\n                hooktype = \"PRE_SHUTDOWN\";\n                break;\n            case ServerHook.POST_SHUTDOWN:\n                hooktype = \"POST_SHUTDOWN\";\n                break;\n        }\n        while (iterator.hasNext()) {\n            serverHook = (ServerHook) iterator.next();\n            try {\n                result = serverHook.handleEvent(event);\n            } catch (Exception e) {\n                result = false;\n                logger.log(Level.WARNING, \"Error invoking {0} hook [{1}]: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), e.getMessage() });\n            }\n            logger.log(Level.FINE, \"Invoked {0} hook [{1}] was: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), result });\n        }\n    }\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone() {\n        Object object = null;\n        try {\n            object = super.clone();\n            QuickServer _qs = (QuickServer) object;\n            _qs.setQSAdminServer(new QSAdminServer(_qs));\n        } catch (CloneNotSupportedException e) {\n            //should not happ\n            logger.log(Level.WARNING, \"Error cloning : {0}\", e);\n        }\n        return object;\n    }\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure) {\n        this.secure = secure;\n    }\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure() {\n        if (secure == null)\n            secure = new Secure();\n        return secure;\n    }\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure() {\n        return runningSecure;\n    }\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure) {\n        this.runningSecure = runningSecure;\n    }\n\n    private File makeAbsoluteToConfig(String fileName) {\n        Assertion.affirm(fileName != null, \"FileName can't be null\");\n        return ConfigReader.makeAbsoluteToConfig(fileName, getConfig());\n    }\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException {\n        server = null;\n        logger.log(Level.FINEST, \"Binding {0} to IP: {1}\", new Object[] { getName(), getBindAddr() });\n        InetSocketAddress bindAddress = new InetSocketAddress(getBindAddr(), getPort());\n        try {\n            NetworkInterface ni = NetworkInterface.getByInetAddress(getBindAddr());\n            if (ni != null) {\n                logger.fine(\"NetworkInterface: \" + ni);\n            }\n        } catch (Exception igrnore) {\n            /*ignore*/\n        } catch (Error igrnore) {\n            /*ignore*/\n        }\n        if (getSecure().isEnable() == false) {\n            logger.log(Level.FINE, \"Making a normal ServerSocket for {0}\", getName());\n            setRunningSecure(false);\n            if (getBlockingMode() == false) {\n                //for non-blocking\n                serverSocketChannel = ServerSocketChannel.open();\n                server = serverSocketChannel.socket();\n                server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n            } else {\n                //for blocking\n                server = new ServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n            }\n        } else {\n            try {\n                logger.log(Level.FINE, \"Making a secure ServerSocket for {0}\", getName());\n                getSSLContext();\n                setRunningSecure(true);\n                if (getBlockingMode() == false) {\n                    logger.log(Level.FINE, \"Making a secure ServerSocketChannel for {0}\", getName());\n                    //for non-blocking\n                    serverSocketChannel = ServerSocketChannel.open();\n                    server = serverSocketChannel.socket();\n                    server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n                } else {\n                    ServerSocketFactory ssf = getSSLContext().getServerSocketFactory();\n                    SSLServerSocket serversocket = (SSLServerSocket) ssf.createServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n                    serversocket.setNeedClientAuth(secure.isClientAuthEnable());\n                    setRunningSecure(true);\n                    secureStoreManager.logSSLServerSocketInfo(serversocket);\n                    server = serversocket;\n                    serverSocketChannel = server.getChannel();\n                    if (serverSocketChannel == null && getBlockingMode() == false) {\n                        logger.warning(\"Secure Server does not support Channel! So will run in blocking mode.\");\n                        blockingMode = false;\n                    }\n                }\n                //blocking\n            } catch (NoSuchAlgorithmException e) {\n                logger.log(Level.WARNING, \"NoSuchAlgorithmException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            } catch (KeyManagementException e) {\n                logger.log(Level.WARNING, \"KeyManagementException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            }\n        }\n        server.setReuseAddress(true);\n        int connectionTime = 0;\n        int latency = 0;\n        int bandwidth = 0;\n        connectionTime = getBasicConfig().getAdvancedSettings().getPerformancePreferencesConnectionTime();\n        latency = getBasicConfig().getAdvancedSettings().getPerformancePreferencesLatency();\n        bandwidth = getBasicConfig().getAdvancedSettings().getPerformancePreferencesBandwidth();\n        logger.log(Level.FINE, \"getPerformancePreferencesConnectionTime : {0}\", connectionTime);\n        logger.log(Level.FINE, \"getPerformancePreferencesLatency : {0}\", latency);\n        logger.log(Level.FINE, \"getPerformancePreferencesBandwidth : {0}\", bandwidth);\n        server.setPerformancePreferences(connectionTime, latency, bandwidth);\n        int clientSocketReceiveBufferSize = getBasicConfig().getAdvancedSettings().getClientSocketReceiveBufferSize();\n        if (clientSocketReceiveBufferSize > 0) {\n            logger.log(Level.FINE, \"clientSocketReceiveBufferSize: {0}\", clientSocketReceiveBufferSize);\n            server.setReceiveBufferSize(clientSocketReceiveBufferSize);\n        }\n        if (getBlockingMode() == false) {\n            logger.log(Level.FINE, \"Server Mode {0} - Non Blocking\", getName());\n            if (selector == null || selector.isOpen() == false) {\n                logger.finest(\"Opening new selector\");\n                selector = Selector.open();\n            } else {\n                logger.log(Level.FINEST, \"Reusing selector: {0}\", selector);\n            }\n            serverSocketChannel.configureBlocking(false);\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n            selector.wakeup();\n        } else {\n            logger.log(Level.FINE, \"Server Mode {0} - Blocking\", getName());\n        }\n    }\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception {\n        Assertion.affirm(basicConfig != null, \"BasicServerConfig can't be null\");\n        this.basicConfig = basicConfig;\n    }\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig() {\n        return basicConfig;\n    }\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException {\n        if (getSecure().isLoad() == false) {\n            throw new IllegalStateException(\"Secure setting is not yet enabled for loading!\");\n        }\n        logger.info(\"Loading Secure Context..\");\n        km = null;\n        tm = null;\n        try {\n            String ssManager = \"org.quickserver.security.SecureStoreManager\";\n            if (getSecure().getSecureStore() != null)\n                ssManager = getSecure().getSecureStore().getSecureStoreManager();\n            Class secureStoreManagerClass = getClass(ssManager, true);\n            secureStoreManager = (SecureStoreManager) secureStoreManagerClass.newInstance();\n            km = secureStoreManager.loadKeyManagers(getConfig());\n            logger.fine(\"KeyManager got\");\n            tm = secureStoreManager.loadTrustManagers(getConfig());\n            logger.fine(\"TrustManager got\");\n            sslc = secureStoreManager.getSSLContext(getConfig().getSecure().getProtocol());\n            sslc.init(km, tm, null);\n            logger.fine(\"SSLContext loaded\");\n        } catch (KeyStoreException e) {\n            logger.warning(\"KeyStoreException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchAlgorithmException e) {\n            logger.warning(\"NoSuchAlgorithmException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchProviderException e) {\n            logger.warning(\"NoSuchProviderException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (UnrecoverableKeyException e) {\n            logger.warning(\"UnrecoverableKeyException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (CertificateException e) {\n            logger.warning(\"CertificateException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (KeyManagementException e) {\n            logger.warning(\"KeyManagementException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (GeneralSecurityException e) {\n            logger.warning(\"GeneralSecurityException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (ClassNotFoundException e) {\n            logger.warning(\"ClassNotFoundException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (InstantiationException e) {\n            logger.warning(\"InstantiationException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (IllegalAccessException e) {\n            logger.warning(\"IllegalAccessException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        return getSSLContext(null);\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        if (protocol != null && secureStoreManager != null) {\n            SSLContext _sslc = secureStoreManager.getSSLContext(protocol);\n            _sslc.init(km, tm, null);\n            return _sslc;\n        }\n        return sslc;\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext());\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext(protocol));\n    }\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler) {\n        clientBinaryHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler() {\n        return clientBinaryHandlerString;\n    }\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector) {\n        this.selector = selector;\n    }\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector() {\n        return selector;\n    }\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception {\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        //long stime = System.currentTimeMillis();\n        //long etime = System.currentTimeMillis();\n        while (true) {\n            //etime = System.currentTimeMillis();\n            //System.out.println(\"Time Taken: \"+(etime-stime));\n            client = server.accept();\n            //stime = System.currentTimeMillis();\n            if (linger < 0) {\n                client.setSoLinger(false, 0);\n            } else {\n                client.setSoLinger(true, linger);\n            }\n            client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                //low delay=10\n                client.setTrafficClass(socketTrafficClass);\n            }\n            logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n            }\n            if (stopServer) {\n                //Client connected when server was about to be shutdown.\n                try {\n                    client.close();\n                } catch (Exception e) {\n                }\n                break;\n            }\n            if (checkAccessConstraint(client) == false) {\n                continue;\n            }\n            //Check if max connection has reached\n            if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                theClient.setClientEvent(ClientEvent.MAX_CON_BLOCKING);\n            } else {\n                theClient.setClientEvent(ClientEvent.RUN_BLOCKING);\n            }\n            theClient.setTrusted(getSkipValidation());\n            theClient.setSocket(client);\n            //mostly null\n            theClient.setSocketChannel(client.getChannel());\n            if (clientDataClass != null) {\n                if (getClientDataPool() == null) {\n                    clientData = (ClientData) clientDataClass.newInstance();\n                } else {\n                    clientData = (ClientData) getClientDataPool().borrowObject();\n                }\n                theClient.setClientData(clientData);\n            }\n            try {\n                _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                _chPolled.handleClient(theClient);\n            } catch (java.util.NoSuchElementException nsee) {\n                logger.warning(\"Could not borrow ClientHandler from pool. Error: \" + nsee);\n                logger.warning(\"Closing Socket [\" + client + \"] since no ClientHandler available.\");\n                client.close();\n            }\n            if (_chPolled != null) {\n                try {\n                    getClientPool().addClient(_chPolled, true);\n                } catch (java.util.NoSuchElementException nsee) {\n                    logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                    //logger.warning(\"Closing Socket [\"+client+\"] since no Thread available.\");\n                    //client.close();\n                    //returnClientHandlerToPool(_chPolled);\n                }\n                _chPolled = null;\n            }\n            client = null;\n            //reset it back\n            setSkipValidation(false);\n        }\n        //end of loop\n    }\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception {\n        int selectCount = 0;\n        Iterator iterator = null;\n        SelectionKey key = null;\n        ServerSocketChannel serverChannel = null;\n        SocketChannel socketChannel = null;\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        boolean stopServerProcessed = false;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        registerChannelRequestMap = new HashMap();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        while (true) {\n            selectCount = selector.select(500);\n            //selectCount = selector.select();//for testing\n            //check for any pending registerChannel req.\n            synchronized (registerChannelRequestMap) {\n                if (registerChannelRequestMap.size() > 0) {\n                    RegisterChannelRequest req = null;\n                    Object hashkey = null;\n                    iterator = registerChannelRequestMap.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        hashkey = iterator.next();\n                        req = (RegisterChannelRequest) registerChannelRequestMap.get(hashkey);\n                        req.register(getSelector());\n                    }\n                    iterator = null;\n                    registerChannelRequestMap.clear();\n                }\n                //if\n            }\n            //sync\n            if (stopServer == true && stopServerProcessed == false) {\n                logger.warning(\"Closing \" + getName());\n                serverSocketChannel.close();\n                stopServerProcessed = true;\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.warning(\"Closed \" + getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n            if (stopServer == false && stopServerProcessed == true) {\n                logger.finest(\"Server must have re-started.. will break\");\n                break;\n            }\n            if (selectCount == 0 && stopServerProcessed == true) {\n                java.util.Set keyset = selector.keys();\n                if (keyset.isEmpty() == true && getClientCount() <= 0) {\n                    break;\n                } else {\n                    continue;\n                }\n            } else if (selectCount == 0) {\n                continue;\n            }\n            iterator = selector.selectedKeys().iterator();\n            while (iterator.hasNext()) {\n                key = (SelectionKey) iterator.next();\n                if (key.isValid() == false) {\n                    iterator.remove();\n                    continue;\n                }\n                if (key.isAcceptable() && stopServer == false) {\n                    logger.finest(\"Key is Acceptable\");\n                    serverChannel = (ServerSocketChannel) key.channel();\n                    socketChannel = serverChannel.accept();\n                    if (socketChannel == null) {\n                        iterator.remove();\n                        continue;\n                    }\n                    client = socketChannel.socket();\n                    if (linger < 0) {\n                        client.setSoLinger(false, 0);\n                    } else {\n                        client.setSoLinger(true, linger);\n                    }\n                    client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                        //low delay=10\n                        client.setTrafficClass(socketTrafficClass);\n                    }\n                    logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                        client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                        logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n                    }\n                    if (checkAccessConstraint(client) == false) {\n                        iterator.remove();\n                        continue;\n                    }\n                    socketChannel.configureBlocking(false);\n                    theClient.setTrusted(getSkipValidation());\n                    theClient.setSocket(socketChannel.socket());\n                    theClient.setSocketChannel(socketChannel);\n                    if (clientDataClass != null) {\n                        if (getClientDataPool() == null) {\n                            clientData = (ClientData) clientDataClass.newInstance();\n                        } else {\n                            //borrow a object from pool\n                            clientData = (ClientData) getClientDataPool().borrowObject();\n                        }\n                        theClient.setClientData(clientData);\n                    }\n                    //Check if max connection has reached\n                    if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                        theClient.setClientEvent(ClientEvent.MAX_CON);\n                    } else {\n                        theClient.setClientEvent(ClientEvent.ACCEPT);\n                    }\n                    try {\n                        _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                        logger.finest(\"Asking \" + _chPolled.getName() + \" to handle.\");\n                        _chPolled.handleClient(theClient);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.warning(\"Could not borrow ClientHandler Object from pool. Error: \" + nsee);\n                        logger.warning(\"Closing SocketChannel [\" + serverChannel.socket() + \"] since no ClientHandler available.\");\n                        socketChannel.close();\n                    }\n                    if (_chPolled != null) {\n                        try {\n                            getClientPool().addClient(_chPolled, true);\n                        } catch (java.util.NoSuchElementException nsee) {\n                            logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                            //logger.warning(\"Closing SocketChannel [\"+serverChannel.socket()+\"] since no Thread available.\");\n                            //socketChannel.close();\n                            //returnClientHandlerToPool(_chPolled);\n                        }\n                        _chPolled = null;\n                    }\n                    socketChannel = null;\n                    client = null;\n                    //reset it back\n                    setSkipValidation(false);\n                } else if (key.isValid() && key.isReadable()) {\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Readable, removing OP_READ from interestOps for \" + _ch.getName());\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_READ));\n                        _ch.addEvent(ClientEvent.READ);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.READ);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (key.isValid() && key.isWritable()) {\n                    if (getClientPool().shouldNioWriteHappen() == false) {\n                        //no need to remove the key\n                        continue;\n                    }\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Writable, removing OP_WRITE from interestOps for \" + _ch.getName());\n                        //remove OP_WRITE from interest set\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));\n                        _ch.addEvent(ClientEvent.WRITE);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.WRITE);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (stopServer == true && key.isAcceptable()) {\n                    //we will not accept this key\n                    //reset it back\n                    setSkipValidation(false);\n                } else {\n                    logger.warning(\"Unknown key got in SelectionKey: \" + key);\n                }\n                //Remove key\n                iterator.remove();\n                Thread.yield();\n            }\n            //end of iterator\n            iterator = null;\n        }\n        //end of loop\n    }\n\n    private boolean checkAccessConstraint(Socket socket) {\n        try {\n            if (getAccessConstraintConfig() != null) {\n                getAccessConstraintConfig().checkAccept(socket);\n            }\n            return true;\n        } catch (SecurityException se) {\n            logger.warning(\"SecurityException occurred accepting connection : \" + se.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException {\n        if (getSelector() == null) {\n            throw new IllegalStateException(\"Selector is not open!\");\n        }\n        if (channel == null) {\n            throw new IllegalArgumentException(\"Can't register a null channel!\");\n        }\n        if (channel.isConnected() == false) {\n            throw new ClosedChannelException();\n        }\n        RegisterChannelRequest req = new RegisterChannelRequest(channel, ops, att);\n        RegisterChannelRequest reqOld = null;\n        synchronized (registerChannelRequestMap) {\n            reqOld = (RegisterChannelRequest) registerChannelRequestMap.get(channel);\n            if (reqOld == null) {\n                registerChannelRequestMap.put(channel, req);\n                getSelector().wakeup();\n                return true;\n            } else {\n                if (reqOld.equals(req) == false) {\n                    reqOld.setOps(reqOld.getOps() | req.getOps());\n                    reqOld.setAtt(req.getAtt());\n                    return true;\n                }\n                return false;\n            }\n        }\n        /*\n\t\tlogger.warning(\"Before register...\");\n\t\tchannel.register(getSelector(), ops, att);\n\t\tlogger.warning(\"Before wakeup and after register...\");\n\t\tgetSelector().wakeup();\n\t\tlogger.warning(\"After wakeup...\");\n\t\t*/\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig) {\n        logger.finer(\"Creating ByteBufferPool pool\");\n        int bufferSize = getBasicConfig().getAdvancedSettings().getByteBufferSize();\n        boolean useDirectByteBuffer = getBasicConfig().getAdvancedSettings().getUseDirectByteBuffer();\n        PoolableObjectFactory factory = new ByteBufferObjectFactory(bufferSize, useDirectByteBuffer);\n        byteBufferPool = poolManager.makeByteBufferPool(factory, opConfig);\n        poolManager.initPool(byteBufferPool, opConfig);\n    }\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool() {\n        return byteBufferPool;\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientThread pool\");\n        ThreadObjectFactory factory = new ThreadObjectFactory();\n        ObjectPool objectPool = poolManager.makeClientPool(factory, opConfig);\n        pool = new ClientPool(makeQSObjectPool(objectPool), opConfig);\n        factory.setClientPool(pool);\n        pool.setMaxThreadsForNioWrite(getBasicConfig().getAdvancedSettings().getMaxThreadsForNioWrite());\n        poolManager.initPool(objectPool, opConfig);\n    }\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler) {\n        clientWriteHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler() {\n        return clientWriteHandlerString;\n    }\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime() {\n        return lastStartTime;\n    }\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag) {\n        org.quickserver.util.io.ByteBufferOutputStream.setDebug(flag);\n        org.quickserver.util.io.ByteBufferInputStream.setDebug(flag);\n    }\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier() {\n        return clientIdentifier;\n    }\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception {\n        return (QSObjectPool) qsObjectPoolMaker.getQSObjectPool(objectPool);\n    }\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode() {\n        return blockingMode;\n    }\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception {\n        if (clientCommandHandlerString == null && clientEventHandlerString == null) {\n            logger.severe(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n            throw new AppException(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n        }\n        clientCommandHandler = null;\n        if (clientCommandHandlerString != null) {\n            logger.finest(\"Loading ClientCommandHandler class..\");\n            Class clientCommandHandlerClass = getClass(clientCommandHandlerString, true);\n            clientCommandHandler = (ClientCommandHandler) clientCommandHandlerClass.newInstance();\n        }\n        boolean setClientCommandHandlerLookup = false;\n        clientEventHandler = null;\n        if (clientEventHandlerString == null) {\n            clientEventHandlerString = \"org.quickserver.net.server.impl.DefaultClientEventHandler\";\n            setClientCommandHandlerLookup = true;\n        }\n        logger.finest(\"Loading ClientEventHandler class..\");\n        if (clientEventHandlerString.equals(clientCommandHandlerString) && ClientEventHandler.class.isInstance(clientCommandHandler)) {\n            clientEventHandler = (ClientEventHandler) clientCommandHandler;\n        } else {\n            clientEventHandler = (ClientEventHandler) getClass(clientEventHandlerString, true).newInstance();\n            if (setClientCommandHandlerLookup) {\n                ((DefaultClientEventHandler) clientEventHandler).setClientCommandHandler(clientCommandHandler);\n            }\n        }\n        clientExtendedEventHandler = null;\n        if (clientExtendedEventHandlerString != null) {\n            logger.finest(\"Loading ClientExtendedEventHandler class..\");\n            if (clientExtendedEventHandlerString.equals(clientCommandHandlerString) && ClientExtendedEventHandler.class.isInstance(clientCommandHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientCommandHandler;\n            } else if (clientExtendedEventHandlerString.equals(clientEventHandlerString) && ClientExtendedEventHandler.class.isInstance(clientEventHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientEventHandler;\n            } else {\n                Class clientExtendedEventHandlerClass = getClass(clientExtendedEventHandlerString, true);\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientExtendedEventHandlerClass.newInstance();\n            }\n        }\n        clientObjectHandler = null;\n        if (clientObjectHandlerString != null) {\n            logger.finest(\"Loading ClientObjectHandler class..\");\n            if (clientObjectHandlerString.equals(clientCommandHandlerString) && ClientObjectHandler.class.isInstance(clientCommandHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientCommandHandler;\n            } else if (clientObjectHandlerString.equals(clientEventHandlerString) && ClientObjectHandler.class.isInstance(clientEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientEventHandler;\n            } else if (clientObjectHandlerString.equals(clientExtendedEventHandlerString) && ClientObjectHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientExtendedEventHandler;\n            } else {\n                clientObjectHandler = (ClientObjectHandler) getClass(clientObjectHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientBinaryHandler = null;\n        if (clientBinaryHandlerString != null) {\n            logger.finest(\"Loading ClientBinaryHandler class..\");\n            if (clientBinaryHandlerString.equals(clientCommandHandlerString) && ClientBinaryHandler.class.isInstance(clientCommandHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientCommandHandler;\n            } else if (clientBinaryHandlerString.equals(clientEventHandlerString) && ClientBinaryHandler.class.isInstance(clientEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientExtendedEventHandlerString) && ClientBinaryHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientExtendedEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientObjectHandlerString) && ClientBinaryHandler.class.isInstance(clientObjectHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientObjectHandler;\n            } else {\n                clientBinaryHandler = (ClientBinaryHandler) getClass(clientBinaryHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientWriteHandler = null;\n        if (clientWriteHandlerString != null) {\n            logger.finest(\"Loading ClientWriteHandler class..\");\n            if (clientWriteHandlerString.equals(clientCommandHandlerString) && ClientWriteHandler.class.isInstance(clientCommandHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientCommandHandler;\n            } else if (clientWriteHandlerString.equals(clientEventHandlerString) && ClientWriteHandler.class.isInstance(clientEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientEventHandler;\n            } else if (clientWriteHandlerString.equals(clientExtendedEventHandlerString) && ClientWriteHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientExtendedEventHandler;\n            } else if (clientWriteHandlerString.equals(clientObjectHandlerString) && ClientWriteHandler.class.isInstance(clientObjectHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientObjectHandler;\n            } else if (clientWriteHandlerString.equals(clientBinaryHandlerString) && ClientWriteHandler.class.isInstance(clientBinaryHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientBinaryHandler;\n            } else {\n                clientWriteHandler = (ClientWriteHandler) getClass(clientWriteHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        Class authenticatorClass = null;\n        if (clientAuthenticationHandlerString != null) {\n            logger.finest(\"Loading ClientAuthenticationHandler class..\");\n            authenticatorClass = getClass(clientAuthenticationHandlerString, true);\n        }\n        if (authenticatorClass != null) {\n            Object obj = authenticatorClass.newInstance();\n            if (ClientAuthenticationHandler.class.isInstance(obj))\n                clientAuthenticationHandler = (ClientAuthenticationHandler) obj;\n            else\n                authenticator = (Authenticator) obj;\n        }\n        clientDataClass = null;\n        if (clientDataString != null) {\n            logger.finest(\"Loading ClientData class..\");\n            clientDataClass = getClass(clientDataString, true);\n        }\n        Assertion.affirm(clientEventHandler != null, \"ClientEventHandler was not loaded!\");\n    }\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler) {\n        clientEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler() {\n        return clientEventHandlerString;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException {\n        if (dataType == DataType.IN)\n            this.defaultDataModeIN = dataMode;\n        if (dataType == DataType.OUT)\n            this.defaultDataModeOUT = dataMode;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException {\n        defaultDataModeIN = defaultDataMode.getDataMode(DataType.IN);\n        defaultDataModeOUT = defaultDataMode.getDataMode(DataType.OUT);\n        ;\n    }\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType) {\n        if (dataType == DataType.IN)\n            return defaultDataModeIN;\n        if (dataType == DataType.OUT)\n            return defaultDataModeOUT;\n        else\n            throw new IllegalArgumentException(\"Unknown DataType: \" + dataType);\n    }\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler) {\n        clientExtendedEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler() {\n        return clientExtendedEventHandlerString;\n    }\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception {\n        if (getApplicationJarPath() != null && getClassLoader() == null) {\n            setClassLoader(ClassUtil.getClassLoader(getApplicationJarPath()));\n            //update qsadmin to use the same\n            if (adminServer != null) {\n                adminServer.getServer().setClassLoader(getClassLoader());\n            }\n        }\n    }\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID() {\n        return pid;\n    }\n\n    public boolean isRawCommunicationLogging() {\n        return rawCommunicationLogging;\n    }\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging) {\n        this.rawCommunicationLogging = rawCommunicationLogging;\n    }\n\n    public int getRawCommunicationMaxLength() {\n        return rawCommunicationMaxLength;\n    }\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength) {\n        this.rawCommunicationMaxLength = rawCommunicationMaxLength;\n    }\n}\n",
        "test_prompt": "// QuickServer_13Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#findAllClient()} method.\n*/\nclass QuickServer_13Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// QuickServer_18Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#getSSLContext(String)} method.\n*/\nclass QuickServer_18Test {\n}"
            }
        ],
        "id": "80f61097-8ee7-4717-a810-e7612af89fbd",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_18Test.java",
        "original_code": "// QuickServer.java\n/*\n * This file is part of the QuickServer library \n * Copyright (C) QuickServer.org\n *\n * Use, modification, copying and distribution of this software is subject to\n * the terms and conditions of the GNU Lesser General Public License. \n * You should have received a copy of the GNU LGP License along with this \n * library; if not, you can download a copy from <http://www.quickserver.org/>.\n *\n * For questions, suggestions, bug-reports, enhancement-requests etc.\n * visit http://www.quickserver.org\n *\n */\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n *  Main class of QuickServer library. This class is used to create\n *  multi client servers quickly.\n *  <p>\n *  Ones a client is connected, it creates {@link ClientHandler} object,\n *  which is run using any thread available from the pool of threads\n *  maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n *  handles the client. <br/>\n *  QuickServer divides the application logic of its developer over eight\n *  class, <br>\n *  \t<ul>\n * \t\t<li>ClientEventHandler<br>\n *  \t\t   &nbsp;Handles client events [Optional Class].\n *  \t\t<li>ClientCommandHandler [#]<br>\n *  \t\t   &nbsp;Handles client character/string commands.\n *  \t\t<li>ClientObjectHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - Object commands.\n * \t\t<li>ClientBinaryHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - binary data.\n * \t\t<li>ClientWriteHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n *  \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n *  \t\t\t&nbsp;Used to Authencatet a client.\n *  \t\t<li>ClientData [Optional Class]<br>\n *  \t\t\t&nbsp;Client data carrier (support class)\n * \t\t<li>ClientExtendedEventHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles extended client events.\n *  \t</ul>\n *\n *  [#] = Any one of these have to be set based on default DataMode for input.\n *  The default DataMode for input is String so if not changes you will\n *  have to set ClientCommandHandler.\n *  </p>\n *  <p>\n *   Eg:\n *  <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n *  @version 1.4.8\n *  @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //Some variable are not initialised to any value because the\n    //default java value was desired initial value.\n    //'dev ' = development build not yet final\n    //'beta' = test build all features\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n        if (System.getProperty(\"org.quickserver.useOSLineSeparator\") != null && System.getProperty(\"org.quickserver.useOSLineSeparator\").equals(\"true\")) {\n            NEW_LINE = System.getProperty(\"line.separator\");\n        } else {\n            NEW_LINE = \"\\r\\n\";\n        }\n        String _pid = ManagementFactory.getRuntimeMXBean().getName();\n        int i = _pid.indexOf(\"@\");\n        pid = _pid.substring(0, i);\n        System.out.print(\"Loading QuickServer v\" + getVersion() + \" [PID:\" + pid + \"]\");\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //--v1.2\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //for Service interface\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n        System.out.println(\" Done\");\n        //should be commented if not a patch release\n        //System.out.println(\"[Includes patch(#): t=152&p=532]\");\n        //should be commented if not a dev release\n        //System.out.println(\"[Dev Build Date: Saturday, October 29, 2005]\");\n        logger.log(Level.FINE, \"PID: {0}\", pid);\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion() {\n        return VER;\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo() {\n        return getVersionNo(VER);\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver) {\n        //String ver = getVersion();\n        float version = 0;\n        //check if beta\n        int i = ver.indexOf(\" \");\n        if (i == -1)\n            i = ver.length();\n        ver = ver.substring(0, i);\n        //check for sub version\n        i = ver.indexOf(\".\");\n        if (i != -1) {\n            int j = ver.indexOf(\".\", i);\n            if (j != -1) {\n                ver = ver.substring(0, i) + \".\" + MyString.replaceAll(ver.substring(i + 1), \".\", \"\");\n            }\n        }\n        try {\n            version = Float.parseFloat(ver);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Corrupt QuickServer\");\n        }\n        return version;\n    }\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine() {\n        return NEW_LINE;\n    }\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString() {\n        return serverName + \" : \" + getPort();\n    }\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n        setClientCommandHandler(commandHandler);\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n        //send to another constructor\n        this(commandHandler);\n        setPort(port);\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException {\n        logger.log(Level.FINE, \"Starting {0}\", getName());\n        if (isClosed() == false) {\n            logger.log(Level.WARNING, \"Server {0} already running.\", getName());\n            throw new AppException(\"Server \" + getName() + \" already running.\");\n        }\n        blockingMode = getBasicConfig().getServerMode().getBlocking();\n        if (getSecure().isEnable() && blockingMode == false) {\n            //TODO we need to fix this..\n            logger.warning(\"QuickServer does not support secure servers under non-blocking mode! So will run in blocking mode.\");\n            blockingMode = true;\n            getBasicConfig().getServerMode().setBlocking(blockingMode);\n        }\n        if (serverBanner == null) {\n            serverBanner = \"\\n-------------------------------\" + \"\\n Name : \" + getName() + \"\\n Port : \" + getPort() + \"\\n-------------------------------\\n\";\n            logger.finest(\"Default Server Banner Generated\");\n        }\n        try {\n            loadApplicationClasses();\n            //load class from Advanced Settings\n            Class clientIdentifierClass = getClass(getBasicConfig().getAdvancedSettings().getClientIdentifier(), true);\n            clientIdentifier = (ClientIdentifier) clientIdentifierClass.newInstance();\n            clientIdentifier.setQuickServer(QuickServer.this);\n            //load class from ObjectPoolConfig\n            Class poolManagerClass = getClass(getBasicConfig().getObjectPoolConfig().getPoolManager(), true);\n            poolManager = (PoolManager) poolManagerClass.newInstance();\n            //load class QSObjectPoolMaker\n            Class qsObjectPoolMakerClass = getClass(getBasicConfig().getAdvancedSettings().getQSObjectPoolMaker(), true);\n            qsObjectPoolMaker = (QSObjectPoolMaker) qsObjectPoolMakerClass.newInstance();\n            loadServerHooksClasses();\n            processServerHooks(ServerHook.PRE_STARTUP);\n            if (getSecure().isLoad() == true)\n                //v1.4.0\n                loadSSLContext();\n            loadBusinessLogic();\n        } catch (ClassNotFoundException e) {\n            logger.log(Level.SEVERE, \"Could not load class/s: \" + e, e);\n            throw new AppException(\"Could not load class/s : \" + e);\n        } catch (InstantiationException e) {\n            logger.log(Level.SEVERE, \"Could not instantiate class/s: \" + e, e);\n            throw new AppException(\"Could not instantiate class/s: \" + e);\n        } catch (IllegalAccessException e) {\n            logger.log(Level.SEVERE, \"Illegal access to class/s: \" + e, e);\n            throw new AppException(\"Illegal access to class/s: \" + e);\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, \"IOException: \" + e, e);\n            throw new AppException(\"IOException: \" + e);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Exception: \" + e, e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Exception : \" + e);\n        }\n        //v1.3.3\n        if (getSecurityManagerClass() != null) {\n            System.setSecurityManager(getSecurityManager());\n        }\n        setServiceState(Service.INIT);\n        t = new Thread(this, \"QuickServer - \" + getName());\n        t.start();\n        do {\n            Thread.yield();\n        } while (getServiceState() == Service.INIT);\n        if (getServiceState() != Service.RUNNING) {\n            if (exceptionInRun != null)\n                throw new AppException(\"Could not start server \" + getName() + \"! Details: \" + exceptionInRun);\n            else\n                throw new AppException(\"Could not start server \" + getName());\n        }\n        lastStartTime = new java.util.Date();\n        logger.log(Level.FINE, \"Started {0}, Date: {1}\", new Object[] { getName(), lastStartTime });\n    }\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException {\n        processServerHooks(ServerHook.PRE_SHUTDOWN);\n        logger.log(Level.WARNING, \"Stopping {0}\", getName());\n        stopServer = true;\n        Socket death = null;\n        if (isClosed() == true) {\n            logger.log(Level.WARNING, \"Server {0} is not running!\", getName());\n            throw new AppException(\"Server \" + getName() + \" is not running!\");\n        }\n        try {\n            if (getBlockingMode() == true) {\n                if (getSecure().isEnable() == false) {\n                    death = new Socket(server.getInetAddress(), server.getLocalPort());\n                    death.getInputStream().read();\n                    death.close();\n                } else {\n                    death = getSSLSocketFactory().createSocket(server.getInetAddress(), server.getLocalPort());\n                    Thread.sleep(100);\n                    death.close();\n                }\n            }\n            if (serverSocketChannel != null) {\n                serverSocketChannel.close();\n            }\n        } catch (IOException e) {\n            logger.log(Level.FINE, \"IOError stopping {0}: {1}\", new Object[] { getName(), e });\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error stopping {0}: {1}\", new Object[] { getName(), e });\n            throw new AppException(\"Error in stopServer \" + getName() + \": \" + e);\n        }\n        for (int i = 0; getServiceState() != Service.STOPPED; i++) {\n            try {\n                Thread.sleep(60);\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error waiting for {0} to fully stop. Error: {1}\", new Object[] { getName(), e });\n            }\n            if (i > 1000) {\n                logger.severe(\"Server was not stopped even after 10sec.. will terminate now.\");\n                System.exit(-1);\n            }\n        }\n        if (adminServer == null || getQSAdminServer().getServer() != this) {\n            //so this is not qsadmin\n            setClassLoader(null);\n        }\n        logger.log(Level.INFO, \"Stopped {0}\", getName());\n    }\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException {\n        stopServer();\n        startServer();\n    }\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName() {\n        return serverName;\n    }\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name) {\n        serverName = name;\n        logger.log(Level.FINEST, \"Set to : {0}\", name);\n    }\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner() {\n        return serverBanner;\n    }\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner) {\n        serverBanner = banner;\n        logger.log(Level.FINEST, \"Set to : {0}\", banner);\n    }\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port) {\n        if (port < 0) {\n            throw new IllegalArgumentException(\"Port number can not be less than 0!\");\n        }\n        serverPort = port;\n        logger.log(Level.FINEST, \"Set to {0}\", port);\n    }\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort() {\n        if (isClosed() == false) {\n            return server.getLocalPort();\n        }\n        if (getSecure().isEnable() == false) {\n            return serverPort;\n        } else {\n            int _port = getSecure().getPort();\n            if (_port == -1)\n                return serverPort;\n            else\n                return _port;\n        }\n    }\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler) {\n        clientCommandHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler() {\n        return clientCommandHandlerString;\n    }\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data) {\n        this.clientDataString = data;\n        logger.log(Level.FINEST, \"Set to {0}\", data);\n    }\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData() {\n        return clientDataString;\n    }\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time) {\n        if (time > 0)\n            socketTimeout = time;\n        else\n            socketTimeout = 0;\n        logger.log(Level.FINEST, \"Set to {0}\", socketTimeout);\n    }\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout() {\n        return socketTimeout;\n    }\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry) {\n        maxAuthTry = authTry;\n        logger.log(Level.FINEST, \"Set to {0}\", authTry);\n    }\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry() {\n        return maxAuthTry;\n    }\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg) {\n        maxAuthTryMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg() {\n        return maxAuthTryMsg;\n    }\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg) {\n        timeoutMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg() {\n        return timeoutMsg;\n    }\n\n    private TheClient initTheClient() {\n        TheClient theClient = new TheClient();\n        theClient.setServer(QuickServer.this);\n        theClient.setTimeoutMsg(getTimeoutMsg());\n        //v1.2\n        theClient.setMaxAuthTry(getMaxAuthTry());\n        theClient.setMaxAuthTryMsg(getMaxAuthTryMsg());\n        theClient.setClientEventHandler(clientEventHandler);\n        //v1.4.6\n        theClient.setClientExtendedEventHandler(clientExtendedEventHandler);\n        theClient.setClientCommandHandler(clientCommandHandler);\n        //v1.2\n        theClient.setClientObjectHandler(clientObjectHandler);\n        //v1.4\n        theClient.setClientBinaryHandler(clientBinaryHandler);\n        //v1.4.5\n        theClient.setClientWriteHandler(clientWriteHandler);\n        //v1.3\n        theClient.setAuthenticator(authenticator);\n        //v1.4.6\n        theClient.setClientAuthenticationHandler(clientAuthenticationHandler);\n        theClient.setTimeout(socketTimeout);\n        theClient.setMaxConnectionMsg(maxConnectionMsg);\n        //v1.3.2\n        theClient.setCommunicationLogging(getCommunicationLogging());\n        return theClient;\n    }\n\n    public void run() {\n        exceptionInRun = null;\n        TheClient theClient = initTheClient();\n        try {\n            stopServer = false;\n            closeAllPools();\n            initAllPools();\n            makeServerSocket();\n            //print banner\n            System.out.println(serverBanner);\n            //v1.2\n            setServiceState(Service.RUNNING);\n            //v1.3.3\n            processServerHooks(ServerHook.POST_STARTUP);\n            if (getBlockingMode() == false) {\n                runNonBlocking(theClient);\n                if (stopServer == true) {\n                    logger.log(Level.FINEST, \"Closing selector for {0}\", getName());\n                    selector.close();\n                }\n                return;\n            } else {\n                runBlocking(theClient);\n            }\n        } catch (BindException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"{0} BindException for Port {1} @ {2} : {3}\", new Object[] { getName(), getPort(), getBindAddr().getHostAddress(), e.getMessage() });\n        } catch (javax.net.ssl.SSLException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"SSLException {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (IOException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"IOError {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (Exception e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"Error {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } finally {\n            if (getBlockingMode() == true) {\n                logger.log(Level.WARNING, \"Closing {0}\", getName());\n                try {\n                    if (isClosed() == false) {\n                        server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            } else if (getBlockingMode() == false && exceptionInRun != null) {\n                logger.log(Level.WARNING, \"Closing {0} - Had Error: {1}\", new Object[] { getName(), exceptionInRun });\n                try {\n                    if (isClosed() == false) {\n                        if (serverSocketChannel != null)\n                            serverSocketChannel.close();\n                        if (server != null)\n                            server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n        }\n    }\n\n    //end of run\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnection = maxConnection;\n        else\n            this.maxConnection = maxConnection;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnection);\n    }\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection() {\n        return maxConnection;\n    }\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount() {\n        if (clientHandlerPool != null) {\n            try {\n                return getClientHandlerPool().getNumActive();\n            } catch (Exception e) {\n                return 0;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnectionMsg = maxConnectionMsg;\n        else\n            this.maxConnectionMsg = maxConnectionMsg;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnectionMsg);\n    }\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg() {\n        return maxConnectionMsg;\n    }\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException {\n        ipAddr = InetAddress.getByName(bindAddr);\n        logger.log(Level.FINEST, \"Set to {0}\", bindAddr);\n    }\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr() {\n        if (ipAddr == null) {\n            try {\n                ipAddr = InetAddress.getByName(\"0.0.0.0\");\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Unable to create default ip(0.0.0.0) : {0}\", e);\n                throw new RuntimeException(\"Error: Unable to find servers own ip : \" + e);\n            }\n        }\n        return ipAddr;\n    }\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects) {\n        this.storeObjects = storeObjects;\n    }\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects() {\n        return storeObjects;\n    }\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port) {\n        getQSAdminServer().getServer().setPort(port);\n    }\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort() {\n        return getQSAdminServer().getServer().getPort();\n    }\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator) {\n        getQSAdminServer().getServer().setClientAuthenticationHandler(authenticator);\n    }\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator() {\n        return getQSAdminServer().getServer().getAuthenticator();\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException {\n        getQSAdminServer().setClientAuthenticationHandler(authenticator);\n        getQSAdminServer().startServer(port);\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException {\n        getQSAdminServer().startServer();\n    }\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer() {\n        if (adminServer == null)\n            adminServer = new QSAdminServer(QuickServer.this);\n        return adminServer;\n    }\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer) {\n        if (adminServer == null)\n            this.adminServer = adminServer;\n    }\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed() {\n        if (server == null)\n            return true;\n        return server.isClosed();\n    }\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger() {\n        if (appLogger != null)\n            return appLogger;\n        return logger;\n    }\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger) {\n        this.appLogger = appLogger;\n    }\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler) {\n        clientObjectHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler() {\n        return clientObjectHandlerString;\n    }\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        if (formatter == null)\n            return;\n        consoleLoggingformatter = formatter;\n        java.util.logging.Formatter conformatter = (java.util.logging.Formatter) getClass(formatter, true).newInstance();\n        Logger jdkLogger = Logger.getLogger(\"\");\n        Handler[] handlers = jdkLogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                handlers[index].setFormatter(conformatter);\n            }\n        }\n        logger.log(Level.FINEST, \"Set to {0}\", formatter);\n    }\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter() {\n        return consoleLoggingformatter;\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MiniFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to logging.MiniFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MicroFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to MicroFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        boolean isConsole = true;\n        try {\n            if (System.console() == null) {\n                isConsole = false;\n            }\n        } catch (Throwable e) {\n            //ignore\n        }\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                if (isConsole == false && level != Level.OFF) {\n                    System.out.println(\"QuickServer: You do not have a console.. so turning console logger off..\");\n                    level = Level.OFF;\n                }\n                if (level == Level.OFF) {\n                    logger.info(\"QuickServer: Removing console handler.. \");\n                    rlogger.removeHandler(handlers[index]);\n                    handlers[index].setLevel(level);\n                    handlers[index].close();\n                } else {\n                    handlers[index].setLevel(level);\n                }\n            }\n        }\n        if (level == Level.SEVERE)\n            consoleLoggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            consoleLoggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            consoleLoggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            consoleLoggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            consoleLoggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            consoleLoggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            consoleLoggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            consoleLoggingLevel = \"OFF\";\n        else\n            consoleLoggingLevel = \"UNKNOWN\";\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel() {\n        return consoleLoggingLevel;\n    }\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            handlers[index].setLevel(level);\n        }\n        if (level == Level.SEVERE)\n            loggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            loggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            loggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            loggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            loggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            loggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            loggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            loggingLevel = \"OFF\";\n        else\n            loggingLevel = \"UNKNOWN\";\n        consoleLoggingLevel = loggingLevel;\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    //*** Start of Service interface methods\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError() {\n        return serviceError;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param) {\n        serviceError = null;\n        try {\n            initServer(param);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig) {\n        serviceError = null;\n        try {\n            initServer(qsConfig);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING)\n            return false;\n        try {\n            startServer();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService() {\n        serviceError = null;\n        if (getServiceState() == Service.STOPPED)\n            return false;\n        try {\n            stopServer();\n            clearAllPools();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING) {\n            suspendMaxConnection = maxConnection;\n            suspendMaxConnectionMsg = maxConnectionMsg;\n            maxConnection = 0;\n            maxConnectionMsg = \"Service is suspended.\";\n            setServiceState(Service.SUSPENDED);\n            logger.log(Level.INFO, \"Service {0} is suspended.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService() {\n        serviceError = null;\n        if (getServiceState() == Service.SUSPENDED) {\n            maxConnection = suspendMaxConnection;\n            maxConnectionMsg = suspendMaxConnectionMsg;\n            setServiceState(Service.RUNNING);\n            logger.log(Level.INFO, \"Service {0} resumed.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info() {\n        serviceError = null;\n        StringBuilder buf = new StringBuilder();\n        buf.append(getName()).append(\"\\n\");\n        buf.append(getBindAddr().getHostAddress()).append(\" \");\n        buf.append(getPort()).append(\"\\n\");\n        return buf.toString();\n    }\n\n    // *** End of Service interface methods\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException {\n        QuickServerConfig qsConfig = null;\n        try {\n            qsConfig = ConfigReader.read((String) param[0]);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not init server from xml file {0} : {1}\", new Object[] { new File((String) param[0]).getAbsolutePath(), e });\n            throw new AppException(\"Could not init server from xml file\", e);\n        }\n        initServer(qsConfig);\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException {\n        setConfig(qsConfig);\n        try {\n            configQuickServer();\n            loadApplicationClasses();\n            //start InitServerHooks\n            InitServerHooks ish = getConfig().getInitServerHooks();\n            if (ish != null) {\n                Iterator iterator = ish.iterator();\n                String initServerHookClassName = null;\n                Class initServerHookClass = null;\n                InitServerHook initServerHook = null;\n                while (iterator.hasNext()) {\n                    initServerHookClassName = (String) iterator.next();\n                    initServerHookClass = getClass(initServerHookClassName, true);\n                    initServerHook = (InitServerHook) initServerHookClass.newInstance();\n                    logger.log(Level.INFO, \"Loaded init server hook: {0}\", initServerHookClassName);\n                    logger.log(Level.FINE, \"Init server hook info: {0}\", initServerHook.info());\n                    initServerHook.handleInit(QuickServer.this);\n                }\n            }\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not load init server hook: {0}\", e);\n            logger.log(Level.WARNING, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Could not load init server hook\", e);\n        }\n        setServiceState(Service.INIT);\n        logger.log(Level.FINEST, \"\\r\\n{0}\", MyString.getSystemInfo(getVersion()));\n    }\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState() {\n        return serviceState;\n    }\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state) {\n        serviceState = state;\n    }\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp) {\n        if (temp.equals(\"SEVERE\"))\n            qs.setConsoleLoggingLevel(Level.SEVERE);\n        else if (temp.equals(\"WARNING\"))\n            qs.setConsoleLoggingLevel(Level.WARNING);\n        else if (temp.equals(\"INFO\"))\n            qs.setConsoleLoggingLevel(Level.INFO);\n        else if (temp.equals(\"CONFIG\"))\n            qs.setConsoleLoggingLevel(Level.CONFIG);\n        else if (temp.equals(\"FINE\"))\n            qs.setConsoleLoggingLevel(Level.FINE);\n        else if (temp.equals(\"FINER\"))\n            qs.setConsoleLoggingLevel(Level.FINER);\n        else if (temp.equals(\"FINEST\"))\n            qs.setConsoleLoggingLevel(Level.FINEST);\n        else if (temp.equals(\"OFF\"))\n            qs.setConsoleLoggingLevel(Level.OFF);\n        else\n            logger.log(Level.WARNING, \"unknown level {0}\", temp);\n    }\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception {\n        QuickServer qs = QuickServer.this;\n        //v1.3\n        qs.setConfig(config);\n        qs.setBasicConfig(config);\n        String temp = config.getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        temp = null;\n        qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        //v1.3.3\n        qs.setSecurityManagerClass(config.getSecurityManagerClass());\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        temp = config.getApplicationJarPath();\n        if (temp != null) {\n            File ajp = new File(temp);\n            if (ajp.isAbsolute() == false) {\n                temp = config.getConfigFile();\n                ajp = new File(temp);\n                temp = ajp.getParent() + File.separatorChar + config.getApplicationJarPath();\n                config.setApplicationJarPath(temp);\n                temp = null;\n            }\n            qs.setApplicationJarPath(config.getApplicationJarPath());\n            //set path also to QSAdmin\n            if (config.getQSAdminServerConfig() != null) {\n                getQSAdminServer().getServer().setApplicationJarPath(config.getApplicationJarPath());\n            }\n        }\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception {\n        QuickServer qs = getQSAdminServer().getServer();\n        qs.setBasicConfig(config);\n        //set the Logging Level to same as main QS\n        //config.getConsoleLoggingLevel();\n        String temp = getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        //set the Logging Formatter to same as main QS\n        //qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setConsoleLoggingFormatter(getConsoleLoggingFormatter());\n        //v1.4.6\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        //v1.4.6\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        getQSAdminServer().setCommandPlugin(config.getCommandPlugin());\n        //v1.3.2\n        if (config.getCommandShellEnable().equals(\"true\"))\n            getQSAdminServer().setShellEnable(true);\n        getQSAdminServer().setPromptName(config.getCommandShellPromptName());\n        //v1.3.3\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception {\n        configQuickServer(getConfig());\n        if (getConfig().getQSAdminServerConfig() != null) {\n            configQuickServer(getConfig().getQSAdminServerConfig());\n        }\n    }\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args) {\n        try {\n            if (args.length >= 1) {\n                if (args[0].equals(\"-about\")) {\n                    org.quickserver.net.server.gui.About.main(null);\n                } else if (args[0].equals(\"-load\") && args.length >= 2) {\n                    QuickServer qs = QuickServer.load(args[1]);\n                    if (qs != null)\n                        handleOptions(args, qs);\n                } else {\n                    System.out.println(printUsage());\n                }\n            } else {\n                System.out.println(printUsage());\n                org.quickserver.net.server.gui.About.showAbout();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException {\n        QuickServer qs = new QuickServer();\n        Object[] config = new Object[] { xml };\n        qs.initServer(config);\n        qs.startServer();\n        if (qs.getConfig().getQSAdminServerConfig() != null) {\n            qs.startQSAdminServer();\n        }\n        return qs;\n    }\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"QuickServer - Java library/framework for creating robust multi-client TCP servers.\\n\");\n        sb.append(\"Copyright (C) QuickServer.org\\n\\n\");\n        sb.append(\"Usage: QuickServer [-options]\\n\");\n        sb.append(\"Where options include:\\n\");\n        sb.append(\"  -about\\t\" + \"Opens About Dialog box\\n\");\n        sb.append(\"  -load <xml_config_file> [load-options]\\t\" + \"Loads the server from xml file.\\n\");\n        sb.append(\"  Where load-options include:\\n\");\n        sb.append(\"     -fullXML2File <file_name>\\t\" + \"Dumps the Full XML configuration of the QuickServer loaded.\\n\");\n        return sb.toString();\n    }\n\n    private static void handleOptions(String[] args, QuickServer quickserver) {\n        if (args.length < 3)\n            return;\n        if (args[2].equals(\"-fullXML2File\") && args.length >= 4) {\n            File file = new File(args[3]);\n            logger.log(Level.INFO, \"Writing full xml configuration to file: {0}\", file.getAbsolutePath());\n            try {\n                TextFile.write(file, quickserver.getConfig().toXML(null));\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error writing full xml configuration: {0}\", e);\n            }\n        }\n    }\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception {\n        try {\n            if (pool != null)\n                getClientPool().clear();\n            if (clientHandlerPool != null)\n                getClientHandlerPool().clear();\n            if (getClientDataPool() != null)\n                getClientDataPool().clear();\n            if (getDBPoolUtil() != null)\n                getDBPoolUtil().clean();\n            if (byteBufferPool != null)\n                getByteBufferPool().clear();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error: {0}\", e);\n            throw e;\n        }\n    }\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception {\n        if (pool == null && clientHandlerPool == null && getClientDataPool() == null && getDBPoolUtil() == null && byteBufferPool == null) {\n            return;\n        }\n        logger.log(Level.FINE, \"Closing pools for {0}\", getName());\n        try {\n            if (pool != null && PoolHelper.isPoolOpen(getClientPool().getObjectPool())) {\n                logger.finer(\"Closing ClientThread pool.\");\n                getClientPool().close();\n            }\n            if (clientHandlerPool != null && PoolHelper.isPoolOpen(getClientHandlerPool())) {\n                logger.finer(\"Closing ClientHandler pool.\");\n                getClientHandlerPool().close();\n            }\n            if (getClientDataPool() != null && PoolHelper.isPoolOpen(getClientDataPool())) {\n                logger.finer(\"Closing ClientData pool.\");\n                getClientDataPool().close();\n            }\n            if (getDBPoolUtil() != null) {\n                logger.finer(\"Closing DB pool.\");\n                getDBPoolUtil().clean();\n            }\n            if (byteBufferPool != null && PoolHelper.isPoolOpen(getByteBufferPool())) {\n                logger.finer(\"Closing ByteBuffer pool.\");\n                getByteBufferPool().close();\n            }\n            logger.log(Level.FINE, \"Closed pools for {0}\", getName());\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error closing pools for {0}: {1}\", new Object[] { getName(), e });\n            throw e;\n        }\n    }\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception {\n        logger.fine(\"Creating pools\");\n        if (getBlockingMode() == false) {\n            makeByteBufferPool(getBasicConfig().getObjectPoolConfig().getByteBufferObjectPoolConfig());\n        }\n        makeClientPool(getBasicConfig().getObjectPoolConfig().getThreadObjectPoolConfig());\n        makeClientHandlerPool(getBasicConfig().getObjectPoolConfig().getClientHandlerObjectPoolConfig());\n        //check if client data is poolable\n        if (clientDataClass != null) {\n            try {\n                clientData = (ClientData) clientDataClass.newInstance();\n                if (PoolableObject.class.isInstance(clientData) == true) {\n                    PoolableObject po = (PoolableObject) clientData;\n                    if (po.isPoolable() == true) {\n                        makeClientDataPool(po.getPoolableObjectFactory(), getBasicConfig().getObjectPoolConfig().getClientDataObjectPoolConfig());\n                    } else {\n                        clientDataPool = null;\n                        logger.fine(\"ClientData is not poolable!\");\n                    }\n                }\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error: {0}\", e);\n                throw e;\n            }\n        }\n        try {\n            makeDBObjectPool();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error in makeDBObjectPool() : {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw e;\n        }\n        logger.fine(\"Created pools\");\n    }\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool() {\n        if (pool == null)\n            throw new IllegalStateException(\"No ClientPool available yet!\");\n        return pool;\n    }\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientHandler pool\");\n        PoolableObjectFactory factory = new ClientHandlerObjectFactory(getBlockingMode());\n        clientHandlerPool = poolManager.makeClientHandlerPool(factory, opConfig);\n        poolManager.initPool(clientHandlerPool, opConfig);\n        clientHandlerPool = makeQSObjectPool(clientHandlerPool);\n        clientIdentifier.setClientHandlerPool((QSObjectPool) clientHandlerPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool() {\n        if (clientHandlerPool == null)\n            throw new IllegalStateException(\"No ClientHandler Pool available yet!\");\n        return clientHandlerPool;\n    }\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config) {\n        this.config = config;\n    }\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig() {\n        return config;\n    }\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientData pool\");\n        clientDataPool = poolManager.makeClientDataPool(factory, opConfig);\n        poolManager.initPool(clientDataPool, opConfig);\n        clientDataPool = makeQSObjectPool(clientDataPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool() {\n        return clientDataPool;\n    }\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil() {\n        return dBPoolUtil;\n    }\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig) {\n        getConfig().setDBObjectPoolConfig(dBObjectPoolConfig);\n    }\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception {\n        if (getConfig().getDBObjectPoolConfig() != null) {\n            logger.fine(\"Creating DBObject Pool\");\n            //logger.finest(\"Got:\\n\"+getConfig().getDBObjectPoolConfig().toXML(null));\n            Class dbPoolUtilClass = getClass(getConfig().getDBObjectPoolConfig().getDbPoolUtil(), true);\n            dBPoolUtil = (DBPoolUtil) dbPoolUtilClass.newInstance();\n            dBPoolUtil.setDatabaseConnections(getConfig().getDBObjectPoolConfig().getDatabaseConnectionSet().iterator());\n            dBPoolUtil.initPool();\n        }\n    }\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id) {\n        return clientIdentifier.findFirstClientById(id);\n    }\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient() {\n        return clientIdentifier.findAllClient();\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern) {\n        return clientIdentifier.findAllClientById(pattern);\n    }\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key) {\n        return clientIdentifier.findClientByKey(key);\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern) {\n        return clientIdentifier.findAllClientByKey(pattern);\n    }\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted() {\n        setSkipValidation(true);\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation() {\n        return skipValidation;\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation) {\n        skipValidation = validation;\n    }\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging) {\n        this.communicationLogging = communicationLogging;\n    }\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging() {\n        return communicationLogging;\n    }\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass) {\n        if (securityManagerClass != null)\n            this.securityManagerClass = securityManagerClass;\n    }\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass() {\n        return securityManagerClass;\n    }\n\n    public SecurityManager getSecurityManager() throws AppException {\n        if (getSecurityManagerClass() == null)\n            return null;\n        SecurityManager sm = null;\n        try {\n            sm = (SecurityManager) getClass(getSecurityManagerClass(), true).newInstance();\n        } catch (ClassNotFoundException e) {\n            throw new AppException(e.getMessage());\n        } catch (InstantiationException e) {\n            throw new AppException(e.getMessage());\n        } catch (IllegalAccessException e) {\n            throw new AppException(e.getMessage());\n        }\n        return sm;\n    }\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig) {\n        this.accessConstraintConfig = accessConstraintConfig;\n    }\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig() {\n        return accessConstraintConfig;\n    }\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader) {\n        this.classLoader = classLoader;\n        Thread.currentThread().setContextClassLoader(classLoader);\n    }\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader() {\n        return classLoader;\n    }\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException {\n        if (name == null)\n            throw new IllegalArgumentException(\"Class name can't be null!\");\n        logger.log(Level.FINEST, \"Class: {0}, reload: {1}\", new Object[] { name, reload });\n        if (reload == true && classLoader != null) {\n            return classLoader.loadClass(name);\n        } else if (reload == true && classLoader == null && this.getClass().getClassLoader() != null) {\n            return this.getClass().getClassLoader().loadClass(name);\n        } else if (reload == false && classLoader != null) {\n            return Class.forName(name, true, classLoader);\n        } else /*if(reload==false && classLoader==null)*/\n        {\n            return Class.forName(name, true, this.getClass().getClassLoader());\n        }\n    }\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath) {\n        this.applicationJarPath = applicationJarPath;\n    }\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath() {\n        return applicationJarPath;\n    }\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks) {\n        this.serverHooks = serverHooks;\n    }\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks() {\n        if (serverHooks == null)\n            serverHooks = new ServerHooks();\n        return serverHooks;\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses() {\n        if (getServerHooks() == null)\n            return;\n        listOfServerHooks = new ArrayList();\n        ServerHook serverHook = null;\n        String serverHookClassName = null;\n        Class serverHookClass = null;\n        //add system hooks\n        serverHook = new GhostSocketReaper();\n        serverHook.initHook(QuickServer.this);\n        listOfServerHooks.add(serverHook);\n        ghostSocketReaper = (GhostSocketReaper) serverHook;\n        //add user hooks if any\n        Iterator iterator = getServerHooks().iterator();\n        while (iterator.hasNext()) {\n            serverHookClassName = (String) iterator.next();\n            try {\n                serverHookClass = getClass(serverHookClassName, true);\n                serverHook = (ServerHook) serverHookClass.newInstance();\n                serverHook.initHook(QuickServer.this);\n                listOfServerHooks.add(serverHook);\n                logger.log(Level.INFO, \"Loaded server hook: {0}\", serverHookClassName);\n                logger.log(Level.FINE, \"Server hook info: {0}\", serverHook.info());\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Could not load server hook [{0}]: {1}\", new Object[] { serverHookClassName, e });\n                logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            }\n        }\n        //end of while\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event) {\n        if (listOfServerHooks == null) {\n            logger.warning(\"listOfServerHooks was null!\");\n            return;\n        }\n        ServerHook serverHook = null;\n        boolean result = false;\n        Iterator iterator = listOfServerHooks.iterator();\n        String hooktype = \"UNKNOWN\";\n        switch(event) {\n            case ServerHook.PRE_STARTUP:\n                hooktype = \"PRE_STARTUP\";\n                break;\n            case ServerHook.POST_STARTUP:\n                hooktype = \"POST_STARTUP\";\n                break;\n            case ServerHook.PRE_SHUTDOWN:\n                hooktype = \"PRE_SHUTDOWN\";\n                break;\n            case ServerHook.POST_SHUTDOWN:\n                hooktype = \"POST_SHUTDOWN\";\n                break;\n        }\n        while (iterator.hasNext()) {\n            serverHook = (ServerHook) iterator.next();\n            try {\n                result = serverHook.handleEvent(event);\n            } catch (Exception e) {\n                result = false;\n                logger.log(Level.WARNING, \"Error invoking {0} hook [{1}]: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), e.getMessage() });\n            }\n            logger.log(Level.FINE, \"Invoked {0} hook [{1}] was: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), result });\n        }\n    }\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone() {\n        Object object = null;\n        try {\n            object = super.clone();\n            QuickServer _qs = (QuickServer) object;\n            _qs.setQSAdminServer(new QSAdminServer(_qs));\n        } catch (CloneNotSupportedException e) {\n            //should not happ\n            logger.log(Level.WARNING, \"Error cloning : {0}\", e);\n        }\n        return object;\n    }\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure) {\n        this.secure = secure;\n    }\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure() {\n        if (secure == null)\n            secure = new Secure();\n        return secure;\n    }\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure() {\n        return runningSecure;\n    }\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure) {\n        this.runningSecure = runningSecure;\n    }\n\n    private File makeAbsoluteToConfig(String fileName) {\n        Assertion.affirm(fileName != null, \"FileName can't be null\");\n        return ConfigReader.makeAbsoluteToConfig(fileName, getConfig());\n    }\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException {\n        server = null;\n        logger.log(Level.FINEST, \"Binding {0} to IP: {1}\", new Object[] { getName(), getBindAddr() });\n        InetSocketAddress bindAddress = new InetSocketAddress(getBindAddr(), getPort());\n        try {\n            NetworkInterface ni = NetworkInterface.getByInetAddress(getBindAddr());\n            if (ni != null) {\n                logger.fine(\"NetworkInterface: \" + ni);\n            }\n        } catch (Exception igrnore) {\n            /*ignore*/\n        } catch (Error igrnore) {\n            /*ignore*/\n        }\n        if (getSecure().isEnable() == false) {\n            logger.log(Level.FINE, \"Making a normal ServerSocket for {0}\", getName());\n            setRunningSecure(false);\n            if (getBlockingMode() == false) {\n                //for non-blocking\n                serverSocketChannel = ServerSocketChannel.open();\n                server = serverSocketChannel.socket();\n                server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n            } else {\n                //for blocking\n                server = new ServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n            }\n        } else {\n            try {\n                logger.log(Level.FINE, \"Making a secure ServerSocket for {0}\", getName());\n                getSSLContext();\n                setRunningSecure(true);\n                if (getBlockingMode() == false) {\n                    logger.log(Level.FINE, \"Making a secure ServerSocketChannel for {0}\", getName());\n                    //for non-blocking\n                    serverSocketChannel = ServerSocketChannel.open();\n                    server = serverSocketChannel.socket();\n                    server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n                } else {\n                    ServerSocketFactory ssf = getSSLContext().getServerSocketFactory();\n                    SSLServerSocket serversocket = (SSLServerSocket) ssf.createServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n                    serversocket.setNeedClientAuth(secure.isClientAuthEnable());\n                    setRunningSecure(true);\n                    secureStoreManager.logSSLServerSocketInfo(serversocket);\n                    server = serversocket;\n                    serverSocketChannel = server.getChannel();\n                    if (serverSocketChannel == null && getBlockingMode() == false) {\n                        logger.warning(\"Secure Server does not support Channel! So will run in blocking mode.\");\n                        blockingMode = false;\n                    }\n                }\n                //blocking\n            } catch (NoSuchAlgorithmException e) {\n                logger.log(Level.WARNING, \"NoSuchAlgorithmException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            } catch (KeyManagementException e) {\n                logger.log(Level.WARNING, \"KeyManagementException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            }\n        }\n        server.setReuseAddress(true);\n        int connectionTime = 0;\n        int latency = 0;\n        int bandwidth = 0;\n        connectionTime = getBasicConfig().getAdvancedSettings().getPerformancePreferencesConnectionTime();\n        latency = getBasicConfig().getAdvancedSettings().getPerformancePreferencesLatency();\n        bandwidth = getBasicConfig().getAdvancedSettings().getPerformancePreferencesBandwidth();\n        logger.log(Level.FINE, \"getPerformancePreferencesConnectionTime : {0}\", connectionTime);\n        logger.log(Level.FINE, \"getPerformancePreferencesLatency : {0}\", latency);\n        logger.log(Level.FINE, \"getPerformancePreferencesBandwidth : {0}\", bandwidth);\n        server.setPerformancePreferences(connectionTime, latency, bandwidth);\n        int clientSocketReceiveBufferSize = getBasicConfig().getAdvancedSettings().getClientSocketReceiveBufferSize();\n        if (clientSocketReceiveBufferSize > 0) {\n            logger.log(Level.FINE, \"clientSocketReceiveBufferSize: {0}\", clientSocketReceiveBufferSize);\n            server.setReceiveBufferSize(clientSocketReceiveBufferSize);\n        }\n        if (getBlockingMode() == false) {\n            logger.log(Level.FINE, \"Server Mode {0} - Non Blocking\", getName());\n            if (selector == null || selector.isOpen() == false) {\n                logger.finest(\"Opening new selector\");\n                selector = Selector.open();\n            } else {\n                logger.log(Level.FINEST, \"Reusing selector: {0}\", selector);\n            }\n            serverSocketChannel.configureBlocking(false);\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n            selector.wakeup();\n        } else {\n            logger.log(Level.FINE, \"Server Mode {0} - Blocking\", getName());\n        }\n    }\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception {\n        Assertion.affirm(basicConfig != null, \"BasicServerConfig can't be null\");\n        this.basicConfig = basicConfig;\n    }\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig() {\n        return basicConfig;\n    }\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException {\n        if (getSecure().isLoad() == false) {\n            throw new IllegalStateException(\"Secure setting is not yet enabled for loading!\");\n        }\n        logger.info(\"Loading Secure Context..\");\n        km = null;\n        tm = null;\n        try {\n            String ssManager = \"org.quickserver.security.SecureStoreManager\";\n            if (getSecure().getSecureStore() != null)\n                ssManager = getSecure().getSecureStore().getSecureStoreManager();\n            Class secureStoreManagerClass = getClass(ssManager, true);\n            secureStoreManager = (SecureStoreManager) secureStoreManagerClass.newInstance();\n            km = secureStoreManager.loadKeyManagers(getConfig());\n            logger.fine(\"KeyManager got\");\n            tm = secureStoreManager.loadTrustManagers(getConfig());\n            logger.fine(\"TrustManager got\");\n            sslc = secureStoreManager.getSSLContext(getConfig().getSecure().getProtocol());\n            sslc.init(km, tm, null);\n            logger.fine(\"SSLContext loaded\");\n        } catch (KeyStoreException e) {\n            logger.warning(\"KeyStoreException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchAlgorithmException e) {\n            logger.warning(\"NoSuchAlgorithmException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchProviderException e) {\n            logger.warning(\"NoSuchProviderException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (UnrecoverableKeyException e) {\n            logger.warning(\"UnrecoverableKeyException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (CertificateException e) {\n            logger.warning(\"CertificateException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (KeyManagementException e) {\n            logger.warning(\"KeyManagementException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (GeneralSecurityException e) {\n            logger.warning(\"GeneralSecurityException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (ClassNotFoundException e) {\n            logger.warning(\"ClassNotFoundException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (InstantiationException e) {\n            logger.warning(\"InstantiationException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (IllegalAccessException e) {\n            logger.warning(\"IllegalAccessException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        return getSSLContext(null);\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        if (protocol != null && secureStoreManager != null) {\n            SSLContext _sslc = secureStoreManager.getSSLContext(protocol);\n            _sslc.init(km, tm, null);\n            return _sslc;\n        }\n        return sslc;\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext());\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext(protocol));\n    }\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler) {\n        clientBinaryHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler() {\n        return clientBinaryHandlerString;\n    }\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector) {\n        this.selector = selector;\n    }\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector() {\n        return selector;\n    }\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception {\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        //long stime = System.currentTimeMillis();\n        //long etime = System.currentTimeMillis();\n        while (true) {\n            //etime = System.currentTimeMillis();\n            //System.out.println(\"Time Taken: \"+(etime-stime));\n            client = server.accept();\n            //stime = System.currentTimeMillis();\n            if (linger < 0) {\n                client.setSoLinger(false, 0);\n            } else {\n                client.setSoLinger(true, linger);\n            }\n            client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                //low delay=10\n                client.setTrafficClass(socketTrafficClass);\n            }\n            logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n            }\n            if (stopServer) {\n                //Client connected when server was about to be shutdown.\n                try {\n                    client.close();\n                } catch (Exception e) {\n                }\n                break;\n            }\n            if (checkAccessConstraint(client) == false) {\n                continue;\n            }\n            //Check if max connection has reached\n            if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                theClient.setClientEvent(ClientEvent.MAX_CON_BLOCKING);\n            } else {\n                theClient.setClientEvent(ClientEvent.RUN_BLOCKING);\n            }\n            theClient.setTrusted(getSkipValidation());\n            theClient.setSocket(client);\n            //mostly null\n            theClient.setSocketChannel(client.getChannel());\n            if (clientDataClass != null) {\n                if (getClientDataPool() == null) {\n                    clientData = (ClientData) clientDataClass.newInstance();\n                } else {\n                    clientData = (ClientData) getClientDataPool().borrowObject();\n                }\n                theClient.setClientData(clientData);\n            }\n            try {\n                _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                _chPolled.handleClient(theClient);\n            } catch (java.util.NoSuchElementException nsee) {\n                logger.warning(\"Could not borrow ClientHandler from pool. Error: \" + nsee);\n                logger.warning(\"Closing Socket [\" + client + \"] since no ClientHandler available.\");\n                client.close();\n            }\n            if (_chPolled != null) {\n                try {\n                    getClientPool().addClient(_chPolled, true);\n                } catch (java.util.NoSuchElementException nsee) {\n                    logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                    //logger.warning(\"Closing Socket [\"+client+\"] since no Thread available.\");\n                    //client.close();\n                    //returnClientHandlerToPool(_chPolled);\n                }\n                _chPolled = null;\n            }\n            client = null;\n            //reset it back\n            setSkipValidation(false);\n        }\n        //end of loop\n    }\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception {\n        int selectCount = 0;\n        Iterator iterator = null;\n        SelectionKey key = null;\n        ServerSocketChannel serverChannel = null;\n        SocketChannel socketChannel = null;\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        boolean stopServerProcessed = false;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        registerChannelRequestMap = new HashMap();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        while (true) {\n            selectCount = selector.select(500);\n            //selectCount = selector.select();//for testing\n            //check for any pending registerChannel req.\n            synchronized (registerChannelRequestMap) {\n                if (registerChannelRequestMap.size() > 0) {\n                    RegisterChannelRequest req = null;\n                    Object hashkey = null;\n                    iterator = registerChannelRequestMap.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        hashkey = iterator.next();\n                        req = (RegisterChannelRequest) registerChannelRequestMap.get(hashkey);\n                        req.register(getSelector());\n                    }\n                    iterator = null;\n                    registerChannelRequestMap.clear();\n                }\n                //if\n            }\n            //sync\n            if (stopServer == true && stopServerProcessed == false) {\n                logger.warning(\"Closing \" + getName());\n                serverSocketChannel.close();\n                stopServerProcessed = true;\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.warning(\"Closed \" + getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n            if (stopServer == false && stopServerProcessed == true) {\n                logger.finest(\"Server must have re-started.. will break\");\n                break;\n            }\n            if (selectCount == 0 && stopServerProcessed == true) {\n                java.util.Set keyset = selector.keys();\n                if (keyset.isEmpty() == true && getClientCount() <= 0) {\n                    break;\n                } else {\n                    continue;\n                }\n            } else if (selectCount == 0) {\n                continue;\n            }\n            iterator = selector.selectedKeys().iterator();\n            while (iterator.hasNext()) {\n                key = (SelectionKey) iterator.next();\n                if (key.isValid() == false) {\n                    iterator.remove();\n                    continue;\n                }\n                if (key.isAcceptable() && stopServer == false) {\n                    logger.finest(\"Key is Acceptable\");\n                    serverChannel = (ServerSocketChannel) key.channel();\n                    socketChannel = serverChannel.accept();\n                    if (socketChannel == null) {\n                        iterator.remove();\n                        continue;\n                    }\n                    client = socketChannel.socket();\n                    if (linger < 0) {\n                        client.setSoLinger(false, 0);\n                    } else {\n                        client.setSoLinger(true, linger);\n                    }\n                    client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                        //low delay=10\n                        client.setTrafficClass(socketTrafficClass);\n                    }\n                    logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                        client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                        logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n                    }\n                    if (checkAccessConstraint(client) == false) {\n                        iterator.remove();\n                        continue;\n                    }\n                    socketChannel.configureBlocking(false);\n                    theClient.setTrusted(getSkipValidation());\n                    theClient.setSocket(socketChannel.socket());\n                    theClient.setSocketChannel(socketChannel);\n                    if (clientDataClass != null) {\n                        if (getClientDataPool() == null) {\n                            clientData = (ClientData) clientDataClass.newInstance();\n                        } else {\n                            //borrow a object from pool\n                            clientData = (ClientData) getClientDataPool().borrowObject();\n                        }\n                        theClient.setClientData(clientData);\n                    }\n                    //Check if max connection has reached\n                    if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                        theClient.setClientEvent(ClientEvent.MAX_CON);\n                    } else {\n                        theClient.setClientEvent(ClientEvent.ACCEPT);\n                    }\n                    try {\n                        _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                        logger.finest(\"Asking \" + _chPolled.getName() + \" to handle.\");\n                        _chPolled.handleClient(theClient);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.warning(\"Could not borrow ClientHandler Object from pool. Error: \" + nsee);\n                        logger.warning(\"Closing SocketChannel [\" + serverChannel.socket() + \"] since no ClientHandler available.\");\n                        socketChannel.close();\n                    }\n                    if (_chPolled != null) {\n                        try {\n                            getClientPool().addClient(_chPolled, true);\n                        } catch (java.util.NoSuchElementException nsee) {\n                            logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                            //logger.warning(\"Closing SocketChannel [\"+serverChannel.socket()+\"] since no Thread available.\");\n                            //socketChannel.close();\n                            //returnClientHandlerToPool(_chPolled);\n                        }\n                        _chPolled = null;\n                    }\n                    socketChannel = null;\n                    client = null;\n                    //reset it back\n                    setSkipValidation(false);\n                } else if (key.isValid() && key.isReadable()) {\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Readable, removing OP_READ from interestOps for \" + _ch.getName());\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_READ));\n                        _ch.addEvent(ClientEvent.READ);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.READ);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (key.isValid() && key.isWritable()) {\n                    if (getClientPool().shouldNioWriteHappen() == false) {\n                        //no need to remove the key\n                        continue;\n                    }\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Writable, removing OP_WRITE from interestOps for \" + _ch.getName());\n                        //remove OP_WRITE from interest set\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));\n                        _ch.addEvent(ClientEvent.WRITE);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.WRITE);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (stopServer == true && key.isAcceptable()) {\n                    //we will not accept this key\n                    //reset it back\n                    setSkipValidation(false);\n                } else {\n                    logger.warning(\"Unknown key got in SelectionKey: \" + key);\n                }\n                //Remove key\n                iterator.remove();\n                Thread.yield();\n            }\n            //end of iterator\n            iterator = null;\n        }\n        //end of loop\n    }\n\n    private boolean checkAccessConstraint(Socket socket) {\n        try {\n            if (getAccessConstraintConfig() != null) {\n                getAccessConstraintConfig().checkAccept(socket);\n            }\n            return true;\n        } catch (SecurityException se) {\n            logger.warning(\"SecurityException occurred accepting connection : \" + se.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException {\n        if (getSelector() == null) {\n            throw new IllegalStateException(\"Selector is not open!\");\n        }\n        if (channel == null) {\n            throw new IllegalArgumentException(\"Can't register a null channel!\");\n        }\n        if (channel.isConnected() == false) {\n            throw new ClosedChannelException();\n        }\n        RegisterChannelRequest req = new RegisterChannelRequest(channel, ops, att);\n        RegisterChannelRequest reqOld = null;\n        synchronized (registerChannelRequestMap) {\n            reqOld = (RegisterChannelRequest) registerChannelRequestMap.get(channel);\n            if (reqOld == null) {\n                registerChannelRequestMap.put(channel, req);\n                getSelector().wakeup();\n                return true;\n            } else {\n                if (reqOld.equals(req) == false) {\n                    reqOld.setOps(reqOld.getOps() | req.getOps());\n                    reqOld.setAtt(req.getAtt());\n                    return true;\n                }\n                return false;\n            }\n        }\n        /*\n\t\tlogger.warning(\"Before register...\");\n\t\tchannel.register(getSelector(), ops, att);\n\t\tlogger.warning(\"Before wakeup and after register...\");\n\t\tgetSelector().wakeup();\n\t\tlogger.warning(\"After wakeup...\");\n\t\t*/\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig) {\n        logger.finer(\"Creating ByteBufferPool pool\");\n        int bufferSize = getBasicConfig().getAdvancedSettings().getByteBufferSize();\n        boolean useDirectByteBuffer = getBasicConfig().getAdvancedSettings().getUseDirectByteBuffer();\n        PoolableObjectFactory factory = new ByteBufferObjectFactory(bufferSize, useDirectByteBuffer);\n        byteBufferPool = poolManager.makeByteBufferPool(factory, opConfig);\n        poolManager.initPool(byteBufferPool, opConfig);\n    }\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool() {\n        return byteBufferPool;\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientThread pool\");\n        ThreadObjectFactory factory = new ThreadObjectFactory();\n        ObjectPool objectPool = poolManager.makeClientPool(factory, opConfig);\n        pool = new ClientPool(makeQSObjectPool(objectPool), opConfig);\n        factory.setClientPool(pool);\n        pool.setMaxThreadsForNioWrite(getBasicConfig().getAdvancedSettings().getMaxThreadsForNioWrite());\n        poolManager.initPool(objectPool, opConfig);\n    }\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler) {\n        clientWriteHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler() {\n        return clientWriteHandlerString;\n    }\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime() {\n        return lastStartTime;\n    }\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag) {\n        org.quickserver.util.io.ByteBufferOutputStream.setDebug(flag);\n        org.quickserver.util.io.ByteBufferInputStream.setDebug(flag);\n    }\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier() {\n        return clientIdentifier;\n    }\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception {\n        return (QSObjectPool) qsObjectPoolMaker.getQSObjectPool(objectPool);\n    }\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode() {\n        return blockingMode;\n    }\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception {\n        if (clientCommandHandlerString == null && clientEventHandlerString == null) {\n            logger.severe(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n            throw new AppException(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n        }\n        clientCommandHandler = null;\n        if (clientCommandHandlerString != null) {\n            logger.finest(\"Loading ClientCommandHandler class..\");\n            Class clientCommandHandlerClass = getClass(clientCommandHandlerString, true);\n            clientCommandHandler = (ClientCommandHandler) clientCommandHandlerClass.newInstance();\n        }\n        boolean setClientCommandHandlerLookup = false;\n        clientEventHandler = null;\n        if (clientEventHandlerString == null) {\n            clientEventHandlerString = \"org.quickserver.net.server.impl.DefaultClientEventHandler\";\n            setClientCommandHandlerLookup = true;\n        }\n        logger.finest(\"Loading ClientEventHandler class..\");\n        if (clientEventHandlerString.equals(clientCommandHandlerString) && ClientEventHandler.class.isInstance(clientCommandHandler)) {\n            clientEventHandler = (ClientEventHandler) clientCommandHandler;\n        } else {\n            clientEventHandler = (ClientEventHandler) getClass(clientEventHandlerString, true).newInstance();\n            if (setClientCommandHandlerLookup) {\n                ((DefaultClientEventHandler) clientEventHandler).setClientCommandHandler(clientCommandHandler);\n            }\n        }\n        clientExtendedEventHandler = null;\n        if (clientExtendedEventHandlerString != null) {\n            logger.finest(\"Loading ClientExtendedEventHandler class..\");\n            if (clientExtendedEventHandlerString.equals(clientCommandHandlerString) && ClientExtendedEventHandler.class.isInstance(clientCommandHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientCommandHandler;\n            } else if (clientExtendedEventHandlerString.equals(clientEventHandlerString) && ClientExtendedEventHandler.class.isInstance(clientEventHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientEventHandler;\n            } else {\n                Class clientExtendedEventHandlerClass = getClass(clientExtendedEventHandlerString, true);\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientExtendedEventHandlerClass.newInstance();\n            }\n        }\n        clientObjectHandler = null;\n        if (clientObjectHandlerString != null) {\n            logger.finest(\"Loading ClientObjectHandler class..\");\n            if (clientObjectHandlerString.equals(clientCommandHandlerString) && ClientObjectHandler.class.isInstance(clientCommandHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientCommandHandler;\n            } else if (clientObjectHandlerString.equals(clientEventHandlerString) && ClientObjectHandler.class.isInstance(clientEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientEventHandler;\n            } else if (clientObjectHandlerString.equals(clientExtendedEventHandlerString) && ClientObjectHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientExtendedEventHandler;\n            } else {\n                clientObjectHandler = (ClientObjectHandler) getClass(clientObjectHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientBinaryHandler = null;\n        if (clientBinaryHandlerString != null) {\n            logger.finest(\"Loading ClientBinaryHandler class..\");\n            if (clientBinaryHandlerString.equals(clientCommandHandlerString) && ClientBinaryHandler.class.isInstance(clientCommandHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientCommandHandler;\n            } else if (clientBinaryHandlerString.equals(clientEventHandlerString) && ClientBinaryHandler.class.isInstance(clientEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientExtendedEventHandlerString) && ClientBinaryHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientExtendedEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientObjectHandlerString) && ClientBinaryHandler.class.isInstance(clientObjectHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientObjectHandler;\n            } else {\n                clientBinaryHandler = (ClientBinaryHandler) getClass(clientBinaryHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientWriteHandler = null;\n        if (clientWriteHandlerString != null) {\n            logger.finest(\"Loading ClientWriteHandler class..\");\n            if (clientWriteHandlerString.equals(clientCommandHandlerString) && ClientWriteHandler.class.isInstance(clientCommandHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientCommandHandler;\n            } else if (clientWriteHandlerString.equals(clientEventHandlerString) && ClientWriteHandler.class.isInstance(clientEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientEventHandler;\n            } else if (clientWriteHandlerString.equals(clientExtendedEventHandlerString) && ClientWriteHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientExtendedEventHandler;\n            } else if (clientWriteHandlerString.equals(clientObjectHandlerString) && ClientWriteHandler.class.isInstance(clientObjectHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientObjectHandler;\n            } else if (clientWriteHandlerString.equals(clientBinaryHandlerString) && ClientWriteHandler.class.isInstance(clientBinaryHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientBinaryHandler;\n            } else {\n                clientWriteHandler = (ClientWriteHandler) getClass(clientWriteHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        Class authenticatorClass = null;\n        if (clientAuthenticationHandlerString != null) {\n            logger.finest(\"Loading ClientAuthenticationHandler class..\");\n            authenticatorClass = getClass(clientAuthenticationHandlerString, true);\n        }\n        if (authenticatorClass != null) {\n            Object obj = authenticatorClass.newInstance();\n            if (ClientAuthenticationHandler.class.isInstance(obj))\n                clientAuthenticationHandler = (ClientAuthenticationHandler) obj;\n            else\n                authenticator = (Authenticator) obj;\n        }\n        clientDataClass = null;\n        if (clientDataString != null) {\n            logger.finest(\"Loading ClientData class..\");\n            clientDataClass = getClass(clientDataString, true);\n        }\n        Assertion.affirm(clientEventHandler != null, \"ClientEventHandler was not loaded!\");\n    }\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler) {\n        clientEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler() {\n        return clientEventHandlerString;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException {\n        if (dataType == DataType.IN)\n            this.defaultDataModeIN = dataMode;\n        if (dataType == DataType.OUT)\n            this.defaultDataModeOUT = dataMode;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException {\n        defaultDataModeIN = defaultDataMode.getDataMode(DataType.IN);\n        defaultDataModeOUT = defaultDataMode.getDataMode(DataType.OUT);\n        ;\n    }\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType) {\n        if (dataType == DataType.IN)\n            return defaultDataModeIN;\n        if (dataType == DataType.OUT)\n            return defaultDataModeOUT;\n        else\n            throw new IllegalArgumentException(\"Unknown DataType: \" + dataType);\n    }\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler) {\n        clientExtendedEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler() {\n        return clientExtendedEventHandlerString;\n    }\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception {\n        if (getApplicationJarPath() != null && getClassLoader() == null) {\n            setClassLoader(ClassUtil.getClassLoader(getApplicationJarPath()));\n            //update qsadmin to use the same\n            if (adminServer != null) {\n                adminServer.getServer().setClassLoader(getClassLoader());\n            }\n        }\n    }\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID() {\n        return pid;\n    }\n\n    public boolean isRawCommunicationLogging() {\n        return rawCommunicationLogging;\n    }\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging) {\n        this.rawCommunicationLogging = rawCommunicationLogging;\n    }\n\n    public int getRawCommunicationMaxLength() {\n        return rawCommunicationMaxLength;\n    }\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength) {\n        this.rawCommunicationMaxLength = rawCommunicationMaxLength;\n    }\n}\n",
        "test_prompt": "// QuickServer_18Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#getSSLContext(String)} method.\n*/\nclass QuickServer_18Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// QuickServer_19Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#getSSLSocketFactory(String)} method.\n*/\nclass QuickServer_19Test {\n}"
            }
        ],
        "id": "e6a6a36b-7b17-4375-861b-fd08f51f5987",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_19Test.java",
        "original_code": "// QuickServer.java\n/*\n * This file is part of the QuickServer library \n * Copyright (C) QuickServer.org\n *\n * Use, modification, copying and distribution of this software is subject to\n * the terms and conditions of the GNU Lesser General Public License. \n * You should have received a copy of the GNU LGP License along with this \n * library; if not, you can download a copy from <http://www.quickserver.org/>.\n *\n * For questions, suggestions, bug-reports, enhancement-requests etc.\n * visit http://www.quickserver.org\n *\n */\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n *  Main class of QuickServer library. This class is used to create\n *  multi client servers quickly.\n *  <p>\n *  Ones a client is connected, it creates {@link ClientHandler} object,\n *  which is run using any thread available from the pool of threads\n *  maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n *  handles the client. <br/>\n *  QuickServer divides the application logic of its developer over eight\n *  class, <br>\n *  \t<ul>\n * \t\t<li>ClientEventHandler<br>\n *  \t\t   &nbsp;Handles client events [Optional Class].\n *  \t\t<li>ClientCommandHandler [#]<br>\n *  \t\t   &nbsp;Handles client character/string commands.\n *  \t\t<li>ClientObjectHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - Object commands.\n * \t\t<li>ClientBinaryHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - binary data.\n * \t\t<li>ClientWriteHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n *  \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n *  \t\t\t&nbsp;Used to Authencatet a client.\n *  \t\t<li>ClientData [Optional Class]<br>\n *  \t\t\t&nbsp;Client data carrier (support class)\n * \t\t<li>ClientExtendedEventHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles extended client events.\n *  \t</ul>\n *\n *  [#] = Any one of these have to be set based on default DataMode for input.\n *  The default DataMode for input is String so if not changes you will\n *  have to set ClientCommandHandler.\n *  </p>\n *  <p>\n *   Eg:\n *  <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n *  @version 1.4.8\n *  @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //Some variable are not initialised to any value because the\n    //default java value was desired initial value.\n    //'dev ' = development build not yet final\n    //'beta' = test build all features\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n        if (System.getProperty(\"org.quickserver.useOSLineSeparator\") != null && System.getProperty(\"org.quickserver.useOSLineSeparator\").equals(\"true\")) {\n            NEW_LINE = System.getProperty(\"line.separator\");\n        } else {\n            NEW_LINE = \"\\r\\n\";\n        }\n        String _pid = ManagementFactory.getRuntimeMXBean().getName();\n        int i = _pid.indexOf(\"@\");\n        pid = _pid.substring(0, i);\n        System.out.print(\"Loading QuickServer v\" + getVersion() + \" [PID:\" + pid + \"]\");\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //--v1.2\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //for Service interface\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n        System.out.println(\" Done\");\n        //should be commented if not a patch release\n        //System.out.println(\"[Includes patch(#): t=152&p=532]\");\n        //should be commented if not a dev release\n        //System.out.println(\"[Dev Build Date: Saturday, October 29, 2005]\");\n        logger.log(Level.FINE, \"PID: {0}\", pid);\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion() {\n        return VER;\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo() {\n        return getVersionNo(VER);\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver) {\n        //String ver = getVersion();\n        float version = 0;\n        //check if beta\n        int i = ver.indexOf(\" \");\n        if (i == -1)\n            i = ver.length();\n        ver = ver.substring(0, i);\n        //check for sub version\n        i = ver.indexOf(\".\");\n        if (i != -1) {\n            int j = ver.indexOf(\".\", i);\n            if (j != -1) {\n                ver = ver.substring(0, i) + \".\" + MyString.replaceAll(ver.substring(i + 1), \".\", \"\");\n            }\n        }\n        try {\n            version = Float.parseFloat(ver);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Corrupt QuickServer\");\n        }\n        return version;\n    }\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine() {\n        return NEW_LINE;\n    }\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString() {\n        return serverName + \" : \" + getPort();\n    }\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n        setClientCommandHandler(commandHandler);\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n        //send to another constructor\n        this(commandHandler);\n        setPort(port);\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException {\n        logger.log(Level.FINE, \"Starting {0}\", getName());\n        if (isClosed() == false) {\n            logger.log(Level.WARNING, \"Server {0} already running.\", getName());\n            throw new AppException(\"Server \" + getName() + \" already running.\");\n        }\n        blockingMode = getBasicConfig().getServerMode().getBlocking();\n        if (getSecure().isEnable() && blockingMode == false) {\n            //TODO we need to fix this..\n            logger.warning(\"QuickServer does not support secure servers under non-blocking mode! So will run in blocking mode.\");\n            blockingMode = true;\n            getBasicConfig().getServerMode().setBlocking(blockingMode);\n        }\n        if (serverBanner == null) {\n            serverBanner = \"\\n-------------------------------\" + \"\\n Name : \" + getName() + \"\\n Port : \" + getPort() + \"\\n-------------------------------\\n\";\n            logger.finest(\"Default Server Banner Generated\");\n        }\n        try {\n            loadApplicationClasses();\n            //load class from Advanced Settings\n            Class clientIdentifierClass = getClass(getBasicConfig().getAdvancedSettings().getClientIdentifier(), true);\n            clientIdentifier = (ClientIdentifier) clientIdentifierClass.newInstance();\n            clientIdentifier.setQuickServer(QuickServer.this);\n            //load class from ObjectPoolConfig\n            Class poolManagerClass = getClass(getBasicConfig().getObjectPoolConfig().getPoolManager(), true);\n            poolManager = (PoolManager) poolManagerClass.newInstance();\n            //load class QSObjectPoolMaker\n            Class qsObjectPoolMakerClass = getClass(getBasicConfig().getAdvancedSettings().getQSObjectPoolMaker(), true);\n            qsObjectPoolMaker = (QSObjectPoolMaker) qsObjectPoolMakerClass.newInstance();\n            loadServerHooksClasses();\n            processServerHooks(ServerHook.PRE_STARTUP);\n            if (getSecure().isLoad() == true)\n                //v1.4.0\n                loadSSLContext();\n            loadBusinessLogic();\n        } catch (ClassNotFoundException e) {\n            logger.log(Level.SEVERE, \"Could not load class/s: \" + e, e);\n            throw new AppException(\"Could not load class/s : \" + e);\n        } catch (InstantiationException e) {\n            logger.log(Level.SEVERE, \"Could not instantiate class/s: \" + e, e);\n            throw new AppException(\"Could not instantiate class/s: \" + e);\n        } catch (IllegalAccessException e) {\n            logger.log(Level.SEVERE, \"Illegal access to class/s: \" + e, e);\n            throw new AppException(\"Illegal access to class/s: \" + e);\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, \"IOException: \" + e, e);\n            throw new AppException(\"IOException: \" + e);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Exception: \" + e, e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Exception : \" + e);\n        }\n        //v1.3.3\n        if (getSecurityManagerClass() != null) {\n            System.setSecurityManager(getSecurityManager());\n        }\n        setServiceState(Service.INIT);\n        t = new Thread(this, \"QuickServer - \" + getName());\n        t.start();\n        do {\n            Thread.yield();\n        } while (getServiceState() == Service.INIT);\n        if (getServiceState() != Service.RUNNING) {\n            if (exceptionInRun != null)\n                throw new AppException(\"Could not start server \" + getName() + \"! Details: \" + exceptionInRun);\n            else\n                throw new AppException(\"Could not start server \" + getName());\n        }\n        lastStartTime = new java.util.Date();\n        logger.log(Level.FINE, \"Started {0}, Date: {1}\", new Object[] { getName(), lastStartTime });\n    }\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException {\n        processServerHooks(ServerHook.PRE_SHUTDOWN);\n        logger.log(Level.WARNING, \"Stopping {0}\", getName());\n        stopServer = true;\n        Socket death = null;\n        if (isClosed() == true) {\n            logger.log(Level.WARNING, \"Server {0} is not running!\", getName());\n            throw new AppException(\"Server \" + getName() + \" is not running!\");\n        }\n        try {\n            if (getBlockingMode() == true) {\n                if (getSecure().isEnable() == false) {\n                    death = new Socket(server.getInetAddress(), server.getLocalPort());\n                    death.getInputStream().read();\n                    death.close();\n                } else {\n                    death = getSSLSocketFactory().createSocket(server.getInetAddress(), server.getLocalPort());\n                    Thread.sleep(100);\n                    death.close();\n                }\n            }\n            if (serverSocketChannel != null) {\n                serverSocketChannel.close();\n            }\n        } catch (IOException e) {\n            logger.log(Level.FINE, \"IOError stopping {0}: {1}\", new Object[] { getName(), e });\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error stopping {0}: {1}\", new Object[] { getName(), e });\n            throw new AppException(\"Error in stopServer \" + getName() + \": \" + e);\n        }\n        for (int i = 0; getServiceState() != Service.STOPPED; i++) {\n            try {\n                Thread.sleep(60);\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error waiting for {0} to fully stop. Error: {1}\", new Object[] { getName(), e });\n            }\n            if (i > 1000) {\n                logger.severe(\"Server was not stopped even after 10sec.. will terminate now.\");\n                System.exit(-1);\n            }\n        }\n        if (adminServer == null || getQSAdminServer().getServer() != this) {\n            //so this is not qsadmin\n            setClassLoader(null);\n        }\n        logger.log(Level.INFO, \"Stopped {0}\", getName());\n    }\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException {\n        stopServer();\n        startServer();\n    }\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName() {\n        return serverName;\n    }\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name) {\n        serverName = name;\n        logger.log(Level.FINEST, \"Set to : {0}\", name);\n    }\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner() {\n        return serverBanner;\n    }\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner) {\n        serverBanner = banner;\n        logger.log(Level.FINEST, \"Set to : {0}\", banner);\n    }\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port) {\n        if (port < 0) {\n            throw new IllegalArgumentException(\"Port number can not be less than 0!\");\n        }\n        serverPort = port;\n        logger.log(Level.FINEST, \"Set to {0}\", port);\n    }\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort() {\n        if (isClosed() == false) {\n            return server.getLocalPort();\n        }\n        if (getSecure().isEnable() == false) {\n            return serverPort;\n        } else {\n            int _port = getSecure().getPort();\n            if (_port == -1)\n                return serverPort;\n            else\n                return _port;\n        }\n    }\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler) {\n        clientCommandHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler() {\n        return clientCommandHandlerString;\n    }\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data) {\n        this.clientDataString = data;\n        logger.log(Level.FINEST, \"Set to {0}\", data);\n    }\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData() {\n        return clientDataString;\n    }\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time) {\n        if (time > 0)\n            socketTimeout = time;\n        else\n            socketTimeout = 0;\n        logger.log(Level.FINEST, \"Set to {0}\", socketTimeout);\n    }\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout() {\n        return socketTimeout;\n    }\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry) {\n        maxAuthTry = authTry;\n        logger.log(Level.FINEST, \"Set to {0}\", authTry);\n    }\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry() {\n        return maxAuthTry;\n    }\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg) {\n        maxAuthTryMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg() {\n        return maxAuthTryMsg;\n    }\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg) {\n        timeoutMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg() {\n        return timeoutMsg;\n    }\n\n    private TheClient initTheClient() {\n        TheClient theClient = new TheClient();\n        theClient.setServer(QuickServer.this);\n        theClient.setTimeoutMsg(getTimeoutMsg());\n        //v1.2\n        theClient.setMaxAuthTry(getMaxAuthTry());\n        theClient.setMaxAuthTryMsg(getMaxAuthTryMsg());\n        theClient.setClientEventHandler(clientEventHandler);\n        //v1.4.6\n        theClient.setClientExtendedEventHandler(clientExtendedEventHandler);\n        theClient.setClientCommandHandler(clientCommandHandler);\n        //v1.2\n        theClient.setClientObjectHandler(clientObjectHandler);\n        //v1.4\n        theClient.setClientBinaryHandler(clientBinaryHandler);\n        //v1.4.5\n        theClient.setClientWriteHandler(clientWriteHandler);\n        //v1.3\n        theClient.setAuthenticator(authenticator);\n        //v1.4.6\n        theClient.setClientAuthenticationHandler(clientAuthenticationHandler);\n        theClient.setTimeout(socketTimeout);\n        theClient.setMaxConnectionMsg(maxConnectionMsg);\n        //v1.3.2\n        theClient.setCommunicationLogging(getCommunicationLogging());\n        return theClient;\n    }\n\n    public void run() {\n        exceptionInRun = null;\n        TheClient theClient = initTheClient();\n        try {\n            stopServer = false;\n            closeAllPools();\n            initAllPools();\n            makeServerSocket();\n            //print banner\n            System.out.println(serverBanner);\n            //v1.2\n            setServiceState(Service.RUNNING);\n            //v1.3.3\n            processServerHooks(ServerHook.POST_STARTUP);\n            if (getBlockingMode() == false) {\n                runNonBlocking(theClient);\n                if (stopServer == true) {\n                    logger.log(Level.FINEST, \"Closing selector for {0}\", getName());\n                    selector.close();\n                }\n                return;\n            } else {\n                runBlocking(theClient);\n            }\n        } catch (BindException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"{0} BindException for Port {1} @ {2} : {3}\", new Object[] { getName(), getPort(), getBindAddr().getHostAddress(), e.getMessage() });\n        } catch (javax.net.ssl.SSLException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"SSLException {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (IOException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"IOError {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (Exception e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"Error {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } finally {\n            if (getBlockingMode() == true) {\n                logger.log(Level.WARNING, \"Closing {0}\", getName());\n                try {\n                    if (isClosed() == false) {\n                        server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            } else if (getBlockingMode() == false && exceptionInRun != null) {\n                logger.log(Level.WARNING, \"Closing {0} - Had Error: {1}\", new Object[] { getName(), exceptionInRun });\n                try {\n                    if (isClosed() == false) {\n                        if (serverSocketChannel != null)\n                            serverSocketChannel.close();\n                        if (server != null)\n                            server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n        }\n    }\n\n    //end of run\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnection = maxConnection;\n        else\n            this.maxConnection = maxConnection;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnection);\n    }\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection() {\n        return maxConnection;\n    }\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount() {\n        if (clientHandlerPool != null) {\n            try {\n                return getClientHandlerPool().getNumActive();\n            } catch (Exception e) {\n                return 0;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnectionMsg = maxConnectionMsg;\n        else\n            this.maxConnectionMsg = maxConnectionMsg;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnectionMsg);\n    }\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg() {\n        return maxConnectionMsg;\n    }\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException {\n        ipAddr = InetAddress.getByName(bindAddr);\n        logger.log(Level.FINEST, \"Set to {0}\", bindAddr);\n    }\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr() {\n        if (ipAddr == null) {\n            try {\n                ipAddr = InetAddress.getByName(\"0.0.0.0\");\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Unable to create default ip(0.0.0.0) : {0}\", e);\n                throw new RuntimeException(\"Error: Unable to find servers own ip : \" + e);\n            }\n        }\n        return ipAddr;\n    }\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects) {\n        this.storeObjects = storeObjects;\n    }\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects() {\n        return storeObjects;\n    }\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port) {\n        getQSAdminServer().getServer().setPort(port);\n    }\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort() {\n        return getQSAdminServer().getServer().getPort();\n    }\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator) {\n        getQSAdminServer().getServer().setClientAuthenticationHandler(authenticator);\n    }\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator() {\n        return getQSAdminServer().getServer().getAuthenticator();\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException {\n        getQSAdminServer().setClientAuthenticationHandler(authenticator);\n        getQSAdminServer().startServer(port);\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException {\n        getQSAdminServer().startServer();\n    }\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer() {\n        if (adminServer == null)\n            adminServer = new QSAdminServer(QuickServer.this);\n        return adminServer;\n    }\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer) {\n        if (adminServer == null)\n            this.adminServer = adminServer;\n    }\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed() {\n        if (server == null)\n            return true;\n        return server.isClosed();\n    }\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger() {\n        if (appLogger != null)\n            return appLogger;\n        return logger;\n    }\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger) {\n        this.appLogger = appLogger;\n    }\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler) {\n        clientObjectHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler() {\n        return clientObjectHandlerString;\n    }\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        if (formatter == null)\n            return;\n        consoleLoggingformatter = formatter;\n        java.util.logging.Formatter conformatter = (java.util.logging.Formatter) getClass(formatter, true).newInstance();\n        Logger jdkLogger = Logger.getLogger(\"\");\n        Handler[] handlers = jdkLogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                handlers[index].setFormatter(conformatter);\n            }\n        }\n        logger.log(Level.FINEST, \"Set to {0}\", formatter);\n    }\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter() {\n        return consoleLoggingformatter;\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MiniFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to logging.MiniFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MicroFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to MicroFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        boolean isConsole = true;\n        try {\n            if (System.console() == null) {\n                isConsole = false;\n            }\n        } catch (Throwable e) {\n            //ignore\n        }\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                if (isConsole == false && level != Level.OFF) {\n                    System.out.println(\"QuickServer: You do not have a console.. so turning console logger off..\");\n                    level = Level.OFF;\n                }\n                if (level == Level.OFF) {\n                    logger.info(\"QuickServer: Removing console handler.. \");\n                    rlogger.removeHandler(handlers[index]);\n                    handlers[index].setLevel(level);\n                    handlers[index].close();\n                } else {\n                    handlers[index].setLevel(level);\n                }\n            }\n        }\n        if (level == Level.SEVERE)\n            consoleLoggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            consoleLoggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            consoleLoggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            consoleLoggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            consoleLoggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            consoleLoggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            consoleLoggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            consoleLoggingLevel = \"OFF\";\n        else\n            consoleLoggingLevel = \"UNKNOWN\";\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel() {\n        return consoleLoggingLevel;\n    }\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            handlers[index].setLevel(level);\n        }\n        if (level == Level.SEVERE)\n            loggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            loggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            loggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            loggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            loggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            loggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            loggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            loggingLevel = \"OFF\";\n        else\n            loggingLevel = \"UNKNOWN\";\n        consoleLoggingLevel = loggingLevel;\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    //*** Start of Service interface methods\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError() {\n        return serviceError;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param) {\n        serviceError = null;\n        try {\n            initServer(param);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig) {\n        serviceError = null;\n        try {\n            initServer(qsConfig);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING)\n            return false;\n        try {\n            startServer();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService() {\n        serviceError = null;\n        if (getServiceState() == Service.STOPPED)\n            return false;\n        try {\n            stopServer();\n            clearAllPools();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING) {\n            suspendMaxConnection = maxConnection;\n            suspendMaxConnectionMsg = maxConnectionMsg;\n            maxConnection = 0;\n            maxConnectionMsg = \"Service is suspended.\";\n            setServiceState(Service.SUSPENDED);\n            logger.log(Level.INFO, \"Service {0} is suspended.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService() {\n        serviceError = null;\n        if (getServiceState() == Service.SUSPENDED) {\n            maxConnection = suspendMaxConnection;\n            maxConnectionMsg = suspendMaxConnectionMsg;\n            setServiceState(Service.RUNNING);\n            logger.log(Level.INFO, \"Service {0} resumed.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info() {\n        serviceError = null;\n        StringBuilder buf = new StringBuilder();\n        buf.append(getName()).append(\"\\n\");\n        buf.append(getBindAddr().getHostAddress()).append(\" \");\n        buf.append(getPort()).append(\"\\n\");\n        return buf.toString();\n    }\n\n    // *** End of Service interface methods\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException {\n        QuickServerConfig qsConfig = null;\n        try {\n            qsConfig = ConfigReader.read((String) param[0]);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not init server from xml file {0} : {1}\", new Object[] { new File((String) param[0]).getAbsolutePath(), e });\n            throw new AppException(\"Could not init server from xml file\", e);\n        }\n        initServer(qsConfig);\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException {\n        setConfig(qsConfig);\n        try {\n            configQuickServer();\n            loadApplicationClasses();\n            //start InitServerHooks\n            InitServerHooks ish = getConfig().getInitServerHooks();\n            if (ish != null) {\n                Iterator iterator = ish.iterator();\n                String initServerHookClassName = null;\n                Class initServerHookClass = null;\n                InitServerHook initServerHook = null;\n                while (iterator.hasNext()) {\n                    initServerHookClassName = (String) iterator.next();\n                    initServerHookClass = getClass(initServerHookClassName, true);\n                    initServerHook = (InitServerHook) initServerHookClass.newInstance();\n                    logger.log(Level.INFO, \"Loaded init server hook: {0}\", initServerHookClassName);\n                    logger.log(Level.FINE, \"Init server hook info: {0}\", initServerHook.info());\n                    initServerHook.handleInit(QuickServer.this);\n                }\n            }\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not load init server hook: {0}\", e);\n            logger.log(Level.WARNING, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Could not load init server hook\", e);\n        }\n        setServiceState(Service.INIT);\n        logger.log(Level.FINEST, \"\\r\\n{0}\", MyString.getSystemInfo(getVersion()));\n    }\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState() {\n        return serviceState;\n    }\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state) {\n        serviceState = state;\n    }\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp) {\n        if (temp.equals(\"SEVERE\"))\n            qs.setConsoleLoggingLevel(Level.SEVERE);\n        else if (temp.equals(\"WARNING\"))\n            qs.setConsoleLoggingLevel(Level.WARNING);\n        else if (temp.equals(\"INFO\"))\n            qs.setConsoleLoggingLevel(Level.INFO);\n        else if (temp.equals(\"CONFIG\"))\n            qs.setConsoleLoggingLevel(Level.CONFIG);\n        else if (temp.equals(\"FINE\"))\n            qs.setConsoleLoggingLevel(Level.FINE);\n        else if (temp.equals(\"FINER\"))\n            qs.setConsoleLoggingLevel(Level.FINER);\n        else if (temp.equals(\"FINEST\"))\n            qs.setConsoleLoggingLevel(Level.FINEST);\n        else if (temp.equals(\"OFF\"))\n            qs.setConsoleLoggingLevel(Level.OFF);\n        else\n            logger.log(Level.WARNING, \"unknown level {0}\", temp);\n    }\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception {\n        QuickServer qs = QuickServer.this;\n        //v1.3\n        qs.setConfig(config);\n        qs.setBasicConfig(config);\n        String temp = config.getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        temp = null;\n        qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        //v1.3.3\n        qs.setSecurityManagerClass(config.getSecurityManagerClass());\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        temp = config.getApplicationJarPath();\n        if (temp != null) {\n            File ajp = new File(temp);\n            if (ajp.isAbsolute() == false) {\n                temp = config.getConfigFile();\n                ajp = new File(temp);\n                temp = ajp.getParent() + File.separatorChar + config.getApplicationJarPath();\n                config.setApplicationJarPath(temp);\n                temp = null;\n            }\n            qs.setApplicationJarPath(config.getApplicationJarPath());\n            //set path also to QSAdmin\n            if (config.getQSAdminServerConfig() != null) {\n                getQSAdminServer().getServer().setApplicationJarPath(config.getApplicationJarPath());\n            }\n        }\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception {\n        QuickServer qs = getQSAdminServer().getServer();\n        qs.setBasicConfig(config);\n        //set the Logging Level to same as main QS\n        //config.getConsoleLoggingLevel();\n        String temp = getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        //set the Logging Formatter to same as main QS\n        //qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setConsoleLoggingFormatter(getConsoleLoggingFormatter());\n        //v1.4.6\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        //v1.4.6\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        getQSAdminServer().setCommandPlugin(config.getCommandPlugin());\n        //v1.3.2\n        if (config.getCommandShellEnable().equals(\"true\"))\n            getQSAdminServer().setShellEnable(true);\n        getQSAdminServer().setPromptName(config.getCommandShellPromptName());\n        //v1.3.3\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception {\n        configQuickServer(getConfig());\n        if (getConfig().getQSAdminServerConfig() != null) {\n            configQuickServer(getConfig().getQSAdminServerConfig());\n        }\n    }\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args) {\n        try {\n            if (args.length >= 1) {\n                if (args[0].equals(\"-about\")) {\n                    org.quickserver.net.server.gui.About.main(null);\n                } else if (args[0].equals(\"-load\") && args.length >= 2) {\n                    QuickServer qs = QuickServer.load(args[1]);\n                    if (qs != null)\n                        handleOptions(args, qs);\n                } else {\n                    System.out.println(printUsage());\n                }\n            } else {\n                System.out.println(printUsage());\n                org.quickserver.net.server.gui.About.showAbout();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException {\n        QuickServer qs = new QuickServer();\n        Object[] config = new Object[] { xml };\n        qs.initServer(config);\n        qs.startServer();\n        if (qs.getConfig().getQSAdminServerConfig() != null) {\n            qs.startQSAdminServer();\n        }\n        return qs;\n    }\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"QuickServer - Java library/framework for creating robust multi-client TCP servers.\\n\");\n        sb.append(\"Copyright (C) QuickServer.org\\n\\n\");\n        sb.append(\"Usage: QuickServer [-options]\\n\");\n        sb.append(\"Where options include:\\n\");\n        sb.append(\"  -about\\t\" + \"Opens About Dialog box\\n\");\n        sb.append(\"  -load <xml_config_file> [load-options]\\t\" + \"Loads the server from xml file.\\n\");\n        sb.append(\"  Where load-options include:\\n\");\n        sb.append(\"     -fullXML2File <file_name>\\t\" + \"Dumps the Full XML configuration of the QuickServer loaded.\\n\");\n        return sb.toString();\n    }\n\n    private static void handleOptions(String[] args, QuickServer quickserver) {\n        if (args.length < 3)\n            return;\n        if (args[2].equals(\"-fullXML2File\") && args.length >= 4) {\n            File file = new File(args[3]);\n            logger.log(Level.INFO, \"Writing full xml configuration to file: {0}\", file.getAbsolutePath());\n            try {\n                TextFile.write(file, quickserver.getConfig().toXML(null));\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error writing full xml configuration: {0}\", e);\n            }\n        }\n    }\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception {\n        try {\n            if (pool != null)\n                getClientPool().clear();\n            if (clientHandlerPool != null)\n                getClientHandlerPool().clear();\n            if (getClientDataPool() != null)\n                getClientDataPool().clear();\n            if (getDBPoolUtil() != null)\n                getDBPoolUtil().clean();\n            if (byteBufferPool != null)\n                getByteBufferPool().clear();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error: {0}\", e);\n            throw e;\n        }\n    }\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception {\n        if (pool == null && clientHandlerPool == null && getClientDataPool() == null && getDBPoolUtil() == null && byteBufferPool == null) {\n            return;\n        }\n        logger.log(Level.FINE, \"Closing pools for {0}\", getName());\n        try {\n            if (pool != null && PoolHelper.isPoolOpen(getClientPool().getObjectPool())) {\n                logger.finer(\"Closing ClientThread pool.\");\n                getClientPool().close();\n            }\n            if (clientHandlerPool != null && PoolHelper.isPoolOpen(getClientHandlerPool())) {\n                logger.finer(\"Closing ClientHandler pool.\");\n                getClientHandlerPool().close();\n            }\n            if (getClientDataPool() != null && PoolHelper.isPoolOpen(getClientDataPool())) {\n                logger.finer(\"Closing ClientData pool.\");\n                getClientDataPool().close();\n            }\n            if (getDBPoolUtil() != null) {\n                logger.finer(\"Closing DB pool.\");\n                getDBPoolUtil().clean();\n            }\n            if (byteBufferPool != null && PoolHelper.isPoolOpen(getByteBufferPool())) {\n                logger.finer(\"Closing ByteBuffer pool.\");\n                getByteBufferPool().close();\n            }\n            logger.log(Level.FINE, \"Closed pools for {0}\", getName());\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error closing pools for {0}: {1}\", new Object[] { getName(), e });\n            throw e;\n        }\n    }\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception {\n        logger.fine(\"Creating pools\");\n        if (getBlockingMode() == false) {\n            makeByteBufferPool(getBasicConfig().getObjectPoolConfig().getByteBufferObjectPoolConfig());\n        }\n        makeClientPool(getBasicConfig().getObjectPoolConfig().getThreadObjectPoolConfig());\n        makeClientHandlerPool(getBasicConfig().getObjectPoolConfig().getClientHandlerObjectPoolConfig());\n        //check if client data is poolable\n        if (clientDataClass != null) {\n            try {\n                clientData = (ClientData) clientDataClass.newInstance();\n                if (PoolableObject.class.isInstance(clientData) == true) {\n                    PoolableObject po = (PoolableObject) clientData;\n                    if (po.isPoolable() == true) {\n                        makeClientDataPool(po.getPoolableObjectFactory(), getBasicConfig().getObjectPoolConfig().getClientDataObjectPoolConfig());\n                    } else {\n                        clientDataPool = null;\n                        logger.fine(\"ClientData is not poolable!\");\n                    }\n                }\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error: {0}\", e);\n                throw e;\n            }\n        }\n        try {\n            makeDBObjectPool();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error in makeDBObjectPool() : {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw e;\n        }\n        logger.fine(\"Created pools\");\n    }\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool() {\n        if (pool == null)\n            throw new IllegalStateException(\"No ClientPool available yet!\");\n        return pool;\n    }\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientHandler pool\");\n        PoolableObjectFactory factory = new ClientHandlerObjectFactory(getBlockingMode());\n        clientHandlerPool = poolManager.makeClientHandlerPool(factory, opConfig);\n        poolManager.initPool(clientHandlerPool, opConfig);\n        clientHandlerPool = makeQSObjectPool(clientHandlerPool);\n        clientIdentifier.setClientHandlerPool((QSObjectPool) clientHandlerPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool() {\n        if (clientHandlerPool == null)\n            throw new IllegalStateException(\"No ClientHandler Pool available yet!\");\n        return clientHandlerPool;\n    }\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config) {\n        this.config = config;\n    }\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig() {\n        return config;\n    }\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientData pool\");\n        clientDataPool = poolManager.makeClientDataPool(factory, opConfig);\n        poolManager.initPool(clientDataPool, opConfig);\n        clientDataPool = makeQSObjectPool(clientDataPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool() {\n        return clientDataPool;\n    }\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil() {\n        return dBPoolUtil;\n    }\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig) {\n        getConfig().setDBObjectPoolConfig(dBObjectPoolConfig);\n    }\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception {\n        if (getConfig().getDBObjectPoolConfig() != null) {\n            logger.fine(\"Creating DBObject Pool\");\n            //logger.finest(\"Got:\\n\"+getConfig().getDBObjectPoolConfig().toXML(null));\n            Class dbPoolUtilClass = getClass(getConfig().getDBObjectPoolConfig().getDbPoolUtil(), true);\n            dBPoolUtil = (DBPoolUtil) dbPoolUtilClass.newInstance();\n            dBPoolUtil.setDatabaseConnections(getConfig().getDBObjectPoolConfig().getDatabaseConnectionSet().iterator());\n            dBPoolUtil.initPool();\n        }\n    }\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id) {\n        return clientIdentifier.findFirstClientById(id);\n    }\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient() {\n        return clientIdentifier.findAllClient();\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern) {\n        return clientIdentifier.findAllClientById(pattern);\n    }\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key) {\n        return clientIdentifier.findClientByKey(key);\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern) {\n        return clientIdentifier.findAllClientByKey(pattern);\n    }\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted() {\n        setSkipValidation(true);\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation() {\n        return skipValidation;\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation) {\n        skipValidation = validation;\n    }\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging) {\n        this.communicationLogging = communicationLogging;\n    }\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging() {\n        return communicationLogging;\n    }\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass) {\n        if (securityManagerClass != null)\n            this.securityManagerClass = securityManagerClass;\n    }\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass() {\n        return securityManagerClass;\n    }\n\n    public SecurityManager getSecurityManager() throws AppException {\n        if (getSecurityManagerClass() == null)\n            return null;\n        SecurityManager sm = null;\n        try {\n            sm = (SecurityManager) getClass(getSecurityManagerClass(), true).newInstance();\n        } catch (ClassNotFoundException e) {\n            throw new AppException(e.getMessage());\n        } catch (InstantiationException e) {\n            throw new AppException(e.getMessage());\n        } catch (IllegalAccessException e) {\n            throw new AppException(e.getMessage());\n        }\n        return sm;\n    }\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig) {\n        this.accessConstraintConfig = accessConstraintConfig;\n    }\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig() {\n        return accessConstraintConfig;\n    }\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader) {\n        this.classLoader = classLoader;\n        Thread.currentThread().setContextClassLoader(classLoader);\n    }\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader() {\n        return classLoader;\n    }\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException {\n        if (name == null)\n            throw new IllegalArgumentException(\"Class name can't be null!\");\n        logger.log(Level.FINEST, \"Class: {0}, reload: {1}\", new Object[] { name, reload });\n        if (reload == true && classLoader != null) {\n            return classLoader.loadClass(name);\n        } else if (reload == true && classLoader == null && this.getClass().getClassLoader() != null) {\n            return this.getClass().getClassLoader().loadClass(name);\n        } else if (reload == false && classLoader != null) {\n            return Class.forName(name, true, classLoader);\n        } else /*if(reload==false && classLoader==null)*/\n        {\n            return Class.forName(name, true, this.getClass().getClassLoader());\n        }\n    }\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath) {\n        this.applicationJarPath = applicationJarPath;\n    }\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath() {\n        return applicationJarPath;\n    }\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks) {\n        this.serverHooks = serverHooks;\n    }\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks() {\n        if (serverHooks == null)\n            serverHooks = new ServerHooks();\n        return serverHooks;\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses() {\n        if (getServerHooks() == null)\n            return;\n        listOfServerHooks = new ArrayList();\n        ServerHook serverHook = null;\n        String serverHookClassName = null;\n        Class serverHookClass = null;\n        //add system hooks\n        serverHook = new GhostSocketReaper();\n        serverHook.initHook(QuickServer.this);\n        listOfServerHooks.add(serverHook);\n        ghostSocketReaper = (GhostSocketReaper) serverHook;\n        //add user hooks if any\n        Iterator iterator = getServerHooks().iterator();\n        while (iterator.hasNext()) {\n            serverHookClassName = (String) iterator.next();\n            try {\n                serverHookClass = getClass(serverHookClassName, true);\n                serverHook = (ServerHook) serverHookClass.newInstance();\n                serverHook.initHook(QuickServer.this);\n                listOfServerHooks.add(serverHook);\n                logger.log(Level.INFO, \"Loaded server hook: {0}\", serverHookClassName);\n                logger.log(Level.FINE, \"Server hook info: {0}\", serverHook.info());\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Could not load server hook [{0}]: {1}\", new Object[] { serverHookClassName, e });\n                logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            }\n        }\n        //end of while\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event) {\n        if (listOfServerHooks == null) {\n            logger.warning(\"listOfServerHooks was null!\");\n            return;\n        }\n        ServerHook serverHook = null;\n        boolean result = false;\n        Iterator iterator = listOfServerHooks.iterator();\n        String hooktype = \"UNKNOWN\";\n        switch(event) {\n            case ServerHook.PRE_STARTUP:\n                hooktype = \"PRE_STARTUP\";\n                break;\n            case ServerHook.POST_STARTUP:\n                hooktype = \"POST_STARTUP\";\n                break;\n            case ServerHook.PRE_SHUTDOWN:\n                hooktype = \"PRE_SHUTDOWN\";\n                break;\n            case ServerHook.POST_SHUTDOWN:\n                hooktype = \"POST_SHUTDOWN\";\n                break;\n        }\n        while (iterator.hasNext()) {\n            serverHook = (ServerHook) iterator.next();\n            try {\n                result = serverHook.handleEvent(event);\n            } catch (Exception e) {\n                result = false;\n                logger.log(Level.WARNING, \"Error invoking {0} hook [{1}]: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), e.getMessage() });\n            }\n            logger.log(Level.FINE, \"Invoked {0} hook [{1}] was: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), result });\n        }\n    }\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone() {\n        Object object = null;\n        try {\n            object = super.clone();\n            QuickServer _qs = (QuickServer) object;\n            _qs.setQSAdminServer(new QSAdminServer(_qs));\n        } catch (CloneNotSupportedException e) {\n            //should not happ\n            logger.log(Level.WARNING, \"Error cloning : {0}\", e);\n        }\n        return object;\n    }\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure) {\n        this.secure = secure;\n    }\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure() {\n        if (secure == null)\n            secure = new Secure();\n        return secure;\n    }\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure() {\n        return runningSecure;\n    }\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure) {\n        this.runningSecure = runningSecure;\n    }\n\n    private File makeAbsoluteToConfig(String fileName) {\n        Assertion.affirm(fileName != null, \"FileName can't be null\");\n        return ConfigReader.makeAbsoluteToConfig(fileName, getConfig());\n    }\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException {\n        server = null;\n        logger.log(Level.FINEST, \"Binding {0} to IP: {1}\", new Object[] { getName(), getBindAddr() });\n        InetSocketAddress bindAddress = new InetSocketAddress(getBindAddr(), getPort());\n        try {\n            NetworkInterface ni = NetworkInterface.getByInetAddress(getBindAddr());\n            if (ni != null) {\n                logger.fine(\"NetworkInterface: \" + ni);\n            }\n        } catch (Exception igrnore) {\n            /*ignore*/\n        } catch (Error igrnore) {\n            /*ignore*/\n        }\n        if (getSecure().isEnable() == false) {\n            logger.log(Level.FINE, \"Making a normal ServerSocket for {0}\", getName());\n            setRunningSecure(false);\n            if (getBlockingMode() == false) {\n                //for non-blocking\n                serverSocketChannel = ServerSocketChannel.open();\n                server = serverSocketChannel.socket();\n                server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n            } else {\n                //for blocking\n                server = new ServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n            }\n        } else {\n            try {\n                logger.log(Level.FINE, \"Making a secure ServerSocket for {0}\", getName());\n                getSSLContext();\n                setRunningSecure(true);\n                if (getBlockingMode() == false) {\n                    logger.log(Level.FINE, \"Making a secure ServerSocketChannel for {0}\", getName());\n                    //for non-blocking\n                    serverSocketChannel = ServerSocketChannel.open();\n                    server = serverSocketChannel.socket();\n                    server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n                } else {\n                    ServerSocketFactory ssf = getSSLContext().getServerSocketFactory();\n                    SSLServerSocket serversocket = (SSLServerSocket) ssf.createServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n                    serversocket.setNeedClientAuth(secure.isClientAuthEnable());\n                    setRunningSecure(true);\n                    secureStoreManager.logSSLServerSocketInfo(serversocket);\n                    server = serversocket;\n                    serverSocketChannel = server.getChannel();\n                    if (serverSocketChannel == null && getBlockingMode() == false) {\n                        logger.warning(\"Secure Server does not support Channel! So will run in blocking mode.\");\n                        blockingMode = false;\n                    }\n                }\n                //blocking\n            } catch (NoSuchAlgorithmException e) {\n                logger.log(Level.WARNING, \"NoSuchAlgorithmException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            } catch (KeyManagementException e) {\n                logger.log(Level.WARNING, \"KeyManagementException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            }\n        }\n        server.setReuseAddress(true);\n        int connectionTime = 0;\n        int latency = 0;\n        int bandwidth = 0;\n        connectionTime = getBasicConfig().getAdvancedSettings().getPerformancePreferencesConnectionTime();\n        latency = getBasicConfig().getAdvancedSettings().getPerformancePreferencesLatency();\n        bandwidth = getBasicConfig().getAdvancedSettings().getPerformancePreferencesBandwidth();\n        logger.log(Level.FINE, \"getPerformancePreferencesConnectionTime : {0}\", connectionTime);\n        logger.log(Level.FINE, \"getPerformancePreferencesLatency : {0}\", latency);\n        logger.log(Level.FINE, \"getPerformancePreferencesBandwidth : {0}\", bandwidth);\n        server.setPerformancePreferences(connectionTime, latency, bandwidth);\n        int clientSocketReceiveBufferSize = getBasicConfig().getAdvancedSettings().getClientSocketReceiveBufferSize();\n        if (clientSocketReceiveBufferSize > 0) {\n            logger.log(Level.FINE, \"clientSocketReceiveBufferSize: {0}\", clientSocketReceiveBufferSize);\n            server.setReceiveBufferSize(clientSocketReceiveBufferSize);\n        }\n        if (getBlockingMode() == false) {\n            logger.log(Level.FINE, \"Server Mode {0} - Non Blocking\", getName());\n            if (selector == null || selector.isOpen() == false) {\n                logger.finest(\"Opening new selector\");\n                selector = Selector.open();\n            } else {\n                logger.log(Level.FINEST, \"Reusing selector: {0}\", selector);\n            }\n            serverSocketChannel.configureBlocking(false);\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n            selector.wakeup();\n        } else {\n            logger.log(Level.FINE, \"Server Mode {0} - Blocking\", getName());\n        }\n    }\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception {\n        Assertion.affirm(basicConfig != null, \"BasicServerConfig can't be null\");\n        this.basicConfig = basicConfig;\n    }\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig() {\n        return basicConfig;\n    }\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException {\n        if (getSecure().isLoad() == false) {\n            throw new IllegalStateException(\"Secure setting is not yet enabled for loading!\");\n        }\n        logger.info(\"Loading Secure Context..\");\n        km = null;\n        tm = null;\n        try {\n            String ssManager = \"org.quickserver.security.SecureStoreManager\";\n            if (getSecure().getSecureStore() != null)\n                ssManager = getSecure().getSecureStore().getSecureStoreManager();\n            Class secureStoreManagerClass = getClass(ssManager, true);\n            secureStoreManager = (SecureStoreManager) secureStoreManagerClass.newInstance();\n            km = secureStoreManager.loadKeyManagers(getConfig());\n            logger.fine(\"KeyManager got\");\n            tm = secureStoreManager.loadTrustManagers(getConfig());\n            logger.fine(\"TrustManager got\");\n            sslc = secureStoreManager.getSSLContext(getConfig().getSecure().getProtocol());\n            sslc.init(km, tm, null);\n            logger.fine(\"SSLContext loaded\");\n        } catch (KeyStoreException e) {\n            logger.warning(\"KeyStoreException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchAlgorithmException e) {\n            logger.warning(\"NoSuchAlgorithmException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchProviderException e) {\n            logger.warning(\"NoSuchProviderException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (UnrecoverableKeyException e) {\n            logger.warning(\"UnrecoverableKeyException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (CertificateException e) {\n            logger.warning(\"CertificateException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (KeyManagementException e) {\n            logger.warning(\"KeyManagementException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (GeneralSecurityException e) {\n            logger.warning(\"GeneralSecurityException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (ClassNotFoundException e) {\n            logger.warning(\"ClassNotFoundException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (InstantiationException e) {\n            logger.warning(\"InstantiationException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (IllegalAccessException e) {\n            logger.warning(\"IllegalAccessException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        return getSSLContext(null);\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        if (protocol != null && secureStoreManager != null) {\n            SSLContext _sslc = secureStoreManager.getSSLContext(protocol);\n            _sslc.init(km, tm, null);\n            return _sslc;\n        }\n        return sslc;\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext());\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext(protocol));\n    }\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler) {\n        clientBinaryHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler() {\n        return clientBinaryHandlerString;\n    }\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector) {\n        this.selector = selector;\n    }\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector() {\n        return selector;\n    }\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception {\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        //long stime = System.currentTimeMillis();\n        //long etime = System.currentTimeMillis();\n        while (true) {\n            //etime = System.currentTimeMillis();\n            //System.out.println(\"Time Taken: \"+(etime-stime));\n            client = server.accept();\n            //stime = System.currentTimeMillis();\n            if (linger < 0) {\n                client.setSoLinger(false, 0);\n            } else {\n                client.setSoLinger(true, linger);\n            }\n            client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                //low delay=10\n                client.setTrafficClass(socketTrafficClass);\n            }\n            logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n            }\n            if (stopServer) {\n                //Client connected when server was about to be shutdown.\n                try {\n                    client.close();\n                } catch (Exception e) {\n                }\n                break;\n            }\n            if (checkAccessConstraint(client) == false) {\n                continue;\n            }\n            //Check if max connection has reached\n            if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                theClient.setClientEvent(ClientEvent.MAX_CON_BLOCKING);\n            } else {\n                theClient.setClientEvent(ClientEvent.RUN_BLOCKING);\n            }\n            theClient.setTrusted(getSkipValidation());\n            theClient.setSocket(client);\n            //mostly null\n            theClient.setSocketChannel(client.getChannel());\n            if (clientDataClass != null) {\n                if (getClientDataPool() == null) {\n                    clientData = (ClientData) clientDataClass.newInstance();\n                } else {\n                    clientData = (ClientData) getClientDataPool().borrowObject();\n                }\n                theClient.setClientData(clientData);\n            }\n            try {\n                _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                _chPolled.handleClient(theClient);\n            } catch (java.util.NoSuchElementException nsee) {\n                logger.warning(\"Could not borrow ClientHandler from pool. Error: \" + nsee);\n                logger.warning(\"Closing Socket [\" + client + \"] since no ClientHandler available.\");\n                client.close();\n            }\n            if (_chPolled != null) {\n                try {\n                    getClientPool().addClient(_chPolled, true);\n                } catch (java.util.NoSuchElementException nsee) {\n                    logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                    //logger.warning(\"Closing Socket [\"+client+\"] since no Thread available.\");\n                    //client.close();\n                    //returnClientHandlerToPool(_chPolled);\n                }\n                _chPolled = null;\n            }\n            client = null;\n            //reset it back\n            setSkipValidation(false);\n        }\n        //end of loop\n    }\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception {\n        int selectCount = 0;\n        Iterator iterator = null;\n        SelectionKey key = null;\n        ServerSocketChannel serverChannel = null;\n        SocketChannel socketChannel = null;\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        boolean stopServerProcessed = false;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        registerChannelRequestMap = new HashMap();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        while (true) {\n            selectCount = selector.select(500);\n            //selectCount = selector.select();//for testing\n            //check for any pending registerChannel req.\n            synchronized (registerChannelRequestMap) {\n                if (registerChannelRequestMap.size() > 0) {\n                    RegisterChannelRequest req = null;\n                    Object hashkey = null;\n                    iterator = registerChannelRequestMap.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        hashkey = iterator.next();\n                        req = (RegisterChannelRequest) registerChannelRequestMap.get(hashkey);\n                        req.register(getSelector());\n                    }\n                    iterator = null;\n                    registerChannelRequestMap.clear();\n                }\n                //if\n            }\n            //sync\n            if (stopServer == true && stopServerProcessed == false) {\n                logger.warning(\"Closing \" + getName());\n                serverSocketChannel.close();\n                stopServerProcessed = true;\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.warning(\"Closed \" + getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n            if (stopServer == false && stopServerProcessed == true) {\n                logger.finest(\"Server must have re-started.. will break\");\n                break;\n            }\n            if (selectCount == 0 && stopServerProcessed == true) {\n                java.util.Set keyset = selector.keys();\n                if (keyset.isEmpty() == true && getClientCount() <= 0) {\n                    break;\n                } else {\n                    continue;\n                }\n            } else if (selectCount == 0) {\n                continue;\n            }\n            iterator = selector.selectedKeys().iterator();\n            while (iterator.hasNext()) {\n                key = (SelectionKey) iterator.next();\n                if (key.isValid() == false) {\n                    iterator.remove();\n                    continue;\n                }\n                if (key.isAcceptable() && stopServer == false) {\n                    logger.finest(\"Key is Acceptable\");\n                    serverChannel = (ServerSocketChannel) key.channel();\n                    socketChannel = serverChannel.accept();\n                    if (socketChannel == null) {\n                        iterator.remove();\n                        continue;\n                    }\n                    client = socketChannel.socket();\n                    if (linger < 0) {\n                        client.setSoLinger(false, 0);\n                    } else {\n                        client.setSoLinger(true, linger);\n                    }\n                    client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                        //low delay=10\n                        client.setTrafficClass(socketTrafficClass);\n                    }\n                    logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                        client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                        logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n                    }\n                    if (checkAccessConstraint(client) == false) {\n                        iterator.remove();\n                        continue;\n                    }\n                    socketChannel.configureBlocking(false);\n                    theClient.setTrusted(getSkipValidation());\n                    theClient.setSocket(socketChannel.socket());\n                    theClient.setSocketChannel(socketChannel);\n                    if (clientDataClass != null) {\n                        if (getClientDataPool() == null) {\n                            clientData = (ClientData) clientDataClass.newInstance();\n                        } else {\n                            //borrow a object from pool\n                            clientData = (ClientData) getClientDataPool().borrowObject();\n                        }\n                        theClient.setClientData(clientData);\n                    }\n                    //Check if max connection has reached\n                    if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                        theClient.setClientEvent(ClientEvent.MAX_CON);\n                    } else {\n                        theClient.setClientEvent(ClientEvent.ACCEPT);\n                    }\n                    try {\n                        _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                        logger.finest(\"Asking \" + _chPolled.getName() + \" to handle.\");\n                        _chPolled.handleClient(theClient);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.warning(\"Could not borrow ClientHandler Object from pool. Error: \" + nsee);\n                        logger.warning(\"Closing SocketChannel [\" + serverChannel.socket() + \"] since no ClientHandler available.\");\n                        socketChannel.close();\n                    }\n                    if (_chPolled != null) {\n                        try {\n                            getClientPool().addClient(_chPolled, true);\n                        } catch (java.util.NoSuchElementException nsee) {\n                            logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                            //logger.warning(\"Closing SocketChannel [\"+serverChannel.socket()+\"] since no Thread available.\");\n                            //socketChannel.close();\n                            //returnClientHandlerToPool(_chPolled);\n                        }\n                        _chPolled = null;\n                    }\n                    socketChannel = null;\n                    client = null;\n                    //reset it back\n                    setSkipValidation(false);\n                } else if (key.isValid() && key.isReadable()) {\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Readable, removing OP_READ from interestOps for \" + _ch.getName());\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_READ));\n                        _ch.addEvent(ClientEvent.READ);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.READ);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (key.isValid() && key.isWritable()) {\n                    if (getClientPool().shouldNioWriteHappen() == false) {\n                        //no need to remove the key\n                        continue;\n                    }\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Writable, removing OP_WRITE from interestOps for \" + _ch.getName());\n                        //remove OP_WRITE from interest set\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));\n                        _ch.addEvent(ClientEvent.WRITE);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.WRITE);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (stopServer == true && key.isAcceptable()) {\n                    //we will not accept this key\n                    //reset it back\n                    setSkipValidation(false);\n                } else {\n                    logger.warning(\"Unknown key got in SelectionKey: \" + key);\n                }\n                //Remove key\n                iterator.remove();\n                Thread.yield();\n            }\n            //end of iterator\n            iterator = null;\n        }\n        //end of loop\n    }\n\n    private boolean checkAccessConstraint(Socket socket) {\n        try {\n            if (getAccessConstraintConfig() != null) {\n                getAccessConstraintConfig().checkAccept(socket);\n            }\n            return true;\n        } catch (SecurityException se) {\n            logger.warning(\"SecurityException occurred accepting connection : \" + se.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException {\n        if (getSelector() == null) {\n            throw new IllegalStateException(\"Selector is not open!\");\n        }\n        if (channel == null) {\n            throw new IllegalArgumentException(\"Can't register a null channel!\");\n        }\n        if (channel.isConnected() == false) {\n            throw new ClosedChannelException();\n        }\n        RegisterChannelRequest req = new RegisterChannelRequest(channel, ops, att);\n        RegisterChannelRequest reqOld = null;\n        synchronized (registerChannelRequestMap) {\n            reqOld = (RegisterChannelRequest) registerChannelRequestMap.get(channel);\n            if (reqOld == null) {\n                registerChannelRequestMap.put(channel, req);\n                getSelector().wakeup();\n                return true;\n            } else {\n                if (reqOld.equals(req) == false) {\n                    reqOld.setOps(reqOld.getOps() | req.getOps());\n                    reqOld.setAtt(req.getAtt());\n                    return true;\n                }\n                return false;\n            }\n        }\n        /*\n\t\tlogger.warning(\"Before register...\");\n\t\tchannel.register(getSelector(), ops, att);\n\t\tlogger.warning(\"Before wakeup and after register...\");\n\t\tgetSelector().wakeup();\n\t\tlogger.warning(\"After wakeup...\");\n\t\t*/\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig) {\n        logger.finer(\"Creating ByteBufferPool pool\");\n        int bufferSize = getBasicConfig().getAdvancedSettings().getByteBufferSize();\n        boolean useDirectByteBuffer = getBasicConfig().getAdvancedSettings().getUseDirectByteBuffer();\n        PoolableObjectFactory factory = new ByteBufferObjectFactory(bufferSize, useDirectByteBuffer);\n        byteBufferPool = poolManager.makeByteBufferPool(factory, opConfig);\n        poolManager.initPool(byteBufferPool, opConfig);\n    }\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool() {\n        return byteBufferPool;\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientThread pool\");\n        ThreadObjectFactory factory = new ThreadObjectFactory();\n        ObjectPool objectPool = poolManager.makeClientPool(factory, opConfig);\n        pool = new ClientPool(makeQSObjectPool(objectPool), opConfig);\n        factory.setClientPool(pool);\n        pool.setMaxThreadsForNioWrite(getBasicConfig().getAdvancedSettings().getMaxThreadsForNioWrite());\n        poolManager.initPool(objectPool, opConfig);\n    }\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler) {\n        clientWriteHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler() {\n        return clientWriteHandlerString;\n    }\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime() {\n        return lastStartTime;\n    }\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag) {\n        org.quickserver.util.io.ByteBufferOutputStream.setDebug(flag);\n        org.quickserver.util.io.ByteBufferInputStream.setDebug(flag);\n    }\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier() {\n        return clientIdentifier;\n    }\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception {\n        return (QSObjectPool) qsObjectPoolMaker.getQSObjectPool(objectPool);\n    }\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode() {\n        return blockingMode;\n    }\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception {\n        if (clientCommandHandlerString == null && clientEventHandlerString == null) {\n            logger.severe(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n            throw new AppException(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n        }\n        clientCommandHandler = null;\n        if (clientCommandHandlerString != null) {\n            logger.finest(\"Loading ClientCommandHandler class..\");\n            Class clientCommandHandlerClass = getClass(clientCommandHandlerString, true);\n            clientCommandHandler = (ClientCommandHandler) clientCommandHandlerClass.newInstance();\n        }\n        boolean setClientCommandHandlerLookup = false;\n        clientEventHandler = null;\n        if (clientEventHandlerString == null) {\n            clientEventHandlerString = \"org.quickserver.net.server.impl.DefaultClientEventHandler\";\n            setClientCommandHandlerLookup = true;\n        }\n        logger.finest(\"Loading ClientEventHandler class..\");\n        if (clientEventHandlerString.equals(clientCommandHandlerString) && ClientEventHandler.class.isInstance(clientCommandHandler)) {\n            clientEventHandler = (ClientEventHandler) clientCommandHandler;\n        } else {\n            clientEventHandler = (ClientEventHandler) getClass(clientEventHandlerString, true).newInstance();\n            if (setClientCommandHandlerLookup) {\n                ((DefaultClientEventHandler) clientEventHandler).setClientCommandHandler(clientCommandHandler);\n            }\n        }\n        clientExtendedEventHandler = null;\n        if (clientExtendedEventHandlerString != null) {\n            logger.finest(\"Loading ClientExtendedEventHandler class..\");\n            if (clientExtendedEventHandlerString.equals(clientCommandHandlerString) && ClientExtendedEventHandler.class.isInstance(clientCommandHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientCommandHandler;\n            } else if (clientExtendedEventHandlerString.equals(clientEventHandlerString) && ClientExtendedEventHandler.class.isInstance(clientEventHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientEventHandler;\n            } else {\n                Class clientExtendedEventHandlerClass = getClass(clientExtendedEventHandlerString, true);\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientExtendedEventHandlerClass.newInstance();\n            }\n        }\n        clientObjectHandler = null;\n        if (clientObjectHandlerString != null) {\n            logger.finest(\"Loading ClientObjectHandler class..\");\n            if (clientObjectHandlerString.equals(clientCommandHandlerString) && ClientObjectHandler.class.isInstance(clientCommandHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientCommandHandler;\n            } else if (clientObjectHandlerString.equals(clientEventHandlerString) && ClientObjectHandler.class.isInstance(clientEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientEventHandler;\n            } else if (clientObjectHandlerString.equals(clientExtendedEventHandlerString) && ClientObjectHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientExtendedEventHandler;\n            } else {\n                clientObjectHandler = (ClientObjectHandler) getClass(clientObjectHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientBinaryHandler = null;\n        if (clientBinaryHandlerString != null) {\n            logger.finest(\"Loading ClientBinaryHandler class..\");\n            if (clientBinaryHandlerString.equals(clientCommandHandlerString) && ClientBinaryHandler.class.isInstance(clientCommandHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientCommandHandler;\n            } else if (clientBinaryHandlerString.equals(clientEventHandlerString) && ClientBinaryHandler.class.isInstance(clientEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientExtendedEventHandlerString) && ClientBinaryHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientExtendedEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientObjectHandlerString) && ClientBinaryHandler.class.isInstance(clientObjectHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientObjectHandler;\n            } else {\n                clientBinaryHandler = (ClientBinaryHandler) getClass(clientBinaryHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientWriteHandler = null;\n        if (clientWriteHandlerString != null) {\n            logger.finest(\"Loading ClientWriteHandler class..\");\n            if (clientWriteHandlerString.equals(clientCommandHandlerString) && ClientWriteHandler.class.isInstance(clientCommandHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientCommandHandler;\n            } else if (clientWriteHandlerString.equals(clientEventHandlerString) && ClientWriteHandler.class.isInstance(clientEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientEventHandler;\n            } else if (clientWriteHandlerString.equals(clientExtendedEventHandlerString) && ClientWriteHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientExtendedEventHandler;\n            } else if (clientWriteHandlerString.equals(clientObjectHandlerString) && ClientWriteHandler.class.isInstance(clientObjectHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientObjectHandler;\n            } else if (clientWriteHandlerString.equals(clientBinaryHandlerString) && ClientWriteHandler.class.isInstance(clientBinaryHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientBinaryHandler;\n            } else {\n                clientWriteHandler = (ClientWriteHandler) getClass(clientWriteHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        Class authenticatorClass = null;\n        if (clientAuthenticationHandlerString != null) {\n            logger.finest(\"Loading ClientAuthenticationHandler class..\");\n            authenticatorClass = getClass(clientAuthenticationHandlerString, true);\n        }\n        if (authenticatorClass != null) {\n            Object obj = authenticatorClass.newInstance();\n            if (ClientAuthenticationHandler.class.isInstance(obj))\n                clientAuthenticationHandler = (ClientAuthenticationHandler) obj;\n            else\n                authenticator = (Authenticator) obj;\n        }\n        clientDataClass = null;\n        if (clientDataString != null) {\n            logger.finest(\"Loading ClientData class..\");\n            clientDataClass = getClass(clientDataString, true);\n        }\n        Assertion.affirm(clientEventHandler != null, \"ClientEventHandler was not loaded!\");\n    }\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler) {\n        clientEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler() {\n        return clientEventHandlerString;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException {\n        if (dataType == DataType.IN)\n            this.defaultDataModeIN = dataMode;\n        if (dataType == DataType.OUT)\n            this.defaultDataModeOUT = dataMode;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException {\n        defaultDataModeIN = defaultDataMode.getDataMode(DataType.IN);\n        defaultDataModeOUT = defaultDataMode.getDataMode(DataType.OUT);\n        ;\n    }\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType) {\n        if (dataType == DataType.IN)\n            return defaultDataModeIN;\n        if (dataType == DataType.OUT)\n            return defaultDataModeOUT;\n        else\n            throw new IllegalArgumentException(\"Unknown DataType: \" + dataType);\n    }\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler) {\n        clientExtendedEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler() {\n        return clientExtendedEventHandlerString;\n    }\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception {\n        if (getApplicationJarPath() != null && getClassLoader() == null) {\n            setClassLoader(ClassUtil.getClassLoader(getApplicationJarPath()));\n            //update qsadmin to use the same\n            if (adminServer != null) {\n                adminServer.getServer().setClassLoader(getClassLoader());\n            }\n        }\n    }\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID() {\n        return pid;\n    }\n\n    public boolean isRawCommunicationLogging() {\n        return rawCommunicationLogging;\n    }\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging) {\n        this.rawCommunicationLogging = rawCommunicationLogging;\n    }\n\n    public int getRawCommunicationMaxLength() {\n        return rawCommunicationMaxLength;\n    }\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength) {\n        this.rawCommunicationMaxLength = rawCommunicationMaxLength;\n    }\n}\n",
        "test_prompt": "// QuickServer_19Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#getSSLSocketFactory(String)} method.\n*/\nclass QuickServer_19Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// QuickServer_22Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#getPID()} method.\n*/\nclass QuickServer_22Test {\n}"
            }
        ],
        "id": "b1c7756b-2362-4ca0-8598-afb5b9ed9c1b",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/server/QuickServer_22Test.java",
        "original_code": "// QuickServer.java\n/*\n * This file is part of the QuickServer library \n * Copyright (C) QuickServer.org\n *\n * Use, modification, copying and distribution of this software is subject to\n * the terms and conditions of the GNU Lesser General Public License. \n * You should have received a copy of the GNU LGP License along with this \n * library; if not, you can download a copy from <http://www.quickserver.org/>.\n *\n * For questions, suggestions, bug-reports, enhancement-requests etc.\n * visit http://www.quickserver.org\n *\n */\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\n\n/**\n *  Main class of QuickServer library. This class is used to create\n *  multi client servers quickly.\n *  <p>\n *  Ones a client is connected, it creates {@link ClientHandler} object,\n *  which is run using any thread available from the pool of threads\n *  maintained by {@link org.quickserver.util.pool.thread.ClientPool}, which\n *  handles the client. <br/>\n *  QuickServer divides the application logic of its developer over eight\n *  class, <br>\n *  \t<ul>\n * \t\t<li>ClientEventHandler<br>\n *  \t\t   &nbsp;Handles client events [Optional Class].\n *  \t\t<li>ClientCommandHandler [#]<br>\n *  \t\t   &nbsp;Handles client character/string commands.\n *  \t\t<li>ClientObjectHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - Object commands.\n * \t\t<li>ClientBinaryHandler [#]<br>\n *  \t\t   &nbsp;Handles client interaction - binary data.\n * \t\t<li>ClientWriteHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles client interaction - writing data (Only used in non-blocking mode).\n *  \t\t<li>ClientAuthenticationHandler [Optional Class]<br>\n *  \t\t\t&nbsp;Used to Authencatet a client.\n *  \t\t<li>ClientData [Optional Class]<br>\n *  \t\t\t&nbsp;Client data carrier (support class)\n * \t\t<li>ClientExtendedEventHandler [Optional Class]<br>\n *  \t\t   &nbsp;Handles extended client events.\n *  \t</ul>\n *\n *  [#] = Any one of these have to be set based on default DataMode for input.\n *  The default DataMode for input is String so if not changes you will\n *  have to set ClientCommandHandler.\n *  </p>\n *  <p>\n *   Eg:\n *  <code><BLOCKQUOTE><pre>\n * package echoserver;\n *\n * import org.quickserver.net.*;\n * import org.quickserver.net.server.*;\n *\n * import java.io.*;\n *\n * public class EchoServer {\n * \tpublic static void main(String args[])\t{\n * \t\tString cmdHandle = \"echoserver.EchoCommandHandler\";\n *\n * \t\tQuickServer myServer = new QuickServer();\n * \t\tmyServer.setClientCommandHandler(cmdHandle);\n * \t\tmyServer.setPort(4123);\n * \t\tmyServer.setName(Echo Server v1.0\");\n * \t\ttry {\n * \t\t\tmyServer.startServer();\n * \t\t} catch(AppException e) {\n * \t\t\tSystem.err.println(\"Error in server : \"+e);\n * \t\t\te.printStackTrace();\n * \t\t}\n * \t}\n * }\n * </pre></BLOCKQUOTE></code></p>\n *\n *  @version 1.4.8\n *  @author Akshathkumar Shetty\n */\npublic class QuickServer implements Runnable, Service, Cloneable, Serializable {\n\n    //Some variable are not initialised to any value because the\n    //default java value was desired initial value.\n    //'dev ' = development build not yet final\n    //'beta' = test build all features\n    //change also in QSAdminMain\n    private final static String VER = \"2.0.0 RC1\";\n\n    private final static String NEW_LINE;\n\n    private final static String pid;\n\n    static {\n        if (System.getProperty(\"org.quickserver.useOSLineSeparator\") != null && System.getProperty(\"org.quickserver.useOSLineSeparator\").equals(\"true\")) {\n            NEW_LINE = System.getProperty(\"line.separator\");\n        } else {\n            NEW_LINE = \"\\r\\n\";\n        }\n        String _pid = ManagementFactory.getRuntimeMXBean().getName();\n        int i = _pid.indexOf(\"@\");\n        pid = _pid.substring(0, i);\n        System.out.print(\"Loading QuickServer v\" + getVersion() + \" [PID:\" + pid + \"]\");\n    }\n\n    private String serverBanner;\n\n    //v1.4.6\n    private String clientAuthenticationHandlerString;\n\n    //v1.4.6\n    private String clientEventHandlerString;\n\n    //v1.4.6\n    private String clientExtendedEventHandlerString;\n\n    private String clientCommandHandlerString;\n\n    //v1.2\n    private String clientObjectHandlerString;\n\n    //v1.4\n    private String clientBinaryHandlerString;\n\n    //v1.4.5\n    private String clientWriteHandlerString;\n\n    private String clientDataString;\n\n    private Authenticator authenticator;\n\n    //v1.4.6\n    private ClientAuthenticationHandler clientAuthenticationHandler;\n\n    //v1.4.6\n    private ClientEventHandler clientEventHandler;\n\n    //v1.4.6\n    private ClientExtendedEventHandler clientExtendedEventHandler;\n\n    private ClientCommandHandler clientCommandHandler;\n\n    //v1.2\n    private ClientObjectHandler clientObjectHandler;\n\n    //v1.4\n    private ClientBinaryHandler clientBinaryHandler;\n\n    //v1.4.5\n    private ClientWriteHandler clientWriteHandler;\n\n    private ClientData clientData;\n\n    protected Class clientDataClass;\n\n    private int serverPort = 9876;\n\n    //Main thread\n    private Thread t;\n\n    private ServerSocket server;\n\n    private String serverName = \"QuickServer\";\n\n    private long maxConnection = -1;\n\n    //1 min socket timeout\n    private int socketTimeout = 60 * 1000;\n\n    private String maxConnectionMsg = \"-ERR Server Busy. Max Connection Reached\";\n\n    private String timeoutMsg = \"-ERR Timeout\";\n\n    private String maxAuthTryMsg = \"-ERR Max Auth Try Reached\";\n\n    //v1.2\n    private int maxAuthTry = 5;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.1\n    private InetAddress ipAddr;\n\n    private boolean stopServer;\n\n    private Object[] storeObjects;\n\n    private QSAdminServer adminServer;\n\n    //--v1.2\n    //Logger for QuickServer\n    private static final Logger logger = Logger.getLogger(QuickServer.class.getName());\n\n    //Logger for the application using this QuickServer\n    private Logger appLogger;\n\n    //for Service interface\n    //backup\n    private long suspendMaxConnection;\n\n    //backup\n    private String suspendMaxConnectionMsg;\n\n    private int serviceState = Service.UNKNOWN;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.3\n    private QuickServerConfig config = new QuickServerConfig();\n\n    private String consoleLoggingformatter;\n\n    private String consoleLoggingLevel = \"INFO\";\n\n    private ClientPool pool;\n\n    private ObjectPool clientHandlerPool;\n\n    private ObjectPool clientDataPool;\n\n    private DBPoolUtil dBPoolUtil;\n\n    //--v1.3.1\n    private String loggingLevel = \"INFO\";\n\n    //--v1.3.2\n    private boolean skipValidation = false;\n\n    private boolean communicationLogging = true;\n\n    //--v1.3.3\n    private String securityManagerClass;\n\n    private AccessConstraintConfig accessConstraintConfig;\n\n    private ClassLoader classLoader;\n\n    private String applicationJarPath;\n\n    private ServerHooks serverHooks;\n\n    private ArrayList listOfServerHooks;\n\n    static {\n        System.out.print(\".\");\n    }\n\n    //--v1.4.0\n    private Secure secure;\n\n    private BasicServerConfig basicConfig = config;\n\n    private SSLContext sslc;\n\n    private KeyManager[] km = null;\n\n    private TrustManager[] tm = null;\n\n    private boolean runningSecure = false;\n\n    private SecureStoreManager secureStoreManager = null;\n\n    private Exception exceptionInRun = null;\n\n    //--v1.4.5\n    private ServerSocketChannel serverSocketChannel;\n\n    private Selector selector;\n\n    private boolean blockingMode = true;\n\n    private ObjectPool byteBufferPool;\n\n    private java.util.Date lastStartTime;\n\n    private ClientIdentifier clientIdentifier;\n\n    private GhostSocketReaper ghostSocketReaper;\n\n    private PoolManager poolManager;\n\n    private QSObjectPoolMaker qsObjectPoolMaker;\n\n    //--v1.4.6\n    private DataMode defaultDataModeIN = DataMode.STRING;\n\n    private DataMode defaultDataModeOUT = DataMode.STRING;\n\n    //-v1.4.7\n    private Throwable serviceError;\n\n    private Map registerChannelRequestMap;\n\n    //v-1.4.8\n    private boolean rawCommunicationLogging = false;\n\n    private int rawCommunicationMaxLength = 100;\n\n    static {\n        System.out.println(\" Done\");\n        //should be commented if not a patch release\n        //System.out.println(\"[Includes patch(#): t=152&p=532]\");\n        //should be commented if not a dev release\n        //System.out.println(\"[Dev Build Date: Saturday, October 29, 2005]\");\n        logger.log(Level.FINE, \"PID: {0}\", pid);\n    }\n\n    /**\n     * Returns the version of the library.\n     */\n    public static final String getVersion() {\n        return VER;\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.2\n     */\n    public static final float getVersionNo() {\n        return getVersionNo(VER);\n    }\n\n    /**\n     * Returns the numerical version of the library.\n     * @since 1.4.5\n     */\n    public static final float getVersionNo(String ver) {\n        //String ver = getVersion();\n        float version = 0;\n        //check if beta\n        int i = ver.indexOf(\" \");\n        if (i == -1)\n            i = ver.length();\n        ver = ver.substring(0, i);\n        //check for sub version\n        i = ver.indexOf(\".\");\n        if (i != -1) {\n            int j = ver.indexOf(\".\", i);\n            if (j != -1) {\n                ver = ver.substring(0, i) + \".\" + MyString.replaceAll(ver.substring(i + 1), \".\", \"\");\n            }\n        }\n        try {\n            version = Float.parseFloat(ver);\n        } catch (NumberFormatException e) {\n            throw new RuntimeException(\"Corrupt QuickServer\");\n        }\n        return version;\n    }\n\n    /**\n     * Returns the new line string used by QuickServer.\n     * @since 1.2\n     */\n    public static String getNewLine() {\n        return NEW_LINE;\n    }\n\n    /**\n     * Returns the Server name : port of the QuickServer.\n     */\n    public String toString() {\n        return serverName + \" : \" + getPort();\n    }\n\n    /**\n     * Creates a new server without any configuration.\n     * Make sure you configure the QuickServer, before\n     * calling startServer()\n     * @see org.quickserver.net.server.ClientEventHandler\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientObjectHandler\n     * @see org.quickserver.net.server.ClientBinaryHandler\n     * @see org.quickserver.net.server.ClientWriteHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #configQuickServer\n     * @see #initService\n     * @see #setPort\n     * @see #setClientCommandHandler\n     * @since 1.2\n     */\n    public QuickServer() {\n    }\n\n    /**\n     * Creates a new server with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     * @param commandHandler the fully qualified name of the\n     *  desired class that implements {@link ClientCommandHandler}\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     * @see #setPort\n     */\n    public QuickServer(String commandHandler) {\n        setClientCommandHandler(commandHandler);\n    }\n\n    /**\n     * Creates a new server at <code>port</code> with the specified\n     * <code>commandHandler</code> has it {@link ClientCommandHandler}.\n     *\n     * @param commandHandler fully qualified name of the class that\n     * implements {@link ClientCommandHandler}\n     * @param port to listen on.\n     *\n     * @see org.quickserver.net.server.ClientCommandHandler\n     * @see org.quickserver.net.server.ClientAuthenticationHandler\n     * @see org.quickserver.net.server.ClientHandler\n     */\n    public QuickServer(String commandHandler, int port) {\n        //send to another constructor\n        this(commandHandler);\n        setPort(port);\n    }\n\n    /**\n     * Starts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @see #startService\n     */\n    public void startServer() throws AppException {\n        logger.log(Level.FINE, \"Starting {0}\", getName());\n        if (isClosed() == false) {\n            logger.log(Level.WARNING, \"Server {0} already running.\", getName());\n            throw new AppException(\"Server \" + getName() + \" already running.\");\n        }\n        blockingMode = getBasicConfig().getServerMode().getBlocking();\n        if (getSecure().isEnable() && blockingMode == false) {\n            //TODO we need to fix this..\n            logger.warning(\"QuickServer does not support secure servers under non-blocking mode! So will run in blocking mode.\");\n            blockingMode = true;\n            getBasicConfig().getServerMode().setBlocking(blockingMode);\n        }\n        if (serverBanner == null) {\n            serverBanner = \"\\n-------------------------------\" + \"\\n Name : \" + getName() + \"\\n Port : \" + getPort() + \"\\n-------------------------------\\n\";\n            logger.finest(\"Default Server Banner Generated\");\n        }\n        try {\n            loadApplicationClasses();\n            //load class from Advanced Settings\n            Class clientIdentifierClass = getClass(getBasicConfig().getAdvancedSettings().getClientIdentifier(), true);\n            clientIdentifier = (ClientIdentifier) clientIdentifierClass.newInstance();\n            clientIdentifier.setQuickServer(QuickServer.this);\n            //load class from ObjectPoolConfig\n            Class poolManagerClass = getClass(getBasicConfig().getObjectPoolConfig().getPoolManager(), true);\n            poolManager = (PoolManager) poolManagerClass.newInstance();\n            //load class QSObjectPoolMaker\n            Class qsObjectPoolMakerClass = getClass(getBasicConfig().getAdvancedSettings().getQSObjectPoolMaker(), true);\n            qsObjectPoolMaker = (QSObjectPoolMaker) qsObjectPoolMakerClass.newInstance();\n            loadServerHooksClasses();\n            processServerHooks(ServerHook.PRE_STARTUP);\n            if (getSecure().isLoad() == true)\n                //v1.4.0\n                loadSSLContext();\n            loadBusinessLogic();\n        } catch (ClassNotFoundException e) {\n            logger.log(Level.SEVERE, \"Could not load class/s: \" + e, e);\n            throw new AppException(\"Could not load class/s : \" + e);\n        } catch (InstantiationException e) {\n            logger.log(Level.SEVERE, \"Could not instantiate class/s: \" + e, e);\n            throw new AppException(\"Could not instantiate class/s: \" + e);\n        } catch (IllegalAccessException e) {\n            logger.log(Level.SEVERE, \"Illegal access to class/s: \" + e, e);\n            throw new AppException(\"Illegal access to class/s: \" + e);\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, \"IOException: \" + e, e);\n            throw new AppException(\"IOException: \" + e);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Exception: \" + e, e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Exception : \" + e);\n        }\n        //v1.3.3\n        if (getSecurityManagerClass() != null) {\n            System.setSecurityManager(getSecurityManager());\n        }\n        setServiceState(Service.INIT);\n        t = new Thread(this, \"QuickServer - \" + getName());\n        t.start();\n        do {\n            Thread.yield();\n        } while (getServiceState() == Service.INIT);\n        if (getServiceState() != Service.RUNNING) {\n            if (exceptionInRun != null)\n                throw new AppException(\"Could not start server \" + getName() + \"! Details: \" + exceptionInRun);\n            else\n                throw new AppException(\"Could not start server \" + getName());\n        }\n        lastStartTime = new java.util.Date();\n        logger.log(Level.FINE, \"Started {0}, Date: {1}\", new Object[] { getName(), lastStartTime });\n    }\n\n    /**\n     * Stops the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server\n     * @since 1.1\n     * @see #stopService\n     */\n    public void stopServer() throws AppException {\n        processServerHooks(ServerHook.PRE_SHUTDOWN);\n        logger.log(Level.WARNING, \"Stopping {0}\", getName());\n        stopServer = true;\n        Socket death = null;\n        if (isClosed() == true) {\n            logger.log(Level.WARNING, \"Server {0} is not running!\", getName());\n            throw new AppException(\"Server \" + getName() + \" is not running!\");\n        }\n        try {\n            if (getBlockingMode() == true) {\n                if (getSecure().isEnable() == false) {\n                    death = new Socket(server.getInetAddress(), server.getLocalPort());\n                    death.getInputStream().read();\n                    death.close();\n                } else {\n                    death = getSSLSocketFactory().createSocket(server.getInetAddress(), server.getLocalPort());\n                    Thread.sleep(100);\n                    death.close();\n                }\n            }\n            if (serverSocketChannel != null) {\n                serverSocketChannel.close();\n            }\n        } catch (IOException e) {\n            logger.log(Level.FINE, \"IOError stopping {0}: {1}\", new Object[] { getName(), e });\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error stopping {0}: {1}\", new Object[] { getName(), e });\n            throw new AppException(\"Error in stopServer \" + getName() + \": \" + e);\n        }\n        for (int i = 0; getServiceState() != Service.STOPPED; i++) {\n            try {\n                Thread.sleep(60);\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error waiting for {0} to fully stop. Error: {1}\", new Object[] { getName(), e });\n            }\n            if (i > 1000) {\n                logger.severe(\"Server was not stopped even after 10sec.. will terminate now.\");\n                System.exit(-1);\n            }\n        }\n        if (adminServer == null || getQSAdminServer().getServer() != this) {\n            //so this is not qsadmin\n            setClassLoader(null);\n        }\n        logger.log(Level.INFO, \"Stopped {0}\", getName());\n    }\n\n    /**\n     * Restarts the QuickServer.\n     *\n     * @exception org.quickserver.net.AppException\n     *  if could not stop server or if it could not start the server.\n     * @since 1.2\n     */\n    public void restartServer() throws AppException {\n        stopServer();\n        startServer();\n    }\n\n    /**\n     * Returns the name of the QuickServer. Default is 'QuickServer'.\n     * @see #setName\n     */\n    public String getName() {\n        return serverName;\n    }\n\n    /**\n     * Sets the name for the QuickServer\n     * @param name for the QuickServer\n     * @see #getName\n     */\n    public void setName(String name) {\n        serverName = name;\n        logger.log(Level.FINEST, \"Set to : {0}\", name);\n    }\n\n    /**\n     * Returns the Server Banner of the QuickServer\n     * @see #setServerBanner\n     */\n    public String getServerBanner() {\n        return serverBanner;\n    }\n\n    /**\n     * Sets the serverBanner for the QuickServer\n     * that will be displayed on the standard output [console]\n     * when server starts. <br>&nbsp;<br>\n     * To set welcome message to your client\n     * {@link ClientEventHandler#gotConnected}\n     * @param banner for the QuickServer\n     * @see #getServerBanner\n     */\n    public void setServerBanner(String banner) {\n        serverBanner = banner;\n        logger.log(Level.FINEST, \"Set to : {0}\", banner);\n    }\n\n    /**\n     * Sets the port for the QuickServer to listen on.\n     * If not set, it will run on Port 9876\n     * @param port to listen on.\n     * @see #getPort\n     */\n    public void setPort(int port) {\n        if (port < 0) {\n            throw new IllegalArgumentException(\"Port number can not be less than 0!\");\n        }\n        serverPort = port;\n        logger.log(Level.FINEST, \"Set to {0}\", port);\n    }\n\n    /**\n     * Returns the port for the QuickServer.\n     * @see #setPort\n     */\n    public int getPort() {\n        if (isClosed() == false) {\n            return server.getLocalPort();\n        }\n        if (getSecure().isEnable() == false) {\n            return serverPort;\n        } else {\n            int _port = getSecure().getPort();\n            if (_port == -1)\n                return serverPort;\n            else\n                return _port;\n        }\n    }\n\n    /**\n     * Sets the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientCommandHandler}\n     * @see #getClientCommandHandler\n     */\n    public void setClientCommandHandler(String handler) {\n        clientCommandHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientCommandHandler class that interacts with\n     * client sockets.\n     * @see #setClientCommandHandler\n     * @since 1.1\n     */\n    public String getClientCommandHandler() {\n        return clientCommandHandlerString;\n    }\n\n    /**\n     * Sets the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link ClientAuthenticationHandler}.\n     * @see #getClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public void setClientAuthenticationHandler(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the ClientAuthenticationHandler class that\n     * handles the authentication of a client.\n     * @see #setClientAuthenticationHandler\n     * @since 1.4.6\n     */\n    public String getClientAuthenticationHandler() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the Authenticator class that\n     * handles the authentication of a client.\n     * @param authenticator the fully qualified name of the class\n     * that implements {@link Authenticator} or {@link ClientAuthenticationHandler}.\n     * @see #getAuthenticator\n     * @deprecated since 1.4.6 use setClientAuthenticationHandler\n     * @since 1.3\n     */\n    public void setAuthenticator(String authenticator) {\n        clientAuthenticationHandlerString = authenticator;\n        logger.log(Level.FINEST, \"Set to {0}\", authenticator);\n    }\n\n    /**\n     * Returns the Authenticator class that\n     * handles the authentication of a client.\n     * @see #setAuthenticator\n     * @deprecated since 1.4.6 use getClientAuthenticationHandler\n     * @since 1.3\n     */\n    public String getAuthenticator() {\n        return clientAuthenticationHandlerString;\n    }\n\n    /**\n     * Sets the ClientData class that carries client data.\n     * @param data the fully qualified name of the class that\n     * extends {@link ClientData}.\n     * @see #getClientData\n     */\n    public void setClientData(String data) {\n        this.clientDataString = data;\n        logger.log(Level.FINEST, \"Set to {0}\", data);\n    }\n\n    /**\n     * Returns the ClientData class string that carries client data\n     * @return the fully qualified name of the class that\n     * implements {@link ClientData}.\n     * @see #setClientData\n     */\n    public String getClientData() {\n        return clientDataString;\n    }\n\n    /**\n     * Sets the client socket's timeout.\n     * @param time client socket timeout in milliseconds.\n     * @see #getTimeout\n     */\n    public void setTimeout(int time) {\n        if (time > 0)\n            socketTimeout = time;\n        else\n            socketTimeout = 0;\n        logger.log(Level.FINEST, \"Set to {0}\", socketTimeout);\n    }\n\n    /**\n     * Returns the Client socket timeout in milliseconds.\n     * @see #setTimeout\n     */\n    public int getTimeout() {\n        return socketTimeout;\n    }\n\n    /**\n     * Sets max allowed login attempts.\n     * @since 1.2\n     * @see #getMaxAuthTry\n     */\n    public void setMaxAuthTry(int authTry) {\n        maxAuthTry = authTry;\n        logger.log(Level.FINEST, \"Set to {0}\", authTry);\n    }\n\n    /**\n     * Returns max allowed login attempts. Default is <code>5</code>.\n     * @since 1.2\n     * @see #setMaxAuthTry\n     */\n    public int getMaxAuthTry() {\n        return maxAuthTry;\n    }\n\n    /**\n     * Sets message to be displayed when maximum allowed login\n     * attempts has reached.\n     * Default is : -ERR Max Auth Try Reached\n     * @see #getMaxAuthTryMsg\n     */\n    public void setMaxAuthTryMsg(String msg) {\n        maxAuthTryMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns message to be displayed when maximum allowed login\n     * attempts has reached.\n     * @see #getMaxAuthTryMsg\n     */\n    public String getMaxAuthTryMsg() {\n        return maxAuthTryMsg;\n    }\n\n    /**\n     * Sets timeout message.\n     * Default is : -ERR Timeout\n     * @see #getTimeoutMsg\n     */\n    public void setTimeoutMsg(String msg) {\n        timeoutMsg = msg;\n        logger.log(Level.FINEST, \"Set to {0}\", msg);\n    }\n\n    /**\n     * Returns timeout message.\n     * @see #setTimeoutMsg\n     */\n    public String getTimeoutMsg() {\n        return timeoutMsg;\n    }\n\n    private TheClient initTheClient() {\n        TheClient theClient = new TheClient();\n        theClient.setServer(QuickServer.this);\n        theClient.setTimeoutMsg(getTimeoutMsg());\n        //v1.2\n        theClient.setMaxAuthTry(getMaxAuthTry());\n        theClient.setMaxAuthTryMsg(getMaxAuthTryMsg());\n        theClient.setClientEventHandler(clientEventHandler);\n        //v1.4.6\n        theClient.setClientExtendedEventHandler(clientExtendedEventHandler);\n        theClient.setClientCommandHandler(clientCommandHandler);\n        //v1.2\n        theClient.setClientObjectHandler(clientObjectHandler);\n        //v1.4\n        theClient.setClientBinaryHandler(clientBinaryHandler);\n        //v1.4.5\n        theClient.setClientWriteHandler(clientWriteHandler);\n        //v1.3\n        theClient.setAuthenticator(authenticator);\n        //v1.4.6\n        theClient.setClientAuthenticationHandler(clientAuthenticationHandler);\n        theClient.setTimeout(socketTimeout);\n        theClient.setMaxConnectionMsg(maxConnectionMsg);\n        //v1.3.2\n        theClient.setCommunicationLogging(getCommunicationLogging());\n        return theClient;\n    }\n\n    public void run() {\n        exceptionInRun = null;\n        TheClient theClient = initTheClient();\n        try {\n            stopServer = false;\n            closeAllPools();\n            initAllPools();\n            makeServerSocket();\n            //print banner\n            System.out.println(serverBanner);\n            //v1.2\n            setServiceState(Service.RUNNING);\n            //v1.3.3\n            processServerHooks(ServerHook.POST_STARTUP);\n            if (getBlockingMode() == false) {\n                runNonBlocking(theClient);\n                if (stopServer == true) {\n                    logger.log(Level.FINEST, \"Closing selector for {0}\", getName());\n                    selector.close();\n                }\n                return;\n            } else {\n                runBlocking(theClient);\n            }\n        } catch (BindException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"{0} BindException for Port {1} @ {2} : {3}\", new Object[] { getName(), getPort(), getBindAddr().getHostAddress(), e.getMessage() });\n        } catch (javax.net.ssl.SSLException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"SSLException {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (IOException e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"IOError {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } catch (Exception e) {\n            exceptionInRun = e;\n            logger.log(Level.SEVERE, \"Error {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n        } finally {\n            if (getBlockingMode() == true) {\n                logger.log(Level.WARNING, \"Closing {0}\", getName());\n                try {\n                    if (isClosed() == false) {\n                        server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            } else if (getBlockingMode() == false && exceptionInRun != null) {\n                logger.log(Level.WARNING, \"Closing {0} - Had Error: {1}\", new Object[] { getName(), exceptionInRun });\n                try {\n                    if (isClosed() == false) {\n                        if (serverSocketChannel != null)\n                            serverSocketChannel.close();\n                        if (server != null)\n                            server.close();\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.log(Level.WARNING, \"Closed {0}\", getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n        }\n    }\n\n    //end of run\n    /**\n     * Sets the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #getMaxConnection\n     */\n    public void setMaxConnection(long maxConnection) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnection = maxConnection;\n        else\n            this.maxConnection = maxConnection;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnection);\n    }\n\n    /**\n     * Returns the maximum number of client connection allowed.\n     * @since 1.1\n     * @see #setMaxConnection\n     */\n    public long getMaxConnection() {\n        return maxConnection;\n    }\n\n    /**\n     * Returns number of clients connected.\n     * @since 1.1\n     */\n    public long getClientCount() {\n        if (clientHandlerPool != null) {\n            try {\n                return getClientHandlerPool().getNumActive();\n            } catch (Exception e) {\n                return 0;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Sets the message to be sent to any new client connected after\n     * maximum client connection has reached.\n     * Default is : <code>-ERR Server Busy. Max Connection Reached</code>\n     * @since 1.1\n     * @see #getMaxConnectionMsg\n     */\n    public void setMaxConnectionMsg(String maxConnectionMsg) {\n        if (getServiceState() == Service.SUSPENDED)\n            suspendMaxConnectionMsg = maxConnectionMsg;\n        else\n            this.maxConnectionMsg = maxConnectionMsg;\n        logger.log(Level.FINEST, \"Set to {0}\", maxConnectionMsg);\n    }\n\n    /**\n     * Returns the message to be sent to any new client connected\n     * after maximum client connection has reached.\n     * @since 1.1\n     * @see #setMaxConnectionMsg\n     */\n    public String getMaxConnectionMsg() {\n        return maxConnectionMsg;\n    }\n\n    /**\n     * Sets the Ip address to bind to.\n     * @param bindAddr argument can be used on a multi-homed host for a\n     * QuickServer that will only accept connect requests to one\n     * of its addresses. If not set, it will default accepting\n     * connections on any/all local addresses.\n     * @exception java.net.UnknownHostException if no IP address for\n     * the host could be found\n     * @since 1.1\n     * @see #getBindAddr\n     */\n    public void setBindAddr(String bindAddr) throws UnknownHostException {\n        ipAddr = InetAddress.getByName(bindAddr);\n        logger.log(Level.FINEST, \"Set to {0}\", bindAddr);\n    }\n\n    /**\n     * Returns the IP address binding to.\n     * @since 1.1\n     * @see #setBindAddr\n     */\n    public InetAddress getBindAddr() {\n        if (ipAddr == null) {\n            try {\n                ipAddr = InetAddress.getByName(\"0.0.0.0\");\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Unable to create default ip(0.0.0.0) : {0}\", e);\n                throw new RuntimeException(\"Error: Unable to find servers own ip : \" + e);\n            }\n        }\n        return ipAddr;\n    }\n\n    /**\n     * Sets the store of objects to QuickServer, it is an array of objects\n     * that main program or the class that created QuickServer passes to\n     * the QuickServer.\n     * @param storeObjects array of objects\n     * @see #getStoreObjects\n     * @since 1.1\n     */\n    public void setStoreObjects(Object[] storeObjects) {\n        this.storeObjects = storeObjects;\n    }\n\n    /**\n     * Returns store of objects from QuickServer, if nothing was set will\n     * return <code>null</code>.\n     * @see #setStoreObjects\n     * @since 1.1\n     */\n    public Object[] getStoreObjects() {\n        return storeObjects;\n    }\n\n    /**\n     * Set the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public void setQSAdminServerPort(int port) {\n        getQSAdminServer().getServer().setPort(port);\n    }\n\n    /**\n     * Returns the port to run QSAdminServer on.\n     * @since 1.2\n     */\n    public int getQSAdminServerPort() {\n        return getQSAdminServer().getServer().getPort();\n    }\n\n    /**\n     * Set the ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public void setQSAdminServerAuthenticator(String authenticator) {\n        getQSAdminServer().getServer().setClientAuthenticationHandler(authenticator);\n    }\n\n    /**\n     * Returns the Authenticator or ClientAuthenticationHandler class of\n     * QSAdminServer that handles the authentication of a client.\n     * @since 1.2\n     */\n    public String getQSAdminServerAuthenticator() {\n        return getQSAdminServer().getServer().getAuthenticator();\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @param authenticator sets the ClientAuthenticationHandler class that\n     *   handles the authentication of a client,\n     *   if null uses {@link org.quickserver.net.qsadmin.Authenticator}.\n     * @param port to run QSAdminServer on\n     * @exception org.quickserver.net.AppException\n     *  if Server already running or if it could not load the classes\n     *  [ClientCommandHandler, ClientAuthenticationHandler, ClientData].\n     * @since 1.1\n     */\n    public void startQSAdminServer(int port, String authenticator) throws AppException {\n        getQSAdminServer().setClientAuthenticationHandler(authenticator);\n        getQSAdminServer().startServer(port);\n    }\n\n    /**\n     * Starts QSAdminServer for this QuickServer.\n     * @see org.quickserver.net.qsadmin.QSAdminServer\n     * @since 1.2\n     */\n    public void startQSAdminServer() throws AppException {\n        getQSAdminServer().startServer();\n    }\n\n    /**\n     * Returns {@link QSAdminServer} associated with this QuickServer\n     * @since 1.1\n     */\n    public QSAdminServer getQSAdminServer() {\n        if (adminServer == null)\n            adminServer = new QSAdminServer(QuickServer.this);\n        return adminServer;\n    }\n\n    /**\n     * Sets {@link QSAdminServer} associated with this QuickServer\n     * @since 1.3.3\n     */\n    public void setQSAdminServer(QSAdminServer adminServer) {\n        if (adminServer == null)\n            this.adminServer = adminServer;\n    }\n\n    /**\n     * Returns the closed state of the QuickServer Socket.\n     * @since 1.1\n     */\n    public boolean isClosed() {\n        if (server == null)\n            return true;\n        return server.isClosed();\n    }\n\n    /**\n     * Returns the application logger associated with QuickServer.\n     * If it was not set will return QuickServer's own logger.\n     * @since 1.2\n     */\n    public Logger getAppLogger() {\n        if (appLogger != null)\n            return appLogger;\n        return logger;\n    }\n\n    /**\n     * Sets the application logger associated with QuickServer\n     * @since 1.2\n     */\n    public void setAppLogger(Logger appLogger) {\n        this.appLogger = appLogger;\n    }\n\n    /**\n     * Sets the ClientObjectHandler class that interacts with\n     * client sockets to handle java objects.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientObjectHandler}\n     * @see #getClientObjectHandler\n     * @since 1.2\n     */\n    public void setClientObjectHandler(String handler) {\n        clientObjectHandlerString = handler;\n        logger.log(Level.FINEST, \"Set to {0}\", handler);\n    }\n\n    /**\n     * Returns the ClientObjectHandler class that interacts with\n     * client sockets.\n     * @see #setClientObjectHandler\n     * @since 1.2\n     */\n    public String getClientObjectHandler() {\n        return clientObjectHandlerString;\n    }\n\n    /**\n     * Sets the console log handler formatter.\n     * @param formatter fully qualified name of the class that implements\n     * {@link java.util.logging.Formatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingFormatter(String formatter) throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        if (formatter == null)\n            return;\n        consoleLoggingformatter = formatter;\n        java.util.logging.Formatter conformatter = (java.util.logging.Formatter) getClass(formatter, true).newInstance();\n        Logger jdkLogger = Logger.getLogger(\"\");\n        Handler[] handlers = jdkLogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                handlers[index].setFormatter(conformatter);\n            }\n        }\n        logger.log(Level.FINEST, \"Set to {0}\", formatter);\n    }\n\n    /**\n     * Gets the console log handler formatter.\n     * @since 1.3\n     */\n    public String getConsoleLoggingFormatter() {\n        return consoleLoggingformatter;\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MiniFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMini() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MiniFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to logging.MiniFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler formater to\n     * {@link org.quickserver.util.logging.MicroFormatter}\n     * @since 1.2\n     */\n    public void setConsoleLoggingToMicro() {\n        try {\n            setConsoleLoggingFormatter(\"org.quickserver.util.logging.MicroFormatter\");\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Setting to MicroFormatter : {0}\", e);\n        }\n    }\n\n    /**\n     * Sets the console log handler level.\n     * @since 1.2\n     */\n    public void setConsoleLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        boolean isConsole = true;\n        try {\n            if (System.console() == null) {\n                isConsole = false;\n            }\n        } catch (Throwable e) {\n            //ignore\n        }\n        for (int index = 0; index < handlers.length; index++) {\n            if (ConsoleHandler.class.isInstance(handlers[index])) {\n                if (isConsole == false && level != Level.OFF) {\n                    System.out.println(\"QuickServer: You do not have a console.. so turning console logger off..\");\n                    level = Level.OFF;\n                }\n                if (level == Level.OFF) {\n                    logger.info(\"QuickServer: Removing console handler.. \");\n                    rlogger.removeHandler(handlers[index]);\n                    handlers[index].setLevel(level);\n                    handlers[index].close();\n                } else {\n                    handlers[index].setLevel(level);\n                }\n            }\n        }\n        if (level == Level.SEVERE)\n            consoleLoggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            consoleLoggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            consoleLoggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            consoleLoggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            consoleLoggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            consoleLoggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            consoleLoggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            consoleLoggingLevel = \"OFF\";\n        else\n            consoleLoggingLevel = \"UNKNOWN\";\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    /**\n     * Gets the console log handler level.\n     * @since 1.3\n     */\n    public String getConsoleLoggingLevel() {\n        return consoleLoggingLevel;\n    }\n\n    /**\n     * Sets the level for all log handlers.\n     * @since 1.3.1\n     */\n    public void setLoggingLevel(Level level) {\n        Logger rlogger = Logger.getLogger(\"\");\n        Handler[] handlers = rlogger.getHandlers();\n        for (int index = 0; index < handlers.length; index++) {\n            handlers[index].setLevel(level);\n        }\n        if (level == Level.SEVERE)\n            loggingLevel = \"SEVERE\";\n        else if (level == Level.WARNING)\n            loggingLevel = \"WARNING\";\n        else if (level == Level.INFO)\n            loggingLevel = \"INFO\";\n        else if (level == Level.CONFIG)\n            loggingLevel = \"CONFIG\";\n        else if (level == Level.FINE)\n            loggingLevel = \"FINE\";\n        else if (level == Level.FINER)\n            loggingLevel = \"FINER\";\n        else if (level == Level.FINEST)\n            loggingLevel = \"FINEST\";\n        else if (level == Level.OFF)\n            loggingLevel = \"OFF\";\n        else\n            loggingLevel = \"UNKNOWN\";\n        consoleLoggingLevel = loggingLevel;\n        logger.log(Level.FINE, \"Set to {0}\", level);\n    }\n\n    //*** Start of Service interface methods\n    /**\n     * Returns service error if any.\n     * @since 1.4.7\n     */\n    public Throwable getServiceError() {\n        return serviceError;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param param of the xml configuration file.\n     * @since 1.2\n     */\n    public synchronized boolean initService(Object[] param) {\n        serviceError = null;\n        try {\n            initServer(param);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.6\n     */\n    public synchronized boolean initService(QuickServerConfig qsConfig) {\n        serviceError = null;\n        try {\n            initServer(qsConfig);\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Start the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean startService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING)\n            return false;\n        try {\n            startServer();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Stop the service.\n     * @return true if serivce was stopped from Running state.\n     * @since 1.2\n     */\n    public boolean stopService() {\n        serviceError = null;\n        if (getServiceState() == Service.STOPPED)\n            return false;\n        try {\n            stopServer();\n            clearAllPools();\n        } catch (AppException e) {\n            serviceError = e;\n            return false;\n        } catch (Exception e) {\n            serviceError = e;\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Suspends the service.\n     * @return true if service was suspended from resumed state.\n     * @since 1.2\n     */\n    public boolean suspendService() {\n        serviceError = null;\n        if (getServiceState() == Service.RUNNING) {\n            suspendMaxConnection = maxConnection;\n            suspendMaxConnectionMsg = maxConnectionMsg;\n            maxConnection = 0;\n            maxConnectionMsg = \"Service is suspended.\";\n            setServiceState(Service.SUSPENDED);\n            logger.log(Level.INFO, \"Service {0} is suspended.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Resume the service.\n     * @return true if service was resumed from suspended state.\n     * @since 1.2\n     */\n    public boolean resumeService() {\n        serviceError = null;\n        if (getServiceState() == Service.SUSPENDED) {\n            maxConnection = suspendMaxConnection;\n            maxConnectionMsg = suspendMaxConnectionMsg;\n            setServiceState(Service.RUNNING);\n            logger.log(Level.INFO, \"Service {0} resumed.\", getName());\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Information about the service.\n     * @since 1.2\n     */\n    public String info() {\n        serviceError = null;\n        StringBuilder buf = new StringBuilder();\n        buf.append(getName()).append(\"\\n\");\n        buf.append(getBindAddr().getHostAddress()).append(\" \");\n        buf.append(getPort()).append(\"\\n\");\n        return buf.toString();\n    }\n\n    // *** End of Service interface methods\n    /**\n     * Initialise and create the server.\n     * @param param of the xml configuration file.\n     * @exception AppException if QuickServerConfig creation failed from the xml config file.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(Object[] param) throws AppException {\n        QuickServerConfig qsConfig = null;\n        try {\n            qsConfig = ConfigReader.read((String) param[0]);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not init server from xml file {0} : {1}\", new Object[] { new File((String) param[0]).getAbsolutePath(), e });\n            throw new AppException(\"Could not init server from xml file\", e);\n        }\n        initServer(qsConfig);\n    }\n\n    /**\n     * Initialise and create the service.\n     * @param qsConfig QuickServerConfig object.\n     * @since 1.4.7\n     */\n    public synchronized void initServer(QuickServerConfig qsConfig) throws AppException {\n        setConfig(qsConfig);\n        try {\n            configQuickServer();\n            loadApplicationClasses();\n            //start InitServerHooks\n            InitServerHooks ish = getConfig().getInitServerHooks();\n            if (ish != null) {\n                Iterator iterator = ish.iterator();\n                String initServerHookClassName = null;\n                Class initServerHookClass = null;\n                InitServerHook initServerHook = null;\n                while (iterator.hasNext()) {\n                    initServerHookClassName = (String) iterator.next();\n                    initServerHookClass = getClass(initServerHookClassName, true);\n                    initServerHook = (InitServerHook) initServerHookClass.newInstance();\n                    logger.log(Level.INFO, \"Loaded init server hook: {0}\", initServerHookClassName);\n                    logger.log(Level.FINE, \"Init server hook info: {0}\", initServerHook.info());\n                    initServerHook.handleInit(QuickServer.this);\n                }\n            }\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"Could not load init server hook: {0}\", e);\n            logger.log(Level.WARNING, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw new AppException(\"Could not load init server hook\", e);\n        }\n        setServiceState(Service.INIT);\n        logger.log(Level.FINEST, \"\\r\\n{0}\", MyString.getSystemInfo(getVersion()));\n    }\n\n    /**\n     * Returns the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public int getServiceState() {\n        return serviceState;\n    }\n\n    /**\n     * Sets the state of the process\n     * As any constant of {@link Service} interface.\n     * @since 1.2\n     */\n    public void setServiceState(int state) {\n        serviceState = state;\n    }\n\n    private void configConsoleLoggingLevel(QuickServer qs, String temp) {\n        if (temp.equals(\"SEVERE\"))\n            qs.setConsoleLoggingLevel(Level.SEVERE);\n        else if (temp.equals(\"WARNING\"))\n            qs.setConsoleLoggingLevel(Level.WARNING);\n        else if (temp.equals(\"INFO\"))\n            qs.setConsoleLoggingLevel(Level.INFO);\n        else if (temp.equals(\"CONFIG\"))\n            qs.setConsoleLoggingLevel(Level.CONFIG);\n        else if (temp.equals(\"FINE\"))\n            qs.setConsoleLoggingLevel(Level.FINE);\n        else if (temp.equals(\"FINER\"))\n            qs.setConsoleLoggingLevel(Level.FINER);\n        else if (temp.equals(\"FINEST\"))\n            qs.setConsoleLoggingLevel(Level.FINEST);\n        else if (temp.equals(\"OFF\"))\n            qs.setConsoleLoggingLevel(Level.OFF);\n        else\n            logger.log(Level.WARNING, \"unknown level {0}\", temp);\n    }\n\n    /**\n     * Configures QuickServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QuickServerConfig config) throws Exception {\n        QuickServer qs = QuickServer.this;\n        //v1.3\n        qs.setConfig(config);\n        qs.setBasicConfig(config);\n        String temp = config.getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        temp = null;\n        qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        //v1.3.3\n        qs.setSecurityManagerClass(config.getSecurityManagerClass());\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        temp = config.getApplicationJarPath();\n        if (temp != null) {\n            File ajp = new File(temp);\n            if (ajp.isAbsolute() == false) {\n                temp = config.getConfigFile();\n                ajp = new File(temp);\n                temp = ajp.getParent() + File.separatorChar + config.getApplicationJarPath();\n                config.setApplicationJarPath(temp);\n                temp = null;\n            }\n            qs.setApplicationJarPath(config.getApplicationJarPath());\n            //set path also to QSAdmin\n            if (config.getQSAdminServerConfig() != null) {\n                getQSAdminServer().getServer().setApplicationJarPath(config.getApplicationJarPath());\n            }\n        }\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer based on the passed QuickServerConfig object.\n     * @since 1.2\n     */\n    public void configQuickServer(QSAdminServerConfig config) throws Exception {\n        QuickServer qs = getQSAdminServer().getServer();\n        qs.setBasicConfig(config);\n        //set the Logging Level to same as main QS\n        //config.getConsoleLoggingLevel();\n        String temp = getConsoleLoggingLevel();\n        configConsoleLoggingLevel(qs, temp);\n        //set the Logging Formatter to same as main QS\n        //qs.setConsoleLoggingFormatter(config.getConsoleLoggingFormatter());\n        qs.setConsoleLoggingFormatter(getConsoleLoggingFormatter());\n        //v1.4.6\n        qs.setClientEventHandler(config.getClientEventHandler());\n        qs.setClientCommandHandler(config.getClientCommandHandler());\n        qs.setName(config.getName());\n        qs.setPort(config.getPort());\n        if (config.getAuthenticator() != null)\n            //v1.3\n            qs.setAuthenticator(config.getAuthenticator());\n        else if (config.getClientAuthenticationHandler() != null)\n            //v1.4.6\n            qs.setClientAuthenticationHandler(config.getClientAuthenticationHandler());\n        qs.setClientObjectHandler(config.getClientObjectHandler());\n        //v1.4\n        qs.setClientBinaryHandler(config.getClientBinaryHandler());\n        //v1.4.5\n        qs.setClientWriteHandler(config.getClientWriteHandler());\n        qs.setClientData(config.getClientData());\n        //v1.4.6\n        qs.setClientExtendedEventHandler(config.getClientExtendedEventHandler());\n        //v1.4.6\n        qs.setDefaultDataMode(config.getDefaultDataMode());\n        qs.setServerBanner(config.getServerBanner());\n        qs.setTimeout(config.getTimeout());\n        qs.setMaxAuthTry(config.getMaxAuthTry());\n        qs.setMaxAuthTryMsg(config.getMaxAuthTryMsg());\n        qs.setTimeoutMsg(config.getTimeoutMsg());\n        qs.setMaxConnection(config.getMaxConnection());\n        qs.setMaxConnectionMsg(config.getMaxConnectionMsg());\n        qs.setBindAddr(config.getBindAddr());\n        //v1.3.2\n        qs.setCommunicationLogging(config.getCommunicationLogging());\n        getQSAdminServer().setCommandPlugin(config.getCommandPlugin());\n        //v1.3.2\n        if (config.getCommandShellEnable().equals(\"true\"))\n            getQSAdminServer().setShellEnable(true);\n        getQSAdminServer().setPromptName(config.getCommandShellPromptName());\n        //v1.3.3\n        qs.setAccessConstraintConfig(config.getAccessConstraintConfig());\n        qs.setServerHooks(config.getServerHooks());\n        qs.setSecure(config.getSecure());\n    }\n\n    /**\n     * Configures QSAdminServer and QuickServer based on the\n     * internal QuickServerConfig object.\n     * @since 1.3\n     */\n    public void configQuickServer() throws Exception {\n        configQuickServer(getConfig());\n        if (getConfig().getQSAdminServerConfig() != null) {\n            configQuickServer(getConfig().getQSAdminServerConfig());\n        }\n    }\n\n    /**\n     * Usage: QuickServer [-options]<br/>\n     * Where options include:<br/>\n     *   -about\t\tOpens About Dialogbox<br/>\n     *   -load <xml_config_file> [options]\tLoads the server from xml file.\n     * where options include:\n     *    -fullXML2File <new_file_name>\n     */\n    public static void main(String[] args) {\n        try {\n            if (args.length >= 1) {\n                if (args[0].equals(\"-about\")) {\n                    org.quickserver.net.server.gui.About.main(null);\n                } else if (args[0].equals(\"-load\") && args.length >= 2) {\n                    QuickServer qs = QuickServer.load(args[1]);\n                    if (qs != null)\n                        handleOptions(args, qs);\n                } else {\n                    System.out.println(printUsage());\n                }\n            } else {\n                System.out.println(printUsage());\n                org.quickserver.net.server.gui.About.showAbout();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Loads the server from the xml file name passed.\n     * @since 1.4.7\n     */\n    public static QuickServer load(String xml) throws AppException {\n        QuickServer qs = new QuickServer();\n        Object[] config = new Object[] { xml };\n        qs.initServer(config);\n        qs.startServer();\n        if (qs.getConfig().getQSAdminServerConfig() != null) {\n            qs.startQSAdminServer();\n        }\n        return qs;\n    }\n\n    /**\n     * Prints usage\n     */\n    private static String printUsage() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"QuickServer - Java library/framework for creating robust multi-client TCP servers.\\n\");\n        sb.append(\"Copyright (C) QuickServer.org\\n\\n\");\n        sb.append(\"Usage: QuickServer [-options]\\n\");\n        sb.append(\"Where options include:\\n\");\n        sb.append(\"  -about\\t\" + \"Opens About Dialog box\\n\");\n        sb.append(\"  -load <xml_config_file> [load-options]\\t\" + \"Loads the server from xml file.\\n\");\n        sb.append(\"  Where load-options include:\\n\");\n        sb.append(\"     -fullXML2File <file_name>\\t\" + \"Dumps the Full XML configuration of the QuickServer loaded.\\n\");\n        return sb.toString();\n    }\n\n    private static void handleOptions(String[] args, QuickServer quickserver) {\n        if (args.length < 3)\n            return;\n        if (args[2].equals(\"-fullXML2File\") && args.length >= 4) {\n            File file = new File(args[3]);\n            logger.log(Level.INFO, \"Writing full xml configuration to file: {0}\", file.getAbsolutePath());\n            try {\n                TextFile.write(file, quickserver.getConfig().toXML(null));\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error writing full xml configuration: {0}\", e);\n            }\n        }\n    }\n\n    /**\n     * Cleans all Object and Thread pools\n     * @since 1.3\n     */\n    public void clearAllPools() throws Exception {\n        try {\n            if (pool != null)\n                getClientPool().clear();\n            if (clientHandlerPool != null)\n                getClientHandlerPool().clear();\n            if (getClientDataPool() != null)\n                getClientDataPool().clear();\n            if (getDBPoolUtil() != null)\n                getDBPoolUtil().clean();\n            if (byteBufferPool != null)\n                getByteBufferPool().clear();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error: {0}\", e);\n            throw e;\n        }\n    }\n\n    /**\n     * Closes all Object and Thread pools\n     * @since 1.3\n     */\n    public void closeAllPools() throws Exception {\n        if (pool == null && clientHandlerPool == null && getClientDataPool() == null && getDBPoolUtil() == null && byteBufferPool == null) {\n            return;\n        }\n        logger.log(Level.FINE, \"Closing pools for {0}\", getName());\n        try {\n            if (pool != null && PoolHelper.isPoolOpen(getClientPool().getObjectPool())) {\n                logger.finer(\"Closing ClientThread pool.\");\n                getClientPool().close();\n            }\n            if (clientHandlerPool != null && PoolHelper.isPoolOpen(getClientHandlerPool())) {\n                logger.finer(\"Closing ClientHandler pool.\");\n                getClientHandlerPool().close();\n            }\n            if (getClientDataPool() != null && PoolHelper.isPoolOpen(getClientDataPool())) {\n                logger.finer(\"Closing ClientData pool.\");\n                getClientDataPool().close();\n            }\n            if (getDBPoolUtil() != null) {\n                logger.finer(\"Closing DB pool.\");\n                getDBPoolUtil().clean();\n            }\n            if (byteBufferPool != null && PoolHelper.isPoolOpen(getByteBufferPool())) {\n                logger.finer(\"Closing ByteBuffer pool.\");\n                getByteBufferPool().close();\n            }\n            logger.log(Level.FINE, \"Closed pools for {0}\", getName());\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error closing pools for {0}: {1}\", new Object[] { getName(), e });\n            throw e;\n        }\n    }\n\n    /**\n     * Initialise all Object and Thread pools.\n     * @since 1.3\n     */\n    public void initAllPools() throws Exception {\n        logger.fine(\"Creating pools\");\n        if (getBlockingMode() == false) {\n            makeByteBufferPool(getBasicConfig().getObjectPoolConfig().getByteBufferObjectPoolConfig());\n        }\n        makeClientPool(getBasicConfig().getObjectPoolConfig().getThreadObjectPoolConfig());\n        makeClientHandlerPool(getBasicConfig().getObjectPoolConfig().getClientHandlerObjectPoolConfig());\n        //check if client data is poolable\n        if (clientDataClass != null) {\n            try {\n                clientData = (ClientData) clientDataClass.newInstance();\n                if (PoolableObject.class.isInstance(clientData) == true) {\n                    PoolableObject po = (PoolableObject) clientData;\n                    if (po.isPoolable() == true) {\n                        makeClientDataPool(po.getPoolableObjectFactory(), getBasicConfig().getObjectPoolConfig().getClientDataObjectPoolConfig());\n                    } else {\n                        clientDataPool = null;\n                        logger.fine(\"ClientData is not poolable!\");\n                    }\n                }\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Error: {0}\", e);\n                throw e;\n            }\n        }\n        try {\n            makeDBObjectPool();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"Error in makeDBObjectPool() : {0}\", e);\n            logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            throw e;\n        }\n        logger.fine(\"Created pools\");\n    }\n\n    /**\n     * Returns {@link org.quickserver.util.pool.thread.ClientPool} class that\n     * managing the pool of threads for handling clients.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ClientPool getClientPool() {\n        if (pool == null)\n            throw new IllegalStateException(\"No ClientPool available yet!\");\n        return pool;\n    }\n\n    /**\n     * Makes the pool of ClientHandler\n     * @since 1.3\n     */\n    private void makeClientHandlerPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientHandler pool\");\n        PoolableObjectFactory factory = new ClientHandlerObjectFactory(getBlockingMode());\n        clientHandlerPool = poolManager.makeClientHandlerPool(factory, opConfig);\n        poolManager.initPool(clientHandlerPool, opConfig);\n        clientHandlerPool = makeQSObjectPool(clientHandlerPool);\n        clientIdentifier.setClientHandlerPool((QSObjectPool) clientHandlerPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientHandler}\n     * class.\n     * @exception IllegalStateException if pool is not created yet.\n     * @since 1.3\n     */\n    public ObjectPool getClientHandlerPool() {\n        if (clientHandlerPool == null)\n            throw new IllegalStateException(\"No ClientHandler Pool available yet!\");\n        return clientHandlerPool;\n    }\n\n    /**\n     * Sets the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public void setConfig(QuickServerConfig config) {\n        this.config = config;\n    }\n\n    /**\n     * Returns the configuration of the QuickServer.\n     * @since 1.3\n     */\n    public QuickServerConfig getConfig() {\n        return config;\n    }\n\n    /**\n     * Makes the pool of ClientData\n     * @since 1.3\n     */\n    private void makeClientDataPool(PoolableObjectFactory factory, PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientData pool\");\n        clientDataPool = poolManager.makeClientDataPool(factory, opConfig);\n        poolManager.initPool(clientDataPool, opConfig);\n        clientDataPool = makeQSObjectPool(clientDataPool);\n    }\n\n    /**\n     * Returns ObjectPool of {@link org.quickserver.net.server.ClientData}\n     * class. If ClientData was not poolable will return  null.\n     * @since 1.3\n     */\n    public ObjectPool getClientDataPool() {\n        return clientDataPool;\n    }\n\n    /**\n     * Returns {@link org.quickserver.sql.DBPoolUtil} object if\n     * {@link org.quickserver.util.xmlreader.DBObjectPoolConfig} was set.\n     * @return DBPoolUtil object if object could be loaded, else will return <code>null</code>\n     * @since 1.3\n     */\n    public DBPoolUtil getDBPoolUtil() {\n        return dBPoolUtil;\n    }\n\n    /**\n     * Sets {@link org.quickserver.util.xmlreader.DBObjectPoolConfig}\n     * @since 1.3\n     */\n    public void setDBObjectPoolConfig(DBObjectPoolConfig dBObjectPoolConfig) {\n        getConfig().setDBObjectPoolConfig(dBObjectPoolConfig);\n    }\n\n    /**\n     * Makes the pool of Database Objects\n     * @since 1.3\n     */\n    private void makeDBObjectPool() throws Exception {\n        if (getConfig().getDBObjectPoolConfig() != null) {\n            logger.fine(\"Creating DBObject Pool\");\n            //logger.finest(\"Got:\\n\"+getConfig().getDBObjectPoolConfig().toXML(null));\n            Class dbPoolUtilClass = getClass(getConfig().getDBObjectPoolConfig().getDbPoolUtil(), true);\n            dBPoolUtil = (DBPoolUtil) dbPoolUtilClass.newInstance();\n            dBPoolUtil.setDatabaseConnections(getConfig().getDBObjectPoolConfig().getDatabaseConnectionSet().iterator());\n            dBPoolUtil.initPool();\n        }\n    }\n\n    /**\n     *  Tries to find the Client by the Id passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same clinet has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findFirstClientById(String id) {\n        return clientIdentifier.findFirstClientById(id);\n    }\n\n    /**\n     *  Returns an iterator containing all the\n     *  {@link org.quickserver.net.server.ClientHandler} that\n     *  are currently handling clients.\n     *  It is recommended not to change the collection under an iterator.\n     *\n     *  It is imperative that the user manually synchronize on the returned collection\n     *  when iterating over it:\n     *  <code><pre>\n     *    Eg:\n     *\n     * \tClientData foundClientData = null;\n     * \tObject syncObj = quickserver.getClientIdentifier().getObjectToSynchronize();\n     * \tsynchronized(syncObj) {\n     * \t\tIterator iterator = quickserver.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *\n     * \t//OR\n     *\n     * \tClientData foundClientData = null;\n     * \tClientIdentifier clientIdentifier = quickserver.getClientIdentifier();\n     * \tsynchronized(clientIdentifier.getObjectToSynchronize()) {\n     * \t\tIterator iterator = clientIdentifier.findAllClient();\n     * \t\twhile(iterator.hasNext()) {\n     * \t\t\tfoundClientHandler = (ClientHandler) iterator.next();\n     * \t\t\t....\n     * \t\t}\n     * \t}\n     *    </code></pre>\n     *  @since 1.3.1\n     */\n    public Iterator findAllClient() {\n        return clientIdentifier.findAllClient();\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the Id.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientById(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.2\n     */\n    public Iterator findAllClientById(String pattern) {\n        return clientIdentifier.findAllClientById(pattern);\n    }\n\n    /**\n     *  Tries to find the Client by the Key passed.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//someother client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findClientByKey(\"friendskey\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.3.1\n     */\n    public ClientHandler findClientByKey(String key) {\n        return clientIdentifier.findClientByKey(key);\n    }\n\n    /**\n     *  Tries to find the Client by the matching pattern passed to the key.\n     *  <p>\n     *  Note: This command is an expensive so do use it limitedly and\n     *  cache the returned object. But before you start sending message to the\n     *  cached object do validate that ClientHandler with you is currently\n     *  connected and is pointing to the same client has it was before.\n     *  This can be done as follows. <pre>\n     * \tfoundClientHandler.isConnected(); //this method will through SocketException if not connected\n     * \tDate newTime = foundClientHandler.getClientConnectedTime();\n     * \tif(oldCachedTime!=newTime) {\n     * \t\t//Client had disconnected and ClientHandler was reused for\n     * \t\t//some other client, so write code to again find ur client\n     * \t\tfoundClientHandler = handler.getServer().findFirstClientByKey(\"friendsid\");\n     * \t\t...\n     * \t}</pre>\n     *  </p>\n     *  @see ClientIdentifiable\n     *  @return ClientHandler object if client was found else <code>null</code>\n     *  @since 1.4\n     */\n    public Iterator findAllClientByKey(String pattern) {\n        return clientIdentifier.findAllClientByKey(pattern);\n    }\n\n    /**\n     * Sets next client has a trusted client.\n     * <p>This will skip any authentication and will not set any timeout.</p>\n     * @since 1.3.2\n     */\n    public void nextClientIsTrusted() {\n        setSkipValidation(true);\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized boolean getSkipValidation() {\n        return skipValidation;\n    }\n\n    /**\n     * @since 1.3.2\n     */\n    private synchronized void setSkipValidation(boolean validation) {\n        skipValidation = validation;\n    }\n\n    /**\n     * Sets the communication logging flag.\n     * @see #getCommunicationLogging\n     * @since 1.3.2\n     */\n    public void setCommunicationLogging(boolean communicationLogging) {\n        this.communicationLogging = communicationLogging;\n    }\n\n    /**\n     * Returns the communication logging flag.\n     * @see #setCommunicationLogging\n     * @since 1.3.2\n     */\n    public boolean getCommunicationLogging() {\n        return communicationLogging;\n    }\n\n    /**\n     * Sets the SecurityManager class\n     * @param securityManagerClass the fully qualified name of the class\n     * that extends {@link java.lang.SecurityManager}.\n     * @see #getSecurityManagerClass\n     * @since 1.3.3\n     */\n    public void setSecurityManagerClass(String securityManagerClass) {\n        if (securityManagerClass != null)\n            this.securityManagerClass = securityManagerClass;\n    }\n\n    /**\n     * Returns the SecurityManager class\n     * @see #setSecurityManagerClass\n     * @since 1.3.3\n     */\n    public String getSecurityManagerClass() {\n        return securityManagerClass;\n    }\n\n    public SecurityManager getSecurityManager() throws AppException {\n        if (getSecurityManagerClass() == null)\n            return null;\n        SecurityManager sm = null;\n        try {\n            sm = (SecurityManager) getClass(getSecurityManagerClass(), true).newInstance();\n        } catch (ClassNotFoundException e) {\n            throw new AppException(e.getMessage());\n        } catch (InstantiationException e) {\n            throw new AppException(e.getMessage());\n        } catch (IllegalAccessException e) {\n            throw new AppException(e.getMessage());\n        }\n        return sm;\n    }\n\n    /**\n     * Sets the Access constraints\n     * @since 1.3.3\n     */\n    public void setAccessConstraintConfig(AccessConstraintConfig accessConstraintConfig) {\n        this.accessConstraintConfig = accessConstraintConfig;\n    }\n\n    /**\n     * Returns Access constraints if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public AccessConstraintConfig getAccessConstraintConfig() {\n        return accessConstraintConfig;\n    }\n\n    /**\n     * Sets the classloader to be used to load the dynamically resolved\n     * classes\n     * @since 1.3.3\n     */\n    public void setClassLoader(ClassLoader classLoader) {\n        this.classLoader = classLoader;\n        Thread.currentThread().setContextClassLoader(classLoader);\n    }\n\n    /**\n     * Gets the classloader used to load the dynamically resolved\n     * classes.\n     * @since 1.4.6\n     */\n    public ClassLoader getClassLoader() {\n        return classLoader;\n    }\n\n    /**\n     * Utility method to load a class\n     * @since 1.3.3\n     */\n    public Class getClass(String name, boolean reload) throws ClassNotFoundException {\n        if (name == null)\n            throw new IllegalArgumentException(\"Class name can't be null!\");\n        logger.log(Level.FINEST, \"Class: {0}, reload: {1}\", new Object[] { name, reload });\n        if (reload == true && classLoader != null) {\n            return classLoader.loadClass(name);\n        } else if (reload == true && classLoader == null && this.getClass().getClassLoader() != null) {\n            return this.getClass().getClassLoader().loadClass(name);\n        } else if (reload == false && classLoader != null) {\n            return Class.forName(name, true, classLoader);\n        } else /*if(reload==false && classLoader==null)*/\n        {\n            return Class.forName(name, true, this.getClass().getClassLoader());\n        }\n    }\n\n    /**\n     * Sets the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing\n     * the jars needed by the application.\n     * @see #getApplicationJarPath\n     * @since 1.3.3\n     */\n    protected void setApplicationJarPath(String applicationJarPath) {\n        this.applicationJarPath = applicationJarPath;\n    }\n\n    /**\n     * Returns the applications jar/s path. This can be either absolute or\n     * relative(to config file) path to the jar file or the directory containing the\n     * jars needed by the application.\n     * @see #setApplicationJarPath\n     * @since 1.3.3\n     */\n    public String getApplicationJarPath() {\n        return applicationJarPath;\n    }\n\n    /**\n     * Sets the ServerHooks\n     * @since 1.3.3\n     */\n    public void setServerHooks(ServerHooks serverHooks) {\n        this.serverHooks = serverHooks;\n    }\n\n    /**\n     * Returns ServerHooks if present else <code>null</code>.\n     * @since 1.3.3\n     */\n    public ServerHooks getServerHooks() {\n        if (serverHooks == null)\n            serverHooks = new ServerHooks();\n        return serverHooks;\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void loadServerHooksClasses() {\n        if (getServerHooks() == null)\n            return;\n        listOfServerHooks = new ArrayList();\n        ServerHook serverHook = null;\n        String serverHookClassName = null;\n        Class serverHookClass = null;\n        //add system hooks\n        serverHook = new GhostSocketReaper();\n        serverHook.initHook(QuickServer.this);\n        listOfServerHooks.add(serverHook);\n        ghostSocketReaper = (GhostSocketReaper) serverHook;\n        //add user hooks if any\n        Iterator iterator = getServerHooks().iterator();\n        while (iterator.hasNext()) {\n            serverHookClassName = (String) iterator.next();\n            try {\n                serverHookClass = getClass(serverHookClassName, true);\n                serverHook = (ServerHook) serverHookClass.newInstance();\n                serverHook.initHook(QuickServer.this);\n                listOfServerHooks.add(serverHook);\n                logger.log(Level.INFO, \"Loaded server hook: {0}\", serverHookClassName);\n                logger.log(Level.FINE, \"Server hook info: {0}\", serverHook.info());\n            } catch (Exception e) {\n                logger.log(Level.WARNING, \"Could not load server hook [{0}]: {1}\", new Object[] { serverHookClassName, e });\n                logger.log(Level.FINE, \"StackTrace:\\n{0}\", MyString.getStackTrace(e));\n            }\n        }\n        //end of while\n    }\n\n    /**\n     * @since 1.3.3\n     */\n    private void processServerHooks(int event) {\n        if (listOfServerHooks == null) {\n            logger.warning(\"listOfServerHooks was null!\");\n            return;\n        }\n        ServerHook serverHook = null;\n        boolean result = false;\n        Iterator iterator = listOfServerHooks.iterator();\n        String hooktype = \"UNKNOWN\";\n        switch(event) {\n            case ServerHook.PRE_STARTUP:\n                hooktype = \"PRE_STARTUP\";\n                break;\n            case ServerHook.POST_STARTUP:\n                hooktype = \"POST_STARTUP\";\n                break;\n            case ServerHook.PRE_SHUTDOWN:\n                hooktype = \"PRE_SHUTDOWN\";\n                break;\n            case ServerHook.POST_SHUTDOWN:\n                hooktype = \"POST_SHUTDOWN\";\n                break;\n        }\n        while (iterator.hasNext()) {\n            serverHook = (ServerHook) iterator.next();\n            try {\n                result = serverHook.handleEvent(event);\n            } catch (Exception e) {\n                result = false;\n                logger.log(Level.WARNING, \"Error invoking {0} hook [{1}]: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), e.getMessage() });\n            }\n            logger.log(Level.FINE, \"Invoked {0} hook [{1}] was: {2}\", new Object[] { hooktype, serverHook.getClass().getName(), result });\n        }\n    }\n\n    /**\n     * Creates and returns a copy of this object.\n     * @since 1.3.3\n     */\n    public Object clone() {\n        Object object = null;\n        try {\n            object = super.clone();\n            QuickServer _qs = (QuickServer) object;\n            _qs.setQSAdminServer(new QSAdminServer(_qs));\n        } catch (CloneNotSupportedException e) {\n            //should not happ\n            logger.log(Level.WARNING, \"Error cloning : {0}\", e);\n        }\n        return object;\n    }\n\n    /**\n     * Sets the Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public void setSecure(Secure secure) {\n        this.secure = secure;\n    }\n\n    /**\n     * Returns Secure setting for QuickServer\n     * @since 1.4.0\n     */\n    public Secure getSecure() {\n        if (secure == null)\n            secure = new Secure();\n        return secure;\n    }\n\n    /**\n     * <p>Returns if the server is running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public boolean isRunningSecure() {\n        return runningSecure;\n    }\n\n    /**\n     * <p>Sets the server mode if its running in Secure mode [SSL or TLS].</p>\n     * @since 1.4.0\n     */\n    public void setRunningSecure(boolean runningSecure) {\n        this.runningSecure = runningSecure;\n    }\n\n    private File makeAbsoluteToConfig(String fileName) {\n        Assertion.affirm(fileName != null, \"FileName can't be null\");\n        return ConfigReader.makeAbsoluteToConfig(fileName, getConfig());\n    }\n\n    /**\n     * Returns a ServerSocket object to be used for listening.\n     * @since 1.4.0\n     */\n    protected void makeServerSocket() throws BindException, IOException {\n        server = null;\n        logger.log(Level.FINEST, \"Binding {0} to IP: {1}\", new Object[] { getName(), getBindAddr() });\n        InetSocketAddress bindAddress = new InetSocketAddress(getBindAddr(), getPort());\n        try {\n            NetworkInterface ni = NetworkInterface.getByInetAddress(getBindAddr());\n            if (ni != null) {\n                logger.fine(\"NetworkInterface: \" + ni);\n            }\n        } catch (Exception igrnore) {\n            /*ignore*/\n        } catch (Error igrnore) {\n            /*ignore*/\n        }\n        if (getSecure().isEnable() == false) {\n            logger.log(Level.FINE, \"Making a normal ServerSocket for {0}\", getName());\n            setRunningSecure(false);\n            if (getBlockingMode() == false) {\n                //for non-blocking\n                serverSocketChannel = ServerSocketChannel.open();\n                server = serverSocketChannel.socket();\n                server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n            } else {\n                //for blocking\n                server = new ServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n            }\n        } else {\n            try {\n                logger.log(Level.FINE, \"Making a secure ServerSocket for {0}\", getName());\n                getSSLContext();\n                setRunningSecure(true);\n                if (getBlockingMode() == false) {\n                    logger.log(Level.FINE, \"Making a secure ServerSocketChannel for {0}\", getName());\n                    //for non-blocking\n                    serverSocketChannel = ServerSocketChannel.open();\n                    server = serverSocketChannel.socket();\n                    server.bind(bindAddress, getBasicConfig().getAdvancedSettings().getBacklog());\n                } else {\n                    ServerSocketFactory ssf = getSSLContext().getServerSocketFactory();\n                    SSLServerSocket serversocket = (SSLServerSocket) ssf.createServerSocket(getPort(), getBasicConfig().getAdvancedSettings().getBacklog(), getBindAddr());\n                    serversocket.setNeedClientAuth(secure.isClientAuthEnable());\n                    setRunningSecure(true);\n                    secureStoreManager.logSSLServerSocketInfo(serversocket);\n                    server = serversocket;\n                    serverSocketChannel = server.getChannel();\n                    if (serverSocketChannel == null && getBlockingMode() == false) {\n                        logger.warning(\"Secure Server does not support Channel! So will run in blocking mode.\");\n                        blockingMode = false;\n                    }\n                }\n                //blocking\n            } catch (NoSuchAlgorithmException e) {\n                logger.log(Level.WARNING, \"NoSuchAlgorithmException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            } catch (KeyManagementException e) {\n                logger.log(Level.WARNING, \"KeyManagementException : {0}\", e);\n                throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n            }\n        }\n        server.setReuseAddress(true);\n        int connectionTime = 0;\n        int latency = 0;\n        int bandwidth = 0;\n        connectionTime = getBasicConfig().getAdvancedSettings().getPerformancePreferencesConnectionTime();\n        latency = getBasicConfig().getAdvancedSettings().getPerformancePreferencesLatency();\n        bandwidth = getBasicConfig().getAdvancedSettings().getPerformancePreferencesBandwidth();\n        logger.log(Level.FINE, \"getPerformancePreferencesConnectionTime : {0}\", connectionTime);\n        logger.log(Level.FINE, \"getPerformancePreferencesLatency : {0}\", latency);\n        logger.log(Level.FINE, \"getPerformancePreferencesBandwidth : {0}\", bandwidth);\n        server.setPerformancePreferences(connectionTime, latency, bandwidth);\n        int clientSocketReceiveBufferSize = getBasicConfig().getAdvancedSettings().getClientSocketReceiveBufferSize();\n        if (clientSocketReceiveBufferSize > 0) {\n            logger.log(Level.FINE, \"clientSocketReceiveBufferSize: {0}\", clientSocketReceiveBufferSize);\n            server.setReceiveBufferSize(clientSocketReceiveBufferSize);\n        }\n        if (getBlockingMode() == false) {\n            logger.log(Level.FINE, \"Server Mode {0} - Non Blocking\", getName());\n            if (selector == null || selector.isOpen() == false) {\n                logger.finest(\"Opening new selector\");\n                selector = Selector.open();\n            } else {\n                logger.log(Level.FINEST, \"Reusing selector: {0}\", selector);\n            }\n            serverSocketChannel.configureBlocking(false);\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n            selector.wakeup();\n        } else {\n            logger.log(Level.FINE, \"Server Mode {0} - Blocking\", getName());\n        }\n    }\n\n    /**\n     * Sets the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public void setBasicConfig(BasicServerConfig basicConfig) throws Exception {\n        Assertion.affirm(basicConfig != null, \"BasicServerConfig can't be null\");\n        this.basicConfig = basicConfig;\n    }\n\n    /**\n     * Returns the basic configuration of the QuickServer.\n     * @since 1.4.0\n     */\n    public BasicServerConfig getBasicConfig() {\n        return basicConfig;\n    }\n\n    /**\n     * Loads the <code>SSLContext</code> from Secure configuring if set.\n     * @see #setSecure\n     * @since 1.4.0\n     */\n    public void loadSSLContext() throws IOException {\n        if (getSecure().isLoad() == false) {\n            throw new IllegalStateException(\"Secure setting is not yet enabled for loading!\");\n        }\n        logger.info(\"Loading Secure Context..\");\n        km = null;\n        tm = null;\n        try {\n            String ssManager = \"org.quickserver.security.SecureStoreManager\";\n            if (getSecure().getSecureStore() != null)\n                ssManager = getSecure().getSecureStore().getSecureStoreManager();\n            Class secureStoreManagerClass = getClass(ssManager, true);\n            secureStoreManager = (SecureStoreManager) secureStoreManagerClass.newInstance();\n            km = secureStoreManager.loadKeyManagers(getConfig());\n            logger.fine(\"KeyManager got\");\n            tm = secureStoreManager.loadTrustManagers(getConfig());\n            logger.fine(\"TrustManager got\");\n            sslc = secureStoreManager.getSSLContext(getConfig().getSecure().getProtocol());\n            sslc.init(km, tm, null);\n            logger.fine(\"SSLContext loaded\");\n        } catch (KeyStoreException e) {\n            logger.warning(\"KeyStoreException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchAlgorithmException e) {\n            logger.warning(\"NoSuchAlgorithmException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (NoSuchProviderException e) {\n            logger.warning(\"NoSuchProviderException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (UnrecoverableKeyException e) {\n            logger.warning(\"UnrecoverableKeyException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (CertificateException e) {\n            logger.warning(\"CertificateException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (KeyManagementException e) {\n            logger.warning(\"KeyManagementException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (GeneralSecurityException e) {\n            logger.warning(\"GeneralSecurityException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (ClassNotFoundException e) {\n            logger.warning(\"ClassNotFoundException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (InstantiationException e) {\n            logger.warning(\"InstantiationException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        } catch (IllegalAccessException e) {\n            logger.warning(\"IllegalAccessException : \" + e);\n            throw new IOException(\"Error creating secure socket : \" + e.getMessage());\n        }\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> from Secure configuring.\n     * @see #loadSSLContext\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        return getSSLContext(null);\n    }\n\n    /**\n     * Returns the <code>SSLContext</code> object that implements the specified\n     * secure socket protocol from Secure configuring.\n     * @see #loadSSLContext\n     * @param protocol the standard name of the requested protocol. If <code>null</code> will use the protocol set in secure configuration of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLContext getSSLContext(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        if (protocol != null && secureStoreManager != null) {\n            SSLContext _sslc = secureStoreManager.getSSLContext(protocol);\n            _sslc.init(km, tm, null);\n            return _sslc;\n        }\n        return sslc;\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * Secure socket protocol will be picked from the Secure configuring.\n     * @see #setSecure\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory() throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext());\n    }\n\n    /**\n     * Returns a SSLSocketFactory object to be used for creating SSLSockets.\n     * @see #setSecure\n     * @param protocol the standard name of the requested protocol. If\n     * <code>null</code> will use the protocol set in secure configuration\n     * of the server.\n     * @throws IOException\n     * @throws NoSuchAlgorithmException\n     * @throws KeyManagementException\n     * @since 1.4.0\n     */\n    public SSLSocketFactory getSSLSocketFactory(String protocol) throws IOException, NoSuchAlgorithmException, KeyManagementException {\n        if (sslc == null)\n            loadSSLContext();\n        return secureStoreManager.getSocketFactory(getSSLContext(protocol));\n    }\n\n    /**\n     * Sets the ClientBinaryHandler class that interacts with\n     * client sockets to handle binary data.\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientBinaryHandler}\n     * @see #getClientBinaryHandler\n     * @since 1.4\n     */\n    public void setClientBinaryHandler(String handler) {\n        clientBinaryHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientBinaryHandler class that interacts with\n     * client sockets.\n     * @see #setClientBinaryHandler\n     * @since 1.4\n     */\n    public String getClientBinaryHandler() {\n        return clientBinaryHandlerString;\n    }\n\n    /**\n     * Sets the Selector (NIO).\n     * @since 1.4.5\n     */\n    public void setSelector(Selector selector) {\n        this.selector = selector;\n    }\n\n    /**\n     * Returns the Selector (NIO),if any.\n     * @since 1.4.5\n     */\n    public Selector getSelector() {\n        return selector;\n    }\n\n    /**\n     * Starts server in blocking mode.\n     * @since 1.4.5\n     */\n    private void runBlocking(TheClient theClient) throws Exception {\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        //long stime = System.currentTimeMillis();\n        //long etime = System.currentTimeMillis();\n        while (true) {\n            //etime = System.currentTimeMillis();\n            //System.out.println(\"Time Taken: \"+(etime-stime));\n            client = server.accept();\n            //stime = System.currentTimeMillis();\n            if (linger < 0) {\n                client.setSoLinger(false, 0);\n            } else {\n                client.setSoLinger(true, linger);\n            }\n            client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                //low delay=10\n                client.setTrafficClass(socketTrafficClass);\n            }\n            logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n            if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n            }\n            if (stopServer) {\n                //Client connected when server was about to be shutdown.\n                try {\n                    client.close();\n                } catch (Exception e) {\n                }\n                break;\n            }\n            if (checkAccessConstraint(client) == false) {\n                continue;\n            }\n            //Check if max connection has reached\n            if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                theClient.setClientEvent(ClientEvent.MAX_CON_BLOCKING);\n            } else {\n                theClient.setClientEvent(ClientEvent.RUN_BLOCKING);\n            }\n            theClient.setTrusted(getSkipValidation());\n            theClient.setSocket(client);\n            //mostly null\n            theClient.setSocketChannel(client.getChannel());\n            if (clientDataClass != null) {\n                if (getClientDataPool() == null) {\n                    clientData = (ClientData) clientDataClass.newInstance();\n                } else {\n                    clientData = (ClientData) getClientDataPool().borrowObject();\n                }\n                theClient.setClientData(clientData);\n            }\n            try {\n                _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                _chPolled.handleClient(theClient);\n            } catch (java.util.NoSuchElementException nsee) {\n                logger.warning(\"Could not borrow ClientHandler from pool. Error: \" + nsee);\n                logger.warning(\"Closing Socket [\" + client + \"] since no ClientHandler available.\");\n                client.close();\n            }\n            if (_chPolled != null) {\n                try {\n                    getClientPool().addClient(_chPolled, true);\n                } catch (java.util.NoSuchElementException nsee) {\n                    logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                    //logger.warning(\"Closing Socket [\"+client+\"] since no Thread available.\");\n                    //client.close();\n                    //returnClientHandlerToPool(_chPolled);\n                }\n                _chPolled = null;\n            }\n            client = null;\n            //reset it back\n            setSkipValidation(false);\n        }\n        //end of loop\n    }\n\n    /**\n     * Starts server in non-blocking mode.\n     * @since 1.4.5\n     */\n    private void runNonBlocking(TheClient theClient) throws Exception {\n        int selectCount = 0;\n        Iterator iterator = null;\n        SelectionKey key = null;\n        ServerSocketChannel serverChannel = null;\n        SocketChannel socketChannel = null;\n        Socket client = null;\n        ClientHandler _chPolled = null;\n        boolean stopServerProcessed = false;\n        int linger = getBasicConfig().getAdvancedSettings().getSocketLinger();\n        registerChannelRequestMap = new HashMap();\n        int socketTrafficClass = 0;\n        if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n            socketTrafficClass = Integer.parseInt(getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass());\n        }\n        while (true) {\n            selectCount = selector.select(500);\n            //selectCount = selector.select();//for testing\n            //check for any pending registerChannel req.\n            synchronized (registerChannelRequestMap) {\n                if (registerChannelRequestMap.size() > 0) {\n                    RegisterChannelRequest req = null;\n                    Object hashkey = null;\n                    iterator = registerChannelRequestMap.keySet().iterator();\n                    while (iterator.hasNext()) {\n                        hashkey = iterator.next();\n                        req = (RegisterChannelRequest) registerChannelRequestMap.get(hashkey);\n                        req.register(getSelector());\n                    }\n                    iterator = null;\n                    registerChannelRequestMap.clear();\n                }\n                //if\n            }\n            //sync\n            if (stopServer == true && stopServerProcessed == false) {\n                logger.warning(\"Closing \" + getName());\n                serverSocketChannel.close();\n                stopServerProcessed = true;\n                server = null;\n                serverSocketChannel = null;\n                setServiceState(Service.STOPPED);\n                logger.warning(\"Closed \" + getName());\n                processServerHooks(ServerHook.POST_SHUTDOWN);\n            }\n            if (stopServer == false && stopServerProcessed == true) {\n                logger.finest(\"Server must have re-started.. will break\");\n                break;\n            }\n            if (selectCount == 0 && stopServerProcessed == true) {\n                java.util.Set keyset = selector.keys();\n                if (keyset.isEmpty() == true && getClientCount() <= 0) {\n                    break;\n                } else {\n                    continue;\n                }\n            } else if (selectCount == 0) {\n                continue;\n            }\n            iterator = selector.selectedKeys().iterator();\n            while (iterator.hasNext()) {\n                key = (SelectionKey) iterator.next();\n                if (key.isValid() == false) {\n                    iterator.remove();\n                    continue;\n                }\n                if (key.isAcceptable() && stopServer == false) {\n                    logger.finest(\"Key is Acceptable\");\n                    serverChannel = (ServerSocketChannel) key.channel();\n                    socketChannel = serverChannel.accept();\n                    if (socketChannel == null) {\n                        iterator.remove();\n                        continue;\n                    }\n                    client = socketChannel.socket();\n                    if (linger < 0) {\n                        client.setSoLinger(false, 0);\n                    } else {\n                        client.setSoLinger(true, linger);\n                    }\n                    client.setTcpNoDelay(getBasicConfig().getAdvancedSettings().getClientSocketTcpNoDelay());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketTrafficClass() != null) {\n                        //low delay=10\n                        client.setTrafficClass(socketTrafficClass);\n                    }\n                    logger.fine(\"ReceiveBufferSize: \" + client.getReceiveBufferSize());\n                    if (getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize() != 0) {\n                        client.setSendBufferSize(getBasicConfig().getAdvancedSettings().getClientSocketSendBufferSize());\n                        logger.fine(\"SendBufferSize: \" + client.getSendBufferSize());\n                    }\n                    if (checkAccessConstraint(client) == false) {\n                        iterator.remove();\n                        continue;\n                    }\n                    socketChannel.configureBlocking(false);\n                    theClient.setTrusted(getSkipValidation());\n                    theClient.setSocket(socketChannel.socket());\n                    theClient.setSocketChannel(socketChannel);\n                    if (clientDataClass != null) {\n                        if (getClientDataPool() == null) {\n                            clientData = (ClientData) clientDataClass.newInstance();\n                        } else {\n                            //borrow a object from pool\n                            clientData = (ClientData) getClientDataPool().borrowObject();\n                        }\n                        theClient.setClientData(clientData);\n                    }\n                    //Check if max connection has reached\n                    if (getSkipValidation() != true && maxConnection != -1 && getClientHandlerPool().getNumActive() >= maxConnection) {\n                        theClient.setClientEvent(ClientEvent.MAX_CON);\n                    } else {\n                        theClient.setClientEvent(ClientEvent.ACCEPT);\n                    }\n                    try {\n                        _chPolled = (ClientHandler) getClientHandlerPool().borrowObject();\n                        logger.finest(\"Asking \" + _chPolled.getName() + \" to handle.\");\n                        _chPolled.handleClient(theClient);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.warning(\"Could not borrow ClientHandler Object from pool. Error: \" + nsee);\n                        logger.warning(\"Closing SocketChannel [\" + serverChannel.socket() + \"] since no ClientHandler available.\");\n                        socketChannel.close();\n                    }\n                    if (_chPolled != null) {\n                        try {\n                            getClientPool().addClient(_chPolled, true);\n                        } catch (java.util.NoSuchElementException nsee) {\n                            logger.warning(\"Could not borrow Thread from pool. Error: \" + nsee);\n                            //logger.warning(\"Closing SocketChannel [\"+serverChannel.socket()+\"] since no Thread available.\");\n                            //socketChannel.close();\n                            //returnClientHandlerToPool(_chPolled);\n                        }\n                        _chPolled = null;\n                    }\n                    socketChannel = null;\n                    client = null;\n                    //reset it back\n                    setSkipValidation(false);\n                } else if (key.isValid() && key.isReadable()) {\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Readable, removing OP_READ from interestOps for \" + _ch.getName());\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_READ));\n                        _ch.addEvent(ClientEvent.READ);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.READ);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (key.isValid() && key.isWritable()) {\n                    if (getClientPool().shouldNioWriteHappen() == false) {\n                        //no need to remove the key\n                        continue;\n                    }\n                    boolean addedEvent = false;\n                    ClientHandler _ch = null;\n                    try {\n                        _ch = (ClientHandler) key.attachment();\n                        logger.finest(\"Key is Writable, removing OP_WRITE from interestOps for \" + _ch.getName());\n                        //remove OP_WRITE from interest set\n                        key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));\n                        _ch.addEvent(ClientEvent.WRITE);\n                        addedEvent = true;\n                        //_ch.setSelectionKey(key);\n                        getClientPool().addClient(_ch);\n                    } catch (CancelledKeyException cke) {\n                        logger.fine(\"Ignored Error - Key was Cancelled: \" + cke);\n                    } catch (java.util.NoSuchElementException nsee) {\n                        logger.finest(\"NoSuchElementException: \" + nsee);\n                        if (addedEvent)\n                            _ch.removeEvent(ClientEvent.WRITE);\n                        //no need to remove the key\n                        continue;\n                    }\n                    _ch = null;\n                } else if (stopServer == true && key.isAcceptable()) {\n                    //we will not accept this key\n                    //reset it back\n                    setSkipValidation(false);\n                } else {\n                    logger.warning(\"Unknown key got in SelectionKey: \" + key);\n                }\n                //Remove key\n                iterator.remove();\n                Thread.yield();\n            }\n            //end of iterator\n            iterator = null;\n        }\n        //end of loop\n    }\n\n    private boolean checkAccessConstraint(Socket socket) {\n        try {\n            if (getAccessConstraintConfig() != null) {\n                getAccessConstraintConfig().checkAccept(socket);\n            }\n            return true;\n        } catch (SecurityException se) {\n            logger.warning(\"SecurityException occurred accepting connection : \" + se.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * Register the given channel for the given operations. This adds the request\n     * to a list and will be processed after selector select wakes up.\n     * @return boolean flag to indicate if new entry was added to the list to register.\n     * @since 1.4.5\n     */\n    public boolean registerChannel(SocketChannel channel, int ops, Object att) throws IOException, ClosedChannelException {\n        if (getSelector() == null) {\n            throw new IllegalStateException(\"Selector is not open!\");\n        }\n        if (channel == null) {\n            throw new IllegalArgumentException(\"Can't register a null channel!\");\n        }\n        if (channel.isConnected() == false) {\n            throw new ClosedChannelException();\n        }\n        RegisterChannelRequest req = new RegisterChannelRequest(channel, ops, att);\n        RegisterChannelRequest reqOld = null;\n        synchronized (registerChannelRequestMap) {\n            reqOld = (RegisterChannelRequest) registerChannelRequestMap.get(channel);\n            if (reqOld == null) {\n                registerChannelRequestMap.put(channel, req);\n                getSelector().wakeup();\n                return true;\n            } else {\n                if (reqOld.equals(req) == false) {\n                    reqOld.setOps(reqOld.getOps() | req.getOps());\n                    reqOld.setAtt(req.getAtt());\n                    return true;\n                }\n                return false;\n            }\n        }\n        /*\n\t\tlogger.warning(\"Before register...\");\n\t\tchannel.register(getSelector(), ops, att);\n\t\tlogger.warning(\"Before wakeup and after register...\");\n\t\tgetSelector().wakeup();\n\t\tlogger.warning(\"After wakeup...\");\n\t\t*/\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeByteBufferPool(PoolConfig opConfig) {\n        logger.finer(\"Creating ByteBufferPool pool\");\n        int bufferSize = getBasicConfig().getAdvancedSettings().getByteBufferSize();\n        boolean useDirectByteBuffer = getBasicConfig().getAdvancedSettings().getUseDirectByteBuffer();\n        PoolableObjectFactory factory = new ByteBufferObjectFactory(bufferSize, useDirectByteBuffer);\n        byteBufferPool = poolManager.makeByteBufferPool(factory, opConfig);\n        poolManager.initPool(byteBufferPool, opConfig);\n    }\n\n    /**\n     * Returns ObjectPool of java.nio.ByteBuffer class.\n     * @since 1.4.5\n     */\n    public ObjectPool getByteBufferPool() {\n        return byteBufferPool;\n    }\n\n    /**\n     * Makes the pool of ByteBuffer\n     * @since 1.4.5\n     */\n    private void makeClientPool(PoolConfig opConfig) throws Exception {\n        logger.finer(\"Creating ClientThread pool\");\n        ThreadObjectFactory factory = new ThreadObjectFactory();\n        ObjectPool objectPool = poolManager.makeClientPool(factory, opConfig);\n        pool = new ClientPool(makeQSObjectPool(objectPool), opConfig);\n        factory.setClientPool(pool);\n        pool.setMaxThreadsForNioWrite(getBasicConfig().getAdvancedSettings().getMaxThreadsForNioWrite());\n        poolManager.initPool(objectPool, opConfig);\n    }\n\n    /**\n     * Sets the ClientWriteHandler class that interacts with\n     * client sockets to handle data write (only used in non-blocking mode).\n     * @param handler object the fully qualified name of the class that\n     *  implements {@link ClientWriteHandler}\n     * @see #getClientWriteHandler\n     * @since 1.4.5\n     */\n    public void setClientWriteHandler(String handler) {\n        clientWriteHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientWriteHandler class that interacts with\n     * client sockets (only used in non-blocking mode).\n     * @see #setClientWriteHandler\n     * @since 1.4.5\n     */\n    public String getClientWriteHandler() {\n        return clientWriteHandlerString;\n    }\n\n    /**\n     * Returns the date/time when the server was last started.\n     * @return last started time. Will be <code>null</code> if never started.\n     * @since 1.4.5\n     */\n    public java.util.Date getLastStartTime() {\n        return lastStartTime;\n    }\n\n    /**\n     * Sets the debug flag to ByteBufferOutputStream and\n     * ByteBufferInputStream class that are used in non-blcking mode\n     * @since 1.4.5\n     */\n    public static void setDebugNonBlockingMode(boolean flag) {\n        org.quickserver.util.io.ByteBufferOutputStream.setDebug(flag);\n        org.quickserver.util.io.ByteBufferInputStream.setDebug(flag);\n    }\n\n    /**\n     * Returns the implementation that is used to do Client Identification.\n     * @since 1.4.5\n     */\n    public ClientIdentifier getClientIdentifier() {\n        return clientIdentifier;\n    }\n\n    /**\n     * Makes QSObjectPool from ObjectPool\n     * @since 1.4.5\n     */\n    private QSObjectPool makeQSObjectPool(ObjectPool objectPool) throws Exception {\n        return (QSObjectPool) qsObjectPoolMaker.getQSObjectPool(objectPool);\n    }\n\n    /**\n     * Returns the current blocking mode of the server.\n     * @since 1.4.6\n     */\n    public boolean getBlockingMode() {\n        return blockingMode;\n    }\n\n    /**\n     * Loads all the Business Logic class\n     * @since 1.4.6\n     */\n    protected void loadBusinessLogic() throws Exception {\n        if (clientCommandHandlerString == null && clientEventHandlerString == null) {\n            logger.severe(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n            throw new AppException(\"ClientCommandHandler AND ClientEventHandler was not set.\");\n        }\n        clientCommandHandler = null;\n        if (clientCommandHandlerString != null) {\n            logger.finest(\"Loading ClientCommandHandler class..\");\n            Class clientCommandHandlerClass = getClass(clientCommandHandlerString, true);\n            clientCommandHandler = (ClientCommandHandler) clientCommandHandlerClass.newInstance();\n        }\n        boolean setClientCommandHandlerLookup = false;\n        clientEventHandler = null;\n        if (clientEventHandlerString == null) {\n            clientEventHandlerString = \"org.quickserver.net.server.impl.DefaultClientEventHandler\";\n            setClientCommandHandlerLookup = true;\n        }\n        logger.finest(\"Loading ClientEventHandler class..\");\n        if (clientEventHandlerString.equals(clientCommandHandlerString) && ClientEventHandler.class.isInstance(clientCommandHandler)) {\n            clientEventHandler = (ClientEventHandler) clientCommandHandler;\n        } else {\n            clientEventHandler = (ClientEventHandler) getClass(clientEventHandlerString, true).newInstance();\n            if (setClientCommandHandlerLookup) {\n                ((DefaultClientEventHandler) clientEventHandler).setClientCommandHandler(clientCommandHandler);\n            }\n        }\n        clientExtendedEventHandler = null;\n        if (clientExtendedEventHandlerString != null) {\n            logger.finest(\"Loading ClientExtendedEventHandler class..\");\n            if (clientExtendedEventHandlerString.equals(clientCommandHandlerString) && ClientExtendedEventHandler.class.isInstance(clientCommandHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientCommandHandler;\n            } else if (clientExtendedEventHandlerString.equals(clientEventHandlerString) && ClientExtendedEventHandler.class.isInstance(clientEventHandler)) {\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientEventHandler;\n            } else {\n                Class clientExtendedEventHandlerClass = getClass(clientExtendedEventHandlerString, true);\n                clientExtendedEventHandler = (ClientExtendedEventHandler) clientExtendedEventHandlerClass.newInstance();\n            }\n        }\n        clientObjectHandler = null;\n        if (clientObjectHandlerString != null) {\n            logger.finest(\"Loading ClientObjectHandler class..\");\n            if (clientObjectHandlerString.equals(clientCommandHandlerString) && ClientObjectHandler.class.isInstance(clientCommandHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientCommandHandler;\n            } else if (clientObjectHandlerString.equals(clientEventHandlerString) && ClientObjectHandler.class.isInstance(clientEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientEventHandler;\n            } else if (clientObjectHandlerString.equals(clientExtendedEventHandlerString) && ClientObjectHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientObjectHandler = (ClientObjectHandler) clientExtendedEventHandler;\n            } else {\n                clientObjectHandler = (ClientObjectHandler) getClass(clientObjectHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientBinaryHandler = null;\n        if (clientBinaryHandlerString != null) {\n            logger.finest(\"Loading ClientBinaryHandler class..\");\n            if (clientBinaryHandlerString.equals(clientCommandHandlerString) && ClientBinaryHandler.class.isInstance(clientCommandHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientCommandHandler;\n            } else if (clientBinaryHandlerString.equals(clientEventHandlerString) && ClientBinaryHandler.class.isInstance(clientEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientExtendedEventHandlerString) && ClientBinaryHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientExtendedEventHandler;\n            } else if (clientBinaryHandlerString.equals(clientObjectHandlerString) && ClientBinaryHandler.class.isInstance(clientObjectHandler)) {\n                clientBinaryHandler = (ClientBinaryHandler) clientObjectHandler;\n            } else {\n                clientBinaryHandler = (ClientBinaryHandler) getClass(clientBinaryHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        clientWriteHandler = null;\n        if (clientWriteHandlerString != null) {\n            logger.finest(\"Loading ClientWriteHandler class..\");\n            if (clientWriteHandlerString.equals(clientCommandHandlerString) && ClientWriteHandler.class.isInstance(clientCommandHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientCommandHandler;\n            } else if (clientWriteHandlerString.equals(clientEventHandlerString) && ClientWriteHandler.class.isInstance(clientEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientEventHandler;\n            } else if (clientWriteHandlerString.equals(clientExtendedEventHandlerString) && ClientWriteHandler.class.isInstance(clientExtendedEventHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientExtendedEventHandler;\n            } else if (clientWriteHandlerString.equals(clientObjectHandlerString) && ClientWriteHandler.class.isInstance(clientObjectHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientObjectHandler;\n            } else if (clientWriteHandlerString.equals(clientBinaryHandlerString) && ClientWriteHandler.class.isInstance(clientBinaryHandler)) {\n                clientWriteHandler = (ClientWriteHandler) clientBinaryHandler;\n            } else {\n                clientWriteHandler = (ClientWriteHandler) getClass(clientWriteHandlerString, true).newInstance();\n            }\n        }\n        //end of != null\n        Class authenticatorClass = null;\n        if (clientAuthenticationHandlerString != null) {\n            logger.finest(\"Loading ClientAuthenticationHandler class..\");\n            authenticatorClass = getClass(clientAuthenticationHandlerString, true);\n        }\n        if (authenticatorClass != null) {\n            Object obj = authenticatorClass.newInstance();\n            if (ClientAuthenticationHandler.class.isInstance(obj))\n                clientAuthenticationHandler = (ClientAuthenticationHandler) obj;\n            else\n                authenticator = (Authenticator) obj;\n        }\n        clientDataClass = null;\n        if (clientDataString != null) {\n            logger.finest(\"Loading ClientData class..\");\n            clientDataClass = getClass(clientDataString, true);\n        }\n        Assertion.affirm(clientEventHandler != null, \"ClientEventHandler was not loaded!\");\n    }\n\n    /**\n     * Sets the ClientEventHandler class that gets notified of\n     * client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientEventHandler}\n     * @see #getClientEventHandler\n     * @since 1.4.6\n     */\n    public void setClientEventHandler(String handler) {\n        clientEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientEventHandler class that gets notified of\n     * client events.\n     * @see #setClientEventHandler\n     * @since 1.4.6\n     */\n    public String getClientEventHandler() {\n        return clientEventHandlerString;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DataMode dataMode, DataType dataType) throws IOException {\n        if (dataType == DataType.IN)\n            this.defaultDataModeIN = dataMode;\n        if (dataType == DataType.OUT)\n            this.defaultDataModeOUT = dataMode;\n    }\n\n    /**\n     * Sets the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public void setDefaultDataMode(DefaultDataMode defaultDataMode) throws IOException {\n        defaultDataModeIN = defaultDataMode.getDataMode(DataType.IN);\n        defaultDataModeOUT = defaultDataMode.getDataMode(DataType.OUT);\n        ;\n    }\n\n    /**\n     * Returns the default {@link DataMode} for the ClientHandler\n     * @since 1.4.6\n     */\n    public DataMode getDefaultDataMode(DataType dataType) {\n        if (dataType == DataType.IN)\n            return defaultDataModeIN;\n        if (dataType == DataType.OUT)\n            return defaultDataModeOUT;\n        else\n            throw new IllegalArgumentException(\"Unknown DataType: \" + dataType);\n    }\n\n    /**\n     * Sets the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @param handler the fully qualified name of the class that\n     *  implements {@link ClientExtendedEventHandler}\n     * @see #getClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public void setClientExtendedEventHandler(String handler) {\n        clientExtendedEventHandlerString = handler;\n        logger.finest(\"Set to \" + handler);\n    }\n\n    /**\n     * Returns the ClientExtendedEventHandler class that gets notified of\n     * extended client events.\n     * @see #setClientExtendedEventHandler\n     * @since 1.4.6\n     */\n    public String getClientExtendedEventHandler() {\n        return clientExtendedEventHandlerString;\n    }\n\n    /**\n     * If Application Jar Path was set, load the jars\n     * @since 1.4.6\n     */\n    private void loadApplicationClasses() throws Exception {\n        if (getApplicationJarPath() != null && getClassLoader() == null) {\n            setClassLoader(ClassUtil.getClassLoader(getApplicationJarPath()));\n            //update qsadmin to use the same\n            if (adminServer != null) {\n                adminServer.getServer().setClassLoader(getClassLoader());\n            }\n        }\n    }\n\n    /**\n     * Returns PID of the JVM\n     * @return PID of the JVM\n     * @since 1.4.8\n     */\n    public static String getPID() {\n        return pid;\n    }\n\n    public boolean isRawCommunicationLogging() {\n        return rawCommunicationLogging;\n    }\n\n    public void setRawCommunicationLogging(boolean rawCommunicationLogging) {\n        this.rawCommunicationLogging = rawCommunicationLogging;\n    }\n\n    public int getRawCommunicationMaxLength() {\n        return rawCommunicationMaxLength;\n    }\n\n    public void setRawCommunicationMaxLength(int rawCommunicationMaxLength) {\n        this.rawCommunicationMaxLength = rawCommunicationMaxLength;\n    }\n}\n",
        "test_prompt": "// QuickServer_22Test.java\npackage org.quickserver.net.server;\n\nimport java.io.*;\nimport java.lang.management.ManagementFactory;\nimport java.net.*;\nimport org.quickserver.net.*;\n//v1.1\nimport org.quickserver.net.qsadmin.*;\n//v1.2\nimport java.util.logging.*;\n//v1.3\nimport org.quickserver.util.pool.*;\nimport org.quickserver.util.pool.thread.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.util.xmlreader.*;\nimport org.quickserver.sql.*;\n//v1.3.1\nimport java.util.logging.Formatter;\nimport java.util.*;\n//v1.3.2\nimport org.quickserver.util.*;\n//v1.3.3\nimport org.quickserver.security.*;\n//v1.4.0\nimport javax.net.ssl.*;\nimport javax.net.*;\nimport java.security.*;\nimport java.security.cert.*;\n//v1.4.5\nimport java.nio.channels.*;\nimport org.quickserver.net.server.impl.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QuickServer}.\n* It contains one unit test case for the {@link QuickServer#getPID()} method.\n*/\nclass QuickServer_22Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// QSAdminAPI_0Test.java\npackage org.quickserver.net.qsadmin;\n\nimport java.io.*;\nimport java.net.*;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QSAdminAPI}.\n* It contains one unit test case for the {@link QSAdminAPI#logon()} method.\n*/\nclass QSAdminAPI_0Test {\n}"
            }
        ],
        "id": "c3e79ddc-7fd2-49cf-a80a-adc310f49fe7",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/net/qsadmin/QSAdminAPI_0Test.java",
        "original_code": "// QSAdminAPI.java\n/*\r\n * This file is part of the QuickServer library \r\n * Copyright (C) QuickServer.org\r\n *\r\n * Use, modification, copying and distribution of this software is subject to\r\n * the terms and conditions of the GNU Lesser General Public License. \r\n * You should have received a copy of the GNU LGP License along with this \r\n * library; if not, you can download a copy from <http://www.quickserver.org/>.\r\n *\r\n * For questions, suggestions, bug-reports, enhancement-requests etc.\r\n * visit http://www.quickserver.org\r\n *\r\n */\r\npackage org.quickserver.net.qsadmin;\r\n\r\nimport java.io.*;\r\nimport java.net.*;\r\nimport java.util.logging.*;\r\n\r\n/**\r\n *  QSAdminAPI class to communicate to QsAdmin from java applications.\r\n *  <p>\r\n *   Eg:\r\n *  <code><BLOCKQUOTE><pre>\r\n * \tQSAdminAPI qsAdminApi = new QSAdminAPI(\"127.0.0.1\", 9080);\r\n * \tif(qsAdminApi.logon()) {\r\n * \t\tSystem.out.println(\"Logged in\");\r\n * \t\tString info = qsAdminApi.sendCommand(\"info server\");\r\n * \t\tSystem.out.println(\"Info on Server :\\n\"+info);\r\n * \t\tqsAdminApi.logoff();\r\n * \t} else {\r\n * \t\tSystem.out.println(\"Bad Login\");\r\n * \t\tqsAdminApi.close();\r\n * \t}\r\n * </pre></BLOCKQUOTE></code></p>\r\n *  @see QSAdminServer\r\n *  @since 1.4\r\n *  @author Akshathkumar Shetty\r\n */\r\npublic class QSAdminAPI {\r\n\r\n    private static final Logger logger = Logger.getLogger(QSAdminAPI.class.getName());\r\n\r\n    private String username = \"Admin\";\r\n\r\n    private String password = \"QsAdm1n\";\r\n\r\n    private String host = \"localhost\";\r\n\r\n    private int port = 9877;\r\n\r\n    private Socket socket;\r\n\r\n    private InputStream in;\r\n\r\n    private OutputStream out;\r\n\r\n    private BufferedReader br;\r\n\r\n    private BufferedWriter bw;\r\n\r\n    /**\r\n     * Creates QSAdminAPI object that will communicate with the\r\n     * passed host and port.\r\n     */\r\n    public QSAdminAPI(String host, int port) {\r\n        this.host = host;\r\n        this.port = port;\r\n    }\r\n\r\n    /**\r\n     * Will attempt to connect and logon to the remote QsAdminServer.\r\n     */\r\n    public boolean logon() throws IOException {\r\n        return logon(username, password);\r\n    }\r\n\r\n    /**\r\n     * Will attempt to connect and logon to the remote QsAdminServer.\r\n     */\r\n    public boolean logon(String username, String password) throws IOException {\r\n        this.username = username;\r\n        this.password = password;\r\n        logger.fine(\"Connecting to \" + host + \":\" + port);\r\n        socket = new Socket(host, port);\r\n        in = socket.getInputStream();\r\n        out = socket.getOutputStream();\r\n        br = new BufferedReader(new InputStreamReader(in, \"UTF-8\"));\r\n        bw = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\r\n        logger.fine(\"Got : \" + br.readLine());\r\n        logger.fine(\"Got : \" + br.readLine());\r\n        logger.fine(\"Got : \" + br.readLine());\r\n        logger.fine(\"Got : \" + br.readLine());\r\n        logger.fine(\"Sending username\");\r\n        bw.write(username + \"\\r\\n\");\r\n        bw.flush();\r\n        logger.fine(\"Got : \" + br.readLine());\r\n        logger.fine(\"Sending password\");\r\n        bw.write(password + \"\\r\\n\");\r\n        bw.flush();\r\n        String temp = br.readLine();\r\n        logger.fine(\"Got : \" + temp);\r\n        return temp.startsWith(\"+OK \");\r\n    }\r\n\r\n    /**\r\n     * Sends the given command to QSAdmin and gives the response back.\r\n     */\r\n    public String sendCommand(String data) throws IOException {\r\n        logger.fine(\"Sending command : \" + data);\r\n        bw.write(data + \"\\r\\n\");\r\n        bw.flush();\r\n        String temp = readResponse();\r\n        logger.fine(\"Got : \" + temp);\r\n        return temp;\r\n    }\r\n\r\n    private String readResponse() throws IOException {\r\n        StringBuilder command = new StringBuilder();\r\n        String res = br.readLine();\r\n        if (res != null && res.equals(\"+OK info follows\") == false)\r\n            return res;\r\n        while (res != null && res.equals(\".\") == false) {\r\n            command.append(res + \"\\r\\n\");\r\n            res = br.readLine();\r\n        }\r\n        return command.toString();\r\n    }\r\n\r\n    /**\r\n     * Logoff the QSAdminServer and closed the socket associated.\r\n     */\r\n    public void logoff() throws IOException {\r\n        logger.fine(\"Logging off\");\r\n        logger.fine(\"Sending command : quit\");\r\n        bw.write(\"quit\" + \"\\r\\n\");\r\n        bw.flush();\r\n        logger.fine(\"Got : \" + br.readLine());\r\n        close();\r\n    }\r\n\r\n    /**\r\n     * Closes the socket associated.\r\n     */\r\n    public void close() throws IOException {\r\n        logger.fine(\"Closing\");\r\n        socket.close();\r\n        socket = null;\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        QSAdminAPI qsAdminApi = new QSAdminAPI(\"127.0.0.1\", 9080);\r\n        if (qsAdminApi.logon()) {\r\n            logger.info(\"Logged in\");\r\n            String info = qsAdminApi.sendCommand(\"info server\");\r\n            logger.info(\"Info on Server :\\n\" + info);\r\n            qsAdminApi.logoff();\r\n        } else {\r\n            logger.warning(\"Bad Login!\");\r\n            qsAdminApi.close();\r\n        }\r\n    }\r\n}\r\n",
        "test_prompt": "// QSAdminAPI_0Test.java\npackage org.quickserver.net.qsadmin;\n\nimport java.io.*;\nimport java.net.*;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link QSAdminAPI}.\n* It contains one unit test case for the {@link QSAdminAPI#logon()} method.\n*/\nclass QSAdminAPI_0Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// PasswordField_0Test.java\npackage org.quickserver.util.io;\n\nimport java.io.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PasswordField}.\n* It contains one unit test case for the {@link PasswordField#getPassword(String)} method.\n*/\nclass PasswordField_0Test {\n}"
            }
        ],
        "id": "ceda16b1-a67a-41d5-a365-fd9581d22298",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/io/PasswordField_0Test.java",
        "original_code": "// PasswordField.java\n/*\r\n * This file is part of the QuickServer library \r\n * Copyright (C) QuickServer.org\r\n *\r\n * Use, modification, copying and distribution of this software is subject to\r\n * the terms and conditions of the GNU Lesser General Public License. \r\n * You should have received a copy of the GNU LGP License along with this \r\n * library; if not, you can download a copy from <http://www.quickserver.org/>.\r\n *\r\n * For questions, suggestions, bug-reports, enhancement-requests etc.\r\n * visit http://www.quickserver.org\r\n *\r\n */\r\npackage org.quickserver.util.io;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.util.logging.*;\r\n\r\n/**\r\n * This class prompts the user for a password and attempts to mask\r\n * input.\r\n * @since 1.4\r\n */\r\npublic class PasswordField {\r\n\r\n    private static Logger logger = Logger.getLogger(PasswordField.class.getName());\r\n\r\n    /**\r\n     * @param prompt The prompt to display to the user.\r\n     * @return The password as entered by the user.\r\n     */\r\n    public static final char[] getPassword(String prompt) throws IOException {\r\n        return getPassword(System.in, prompt);\r\n    }\r\n\r\n    /**\r\n     * @param in input stream to be used (e.g. System.in)\r\n     * @param prompt The prompt to display to the user.\r\n     * @return The password as entered by the user.\r\n     */\r\n    public static final char[] getPassword(InputStream in, String prompt) throws IOException {\r\n        MaskingThread maskingthread = new MaskingThread(prompt);\r\n        Thread thread = new Thread(maskingthread);\r\n        thread.start();\r\n        char[] lineBuffer;\r\n        char[] buf;\r\n        int i;\r\n        buf = lineBuffer = new char[128];\r\n        int room = buf.length;\r\n        int offset = 0;\r\n        int c;\r\n        loop: while (true) {\r\n            c = in.read();\r\n            switch(c) {\r\n                case -1:\r\n                case '\\n':\r\n                    break loop;\r\n                case '\\r':\r\n                    int c2 = in.read();\r\n                    if ((c2 != '\\n') && (c2 != -1)) {\r\n                        if (!(in instanceof PushbackInputStream)) {\r\n                            in = new PushbackInputStream(in);\r\n                        }\r\n                        ((PushbackInputStream) in).unread(c2);\r\n                    } else {\r\n                        break loop;\r\n                    }\r\n                default:\r\n                    if (--room < 0) {\r\n                        buf = new char[offset + 128];\r\n                        room = buf.length - offset - 1;\r\n                        System.arraycopy(lineBuffer, 0, buf, 0, offset);\r\n                        Arrays.fill(lineBuffer, ' ');\r\n                        lineBuffer = buf;\r\n                    }\r\n                    buf[offset++] = (char) c;\r\n                    break;\r\n            }\r\n        }\r\n        maskingthread.stopMasking();\r\n        System.out.print(\"\\010\");\r\n        //Code to clear doskey on win nt/2000 - Alt+F7\r\n        String os = System.getProperty(\"os.name\");\r\n        if (os != null && os.toLowerCase().startsWith(\"windows\")) {\r\n            try {\r\n                java.awt.Robot robot = new java.awt.Robot();\r\n                robot.keyPress(java.awt.event.KeyEvent.VK_ALT);\r\n                robot.keyPress(java.awt.event.KeyEvent.VK_F7);\r\n                robot.keyRelease(java.awt.event.KeyEvent.VK_F7);\r\n                robot.keyRelease(java.awt.event.KeyEvent.VK_ALT);\r\n            } catch (Exception ignore) {\r\n                logger.warning(\"Could not clears command history: \" + ignore);\r\n            }\r\n        }\r\n        if (offset == 0) {\r\n            return null;\r\n        }\r\n        char[] ret = new char[offset];\r\n        System.arraycopy(buf, 0, ret, 0, offset);\r\n        Arrays.fill(buf, ' ');\r\n        return ret;\r\n    }\r\n}\r\n",
        "test_prompt": "// PasswordField_0Test.java\npackage org.quickserver.util.io;\n\nimport java.io.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PasswordField}.\n* It contains one unit test case for the {@link PasswordField#getPassword(String)} method.\n*/\nclass PasswordField_0Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// PasswordField_1Test.java\npackage org.quickserver.util.io;\n\nimport java.io.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PasswordField}.\n* It contains one unit test case for the {@link PasswordField#getPassword(InputStream, String)} method.\n*/\nclass PasswordField_1Test {\n}"
            }
        ],
        "id": "43173ebb-058a-44cf-b0af-fe5375496dd7",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/io/PasswordField_1Test.java",
        "original_code": "// PasswordField.java\n/*\r\n * This file is part of the QuickServer library \r\n * Copyright (C) QuickServer.org\r\n *\r\n * Use, modification, copying and distribution of this software is subject to\r\n * the terms and conditions of the GNU Lesser General Public License. \r\n * You should have received a copy of the GNU LGP License along with this \r\n * library; if not, you can download a copy from <http://www.quickserver.org/>.\r\n *\r\n * For questions, suggestions, bug-reports, enhancement-requests etc.\r\n * visit http://www.quickserver.org\r\n *\r\n */\r\npackage org.quickserver.util.io;\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.util.logging.*;\r\n\r\n/**\r\n * This class prompts the user for a password and attempts to mask\r\n * input.\r\n * @since 1.4\r\n */\r\npublic class PasswordField {\r\n\r\n    private static Logger logger = Logger.getLogger(PasswordField.class.getName());\r\n\r\n    /**\r\n     * @param prompt The prompt to display to the user.\r\n     * @return The password as entered by the user.\r\n     */\r\n    public static final char[] getPassword(String prompt) throws IOException {\r\n        return getPassword(System.in, prompt);\r\n    }\r\n\r\n    /**\r\n     * @param in input stream to be used (e.g. System.in)\r\n     * @param prompt The prompt to display to the user.\r\n     * @return The password as entered by the user.\r\n     */\r\n    public static final char[] getPassword(InputStream in, String prompt) throws IOException {\r\n        MaskingThread maskingthread = new MaskingThread(prompt);\r\n        Thread thread = new Thread(maskingthread);\r\n        thread.start();\r\n        char[] lineBuffer;\r\n        char[] buf;\r\n        int i;\r\n        buf = lineBuffer = new char[128];\r\n        int room = buf.length;\r\n        int offset = 0;\r\n        int c;\r\n        loop: while (true) {\r\n            c = in.read();\r\n            switch(c) {\r\n                case -1:\r\n                case '\\n':\r\n                    break loop;\r\n                case '\\r':\r\n                    int c2 = in.read();\r\n                    if ((c2 != '\\n') && (c2 != -1)) {\r\n                        if (!(in instanceof PushbackInputStream)) {\r\n                            in = new PushbackInputStream(in);\r\n                        }\r\n                        ((PushbackInputStream) in).unread(c2);\r\n                    } else {\r\n                        break loop;\r\n                    }\r\n                default:\r\n                    if (--room < 0) {\r\n                        buf = new char[offset + 128];\r\n                        room = buf.length - offset - 1;\r\n                        System.arraycopy(lineBuffer, 0, buf, 0, offset);\r\n                        Arrays.fill(lineBuffer, ' ');\r\n                        lineBuffer = buf;\r\n                    }\r\n                    buf[offset++] = (char) c;\r\n                    break;\r\n            }\r\n        }\r\n        maskingthread.stopMasking();\r\n        System.out.print(\"\\010\");\r\n        //Code to clear doskey on win nt/2000 - Alt+F7\r\n        String os = System.getProperty(\"os.name\");\r\n        if (os != null && os.toLowerCase().startsWith(\"windows\")) {\r\n            try {\r\n                java.awt.Robot robot = new java.awt.Robot();\r\n                robot.keyPress(java.awt.event.KeyEvent.VK_ALT);\r\n                robot.keyPress(java.awt.event.KeyEvent.VK_F7);\r\n                robot.keyRelease(java.awt.event.KeyEvent.VK_F7);\r\n                robot.keyRelease(java.awt.event.KeyEvent.VK_ALT);\r\n            } catch (Exception ignore) {\r\n                logger.warning(\"Could not clears command history: \" + ignore);\r\n            }\r\n        }\r\n        if (offset == 0) {\r\n            return null;\r\n        }\r\n        char[] ret = new char[offset];\r\n        System.arraycopy(buf, 0, ret, 0, offset);\r\n        Arrays.fill(buf, ' ');\r\n        return ret;\r\n    }\r\n}\r\n",
        "test_prompt": "// PasswordField_1Test.java\npackage org.quickserver.util.io;\n\nimport java.io.*;\nimport java.util.*;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PasswordField}.\n* It contains one unit test case for the {@link PasswordField#getPassword(InputStream, String)} method.\n*/\nclass PasswordField_1Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// ByteBufferInputStream_8Test.java\npackage org.quickserver.util.io;\n\nimport java.io.*;\nimport java.nio.*;\nimport java.nio.charset.*;\nimport java.util.*;\nimport org.quickserver.net.server.ClientHandler;\nimport java.util.logging.*;\nimport org.quickserver.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ByteBufferInputStream}.\n* It contains one unit test case for the {@link ByteBufferInputStream#readLine()} method.\n*/\nclass ByteBufferInputStream_8Test {\n}"
            }
        ],
        "id": "0519a9ab-2b5c-4347-b1e9-d6cc08926fe2",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/io/ByteBufferInputStream_8Test.java",
        "original_code": "// ByteBufferInputStream.java\n/*\r\n * This file is part of the QuickServer library \r\n * Copyright (C) QuickServer.org\r\n *\r\n * Use, modification, copying and distribution of this software is subject to\r\n * the terms and conditions of the GNU Lesser General Public License. \r\n * You should have received a copy of the GNU LGP License along with this \r\n * library; if not, you can download a copy from <http://www.quickserver.org/>.\r\n *\r\n * For questions, suggestions, bug-reports, enhancement-requests etc.\r\n * visit http://www.quickserver.org\r\n *\r\n */\r\npackage org.quickserver.util.io;\r\n\r\nimport java.io.*;\r\nimport java.nio.*;\r\nimport java.nio.charset.*;\r\nimport java.util.*;\r\nimport org.quickserver.net.server.ClientHandler;\r\nimport java.util.logging.*;\r\nimport org.quickserver.util.*;\r\n\r\n/**\r\n * This is an InputStream constructed from list of ByteBuffers. This is\r\n * used in non-blocking mode.\r\n * @since 1.4.5\r\n * @author Akshathkumar Shetty\r\n */\r\npublic class ByteBufferInputStream extends InputStream {\r\n\r\n    private static final Logger logger = Logger.getLogger(ByteBufferInputStream.class.getName());\r\n\r\n    static {\r\n        logger.setLevel(Level.INFO);\r\n    }\r\n\r\n    /**\r\n     * Sets the debug flag.\r\n     */\r\n    public static void setDebug(boolean flag) {\r\n        if (flag)\r\n            logger.setLevel(Level.FINEST);\r\n        else\r\n            logger.setLevel(Level.INFO);\r\n    }\r\n\r\n    /**\r\n     * @since 1.4.7\r\n     */\r\n    public static boolean isLoggable(Level level) {\r\n        return logger.isLoggable(level);\r\n    }\r\n\r\n    private final ArrayList bufferList;\r\n\r\n    private ClientHandler handler;\r\n\r\n    private CharsetDecoder decoder;\r\n\r\n    private CharsetEncoder encoder;\r\n\r\n    private StringBuilder strings;\r\n\r\n    private int pos = 0;\r\n\r\n    private int index = -1;\r\n\r\n    private int start = 0;\r\n\r\n    private boolean lookingForLineFeed = false;\r\n\r\n    public ByteBufferInputStream(ArrayList bufferList, ClientHandler handler, String charset) {\r\n        if (bufferList == null || handler == null)\r\n            throw new IllegalArgumentException(\"ArrayList or ClientHandler was null.\");\r\n        this.bufferList = bufferList;\r\n        this.handler = handler;\r\n        Charset _charset = Charset.forName(charset);\r\n        decoder = _charset.newDecoder();\r\n        encoder = _charset.newEncoder();\r\n        strings = new StringBuilder();\r\n    }\r\n\r\n    public synchronized int availableOnlyInByteBuffer() {\r\n        int count = 0;\r\n        ByteBuffer byteBuffer = null;\r\n        int size = bufferList.size();\r\n        for (int c = 0; c < size; c++) {\r\n            byteBuffer = (ByteBuffer) bufferList.get(c);\r\n            count += byteBuffer.remaining();\r\n        }\r\n        logger.finest(\"count: \" + count);\r\n        return count;\r\n    }\r\n\r\n    public synchronized int available() {\r\n        int count = 0;\r\n        ByteBuffer byteBuffer = null;\r\n        if (lookingForLineFeed) {\r\n            char c = '\\0';\r\n            if (strings.length() != 0) {\r\n                c = strings.charAt(0);\r\n                if (c == '\\n') {\r\n                    strings.deleteCharAt(0);\r\n                    lookingForLineFeed = false;\r\n                }\r\n            } else {\r\n                while (!bufferList.isEmpty()) {\r\n                    byteBuffer = (ByteBuffer) bufferList.get(0);\r\n                    if (byteBuffer.remaining() == 0) {\r\n                        returnBufferBack();\r\n                        continue;\r\n                    }\r\n                    int p = byteBuffer.position();\r\n                    c = (char) byteBuffer.get(p);\r\n                    if (c == '\\n') {\r\n                        //move position\r\n                        byteBuffer.get();\r\n                        lookingForLineFeed = false;\r\n                    }\r\n                    break;\r\n                }\r\n                //end of while\r\n            }\r\n        }\r\n        count += strings.length();\r\n        int size = bufferList.size();\r\n        for (int c = 0; c < size; c++) {\r\n            byteBuffer = (ByteBuffer) bufferList.get(c);\r\n            count += byteBuffer.remaining();\r\n        }\r\n        //logger.finest(\"count: \"+count);\r\n        return count;\r\n    }\r\n\r\n    public synchronized void close() throws IOException {\r\n        if (handler.getSocketChannel() != null)\r\n            handler.getSocketChannel().close();\r\n        //handler.closeConnection();\r\n    }\r\n\r\n    public boolean markSupported() {\r\n        return false;\r\n    }\r\n\r\n    public synchronized int read() throws IOException {\r\n        handler.isConnected();\r\n        if (strings.length() != 0) {\r\n            addStringsBackAsBuffer();\r\n        }\r\n        if (bufferList.isEmpty()) {\r\n            try {\r\n                wait();\r\n            } catch (InterruptedException ie) {\r\n                logger.warning(\"InterruptedException: \" + ie);\r\n                return -1;\r\n            }\r\n            if (bufferList.isEmpty())\r\n                return -1;\r\n        }\r\n        ByteBuffer byteBuffer = null;\r\n        while (!bufferList.isEmpty()) {\r\n            byteBuffer = (ByteBuffer) bufferList.get(0);\r\n            if (byteBuffer.remaining() == 0) {\r\n                returnBufferBack();\r\n                continue;\r\n            }\r\n            if (lookingForLineFeed) {\r\n                int lflfChar = (int) byteBuffer.get();\r\n                lookingForLineFeed = false;\r\n                if (lflfChar == (int) '\\n') {\r\n                    continue;\r\n                } else {\r\n                    return lflfChar;\r\n                }\r\n            } else {\r\n                return (int) byteBuffer.get();\r\n            }\r\n        }\r\n        return read();\r\n    }\r\n\r\n    public int read(byte[] b) throws IOException {\r\n        return read(b, 0, b.length);\r\n    }\r\n\r\n    public synchronized int read(byte[] b, int off, int len) throws IOException {\r\n        handler.isConnected();\r\n        if (strings.length() != 0) {\r\n            addStringsBackAsBuffer();\r\n        }\r\n        if (bufferList.isEmpty()) {\r\n            try {\r\n                wait();\r\n            } catch (InterruptedException ie) {\r\n                logger.warning(\"InterruptedException: \" + ie);\r\n                //ie.printStackTrace();\r\n                return -1;\r\n            }\r\n            if (bufferList.isEmpty())\r\n                return -1;\r\n        }\r\n        ByteBuffer byteBuffer = null;\r\n        int read = 0;\r\n        int remaining = 0;\r\n        int toRead = len;\r\n        do {\r\n            byteBuffer = (ByteBuffer) bufferList.get(0);\r\n            remaining = byteBuffer.remaining();\r\n            if (remaining == 0) {\r\n                returnBufferBack();\r\n                continue;\r\n            }\r\n            if (lookingForLineFeed) {\r\n                int p = byteBuffer.position();\r\n                byte lflfChar = byteBuffer.get(p);\r\n                lookingForLineFeed = false;\r\n                if (lflfChar == (byte) '\\n') {\r\n                    //move position\r\n                    byteBuffer.get();\r\n                    continue;\r\n                }\r\n            }\r\n            if (remaining < toRead) {\r\n                byteBuffer.get(b, off, remaining);\r\n                off = off + remaining;\r\n                read = read + remaining;\r\n                toRead = toRead - remaining;\r\n            } else {\r\n                byteBuffer.get(b, off, toRead);\r\n                read = read + toRead;\r\n                return read;\r\n            }\r\n        } while (!bufferList.isEmpty());\r\n        return read;\r\n    }\r\n\r\n    public long skip(long n) throws IOException {\r\n        if (n < 0)\r\n            return 0;\r\n        int s = 0;\r\n        for (; s < n; s++) {\r\n            if (read() == -1)\r\n                break;\r\n        }\r\n        return s;\r\n    }\r\n\r\n    private void addStringsBackAsBuffer() {\r\n        try {\r\n            ByteBuffer borrowBuffer = null;\r\n            ByteBuffer bb = encoder.encode(CharBuffer.wrap(strings));\r\n            strings.setLength(0);\r\n            do {\r\n                if (borrowBuffer == null) {\r\n                    borrowBuffer = (ByteBuffer) handler.getServer().getByteBufferPool().borrowObject();\r\n                }\r\n                borrowBuffer.put(bb.get());\r\n                if (borrowBuffer.hasRemaining() == false) {\r\n                    borrowBuffer.flip();\r\n                    bufferList.add(0, borrowBuffer);\r\n                    borrowBuffer = null;\r\n                }\r\n            } while (bb.hasRemaining());\r\n            if (borrowBuffer != null) {\r\n                borrowBuffer.flip();\r\n                bufferList.add(0, borrowBuffer);\r\n            }\r\n        } catch (Exception er) {\r\n            logger.warning(\"Error : \" + er);\r\n        }\r\n        start = 0;\r\n        index = -1;\r\n        pos = 0;\r\n    }\r\n\r\n    private void returnBufferBack() {\r\n        returnBufferBack((ByteBuffer) bufferList.remove(0));\r\n    }\r\n\r\n    private void returnBufferBack(ByteBuffer byteBuffer) {\r\n        try {\r\n            handler.getServer().getByteBufferPool().returnObject(byteBuffer);\r\n        } catch (Exception er) {\r\n            logger.warning(\"Error while returning ByteBuffer to pool: \" + er);\r\n        }\r\n    }\r\n\r\n    //-- extra helpers\r\n    /**\r\n     * Checks if a line of String is ready to be read.\r\n     * @throws IOException if connection is lost or closed.\r\n     */\r\n    public synchronized boolean isLineReady() throws IOException {\r\n        handler.isConnected();\r\n        boolean result = false;\r\n        result = isLineReadyForStringBuilder();\r\n        if (result == true || bufferList.isEmpty()) {\r\n            if (logger.isLoggable(Level.FINEST))\r\n                logger.finest(\"result: \" + result);\r\n            return result;\r\n        }\r\n        ByteBuffer byteBuffer = null;\r\n        CharBuffer charBuffer = null;\r\n        while (result == false && !bufferList.isEmpty()) {\r\n            byteBuffer = (ByteBuffer) bufferList.get(0);\r\n            if (byteBuffer.remaining() == 0) {\r\n                returnBufferBack();\r\n                continue;\r\n            }\r\n            charBuffer = decoder.decode(byteBuffer);\r\n            if (charBuffer == null) {\r\n                returnBufferBack();\r\n                continue;\r\n            }\r\n            strings.append(charBuffer);\r\n            returnBufferBack();\r\n            result = isLineReadyForStringBuilder();\r\n        }\r\n        //end of while\r\n        if (logger.isLoggable(Level.FINEST))\r\n            logger.finest(\"result: \" + result);\r\n        return result;\r\n    }\r\n\r\n    private boolean isLineReadyForStringBuilder() {\r\n        if (index != -1)\r\n            return true;\r\n        int stringsLength = strings.length();\r\n        while (pos < stringsLength) {\r\n            char c = strings.charAt(pos);\r\n            if (c == '\\n') {\r\n                if (lookingForLineFeed) {\r\n                    strings.deleteCharAt(0);\r\n                    stringsLength--;\r\n                    lookingForLineFeed = false;\r\n                    continue;\r\n                } else {\r\n                    index = pos;\r\n                    pos++;\r\n                    return true;\r\n                }\r\n            }\r\n            if (c == '\\r') {\r\n                index = pos;\r\n                lookingForLineFeed = true;\r\n                pos++;\r\n                return true;\r\n            } else {\r\n                pos++;\r\n                lookingForLineFeed = false;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Reads a line of String if ready. If line is not yet ready this will\r\n     * block. To find out if the line is ready use <code>isLineReady()</code>\r\n     * @see #isLineReady()\r\n     */\r\n    public synchronized String readLine() throws IOException {\r\n        if (index == -1) {\r\n            while (isLineReady() == false) {\r\n                try {\r\n                    wait();\r\n                } catch (InterruptedException ie) {\r\n                    logger.warning(\"InterruptedException: \" + ie);\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        int stringsLength = strings.length();\r\n        Assertion.affirm(index <= stringsLength);\r\n        String data = strings.substring(start, index);\r\n        if (pos < stringsLength)\r\n            strings.delete(0, pos);\r\n        else\r\n            strings.setLength(0);\r\n        start = 0;\r\n        pos = start;\r\n        index = -1;\r\n        return data;\r\n    }\r\n\r\n    public void dumpContent() {\r\n        if (logger.isLoggable(Level.FINE) == false) {\r\n            //logger.warning(\"Can't precede. Logging level FINE is not loggable! \");\r\n            return;\r\n        }\r\n        logger.fine(\"Start of dump..\");\r\n        synchronized (bufferList) {\r\n            int size = bufferList.size();\r\n            ByteBuffer byteBuffer = null;\r\n            if (strings.length() != 0) {\r\n                logger.fine(\"[decoded] \" + strings);\r\n            }\r\n            for (int c = 0; c < size; c++) {\r\n                byteBuffer = (ByteBuffer) bufferList.get(c);\r\n                try {\r\n                    logger.fine(\"[\" + c + \"] \" + decoder.decode(byteBuffer.duplicate()));\r\n                } catch (Exception e) {\r\n                    logger.fine(\"[\" + c + \"] Error : \" + e);\r\n                }\r\n            }\r\n        }\r\n        logger.fine(\"End of dump..\");\r\n    }\r\n}\r\n",
        "test_prompt": "// ByteBufferInputStream_8Test.java\npackage org.quickserver.util.io;\n\nimport java.io.*;\nimport java.nio.*;\nimport java.nio.charset.*;\nimport java.util.*;\nimport org.quickserver.net.server.ClientHandler;\nimport java.util.logging.*;\nimport org.quickserver.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ByteBufferInputStream}.\n* It contains one unit test case for the {@link ByteBufferInputStream#readLine()} method.\n*/\nclass ByteBufferInputStream_8Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// ClassUtil_1Test.java\npackage org.quickserver.util;\n\nimport java.util.*;\nimport java.io.*;\nimport java.net.*;\nimport org.quickserver.util.io.*;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassUtil}.\n* It contains one unit test case for the {@link ClassUtil#getClassLoaderFromJars(String)} method.\n*/\nclass ClassUtil_1Test {\n}"
            }
        ],
        "id": "5bcfa43b-e9b3-44d3-81cd-f1ba3858ca39",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/ClassUtil_1Test.java",
        "original_code": "// ClassUtil.java\n/*\r\n * This file is part of the QuickServer library \r\n * Copyright (C) QuickServer.org\r\n *\r\n * Use, modification, copying and distribution of this software is subject to\r\n * the terms and conditions of the GNU Lesser General Public License. \r\n * You should have received a copy of the GNU LGP License along with this \r\n * library; if not, you can download a copy from <http://www.quickserver.org/>.\r\n *\r\n * For questions, suggestions, bug-reports, enhancement-requests etc.\r\n * visit http://www.quickserver.org\r\n *\r\n */\r\npackage org.quickserver.util;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.net.*;\r\nimport org.quickserver.util.io.*;\r\nimport java.util.logging.*;\r\n\r\n/**\r\n * A utility class to load class.\r\n * @author Akshathkumar Shetty\r\n * @since 1.3.2\r\n */\r\npublic class ClassUtil {\r\n\r\n    private static Logger logger = Logger.getLogger(ClassUtil.class.getName());\r\n\r\n    /**\r\n     * Tries to load the classes present in the array\r\n     * passed has second parameter from\r\n     * the ClassLoader passed has first parameter.\r\n     * Returns the HashMap of all the classed successfully loaded.\r\n     * @param classLoader ClassLoader used to find the class\r\n     * @param classes[] array of classes to load.\r\n     */\r\n    public static Map loadClass(ClassLoader classLoader, String[] classNames) throws Exception {\r\n        Class classloded = null;\r\n        HashMap classHash = new HashMap();\r\n        for (int i = 0; i < classNames.length; i++) {\r\n            try {\r\n                classloded = classLoader.loadClass(classNames[i]);\r\n                classHash.put(classNames[i], classloded);\r\n            } catch (Exception e) {\r\n                logger.warning(\"Could not load classes : \" + e);\r\n            }\r\n        }\r\n        return classHash;\r\n    }\r\n\r\n    /**\r\n     * Returns the ClassLoader to all the jars present in the\r\n     * dir passed has first parameter.\r\n     * @param jarDir path to the directory containing the jars\r\n     */\r\n    public static ClassLoader getClassLoaderFromJars(String jarDir) throws Exception {\r\n        logger.fine(\"Getting ClassLoader for jars in \" + jarDir);\r\n        File file = new File(jarDir);\r\n        ArrayList list = new ArrayList();\r\n        File[] jars = file.listFiles(new JarFileList());\r\n        for (int j = 0; j < jars.length; j++) {\r\n            list.add(jars[j].toURL());\r\n        }\r\n        Object[] array = list.toArray();\r\n        URL[] jarurl = new URL[array.length];\r\n        for (int i = 0; i < array.length; i++) {\r\n            jarurl[i] = (URL) array[i];\r\n        }\r\n        URLClassLoader classLoader = URLClassLoader.newInstance(jarurl);\r\n        return classLoader;\r\n    }\r\n\r\n    /**\r\n     * Returns the ClassLoader to a jar\r\n     * @since 1.3.3\r\n     */\r\n    public static ClassLoader getClassLoaderFromJar(String jarPath) throws Exception {\r\n        File file = new File(jarPath);\r\n        logger.fine(\"Getting ClassLoader for \" + file.getCanonicalPath());\r\n        URL[] jarurl = { file.toURL() };\r\n        URLClassLoader classLoader = URLClassLoader.newInstance(jarurl);\r\n        return classLoader;\r\n    }\r\n\r\n    /**\r\n     * Returns the ClassLoader\r\n     * @since 1.3.3\r\n     */\r\n    public static ClassLoader getClassLoader(String path) throws Exception {\r\n        File file = new File(path);\r\n        if (file.canRead() == false) {\r\n            logger.warning(\"Could not read path: \" + path);\r\n            return null;\r\n        }\r\n        if (file.isDirectory())\r\n            return getClassLoaderFromJars(path);\r\n        else\r\n            return getClassLoaderFromJar(path);\r\n    }\r\n}\r\n",
        "test_prompt": "// ClassUtil_1Test.java\npackage org.quickserver.util;\n\nimport java.util.*;\nimport java.io.*;\nimport java.net.*;\nimport org.quickserver.util.io.*;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClassUtil}.\n* It contains one unit test case for the {@link ClassUtil#getClassLoaderFromJars(String)} method.\n*/\nclass ClassUtil_1Test {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "finish_reason": "ERROR - CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call,so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1.",
                "text": "// ClientPoolTest.java\npackage org.quickserver.util.pool.thread;\n\nimport java.util.*;\nimport org.quickserver.util.pool.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.net.server.*;\nimport org.quickserver.util.xmlreader.PoolConfig;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientPool}.\n* It contains one unit test case for the {@link ClientPool#shouldNioWriteHappen()} method.\n*/\nclass ClientPoolTest {\n}"
            }
        ],
        "id": "e440d1d4-5f54-4eda-a490-73ecc994613d",
        "prompt_id": "/EvoSuiteBenchmark/original/93_quickserver/src/main/java/org/quickserver/util/pool/thread/ClientPool.java",
        "original_code": "// ClientPool.java\n/*\r\n * This file is part of the QuickServer library \r\n * Copyright (C) QuickServer.org\r\n *\r\n * Use, modification, copying and distribution of this software is subject to\r\n * the terms and conditions of the GNU Lesser General Public License. \r\n * You should have received a copy of the GNU LGP License along with this \r\n * library; if not, you can download a copy from <http://www.quickserver.org/>.\r\n *\r\n * For questions, suggestions, bug-reports, enhancement-requests etc.\r\n * visit http://www.quickserver.org\r\n *\r\n */\r\npackage org.quickserver.util.pool.thread;\r\n\r\nimport java.util.*;\r\nimport org.quickserver.util.pool.*;\r\nimport org.apache.commons.pool.*;\r\nimport org.quickserver.net.server.*;\r\nimport org.quickserver.util.xmlreader.PoolConfig;\r\nimport java.util.logging.*;\r\n\r\n/**\r\n * This is a class for managing the pool of threads for\r\n * handling clients.\r\n * @author Akshathkumar Shetty\r\n * @since 1.3\r\n */\r\npublic class ClientPool {\r\n\r\n    private static final Logger logger = Logger.getLogger(ClientPool.class.getName());\r\n\r\n    protected List clients = new ArrayList(3);\r\n\r\n    protected ObjectPool pool;\r\n\r\n    protected PoolConfig poolConfig;\r\n\r\n    //v1.4.6\r\n    private int countNioWriteThreads;\r\n\r\n    private int maxThreadsForNioWrite = 10;\r\n\r\n    public ClientPool(QSObjectPool objectPool, PoolConfig poolConfig) {\r\n        this.poolConfig = poolConfig;\r\n        pool = objectPool;\r\n    }\r\n\r\n    public ObjectPool getObjectPool() {\r\n        return pool;\r\n    }\r\n\r\n    public void addClient(Runnable r) throws NoSuchElementException {\r\n        addClient(r, false);\r\n    }\r\n\r\n    public synchronized void addClient(Runnable r, boolean keepObjOnFail) throws NoSuchElementException {\r\n        //logger.finest(\"Adding Runnable: \"+r);\r\n        clients.add(r);\r\n        ClientThread ct = null;\r\n        try {\r\n            ct = (ClientThread) pool.borrowObject();\r\n            if (ct.isReady() == false) {\r\n                //ct.start();\r\n                //timeout was just in case :-)\r\n                wait(500);\r\n                //Thread.yield();\r\n            } else {\r\n                synchronized (ct) {\r\n                    ct.notify();\r\n                }\r\n            }\r\n        } catch (NoSuchElementException e) {\r\n            logger.info(\"No free threads: \" + e);\r\n            if (keepObjOnFail == false)\r\n                clients.remove(r);\r\n            throw e;\r\n        } catch (Exception e) {\r\n            logger.warning(\"Error in addClient: \" + e + \", Closing client: \" + (ClientHandler) r);\r\n            try {\r\n                ((ClientHandler) r).forceClose();\r\n            } catch (Exception er) {\r\n                logger.warning(\"Error closing client: \" + er);\r\n            }\r\n            try {\r\n                if (ct != null)\r\n                    pool.returnObject(ct);\r\n            } catch (Exception er) {\r\n                logger.warning(\"Error in returning thread: \" + er);\r\n            }\r\n        }\r\n    }\r\n\r\n    public synchronized void returnObject(Object object) {\r\n        try {\r\n            pool.returnObject(object);\r\n        } catch (Exception e) {\r\n            logger.warning(\"IGONRED: Error while returning object : \" + e);\r\n            ((Thread) object).interrupt();\r\n        }\r\n    }\r\n\r\n    public synchronized Runnable getClient() {\r\n        if (clients.isEmpty()) {\r\n            return null;\r\n        }\r\n        return (Runnable) clients.remove(0);\r\n    }\r\n\r\n    /**\r\n     * @since 1.4.5\r\n     */\r\n    public boolean isClientAvailable() {\r\n        if (clients.isEmpty()) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    protected void finalize() throws Throwable {\r\n        try {\r\n            close();\r\n        } catch (Exception e) {\r\n            logger.warning(\"IGONRED:finalize in pool close : \" + e);\r\n        }\r\n        super.finalize();\r\n    }\r\n\r\n    public void close() throws Exception {\r\n        pool.close();\r\n    }\r\n\r\n    public void clear() throws Exception {\r\n        pool.clear();\r\n    }\r\n\r\n    /**\r\n     * Return the number of instances currently borrowed from my pool.\r\n     * @since 1.4.1\r\n     */\r\n    public int getNumActive() {\r\n        return pool.getNumActive();\r\n    }\r\n\r\n    /**\r\n     * Return the number of instances currently idle in my pool.\r\n     * @since 1.4.1\r\n     */\r\n    public int getNumIdle() {\r\n        return pool.getNumIdle();\r\n    }\r\n\r\n    /**\r\n     * Returns iterator containing all the active\r\n     * threads i.e ClientHandler handling connected clients.\r\n     * @since 1.3.1\r\n     */\r\n    public final Iterator getAllClientThread() {\r\n        return ((QSObjectPool) pool).getAllActiveObjects();\r\n    }\r\n\r\n    public Object getObjectToSynchronize() {\r\n        return ((QSObjectPool) pool).getObjectToSynchronize();\r\n    }\r\n\r\n    /**\r\n     * Returns PoolConfig object that configured this pool\r\n     * @since 1.4.5\r\n     */\r\n    public PoolConfig getPoolConfig() {\r\n        return poolConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum threads allowed for nio write. If set to 0 or less no limit is\r\n     * imposed.\r\n     * @since 1.4.6\r\n     */\r\n    public void setMaxThreadsForNioWrite(int count) {\r\n        this.maxThreadsForNioWrite = count;\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum threads allowed for nio write\r\n     * @since 1.4.6\r\n     */\r\n    public int getMaxThreadsForNioWrite() {\r\n        return maxThreadsForNioWrite;\r\n    }\r\n\r\n    /**\r\n     * Notifies when NIO write is complete.\r\n     * @since 1.4.6\r\n     */\r\n    protected void nioWriteEnd() {\r\n        countNioWriteThreads--;\r\n        if (countNioWriteThreads < 0) {\r\n            logger.warning(\"countNioWriteThreads should not go less than 0\");\r\n            countNioWriteThreads = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies when NIO write is about to start.\r\n     * @since 1.4.6\r\n     */\r\n    protected void nioWriteStart() {\r\n        countNioWriteThreads++;\r\n    }\r\n\r\n    /**\r\n     * Method to suggest if nio write should be sent for processing.\r\n     * @since 1.4.6\r\n     */\r\n    public boolean shouldNioWriteHappen() {\r\n        if (maxThreadsForNioWrite <= 0 || countNioWriteThreads < maxThreadsForNioWrite) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n",
        "test_prompt": "// ClientPoolTest.java\npackage org.quickserver.util.pool.thread;\n\nimport java.util.*;\nimport org.quickserver.util.pool.*;\nimport org.apache.commons.pool.*;\nimport org.quickserver.net.server.*;\nimport org.quickserver.util.xmlreader.PoolConfig;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ClientPool}.\n* It contains one unit test case for the {@link ClientPool#shouldNioWriteHappen()} method.\n*/\nclass ClientPoolTest {",
        "time_taken": -1,
        "original_generated_code": "",
        "choice_no": 1
    }
]