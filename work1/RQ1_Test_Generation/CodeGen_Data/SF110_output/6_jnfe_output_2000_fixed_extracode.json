[
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n    /**\n     * Test of getKeyStore method, of class TransportKeyStoreBean.\n     */\n    @Test\n    void testGetSecurityManager() {\n        ClassLoader cl = TransportKeyStoreBean.class.getClassLoader();\n        ClassLoader acl = null;\n        try {\n            acl = cl.loadClass(\"org.pentaho.di.core.security.authentication.SystemAuthentication\").getClassLoader();\n        } catch (ClassNotFoundException CNFex) {\n            //Ignore\n        }\n}\n}",
                "finish_reason": "length"
            }
        ],
        "id": "78e9ea82-3d15-45da-b5a1-b23666c56f51",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 9.806233644485474,
        "usage": {
            "prompt_tokens": 1888
        },
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n    /**\n     * Test of getKeyStore method, of class TransportKeyStoreBean.\n     */\n    @Test\n    void testGetSecurityManager() {\n        ClassLoader cl = TransportKeyStoreBean.class.getClassLoader();\n        ClassLoader acl = null;\n        try {\n            acl = cl.loadClass(\"org.pentaho.di.core.security.authentication.SystemAuthentication\").getClassLoader();\n        } catch (ClassNotFoundException CNFex) {\n            //Ignore\n        }\n        assertEquals(SystemAuthentication.class, acl.loadClass(\"org.pentaho.di.core.security.authentication.SystemAuthentication\")\n       .",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n\tprivate Logger testLogger = LoggerFactory.getLogger(Tests.class.getName());\n\t\n\n\t@Test\n\t@SuppressWarnings(\"resource\")\n\tpublic void testKeyManagerFactory() throws Exception {                 \n\t\tfinal ClassLoader baseLoader = TransportKeyStoreBean_0Test.class.getClassLoader();                \n\t\tfinal KeyManagerFactory keyManagerFactory = SecurityUtils.openKeyManagerFactory(\"x509\", baseLoader, KeyManagerFactory.getDefaultAlgorithm());\n\t\t\n        final KeyManagerFactory kmf0 = SecurityUtils.openKeyManagerFactory(\"TLS v1.1\", baseLoader, KeyManagerFactory.getDefaultAlgorithm());\n}\n}",
                "finish_reason": "length"
            }
        ],
        "id": "78e9ea82-3d15-45da-b5a1-b23666c56f51",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 9.806233644485474,
        "usage": {
            "prompt_tokens": 1888
        },
        "applied_heuristics": "H3;H7",
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n\tprivate Logger testLogger = LoggerFactory.getLogger(Tests.class.getName());\n\t\n\n\t@Test\n\t@SuppressWarnings(\"resource\")\n\tpublic void testKeyManagerFactory() throws Exception {                 \n\t\tfinal ClassLoader baseLoader = TransportKeyStoreBean_0Test.class.getClassLoader();                \n\t\tfinal KeyManagerFactory keyManagerFactory = SecurityUtils.openKeyManagerFactory(\"x509\", baseLoader, KeyManagerFactory.getDefaultAlgorithm());\n\t\t\n        final KeyManagerFactory kmf0 = SecurityUtils.openKeyManagerFactory(\"TLS v1.1\", baseLoader, KeyManagerFactory.getDefaultAlgorithm());\n \t\tif (kmf",
        "choice_no": 2
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n}",
                "finish_reason": "length"
            }
        ],
        "id": "78e9ea82-3d15-45da-b5a1-b23666c56f51",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 9.806233644485474,
        "usage": {
            "prompt_tokens": 1888
        },
        "applied_heuristics": "H3;H7",
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n    /**\n\t* Creates the {@link TransportKeyStoreBean}.\n\t* Creates a new object of {@link TransportKeyStoreBean}.\n\t*/\n\tprivate TransportKeyStoreBean openTransportStore() {\n\t\treturn new TransportKeyStoreBean();\n\t}\n        \n\t/**\n\t* Checks if the {@link KeyManagerFactory} instance is correctly built:\n\t* <ul>\n\t* <li>it is a KeyManagerFactory for the type <code>SunX509</code></li>\n\t* <li>it has the correct keystore with an attribute that matches</li>\n\t* <ul>\n\t* <li>that keystore has an attribute that",
        "choice_no": 3
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n\t\tprivate String keyStore1Uri, keyStore2Uri;\n\t\t\n\t\t\n\t\t/**\n\t\t * Test of setKeyStore methods, of class TransportKeyStoreBean.\n\t\t */\n\t\t@Test\n\t\tpublic void testSetKeyStore() {\n\t\t\tTransportKeyStoreBean instance = new TransportKeyStoreBean();\n\t\t\tinstance.setKeyStoreUri(keyStore1Uri);\n\t\t\tinstance.setKeyStoreType(keyStore2Uri);\n\t\t\tinstance.setKeyStorePassword(keyStorePassword);\n\t\t\tinstance.setTrustStore(keyStore1Uri);\n\t\t\tinstance.setTrustStorePassword(keyStorePassword);\n}\n}",
                "finish_reason": "length"
            }
        ],
        "id": "78e9ea82-3d15-45da-b5a1-b23666c56f51",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 9.806233644485474,
        "usage": {
            "prompt_tokens": 1888
        },
        "applied_heuristics": "H1;H7",
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n\t\tprivate String keyStore1Uri, keyStore2Uri;\n\t\t\n\t\t\n\t\t/**\n\t\t * Test of setKeyStore methods, of class TransportKeyStoreBean.\n\t\t */\n\t\t@Test\n\t\tpublic void testSetKeyStore() {\n\t\t\tTransportKeyStoreBean instance = new TransportKeyStoreBean();\n\t\t\tinstance.setKeyStoreUri(keyStore1Uri);\n\t\t\tinstance.setKeyStoreType(keyStore2Uri);\n\t\t\tinstance.setKeyStorePassword(keyStorePassword);\n\t\t\tinstance.setTrustStore(keyStore1Uri);\n\t\t\tinstance.setTrustStorePassword(keyStorePassword);\n\t\t\tinstance.setTrustStoreType(keyStore1Uri",
        "choice_no": 4
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t \t \t \t \n\t/**\n\t * Test method for {@link br.com.jnfe.boutrige.domain.TransportKeyStoreBean#newKeyManagerFactory()\n\t * }\n\t*\n\t */\n\t@Test\n\tpublic void testNewKeyManagerFactory() {\n\t\t \t \t \tkeyManager = null;\n\t\t\tkeyManager = SecurityUtils.openKeyManagerFactory();\n\t\t\tassertNotNull(keyManager);\n\t}\n\t \t \t\n\tprivate KeyManagerFactory keyManager;\n\t \t\n\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "78e9ea82-3d15-45da-b5a1-b23666c56f51",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 9.806233644485474,
        "usage": {
            "prompt_tokens": 1888
        },
        "applied_heuristics": "H3;H7",
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t \t \t \t \n\t/**\n\t * Test method for {@link br.com.jnfe.boutrige.domain.TransportKeyStoreBean#newKeyManagerFactory()\n\t * }\n\t*\n\t */\n\t@Test\n\tpublic void testNewKeyManagerFactory() {\n\t\t \t \t \tkeyManager = null;\n\t\t\tkeyManager = SecurityUtils.openKeyManagerFactory();\n\t\t\tassertNotNull(keyManager);\n\t}\n\t \t \t\n\tprivate KeyManagerFactory keyManager;\n\t \t\n\n}",
        "choice_no": 5
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\tprivate String KEYSTORE_TYPE = \"AES\";\n\t\tprivate String KEYSTORE_TYPE_PROTECTED = \"AES-128\";\n\t\tprivate String KEYSTORE_URI = \"SSLCertificate/SSLCert/cacerts.pem\";\n\t\tprivate String KEYSTORE_URI_PROTECTED = \"SSLCertificate/SSLCert/cacerts_p.pem\";\n\t\tprivate String KEYSTORE_PASSWORD = \"password\";\n\t\tprivate String KEYSTORE_PASSWORD_PROTECTED = \"password\";\n\t\tprivate String KEYSTORE_PASSWORD_TEST = \"test\";\n\t \n}",
                "finish_reason": "length"
            }
        ],
        "id": "78e9ea82-3d15-45da-b5a1-b23666c56f51",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 9.806233644485474,
        "usage": {
            "prompt_tokens": 1888
        },
        "applied_heuristics": "H3",
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\tprivate String KEYSTORE_TYPE = \"AES\";\n\t\tprivate String KEYSTORE_TYPE_PROTECTED = \"AES-128\";\n\t\tprivate String KEYSTORE_URI = \"SSLCertificate/SSLCert/cacerts.pem\";\n\t\tprivate String KEYSTORE_URI_PROTECTED = \"SSLCertificate/SSLCert/cacerts_p.pem\";\n\t\tprivate String KEYSTORE_PASSWORD = \"password\";\n\t\tprivate String KEYSTORE_PASSWORD_PROTECTED = \"password\";\n\t\tprivate String KEYSTORE_PASSWORD_TEST = \"test\";\n\t \n\t\t@Test\n\t\tpublic void",
        "choice_no": 6
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n\t/** Test of openTransportStore with JNDI URI as String */\n\t@Test\n    public void testJNDIURI_String() {\n\t\tTransportKeyStoreBean instance = new TransportKeyStoreBean();\n\t\tassertNotNull(instance.getKeyStoreUri());\n\t}\n\n\t/** Test of keyStoreUri with JNDI URI as String */\n\t@Test\n    public void testJNDINULL_String() {\n\t\tTransportKeyStoreBean instance = new TransportKeyStoreBean();\n        instance.setKeyStoreUri(\"\");\n        assertNull(instance.getKeyStoreUri());\n}\n}",
                "finish_reason": "length"
            }
        ],
        "id": "78e9ea82-3d15-45da-b5a1-b23666c56f51",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 9.806233644485474,
        "usage": {
            "prompt_tokens": 1888
        },
        "applied_heuristics": "H3;H7",
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n\t/** Test of openTransportStore with JNDI URI as String */\n\t@Test\n    public void testJNDIURI_String() {\n\t\tTransportKeyStoreBean instance = new TransportKeyStoreBean();\n\t\tassertNotNull(instance.getKeyStoreUri());\n\t}\n\n\t/** Test of keyStoreUri with JNDI URI as String */\n\t@Test\n    public void testJNDINULL_String() {\n\t\tTransportKeyStoreBean instance = new TransportKeyStoreBean();\n        instance.setKeyStoreUri(\"\");\n        assertNull(instance.getKeyStoreUri());\n\t\tlogger.info(\"keystoreUri : {}\", instance.get",
        "choice_no": 7
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n    /** InitializingBean Test Case. */\n    @Test \n    public void testInit() {\n        String testString = \"test\";\n        KeyStore keyStore = null;\n\t\t\n        keyStore = createKeyStoreInstance(\"jnfe.pfx\");                                                             \n        assertNotNull(keyStore);\n        \n    }\n    \n\tprivate KeyStore createKeyStoreInstance(String pfx) throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        KeyStore ks = KeyStore.getInstance(pfx);\n        byte[] keyPassword = new byte[16];\n}\n}",
                "finish_reason": "length"
            }
        ],
        "id": "78e9ea82-3d15-45da-b5a1-b23666c56f51",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 9.806233644485474,
        "usage": {
            "prompt_tokens": 1888
        },
        "applied_heuristics": "H3;H7",
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n    /** InitializingBean Test Case. */\n    @Test \n    public void testInit() {\n        String testString = \"test\";\n        KeyStore keyStore = null;\n\t\t\n        keyStore = createKeyStoreInstance(\"jnfe.pfx\");                                                             \n        assertNotNull(keyStore);\n        \n    }\n    \n\tprivate KeyStore createKeyStoreInstance(String pfx) throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        KeyStore ks = KeyStore.getInstance(pfx);\n        byte[] keyPassword = new byte[16];\n        new SecurityUtils().",
        "choice_no": 8
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n\t\tprivate boolean result = true;\n\t\t\n\t\t/**\n\t\t* Test of openTransportStoreMethod().\n\t\t* No exception should be thrown.\n\t\t*/\n\t\t@Test\n        public void testOpenTransportStore() {\n                TransportKeyStoreBean instance = new TransportKeyStoreBean();\n\t\t    result = instance.openTransportStore();\n\t\t    assertTrue(\"The method failed to return the requested object\", result);\n\t\t}\n\t\t\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "78e9ea82-3d15-45da-b5a1-b23666c56f51",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 9.806233644485474,
        "usage": {
            "prompt_tokens": 1888
        },
        "applied_heuristics": "H3;H7",
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n\t\tprivate boolean result = true;\n\t\t\n\t\t/**\n\t\t* Test of openTransportStoreMethod().\n\t\t* No exception should be thrown.\n\t\t*/\n\t\t@Test\n        public void testOpenTransportStore() {\n                TransportKeyStoreBean instance = new TransportKeyStoreBean();\n\t\t    result = instance.openTransportStore();\n\t\t    assertTrue(\"The method failed to return the requested object\", result);\n\t\t}\n\t\t\n}\n",
        "choice_no": 9
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n    private KeyStore keysp = null; \n    private KeyManagerFactory kmf = null; \n\n    /**\n     * Constructor.\n     */\n    public TransportKeyStoreBean_0Test() { \n    }\n\n    /**\n     *  Funcao testCase. \n     *  Create an instance with \"mykey\".\n     */\n    @Test\n    public void buildFromPropertiesTest(){ \n        TransportKeyStoreBean bean = new TransportKeyStoreBean(); \n        String keyString = bean.buildFromProperties(); \n     \n        assertNotNull(\"No key\", keyString); \n        logger.info(\"key string \" + keyString);\n}\n}",
                "finish_reason": "length"
            }
        ],
        "id": "78e9ea82-3d15-45da-b5a1-b23666c56f51",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_0Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {",
        "time_taken": 9.806233644485474,
        "usage": {
            "prompt_tokens": 1888
        },
        "applied_heuristics": "H3",
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_0Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportStore()} method.\n*/\nclass TransportKeyStoreBean_0Test {\n\t\t\n    private KeyStore keysp = null; \n    private KeyManagerFactory kmf = null; \n\n    /**\n     * Constructor.\n     */\n    public TransportKeyStoreBean_0Test() { \n    }\n\n    /**\n     *  Funcao testCase. \n     *  Create an instance with \"mykey\".\n     */\n    @Test\n    public void buildFromPropertiesTest(){ \n        TransportKeyStoreBean bean = new TransportKeyStoreBean(); \n        String keyString = bean.buildFromProperties(); \n     \n        assertNotNull(\"No key\", keyString); \n        logger.info(\"key string \" + keyString); \n    ",
        "choice_no": 10
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n}",
                "finish_reason": "length"
            }
        ],
        "id": "d4764562-3551-43ed-a4d8-97442f57e052",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 9.727753162384033,
        "usage": {
            "prompt_tokens": 1890
        },
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n\tfinal static String DEFAULT_KEYSTOREUri = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\t\t\n\t\n\tprivate static final String DEFAULT_KEYSTORE =\n\t\t\t\t\"<javax.net.ssl.keyStoreUrl> \" + DEFAULT_KEYSTOREUri + \"</javax.net.ssl.keyStore>\\n\" +\n\t\t\t\t\"<javax.net.ssl.keyStoreType> \" + DEFAULT_KEYSTORE_TYPE + \"</javax.net.ssl.keyStoreType>\\n\" +\n\t\t\t\t\"<javax.net.ssl.keyStorePassword></jav",
        "choice_no": 1
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n    \n    /**\n     * JUnit implementation.\n     */\n    @Test\n    public void test() throws Exception {\n        KeyManagerFactory kmf = openTransportKeyManagerFactory();\n        KeyManagerFactory kmf2 = openTransportKeyManagerFactory();\n        assertNotNull(\"kmf2 is null when kmf is initialized.\", kmf);\n        assertNotNull(\"kmf2 is null when kmf is initialized.\", kmf2);\n        \n        logger.info(\"kmf is {}, kmf2 is {} and keyStore is {}.\", kmf, kmf2, System.getProperty(\"javax.net.ssl.keyStore\"));\n\n\n}\n}",
                "finish_reason": "length"
            }
        ],
        "id": "d4764562-3551-43ed-a4d8-97442f57e052",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 9.727753162384033,
        "usage": {
            "prompt_tokens": 1890
        },
        "applied_heuristics": "H1;H7",
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n    \n    /**\n     * JUnit implementation.\n     */\n    @Test\n    public void test() throws Exception {\n        KeyManagerFactory kmf = openTransportKeyManagerFactory();\n        KeyManagerFactory kmf2 = openTransportKeyManagerFactory();\n        assertNotNull(\"kmf2 is null when kmf is initialized.\", kmf);\n        assertNotNull(\"kmf2 is null when kmf is initialized.\", kmf2);\n        \n        logger.info(\"kmf is {}, kmf2 is {} and keyStore is {}.\", kmf, kmf2, System.getProperty(\"javax.net.ssl.keyStore\"));\n\n\n        assertNotNull(\"kmf",
        "choice_no": 2
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n\t@Test\n    public void openTransportKeyManagerFactory() throws Exception {\n\t\tKeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n\t\tKeyManagerFactory kmf1 = SecurityUtils.openStore(null, openTransportStore(), null);\n\t\tassertNotNull(\"kmf1 should not be null; \", kmf1);\n\t\tkmf1.init(kmf.getKeyManagers(),null);\n\t\t\n\t\tKeyManagerFactory kmf2 = KeyManagerFactory.getInstance(\"SunX509\");\n\t\tKeyManagerFactory kmf3 = SecurityUtils.openStore(null, openTransportStore(), null);\n}\n}",
                "finish_reason": "length"
            }
        ],
        "id": "d4764562-3551-43ed-a4d8-97442f57e052",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 9.727753162384033,
        "usage": {
            "prompt_tokens": 1890
        },
        "applied_heuristics": "H3;H7",
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n\t@Test\n    public void openTransportKeyManagerFactory() throws Exception {\n\t\tKeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n\t\tKeyManagerFactory kmf1 = SecurityUtils.openStore(null, openTransportStore(), null);\n\t\tassertNotNull(\"kmf1 should not be null; \", kmf1);\n\t\tkmf1.init(kmf.getKeyManagers(),null);\n\t\t\n\t\tKeyManagerFactory kmf2 = KeyManagerFactory.getInstance(\"SunX509\");\n\t\tKeyManagerFactory kmf3 = SecurityUtils.openStore(null, openTransportStore(), null);\n\t\tkmf3.init(kmf2.",
        "choice_no": 3
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n/**\n* Create a TestCase for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\n@Test\npublic final class TransportKeyStoreBean_1Test implements InitializingBean {\n\n    /**\n    * Return the instance of the default factory (sun.security.ssl.KeyManagerFactory).\n    */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        return KeyManagerFactory.getInstance(\"SunX509\");\n    }\n}\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "d4764562-3551-43ed-a4d8-97442f57e052",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 9.727753162384033,
        "usage": {
            "prompt_tokens": 1890
        },
        "applied_heuristics": "H3;H7",
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n/**\n* Create a TestCase for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\n@Test\npublic final class TransportKeyStoreBean_1Test implements InitializingBean {\n\n    /**\n    * Return the instance of the default factory (sun.security.ssl.KeyManagerFactory).\n    */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        return KeyManagerFactory.getInstance(\"SunX509\");\n    }\n}",
        "choice_no": 4
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n\t /**\n\t  * Logger.\n\t  */\n\tprivate static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean_1Test.class);\n\t \n\t/**\n\t * Test method for {@link TransportKeyStoreBean#openTransportKeyManagerFactory()}.\n\t * \n\t * @throws Exception\n\t * @throws Exception\n\t */\n\t@Test\n    public void openTransportKeyManagerFactory() throws Exception {\n        logger.info(\"start Test: public void openTransportKeyManagerFactory\");\n        KeyManagerFactory kmf = SecurityUtils.openKeyManagerFactory(null, null, null, null);\n}\n}",
                "finish_reason": "length"
            }
        ],
        "id": "d4764562-3551-43ed-a4d8-97442f57e052",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 9.727753162384033,
        "usage": {
            "prompt_tokens": 1890
        },
        "applied_heuristics": "H3;H7",
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n\t /**\n\t  * Logger.\n\t  */\n\tprivate static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean_1Test.class);\n\t \n\t/**\n\t * Test method for {@link TransportKeyStoreBean#openTransportKeyManagerFactory()}.\n\t * \n\t * @throws Exception\n\t * @throws Exception\n\t */\n\t@Test\n    public void openTransportKeyManagerFactory() throws Exception {\n        logger.info(\"start Test: public void openTransportKeyManagerFactory\");\n        KeyManagerFactory kmf = SecurityUtils.openKeyManagerFactory(null, null, null, null);\n        assert",
        "choice_no": 5
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n}",
                "finish_reason": "length"
            }
        ],
        "id": "d4764562-3551-43ed-a4d8-97442f57e052",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 9.727753162384033,
        "usage": {
            "prompt_tokens": 1890
        },
        "applied_heuristics": "H3;H7",
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n\tprivate static final String KEY_ALGO = \"HmacSHA256\";\n\t\t\n\t/**\n\t * Retrieves the key manager factory for OpenSsl.\n\t *\n\t * @return KeyManagerFactory\n\t *\n\t * @throws Exception\n\t */\n\tprivate KeyManagerFactory getKeyManagerFactory() throws Exception {\n\t\treturn SecurityUtils.openKeyManagerFactory(KEY_ALGO);\n\t}\n\n\t/**\n\t * Retrieves a key manager factory for OpenSsl.\n\t *\n\t * @return KeyManagerFactory\n\t *\n\t * @throws Exception\n\t */\n\tprivate KeyManagerFactory getKeyManagerFactorySsl() throws Exception {\n\t\tString keyAl",
        "choice_no": 6
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n\tprivate static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean_1Test.class);\n\t\n\t/**\n\t * Test of openTransportKeyManagerFactory with no keystore file. \n\t * Test will write a file from {@link TransportKeyStoreBean#DEFAULT_KEYSTORE_TYPE} and keystore URI from a keystore file.\n\t * Test will use a keystore stored as \"file:\n\t * \"file:#{ systemProperties['user.home'] }/jnfe.pfx\n\t*/\n\t@Test\n\tvoid openTransportKeyManagerFactory_nullKeystore() {\n}\n}",
                "finish_reason": "length"
            }
        ],
        "id": "d4764562-3551-43ed-a4d8-97442f57e052",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 9.727753162384033,
        "usage": {
            "prompt_tokens": 1890
        },
        "applied_heuristics": "H1;H7",
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n\tprivate static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean_1Test.class);\n\t\n\t/**\n\t * Test of openTransportKeyManagerFactory with no keystore file. \n\t * Test will write a file from {@link TransportKeyStoreBean#DEFAULT_KEYSTORE_TYPE} and keystore URI from a keystore file.\n\t * Test will use a keystore stored as \"file:\n\t * \"file:#{ systemProperties['user.home'] }/jnfe.pfx\n\t*/\n\t@Test\n\tvoid openTransportKeyManagerFactory_nullKeystore() {\n\t\tKeyManagerFactory kmf = SecurityUt",
        "choice_no": 7
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\tprivate static final String KEYSTORE_PFX = \"jnfe.pfx\";\n\t\tprivate static final String KEYSTORE_TYPE = \"PFS\";\n\n        /**\n         * Loads the default properties file (keystore.properties) and checks if it contains\n         * the expected (keystoreType) properties.\n         *\n         * @throws Exception\n         */\n        @Test\n        public void isTestable() throws Exception {\n                    System.setProperty(\"java.security.properties\", KEYSTORE_PFX + \",\" + DEFAULT_KEYSTORE_TYPE);\n                    //Logger.getRootLogger().removeAllAppenders();\n                    //Logger.getRootLogger().add\n}\n}",
                "finish_reason": "length"
            }
        ],
        "id": "d4764562-3551-43ed-a4d8-97442f57e052",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 9.727753162384033,
        "usage": {
            "prompt_tokens": 1890
        },
        "applied_heuristics": "H3;H7",
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\tprivate static final String KEYSTORE_PFX = \"jnfe.pfx\";\n\t\tprivate static final String KEYSTORE_TYPE = \"PFS\";\n\n        /**\n         * Loads the default properties file (keystore.properties) and checks if it contains\n         * the expected (keystoreType) properties.\n         *\n         * @throws Exception\n         */\n        @Test\n        public void isTestable() throws Exception {\n                    System.setProperty(\"java.security.properties\", KEYSTORE_PFX + \",\" + DEFAULT_KEYSTORE_TYPE);\n                    //Logger.getRootLogger().removeAllAppenders();\n                    //Logger.getRootLogger().add",
        "choice_no": 8
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n\t// @formatter:off \n\t/*\n\t * Constructor protected in order to test the initialization\n\t * @throws Exception\n\t * */\n\tprotected TransportKeyStoreBean_1Test() throws Exception {\n\t\tSystem.setProperty(\"javax.net.server\", \"NFE-Server\");\n\t\tSystem.setProperty(\"javax.net.ssl.keyStore\", \"file:./conf/keyStore\") ;\n\t}\n\t\n\t/**\n\t * Test method for {@link TransportKeyStoreBean#openTransportKeyManagerFactory()}\n\t * {@inheritDoc}\n\t */\n}",
                "finish_reason": "length"
            }
        ],
        "id": "d4764562-3551-43ed-a4d8-97442f57e052",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 9.727753162384033,
        "usage": {
            "prompt_tokens": 1890
        },
        "applied_heuristics": "H3;H7",
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n\t// @formatter:off \n\t/*\n\t * Constructor protected in order to test the initialization\n\t * @throws Exception\n\t * */\n\tprotected TransportKeyStoreBean_1Test() throws Exception {\n\t\tSystem.setProperty(\"javax.net.server\", \"NFE-Server\");\n\t\tSystem.setProperty(\"javax.net.ssl.keyStore\", \"file:./conf/keyStore\") ;\n\t}\n\t\n\t/**\n\t * Test method for {@link TransportKeyStoreBean#openTransportKeyManagerFactory()}\n\t * {@inheritDoc}\n\t */\n\t@Test\n\tpublic void testOpenTransportKeyManagerFactory",
        "choice_no": 9
    },
    {
        "choices": [
            {
                "text": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n\tpublic org.junit.jupiter.api.Test() {\n\t\t// empty constructor\n\t}\n\t\tpublic Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean_1Test.class);\n\t\t\n\t\t@Test\n\t\tpublic void openTransportKeyManagerFactory() throws Exception {\n\t\t\t\n\t\t\tassertNotNull(SecurityUtils.openKeyManagerFactory());\n\t    }\n\n}",
                "finish_reason": "stop"
            }
        ],
        "id": "d4764562-3551-43ed-a4d8-97442f57e052",
        "prompt_id": "/EvoSuiteBenchmark/original/6_jnfe/src/main/java/br/com/jnfe/base/TransportKeyStoreBean_1Test.java",
        "original_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword != null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore != null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType != null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword != null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n",
        "test_prompt": "// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {",
        "time_taken": 9.727753162384033,
        "usage": {
            "prompt_tokens": 1890
        },
        "applied_heuristics": "H3;H7",
        "original_generated_code": "// TransportKeyStoreBean.java\n/* Copyright 2005 I Serv Consultoria Empresarial Ltda.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\n\n/**\n * Atualiza as propriedades do sistema para establecer a \"keyStore\"\n * usada para o transmiss\ufffdo das mensagens dos web services NFe.\n *\n * @author Mauricio Fernandes de Castro\n */\npublic class TransportKeyStoreBean implements InitializingBean {\n\n    private final static String DEFAULT_KEYSTORE_URI = \"file:#{ systemProperties['user.home'] }/jnfe.pfx\";\n\n    private final static String DEFAULT_KEYSTORE_TYPE = \"pkcs12\";\n\n    private String keyStoreUri;\n\n    private String keyStoreType;\n\n    private String keyStorePassword;\n\n    private String trustStoreType;\n\n    private String trustStore;\n\n    private String trustStorePassword;\n\n    /**\n     * A URI para a keystore usada para autenticar o transporte.\n     *\n     * @param keyStoreUri\n     */\n    public void setKeyStoreUri(String keyStoreUri) {\n        this.keyStoreUri = keyStoreUri;\n    }\n\n    /**\n     * O tipo de keystore empregado para o transporte.\n     *\n     * @param keyStoreType\n     */\n    public void setKeyStoreType(String keyStoreType) {\n        this.keyStoreType = keyStoreType;\n    }\n\n    /**\n     * A senha para acesso ao keystore empregado para o transporte.\n     *\n     * @param keyStorePassword\n     */\n    public void setKeyStorePassword(String keyStorePassword) {\n        this.keyStorePassword = keyStorePassword;\n    }\n\n    /**\n     * Localiza\ufffd\ufffdo do aramz\ufffdm seguro.\n     *\n     * @param trustStore\n     */\n    public void setTrustStore(String trustStore) {\n        this.trustStore = trustStore;\n    }\n\n    /**\n     * Tipo do armaz\ufffdm do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStoreType\n     */\n    public void setTrustStoreType(String trustStoreType) {\n        this.trustStoreType = trustStoreType;\n    }\n\n    /**\n     * Senah do armaz\ufffdm seguro (cacerts).\n     *\n     * @param trustStorePassword\n     */\n    public void setTrustStorePassword(String trustStorePassword) {\n        this.trustStorePassword = trustStorePassword;\n    }\n\n    public void afterPropertiesSet() throws Exception {\n        if (keyStoreType == null || keyStoreType.length() == 0) {\n            logger.warn(\"Using default keyStoreType.\");\n            setKeyStoreType(DEFAULT_KEYSTORE_TYPE);\n        }\n        System.setProperty(\"javax.net.ssl.keyStoreType\", keyStoreType);\n        if (keyStoreUri == null || keyStoreUri.length() == 0) {\n            logger.warn(\"Using default keyStoreUri.\");\n            setKeyStoreUri(DEFAULT_KEYSTORE_URI);\n        }\n        System.setProperty(\"javax.net.ssl.keyStore\", keyStoreUri);\n        // TODO proteger senha da keystore de transporte com MD5 ou SHA\n        if (keyStorePassword!= null && keyStorePassword.length() > 0) {\n            System.setProperty(\"javax.net.ssl.keyStorePassword\", keyStorePassword);\n        }\n        if (trustStore!= null) {\n            System.setProperty(\"javax.net.ssl.trustStore\", trustStore);\n        }\n        if (trustStoreType!= null) {\n            System.setProperty(\"javax.net.ssl.trustStoreType\", trustStoreType);\n        }\n        if (trustStorePassword!= null) {\n            System.setProperty(\"javax.net.ssl.trustStorePassword\", trustStorePassword);\n        }\n        logger.info(\"Propriedades de transporte: {}\", toString());\n    }\n\n    /**\n     * toString\n     * @return String\n     */\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(getClass().getName()).append(\"@\").append(Integer.toHexString(hashCode())).append(\" [\");\n        buffer.append(\"javax.net.ssl.keyStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStore\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.keyStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.keyStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStoreType\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStoreType\")).append(\"' \");\n        buffer.append(\"javax.net.ssl.trustStore\").append(\"='\").append(System.getProperty(\"javax.net.ssl.trustStore\")).append(\"' \");\n        buffer.append(\"]\");\n        return buffer.toString();\n    }\n\n    /**\n     * Abre o  armaz\ufffdm seguro (cacerts).\n     *\n     * @throws Exception\n     */\n    public KeyStore openTransportStore() throws Exception {\n        return SecurityUtils.openStore(keyStoreType, keyStoreUri, keyStorePassword.toCharArray());\n    }\n\n    /**\n     * Abre o gerenciador de chaves do armaz\ufffdm de transporte.\n     *\n     * @throws Exception\n     */\n    public KeyManagerFactory openTransportKeyManagerFactory() throws Exception {\n        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n        kmf.init(openTransportStore(), keyStorePassword.toCharArray());\n        return kmf;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean.class);\n}\n\n// TransportKeyStoreBean_1Test.java\npackage br.com.jnfe.base;\n\nimport java.security.KeyStore;\nimport javax.net.ssl.KeyManagerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport br.com.jnfe.base.util.SecurityUtils;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TransportKeyStoreBean}.\n* It contains one unit test case for the {@link TransportKeyStoreBean#openTransportKeyManagerFactory()} method.\n*/\nclass TransportKeyStoreBean_1Test {\n\t\t\n\tpublic org.junit.jupiter.api.Test() {\n\t\t// empty constructor\n\t}\n\t\tpublic Logger logger = LoggerFactory.getLogger(TransportKeyStoreBean_1Test.class);\n\t\t\n\t\t@Test\n\t\tpublic void openTransportKeyManagerFactory() throws Exception {\n\t\t\t\n\t\t\tassertNotNull(SecurityUtils.openKeyManagerFactory());\n\t    }\n\n}\n",
        "choice_no": 10
    }
]