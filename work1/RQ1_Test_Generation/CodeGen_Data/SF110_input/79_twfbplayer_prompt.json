[
  {
    "numberTests": "ten",
    "original_code": "// SimpleCombatant.java\npackage de.outstare.fortbattleplayer.model.impl;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Area;\nimport de.outstare.fortbattleplayer.model.CharacterClass;\nimport de.outstare.fortbattleplayer.model.Combatant;\nimport de.outstare.fortbattleplayer.model.CombatantObserver;\nimport de.outstare.fortbattleplayer.model.CombatantSide;\nimport de.outstare.fortbattleplayer.model.CombatantState;\nimport de.outstare.fortbattleplayer.model.SectorBonus;\nimport de.outstare.fortbattleplayer.model.Weapon;\nimport de.outstare.fortbattleplayer.model.WeaponData;\n\n/**\n * A Combatant with basic attributes (position, health)\n *\n * @author daniel\n */\npublic class SimpleCombatant implements Combatant {\n\n    private static final transient Logger LOG \u003d Logger.getLogger(SimpleCombatant.class.getName());\n\n    private final int maxHealth;\n\n    private final CombatantSide side;\n\n    private final String name;\n\n    private final String city;\n\n    private final Set\u003cCombatantObserver\u003e observers \u003d new HashSet\u003cCombatantObserver\u003e();\n\n    private final Object stateChangeLock \u003d new Object();\n\n    private final CharacterClass charClass;\n\n    private final Weapon weapon;\n\n    private CombatantState state;\n\n    private Combatant aimingAt \u003d null;\n\n    /**\n     * Create a new {@link Combatant} at the given position and the given amount\n     * of health.\n     *\n     * @param side\n     *            not null\n     * @param initialState\n     *            not null\n     * @param maxHealth\n     *            \u003e 0\n     * @param name\n     *            the name of the player of this Combatant\n     * @param characterClass\n     *            maybe null for old logs\n     * @param weapon\n     *            not null\n     * @param city\n     *            not null\n     */\n    public SimpleCombatant(final CombatantSide side, final CombatantState initialState, final int maxHealth, final String name, final CharacterClass characterClass, final Weapon weapon, final String city) {\n        assert side !\u003d null \u0026\u0026 initialState !\u003d null \u0026\u0026 weapon !\u003d null \u0026\u0026 city !\u003d null : \"parameters may not be null!\";\n        assert maxHealth \u003e 0 : \"health must be positive!\";\n        assert maxHealth \u003e\u003d initialState.getHealth() \u0026\u0026 initialState.getHealth() \u003e 0 : \"currentHealth must be inbetween 1 and max, is \" + initialState.getHealth();\n        this.side \u003d side;\n        this.maxHealth \u003d maxHealth;\n        this.name \u003d name;\n        this.city \u003d city;\n        state \u003d initialState;\n        charClass \u003d characterClass;\n        this.weapon \u003d weapon;\n        // move to current location\n        state.getPosition().occupy(this, null);\n    }\n\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        return getSide() + \" \" + name;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getName()\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getWeapon()\n     */\n    public Weapon getWeapon() {\n        return weapon;\n    }\n\n    /**\n     * internal method for graphical display\n     *\n     * @return the maximal health\n     */\n    public int _getMaxLP() {\n        return maxHealth;\n    }\n\n    /**\n     * internal method for graphical display\n     *\n     * @return the current health\n     */\n    public int _getCurrentLP() {\n        return state.getHealth();\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#move(de.outstare.fortbattleplayer.model.Area)\n     */\n    public void move(final Area target) {\n        LOG.fine(name + \" moving to \" + target);\n        synchronized (stateChangeLock) {\n            final Area oldPosition \u003d state.getPosition();\n            moveAway(oldPosition);\n            state \u003d state.changePosition(target);\n            final Combatant swapped \u003d target.occupy(this, oldPosition);\n            fireHasMoved();\n            if (swapped !\u003d null) {\n                fireHasSwapped(swapped);\n            }\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#shoot(de.outstare.fortbattleplayer.model.Area)\n     */\n    public void shoot(final int power) {\n        LOG.fine(name + \" shooting with \" + power);\n        aimingAt.hit(power);\n        final int sectorBonusDamage \u003d state.getPosition().getSectorBonus(this).additionalDamage;\n        if (charClass \u003d\u003d CharacterClass.DUELANT \u0026\u0026 power \u003e weapon.maxDamage() + sectorBonusDamage) {\n            final double tenPercent \u003d aimingAt._maxHealth() * 0.1;\n            if (power \u003e weapon.minDamage() + tenPercent) {\n                fireCriticalShot(power);\n            } else {\n                LOG.fine(\"almost crit by \" + name + \": \" + power);\n            }\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#hit(int)\n     */\n    public boolean hit(final int damageAmount) {\n        LOG.fine(name + \" was hit and lost \" + damageAmount + \" health points\");\n        synchronized (stateChangeLock) {\n            final int oldHealth \u003d state.getHealth();\n            state \u003d state.reduceHealthBy(damageAmount);\n            fireWasHit(damageAmount, oldHealth);\n            if (state.getHealth() \u003c\u003d 0) {\n                moveAway(state.getPosition());\n                fireIsDead();\n            }\n            return state.getHealth() \u003e 0;\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#aimAt(de.outstare.fortbattleplayer.model.Combatant)\n     */\n    public void aimAt(final Combatant target) {\n        LOG.fine(name + \" aims at \" + target);\n        aimingAt \u003d target;\n        fireAimingAt();\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#setDestination(de.outstare.fortbattleplayer.model.Area)\n     */\n    public void setDestination(final Area destination) {\n        LOG.fine(name + \" wants to move to \" + destination);\n        synchronized (stateChangeLock) {\n            state \u003d state.changeTarget(destination);\n            fireNewTarget();\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#addObserver(de.outstare.fortbattleplayer.model.CombatantObserver)\n     */\n    public void addObserver(final CombatantObserver observer) {\n        observers.add(observer);\n        // send current state\n        observer.hasMoved(this, state.getPosition());\n        if (aimingAt !\u003d null) {\n            observer.aimsAt(this, aimingAt);\n        }\n        if (state.getHealth() \u003c\u003d 0) {\n            observer.isDead(this);\n        } else {\n            observer.isAlive(this);\n        }\n        observer.isOnline(this, false);\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#removeObserver(de.outstare.fortbattleplayer.model.CombatantObserver)\n     */\n    public void removeObserver(final CombatantObserver observer) {\n        observers.remove(observer);\n    }\n\n    /**\n     * notify all observers about the current position\n     */\n    protected void fireHasMoved() {\n        for (final CombatantObserver observer : observers) {\n            observer.hasMoved(this, state.getPosition());\n        }\n    }\n\n    /**\n     * notify all observers about the current position\n     *\n     * @param swappedWith\n     */\n    protected void fireHasSwapped(final Combatant swappedWith) {\n        for (final CombatantObserver observer : observers) {\n            observer.hasSwappedPosition(this, swappedWith);\n        }\n    }\n\n    /**\n     * notify all observers about the current position\n     */\n    protected void fireNewTarget() {\n        for (final CombatantObserver observer : observers) {\n            observer.newDestination(this, state.getTarget());\n        }\n    }\n\n    /**\n     * notify all observers that I shot at somebody.\n     */\n    protected void fireAimingAt() {\n        if (aimingAt !\u003d null) {\n            for (final CombatantObserver observer : observers) {\n                observer.aimsAt(this, aimingAt);\n            }\n        }\n    }\n\n    /**\n     * notify all observers about a loss of health\n     *\n     * @param damage\n     *            amount of healthpoints lost\n     * @param healthBefore\n     *            original health amount before it was decreased by\n     *            \u003ccode\u003edamage\u003c/code\u003e\n     */\n    protected void fireWasHit(final int damage, final int healthBefore) {\n        for (final CombatantObserver observer : observers) {\n            observer.isHit(this, damage, healthBefore);\n        }\n    }\n\n    /**\n     * notify all observers about our dead\n     */\n    protected void fireIsDead() {\n        for (final CombatantObserver observer : observers) {\n            observer.isDead(this);\n        }\n    }\n\n    /**\n     * notify all observers about our resurrection\n     */\n    protected void fireIsAlive() {\n        for (final CombatantObserver observer : observers) {\n            observer.isAlive(this);\n        }\n    }\n\n    /**\n     * notify all observers about changed online state\n     *\n     * @param changed\n     *            if the value was changed or only set\n     */\n    protected void fireOnlineChange(final boolean changed) {\n        for (final CombatantObserver observer : observers) {\n            observer.isOnline(this, changed);\n        }\n    }\n\n    /**\n     * notify all observers that i have done a critical shot\n     *\n     * @param damage\n     *            the actual caused damage\n     */\n    protected void fireCriticalShot(final int damage) {\n        for (final CombatantObserver observer : observers) {\n            observer.criticalShot(this, aimingAt, damage);\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_getLocation()\n     */\n    public Area _getLocation() {\n        return state.getPosition();\n    }\n\n    /**\n     * @return the side\n     */\n    public CombatantSide getSide() {\n        return side;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_health()\n     */\n    public int _health() {\n        return state.getHealth();\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_maxHealth()\n     */\n    public int _maxHealth() {\n        return maxHealth;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_setState(de.outstare.fortbattleplayer.model.CombatantState)\n     */\n    public void _setState(final CombatantState newState) {\n        final CombatantState oldState \u003d state;\n        // TODO maybe a PropertyChangeListener for the state\n        synchronized (stateChangeLock) {\n            state \u003d newState;\n            // new pos has not to be null!\n            if (state.getPosition() !\u003d null) {\n                final Area oldPos \u003d oldState.getPosition();\n                // fix for swapping:\n                // 1. go away from battlefield\n                moveAway(oldPos);\n                // 2. come from nowhere to new position (avoids swapping)\n                state.getPosition().occupy(this, null);\n                if (oldPos \u003d\u003d null || !oldPos.equals(state.getPosition())) {\n                    fireHasMoved();\n                }\n            }\n            if (oldState.getHealth() !\u003d state.getHealth()) {\n                fireWasHit(oldState.getHealth() - state.getHealth(), oldState.getHealth());\n            }\n            if (state.getHealth() \u003e 0 \u0026\u0026 oldState.getHealth() \u003c\u003d 0) {\n                fireIsAlive();\n            }\n            if (state.getHealth() \u003c\u003d 0 \u0026\u0026 oldState.getHealth() \u003e 0) {\n                fireIsDead();\n            }\n            if (oldState.isGamerOnline() !\u003d state.isGamerOnline()) {\n                fireOnlineChange(true);\n            }\n            if (!oldState.getTarget().equals(state.getTarget())) {\n                fireNewTarget();\n            }\n        }\n    }\n\n    /**\n     * @param position\n     */\n    private void moveAway(final Area position) {\n        if (position !\u003d null \u0026\u0026 equals(position.getOccupier())) {\n            position.free();\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_state()\n     */\n    public CombatantState _state() {\n        return state;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#isOnline()\n     */\n    public boolean isOnline() {\n        return state.isGamerOnline();\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#setOnline()\n     */\n    public void setOnline(final boolean isOnline) {\n        synchronized (stateChangeLock) {\n            final boolean changed \u003d isOnline() !\u003d isOnline;\n            if (changed) {\n                LOG.fine(name + \" is now \" + (isOnline ? \"online\" : \"offline\"));\n                state \u003d state.setOnline(isOnline);\n            }\n            fireOnlineChange(changed);\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getCharacterClass()\n     */\n    public CharacterClass getCharacterClass() {\n        return charClass;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getSectorBonus()\n     */\n    public SectorBonus getSectorBonus() {\n        return _getLocation().getSectorBonus(this);\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getCity()\n     */\n    public String getCity() {\n        return city;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#usesBayonet()\n     */\n    public boolean usesBayonet() {\n        final WeaponData weaponData \u003d new JSWeaponData();\n        return weaponData.hasBayonet(getWeapon());\n    }\n\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode() {\n        final int prime \u003d 13;\n        int result \u003d 1;\n        result \u003d prime * result + ((name \u003d\u003d null) ? 0 : name.hashCode());\n        result \u003d prime * result + ((charClass \u003d\u003d null) ? 0 : charClass.hashCode());\n        result \u003d prime * result + ((city \u003d\u003d null) ? 0 : city.hashCode());\n        return result;\n    }\n\n    /**\n     * @see java.lang.Object#equals(java.lang.Object)\n     */\n    @Override\n    public boolean equals(final Object obj) {\n        if (this \u003d\u003d obj) {\n            return true;\n        }\n        if (obj \u003d\u003d null) {\n            return false;\n        }\n        if (!(obj instanceof SimpleCombatant)) {\n            return false;\n        }\n        final SimpleCombatant other \u003d (SimpleCombatant) obj;\n        if (name \u003d\u003d null) {\n            if (other.name !\u003d null) {\n                return false;\n            }\n        } else if (!name.equals(other.name)) {\n            return false;\n        }\n        if (charClass !\u003d other.charClass) {\n            return false;\n        }\n        if (city \u003d\u003d null) {\n            if (other.city !\u003d null) {\n                return false;\n            }\n        } else if (!city.equals(other.city)) {\n            return false;\n        }\n        return true;\n    }\n}\n",
    "package": "de.outstare.fortbattleplayer.model.impl",
    "classname": "SimpleCombatant",
    "id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/model/impl/SimpleCombatant_0Test.java",
    "test_prompt": "// SimpleCombatant_0Test.java\npackage de.outstare.fortbattleplayer.model.impl;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Area;\nimport de.outstare.fortbattleplayer.model.CharacterClass;\nimport de.outstare.fortbattleplayer.model.Combatant;\nimport de.outstare.fortbattleplayer.model.CombatantObserver;\nimport de.outstare.fortbattleplayer.model.CombatantSide;\nimport de.outstare.fortbattleplayer.model.CombatantState;\nimport de.outstare.fortbattleplayer.model.SectorBonus;\nimport de.outstare.fortbattleplayer.model.Weapon;\nimport de.outstare.fortbattleplayer.model.WeaponData;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleCombatant}.\n* It contains ten unit test cases for the {@link SimpleCombatant#_getMaxLP()} method.\n*/\nclass SimpleCombatant_0Test {",
    "method_signature": "_getMaxLP()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// SimpleCombatant.java\npackage de.outstare.fortbattleplayer.model.impl;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Area;\nimport de.outstare.fortbattleplayer.model.CharacterClass;\nimport de.outstare.fortbattleplayer.model.Combatant;\nimport de.outstare.fortbattleplayer.model.CombatantObserver;\nimport de.outstare.fortbattleplayer.model.CombatantSide;\nimport de.outstare.fortbattleplayer.model.CombatantState;\nimport de.outstare.fortbattleplayer.model.SectorBonus;\nimport de.outstare.fortbattleplayer.model.Weapon;\nimport de.outstare.fortbattleplayer.model.WeaponData;\n\n/**\n * A Combatant with basic attributes (position, health)\n *\n * @author daniel\n */\npublic class SimpleCombatant implements Combatant {\n\n    private static final transient Logger LOG \u003d Logger.getLogger(SimpleCombatant.class.getName());\n\n    private final int maxHealth;\n\n    private final CombatantSide side;\n\n    private final String name;\n\n    private final String city;\n\n    private final Set\u003cCombatantObserver\u003e observers \u003d new HashSet\u003cCombatantObserver\u003e();\n\n    private final Object stateChangeLock \u003d new Object();\n\n    private final CharacterClass charClass;\n\n    private final Weapon weapon;\n\n    private CombatantState state;\n\n    private Combatant aimingAt \u003d null;\n\n    /**\n     * Create a new {@link Combatant} at the given position and the given amount\n     * of health.\n     *\n     * @param side\n     *            not null\n     * @param initialState\n     *            not null\n     * @param maxHealth\n     *            \u003e 0\n     * @param name\n     *            the name of the player of this Combatant\n     * @param characterClass\n     *            maybe null for old logs\n     * @param weapon\n     *            not null\n     * @param city\n     *            not null\n     */\n    public SimpleCombatant(final CombatantSide side, final CombatantState initialState, final int maxHealth, final String name, final CharacterClass characterClass, final Weapon weapon, final String city) {\n        assert side !\u003d null \u0026\u0026 initialState !\u003d null \u0026\u0026 weapon !\u003d null \u0026\u0026 city !\u003d null : \"parameters may not be null!\";\n        assert maxHealth \u003e 0 : \"health must be positive!\";\n        assert maxHealth \u003e\u003d initialState.getHealth() \u0026\u0026 initialState.getHealth() \u003e 0 : \"currentHealth must be inbetween 1 and max, is \" + initialState.getHealth();\n        this.side \u003d side;\n        this.maxHealth \u003d maxHealth;\n        this.name \u003d name;\n        this.city \u003d city;\n        state \u003d initialState;\n        charClass \u003d characterClass;\n        this.weapon \u003d weapon;\n        // move to current location\n        state.getPosition().occupy(this, null);\n    }\n\n    /**\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        return getSide() + \" \" + name;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getName()\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getWeapon()\n     */\n    public Weapon getWeapon() {\n        return weapon;\n    }\n\n    /**\n     * internal method for graphical display\n     *\n     * @return the maximal health\n     */\n    public int _getMaxLP() {\n        return maxHealth;\n    }\n\n    /**\n     * internal method for graphical display\n     *\n     * @return the current health\n     */\n    public int _getCurrentLP() {\n        return state.getHealth();\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#move(de.outstare.fortbattleplayer.model.Area)\n     */\n    public void move(final Area target) {\n        LOG.fine(name + \" moving to \" + target);\n        synchronized (stateChangeLock) {\n            final Area oldPosition \u003d state.getPosition();\n            moveAway(oldPosition);\n            state \u003d state.changePosition(target);\n            final Combatant swapped \u003d target.occupy(this, oldPosition);\n            fireHasMoved();\n            if (swapped !\u003d null) {\n                fireHasSwapped(swapped);\n            }\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#shoot(de.outstare.fortbattleplayer.model.Area)\n     */\n    public void shoot(final int power) {\n        LOG.fine(name + \" shooting with \" + power);\n        aimingAt.hit(power);\n        final int sectorBonusDamage \u003d state.getPosition().getSectorBonus(this).additionalDamage;\n        if (charClass \u003d\u003d CharacterClass.DUELANT \u0026\u0026 power \u003e weapon.maxDamage() + sectorBonusDamage) {\n            final double tenPercent \u003d aimingAt._maxHealth() * 0.1;\n            if (power \u003e weapon.minDamage() + tenPercent) {\n                fireCriticalShot(power);\n            } else {\n                LOG.fine(\"almost crit by \" + name + \": \" + power);\n            }\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#hit(int)\n     */\n    public boolean hit(final int damageAmount) {\n        LOG.fine(name + \" was hit and lost \" + damageAmount + \" health points\");\n        synchronized (stateChangeLock) {\n            final int oldHealth \u003d state.getHealth();\n            state \u003d state.reduceHealthBy(damageAmount);\n            fireWasHit(damageAmount, oldHealth);\n            if (state.getHealth() \u003c\u003d 0) {\n                moveAway(state.getPosition());\n                fireIsDead();\n            }\n            return state.getHealth() \u003e 0;\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#aimAt(de.outstare.fortbattleplayer.model.Combatant)\n     */\n    public void aimAt(final Combatant target) {\n        LOG.fine(name + \" aims at \" + target);\n        aimingAt \u003d target;\n        fireAimingAt();\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#setDestination(de.outstare.fortbattleplayer.model.Area)\n     */\n    public void setDestination(final Area destination) {\n        LOG.fine(name + \" wants to move to \" + destination);\n        synchronized (stateChangeLock) {\n            state \u003d state.changeTarget(destination);\n            fireNewTarget();\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#addObserver(de.outstare.fortbattleplayer.model.CombatantObserver)\n     */\n    public void addObserver(final CombatantObserver observer) {\n        observers.add(observer);\n        // send current state\n        observer.hasMoved(this, state.getPosition());\n        if (aimingAt !\u003d null) {\n            observer.aimsAt(this, aimingAt);\n        }\n        if (state.getHealth() \u003c\u003d 0) {\n            observer.isDead(this);\n        } else {\n            observer.isAlive(this);\n        }\n        observer.isOnline(this, false);\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#removeObserver(de.outstare.fortbattleplayer.model.CombatantObserver)\n     */\n    public void removeObserver(final CombatantObserver observer) {\n        observers.remove(observer);\n    }\n\n    /**\n     * notify all observers about the current position\n     */\n    protected void fireHasMoved() {\n        for (final CombatantObserver observer : observers) {\n            observer.hasMoved(this, state.getPosition());\n        }\n    }\n\n    /**\n     * notify all observers about the current position\n     *\n     * @param swappedWith\n     */\n    protected void fireHasSwapped(final Combatant swappedWith) {\n        for (final CombatantObserver observer : observers) {\n            observer.hasSwappedPosition(this, swappedWith);\n        }\n    }\n\n    /**\n     * notify all observers about the current position\n     */\n    protected void fireNewTarget() {\n        for (final CombatantObserver observer : observers) {\n            observer.newDestination(this, state.getTarget());\n        }\n    }\n\n    /**\n     * notify all observers that I shot at somebody.\n     */\n    protected void fireAimingAt() {\n        if (aimingAt !\u003d null) {\n            for (final CombatantObserver observer : observers) {\n                observer.aimsAt(this, aimingAt);\n            }\n        }\n    }\n\n    /**\n     * notify all observers about a loss of health\n     *\n     * @param damage\n     *            amount of healthpoints lost\n     * @param healthBefore\n     *            original health amount before it was decreased by\n     *            \u003ccode\u003edamage\u003c/code\u003e\n     */\n    protected void fireWasHit(final int damage, final int healthBefore) {\n        for (final CombatantObserver observer : observers) {\n            observer.isHit(this, damage, healthBefore);\n        }\n    }\n\n    /**\n     * notify all observers about our dead\n     */\n    protected void fireIsDead() {\n        for (final CombatantObserver observer : observers) {\n            observer.isDead(this);\n        }\n    }\n\n    /**\n     * notify all observers about our resurrection\n     */\n    protected void fireIsAlive() {\n        for (final CombatantObserver observer : observers) {\n            observer.isAlive(this);\n        }\n    }\n\n    /**\n     * notify all observers about changed online state\n     *\n     * @param changed\n     *            if the value was changed or only set\n     */\n    protected void fireOnlineChange(final boolean changed) {\n        for (final CombatantObserver observer : observers) {\n            observer.isOnline(this, changed);\n        }\n    }\n\n    /**\n     * notify all observers that i have done a critical shot\n     *\n     * @param damage\n     *            the actual caused damage\n     */\n    protected void fireCriticalShot(final int damage) {\n        for (final CombatantObserver observer : observers) {\n            observer.criticalShot(this, aimingAt, damage);\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_getLocation()\n     */\n    public Area _getLocation() {\n        return state.getPosition();\n    }\n\n    /**\n     * @return the side\n     */\n    public CombatantSide getSide() {\n        return side;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_health()\n     */\n    public int _health() {\n        return state.getHealth();\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_maxHealth()\n     */\n    public int _maxHealth() {\n        return maxHealth;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_setState(de.outstare.fortbattleplayer.model.CombatantState)\n     */\n    public void _setState(final CombatantState newState) {\n        final CombatantState oldState \u003d state;\n        // TODO maybe a PropertyChangeListener for the state\n        synchronized (stateChangeLock) {\n            state \u003d newState;\n            // new pos has not to be null!\n            if (state.getPosition() !\u003d null) {\n                final Area oldPos \u003d oldState.getPosition();\n                // fix for swapping:\n                // 1. go away from battlefield\n                moveAway(oldPos);\n                // 2. come from nowhere to new position (avoids swapping)\n                state.getPosition().occupy(this, null);\n                if (oldPos \u003d\u003d null || !oldPos.equals(state.getPosition())) {\n                    fireHasMoved();\n                }\n            }\n            if (oldState.getHealth() !\u003d state.getHealth()) {\n                fireWasHit(oldState.getHealth() - state.getHealth(), oldState.getHealth());\n            }\n            if (state.getHealth() \u003e 0 \u0026\u0026 oldState.getHealth() \u003c\u003d 0) {\n                fireIsAlive();\n            }\n            if (state.getHealth() \u003c\u003d 0 \u0026\u0026 oldState.getHealth() \u003e 0) {\n                fireIsDead();\n            }\n            if (oldState.isGamerOnline() !\u003d state.isGamerOnline()) {\n                fireOnlineChange(true);\n            }\n            if (!oldState.getTarget().equals(state.getTarget())) {\n                fireNewTarget();\n            }\n        }\n    }\n\n    /**\n     * @param position\n     */\n    private void moveAway(final Area position) {\n        if (position !\u003d null \u0026\u0026 equals(position.getOccupier())) {\n            position.free();\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#_state()\n     */\n    public CombatantState _state() {\n        return state;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#isOnline()\n     */\n    public boolean isOnline() {\n        return state.isGamerOnline();\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#setOnline()\n     */\n    public void setOnline(final boolean isOnline) {\n        synchronized (stateChangeLock) {\n            final boolean changed \u003d isOnline() !\u003d isOnline;\n            if (changed) {\n                LOG.fine(name + \" is now \" + (isOnline ? \"online\" : \"offline\"));\n                state \u003d state.setOnline(isOnline);\n            }\n            fireOnlineChange(changed);\n        }\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getCharacterClass()\n     */\n    public CharacterClass getCharacterClass() {\n        return charClass;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getSectorBonus()\n     */\n    public SectorBonus getSectorBonus() {\n        return _getLocation().getSectorBonus(this);\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#getCity()\n     */\n    public String getCity() {\n        return city;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.model.Combatant#usesBayonet()\n     */\n    public boolean usesBayonet() {\n        final WeaponData weaponData \u003d new JSWeaponData();\n        return weaponData.hasBayonet(getWeapon());\n    }\n\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode() {\n        final int prime \u003d 13;\n        int result \u003d 1;\n        result \u003d prime * result + ((name \u003d\u003d null) ? 0 : name.hashCode());\n        result \u003d prime * result + ((charClass \u003d\u003d null) ? 0 : charClass.hashCode());\n        result \u003d prime * result + ((city \u003d\u003d null) ? 0 : city.hashCode());\n        return result;\n    }\n\n    /**\n     * @see java.lang.Object#equals(java.lang.Object)\n     */\n    @Override\n    public boolean equals(final Object obj) {\n        if (this \u003d\u003d obj) {\n            return true;\n        }\n        if (obj \u003d\u003d null) {\n            return false;\n        }\n        if (!(obj instanceof SimpleCombatant)) {\n            return false;\n        }\n        final SimpleCombatant other \u003d (SimpleCombatant) obj;\n        if (name \u003d\u003d null) {\n            if (other.name !\u003d null) {\n                return false;\n            }\n        } else if (!name.equals(other.name)) {\n            return false;\n        }\n        if (charClass !\u003d other.charClass) {\n            return false;\n        }\n        if (city \u003d\u003d null) {\n            if (other.city !\u003d null) {\n                return false;\n            }\n        } else if (!city.equals(other.city)) {\n            return false;\n        }\n        return true;\n    }\n}\n",
    "package": "de.outstare.fortbattleplayer.model.impl",
    "classname": "SimpleCombatant",
    "id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/model/impl/SimpleCombatant_1Test.java",
    "test_prompt": "// SimpleCombatant_1Test.java\npackage de.outstare.fortbattleplayer.model.impl;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Area;\nimport de.outstare.fortbattleplayer.model.CharacterClass;\nimport de.outstare.fortbattleplayer.model.Combatant;\nimport de.outstare.fortbattleplayer.model.CombatantObserver;\nimport de.outstare.fortbattleplayer.model.CombatantSide;\nimport de.outstare.fortbattleplayer.model.CombatantState;\nimport de.outstare.fortbattleplayer.model.SectorBonus;\nimport de.outstare.fortbattleplayer.model.Weapon;\nimport de.outstare.fortbattleplayer.model.WeaponData;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link SimpleCombatant}.\n* It contains ten unit test cases for the {@link SimpleCombatant#_getCurrentLP()} method.\n*/\nclass SimpleCombatant_1Test {",
    "method_signature": "_getCurrentLP()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlayerConfiguration.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\n\n/**\n * An instance of this will be used by the player to hold its tunable\n * parameters.\n *\n * @author daniel\n */\npublic class PlayerConfiguration implements Cloneable {\n\n    /**\n     * a configuration which skips animation (used for purposes where the user\n     * should not see whats going on)\n     */\n    public static final PlayerConfiguration NO_DELAY \u003d new PlayerConfiguration();\n\n    static {\n        NO_DELAY.ACTION_DELAY \u003d 0;\n        NO_DELAY.PLAYER_DELAY \u003d 0;\n        NO_DELAY.ROUND_DELAY \u003d 0;\n        NO_DELAY.setShowMoveTargets(false);\n        NO_DELAY.setShowShootline(false);\n    }\n\n    /**\n     * this is used to control who currently does something with the player\n     */\n    private final Lock playLock \u003d new ReentrantLock();\n\n    private final Set\u003cPlayerConfigurationListener\u003e listeners \u003d new HashSet\u003cPlayerConfigurationListener\u003e();\n\n    /**\n     * current state of the player\n     */\n    private PlayerState state \u003d PlayerState.STOP;\n\n    /**\n     * pause between two rounds in milliseconds\n     */\n    public volatile int ROUND_DELAY \u003d Configuration.ROUND_DELAY;\n\n    /**\n     * pause between two players in a round in milliseconds\n     */\n    public volatile int PLAYER_DELAY \u003d Configuration.PLAYER_DELAY;\n\n    /**\n     * pause between two actions in milliseconds\n     */\n    public volatile int ACTION_DELAY \u003d Configuration.ACTION_DELAY;\n\n    /**\n     * draw a line to the point, where the player wants to go\n     */\n    private volatile boolean SHOW_MOVETARGETS \u003d Configuration.SHOW_MOVETARGETS;\n\n    /**\n     * draw a line to the enemy ath wich the player shoots\n     */\n    private volatile boolean SHOW_SHOOTLINE \u003d Configuration.SHOW_SHOOTLINE;\n\n    /**\n     * @param other\n     */\n    public void setTo(final PlayerConfiguration other) {\n        ROUND_DELAY \u003d other.ROUND_DELAY;\n        PLAYER_DELAY \u003d other.PLAYER_DELAY;\n        ACTION_DELAY \u003d other.ACTION_DELAY;\n    }\n\n    /**\n     * @return a copy of this object\n     * @throws CloneNotSupportedException\n     */\n    public PlayerConfiguration copy() throws CloneNotSupportedException {\n        return (PlayerConfiguration) clone();\n    }\n\n    /**\n     * should only be called by {@link Battleplayer}!\n     *\n     * @param newState\n     */\n    synchronized void setState(final PlayerState newState) {\n        state \u003d newState;\n    }\n\n    /**\n     * @return true if the player should be playing\n     */\n    public synchronized boolean isPlaying() {\n        return state \u003d\u003d PlayerState.PLAY;\n    }\n\n    /**\n     * @return true if the player is hold\n     */\n    public synchronized boolean isPaused() {\n        return state \u003d\u003d PlayerState.PAUSE;\n    }\n\n    /**\n     * @return true if the player is stopped\n     */\n    public synchronized boolean isStopped() {\n        return state \u003d\u003d PlayerState.STOP;\n    }\n\n    /**\n     * exclusive use of the player\n     */\n    void lock() {\n        playLock.lock();\n    }\n\n    /**\n     * release the player\n     */\n    void unlock() {\n        playLock.unlock();\n    }\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e if lines to movement targets should be\n     *         displayed\n     */\n    public boolean showMoveTargets() {\n        return SHOW_MOVETARGETS;\n    }\n\n    /**\n     * @param showMovetargets\n     */\n    public void setShowMoveTargets(final boolean showMovetargets) {\n        SHOW_MOVETARGETS \u003d showMovetargets;\n        for (final PlayerConfigurationListener listener : listeners) {\n            listener.changedShowMoveTarget(SHOW_MOVETARGETS);\n        }\n    }\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e if shooting lines should be displayed\n     */\n    public boolean showShootline() {\n        return SHOW_SHOOTLINE;\n    }\n\n    /**\n     * @param showShootline\n     */\n    public void setShowShootline(final boolean showShootline) {\n        SHOW_SHOOTLINE \u003d showShootline;\n        for (final PlayerConfigurationListener listener : listeners) {\n            listener.changedShowShootingLine(SHOW_SHOOTLINE);\n        }\n    }\n\n    /**\n     * Adds a listener which will be notified about changes.\n     *\n     * @param listener\n     */\n    public void addListener(final PlayerConfigurationListener listener) {\n        listeners.add(listener);\n    }\n\n    /**\n     * Removes the listener from the registered ones.\n     *\n     * @param listener\n     */\n    public void removeListener(final PlayerConfigurationListener listener) {\n        listeners.remove(listener);\n    }\n}\n",
    "package": "de.outstare.fortbattleplayer.player",
    "classname": "PlayerConfiguration",
    "id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration_0Test.java",
    "test_prompt": "// PlayerConfiguration_0Test.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlayerConfiguration}.\n* It contains ten unit test cases for the {@link PlayerConfiguration#copy()} method.\n*/\nclass PlayerConfiguration_0Test {",
    "method_signature": "copy()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlayerConfiguration.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\n\n/**\n * An instance of this will be used by the player to hold its tunable\n * parameters.\n *\n * @author daniel\n */\npublic class PlayerConfiguration implements Cloneable {\n\n    /**\n     * a configuration which skips animation (used for purposes where the user\n     * should not see whats going on)\n     */\n    public static final PlayerConfiguration NO_DELAY \u003d new PlayerConfiguration();\n\n    static {\n        NO_DELAY.ACTION_DELAY \u003d 0;\n        NO_DELAY.PLAYER_DELAY \u003d 0;\n        NO_DELAY.ROUND_DELAY \u003d 0;\n        NO_DELAY.setShowMoveTargets(false);\n        NO_DELAY.setShowShootline(false);\n    }\n\n    /**\n     * this is used to control who currently does something with the player\n     */\n    private final Lock playLock \u003d new ReentrantLock();\n\n    private final Set\u003cPlayerConfigurationListener\u003e listeners \u003d new HashSet\u003cPlayerConfigurationListener\u003e();\n\n    /**\n     * current state of the player\n     */\n    private PlayerState state \u003d PlayerState.STOP;\n\n    /**\n     * pause between two rounds in milliseconds\n     */\n    public volatile int ROUND_DELAY \u003d Configuration.ROUND_DELAY;\n\n    /**\n     * pause between two players in a round in milliseconds\n     */\n    public volatile int PLAYER_DELAY \u003d Configuration.PLAYER_DELAY;\n\n    /**\n     * pause between two actions in milliseconds\n     */\n    public volatile int ACTION_DELAY \u003d Configuration.ACTION_DELAY;\n\n    /**\n     * draw a line to the point, where the player wants to go\n     */\n    private volatile boolean SHOW_MOVETARGETS \u003d Configuration.SHOW_MOVETARGETS;\n\n    /**\n     * draw a line to the enemy ath wich the player shoots\n     */\n    private volatile boolean SHOW_SHOOTLINE \u003d Configuration.SHOW_SHOOTLINE;\n\n    /**\n     * @param other\n     */\n    public void setTo(final PlayerConfiguration other) {\n        ROUND_DELAY \u003d other.ROUND_DELAY;\n        PLAYER_DELAY \u003d other.PLAYER_DELAY;\n        ACTION_DELAY \u003d other.ACTION_DELAY;\n    }\n\n    /**\n     * @return a copy of this object\n     * @throws CloneNotSupportedException\n     */\n    public PlayerConfiguration copy() throws CloneNotSupportedException {\n        return (PlayerConfiguration) clone();\n    }\n\n    /**\n     * should only be called by {@link Battleplayer}!\n     *\n     * @param newState\n     */\n    synchronized void setState(final PlayerState newState) {\n        state \u003d newState;\n    }\n\n    /**\n     * @return true if the player should be playing\n     */\n    public synchronized boolean isPlaying() {\n        return state \u003d\u003d PlayerState.PLAY;\n    }\n\n    /**\n     * @return true if the player is hold\n     */\n    public synchronized boolean isPaused() {\n        return state \u003d\u003d PlayerState.PAUSE;\n    }\n\n    /**\n     * @return true if the player is stopped\n     */\n    public synchronized boolean isStopped() {\n        return state \u003d\u003d PlayerState.STOP;\n    }\n\n    /**\n     * exclusive use of the player\n     */\n    void lock() {\n        playLock.lock();\n    }\n\n    /**\n     * release the player\n     */\n    void unlock() {\n        playLock.unlock();\n    }\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e if lines to movement targets should be\n     *         displayed\n     */\n    public boolean showMoveTargets() {\n        return SHOW_MOVETARGETS;\n    }\n\n    /**\n     * @param showMovetargets\n     */\n    public void setShowMoveTargets(final boolean showMovetargets) {\n        SHOW_MOVETARGETS \u003d showMovetargets;\n        for (final PlayerConfigurationListener listener : listeners) {\n            listener.changedShowMoveTarget(SHOW_MOVETARGETS);\n        }\n    }\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e if shooting lines should be displayed\n     */\n    public boolean showShootline() {\n        return SHOW_SHOOTLINE;\n    }\n\n    /**\n     * @param showShootline\n     */\n    public void setShowShootline(final boolean showShootline) {\n        SHOW_SHOOTLINE \u003d showShootline;\n        for (final PlayerConfigurationListener listener : listeners) {\n            listener.changedShowShootingLine(SHOW_SHOOTLINE);\n        }\n    }\n\n    /**\n     * Adds a listener which will be notified about changes.\n     *\n     * @param listener\n     */\n    public void addListener(final PlayerConfigurationListener listener) {\n        listeners.add(listener);\n    }\n\n    /**\n     * Removes the listener from the registered ones.\n     *\n     * @param listener\n     */\n    public void removeListener(final PlayerConfigurationListener listener) {\n        listeners.remove(listener);\n    }\n}\n",
    "package": "de.outstare.fortbattleplayer.player",
    "classname": "PlayerConfiguration",
    "id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration_1Test.java",
    "test_prompt": "// PlayerConfiguration_1Test.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlayerConfiguration}.\n* It contains ten unit test cases for the {@link PlayerConfiguration#showMoveTargets()} method.\n*/\nclass PlayerConfiguration_1Test {",
    "method_signature": "showMoveTargets()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// PlayerConfiguration.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\n\n/**\n * An instance of this will be used by the player to hold its tunable\n * parameters.\n *\n * @author daniel\n */\npublic class PlayerConfiguration implements Cloneable {\n\n    /**\n     * a configuration which skips animation (used for purposes where the user\n     * should not see whats going on)\n     */\n    public static final PlayerConfiguration NO_DELAY \u003d new PlayerConfiguration();\n\n    static {\n        NO_DELAY.ACTION_DELAY \u003d 0;\n        NO_DELAY.PLAYER_DELAY \u003d 0;\n        NO_DELAY.ROUND_DELAY \u003d 0;\n        NO_DELAY.setShowMoveTargets(false);\n        NO_DELAY.setShowShootline(false);\n    }\n\n    /**\n     * this is used to control who currently does something with the player\n     */\n    private final Lock playLock \u003d new ReentrantLock();\n\n    private final Set\u003cPlayerConfigurationListener\u003e listeners \u003d new HashSet\u003cPlayerConfigurationListener\u003e();\n\n    /**\n     * current state of the player\n     */\n    private PlayerState state \u003d PlayerState.STOP;\n\n    /**\n     * pause between two rounds in milliseconds\n     */\n    public volatile int ROUND_DELAY \u003d Configuration.ROUND_DELAY;\n\n    /**\n     * pause between two players in a round in milliseconds\n     */\n    public volatile int PLAYER_DELAY \u003d Configuration.PLAYER_DELAY;\n\n    /**\n     * pause between two actions in milliseconds\n     */\n    public volatile int ACTION_DELAY \u003d Configuration.ACTION_DELAY;\n\n    /**\n     * draw a line to the point, where the player wants to go\n     */\n    private volatile boolean SHOW_MOVETARGETS \u003d Configuration.SHOW_MOVETARGETS;\n\n    /**\n     * draw a line to the enemy ath wich the player shoots\n     */\n    private volatile boolean SHOW_SHOOTLINE \u003d Configuration.SHOW_SHOOTLINE;\n\n    /**\n     * @param other\n     */\n    public void setTo(final PlayerConfiguration other) {\n        ROUND_DELAY \u003d other.ROUND_DELAY;\n        PLAYER_DELAY \u003d other.PLAYER_DELAY;\n        ACTION_DELAY \u003d other.ACTION_DELAY;\n    }\n\n    /**\n     * @return a copy of this object\n     * @throws CloneNotSupportedException\n     */\n    public PlayerConfiguration copy() throws CloneNotSupportedException {\n        return (PlayerConfiguration) clone();\n    }\n\n    /**\n     * should only be called by {@link Battleplayer}!\n     *\n     * @param newState\n     */\n    synchronized void setState(final PlayerState newState) {\n        state \u003d newState;\n    }\n\n    /**\n     * @return true if the player should be playing\n     */\n    public synchronized boolean isPlaying() {\n        return state \u003d\u003d PlayerState.PLAY;\n    }\n\n    /**\n     * @return true if the player is hold\n     */\n    public synchronized boolean isPaused() {\n        return state \u003d\u003d PlayerState.PAUSE;\n    }\n\n    /**\n     * @return true if the player is stopped\n     */\n    public synchronized boolean isStopped() {\n        return state \u003d\u003d PlayerState.STOP;\n    }\n\n    /**\n     * exclusive use of the player\n     */\n    void lock() {\n        playLock.lock();\n    }\n\n    /**\n     * release the player\n     */\n    void unlock() {\n        playLock.unlock();\n    }\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e if lines to movement targets should be\n     *         displayed\n     */\n    public boolean showMoveTargets() {\n        return SHOW_MOVETARGETS;\n    }\n\n    /**\n     * @param showMovetargets\n     */\n    public void setShowMoveTargets(final boolean showMovetargets) {\n        SHOW_MOVETARGETS \u003d showMovetargets;\n        for (final PlayerConfigurationListener listener : listeners) {\n            listener.changedShowMoveTarget(SHOW_MOVETARGETS);\n        }\n    }\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e if shooting lines should be displayed\n     */\n    public boolean showShootline() {\n        return SHOW_SHOOTLINE;\n    }\n\n    /**\n     * @param showShootline\n     */\n    public void setShowShootline(final boolean showShootline) {\n        SHOW_SHOOTLINE \u003d showShootline;\n        for (final PlayerConfigurationListener listener : listeners) {\n            listener.changedShowShootingLine(SHOW_SHOOTLINE);\n        }\n    }\n\n    /**\n     * Adds a listener which will be notified about changes.\n     *\n     * @param listener\n     */\n    public void addListener(final PlayerConfigurationListener listener) {\n        listeners.add(listener);\n    }\n\n    /**\n     * Removes the listener from the registered ones.\n     *\n     * @param listener\n     */\n    public void removeListener(final PlayerConfigurationListener listener) {\n        listeners.remove(listener);\n    }\n}\n",
    "package": "de.outstare.fortbattleplayer.player",
    "classname": "PlayerConfiguration",
    "id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/PlayerConfiguration_2Test.java",
    "test_prompt": "// PlayerConfiguration_2Test.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport de.outstare.fortbattleplayer.Configuration;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link PlayerConfiguration}.\n* It contains ten unit test cases for the {@link PlayerConfiguration#showShootline()} method.\n*/\nclass PlayerConfiguration_2Test {",
    "method_signature": "showShootline()",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// Battleplan.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.Collection;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.logging.Logger;\n\n/**\n * A plan which determines each step of the battle. A battle is divided into\n * {@link Round}s.\n *\n * @author daniel\n */\npublic class Battleplan {\n\n    private static final transient Logger LOG \u003d Logger.getLogger(Battleplan.class.getName());\n\n    private final SortedMap\u003cInteger, Round\u003e rounds \u003d new TreeMap\u003cInteger, Round\u003e();\n\n    /**\n     * Create a new plan with the given rounds\n     *\n     * @param roundsOfPlan\n     */\n    public Battleplan(final Collection\u003cRound\u003e roundsOfPlan) {\n        mapRoundsToNumbers(roundsOfPlan);\n    }\n\n    /**\n     * @param roundsOfPlan\n     */\n    private void mapRoundsToNumbers(final Collection\u003cRound\u003e roundsOfPlan) {\n        for (final Round round : roundsOfPlan) {\n            final int no \u003d round.getNo();\n            final Integer roundNo \u003d Integer.valueOf(no);\n            if (rounds.containsKey(roundNo)) {\n                LOG.warning(\"multiple rounds with number \" + roundNo + \"! overwriting\");\n            }\n            rounds.put(roundNo, round);\n        }\n    }\n\n    /**\n     * @return the number of rounds this plan has\n     */\n    public int numberOfRounds() {\n        return rounds.size();\n    }\n\n    /**\n     * executes the given {@link Round} of this plan\n     *\n     * @param roundNo\n     *            0 \u003c\u003d roundNo \u003c\u003d numberOfRounds()\n     * @param config\n     */\n    public void executeRound(final int roundNo, final PlayerConfiguration config) {\n        getRound(roundNo).execute(config);\n    }\n\n    /**\n     * @param roundNo\n     * @return\n     * @throws IllegalArgumentException\n     */\n    private Round getRound(final int roundNo) throws IllegalArgumentException {\n        final Integer roundKey \u003d Integer.valueOf(roundNo);\n        if (!rounds.containsKey(roundKey)) {\n            throw new IllegalArgumentException(\"the given round number does not exist: \" + roundNo);\n        }\n        final Round round \u003d rounds.get(roundKey);\n        return round;\n    }\n\n    /**\n     * @param no\n     * @return \u003ccode\u003etrue\u003c/code\u003e if this plan contains a round with the given\n     *         number\n     */\n    public boolean hasRoundNo(final int no) {\n        final Integer roundKey \u003d Integer.valueOf(no);\n        return rounds.containsKey(roundKey);\n    }\n\n    /**\n     * @param roundNo\n     */\n    public void resetToRound(final int roundNo) {\n        if (hasRoundNo(roundNo)) {\n            getRound(roundNo).setInitialState();\n        }\n    }\n\n    /**\n     * @param roundNo\n     * @return \u003ccode\u003etrue\u003c/code\u003e if more rounds follow after the given round\n     *         number.\n     */\n    public boolean hasMoreRounds(final int roundNo) {\n        return !getRemainingRounds(roundNo).isEmpty();\n    }\n\n    /**\n     * @require hasMoreRounds(currentRoundNo)\n     * @param currentRoundNo\n     * @return the number of the following round\n     */\n    public int getNextRound(final int currentRoundNo) {\n        final SortedMap\u003cInteger, Round\u003e remainingRounds \u003d getRemainingRounds(currentRoundNo);\n        assert remainingRounds.size() \u003e 0 : \"more rounds must exist!\";\n        return remainingRounds.firstKey().intValue();\n    }\n\n    /**\n     * @param currentRoundNo\n     * @return all rounds that follow after the given round number\n     */\n    private SortedMap\u003cInteger, Round\u003e getRemainingRounds(final int currentRoundNo) {\n        final Integer nextRoundNo \u003d Integer.valueOf(currentRoundNo + 1);\n        final SortedMap\u003cInteger, Round\u003e remainingRounds \u003d rounds.tailMap(nextRoundNo);\n        return remainingRounds;\n    }\n}\n",
    "package": "de.outstare.fortbattleplayer.player",
    "classname": "Battleplan",
    "id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/Battleplan_0Test.java",
    "test_prompt": "// Battleplan_0Test.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.Collection;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.logging.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Battleplan}.\n* It contains ten unit test cases for the {@link Battleplan#numberOfRounds()} method.\n*/\nclass Battleplan_0Test {",
    "method_signature": "numberOfRounds()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Battleplayer.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Combatant;\n\n/**\n * A {@link Battleplayer} controls the battle. It is a puppet player controlling\n * the behavior of the {@link Combatant}s.\n *\n * @author daniel\n */\npublic class Battleplayer implements Player {\n\n    private static final transient Logger LOG \u003d Logger.getLogger(Battleplayer.class.getName());\n\n    private final Battleplan plan;\n\n    private final Set\u003cRoundListener\u003e listeners \u003d new HashSet\u003cRoundListener\u003e();\n\n    private boolean isPaused \u003d false;\n\n    /**\n     * round numbers may not be sequential (this variable is also used for\n     * locking during a round)\n     */\n    private int currentRoundNo;\n\n    private volatile boolean isPlaying \u003d false;\n\n    private volatile boolean shouldStop \u003d false;\n\n    /**\n     * controls some aspects of the behavior of the player\n     */\n    public final PlayerConfiguration config;\n\n    /**\n     * @param plan\n     * @param config\n     */\n    public Battleplayer(final Battleplan plan, final PlayerConfiguration config) {\n        this.plan \u003d plan;\n        this.config \u003d config;\n        if (!plan.hasMoreRounds(0)) {\n            throw new IllegalStateException(\"Cannot play a battle without rounds!\");\n        }\n        currentRoundNo \u003d plan.getNextRound(0);\n    }\n\n    /**\n     * @param plan\n     */\n    public Battleplayer(final Battleplan plan) {\n        this(plan, new PlayerConfiguration());\n    }\n\n    /**\n     * let the battle begin! The whole battle is done by executing the\n     * {@link Battleplan}.\n     */\n    public void play() {\n        isPlaying \u003d true;\n        LOG.info(\"now playing\");\n        while (!shouldStop) {\n            playCurrentRound(currentRoundNo);\n            if (plan.hasMoreRounds(currentRoundNo)) {\n                currentRoundNo \u003d plan.getNextRound(currentRoundNo);\n            } else {\n                break;\n            }\n        }\n        shouldStop \u003d false;\n        isPlaying \u003d false;\n        LOG.info(\"stopped playing\");\n    }\n\n    /**\n     * blocks until current round has ended\n     *\n     * @see de.outstare.fortbattleplayer.player.Player#gotoRound(de.outstare.fortbattleplayer.player.Round)\n     */\n    public void gotoRound(final int i) {\n        assert plan.hasRoundNo(i) : \"round with number \" + i + \" must exist!\";\n        stop();\n        while (isPlaying) {\n            try {\n                LOG.fine(\"waiting for round \" + currentRoundNo + \" to end to go to round \" + i);\n                Thread.sleep(500);\n            } catch (final InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        synchronized (this) {\n            currentRoundNo \u003d i;\n        }\n        plan.resetToRound(currentRoundNo);\n    }\n\n    /**\n     * executes the round of the internal state\n     */\n    private void playCurrentRound(final int roundNo) {\n        fireNewRoundEvent(roundNo);\n        plan.executeRound(roundNo, config);\n        delayNextRound();\n    }\n\n    /**\n     * wait the time given in {@link PlayerConfiguration#ROUND_DELAY}\n     */\n    private void delayNextRound() {\n        try {\n            Thread.sleep(config.ROUND_DELAY);\n        } catch (final InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * tell all listeners that a new round will start now\n     *\n     * @param roundNo\n     */\n    private void fireNewRoundEvent(final int roundNo) {\n        for (final RoundListener listener : listeners) {\n            listener.nextRound(roundNo);\n        }\n    }\n\n    /**\n     * @param listener\n     */\n    public void addRoundListener(final RoundListener listener) {\n        listeners.add(listener);\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.player.Player#stop()\n     */\n    public void stop() {\n        if (isPlaying) {\n            LOG.fine(\"stopping\");\n            shouldStop \u003d true;\n        } else {\n            LOG.fine(\"already stopped\");\n        }\n    }\n\n    /**\n     * A RoundListener waits for Round events.\n     *\n     * @author daniel\n     */\n    public static interface RoundListener {\n\n        /**\n         * a new round will begin immediatly\n         *\n         * @param roundNo\n         */\n        void nextRound(int roundNo);\n    }\n\n    /**\n     * @return the number of rounds this player shows\n     */\n    public int numberOfRounds() {\n        return plan.numberOfRounds();\n    }\n\n    /**\n     * toggles pause which holds playing rounds. if this player is currently\n     * paused can be checked with isPaused()\n     */\n    public void pause() {\n        if (isPaused) {\n            config.unlock();\n            isPaused \u003d false;\n        } else {\n            config.lock();\n            isPaused \u003d true;\n        }\n    }\n\n    /**\n     * @return \u003ccode\u003etrue\u003c/code\u003e if this player is playing and is currently hold\n     */\n    public boolean isPaused() {\n        return isPaused;\n    }\n\n    /**\n     * @see de.outstare.fortbattleplayer.player.Player#getRoundNumbers()\n     */\n    public List\u003cInteger\u003e getRoundNumbers() {\n        // always generating a new list\n        final List\u003cInteger\u003e rounds \u003d new ArrayList\u003cInteger\u003e(plan.numberOfRounds());\n        // check if first round exists\n        final int firstRound \u003d 0;\n        if (plan.hasRoundNo(firstRound)) {\n            rounds.add(Integer.valueOf(firstRound));\n        }\n        // add all following rounds\n        int roundNo;\n        for (roundNo \u003d plan.getNextRound(firstRound); plan.hasMoreRounds(roundNo); roundNo \u003d plan.getNextRound(roundNo)) {\n            rounds.add(Integer.valueOf(roundNo));\n        }\n        // add last round (has no round after it)\n        rounds.add(Integer.valueOf(roundNo));\n        return rounds;\n    }\n}\n",
    "package": "de.outstare.fortbattleplayer.player",
    "classname": "Battleplayer",
    "id": "/EvoSuiteBenchmark/original/79_twfbplayer/src/main/java/de/outstare/fortbattleplayer/player/Battleplayer.java",
    "test_prompt": "// BattleplayerTest.java\npackage de.outstare.fortbattleplayer.player;\n\n/*\n Copyright (c) 2010 Daniel Raap\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n */\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.logging.Logger;\nimport de.outstare.fortbattleplayer.model.Combatant;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Battleplayer}.\n* It contains ten unit test cases for the {@link Battleplayer#numberOfRounds()} method.\n*/\nclass BattleplayerTest {",
    "method_signature": "numberOfRounds()",
    "suffix": ""
  }
]