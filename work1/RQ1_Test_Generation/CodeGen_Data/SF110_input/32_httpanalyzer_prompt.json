[
  {
    "numberTests": "ten",
    "original_code": "// HttpPreference.java\n/*\n * GNU GENERAL PUBLIC LICENSE\n * Version 3, 29 June 2007\n * \n * Copyright (C) 2010, vlad\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see \u003chttp://www.gnu.org/licenses/\u003e.\n */\npackage httpanalyzer;\n\nimport java.util.Properties;\nimport javax.swing.JFrame;\n\n/**\n * @author vlad\n */\npublic class HttpPreference {\n\n    /**\n     * Get values from work form and set properties\n     * Then call method FileUtil.savePreferenceToFile\n     * @param mainView HttpAnalyzerView\n     * @param parentFrame JFrame\n     */\n    public void savePreference(HttpAnalyzerView analyseView, JFrame parentFrame, String notes) {\n        Properties properties \u003d new Properties();\n        if (notes !\u003d null) {\n            properties.setProperty(\"httpanalyzer.notes\", notes);\n        }\n        properties.setProperty(\"httpanalyzer.tools.options.merge\", Boolean.toString(analyseView.mergeInfoCheckBox.isSelected()));\n        if (analyseView.proxyNoneRadioButton.isSelected()) {\n            properties.setProperty(\"httpanalyzer.options.proxytype\", \"None\");\n        } else if (analyseView.proxyHttpRadioButton.isSelected()) {\n            properties.setProperty(\"httpanalyzer.options.proxytype\", \"Http\");\n        } else {\n            properties.setProperty(\"httpanalyzer.options.proxytype\", \"Socks\");\n        }\n        properties.setProperty(\"httpanalyzer.options.proxy\", analyseView.proxyField.getText());\n        properties.setProperty(\"httpanalyzer.options.proxyauth\", Boolean.toString(analyseView.proxyAuthCheckBox.isSelected()));\n        properties.setProperty(\"httpanalyzer.options.proxyuser\", analyseView.proxyUserTextField.getText());\n        properties.setProperty(\"httpanalyzer.options.proxypassword\", new String(analyseView.proxyPassPasswordField.getPassword()));\n        // properties.setProperty(\"httpanalyzer.options.sockslevel\", );\n        properties.setProperty(\"httpanalyzer.options.httpversion\", analyseView.httpVersionComboBox.getSelectedItem().toString());\n        properties.setProperty(\"httpanalyzer.options.httpauth\", Boolean.toString(analyseView.httpAuthCheckBox.isSelected()));\n        properties.setProperty(\"httpanalyzer.options.httpauthuser\", analyseView.httpUserTextField.getText());\n        properties.setProperty(\"httpanalyzer.options.httpauthpassword\", new String(analyseView.httpPassPasswordField.getPassword()));\n        properties.setProperty(\"httpanalyzer.options.customrefer.enable\", Boolean.toString(analyseView.customRefererCheckBox.isSelected()));\n        properties.setProperty(\"httpanalyzer.options.customrefer\", analyseView.customRefererTextField.getText());\n        properties.setProperty(\"httpanalyzer.options.customcookie.enable\", Boolean.toString(analyseView.customCookieCheckBox.isSelected()));\n        properties.setProperty(\"httpanalyzer.options.customcookie\", analyseView.customCookieTextField.getText());\n        if (analyseView.firefoxRadioButton.isSelected()) {\n            properties.setProperty(\"httpanalyzer.options.agents\", \"0\");\n        } else if (analyseView.ie6RadioButton.isSelected()) {\n            properties.setProperty(\"httpanalyzer.options.agents\", \"1\");\n        } else if (analyseView.ie7RadioButton.isSelected()) {\n            properties.setProperty(\"httpanalyzer.options.agents\", \"2\");\n        } else if (analyseView.ie8RadioButton.isSelected()) {\n            properties.setProperty(\"httpanalyzer.options.agents\", \"3\");\n        } else if (analyseView.googleBotRadioButton.isSelected()) {\n            properties.setProperty(\"httpanalyzer.options.agents\", \"4\");\n        } else if (analyseView.msnRadioButton.isSelected()) {\n            properties.setProperty(\"httpanalyzer.options.agents\", \"5\");\n        } else if (analyseView.yahooRadioButton.isSelected()) {\n            properties.setProperty(\"httpanalyzer.options.agents\", \"6\");\n        } else if (analyseView.iPhoneRadioButton.isSelected()) {\n            properties.setProperty(\"httpanalyzer.options.agents\", \"7\");\n        }\n        if (analyseView.getRadio.isSelected()) {\n            properties.setProperty(\"httpanalyzer.options.method\", \"GET\");\n        } else if (analyseView.postRadio.isSelected()) {\n            properties.setProperty(\"httpanalyzer.options.method\", \"POST\");\n        } else {\n            properties.setProperty(\"httpanalyzer.options.method\", \"HEAD\");\n        }\n        properties.setProperty(\"httpanalyzer.options.tofile.enable\", Boolean.toString(analyseView.toFileCheckBox.isSelected()));\n        properties.setProperty(\"httpanalyzer.options.tofile\", analyseView.toFileTextField.getText());\n        properties.setProperty(\"httpanalyzer.options.urlcombo.elements\", Integer.toString(analyseView.urlCombo.getItemCount()));\n        for (int i \u003d 0; i \u003c analyseView.urlCombo.getItemCount(); i++) {\n            properties.setProperty(\"httpanalyzer.options.urlcombo.\" + Integer.toString(i), analyseView.urlCombo.getItemAt(i).toString());\n        }\n        properties.setProperty(\"httpanalyzer.options.params.elements\", Integer.toString(analyseView.paramsComboBox.getItemCount()));\n        for (int i \u003d 0; i \u003c analyseView.paramsComboBox.getItemCount(); i++) {\n            properties.setProperty(\"httpanalyzer.options.params.\" + Integer.toString(i), analyseView.paramsComboBox.getItemAt(i).toString());\n        }\n        properties.setProperty(\"httpanalyzer.options.usecustom.headers\", Boolean.toString(analyseView.useCustomHeadersCheckBox.isSelected()));\n        properties.setProperty(\"httpanalyzer.options.custom.headers\", analyseView.customHeaders.getText());\n        properties.setProperty(\"httpanalyzer.options.intelligencemode\", Boolean.toString(analyseView.intelSaveCheckBox.isSelected()));\n        HttpFileUtils fileUtil \u003d new HttpFileUtils();\n        fileUtil.savePreferenceToFile(properties, parentFrame);\n    }\n\n    /**\n     * Get values from work form and set properties\n     * Then call method FileUtil.savePreferenceToFile\n     * @param mainView HttpAnalyzerView\n     * @param parentFrame JFrame\n     * @return String Notes\n     */\n    public String loadPreference(HttpAnalyzerView mainView, JFrame parentFrame) {\n        Properties properties \u003d new Properties();\n        HttpFileUtils fileUtil \u003d new HttpFileUtils();\n        properties \u003d fileUtil.loadPreferenceFromFile(parentFrame);\n        // Set values\n        mainView.mergeInfoCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(\"httpanalyzer.tools.options.merge\")));\n        String workProps \u003d properties.getProperty(\"httpanalyzer.options.proxytype\");\n        if (workProps.equals(\"None\")) {\n            mainView.proxyNoneRadioButton.setSelected(true);\n        } else if (workProps.equals(\"Http\")) {\n            mainView.proxyHttpRadioButton.setSelected(true);\n        } else {\n            mainView.proxySocksRadioButton.setSelected(true);\n        }\n        mainView.proxyField.setText(properties.getProperty(\"httpanalyzer.options.proxy\"));\n        mainView.proxyAuthCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(\"httpanalyzer.options.proxyauth\")));\n        mainView.proxyUserTextField.setText(properties.getProperty(\"httpanalyzer.options.proxyuser\"));\n        mainView.proxyPassPasswordField.setText(properties.getProperty(\"httpanalyzer.options.proxypassword\"));\n        if (properties.getProperty(\"httpanalyzer.options.httpversion\").equals(\"1.1\")) {\n            mainView.httpVersionComboBox.setSelectedIndex(0);\n        } else {\n            mainView.httpVersionComboBox.setSelectedIndex(1);\n        }\n        mainView.httpAuthCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(\"httpanalyzer.options.httpauth\")));\n        mainView.httpUserTextField.setText(properties.getProperty(\"httpanalyzer.options.httpauthuser\"));\n        mainView.httpPassPasswordField.setText(properties.getProperty(\"httpanalyzer.options.httpauthpassword\"));\n        mainView.customRefererCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(\"httpanalyzer.options.customrefer.enable\")));\n        mainView.customRefererTextField.setText(properties.getProperty(\"httpanalyzer.options.customrefer\"));\n        mainView.customCookieCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(\"httpanalyzer.options.customcookie.enable\")));\n        mainView.customCookieTextField.setText(properties.getProperty(\"httpanalyzer.options.customcookie\"));\n        workProps \u003d properties.getProperty(\"httpanalyzer.options.agents\");\n        if (workProps.equals(\"0\")) {\n            mainView.firefoxRadioButton.setSelected(true);\n        } else if (workProps.equals(\"1\")) {\n            mainView.ie6RadioButton.setSelected(true);\n        } else if (workProps.equals(\"2\")) {\n            mainView.ie7RadioButton.setSelected(true);\n        } else if (workProps.equals(\"3\")) {\n            mainView.ie8RadioButton.setSelected(true);\n        } else if (workProps.equals(\"4\")) {\n            mainView.googleBotRadioButton.setSelected(true);\n        } else if (workProps.equals(\"5\")) {\n            mainView.msnRadioButton.setSelected(true);\n        } else if (workProps.equals(\"6\")) {\n            mainView.yahooRadioButton.setSelected(true);\n        } else {\n            mainView.iPhoneRadioButton.setSelected(true);\n        }\n        workProps \u003d properties.getProperty(\"httpanalyzer.options.method\");\n        if (workProps.equals(\"GET\")) {\n            mainView.getRadio.setSelected(true);\n        } else if (workProps.equals(\"POST\")) {\n            mainView.postRadio.setSelected(true);\n        } else {\n            mainView.headRadio.setSelected(true);\n        }\n        mainView.toFileTextField.setText(properties.getProperty(\"httpanalyzer.options.tofile\"));\n        mainView.toFileCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(\"httpanalyzer.options.tofile.enable\")));\n        int ii \u003d Integer.decode(properties.getProperty(\"httpanalyzer.options.urlcombo.elements\"));\n        mainView.urlCombo.removeAllItems();\n        for (int i \u003d 0; i \u003c ii; i++) {\n            String el \u003d properties.getProperty(\"httpanalyzer.options.urlcombo.\" + Integer.toString(i));\n            mainView.urlCombo.addItem(el);\n        }\n        ii \u003d Integer.decode(properties.getProperty(\"httpanalyzer.options.params.elements\"));\n        mainView.paramsComboBox.removeAllItems();\n        for (int i \u003d 0; i \u003c ii; i++) {\n            String el \u003d properties.getProperty(\"httpanalyzer.options.params.\" + Integer.toString(i));\n            mainView.paramsComboBox.addItem(el);\n        }\n        mainView.customHeaders.setText(properties.getProperty(\"httpanalyzer.options.custom.headers\"));\n        mainView.useCustomHeadersCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(\"httpanalyzer.options.usecustom.headers\")));\n        mainView.intelSaveCheckBox.setSelected(Boolean.parseBoolean(properties.getProperty(\"httpanalyzer.options.intelligencemode\")));\n        return properties.getProperty(\"httpanalyzer.notes\");\n    }\n}\n",
    "package": "httpanalyzer",
    "classname": "HttpPreference",
    "id": "/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/HttpPreference.java",
    "test_prompt": "// HttpPreferenceTest.java\npackage httpanalyzer;\n\nimport java.util.Properties;\nimport javax.swing.JFrame;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HttpPreference}.\n* It contains ten unit test cases for the {@link HttpPreference#loadPreference(HttpAnalyzerView, JFrame)} method.\n*/\nclass HttpPreferenceTest {",
    "method_signature": "loadPreference(HttpAnalyzerView, JFrame)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// ParamsUrlTools.java\n/*\n * GNU GENERAL PUBLIC LICENSE\n * Version 3, 29 June 2007\n * \n * Copyright (C) 2010, vlad\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see \u003chttp://www.gnu.org/licenses/\u003e.\n */\npackage httpanalyzer;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JFrame;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.message.BasicNameValuePair;\n\n/**\n * @author vlad\n */\npublic class ParamsUrlTools {\n\n    /**\n     * Transform long String line with parameters\n     * to List (key, value)\n     * @param params String\n     * @return List\u003cNameValuePair\u003e\n     */\n    public List\u003cNameValuePair\u003e getPairParams(String params) {\n        String[] requestParams \u003d params.split(\"\u0026\");\n        List\u003cNameValuePair\u003e nvps \u003d new ArrayList\u003cNameValuePair\u003e();\n        for (int i \u003d 0; i \u003c requestParams.length; i++) {\n            String workVal \u003d requestParams[i];\n            System.out.println(\"Val \u003d\" + workVal + \"\u003d\");\n            if (!workVal.isEmpty()) {\n                int f_index \u003d requestParams[i].indexOf(\"\u003d\");\n                String key \u003d requestParams[i].substring(0, f_index);\n                String val \u003d requestParams[i].substring(f_index + 1);\n                //System.out.println(\"i\u003d\"+i+\", string\u003d\"+requestParams[i]);\n                System.out.println(\"key \u003d \" + key + \", val\u003d\" + val);\n                nvps.add(new BasicNameValuePair(key, val));\n            }\n        }\n        System.out.println(\"\");\n        return nvps;\n    }\n\n    /**\n     * Get URL and check it. Apply HTTP scheme only.\n     * Cut URL on some parts and send them.\n     * Return String array \u003d {host, port, path, checkedUrl}\n     * @return String[]\n     */\n    public String[] splitUrl(String startUrl, JFrame parentFrame) {\n        String[] returnParams \u003d new String[4];\n        // Verify format of URL.\n        URI verifiedUrl \u003d null;\n        try {\n            verifiedUrl \u003d new URI(startUrl);\n            returnParams[0] \u003d verifiedUrl.getHost();\n            returnParams[1] \u003d Integer.toString(verifiedUrl.getPort());\n            returnParams[2] \u003d verifiedUrl.getPath();\n            String urlSchema \u003d verifiedUrl.getScheme();\n            returnParams[3] \u003d verifiedUrl.toASCIIString();\n            /*String urlPath \u003d verifiedUrl.getPath();\n            System.out.println(\"Host \u003d\"+targetHost);\n            System.out.println(\"Path \u003d\"+urlPath);\n            System.out.println(\"Checked \u003d\"+checkedUrl);\n            System.out.println(\"Query \u003d\"+verifiedUrl.getQuery());\n            System.out.println(\"Checked \u003d\"+verifiedUrl.getScheme());*/\n            if (!urlSchema.startsWith(\"http\")) {\n                String message \u003d \"Sorry,\\n but HTTP(S) protocols are permited only\";\n                new SwingTools(parentFrame).showErrorDialog(\"URL Error\", message);\n            }\n        } catch (URISyntaxException ex) {\n            String message \u003d startUrl + \"\\n is not valid.\";\n            new SwingTools(parentFrame).showErrorDialog(\"URL Error\", message);\n        }\n        return returnParams;\n    }\n}\n",
    "package": "httpanalyzer",
    "classname": "ParamsUrlTools",
    "id": "/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/ParamsUrlTools_0Test.java",
    "test_prompt": "// ParamsUrlTools_0Test.java\npackage httpanalyzer;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JFrame;\nimport org.apache.http.NameValuePair;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ParamsUrlTools}.\n* It contains ten unit test cases for the {@link ParamsUrlTools#getPairParams(String)} method.\n*/\nclass ParamsUrlTools_0Test {",
    "method_signature": "getPairParams(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// HttpAnalyzerApp.java\n/*\n * GNU GENERAL PUBLIC LICENSE\n * Version 3, 29 June 2007\n *\n * Copyright (C) 2010, vlad\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see \u003chttp://www.gnu.org/licenses/\u003e.\n *\n *\n * HttpAnalyzerApp.java\n */\npackage httpanalyzer;\n\nimport org.jdesktop.application.Application;\nimport org.jdesktop.application.SingleFrameApplication;\n\n/**\n * The main class of the application.\n */\npublic class HttpAnalyzerApp extends SingleFrameApplication {\n\n    /**\n     * At startup create and show the main frame of the application.\n     */\n    @Override\n    protected void startup() {\n        show(new HttpAnalyzerView(this));\n    }\n\n    /**\n     * This method is to initialize the specified window by injecting resources.\n     * Windows shown in our application come fully initialized from the GUI\n     * builder, so this additional configuration is not needed.\n     */\n    @Override\n    protected void configureWindow(java.awt.Window root) {\n    }\n\n    /**\n     * A convenient static getter for the application instance.\n     * @return the instance of HttpAnalyzerApp\n     */\n    public static HttpAnalyzerApp getApplication() {\n        return Application.getInstance(HttpAnalyzerApp.class);\n    }\n\n    /**\n     * Main method launching the application.\n     */\n    public static void main(String[] args) {\n        launch(HttpAnalyzerApp.class, args);\n    }\n}\n",
    "package": "httpanalyzer",
    "classname": "HttpAnalyzerApp",
    "id": "/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/HttpAnalyzerApp.java",
    "test_prompt": "// HttpAnalyzerAppTest.java\npackage httpanalyzer;\n\nimport org.jdesktop.application.Application;\nimport org.jdesktop.application.SingleFrameApplication;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HttpAnalyzerApp}.\n* It contains ten unit test cases for the {@link HttpAnalyzerApp#getApplication()} method.\n*/\nclass HttpAnalyzerAppTest {",
    "method_signature": "getApplication()",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// HeaderSettings.java\n/*\n * GNU GENERAL PUBLIC LICENSE\n * Version 3, 29 June 2007\n * \n * Copyright (C) 2010, vlad\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see \u003chttp://www.gnu.org/licenses/\u003e.\n */\npackage httpanalyzer;\n\nimport org.apache.http.Header;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpRequestBase;\n\n/**\n * @author vlad\n */\npublic class HeaderSettings {\n\n    public static String[] userAgents \u003d { \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\", \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)\", \"Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\", \"msnbot/1.1 (+http://search.msn.com/msnbot.htm)\", \"Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)\", \"Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16\" };\n\n    public static final int FIREFOX \u003d 0;\n\n    public static final int IE6 \u003d 1;\n\n    public static final int IE7 \u003d 2;\n\n    public static final int IE8 \u003d 3;\n\n    public static final int GOOGLEBOT \u003d 4;\n\n    public static final int MSNBOT \u003d 5;\n\n    public static final int YAHOOBOT \u003d 6;\n\n    public static final int IPHONE \u003d 7;\n\n    public static final int CUSTOM \u003d 255;\n\n    final String contentCharset \u003d \"utf-8\";\n\n    String setUserAgent;\n\n    private static String presetCookie;\n\n    private static Header[] headersSet;\n\n    /**\n     * Get User-Agent\u0026Referer and set\n     * internal headers\n     */\n    public static void initHeaders(int idAgent, String referer) {\n        HttpGet baseRequest \u003d new HttpGet();\n        baseRequest.addHeader(\"User-Agent\", userAgents[idAgent]);\n        baseRequest.addHeader(\"Accept\", \"text/html,application/xhtml+xml,\" + \"application/xml;q\u003d0.9,*/*;q\u003d0.8\");\n        baseRequest.addHeader(\"Referer\", referer);\n        baseRequest.addHeader(\"Connection\", \"Keep-Alive\");\n        baseRequest.addHeader(\"Keep-Alive\", \"300\");\n        if (presetCookie !\u003d null) {\n            baseRequest.addHeader(\"Cookie\", presetCookie);\n        }\n        headersSet \u003d baseRequest.getAllHeaders();\n    }\n\n    /**\n     * Get all headers from user from\n     * and set internal headers\n     */\n    public static void initHeaders(String myHeaders) {\n        HttpGet baseRequest \u003d new HttpGet();\n        String[] headersArray \u003d myHeaders.split(\"\\n\");\n        for (int i \u003d 0; i \u003c headersArray.length; i++) {\n            if (!headersArray[i].isEmpty()) {\n                int indexStr \u003d headersArray[i].indexOf(\":\");\n                String key \u003d headersArray[i].substring(0, indexStr);\n                String val \u003d headersArray[i].substring(indexStr + 1).trim();\n                baseRequest.addHeader(key, val);\n                System.out.println(\"Key \u003d\" + key + \", val\u003d\" + val);\n            }\n        }\n        headersSet \u003d baseRequest.getAllHeaders();\n    }\n\n    /**\n     * Send all internal headers\n     */\n    public static Header[] setHeaders() {\n        return headersSet;\n    }\n\n    /**\n     * Set internal header Cookie:\n     */\n    public static void setCookie(String cookie) {\n        presetCookie \u003d cookie;\n    }\n\n    /**\n     * Disable headers Cookie\n     */\n    public static void clearCookie() {\n        presetCookie \u003d null;\n    }\n\n    public static String getHeaders() {\n        Header[] headers \u003d headersSet;\n        String headersString \u003d null;\n        StringBuffer strBuf \u003d new StringBuffer();\n        for (int i \u003d 0; i \u003c headers.length; i++) {\n            strBuf.append(headers[i].toString() + \"\\n\");\n        }\n        headersString \u003d strBuf.toString();\n        return headersString;\n    }\n\n    public static String showHeaders(HttpRequestBase baseRequest) {\n        Header[] headers \u003d baseRequest.getAllHeaders();\n        StringBuffer strBuf \u003d new StringBuffer();\n        for (int i \u003d 0; i \u003c headers.length; i++) {\n            strBuf.append(headers[i].toString() + \"\\n\");\n        }\n        String headersString \u003d strBuf.toString();\n        return headersString;\n    }\n\n    public static String showHeaders(Header[] headers) {\n        StringBuffer strBuf \u003d new StringBuffer();\n        for (int i \u003d 0; i \u003c headers.length; i++) {\n            strBuf.append(headers[i].toString() + \"\\n\");\n        }\n        String headersString \u003d strBuf.toString();\n        return headersString;\n    }\n}\n",
    "package": "httpanalyzer",
    "classname": "HeaderSettings",
    "id": "/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/HeaderSettings_0Test.java",
    "test_prompt": "// HeaderSettings_0Test.java\npackage httpanalyzer;\n\nimport org.apache.http.Header;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.client.methods.HttpRequestBase;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HeaderSettings}.\n* It contains ten unit test cases for the {@link HeaderSettings#setHeaders()} method.\n*/\nclass HeaderSettings_0Test {",
    "method_signature": "setHeaders()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// HttpFileUtils.java\n/*\n * GNU GENERAL PUBLIC LICENSE\n * Version 3, 29 June 2007\n * \n * Copyright (C) 2010, vlad\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see \u003chttp://www.gnu.org/licenses/\u003e.\n */\npackage httpanalyzer;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.io.RandomAccessFile;\nimport java.util.Calendar;\nimport java.util.Properties;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.swing.JFileChooser;\nimport javax.swing.JFrame;\nimport org.apache.http.HttpEntity;\n\n/**\n * @author vlad\n */\npublic class HttpFileUtils {\n\n    static final int MAX_BUFFER_SIZE \u003d 8192;\n\n    /**\n     * Save Http entity to file\n     * @param entity HttpEntity\n     * @param fileName String\n     */\n    public long saveEntity(HttpEntity entity, String fileName) {\n        long size \u003d 0L;\n        File file \u003d new File(fileName);\n        byte[] buffer \u003d new byte[MAX_BUFFER_SIZE];\n        // Read from server into buffer.\n        InputStream streamEntity;\n        RandomAccessFile outFile;\n        try {\n            streamEntity \u003d entity.getContent();\n            outFile \u003d new RandomAccessFile(file, \"rw\");\n            int read \u003d 0;\n            // Rewrite file\n            outFile.setLength(0);\n            System.out.println(\"Buffer size \u003d\" + buffer.length);\n            while ((read \u003d streamEntity.read(buffer)) !\u003d -1) {\n                size \u003d size + read;\n                // Write buffer to file\n                outFile.write(buffer, 0, read);\n            }\n            outFile.close();\n            streamEntity.close();\n        } catch (IOException ex) {\n            Logger.getLogger(HttpFileUtils.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (IllegalStateException ex) {\n            Logger.getLogger(HttpFileUtils.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return size;\n    }\n\n    /**\n     * Filter for FileChooser *.XML\n     */\n    private class MyXmlFilter extends javax.swing.filechooser.FileFilter {\n\n        @Override\n        public boolean accept(File file) {\n            // Allow only directories, or files with \".txt\" extension\n            return file.isDirectory() || file.getAbsolutePath().endsWith(\".xml\");\n        }\n\n        @Override\n        public String getDescription() {\n            // This description will be displayed in the dialog,\n            // hard-coded \u003d ugly, should be done via I18N\n            return \"XML files (*.xml)\";\n        }\n    }\n\n    /**\n     * Filter for FileChooser *.TXT\n     */\n    private class MyTxtFilter extends javax.swing.filechooser.FileFilter {\n\n        @Override\n        public boolean accept(File file) {\n            // Allow only directories, or files with \".txt\" extension\n            return file.isDirectory() || file.getAbsolutePath().endsWith(\".txt\");\n        }\n\n        @Override\n        public String getDescription() {\n            // This description will be displayed in the dialog,\n            // hard-coded \u003d ugly, should be done via I18N\n            return \"Text documents (*.txt)\";\n        }\n    }\n\n    /**\n     * Method saves your template to file\n     * Creates JFileChooser and save into XML file\n     * @param properties\n     * @param parentFrame\n     */\n    public void savePreferenceToFile(Properties properties, JFrame parentFrame) {\n        //Create a file chooser\n        final JFileChooser fileChooser \u003d new JFileChooser();\n        fileChooser.setDialogTitle(\"Save template\");\n        fileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);\n        fileChooser.addChoosableFileFilter(new MyTxtFilter());\n        fileChooser.addChoosableFileFilter(new MyXmlFilter());\n        int returnVal \u003d fileChooser.showSaveDialog(parentFrame);\n        if (returnVal \u003d\u003d JFileChooser.APPROVE_OPTION) {\n            try {\n                String fileSetUser \u003d fileChooser.getSelectedFile().toString();\n                File file;\n                if (fileSetUser.contains(\".\")) {\n                    file \u003d new File(fileSetUser);\n                } else {\n                    file \u003d new File(fileSetUser + \".xml\");\n                }\n                FileOutputStream fos \u003d new FileOutputStream(file);\n                properties.storeToXML(fos, \"HttpAnalyzer Template\", \"UTF-8\");\n                fos.close();\n            } catch (IOException ex) {\n                Logger.getLogger(HttpFileUtils.class.getName()).log(Level.SEVERE, null, ex);\n                new SwingTools(parentFrame).showErrorDialog(\"IO error\", ex.getLocalizedMessage());\n            }\n        } else {\n            System.out.println(\"File wasn\u0027t choosen!\");\n        }\n    }\n\n    /**\n     * Method load your template from file\n     * Creates JFileChooser and  load from XML file\n     * @param parentFrame\n     */\n    public Properties loadPreferenceFromFile(JFrame parentFrame) {\n        Properties properties \u003d new Properties();\n        //Create a file chooser\n        final JFileChooser fileChooser \u003d new JFileChooser();\n        fileChooser.setDialogTitle(\"Load template\");\n        fileChooser.setDialogType(javax.swing.JFileChooser.OPEN_DIALOG);\n        fileChooser.addChoosableFileFilter(new MyTxtFilter());\n        fileChooser.addChoosableFileFilter(new MyXmlFilter());\n        int returnVal \u003d fileChooser.showOpenDialog(parentFrame);\n        if (returnVal \u003d\u003d JFileChooser.APPROVE_OPTION) {\n            try {\n                String fileSetUser \u003d fileChooser.getSelectedFile().toString();\n                File file;\n                if (fileSetUser.contains(\".\")) {\n                    file \u003d new File(fileSetUser);\n                } else {\n                    file \u003d new File(fileSetUser + \".xml\");\n                }\n                FileInputStream fis \u003d new FileInputStream(file);\n                properties.loadFromXML(fis);\n                fis.close();\n            } catch (IOException ex) {\n                Logger.getLogger(HttpFileUtils.class.getName()).log(Level.SEVERE, null, ex);\n                new SwingTools(parentFrame).showErrorDialog(\"IO error\", ex.getLocalizedMessage());\n            }\n        } else {\n            System.out.println(\"File wasn\u0027t choosen!\");\n        }\n        return properties;\n    }\n\n    /**\n     * Save information from ReplayTab in file\n     * @param mainView\n     * @param parentFrame\n     */\n    public void saveSessionInfo(HttpAnalyzerView mainView, JFrame parentFrame) {\n        //Create a file chooser\n        final JFileChooser fileChooser \u003d new JFileChooser();\n        // NOI18N\n        fileChooser.setDialogTitle(\"Save your session\");\n        fileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);\n        Calendar calendar \u003d Calendar.getInstance();\n        System.out.print(\"Date: \");\n        System.out.print(calendar.get(Calendar.MONTH));\n        System.out.print(\" \" + calendar.get(Calendar.DATE) + \" \");\n        System.out.println(calendar.get(Calendar.YEAR));\n        String preFileName \u003d \"session-\" + Integer.toString(calendar.get(Calendar.DATE)) + \"-\" + Integer.toString(calendar.get(Calendar.MONTH)) + \".txt\";\n        fileChooser.setSelectedFile(new File(preFileName));\n        int returnVal \u003d fileChooser.showSaveDialog(parentFrame);\n        if (returnVal \u003d\u003d JFileChooser.APPROVE_OPTION) {\n            String fileName \u003d fileChooser.getSelectedFile().toString();\n            File file \u003d null;\n            System.out.println(\"File choose \u003d\" + fileName);\n            if (!fileName.toString().endsWith(\".txt\")) {\n                file \u003d new File(fileName + \".txt\");\n            } else {\n                file \u003d new File(fileName);\n            }\n            PrintWriter outWriter \u003d null;\n            try {\n                outWriter \u003d new PrintWriter(file);\n                String[] str \u003d mainView.replayDataPane.getText().split(\"\\n\");\n                for (int i \u003d 0; i \u003c str.length; i++) {\n                    outWriter.print(str[i] + \"\\r\\n\");\n                }\n            } catch (Exception ex) {\n                new SwingTools(parentFrame).showErrorDialog(\"IO error\", ex.getLocalizedMessage());\n            } finally {\n                if (outWriter !\u003d null) {\n                    outWriter.close();\n                }\n            }\n            //This is where a real application would open the file.\n            //log.append(\"Opening: \" + file.getName() + \".\" + newline);\n        } else {\n            System.out.println(\"File wasn\u0027t choosen!\");\n            //log.append(\"Open command cancelled by user.\" + newline);\n        }\n    }\n\n    /**\n     * Show JChooseFile dialog and\n     * put your choice in toFileTextField\n     * @param mainView\n     * @param parentFrame\n     */\n    public void fillToFileField(HttpAnalyzerView mainView, JFrame parentFrame) {\n        final JFileChooser fileChooser \u003d new JFileChooser();\n        fileChooser.setDialogTitle(\"Save your content\");\n        fileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);\n        int returnVal \u003d fileChooser.showSaveDialog(parentFrame);\n        if (returnVal \u003d\u003d JFileChooser.APPROVE_OPTION) {\n            mainView.toFileTextField.setText(fileChooser.getSelectedFile().toString());\n            mainView.toFileCheckBox.setSelected(true);\n        } else {\n            System.out.println(\"File wasn\u0027t choosen!\");\n        }\n    }\n}\n",
    "package": "httpanalyzer",
    "classname": "HttpFileUtils",
    "id": "/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/HttpFileUtils_0Test.java",
    "test_prompt": "// HttpFileUtils_0Test.java\npackage httpanalyzer;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.io.RandomAccessFile;\nimport java.util.Calendar;\nimport java.util.Properties;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.swing.JFileChooser;\nimport javax.swing.JFrame;\nimport org.apache.http.HttpEntity;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link HttpFileUtils}.\n* It contains ten unit test cases for the {@link HttpFileUtils#saveEntity(HttpEntity, String)} method.\n*/\nclass HttpFileUtils_0Test {",
    "method_signature": "saveEntity(HttpEntity, String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// Password.java\npackage httpanalyzer;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * @author David Scott\n */\npublic class Password {\n\n    /**\n     * \tPassword is a class to implement password encryption as used\n     * \ton Unix systems. It is compatible with the crypt(3c) system function.\n     * \tThis version is a based on the DES encryption algorithm in\n     * \tAndrew Tanenbaum\u0027s book \"Computer Networks\". It was rewritten\n     * \tin C and used in Perl release 4.035. This version was rewritten\n     * \tin Java by David Scott, Siemens Ltd., Australia.\n     *\n     * \tFor further details on the methods in this class, refer to the\n     * \tUnix man pages for crypt(3c).\n     */\n    private static byte[] InitialTr \u003d { 58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8, 57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7 };\n\n    private static byte[] FinalTr \u003d { 40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25 };\n\n    private static byte[] swap \u003d { 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 };\n\n    private static byte[] KeyTr1 \u003d { 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4 };\n\n    private static byte[] KeyTr2 \u003d { 14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32 };\n\n    private static byte[] etr \u003d { 32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17, 16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25, 24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1 };\n\n    private static byte[] ptr \u003d { 16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10, 2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25 };\n\n    private static byte[][] s_boxes \u003d { { 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7, 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8, 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0, 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 }, { 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10, 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5, 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15, 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 }, { 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8, 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1, 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7, 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 }, { 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15, 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9, 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4, 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 }, { 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9, 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6, 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14, 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 }, { 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11, 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8, 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6, 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 }, { 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1, 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6, 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2, 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 }, { 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7, 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2, 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8, 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 } };\n\n    private static int[] rots \u003d { 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 };\n\n    private static byte[] key \u003d new byte[64];\n\n    private static byte[] EP \u003d etr;\n\n    /* *** Methods start here *** */\n    private static void transpose(byte[] data, byte[] t, int n) {\n        byte[] x \u003d new byte[64];\n        System.arraycopy(data, 0, x, 0, x.length);\n        while (n-- \u003e 0) {\n            data[n] \u003d x[t[n] - 1];\n        }\n    }\n\n    private static void rotate(byte[] key) {\n        byte[] x \u003d new byte[64];\n        System.arraycopy(key, 0, x, 0, x.length);\n        for (int i \u003d 0; i \u003c 55; i++) {\n            x[i] \u003d x[i + 1];\n        }\n        x[27] \u003d key[0];\n        x[55] \u003d key[28];\n        System.arraycopy(x, 0, key, 0, key.length);\n    }\n\n    private static void f(int i, byte[] key, byte[] a, byte[] x) {\n        byte[] e \u003d new byte[64];\n        byte[] ikey \u003d new byte[64];\n        byte[] y \u003d new byte[64];\n        System.arraycopy(a, 0, e, 0, e.length);\n        transpose(e, EP, 48);\n        for (int j \u003d rots[i]; j \u003e 0; j--) {\n            rotate(key);\n        }\n        System.arraycopy(key, 0, ikey, 0, ikey.length);\n        transpose(ikey, KeyTr2, 48);\n        for (int j \u003d 0; j \u003c 48; j++) {\n            y[j] \u003d (byte) (e[j] ^ ikey[j]);\n        }\n        for (int j \u003d 0; j \u003c 8; j++) {\n            int k \u003d j + 1;\n            int r \u003d 32 * y[6 * k - 6] + 8 * y[6 * k - 5] + 4 * y[6 * k - 4] + 2 * y[6 * k - 3] + y[6 * k - 2] + 16 * y[6 * k - 1];\n            int xb \u003d s_boxes[j][r];\n            x[4 * k - 4] \u003d (byte) ((xb \u003e\u003e 3) \u0026 1);\n            x[4 * k - 3] \u003d (byte) ((xb \u003e\u003e 2) \u0026 1);\n            x[4 * k - 2] \u003d (byte) ((xb \u003e\u003e 1) \u0026 1);\n            x[4 * k - 1] \u003d (byte) (xb \u0026 1);\n        }\n        transpose(x, ptr, 32);\n    }\n\n    private static void definekey(byte[] k) {\n        System.arraycopy(k, 0, key, 0, key.length);\n        transpose(key, KeyTr1, 56);\n    }\n\n    private static void encrypt(byte[] blck, int edflag) {\n        byte[] p \u003d blck;\n        transpose(p, InitialTr, 64);\n        for (int i \u003d 15; i \u003e\u003d 0; i--) {\n            int j \u003d edflag \u003e 0 ? i : 15 - i;\n            byte[] b \u003d new byte[64];\n            System.arraycopy(p, 0, b, 0, b.length);\n            byte[] x \u003d new byte[64];\n            for (int k \u003d 31; k \u003e\u003d 0; k--) {\n                p[k] \u003d b[k + 32];\n            }\n            f(j, key, p, x);\n            for (int k \u003d 31; k \u003e\u003d 0; k--) {\n                p[k + 32] \u003d (byte) (b[k] ^ x[k]);\n            }\n        }\n        transpose(p, swap, 64);\n        transpose(p, FinalTr, 64);\n        blck \u003d p;\n    }\n\n    /**\n     * \tReturns a String containing the encrypted passwd\n     *\n     * \t@param\tstrpw\tA String containing the un-encrypted password\n     * \t@param\tstrsalt\tA 2 character String, containing the salt to\n     * \t\t\t\t\tencrypt the password with.\n     * \t@returns\t\tString containing encrypted password.\n     */\n    public static String crypt(String strpw, String strsalt) {\n        char[] pw \u003d strpw.toCharArray();\n        char[] salt \u003d strsalt.toCharArray();\n        byte[] pwb \u003d new byte[66];\n        char[] result \u003d new char[13];\n        byte[] new_etr \u003d new byte[etr.length];\n        int n \u003d 0;\n        int m \u003d 0;\n        while (m \u003c pw.length \u0026\u0026 n \u003c 64) {\n            for (int j \u003d 6; j \u003e\u003d 0; j--) {\n                pwb[n++] \u003d (byte) ((pw[m] \u003e\u003e j) \u0026 1);\n            }\n            // Increment pw\n            m++;\n            pwb[n++] \u003d 0;\n        }\n        while (n \u003c 64) {\n            pwb[n++] \u003d 0;\n        }\n        definekey(pwb);\n        for (n \u003d 0; n \u003c 66; n++) {\n            pwb[n] \u003d 0;\n        }\n        System.arraycopy(etr, 0, new_etr, 0, new_etr.length);\n        EP \u003d new_etr;\n        for (int i \u003d 0; i \u003c 2; i++) {\n            char c \u003d salt[i];\n            result[i] \u003d c;\n            if (c \u003e \u0027Z\u0027) {\n                // c was a lowercase letter\n                c -\u003d 6 + 7 + \u0027.\u0027;\n            } else if (c \u003e \u00279\u0027) {\n                // c was a uppercase letter\n                c -\u003d 7 + \u0027.\u0027;\n            } else {\n                // c was a digit, \u0027.\u0027 or \u0027/\u0027\n                c -\u003d \u0027.\u0027;\n            }\n            // now, 0 \u003c\u003d c \u003c\u003d 63\n            for (int j \u003d 0; j \u003c 6; j++) {\n                if (((c \u003e\u003e j) \u0026 1) \u003d\u003d 1) {\n                    byte t \u003d (byte) (6 * i + j);\n                    byte temp \u003d new_etr[t];\n                    new_etr[t] \u003d new_etr[t + 24];\n                    new_etr[t + 24] \u003d temp;\n                }\n            }\n        }\n        if (result[1] \u003d\u003d 0) {\n            result[1] \u003d result[0];\n        }\n        for (int i \u003d 0; i \u003c 25; i++) {\n            encrypt(pwb, 0);\n        }\n        EP \u003d etr;\n        m \u003d 2;\n        n \u003d 0;\n        while (n \u003c 66) {\n            int c \u003d 0;\n            for (int j \u003d 6; j \u003e 0; j--) {\n                c \u003c\u003c\u003d 1;\n                c |\u003d pwb[n++];\n            }\n            // becomes \u003e\u003d \u0027.\u0027\n            c +\u003d \u0027.\u0027;\n            if (c \u003e \u00279\u0027) {\n                // not in [./0-9], becomes upper\n                c +\u003d 7;\n            }\n            if (c \u003e \u0027Z\u0027) {\n                // not in [A-Z], becomes lower\n                c +\u003d 6;\n            }\n            result[m++] \u003d (char) c;\n        }\n        return (new String(result));\n    }\n\n    public static String hashMD5(String baseString) {\n        MessageDigest digest \u003d null;\n        StringBuffer hexString \u003d new StringBuffer();\n        try {\n            digest \u003d java.security.MessageDigest.getInstance(\"MD5\");\n            digest.update(baseString.getBytes());\n            byte[] hash \u003d digest.digest();\n            for (int i \u003d 0; i \u003c hash.length; i++) {\n                if ((0xff \u0026 hash[i]) \u003c 0x10) {\n                    hexString.append(\"0\" + Integer.toHexString((0xFF \u0026 hash[i])));\n                } else {\n                    hexString.append(Integer.toHexString(0xFF \u0026 hash[i]));\n                }\n            }\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.getLogger(Password.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return hexString.toString();\n    }\n}\n",
    "package": "httpanalyzer",
    "classname": "Password",
    "id": "/EvoSuiteBenchmark/original/32_httpanalyzer/src/main/java/httpanalyzer/Password_0Test.java",
    "test_prompt": "// Password_0Test.java\npackage httpanalyzer;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Password}.\n* It contains ten unit test cases for the {@link Password#crypt(String, String)} method.\n*/\nclass Password_0Test {",
    "method_signature": "crypt(String, String)",
    "suffix": "0"
  }
]