[
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\n/*\n * @(#)DefaultNoteListModel.java\n * Created on 2005-8-4\n * Inspirento, Copyright AllenStudio, All Rights Reserved\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n *\n */\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    private Vector\u003cAbstractNote\u003e delegate \u003d new Vector\u003cAbstractNote\u003e();\n\n    // Uni-listener temporary\n    private NoteListDataListener dataListener;\n\n    /**\n     * Returns the current capacity of this list.\n     *\n     * @return the current capacity\n     * @see Vector#capacity()\n     */\n    public int capacity() {\n        return delegate.capacity();\n    }\n\n    /**\n     * Returns the number of components in this list.\n     *\n     * @return the number of components in this list\n     * @see Vector#size()\n     */\n    public int size() {\n        return delegate.size();\n    }\n\n    /**\n     * Tests whether this list has any components.\n     *\n     * @return \u003ccode\u003etrue\u003c/code\u003e if and only if this list has no components,\n     *         that is, its size is zero; \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#isEmpty()\n     */\n    public boolean isEmpty() {\n        return delegate.isEmpty();\n    }\n\n    /**\n     * Returns an enumeration of the components of this list.\n     *\n     * @return an enumeration of the components of this list\n     * @see Vector#elements()\n     */\n    public Enumeration\u003cAbstractNote\u003e elements() {\n        return delegate.elements();\n    }\n\n    /**\n     * Tests whether the specified object is a component in this list.\n     *\n     * @param elem\n     *            an object\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the specified object is the same as a\n     *         component in this list\n     * @see Vector#contains(Object)\n     */\n    public boolean contains(AbstractNote elem) {\n        return delegate.contains(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            an object\n     * @return the index of the first occurrence of the argument in this list;\n     *         returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#indexOf(Object)\n     */\n    public int indexOf(AbstractNote elem) {\n        return delegate.indexOf(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e, beginning the\n     * search at \u003ccode\u003eindex\u003c/code\u003e.\n     *\n     * @param elem\n     *            an desired component\n     * @param index\n     *            the index from which to begin searching\n     * @return the index where the first occurrence of \u003ccode\u003eelem\u003c/code\u003e is\n     *         found after \u003ccode\u003eindex\u003c/code\u003e; returns \u003ccode\u003e-1\u003c/code\u003e if\n     *         the \u003ccode\u003eelem\u003c/code\u003e is not found in the list\n     * @see Vector#indexOf(Object,int)\n     */\n    public int indexOf(AbstractNote elem, int index) {\n        return delegate.indexOf(elem, index);\n    }\n\n    /**\n     * Returns the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            the desired component\n     * @return the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e in the\n     *         list; returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object)\n     */\n    public int lastIndexOf(AbstractNote elem) {\n        return delegate.lastIndexOf(elem);\n    }\n\n    /**\n     * Searches backwards for \u003ccode\u003eelem\u003c/code\u003e, starting from the specified\n     * index, and returns an index to it.\n     *\n     * @param elem\n     *            the desired component\n     * @param index\n     *            the index to start searching from\n     * @return the index of the last occurrence of the \u003ccode\u003eelem\u003c/code\u003e in\n     *         this list at position less than \u003ccode\u003eindex\u003c/code\u003e; returns\n     *         \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object,int)\n     */\n    public int lastIndexOf(AbstractNote elem, int index) {\n        return delegate.lastIndexOf(elem, index);\n    }\n\n    /**\n     * Returns the component at the specified index. Throws an\n     * \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is negative or\n     * not less than the size of the list. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although\n     * this method is not deprecated, the preferred method to use is\n     * \u003ccode\u003eget(int)\u003c/code\u003e, which implements the \u003ccode\u003eList\u003c/code\u003e\n     * interface defined in the 1.2 Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            an index into this list\n     * @return the component at the specified index\n     * @see #get(int)\n     * @see Vector#elementAt(int)\n     */\n    public AbstractNote elementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Returns the first component of this list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the first component of this list\n     * @see java.util.Vector#firstElement()\n     */\n    public AbstractNote firstElement() {\n        return delegate.firstElement();\n    }\n\n    /**\n     * Returns the last component of the list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the last component of the list\n     * @see Vector#lastElement()\n     */\n    public AbstractNote lastElement() {\n        return delegate.lastElement();\n    }\n\n    /**\n     * Return the number of components in the list.\n     *\n     * @return the number of components in the list\n     * @see NoteListModel#getSize()\n     */\n    public int getSize() {\n        return delegate.size();\n    }\n\n    /**\n     * Sets the component at the specified \u003ccode\u003eindex\u003c/code\u003e of this list to\n     * be the specified object. The previous component at that position is\n     * discarded.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eset(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            what the component is to be set to\n     * @param index\n     *            the specified index\n     * @see #set(int,Object)\n     * @see Vector#setElementAt(Object,int)\n     */\n    public void setElementAt(AbstractNote obj, int index) {\n        delegate.setElementAt(obj, index);\n        fireContentChanged(this, index);\n    }\n\n    /**\n     * Deletes the component at the specified index.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eremove(int)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            the index of the object to remove\n     * @see #remove(int)\n     * @see Vector#removeElementAt(int)\n     */\n    public void removeElementAt(int index) {\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n    }\n\n    /**\n     * Inserts the specified object as a component in this list at the specified\n     * \u003ccode\u003eindex\u003c/code\u003e.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eadd(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            the component to insert\n     * @param index\n     *            where to insert the new component\n     * @exception ArrayIndexOutOfBoundsException\n     *                if the index was invalid\n     * @see #add(int,Object)\n     * @see Vector#insertElementAt(Object,int)\n     */\n    public void insertElementAt(AbstractNote obj, int index) {\n        delegate.insertElementAt(obj, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Adds the specified component to the end of this list.\n     *\n     * @param obj\n     *            the component to be added\n     * @see Vector#addElement(Object)\n     */\n    public void addElement(AbstractNote obj) {\n        int index \u003d delegate.size();\n        delegate.addElement(obj);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the first (lowest-indexed) occurrence of the argument from this\n     * list.\n     *\n     * @param obj\n     *            the component to be removed\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the argument was a component of this list;\n     *         \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#removeElement(Object)\n     */\n    public boolean removeElement(AbstractNote obj) {\n        int index \u003d indexOf(obj);\n        boolean an \u003d delegate.removeElement(obj);\n        if (index \u003e\u003d 0) {\n            fireItemRemoved(this, index);\n        }\n        return an;\n    }\n\n    /**\n     * Returns a string that displays and identifies this object\u0027s properties.\n     *\n     * @return a String representation of this object\n     */\n    @Override\n    public String toString() {\n        return delegate.toString();\n    }\n\n    /*\n     * The remaining methods are included for compatibility with the Java 2\n     * platform Vector class.\n     */\n    /**\n     * Returns an array containing all of the elements in this list in the\n     * correct order.\n     *\n     * @return an array containing the elements of the list\n     * @see Vector#toArray()\n     */\n    public AbstractNote[] toArray() {\n        AbstractNote[] an \u003d new AbstractNote[delegate.size()];\n        delegate.copyInto(an);\n        return an;\n    }\n\n    /**\n     * Returns the element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to return\n     */\n    public AbstractNote get(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Replaces the element at the specified position in this list with the\n     * specified element.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to replace\n     * @param element\n     *            element to be stored at the specified position\n     * @return the element previously at the specified position\n     */\n    public AbstractNote set(int index, AbstractNote element) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.setElementAt(element, index);\n        fireContentChanged(this, index);\n        return an;\n    }\n\n    /**\n     * Inserts the specified element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index at which the specified element is to be inserted\n     * @param element\n     *            element to be inserted\n     */\n    public void add(int index, AbstractNote element) {\n        delegate.insertElementAt(element, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the element at the specified position in this list. Returns the\n     * element that was removed from the list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            the index of the element to removed\n     */\n    public AbstractNote remove(int index) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n        return an;\n    }\n\n    /**\n     * Returns the value at position \u003ccode\u003eindex\u003c/code\u003e\n     *\n     * @return the value at position \u003ccode\u003eindex\u003c/code\u003e\n     * @see NoteListModel#getElementAt(int)\n     */\n    public AbstractNote getElementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void addNoteListDataListener(NoteListDataListener l) {\n        this.dataListener \u003d l;\n    }\n\n    /**\n     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void removeNoteListDataListener() {\n        this.dataListener \u003d null;\n    }\n\n    /**\n     * Fired when one element\u0027s value is changed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireContentChanged(Object source, int index) {\n        dataListener.contentChanged(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one new element is added.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index added element\u0027s index\n     */\n    protected void fireItemAdded(Object source, int index) {\n        dataListener.itemAdded(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one element is removed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireItemRemoved(Object source, int index) {\n        dataListener.itemRemoved(new NoteListDataEvent(source, index));\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_0Test.java",
    "test_prompt": "// DefaultNoteListModel_0Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#capacity()} method.\n*/\nclass DefaultNoteListModel_0Test {",
    "method_signature": "capacity()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\n/*\n * @(#)DefaultNoteListModel.java\n * Created on 2005-8-4\n * Inspirento, Copyright AllenStudio, All Rights Reserved\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n *\n */\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    private Vector\u003cAbstractNote\u003e delegate \u003d new Vector\u003cAbstractNote\u003e();\n\n    // Uni-listener temporary\n    private NoteListDataListener dataListener;\n\n    /**\n     * Returns the current capacity of this list.\n     *\n     * @return the current capacity\n     * @see Vector#capacity()\n     */\n    public int capacity() {\n        return delegate.capacity();\n    }\n\n    /**\n     * Returns the number of components in this list.\n     *\n     * @return the number of components in this list\n     * @see Vector#size()\n     */\n    public int size() {\n        return delegate.size();\n    }\n\n    /**\n     * Tests whether this list has any components.\n     *\n     * @return \u003ccode\u003etrue\u003c/code\u003e if and only if this list has no components,\n     *         that is, its size is zero; \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#isEmpty()\n     */\n    public boolean isEmpty() {\n        return delegate.isEmpty();\n    }\n\n    /**\n     * Returns an enumeration of the components of this list.\n     *\n     * @return an enumeration of the components of this list\n     * @see Vector#elements()\n     */\n    public Enumeration\u003cAbstractNote\u003e elements() {\n        return delegate.elements();\n    }\n\n    /**\n     * Tests whether the specified object is a component in this list.\n     *\n     * @param elem\n     *            an object\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the specified object is the same as a\n     *         component in this list\n     * @see Vector#contains(Object)\n     */\n    public boolean contains(AbstractNote elem) {\n        return delegate.contains(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            an object\n     * @return the index of the first occurrence of the argument in this list;\n     *         returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#indexOf(Object)\n     */\n    public int indexOf(AbstractNote elem) {\n        return delegate.indexOf(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e, beginning the\n     * search at \u003ccode\u003eindex\u003c/code\u003e.\n     *\n     * @param elem\n     *            an desired component\n     * @param index\n     *            the index from which to begin searching\n     * @return the index where the first occurrence of \u003ccode\u003eelem\u003c/code\u003e is\n     *         found after \u003ccode\u003eindex\u003c/code\u003e; returns \u003ccode\u003e-1\u003c/code\u003e if\n     *         the \u003ccode\u003eelem\u003c/code\u003e is not found in the list\n     * @see Vector#indexOf(Object,int)\n     */\n    public int indexOf(AbstractNote elem, int index) {\n        return delegate.indexOf(elem, index);\n    }\n\n    /**\n     * Returns the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            the desired component\n     * @return the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e in the\n     *         list; returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object)\n     */\n    public int lastIndexOf(AbstractNote elem) {\n        return delegate.lastIndexOf(elem);\n    }\n\n    /**\n     * Searches backwards for \u003ccode\u003eelem\u003c/code\u003e, starting from the specified\n     * index, and returns an index to it.\n     *\n     * @param elem\n     *            the desired component\n     * @param index\n     *            the index to start searching from\n     * @return the index of the last occurrence of the \u003ccode\u003eelem\u003c/code\u003e in\n     *         this list at position less than \u003ccode\u003eindex\u003c/code\u003e; returns\n     *         \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object,int)\n     */\n    public int lastIndexOf(AbstractNote elem, int index) {\n        return delegate.lastIndexOf(elem, index);\n    }\n\n    /**\n     * Returns the component at the specified index. Throws an\n     * \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is negative or\n     * not less than the size of the list. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although\n     * this method is not deprecated, the preferred method to use is\n     * \u003ccode\u003eget(int)\u003c/code\u003e, which implements the \u003ccode\u003eList\u003c/code\u003e\n     * interface defined in the 1.2 Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            an index into this list\n     * @return the component at the specified index\n     * @see #get(int)\n     * @see Vector#elementAt(int)\n     */\n    public AbstractNote elementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Returns the first component of this list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the first component of this list\n     * @see java.util.Vector#firstElement()\n     */\n    public AbstractNote firstElement() {\n        return delegate.firstElement();\n    }\n\n    /**\n     * Returns the last component of the list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the last component of the list\n     * @see Vector#lastElement()\n     */\n    public AbstractNote lastElement() {\n        return delegate.lastElement();\n    }\n\n    /**\n     * Return the number of components in the list.\n     *\n     * @return the number of components in the list\n     * @see NoteListModel#getSize()\n     */\n    public int getSize() {\n        return delegate.size();\n    }\n\n    /**\n     * Sets the component at the specified \u003ccode\u003eindex\u003c/code\u003e of this list to\n     * be the specified object. The previous component at that position is\n     * discarded.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eset(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            what the component is to be set to\n     * @param index\n     *            the specified index\n     * @see #set(int,Object)\n     * @see Vector#setElementAt(Object,int)\n     */\n    public void setElementAt(AbstractNote obj, int index) {\n        delegate.setElementAt(obj, index);\n        fireContentChanged(this, index);\n    }\n\n    /**\n     * Deletes the component at the specified index.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eremove(int)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            the index of the object to remove\n     * @see #remove(int)\n     * @see Vector#removeElementAt(int)\n     */\n    public void removeElementAt(int index) {\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n    }\n\n    /**\n     * Inserts the specified object as a component in this list at the specified\n     * \u003ccode\u003eindex\u003c/code\u003e.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eadd(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            the component to insert\n     * @param index\n     *            where to insert the new component\n     * @exception ArrayIndexOutOfBoundsException\n     *                if the index was invalid\n     * @see #add(int,Object)\n     * @see Vector#insertElementAt(Object,int)\n     */\n    public void insertElementAt(AbstractNote obj, int index) {\n        delegate.insertElementAt(obj, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Adds the specified component to the end of this list.\n     *\n     * @param obj\n     *            the component to be added\n     * @see Vector#addElement(Object)\n     */\n    public void addElement(AbstractNote obj) {\n        int index \u003d delegate.size();\n        delegate.addElement(obj);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the first (lowest-indexed) occurrence of the argument from this\n     * list.\n     *\n     * @param obj\n     *            the component to be removed\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the argument was a component of this list;\n     *         \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#removeElement(Object)\n     */\n    public boolean removeElement(AbstractNote obj) {\n        int index \u003d indexOf(obj);\n        boolean an \u003d delegate.removeElement(obj);\n        if (index \u003e\u003d 0) {\n            fireItemRemoved(this, index);\n        }\n        return an;\n    }\n\n    /**\n     * Returns a string that displays and identifies this object\u0027s properties.\n     *\n     * @return a String representation of this object\n     */\n    @Override\n    public String toString() {\n        return delegate.toString();\n    }\n\n    /*\n     * The remaining methods are included for compatibility with the Java 2\n     * platform Vector class.\n     */\n    /**\n     * Returns an array containing all of the elements in this list in the\n     * correct order.\n     *\n     * @return an array containing the elements of the list\n     * @see Vector#toArray()\n     */\n    public AbstractNote[] toArray() {\n        AbstractNote[] an \u003d new AbstractNote[delegate.size()];\n        delegate.copyInto(an);\n        return an;\n    }\n\n    /**\n     * Returns the element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to return\n     */\n    public AbstractNote get(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Replaces the element at the specified position in this list with the\n     * specified element.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to replace\n     * @param element\n     *            element to be stored at the specified position\n     * @return the element previously at the specified position\n     */\n    public AbstractNote set(int index, AbstractNote element) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.setElementAt(element, index);\n        fireContentChanged(this, index);\n        return an;\n    }\n\n    /**\n     * Inserts the specified element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index at which the specified element is to be inserted\n     * @param element\n     *            element to be inserted\n     */\n    public void add(int index, AbstractNote element) {\n        delegate.insertElementAt(element, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the element at the specified position in this list. Returns the\n     * element that was removed from the list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            the index of the element to removed\n     */\n    public AbstractNote remove(int index) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n        return an;\n    }\n\n    /**\n     * Returns the value at position \u003ccode\u003eindex\u003c/code\u003e\n     *\n     * @return the value at position \u003ccode\u003eindex\u003c/code\u003e\n     * @see NoteListModel#getElementAt(int)\n     */\n    public AbstractNote getElementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void addNoteListDataListener(NoteListDataListener l) {\n        this.dataListener \u003d l;\n    }\n\n    /**\n     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void removeNoteListDataListener() {\n        this.dataListener \u003d null;\n    }\n\n    /**\n     * Fired when one element\u0027s value is changed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireContentChanged(Object source, int index) {\n        dataListener.contentChanged(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one new element is added.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index added element\u0027s index\n     */\n    protected void fireItemAdded(Object source, int index) {\n        dataListener.itemAdded(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one element is removed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireItemRemoved(Object source, int index) {\n        dataListener.itemRemoved(new NoteListDataEvent(source, index));\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_1Test.java",
    "test_prompt": "// DefaultNoteListModel_1Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#size()} method.\n*/\nclass DefaultNoteListModel_1Test {",
    "method_signature": "size()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\n/*\n * @(#)DefaultNoteListModel.java\n * Created on 2005-8-4\n * Inspirento, Copyright AllenStudio, All Rights Reserved\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n *\n */\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    private Vector\u003cAbstractNote\u003e delegate \u003d new Vector\u003cAbstractNote\u003e();\n\n    // Uni-listener temporary\n    private NoteListDataListener dataListener;\n\n    /**\n     * Returns the current capacity of this list.\n     *\n     * @return the current capacity\n     * @see Vector#capacity()\n     */\n    public int capacity() {\n        return delegate.capacity();\n    }\n\n    /**\n     * Returns the number of components in this list.\n     *\n     * @return the number of components in this list\n     * @see Vector#size()\n     */\n    public int size() {\n        return delegate.size();\n    }\n\n    /**\n     * Tests whether this list has any components.\n     *\n     * @return \u003ccode\u003etrue\u003c/code\u003e if and only if this list has no components,\n     *         that is, its size is zero; \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#isEmpty()\n     */\n    public boolean isEmpty() {\n        return delegate.isEmpty();\n    }\n\n    /**\n     * Returns an enumeration of the components of this list.\n     *\n     * @return an enumeration of the components of this list\n     * @see Vector#elements()\n     */\n    public Enumeration\u003cAbstractNote\u003e elements() {\n        return delegate.elements();\n    }\n\n    /**\n     * Tests whether the specified object is a component in this list.\n     *\n     * @param elem\n     *            an object\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the specified object is the same as a\n     *         component in this list\n     * @see Vector#contains(Object)\n     */\n    public boolean contains(AbstractNote elem) {\n        return delegate.contains(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            an object\n     * @return the index of the first occurrence of the argument in this list;\n     *         returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#indexOf(Object)\n     */\n    public int indexOf(AbstractNote elem) {\n        return delegate.indexOf(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e, beginning the\n     * search at \u003ccode\u003eindex\u003c/code\u003e.\n     *\n     * @param elem\n     *            an desired component\n     * @param index\n     *            the index from which to begin searching\n     * @return the index where the first occurrence of \u003ccode\u003eelem\u003c/code\u003e is\n     *         found after \u003ccode\u003eindex\u003c/code\u003e; returns \u003ccode\u003e-1\u003c/code\u003e if\n     *         the \u003ccode\u003eelem\u003c/code\u003e is not found in the list\n     * @see Vector#indexOf(Object,int)\n     */\n    public int indexOf(AbstractNote elem, int index) {\n        return delegate.indexOf(elem, index);\n    }\n\n    /**\n     * Returns the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            the desired component\n     * @return the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e in the\n     *         list; returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object)\n     */\n    public int lastIndexOf(AbstractNote elem) {\n        return delegate.lastIndexOf(elem);\n    }\n\n    /**\n     * Searches backwards for \u003ccode\u003eelem\u003c/code\u003e, starting from the specified\n     * index, and returns an index to it.\n     *\n     * @param elem\n     *            the desired component\n     * @param index\n     *            the index to start searching from\n     * @return the index of the last occurrence of the \u003ccode\u003eelem\u003c/code\u003e in\n     *         this list at position less than \u003ccode\u003eindex\u003c/code\u003e; returns\n     *         \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object,int)\n     */\n    public int lastIndexOf(AbstractNote elem, int index) {\n        return delegate.lastIndexOf(elem, index);\n    }\n\n    /**\n     * Returns the component at the specified index. Throws an\n     * \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is negative or\n     * not less than the size of the list. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although\n     * this method is not deprecated, the preferred method to use is\n     * \u003ccode\u003eget(int)\u003c/code\u003e, which implements the \u003ccode\u003eList\u003c/code\u003e\n     * interface defined in the 1.2 Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            an index into this list\n     * @return the component at the specified index\n     * @see #get(int)\n     * @see Vector#elementAt(int)\n     */\n    public AbstractNote elementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Returns the first component of this list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the first component of this list\n     * @see java.util.Vector#firstElement()\n     */\n    public AbstractNote firstElement() {\n        return delegate.firstElement();\n    }\n\n    /**\n     * Returns the last component of the list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the last component of the list\n     * @see Vector#lastElement()\n     */\n    public AbstractNote lastElement() {\n        return delegate.lastElement();\n    }\n\n    /**\n     * Return the number of components in the list.\n     *\n     * @return the number of components in the list\n     * @see NoteListModel#getSize()\n     */\n    public int getSize() {\n        return delegate.size();\n    }\n\n    /**\n     * Sets the component at the specified \u003ccode\u003eindex\u003c/code\u003e of this list to\n     * be the specified object. The previous component at that position is\n     * discarded.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eset(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            what the component is to be set to\n     * @param index\n     *            the specified index\n     * @see #set(int,Object)\n     * @see Vector#setElementAt(Object,int)\n     */\n    public void setElementAt(AbstractNote obj, int index) {\n        delegate.setElementAt(obj, index);\n        fireContentChanged(this, index);\n    }\n\n    /**\n     * Deletes the component at the specified index.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eremove(int)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            the index of the object to remove\n     * @see #remove(int)\n     * @see Vector#removeElementAt(int)\n     */\n    public void removeElementAt(int index) {\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n    }\n\n    /**\n     * Inserts the specified object as a component in this list at the specified\n     * \u003ccode\u003eindex\u003c/code\u003e.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eadd(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            the component to insert\n     * @param index\n     *            where to insert the new component\n     * @exception ArrayIndexOutOfBoundsException\n     *                if the index was invalid\n     * @see #add(int,Object)\n     * @see Vector#insertElementAt(Object,int)\n     */\n    public void insertElementAt(AbstractNote obj, int index) {\n        delegate.insertElementAt(obj, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Adds the specified component to the end of this list.\n     *\n     * @param obj\n     *            the component to be added\n     * @see Vector#addElement(Object)\n     */\n    public void addElement(AbstractNote obj) {\n        int index \u003d delegate.size();\n        delegate.addElement(obj);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the first (lowest-indexed) occurrence of the argument from this\n     * list.\n     *\n     * @param obj\n     *            the component to be removed\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the argument was a component of this list;\n     *         \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#removeElement(Object)\n     */\n    public boolean removeElement(AbstractNote obj) {\n        int index \u003d indexOf(obj);\n        boolean an \u003d delegate.removeElement(obj);\n        if (index \u003e\u003d 0) {\n            fireItemRemoved(this, index);\n        }\n        return an;\n    }\n\n    /**\n     * Returns a string that displays and identifies this object\u0027s properties.\n     *\n     * @return a String representation of this object\n     */\n    @Override\n    public String toString() {\n        return delegate.toString();\n    }\n\n    /*\n     * The remaining methods are included for compatibility with the Java 2\n     * platform Vector class.\n     */\n    /**\n     * Returns an array containing all of the elements in this list in the\n     * correct order.\n     *\n     * @return an array containing the elements of the list\n     * @see Vector#toArray()\n     */\n    public AbstractNote[] toArray() {\n        AbstractNote[] an \u003d new AbstractNote[delegate.size()];\n        delegate.copyInto(an);\n        return an;\n    }\n\n    /**\n     * Returns the element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to return\n     */\n    public AbstractNote get(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Replaces the element at the specified position in this list with the\n     * specified element.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to replace\n     * @param element\n     *            element to be stored at the specified position\n     * @return the element previously at the specified position\n     */\n    public AbstractNote set(int index, AbstractNote element) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.setElementAt(element, index);\n        fireContentChanged(this, index);\n        return an;\n    }\n\n    /**\n     * Inserts the specified element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index at which the specified element is to be inserted\n     * @param element\n     *            element to be inserted\n     */\n    public void add(int index, AbstractNote element) {\n        delegate.insertElementAt(element, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the element at the specified position in this list. Returns the\n     * element that was removed from the list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            the index of the element to removed\n     */\n    public AbstractNote remove(int index) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n        return an;\n    }\n\n    /**\n     * Returns the value at position \u003ccode\u003eindex\u003c/code\u003e\n     *\n     * @return the value at position \u003ccode\u003eindex\u003c/code\u003e\n     * @see NoteListModel#getElementAt(int)\n     */\n    public AbstractNote getElementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void addNoteListDataListener(NoteListDataListener l) {\n        this.dataListener \u003d l;\n    }\n\n    /**\n     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void removeNoteListDataListener() {\n        this.dataListener \u003d null;\n    }\n\n    /**\n     * Fired when one element\u0027s value is changed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireContentChanged(Object source, int index) {\n        dataListener.contentChanged(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one new element is added.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index added element\u0027s index\n     */\n    protected void fireItemAdded(Object source, int index) {\n        dataListener.itemAdded(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one element is removed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireItemRemoved(Object source, int index) {\n        dataListener.itemRemoved(new NoteListDataEvent(source, index));\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_2Test.java",
    "test_prompt": "// DefaultNoteListModel_2Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#elements()} method.\n*/\nclass DefaultNoteListModel_2Test {",
    "method_signature": "elements()",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\n/*\n * @(#)DefaultNoteListModel.java\n * Created on 2005-8-4\n * Inspirento, Copyright AllenStudio, All Rights Reserved\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n *\n */\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    private Vector\u003cAbstractNote\u003e delegate \u003d new Vector\u003cAbstractNote\u003e();\n\n    // Uni-listener temporary\n    private NoteListDataListener dataListener;\n\n    /**\n     * Returns the current capacity of this list.\n     *\n     * @return the current capacity\n     * @see Vector#capacity()\n     */\n    public int capacity() {\n        return delegate.capacity();\n    }\n\n    /**\n     * Returns the number of components in this list.\n     *\n     * @return the number of components in this list\n     * @see Vector#size()\n     */\n    public int size() {\n        return delegate.size();\n    }\n\n    /**\n     * Tests whether this list has any components.\n     *\n     * @return \u003ccode\u003etrue\u003c/code\u003e if and only if this list has no components,\n     *         that is, its size is zero; \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#isEmpty()\n     */\n    public boolean isEmpty() {\n        return delegate.isEmpty();\n    }\n\n    /**\n     * Returns an enumeration of the components of this list.\n     *\n     * @return an enumeration of the components of this list\n     * @see Vector#elements()\n     */\n    public Enumeration\u003cAbstractNote\u003e elements() {\n        return delegate.elements();\n    }\n\n    /**\n     * Tests whether the specified object is a component in this list.\n     *\n     * @param elem\n     *            an object\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the specified object is the same as a\n     *         component in this list\n     * @see Vector#contains(Object)\n     */\n    public boolean contains(AbstractNote elem) {\n        return delegate.contains(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            an object\n     * @return the index of the first occurrence of the argument in this list;\n     *         returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#indexOf(Object)\n     */\n    public int indexOf(AbstractNote elem) {\n        return delegate.indexOf(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e, beginning the\n     * search at \u003ccode\u003eindex\u003c/code\u003e.\n     *\n     * @param elem\n     *            an desired component\n     * @param index\n     *            the index from which to begin searching\n     * @return the index where the first occurrence of \u003ccode\u003eelem\u003c/code\u003e is\n     *         found after \u003ccode\u003eindex\u003c/code\u003e; returns \u003ccode\u003e-1\u003c/code\u003e if\n     *         the \u003ccode\u003eelem\u003c/code\u003e is not found in the list\n     * @see Vector#indexOf(Object,int)\n     */\n    public int indexOf(AbstractNote elem, int index) {\n        return delegate.indexOf(elem, index);\n    }\n\n    /**\n     * Returns the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            the desired component\n     * @return the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e in the\n     *         list; returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object)\n     */\n    public int lastIndexOf(AbstractNote elem) {\n        return delegate.lastIndexOf(elem);\n    }\n\n    /**\n     * Searches backwards for \u003ccode\u003eelem\u003c/code\u003e, starting from the specified\n     * index, and returns an index to it.\n     *\n     * @param elem\n     *            the desired component\n     * @param index\n     *            the index to start searching from\n     * @return the index of the last occurrence of the \u003ccode\u003eelem\u003c/code\u003e in\n     *         this list at position less than \u003ccode\u003eindex\u003c/code\u003e; returns\n     *         \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object,int)\n     */\n    public int lastIndexOf(AbstractNote elem, int index) {\n        return delegate.lastIndexOf(elem, index);\n    }\n\n    /**\n     * Returns the component at the specified index. Throws an\n     * \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is negative or\n     * not less than the size of the list. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although\n     * this method is not deprecated, the preferred method to use is\n     * \u003ccode\u003eget(int)\u003c/code\u003e, which implements the \u003ccode\u003eList\u003c/code\u003e\n     * interface defined in the 1.2 Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            an index into this list\n     * @return the component at the specified index\n     * @see #get(int)\n     * @see Vector#elementAt(int)\n     */\n    public AbstractNote elementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Returns the first component of this list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the first component of this list\n     * @see java.util.Vector#firstElement()\n     */\n    public AbstractNote firstElement() {\n        return delegate.firstElement();\n    }\n\n    /**\n     * Returns the last component of the list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the last component of the list\n     * @see Vector#lastElement()\n     */\n    public AbstractNote lastElement() {\n        return delegate.lastElement();\n    }\n\n    /**\n     * Return the number of components in the list.\n     *\n     * @return the number of components in the list\n     * @see NoteListModel#getSize()\n     */\n    public int getSize() {\n        return delegate.size();\n    }\n\n    /**\n     * Sets the component at the specified \u003ccode\u003eindex\u003c/code\u003e of this list to\n     * be the specified object. The previous component at that position is\n     * discarded.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eset(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            what the component is to be set to\n     * @param index\n     *            the specified index\n     * @see #set(int,Object)\n     * @see Vector#setElementAt(Object,int)\n     */\n    public void setElementAt(AbstractNote obj, int index) {\n        delegate.setElementAt(obj, index);\n        fireContentChanged(this, index);\n    }\n\n    /**\n     * Deletes the component at the specified index.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eremove(int)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            the index of the object to remove\n     * @see #remove(int)\n     * @see Vector#removeElementAt(int)\n     */\n    public void removeElementAt(int index) {\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n    }\n\n    /**\n     * Inserts the specified object as a component in this list at the specified\n     * \u003ccode\u003eindex\u003c/code\u003e.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eadd(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            the component to insert\n     * @param index\n     *            where to insert the new component\n     * @exception ArrayIndexOutOfBoundsException\n     *                if the index was invalid\n     * @see #add(int,Object)\n     * @see Vector#insertElementAt(Object,int)\n     */\n    public void insertElementAt(AbstractNote obj, int index) {\n        delegate.insertElementAt(obj, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Adds the specified component to the end of this list.\n     *\n     * @param obj\n     *            the component to be added\n     * @see Vector#addElement(Object)\n     */\n    public void addElement(AbstractNote obj) {\n        int index \u003d delegate.size();\n        delegate.addElement(obj);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the first (lowest-indexed) occurrence of the argument from this\n     * list.\n     *\n     * @param obj\n     *            the component to be removed\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the argument was a component of this list;\n     *         \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#removeElement(Object)\n     */\n    public boolean removeElement(AbstractNote obj) {\n        int index \u003d indexOf(obj);\n        boolean an \u003d delegate.removeElement(obj);\n        if (index \u003e\u003d 0) {\n            fireItemRemoved(this, index);\n        }\n        return an;\n    }\n\n    /**\n     * Returns a string that displays and identifies this object\u0027s properties.\n     *\n     * @return a String representation of this object\n     */\n    @Override\n    public String toString() {\n        return delegate.toString();\n    }\n\n    /*\n     * The remaining methods are included for compatibility with the Java 2\n     * platform Vector class.\n     */\n    /**\n     * Returns an array containing all of the elements in this list in the\n     * correct order.\n     *\n     * @return an array containing the elements of the list\n     * @see Vector#toArray()\n     */\n    public AbstractNote[] toArray() {\n        AbstractNote[] an \u003d new AbstractNote[delegate.size()];\n        delegate.copyInto(an);\n        return an;\n    }\n\n    /**\n     * Returns the element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to return\n     */\n    public AbstractNote get(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Replaces the element at the specified position in this list with the\n     * specified element.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to replace\n     * @param element\n     *            element to be stored at the specified position\n     * @return the element previously at the specified position\n     */\n    public AbstractNote set(int index, AbstractNote element) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.setElementAt(element, index);\n        fireContentChanged(this, index);\n        return an;\n    }\n\n    /**\n     * Inserts the specified element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index at which the specified element is to be inserted\n     * @param element\n     *            element to be inserted\n     */\n    public void add(int index, AbstractNote element) {\n        delegate.insertElementAt(element, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the element at the specified position in this list. Returns the\n     * element that was removed from the list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            the index of the element to removed\n     */\n    public AbstractNote remove(int index) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n        return an;\n    }\n\n    /**\n     * Returns the value at position \u003ccode\u003eindex\u003c/code\u003e\n     *\n     * @return the value at position \u003ccode\u003eindex\u003c/code\u003e\n     * @see NoteListModel#getElementAt(int)\n     */\n    public AbstractNote getElementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void addNoteListDataListener(NoteListDataListener l) {\n        this.dataListener \u003d l;\n    }\n\n    /**\n     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void removeNoteListDataListener() {\n        this.dataListener \u003d null;\n    }\n\n    /**\n     * Fired when one element\u0027s value is changed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireContentChanged(Object source, int index) {\n        dataListener.contentChanged(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one new element is added.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index added element\u0027s index\n     */\n    protected void fireItemAdded(Object source, int index) {\n        dataListener.itemAdded(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one element is removed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireItemRemoved(Object source, int index) {\n        dataListener.itemRemoved(new NoteListDataEvent(source, index));\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_3Test.java",
    "test_prompt": "// DefaultNoteListModel_3Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#contains(AbstractNote)} method.\n*/\nclass DefaultNoteListModel_3Test {",
    "method_signature": "contains(AbstractNote)",
    "suffix": "3"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\n/*\n * @(#)DefaultNoteListModel.java\n * Created on 2005-8-4\n * Inspirento, Copyright AllenStudio, All Rights Reserved\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n *\n */\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    private Vector\u003cAbstractNote\u003e delegate \u003d new Vector\u003cAbstractNote\u003e();\n\n    // Uni-listener temporary\n    private NoteListDataListener dataListener;\n\n    /**\n     * Returns the current capacity of this list.\n     *\n     * @return the current capacity\n     * @see Vector#capacity()\n     */\n    public int capacity() {\n        return delegate.capacity();\n    }\n\n    /**\n     * Returns the number of components in this list.\n     *\n     * @return the number of components in this list\n     * @see Vector#size()\n     */\n    public int size() {\n        return delegate.size();\n    }\n\n    /**\n     * Tests whether this list has any components.\n     *\n     * @return \u003ccode\u003etrue\u003c/code\u003e if and only if this list has no components,\n     *         that is, its size is zero; \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#isEmpty()\n     */\n    public boolean isEmpty() {\n        return delegate.isEmpty();\n    }\n\n    /**\n     * Returns an enumeration of the components of this list.\n     *\n     * @return an enumeration of the components of this list\n     * @see Vector#elements()\n     */\n    public Enumeration\u003cAbstractNote\u003e elements() {\n        return delegate.elements();\n    }\n\n    /**\n     * Tests whether the specified object is a component in this list.\n     *\n     * @param elem\n     *            an object\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the specified object is the same as a\n     *         component in this list\n     * @see Vector#contains(Object)\n     */\n    public boolean contains(AbstractNote elem) {\n        return delegate.contains(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            an object\n     * @return the index of the first occurrence of the argument in this list;\n     *         returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#indexOf(Object)\n     */\n    public int indexOf(AbstractNote elem) {\n        return delegate.indexOf(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e, beginning the\n     * search at \u003ccode\u003eindex\u003c/code\u003e.\n     *\n     * @param elem\n     *            an desired component\n     * @param index\n     *            the index from which to begin searching\n     * @return the index where the first occurrence of \u003ccode\u003eelem\u003c/code\u003e is\n     *         found after \u003ccode\u003eindex\u003c/code\u003e; returns \u003ccode\u003e-1\u003c/code\u003e if\n     *         the \u003ccode\u003eelem\u003c/code\u003e is not found in the list\n     * @see Vector#indexOf(Object,int)\n     */\n    public int indexOf(AbstractNote elem, int index) {\n        return delegate.indexOf(elem, index);\n    }\n\n    /**\n     * Returns the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            the desired component\n     * @return the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e in the\n     *         list; returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object)\n     */\n    public int lastIndexOf(AbstractNote elem) {\n        return delegate.lastIndexOf(elem);\n    }\n\n    /**\n     * Searches backwards for \u003ccode\u003eelem\u003c/code\u003e, starting from the specified\n     * index, and returns an index to it.\n     *\n     * @param elem\n     *            the desired component\n     * @param index\n     *            the index to start searching from\n     * @return the index of the last occurrence of the \u003ccode\u003eelem\u003c/code\u003e in\n     *         this list at position less than \u003ccode\u003eindex\u003c/code\u003e; returns\n     *         \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object,int)\n     */\n    public int lastIndexOf(AbstractNote elem, int index) {\n        return delegate.lastIndexOf(elem, index);\n    }\n\n    /**\n     * Returns the component at the specified index. Throws an\n     * \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is negative or\n     * not less than the size of the list. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although\n     * this method is not deprecated, the preferred method to use is\n     * \u003ccode\u003eget(int)\u003c/code\u003e, which implements the \u003ccode\u003eList\u003c/code\u003e\n     * interface defined in the 1.2 Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            an index into this list\n     * @return the component at the specified index\n     * @see #get(int)\n     * @see Vector#elementAt(int)\n     */\n    public AbstractNote elementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Returns the first component of this list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the first component of this list\n     * @see java.util.Vector#firstElement()\n     */\n    public AbstractNote firstElement() {\n        return delegate.firstElement();\n    }\n\n    /**\n     * Returns the last component of the list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the last component of the list\n     * @see Vector#lastElement()\n     */\n    public AbstractNote lastElement() {\n        return delegate.lastElement();\n    }\n\n    /**\n     * Return the number of components in the list.\n     *\n     * @return the number of components in the list\n     * @see NoteListModel#getSize()\n     */\n    public int getSize() {\n        return delegate.size();\n    }\n\n    /**\n     * Sets the component at the specified \u003ccode\u003eindex\u003c/code\u003e of this list to\n     * be the specified object. The previous component at that position is\n     * discarded.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eset(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            what the component is to be set to\n     * @param index\n     *            the specified index\n     * @see #set(int,Object)\n     * @see Vector#setElementAt(Object,int)\n     */\n    public void setElementAt(AbstractNote obj, int index) {\n        delegate.setElementAt(obj, index);\n        fireContentChanged(this, index);\n    }\n\n    /**\n     * Deletes the component at the specified index.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eremove(int)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            the index of the object to remove\n     * @see #remove(int)\n     * @see Vector#removeElementAt(int)\n     */\n    public void removeElementAt(int index) {\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n    }\n\n    /**\n     * Inserts the specified object as a component in this list at the specified\n     * \u003ccode\u003eindex\u003c/code\u003e.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eadd(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            the component to insert\n     * @param index\n     *            where to insert the new component\n     * @exception ArrayIndexOutOfBoundsException\n     *                if the index was invalid\n     * @see #add(int,Object)\n     * @see Vector#insertElementAt(Object,int)\n     */\n    public void insertElementAt(AbstractNote obj, int index) {\n        delegate.insertElementAt(obj, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Adds the specified component to the end of this list.\n     *\n     * @param obj\n     *            the component to be added\n     * @see Vector#addElement(Object)\n     */\n    public void addElement(AbstractNote obj) {\n        int index \u003d delegate.size();\n        delegate.addElement(obj);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the first (lowest-indexed) occurrence of the argument from this\n     * list.\n     *\n     * @param obj\n     *            the component to be removed\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the argument was a component of this list;\n     *         \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#removeElement(Object)\n     */\n    public boolean removeElement(AbstractNote obj) {\n        int index \u003d indexOf(obj);\n        boolean an \u003d delegate.removeElement(obj);\n        if (index \u003e\u003d 0) {\n            fireItemRemoved(this, index);\n        }\n        return an;\n    }\n\n    /**\n     * Returns a string that displays and identifies this object\u0027s properties.\n     *\n     * @return a String representation of this object\n     */\n    @Override\n    public String toString() {\n        return delegate.toString();\n    }\n\n    /*\n     * The remaining methods are included for compatibility with the Java 2\n     * platform Vector class.\n     */\n    /**\n     * Returns an array containing all of the elements in this list in the\n     * correct order.\n     *\n     * @return an array containing the elements of the list\n     * @see Vector#toArray()\n     */\n    public AbstractNote[] toArray() {\n        AbstractNote[] an \u003d new AbstractNote[delegate.size()];\n        delegate.copyInto(an);\n        return an;\n    }\n\n    /**\n     * Returns the element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to return\n     */\n    public AbstractNote get(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Replaces the element at the specified position in this list with the\n     * specified element.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to replace\n     * @param element\n     *            element to be stored at the specified position\n     * @return the element previously at the specified position\n     */\n    public AbstractNote set(int index, AbstractNote element) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.setElementAt(element, index);\n        fireContentChanged(this, index);\n        return an;\n    }\n\n    /**\n     * Inserts the specified element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index at which the specified element is to be inserted\n     * @param element\n     *            element to be inserted\n     */\n    public void add(int index, AbstractNote element) {\n        delegate.insertElementAt(element, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the element at the specified position in this list. Returns the\n     * element that was removed from the list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            the index of the element to removed\n     */\n    public AbstractNote remove(int index) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n        return an;\n    }\n\n    /**\n     * Returns the value at position \u003ccode\u003eindex\u003c/code\u003e\n     *\n     * @return the value at position \u003ccode\u003eindex\u003c/code\u003e\n     * @see NoteListModel#getElementAt(int)\n     */\n    public AbstractNote getElementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void addNoteListDataListener(NoteListDataListener l) {\n        this.dataListener \u003d l;\n    }\n\n    /**\n     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void removeNoteListDataListener() {\n        this.dataListener \u003d null;\n    }\n\n    /**\n     * Fired when one element\u0027s value is changed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireContentChanged(Object source, int index) {\n        dataListener.contentChanged(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one new element is added.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index added element\u0027s index\n     */\n    protected void fireItemAdded(Object source, int index) {\n        dataListener.itemAdded(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one element is removed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireItemRemoved(Object source, int index) {\n        dataListener.itemRemoved(new NoteListDataEvent(source, index));\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_4Test.java",
    "test_prompt": "// DefaultNoteListModel_4Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#indexOf(AbstractNote)} method.\n*/\nclass DefaultNoteListModel_4Test {",
    "method_signature": "indexOf(AbstractNote)",
    "suffix": "4"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\n/*\n * @(#)DefaultNoteListModel.java\n * Created on 2005-8-4\n * Inspirento, Copyright AllenStudio, All Rights Reserved\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n *\n */\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    private Vector\u003cAbstractNote\u003e delegate \u003d new Vector\u003cAbstractNote\u003e();\n\n    // Uni-listener temporary\n    private NoteListDataListener dataListener;\n\n    /**\n     * Returns the current capacity of this list.\n     *\n     * @return the current capacity\n     * @see Vector#capacity()\n     */\n    public int capacity() {\n        return delegate.capacity();\n    }\n\n    /**\n     * Returns the number of components in this list.\n     *\n     * @return the number of components in this list\n     * @see Vector#size()\n     */\n    public int size() {\n        return delegate.size();\n    }\n\n    /**\n     * Tests whether this list has any components.\n     *\n     * @return \u003ccode\u003etrue\u003c/code\u003e if and only if this list has no components,\n     *         that is, its size is zero; \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#isEmpty()\n     */\n    public boolean isEmpty() {\n        return delegate.isEmpty();\n    }\n\n    /**\n     * Returns an enumeration of the components of this list.\n     *\n     * @return an enumeration of the components of this list\n     * @see Vector#elements()\n     */\n    public Enumeration\u003cAbstractNote\u003e elements() {\n        return delegate.elements();\n    }\n\n    /**\n     * Tests whether the specified object is a component in this list.\n     *\n     * @param elem\n     *            an object\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the specified object is the same as a\n     *         component in this list\n     * @see Vector#contains(Object)\n     */\n    public boolean contains(AbstractNote elem) {\n        return delegate.contains(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            an object\n     * @return the index of the first occurrence of the argument in this list;\n     *         returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#indexOf(Object)\n     */\n    public int indexOf(AbstractNote elem) {\n        return delegate.indexOf(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e, beginning the\n     * search at \u003ccode\u003eindex\u003c/code\u003e.\n     *\n     * @param elem\n     *            an desired component\n     * @param index\n     *            the index from which to begin searching\n     * @return the index where the first occurrence of \u003ccode\u003eelem\u003c/code\u003e is\n     *         found after \u003ccode\u003eindex\u003c/code\u003e; returns \u003ccode\u003e-1\u003c/code\u003e if\n     *         the \u003ccode\u003eelem\u003c/code\u003e is not found in the list\n     * @see Vector#indexOf(Object,int)\n     */\n    public int indexOf(AbstractNote elem, int index) {\n        return delegate.indexOf(elem, index);\n    }\n\n    /**\n     * Returns the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            the desired component\n     * @return the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e in the\n     *         list; returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object)\n     */\n    public int lastIndexOf(AbstractNote elem) {\n        return delegate.lastIndexOf(elem);\n    }\n\n    /**\n     * Searches backwards for \u003ccode\u003eelem\u003c/code\u003e, starting from the specified\n     * index, and returns an index to it.\n     *\n     * @param elem\n     *            the desired component\n     * @param index\n     *            the index to start searching from\n     * @return the index of the last occurrence of the \u003ccode\u003eelem\u003c/code\u003e in\n     *         this list at position less than \u003ccode\u003eindex\u003c/code\u003e; returns\n     *         \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object,int)\n     */\n    public int lastIndexOf(AbstractNote elem, int index) {\n        return delegate.lastIndexOf(elem, index);\n    }\n\n    /**\n     * Returns the component at the specified index. Throws an\n     * \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is negative or\n     * not less than the size of the list. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although\n     * this method is not deprecated, the preferred method to use is\n     * \u003ccode\u003eget(int)\u003c/code\u003e, which implements the \u003ccode\u003eList\u003c/code\u003e\n     * interface defined in the 1.2 Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            an index into this list\n     * @return the component at the specified index\n     * @see #get(int)\n     * @see Vector#elementAt(int)\n     */\n    public AbstractNote elementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Returns the first component of this list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the first component of this list\n     * @see java.util.Vector#firstElement()\n     */\n    public AbstractNote firstElement() {\n        return delegate.firstElement();\n    }\n\n    /**\n     * Returns the last component of the list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the last component of the list\n     * @see Vector#lastElement()\n     */\n    public AbstractNote lastElement() {\n        return delegate.lastElement();\n    }\n\n    /**\n     * Return the number of components in the list.\n     *\n     * @return the number of components in the list\n     * @see NoteListModel#getSize()\n     */\n    public int getSize() {\n        return delegate.size();\n    }\n\n    /**\n     * Sets the component at the specified \u003ccode\u003eindex\u003c/code\u003e of this list to\n     * be the specified object. The previous component at that position is\n     * discarded.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eset(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            what the component is to be set to\n     * @param index\n     *            the specified index\n     * @see #set(int,Object)\n     * @see Vector#setElementAt(Object,int)\n     */\n    public void setElementAt(AbstractNote obj, int index) {\n        delegate.setElementAt(obj, index);\n        fireContentChanged(this, index);\n    }\n\n    /**\n     * Deletes the component at the specified index.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eremove(int)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            the index of the object to remove\n     * @see #remove(int)\n     * @see Vector#removeElementAt(int)\n     */\n    public void removeElementAt(int index) {\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n    }\n\n    /**\n     * Inserts the specified object as a component in this list at the specified\n     * \u003ccode\u003eindex\u003c/code\u003e.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eadd(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            the component to insert\n     * @param index\n     *            where to insert the new component\n     * @exception ArrayIndexOutOfBoundsException\n     *                if the index was invalid\n     * @see #add(int,Object)\n     * @see Vector#insertElementAt(Object,int)\n     */\n    public void insertElementAt(AbstractNote obj, int index) {\n        delegate.insertElementAt(obj, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Adds the specified component to the end of this list.\n     *\n     * @param obj\n     *            the component to be added\n     * @see Vector#addElement(Object)\n     */\n    public void addElement(AbstractNote obj) {\n        int index \u003d delegate.size();\n        delegate.addElement(obj);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the first (lowest-indexed) occurrence of the argument from this\n     * list.\n     *\n     * @param obj\n     *            the component to be removed\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the argument was a component of this list;\n     *         \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#removeElement(Object)\n     */\n    public boolean removeElement(AbstractNote obj) {\n        int index \u003d indexOf(obj);\n        boolean an \u003d delegate.removeElement(obj);\n        if (index \u003e\u003d 0) {\n            fireItemRemoved(this, index);\n        }\n        return an;\n    }\n\n    /**\n     * Returns a string that displays and identifies this object\u0027s properties.\n     *\n     * @return a String representation of this object\n     */\n    @Override\n    public String toString() {\n        return delegate.toString();\n    }\n\n    /*\n     * The remaining methods are included for compatibility with the Java 2\n     * platform Vector class.\n     */\n    /**\n     * Returns an array containing all of the elements in this list in the\n     * correct order.\n     *\n     * @return an array containing the elements of the list\n     * @see Vector#toArray()\n     */\n    public AbstractNote[] toArray() {\n        AbstractNote[] an \u003d new AbstractNote[delegate.size()];\n        delegate.copyInto(an);\n        return an;\n    }\n\n    /**\n     * Returns the element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to return\n     */\n    public AbstractNote get(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Replaces the element at the specified position in this list with the\n     * specified element.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to replace\n     * @param element\n     *            element to be stored at the specified position\n     * @return the element previously at the specified position\n     */\n    public AbstractNote set(int index, AbstractNote element) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.setElementAt(element, index);\n        fireContentChanged(this, index);\n        return an;\n    }\n\n    /**\n     * Inserts the specified element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index at which the specified element is to be inserted\n     * @param element\n     *            element to be inserted\n     */\n    public void add(int index, AbstractNote element) {\n        delegate.insertElementAt(element, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the element at the specified position in this list. Returns the\n     * element that was removed from the list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            the index of the element to removed\n     */\n    public AbstractNote remove(int index) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n        return an;\n    }\n\n    /**\n     * Returns the value at position \u003ccode\u003eindex\u003c/code\u003e\n     *\n     * @return the value at position \u003ccode\u003eindex\u003c/code\u003e\n     * @see NoteListModel#getElementAt(int)\n     */\n    public AbstractNote getElementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void addNoteListDataListener(NoteListDataListener l) {\n        this.dataListener \u003d l;\n    }\n\n    /**\n     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void removeNoteListDataListener() {\n        this.dataListener \u003d null;\n    }\n\n    /**\n     * Fired when one element\u0027s value is changed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireContentChanged(Object source, int index) {\n        dataListener.contentChanged(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one new element is added.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index added element\u0027s index\n     */\n    protected void fireItemAdded(Object source, int index) {\n        dataListener.itemAdded(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one element is removed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireItemRemoved(Object source, int index) {\n        dataListener.itemRemoved(new NoteListDataEvent(source, index));\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_5Test.java",
    "test_prompt": "// DefaultNoteListModel_5Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#indexOf(AbstractNote, int)} method.\n*/\nclass DefaultNoteListModel_5Test {",
    "method_signature": "indexOf(AbstractNote, int)",
    "suffix": "5"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\n/*\n * @(#)DefaultNoteListModel.java\n * Created on 2005-8-4\n * Inspirento, Copyright AllenStudio, All Rights Reserved\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n *\n */\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    private Vector\u003cAbstractNote\u003e delegate \u003d new Vector\u003cAbstractNote\u003e();\n\n    // Uni-listener temporary\n    private NoteListDataListener dataListener;\n\n    /**\n     * Returns the current capacity of this list.\n     *\n     * @return the current capacity\n     * @see Vector#capacity()\n     */\n    public int capacity() {\n        return delegate.capacity();\n    }\n\n    /**\n     * Returns the number of components in this list.\n     *\n     * @return the number of components in this list\n     * @see Vector#size()\n     */\n    public int size() {\n        return delegate.size();\n    }\n\n    /**\n     * Tests whether this list has any components.\n     *\n     * @return \u003ccode\u003etrue\u003c/code\u003e if and only if this list has no components,\n     *         that is, its size is zero; \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#isEmpty()\n     */\n    public boolean isEmpty() {\n        return delegate.isEmpty();\n    }\n\n    /**\n     * Returns an enumeration of the components of this list.\n     *\n     * @return an enumeration of the components of this list\n     * @see Vector#elements()\n     */\n    public Enumeration\u003cAbstractNote\u003e elements() {\n        return delegate.elements();\n    }\n\n    /**\n     * Tests whether the specified object is a component in this list.\n     *\n     * @param elem\n     *            an object\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the specified object is the same as a\n     *         component in this list\n     * @see Vector#contains(Object)\n     */\n    public boolean contains(AbstractNote elem) {\n        return delegate.contains(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            an object\n     * @return the index of the first occurrence of the argument in this list;\n     *         returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#indexOf(Object)\n     */\n    public int indexOf(AbstractNote elem) {\n        return delegate.indexOf(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e, beginning the\n     * search at \u003ccode\u003eindex\u003c/code\u003e.\n     *\n     * @param elem\n     *            an desired component\n     * @param index\n     *            the index from which to begin searching\n     * @return the index where the first occurrence of \u003ccode\u003eelem\u003c/code\u003e is\n     *         found after \u003ccode\u003eindex\u003c/code\u003e; returns \u003ccode\u003e-1\u003c/code\u003e if\n     *         the \u003ccode\u003eelem\u003c/code\u003e is not found in the list\n     * @see Vector#indexOf(Object,int)\n     */\n    public int indexOf(AbstractNote elem, int index) {\n        return delegate.indexOf(elem, index);\n    }\n\n    /**\n     * Returns the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            the desired component\n     * @return the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e in the\n     *         list; returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object)\n     */\n    public int lastIndexOf(AbstractNote elem) {\n        return delegate.lastIndexOf(elem);\n    }\n\n    /**\n     * Searches backwards for \u003ccode\u003eelem\u003c/code\u003e, starting from the specified\n     * index, and returns an index to it.\n     *\n     * @param elem\n     *            the desired component\n     * @param index\n     *            the index to start searching from\n     * @return the index of the last occurrence of the \u003ccode\u003eelem\u003c/code\u003e in\n     *         this list at position less than \u003ccode\u003eindex\u003c/code\u003e; returns\n     *         \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object,int)\n     */\n    public int lastIndexOf(AbstractNote elem, int index) {\n        return delegate.lastIndexOf(elem, index);\n    }\n\n    /**\n     * Returns the component at the specified index. Throws an\n     * \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is negative or\n     * not less than the size of the list. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although\n     * this method is not deprecated, the preferred method to use is\n     * \u003ccode\u003eget(int)\u003c/code\u003e, which implements the \u003ccode\u003eList\u003c/code\u003e\n     * interface defined in the 1.2 Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            an index into this list\n     * @return the component at the specified index\n     * @see #get(int)\n     * @see Vector#elementAt(int)\n     */\n    public AbstractNote elementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Returns the first component of this list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the first component of this list\n     * @see java.util.Vector#firstElement()\n     */\n    public AbstractNote firstElement() {\n        return delegate.firstElement();\n    }\n\n    /**\n     * Returns the last component of the list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the last component of the list\n     * @see Vector#lastElement()\n     */\n    public AbstractNote lastElement() {\n        return delegate.lastElement();\n    }\n\n    /**\n     * Return the number of components in the list.\n     *\n     * @return the number of components in the list\n     * @see NoteListModel#getSize()\n     */\n    public int getSize() {\n        return delegate.size();\n    }\n\n    /**\n     * Sets the component at the specified \u003ccode\u003eindex\u003c/code\u003e of this list to\n     * be the specified object. The previous component at that position is\n     * discarded.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eset(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            what the component is to be set to\n     * @param index\n     *            the specified index\n     * @see #set(int,Object)\n     * @see Vector#setElementAt(Object,int)\n     */\n    public void setElementAt(AbstractNote obj, int index) {\n        delegate.setElementAt(obj, index);\n        fireContentChanged(this, index);\n    }\n\n    /**\n     * Deletes the component at the specified index.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eremove(int)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            the index of the object to remove\n     * @see #remove(int)\n     * @see Vector#removeElementAt(int)\n     */\n    public void removeElementAt(int index) {\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n    }\n\n    /**\n     * Inserts the specified object as a component in this list at the specified\n     * \u003ccode\u003eindex\u003c/code\u003e.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eadd(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            the component to insert\n     * @param index\n     *            where to insert the new component\n     * @exception ArrayIndexOutOfBoundsException\n     *                if the index was invalid\n     * @see #add(int,Object)\n     * @see Vector#insertElementAt(Object,int)\n     */\n    public void insertElementAt(AbstractNote obj, int index) {\n        delegate.insertElementAt(obj, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Adds the specified component to the end of this list.\n     *\n     * @param obj\n     *            the component to be added\n     * @see Vector#addElement(Object)\n     */\n    public void addElement(AbstractNote obj) {\n        int index \u003d delegate.size();\n        delegate.addElement(obj);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the first (lowest-indexed) occurrence of the argument from this\n     * list.\n     *\n     * @param obj\n     *            the component to be removed\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the argument was a component of this list;\n     *         \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#removeElement(Object)\n     */\n    public boolean removeElement(AbstractNote obj) {\n        int index \u003d indexOf(obj);\n        boolean an \u003d delegate.removeElement(obj);\n        if (index \u003e\u003d 0) {\n            fireItemRemoved(this, index);\n        }\n        return an;\n    }\n\n    /**\n     * Returns a string that displays and identifies this object\u0027s properties.\n     *\n     * @return a String representation of this object\n     */\n    @Override\n    public String toString() {\n        return delegate.toString();\n    }\n\n    /*\n     * The remaining methods are included for compatibility with the Java 2\n     * platform Vector class.\n     */\n    /**\n     * Returns an array containing all of the elements in this list in the\n     * correct order.\n     *\n     * @return an array containing the elements of the list\n     * @see Vector#toArray()\n     */\n    public AbstractNote[] toArray() {\n        AbstractNote[] an \u003d new AbstractNote[delegate.size()];\n        delegate.copyInto(an);\n        return an;\n    }\n\n    /**\n     * Returns the element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to return\n     */\n    public AbstractNote get(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Replaces the element at the specified position in this list with the\n     * specified element.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to replace\n     * @param element\n     *            element to be stored at the specified position\n     * @return the element previously at the specified position\n     */\n    public AbstractNote set(int index, AbstractNote element) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.setElementAt(element, index);\n        fireContentChanged(this, index);\n        return an;\n    }\n\n    /**\n     * Inserts the specified element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index at which the specified element is to be inserted\n     * @param element\n     *            element to be inserted\n     */\n    public void add(int index, AbstractNote element) {\n        delegate.insertElementAt(element, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the element at the specified position in this list. Returns the\n     * element that was removed from the list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            the index of the element to removed\n     */\n    public AbstractNote remove(int index) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n        return an;\n    }\n\n    /**\n     * Returns the value at position \u003ccode\u003eindex\u003c/code\u003e\n     *\n     * @return the value at position \u003ccode\u003eindex\u003c/code\u003e\n     * @see NoteListModel#getElementAt(int)\n     */\n    public AbstractNote getElementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void addNoteListDataListener(NoteListDataListener l) {\n        this.dataListener \u003d l;\n    }\n\n    /**\n     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void removeNoteListDataListener() {\n        this.dataListener \u003d null;\n    }\n\n    /**\n     * Fired when one element\u0027s value is changed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireContentChanged(Object source, int index) {\n        dataListener.contentChanged(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one new element is added.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index added element\u0027s index\n     */\n    protected void fireItemAdded(Object source, int index) {\n        dataListener.itemAdded(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one element is removed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireItemRemoved(Object source, int index) {\n        dataListener.itemRemoved(new NoteListDataEvent(source, index));\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_6Test.java",
    "test_prompt": "// DefaultNoteListModel_6Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote)} method.\n*/\nclass DefaultNoteListModel_6Test {",
    "method_signature": "lastIndexOf(AbstractNote)",
    "suffix": "6"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\n/*\n * @(#)DefaultNoteListModel.java\n * Created on 2005-8-4\n * Inspirento, Copyright AllenStudio, All Rights Reserved\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n *\n */\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    private Vector\u003cAbstractNote\u003e delegate \u003d new Vector\u003cAbstractNote\u003e();\n\n    // Uni-listener temporary\n    private NoteListDataListener dataListener;\n\n    /**\n     * Returns the current capacity of this list.\n     *\n     * @return the current capacity\n     * @see Vector#capacity()\n     */\n    public int capacity() {\n        return delegate.capacity();\n    }\n\n    /**\n     * Returns the number of components in this list.\n     *\n     * @return the number of components in this list\n     * @see Vector#size()\n     */\n    public int size() {\n        return delegate.size();\n    }\n\n    /**\n     * Tests whether this list has any components.\n     *\n     * @return \u003ccode\u003etrue\u003c/code\u003e if and only if this list has no components,\n     *         that is, its size is zero; \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#isEmpty()\n     */\n    public boolean isEmpty() {\n        return delegate.isEmpty();\n    }\n\n    /**\n     * Returns an enumeration of the components of this list.\n     *\n     * @return an enumeration of the components of this list\n     * @see Vector#elements()\n     */\n    public Enumeration\u003cAbstractNote\u003e elements() {\n        return delegate.elements();\n    }\n\n    /**\n     * Tests whether the specified object is a component in this list.\n     *\n     * @param elem\n     *            an object\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the specified object is the same as a\n     *         component in this list\n     * @see Vector#contains(Object)\n     */\n    public boolean contains(AbstractNote elem) {\n        return delegate.contains(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            an object\n     * @return the index of the first occurrence of the argument in this list;\n     *         returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#indexOf(Object)\n     */\n    public int indexOf(AbstractNote elem) {\n        return delegate.indexOf(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e, beginning the\n     * search at \u003ccode\u003eindex\u003c/code\u003e.\n     *\n     * @param elem\n     *            an desired component\n     * @param index\n     *            the index from which to begin searching\n     * @return the index where the first occurrence of \u003ccode\u003eelem\u003c/code\u003e is\n     *         found after \u003ccode\u003eindex\u003c/code\u003e; returns \u003ccode\u003e-1\u003c/code\u003e if\n     *         the \u003ccode\u003eelem\u003c/code\u003e is not found in the list\n     * @see Vector#indexOf(Object,int)\n     */\n    public int indexOf(AbstractNote elem, int index) {\n        return delegate.indexOf(elem, index);\n    }\n\n    /**\n     * Returns the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            the desired component\n     * @return the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e in the\n     *         list; returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object)\n     */\n    public int lastIndexOf(AbstractNote elem) {\n        return delegate.lastIndexOf(elem);\n    }\n\n    /**\n     * Searches backwards for \u003ccode\u003eelem\u003c/code\u003e, starting from the specified\n     * index, and returns an index to it.\n     *\n     * @param elem\n     *            the desired component\n     * @param index\n     *            the index to start searching from\n     * @return the index of the last occurrence of the \u003ccode\u003eelem\u003c/code\u003e in\n     *         this list at position less than \u003ccode\u003eindex\u003c/code\u003e; returns\n     *         \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object,int)\n     */\n    public int lastIndexOf(AbstractNote elem, int index) {\n        return delegate.lastIndexOf(elem, index);\n    }\n\n    /**\n     * Returns the component at the specified index. Throws an\n     * \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is negative or\n     * not less than the size of the list. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although\n     * this method is not deprecated, the preferred method to use is\n     * \u003ccode\u003eget(int)\u003c/code\u003e, which implements the \u003ccode\u003eList\u003c/code\u003e\n     * interface defined in the 1.2 Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            an index into this list\n     * @return the component at the specified index\n     * @see #get(int)\n     * @see Vector#elementAt(int)\n     */\n    public AbstractNote elementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Returns the first component of this list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the first component of this list\n     * @see java.util.Vector#firstElement()\n     */\n    public AbstractNote firstElement() {\n        return delegate.firstElement();\n    }\n\n    /**\n     * Returns the last component of the list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the last component of the list\n     * @see Vector#lastElement()\n     */\n    public AbstractNote lastElement() {\n        return delegate.lastElement();\n    }\n\n    /**\n     * Return the number of components in the list.\n     *\n     * @return the number of components in the list\n     * @see NoteListModel#getSize()\n     */\n    public int getSize() {\n        return delegate.size();\n    }\n\n    /**\n     * Sets the component at the specified \u003ccode\u003eindex\u003c/code\u003e of this list to\n     * be the specified object. The previous component at that position is\n     * discarded.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eset(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            what the component is to be set to\n     * @param index\n     *            the specified index\n     * @see #set(int,Object)\n     * @see Vector#setElementAt(Object,int)\n     */\n    public void setElementAt(AbstractNote obj, int index) {\n        delegate.setElementAt(obj, index);\n        fireContentChanged(this, index);\n    }\n\n    /**\n     * Deletes the component at the specified index.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eremove(int)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            the index of the object to remove\n     * @see #remove(int)\n     * @see Vector#removeElementAt(int)\n     */\n    public void removeElementAt(int index) {\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n    }\n\n    /**\n     * Inserts the specified object as a component in this list at the specified\n     * \u003ccode\u003eindex\u003c/code\u003e.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eadd(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            the component to insert\n     * @param index\n     *            where to insert the new component\n     * @exception ArrayIndexOutOfBoundsException\n     *                if the index was invalid\n     * @see #add(int,Object)\n     * @see Vector#insertElementAt(Object,int)\n     */\n    public void insertElementAt(AbstractNote obj, int index) {\n        delegate.insertElementAt(obj, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Adds the specified component to the end of this list.\n     *\n     * @param obj\n     *            the component to be added\n     * @see Vector#addElement(Object)\n     */\n    public void addElement(AbstractNote obj) {\n        int index \u003d delegate.size();\n        delegate.addElement(obj);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the first (lowest-indexed) occurrence of the argument from this\n     * list.\n     *\n     * @param obj\n     *            the component to be removed\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the argument was a component of this list;\n     *         \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#removeElement(Object)\n     */\n    public boolean removeElement(AbstractNote obj) {\n        int index \u003d indexOf(obj);\n        boolean an \u003d delegate.removeElement(obj);\n        if (index \u003e\u003d 0) {\n            fireItemRemoved(this, index);\n        }\n        return an;\n    }\n\n    /**\n     * Returns a string that displays and identifies this object\u0027s properties.\n     *\n     * @return a String representation of this object\n     */\n    @Override\n    public String toString() {\n        return delegate.toString();\n    }\n\n    /*\n     * The remaining methods are included for compatibility with the Java 2\n     * platform Vector class.\n     */\n    /**\n     * Returns an array containing all of the elements in this list in the\n     * correct order.\n     *\n     * @return an array containing the elements of the list\n     * @see Vector#toArray()\n     */\n    public AbstractNote[] toArray() {\n        AbstractNote[] an \u003d new AbstractNote[delegate.size()];\n        delegate.copyInto(an);\n        return an;\n    }\n\n    /**\n     * Returns the element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to return\n     */\n    public AbstractNote get(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Replaces the element at the specified position in this list with the\n     * specified element.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to replace\n     * @param element\n     *            element to be stored at the specified position\n     * @return the element previously at the specified position\n     */\n    public AbstractNote set(int index, AbstractNote element) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.setElementAt(element, index);\n        fireContentChanged(this, index);\n        return an;\n    }\n\n    /**\n     * Inserts the specified element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index at which the specified element is to be inserted\n     * @param element\n     *            element to be inserted\n     */\n    public void add(int index, AbstractNote element) {\n        delegate.insertElementAt(element, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the element at the specified position in this list. Returns the\n     * element that was removed from the list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            the index of the element to removed\n     */\n    public AbstractNote remove(int index) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n        return an;\n    }\n\n    /**\n     * Returns the value at position \u003ccode\u003eindex\u003c/code\u003e\n     *\n     * @return the value at position \u003ccode\u003eindex\u003c/code\u003e\n     * @see NoteListModel#getElementAt(int)\n     */\n    public AbstractNote getElementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void addNoteListDataListener(NoteListDataListener l) {\n        this.dataListener \u003d l;\n    }\n\n    /**\n     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void removeNoteListDataListener() {\n        this.dataListener \u003d null;\n    }\n\n    /**\n     * Fired when one element\u0027s value is changed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireContentChanged(Object source, int index) {\n        dataListener.contentChanged(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one new element is added.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index added element\u0027s index\n     */\n    protected void fireItemAdded(Object source, int index) {\n        dataListener.itemAdded(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one element is removed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireItemRemoved(Object source, int index) {\n        dataListener.itemRemoved(new NoteListDataEvent(source, index));\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_7Test.java",
    "test_prompt": "// DefaultNoteListModel_7Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#lastIndexOf(AbstractNote, int)} method.\n*/\nclass DefaultNoteListModel_7Test {",
    "method_signature": "lastIndexOf(AbstractNote, int)",
    "suffix": "7"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\n/*\n * @(#)DefaultNoteListModel.java\n * Created on 2005-8-4\n * Inspirento, Copyright AllenStudio, All Rights Reserved\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n *\n */\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    private Vector\u003cAbstractNote\u003e delegate \u003d new Vector\u003cAbstractNote\u003e();\n\n    // Uni-listener temporary\n    private NoteListDataListener dataListener;\n\n    /**\n     * Returns the current capacity of this list.\n     *\n     * @return the current capacity\n     * @see Vector#capacity()\n     */\n    public int capacity() {\n        return delegate.capacity();\n    }\n\n    /**\n     * Returns the number of components in this list.\n     *\n     * @return the number of components in this list\n     * @see Vector#size()\n     */\n    public int size() {\n        return delegate.size();\n    }\n\n    /**\n     * Tests whether this list has any components.\n     *\n     * @return \u003ccode\u003etrue\u003c/code\u003e if and only if this list has no components,\n     *         that is, its size is zero; \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#isEmpty()\n     */\n    public boolean isEmpty() {\n        return delegate.isEmpty();\n    }\n\n    /**\n     * Returns an enumeration of the components of this list.\n     *\n     * @return an enumeration of the components of this list\n     * @see Vector#elements()\n     */\n    public Enumeration\u003cAbstractNote\u003e elements() {\n        return delegate.elements();\n    }\n\n    /**\n     * Tests whether the specified object is a component in this list.\n     *\n     * @param elem\n     *            an object\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the specified object is the same as a\n     *         component in this list\n     * @see Vector#contains(Object)\n     */\n    public boolean contains(AbstractNote elem) {\n        return delegate.contains(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            an object\n     * @return the index of the first occurrence of the argument in this list;\n     *         returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#indexOf(Object)\n     */\n    public int indexOf(AbstractNote elem) {\n        return delegate.indexOf(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e, beginning the\n     * search at \u003ccode\u003eindex\u003c/code\u003e.\n     *\n     * @param elem\n     *            an desired component\n     * @param index\n     *            the index from which to begin searching\n     * @return the index where the first occurrence of \u003ccode\u003eelem\u003c/code\u003e is\n     *         found after \u003ccode\u003eindex\u003c/code\u003e; returns \u003ccode\u003e-1\u003c/code\u003e if\n     *         the \u003ccode\u003eelem\u003c/code\u003e is not found in the list\n     * @see Vector#indexOf(Object,int)\n     */\n    public int indexOf(AbstractNote elem, int index) {\n        return delegate.indexOf(elem, index);\n    }\n\n    /**\n     * Returns the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            the desired component\n     * @return the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e in the\n     *         list; returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object)\n     */\n    public int lastIndexOf(AbstractNote elem) {\n        return delegate.lastIndexOf(elem);\n    }\n\n    /**\n     * Searches backwards for \u003ccode\u003eelem\u003c/code\u003e, starting from the specified\n     * index, and returns an index to it.\n     *\n     * @param elem\n     *            the desired component\n     * @param index\n     *            the index to start searching from\n     * @return the index of the last occurrence of the \u003ccode\u003eelem\u003c/code\u003e in\n     *         this list at position less than \u003ccode\u003eindex\u003c/code\u003e; returns\n     *         \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object,int)\n     */\n    public int lastIndexOf(AbstractNote elem, int index) {\n        return delegate.lastIndexOf(elem, index);\n    }\n\n    /**\n     * Returns the component at the specified index. Throws an\n     * \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is negative or\n     * not less than the size of the list. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although\n     * this method is not deprecated, the preferred method to use is\n     * \u003ccode\u003eget(int)\u003c/code\u003e, which implements the \u003ccode\u003eList\u003c/code\u003e\n     * interface defined in the 1.2 Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            an index into this list\n     * @return the component at the specified index\n     * @see #get(int)\n     * @see Vector#elementAt(int)\n     */\n    public AbstractNote elementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Returns the first component of this list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the first component of this list\n     * @see java.util.Vector#firstElement()\n     */\n    public AbstractNote firstElement() {\n        return delegate.firstElement();\n    }\n\n    /**\n     * Returns the last component of the list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the last component of the list\n     * @see Vector#lastElement()\n     */\n    public AbstractNote lastElement() {\n        return delegate.lastElement();\n    }\n\n    /**\n     * Return the number of components in the list.\n     *\n     * @return the number of components in the list\n     * @see NoteListModel#getSize()\n     */\n    public int getSize() {\n        return delegate.size();\n    }\n\n    /**\n     * Sets the component at the specified \u003ccode\u003eindex\u003c/code\u003e of this list to\n     * be the specified object. The previous component at that position is\n     * discarded.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eset(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            what the component is to be set to\n     * @param index\n     *            the specified index\n     * @see #set(int,Object)\n     * @see Vector#setElementAt(Object,int)\n     */\n    public void setElementAt(AbstractNote obj, int index) {\n        delegate.setElementAt(obj, index);\n        fireContentChanged(this, index);\n    }\n\n    /**\n     * Deletes the component at the specified index.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eremove(int)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            the index of the object to remove\n     * @see #remove(int)\n     * @see Vector#removeElementAt(int)\n     */\n    public void removeElementAt(int index) {\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n    }\n\n    /**\n     * Inserts the specified object as a component in this list at the specified\n     * \u003ccode\u003eindex\u003c/code\u003e.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eadd(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            the component to insert\n     * @param index\n     *            where to insert the new component\n     * @exception ArrayIndexOutOfBoundsException\n     *                if the index was invalid\n     * @see #add(int,Object)\n     * @see Vector#insertElementAt(Object,int)\n     */\n    public void insertElementAt(AbstractNote obj, int index) {\n        delegate.insertElementAt(obj, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Adds the specified component to the end of this list.\n     *\n     * @param obj\n     *            the component to be added\n     * @see Vector#addElement(Object)\n     */\n    public void addElement(AbstractNote obj) {\n        int index \u003d delegate.size();\n        delegate.addElement(obj);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the first (lowest-indexed) occurrence of the argument from this\n     * list.\n     *\n     * @param obj\n     *            the component to be removed\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the argument was a component of this list;\n     *         \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#removeElement(Object)\n     */\n    public boolean removeElement(AbstractNote obj) {\n        int index \u003d indexOf(obj);\n        boolean an \u003d delegate.removeElement(obj);\n        if (index \u003e\u003d 0) {\n            fireItemRemoved(this, index);\n        }\n        return an;\n    }\n\n    /**\n     * Returns a string that displays and identifies this object\u0027s properties.\n     *\n     * @return a String representation of this object\n     */\n    @Override\n    public String toString() {\n        return delegate.toString();\n    }\n\n    /*\n     * The remaining methods are included for compatibility with the Java 2\n     * platform Vector class.\n     */\n    /**\n     * Returns an array containing all of the elements in this list in the\n     * correct order.\n     *\n     * @return an array containing the elements of the list\n     * @see Vector#toArray()\n     */\n    public AbstractNote[] toArray() {\n        AbstractNote[] an \u003d new AbstractNote[delegate.size()];\n        delegate.copyInto(an);\n        return an;\n    }\n\n    /**\n     * Returns the element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to return\n     */\n    public AbstractNote get(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Replaces the element at the specified position in this list with the\n     * specified element.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to replace\n     * @param element\n     *            element to be stored at the specified position\n     * @return the element previously at the specified position\n     */\n    public AbstractNote set(int index, AbstractNote element) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.setElementAt(element, index);\n        fireContentChanged(this, index);\n        return an;\n    }\n\n    /**\n     * Inserts the specified element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index at which the specified element is to be inserted\n     * @param element\n     *            element to be inserted\n     */\n    public void add(int index, AbstractNote element) {\n        delegate.insertElementAt(element, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the element at the specified position in this list. Returns the\n     * element that was removed from the list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            the index of the element to removed\n     */\n    public AbstractNote remove(int index) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n        return an;\n    }\n\n    /**\n     * Returns the value at position \u003ccode\u003eindex\u003c/code\u003e\n     *\n     * @return the value at position \u003ccode\u003eindex\u003c/code\u003e\n     * @see NoteListModel#getElementAt(int)\n     */\n    public AbstractNote getElementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void addNoteListDataListener(NoteListDataListener l) {\n        this.dataListener \u003d l;\n    }\n\n    /**\n     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void removeNoteListDataListener() {\n        this.dataListener \u003d null;\n    }\n\n    /**\n     * Fired when one element\u0027s value is changed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireContentChanged(Object source, int index) {\n        dataListener.contentChanged(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one new element is added.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index added element\u0027s index\n     */\n    protected void fireItemAdded(Object source, int index) {\n        dataListener.itemAdded(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one element is removed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireItemRemoved(Object source, int index) {\n        dataListener.itemRemoved(new NoteListDataEvent(source, index));\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_8Test.java",
    "test_prompt": "// DefaultNoteListModel_8Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#elementAt(int)} method.\n*/\nclass DefaultNoteListModel_8Test {",
    "method_signature": "elementAt(int)",
    "suffix": "8"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\n/*\n * @(#)DefaultNoteListModel.java\n * Created on 2005-8-4\n * Inspirento, Copyright AllenStudio, All Rights Reserved\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n *\n */\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    private Vector\u003cAbstractNote\u003e delegate \u003d new Vector\u003cAbstractNote\u003e();\n\n    // Uni-listener temporary\n    private NoteListDataListener dataListener;\n\n    /**\n     * Returns the current capacity of this list.\n     *\n     * @return the current capacity\n     * @see Vector#capacity()\n     */\n    public int capacity() {\n        return delegate.capacity();\n    }\n\n    /**\n     * Returns the number of components in this list.\n     *\n     * @return the number of components in this list\n     * @see Vector#size()\n     */\n    public int size() {\n        return delegate.size();\n    }\n\n    /**\n     * Tests whether this list has any components.\n     *\n     * @return \u003ccode\u003etrue\u003c/code\u003e if and only if this list has no components,\n     *         that is, its size is zero; \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#isEmpty()\n     */\n    public boolean isEmpty() {\n        return delegate.isEmpty();\n    }\n\n    /**\n     * Returns an enumeration of the components of this list.\n     *\n     * @return an enumeration of the components of this list\n     * @see Vector#elements()\n     */\n    public Enumeration\u003cAbstractNote\u003e elements() {\n        return delegate.elements();\n    }\n\n    /**\n     * Tests whether the specified object is a component in this list.\n     *\n     * @param elem\n     *            an object\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the specified object is the same as a\n     *         component in this list\n     * @see Vector#contains(Object)\n     */\n    public boolean contains(AbstractNote elem) {\n        return delegate.contains(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            an object\n     * @return the index of the first occurrence of the argument in this list;\n     *         returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#indexOf(Object)\n     */\n    public int indexOf(AbstractNote elem) {\n        return delegate.indexOf(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e, beginning the\n     * search at \u003ccode\u003eindex\u003c/code\u003e.\n     *\n     * @param elem\n     *            an desired component\n     * @param index\n     *            the index from which to begin searching\n     * @return the index where the first occurrence of \u003ccode\u003eelem\u003c/code\u003e is\n     *         found after \u003ccode\u003eindex\u003c/code\u003e; returns \u003ccode\u003e-1\u003c/code\u003e if\n     *         the \u003ccode\u003eelem\u003c/code\u003e is not found in the list\n     * @see Vector#indexOf(Object,int)\n     */\n    public int indexOf(AbstractNote elem, int index) {\n        return delegate.indexOf(elem, index);\n    }\n\n    /**\n     * Returns the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            the desired component\n     * @return the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e in the\n     *         list; returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object)\n     */\n    public int lastIndexOf(AbstractNote elem) {\n        return delegate.lastIndexOf(elem);\n    }\n\n    /**\n     * Searches backwards for \u003ccode\u003eelem\u003c/code\u003e, starting from the specified\n     * index, and returns an index to it.\n     *\n     * @param elem\n     *            the desired component\n     * @param index\n     *            the index to start searching from\n     * @return the index of the last occurrence of the \u003ccode\u003eelem\u003c/code\u003e in\n     *         this list at position less than \u003ccode\u003eindex\u003c/code\u003e; returns\n     *         \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object,int)\n     */\n    public int lastIndexOf(AbstractNote elem, int index) {\n        return delegate.lastIndexOf(elem, index);\n    }\n\n    /**\n     * Returns the component at the specified index. Throws an\n     * \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is negative or\n     * not less than the size of the list. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although\n     * this method is not deprecated, the preferred method to use is\n     * \u003ccode\u003eget(int)\u003c/code\u003e, which implements the \u003ccode\u003eList\u003c/code\u003e\n     * interface defined in the 1.2 Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            an index into this list\n     * @return the component at the specified index\n     * @see #get(int)\n     * @see Vector#elementAt(int)\n     */\n    public AbstractNote elementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Returns the first component of this list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the first component of this list\n     * @see java.util.Vector#firstElement()\n     */\n    public AbstractNote firstElement() {\n        return delegate.firstElement();\n    }\n\n    /**\n     * Returns the last component of the list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the last component of the list\n     * @see Vector#lastElement()\n     */\n    public AbstractNote lastElement() {\n        return delegate.lastElement();\n    }\n\n    /**\n     * Return the number of components in the list.\n     *\n     * @return the number of components in the list\n     * @see NoteListModel#getSize()\n     */\n    public int getSize() {\n        return delegate.size();\n    }\n\n    /**\n     * Sets the component at the specified \u003ccode\u003eindex\u003c/code\u003e of this list to\n     * be the specified object. The previous component at that position is\n     * discarded.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eset(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            what the component is to be set to\n     * @param index\n     *            the specified index\n     * @see #set(int,Object)\n     * @see Vector#setElementAt(Object,int)\n     */\n    public void setElementAt(AbstractNote obj, int index) {\n        delegate.setElementAt(obj, index);\n        fireContentChanged(this, index);\n    }\n\n    /**\n     * Deletes the component at the specified index.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eremove(int)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            the index of the object to remove\n     * @see #remove(int)\n     * @see Vector#removeElementAt(int)\n     */\n    public void removeElementAt(int index) {\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n    }\n\n    /**\n     * Inserts the specified object as a component in this list at the specified\n     * \u003ccode\u003eindex\u003c/code\u003e.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eadd(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            the component to insert\n     * @param index\n     *            where to insert the new component\n     * @exception ArrayIndexOutOfBoundsException\n     *                if the index was invalid\n     * @see #add(int,Object)\n     * @see Vector#insertElementAt(Object,int)\n     */\n    public void insertElementAt(AbstractNote obj, int index) {\n        delegate.insertElementAt(obj, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Adds the specified component to the end of this list.\n     *\n     * @param obj\n     *            the component to be added\n     * @see Vector#addElement(Object)\n     */\n    public void addElement(AbstractNote obj) {\n        int index \u003d delegate.size();\n        delegate.addElement(obj);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the first (lowest-indexed) occurrence of the argument from this\n     * list.\n     *\n     * @param obj\n     *            the component to be removed\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the argument was a component of this list;\n     *         \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#removeElement(Object)\n     */\n    public boolean removeElement(AbstractNote obj) {\n        int index \u003d indexOf(obj);\n        boolean an \u003d delegate.removeElement(obj);\n        if (index \u003e\u003d 0) {\n            fireItemRemoved(this, index);\n        }\n        return an;\n    }\n\n    /**\n     * Returns a string that displays and identifies this object\u0027s properties.\n     *\n     * @return a String representation of this object\n     */\n    @Override\n    public String toString() {\n        return delegate.toString();\n    }\n\n    /*\n     * The remaining methods are included for compatibility with the Java 2\n     * platform Vector class.\n     */\n    /**\n     * Returns an array containing all of the elements in this list in the\n     * correct order.\n     *\n     * @return an array containing the elements of the list\n     * @see Vector#toArray()\n     */\n    public AbstractNote[] toArray() {\n        AbstractNote[] an \u003d new AbstractNote[delegate.size()];\n        delegate.copyInto(an);\n        return an;\n    }\n\n    /**\n     * Returns the element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to return\n     */\n    public AbstractNote get(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Replaces the element at the specified position in this list with the\n     * specified element.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to replace\n     * @param element\n     *            element to be stored at the specified position\n     * @return the element previously at the specified position\n     */\n    public AbstractNote set(int index, AbstractNote element) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.setElementAt(element, index);\n        fireContentChanged(this, index);\n        return an;\n    }\n\n    /**\n     * Inserts the specified element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index at which the specified element is to be inserted\n     * @param element\n     *            element to be inserted\n     */\n    public void add(int index, AbstractNote element) {\n        delegate.insertElementAt(element, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the element at the specified position in this list. Returns the\n     * element that was removed from the list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            the index of the element to removed\n     */\n    public AbstractNote remove(int index) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n        return an;\n    }\n\n    /**\n     * Returns the value at position \u003ccode\u003eindex\u003c/code\u003e\n     *\n     * @return the value at position \u003ccode\u003eindex\u003c/code\u003e\n     * @see NoteListModel#getElementAt(int)\n     */\n    public AbstractNote getElementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void addNoteListDataListener(NoteListDataListener l) {\n        this.dataListener \u003d l;\n    }\n\n    /**\n     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void removeNoteListDataListener() {\n        this.dataListener \u003d null;\n    }\n\n    /**\n     * Fired when one element\u0027s value is changed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireContentChanged(Object source, int index) {\n        dataListener.contentChanged(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one new element is added.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index added element\u0027s index\n     */\n    protected void fireItemAdded(Object source, int index) {\n        dataListener.itemAdded(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one element is removed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireItemRemoved(Object source, int index) {\n        dataListener.itemRemoved(new NoteListDataEvent(source, index));\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_9Test.java",
    "test_prompt": "// DefaultNoteListModel_9Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#firstElement()} method.\n*/\nclass DefaultNoteListModel_9Test {",
    "method_signature": "firstElement()",
    "suffix": "9"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\n/*\n * @(#)DefaultNoteListModel.java\n * Created on 2005-8-4\n * Inspirento, Copyright AllenStudio, All Rights Reserved\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n *\n */\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    private Vector\u003cAbstractNote\u003e delegate \u003d new Vector\u003cAbstractNote\u003e();\n\n    // Uni-listener temporary\n    private NoteListDataListener dataListener;\n\n    /**\n     * Returns the current capacity of this list.\n     *\n     * @return the current capacity\n     * @see Vector#capacity()\n     */\n    public int capacity() {\n        return delegate.capacity();\n    }\n\n    /**\n     * Returns the number of components in this list.\n     *\n     * @return the number of components in this list\n     * @see Vector#size()\n     */\n    public int size() {\n        return delegate.size();\n    }\n\n    /**\n     * Tests whether this list has any components.\n     *\n     * @return \u003ccode\u003etrue\u003c/code\u003e if and only if this list has no components,\n     *         that is, its size is zero; \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#isEmpty()\n     */\n    public boolean isEmpty() {\n        return delegate.isEmpty();\n    }\n\n    /**\n     * Returns an enumeration of the components of this list.\n     *\n     * @return an enumeration of the components of this list\n     * @see Vector#elements()\n     */\n    public Enumeration\u003cAbstractNote\u003e elements() {\n        return delegate.elements();\n    }\n\n    /**\n     * Tests whether the specified object is a component in this list.\n     *\n     * @param elem\n     *            an object\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the specified object is the same as a\n     *         component in this list\n     * @see Vector#contains(Object)\n     */\n    public boolean contains(AbstractNote elem) {\n        return delegate.contains(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            an object\n     * @return the index of the first occurrence of the argument in this list;\n     *         returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#indexOf(Object)\n     */\n    public int indexOf(AbstractNote elem) {\n        return delegate.indexOf(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e, beginning the\n     * search at \u003ccode\u003eindex\u003c/code\u003e.\n     *\n     * @param elem\n     *            an desired component\n     * @param index\n     *            the index from which to begin searching\n     * @return the index where the first occurrence of \u003ccode\u003eelem\u003c/code\u003e is\n     *         found after \u003ccode\u003eindex\u003c/code\u003e; returns \u003ccode\u003e-1\u003c/code\u003e if\n     *         the \u003ccode\u003eelem\u003c/code\u003e is not found in the list\n     * @see Vector#indexOf(Object,int)\n     */\n    public int indexOf(AbstractNote elem, int index) {\n        return delegate.indexOf(elem, index);\n    }\n\n    /**\n     * Returns the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            the desired component\n     * @return the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e in the\n     *         list; returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object)\n     */\n    public int lastIndexOf(AbstractNote elem) {\n        return delegate.lastIndexOf(elem);\n    }\n\n    /**\n     * Searches backwards for \u003ccode\u003eelem\u003c/code\u003e, starting from the specified\n     * index, and returns an index to it.\n     *\n     * @param elem\n     *            the desired component\n     * @param index\n     *            the index to start searching from\n     * @return the index of the last occurrence of the \u003ccode\u003eelem\u003c/code\u003e in\n     *         this list at position less than \u003ccode\u003eindex\u003c/code\u003e; returns\n     *         \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object,int)\n     */\n    public int lastIndexOf(AbstractNote elem, int index) {\n        return delegate.lastIndexOf(elem, index);\n    }\n\n    /**\n     * Returns the component at the specified index. Throws an\n     * \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is negative or\n     * not less than the size of the list. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although\n     * this method is not deprecated, the preferred method to use is\n     * \u003ccode\u003eget(int)\u003c/code\u003e, which implements the \u003ccode\u003eList\u003c/code\u003e\n     * interface defined in the 1.2 Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            an index into this list\n     * @return the component at the specified index\n     * @see #get(int)\n     * @see Vector#elementAt(int)\n     */\n    public AbstractNote elementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Returns the first component of this list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the first component of this list\n     * @see java.util.Vector#firstElement()\n     */\n    public AbstractNote firstElement() {\n        return delegate.firstElement();\n    }\n\n    /**\n     * Returns the last component of the list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the last component of the list\n     * @see Vector#lastElement()\n     */\n    public AbstractNote lastElement() {\n        return delegate.lastElement();\n    }\n\n    /**\n     * Return the number of components in the list.\n     *\n     * @return the number of components in the list\n     * @see NoteListModel#getSize()\n     */\n    public int getSize() {\n        return delegate.size();\n    }\n\n    /**\n     * Sets the component at the specified \u003ccode\u003eindex\u003c/code\u003e of this list to\n     * be the specified object. The previous component at that position is\n     * discarded.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eset(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            what the component is to be set to\n     * @param index\n     *            the specified index\n     * @see #set(int,Object)\n     * @see Vector#setElementAt(Object,int)\n     */\n    public void setElementAt(AbstractNote obj, int index) {\n        delegate.setElementAt(obj, index);\n        fireContentChanged(this, index);\n    }\n\n    /**\n     * Deletes the component at the specified index.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eremove(int)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            the index of the object to remove\n     * @see #remove(int)\n     * @see Vector#removeElementAt(int)\n     */\n    public void removeElementAt(int index) {\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n    }\n\n    /**\n     * Inserts the specified object as a component in this list at the specified\n     * \u003ccode\u003eindex\u003c/code\u003e.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eadd(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            the component to insert\n     * @param index\n     *            where to insert the new component\n     * @exception ArrayIndexOutOfBoundsException\n     *                if the index was invalid\n     * @see #add(int,Object)\n     * @see Vector#insertElementAt(Object,int)\n     */\n    public void insertElementAt(AbstractNote obj, int index) {\n        delegate.insertElementAt(obj, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Adds the specified component to the end of this list.\n     *\n     * @param obj\n     *            the component to be added\n     * @see Vector#addElement(Object)\n     */\n    public void addElement(AbstractNote obj) {\n        int index \u003d delegate.size();\n        delegate.addElement(obj);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the first (lowest-indexed) occurrence of the argument from this\n     * list.\n     *\n     * @param obj\n     *            the component to be removed\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the argument was a component of this list;\n     *         \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#removeElement(Object)\n     */\n    public boolean removeElement(AbstractNote obj) {\n        int index \u003d indexOf(obj);\n        boolean an \u003d delegate.removeElement(obj);\n        if (index \u003e\u003d 0) {\n            fireItemRemoved(this, index);\n        }\n        return an;\n    }\n\n    /**\n     * Returns a string that displays and identifies this object\u0027s properties.\n     *\n     * @return a String representation of this object\n     */\n    @Override\n    public String toString() {\n        return delegate.toString();\n    }\n\n    /*\n     * The remaining methods are included for compatibility with the Java 2\n     * platform Vector class.\n     */\n    /**\n     * Returns an array containing all of the elements in this list in the\n     * correct order.\n     *\n     * @return an array containing the elements of the list\n     * @see Vector#toArray()\n     */\n    public AbstractNote[] toArray() {\n        AbstractNote[] an \u003d new AbstractNote[delegate.size()];\n        delegate.copyInto(an);\n        return an;\n    }\n\n    /**\n     * Returns the element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to return\n     */\n    public AbstractNote get(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Replaces the element at the specified position in this list with the\n     * specified element.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to replace\n     * @param element\n     *            element to be stored at the specified position\n     * @return the element previously at the specified position\n     */\n    public AbstractNote set(int index, AbstractNote element) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.setElementAt(element, index);\n        fireContentChanged(this, index);\n        return an;\n    }\n\n    /**\n     * Inserts the specified element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index at which the specified element is to be inserted\n     * @param element\n     *            element to be inserted\n     */\n    public void add(int index, AbstractNote element) {\n        delegate.insertElementAt(element, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the element at the specified position in this list. Returns the\n     * element that was removed from the list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            the index of the element to removed\n     */\n    public AbstractNote remove(int index) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n        return an;\n    }\n\n    /**\n     * Returns the value at position \u003ccode\u003eindex\u003c/code\u003e\n     *\n     * @return the value at position \u003ccode\u003eindex\u003c/code\u003e\n     * @see NoteListModel#getElementAt(int)\n     */\n    public AbstractNote getElementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void addNoteListDataListener(NoteListDataListener l) {\n        this.dataListener \u003d l;\n    }\n\n    /**\n     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void removeNoteListDataListener() {\n        this.dataListener \u003d null;\n    }\n\n    /**\n     * Fired when one element\u0027s value is changed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireContentChanged(Object source, int index) {\n        dataListener.contentChanged(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one new element is added.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index added element\u0027s index\n     */\n    protected void fireItemAdded(Object source, int index) {\n        dataListener.itemAdded(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one element is removed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireItemRemoved(Object source, int index) {\n        dataListener.itemRemoved(new NoteListDataEvent(source, index));\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_10Test.java",
    "test_prompt": "// DefaultNoteListModel_10Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#lastElement()} method.\n*/\nclass DefaultNoteListModel_10Test {",
    "method_signature": "lastElement()",
    "suffix": "10"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\n/*\n * @(#)DefaultNoteListModel.java\n * Created on 2005-8-4\n * Inspirento, Copyright AllenStudio, All Rights Reserved\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n *\n */\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    private Vector\u003cAbstractNote\u003e delegate \u003d new Vector\u003cAbstractNote\u003e();\n\n    // Uni-listener temporary\n    private NoteListDataListener dataListener;\n\n    /**\n     * Returns the current capacity of this list.\n     *\n     * @return the current capacity\n     * @see Vector#capacity()\n     */\n    public int capacity() {\n        return delegate.capacity();\n    }\n\n    /**\n     * Returns the number of components in this list.\n     *\n     * @return the number of components in this list\n     * @see Vector#size()\n     */\n    public int size() {\n        return delegate.size();\n    }\n\n    /**\n     * Tests whether this list has any components.\n     *\n     * @return \u003ccode\u003etrue\u003c/code\u003e if and only if this list has no components,\n     *         that is, its size is zero; \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#isEmpty()\n     */\n    public boolean isEmpty() {\n        return delegate.isEmpty();\n    }\n\n    /**\n     * Returns an enumeration of the components of this list.\n     *\n     * @return an enumeration of the components of this list\n     * @see Vector#elements()\n     */\n    public Enumeration\u003cAbstractNote\u003e elements() {\n        return delegate.elements();\n    }\n\n    /**\n     * Tests whether the specified object is a component in this list.\n     *\n     * @param elem\n     *            an object\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the specified object is the same as a\n     *         component in this list\n     * @see Vector#contains(Object)\n     */\n    public boolean contains(AbstractNote elem) {\n        return delegate.contains(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            an object\n     * @return the index of the first occurrence of the argument in this list;\n     *         returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#indexOf(Object)\n     */\n    public int indexOf(AbstractNote elem) {\n        return delegate.indexOf(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e, beginning the\n     * search at \u003ccode\u003eindex\u003c/code\u003e.\n     *\n     * @param elem\n     *            an desired component\n     * @param index\n     *            the index from which to begin searching\n     * @return the index where the first occurrence of \u003ccode\u003eelem\u003c/code\u003e is\n     *         found after \u003ccode\u003eindex\u003c/code\u003e; returns \u003ccode\u003e-1\u003c/code\u003e if\n     *         the \u003ccode\u003eelem\u003c/code\u003e is not found in the list\n     * @see Vector#indexOf(Object,int)\n     */\n    public int indexOf(AbstractNote elem, int index) {\n        return delegate.indexOf(elem, index);\n    }\n\n    /**\n     * Returns the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            the desired component\n     * @return the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e in the\n     *         list; returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object)\n     */\n    public int lastIndexOf(AbstractNote elem) {\n        return delegate.lastIndexOf(elem);\n    }\n\n    /**\n     * Searches backwards for \u003ccode\u003eelem\u003c/code\u003e, starting from the specified\n     * index, and returns an index to it.\n     *\n     * @param elem\n     *            the desired component\n     * @param index\n     *            the index to start searching from\n     * @return the index of the last occurrence of the \u003ccode\u003eelem\u003c/code\u003e in\n     *         this list at position less than \u003ccode\u003eindex\u003c/code\u003e; returns\n     *         \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object,int)\n     */\n    public int lastIndexOf(AbstractNote elem, int index) {\n        return delegate.lastIndexOf(elem, index);\n    }\n\n    /**\n     * Returns the component at the specified index. Throws an\n     * \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is negative or\n     * not less than the size of the list. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although\n     * this method is not deprecated, the preferred method to use is\n     * \u003ccode\u003eget(int)\u003c/code\u003e, which implements the \u003ccode\u003eList\u003c/code\u003e\n     * interface defined in the 1.2 Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            an index into this list\n     * @return the component at the specified index\n     * @see #get(int)\n     * @see Vector#elementAt(int)\n     */\n    public AbstractNote elementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Returns the first component of this list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the first component of this list\n     * @see java.util.Vector#firstElement()\n     */\n    public AbstractNote firstElement() {\n        return delegate.firstElement();\n    }\n\n    /**\n     * Returns the last component of the list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the last component of the list\n     * @see Vector#lastElement()\n     */\n    public AbstractNote lastElement() {\n        return delegate.lastElement();\n    }\n\n    /**\n     * Return the number of components in the list.\n     *\n     * @return the number of components in the list\n     * @see NoteListModel#getSize()\n     */\n    public int getSize() {\n        return delegate.size();\n    }\n\n    /**\n     * Sets the component at the specified \u003ccode\u003eindex\u003c/code\u003e of this list to\n     * be the specified object. The previous component at that position is\n     * discarded.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eset(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            what the component is to be set to\n     * @param index\n     *            the specified index\n     * @see #set(int,Object)\n     * @see Vector#setElementAt(Object,int)\n     */\n    public void setElementAt(AbstractNote obj, int index) {\n        delegate.setElementAt(obj, index);\n        fireContentChanged(this, index);\n    }\n\n    /**\n     * Deletes the component at the specified index.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eremove(int)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            the index of the object to remove\n     * @see #remove(int)\n     * @see Vector#removeElementAt(int)\n     */\n    public void removeElementAt(int index) {\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n    }\n\n    /**\n     * Inserts the specified object as a component in this list at the specified\n     * \u003ccode\u003eindex\u003c/code\u003e.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eadd(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            the component to insert\n     * @param index\n     *            where to insert the new component\n     * @exception ArrayIndexOutOfBoundsException\n     *                if the index was invalid\n     * @see #add(int,Object)\n     * @see Vector#insertElementAt(Object,int)\n     */\n    public void insertElementAt(AbstractNote obj, int index) {\n        delegate.insertElementAt(obj, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Adds the specified component to the end of this list.\n     *\n     * @param obj\n     *            the component to be added\n     * @see Vector#addElement(Object)\n     */\n    public void addElement(AbstractNote obj) {\n        int index \u003d delegate.size();\n        delegate.addElement(obj);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the first (lowest-indexed) occurrence of the argument from this\n     * list.\n     *\n     * @param obj\n     *            the component to be removed\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the argument was a component of this list;\n     *         \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#removeElement(Object)\n     */\n    public boolean removeElement(AbstractNote obj) {\n        int index \u003d indexOf(obj);\n        boolean an \u003d delegate.removeElement(obj);\n        if (index \u003e\u003d 0) {\n            fireItemRemoved(this, index);\n        }\n        return an;\n    }\n\n    /**\n     * Returns a string that displays and identifies this object\u0027s properties.\n     *\n     * @return a String representation of this object\n     */\n    @Override\n    public String toString() {\n        return delegate.toString();\n    }\n\n    /*\n     * The remaining methods are included for compatibility with the Java 2\n     * platform Vector class.\n     */\n    /**\n     * Returns an array containing all of the elements in this list in the\n     * correct order.\n     *\n     * @return an array containing the elements of the list\n     * @see Vector#toArray()\n     */\n    public AbstractNote[] toArray() {\n        AbstractNote[] an \u003d new AbstractNote[delegate.size()];\n        delegate.copyInto(an);\n        return an;\n    }\n\n    /**\n     * Returns the element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to return\n     */\n    public AbstractNote get(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Replaces the element at the specified position in this list with the\n     * specified element.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to replace\n     * @param element\n     *            element to be stored at the specified position\n     * @return the element previously at the specified position\n     */\n    public AbstractNote set(int index, AbstractNote element) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.setElementAt(element, index);\n        fireContentChanged(this, index);\n        return an;\n    }\n\n    /**\n     * Inserts the specified element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index at which the specified element is to be inserted\n     * @param element\n     *            element to be inserted\n     */\n    public void add(int index, AbstractNote element) {\n        delegate.insertElementAt(element, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the element at the specified position in this list. Returns the\n     * element that was removed from the list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            the index of the element to removed\n     */\n    public AbstractNote remove(int index) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n        return an;\n    }\n\n    /**\n     * Returns the value at position \u003ccode\u003eindex\u003c/code\u003e\n     *\n     * @return the value at position \u003ccode\u003eindex\u003c/code\u003e\n     * @see NoteListModel#getElementAt(int)\n     */\n    public AbstractNote getElementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void addNoteListDataListener(NoteListDataListener l) {\n        this.dataListener \u003d l;\n    }\n\n    /**\n     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void removeNoteListDataListener() {\n        this.dataListener \u003d null;\n    }\n\n    /**\n     * Fired when one element\u0027s value is changed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireContentChanged(Object source, int index) {\n        dataListener.contentChanged(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one new element is added.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index added element\u0027s index\n     */\n    protected void fireItemAdded(Object source, int index) {\n        dataListener.itemAdded(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one element is removed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireItemRemoved(Object source, int index) {\n        dataListener.itemRemoved(new NoteListDataEvent(source, index));\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_11Test.java",
    "test_prompt": "// DefaultNoteListModel_11Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#removeElement(AbstractNote)} method.\n*/\nclass DefaultNoteListModel_11Test {",
    "method_signature": "removeElement(AbstractNote)",
    "suffix": "11"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\n/*\n * @(#)DefaultNoteListModel.java\n * Created on 2005-8-4\n * Inspirento, Copyright AllenStudio, All Rights Reserved\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n *\n */\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    private Vector\u003cAbstractNote\u003e delegate \u003d new Vector\u003cAbstractNote\u003e();\n\n    // Uni-listener temporary\n    private NoteListDataListener dataListener;\n\n    /**\n     * Returns the current capacity of this list.\n     *\n     * @return the current capacity\n     * @see Vector#capacity()\n     */\n    public int capacity() {\n        return delegate.capacity();\n    }\n\n    /**\n     * Returns the number of components in this list.\n     *\n     * @return the number of components in this list\n     * @see Vector#size()\n     */\n    public int size() {\n        return delegate.size();\n    }\n\n    /**\n     * Tests whether this list has any components.\n     *\n     * @return \u003ccode\u003etrue\u003c/code\u003e if and only if this list has no components,\n     *         that is, its size is zero; \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#isEmpty()\n     */\n    public boolean isEmpty() {\n        return delegate.isEmpty();\n    }\n\n    /**\n     * Returns an enumeration of the components of this list.\n     *\n     * @return an enumeration of the components of this list\n     * @see Vector#elements()\n     */\n    public Enumeration\u003cAbstractNote\u003e elements() {\n        return delegate.elements();\n    }\n\n    /**\n     * Tests whether the specified object is a component in this list.\n     *\n     * @param elem\n     *            an object\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the specified object is the same as a\n     *         component in this list\n     * @see Vector#contains(Object)\n     */\n    public boolean contains(AbstractNote elem) {\n        return delegate.contains(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            an object\n     * @return the index of the first occurrence of the argument in this list;\n     *         returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#indexOf(Object)\n     */\n    public int indexOf(AbstractNote elem) {\n        return delegate.indexOf(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e, beginning the\n     * search at \u003ccode\u003eindex\u003c/code\u003e.\n     *\n     * @param elem\n     *            an desired component\n     * @param index\n     *            the index from which to begin searching\n     * @return the index where the first occurrence of \u003ccode\u003eelem\u003c/code\u003e is\n     *         found after \u003ccode\u003eindex\u003c/code\u003e; returns \u003ccode\u003e-1\u003c/code\u003e if\n     *         the \u003ccode\u003eelem\u003c/code\u003e is not found in the list\n     * @see Vector#indexOf(Object,int)\n     */\n    public int indexOf(AbstractNote elem, int index) {\n        return delegate.indexOf(elem, index);\n    }\n\n    /**\n     * Returns the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            the desired component\n     * @return the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e in the\n     *         list; returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object)\n     */\n    public int lastIndexOf(AbstractNote elem) {\n        return delegate.lastIndexOf(elem);\n    }\n\n    /**\n     * Searches backwards for \u003ccode\u003eelem\u003c/code\u003e, starting from the specified\n     * index, and returns an index to it.\n     *\n     * @param elem\n     *            the desired component\n     * @param index\n     *            the index to start searching from\n     * @return the index of the last occurrence of the \u003ccode\u003eelem\u003c/code\u003e in\n     *         this list at position less than \u003ccode\u003eindex\u003c/code\u003e; returns\n     *         \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object,int)\n     */\n    public int lastIndexOf(AbstractNote elem, int index) {\n        return delegate.lastIndexOf(elem, index);\n    }\n\n    /**\n     * Returns the component at the specified index. Throws an\n     * \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is negative or\n     * not less than the size of the list. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although\n     * this method is not deprecated, the preferred method to use is\n     * \u003ccode\u003eget(int)\u003c/code\u003e, which implements the \u003ccode\u003eList\u003c/code\u003e\n     * interface defined in the 1.2 Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            an index into this list\n     * @return the component at the specified index\n     * @see #get(int)\n     * @see Vector#elementAt(int)\n     */\n    public AbstractNote elementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Returns the first component of this list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the first component of this list\n     * @see java.util.Vector#firstElement()\n     */\n    public AbstractNote firstElement() {\n        return delegate.firstElement();\n    }\n\n    /**\n     * Returns the last component of the list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the last component of the list\n     * @see Vector#lastElement()\n     */\n    public AbstractNote lastElement() {\n        return delegate.lastElement();\n    }\n\n    /**\n     * Return the number of components in the list.\n     *\n     * @return the number of components in the list\n     * @see NoteListModel#getSize()\n     */\n    public int getSize() {\n        return delegate.size();\n    }\n\n    /**\n     * Sets the component at the specified \u003ccode\u003eindex\u003c/code\u003e of this list to\n     * be the specified object. The previous component at that position is\n     * discarded.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eset(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            what the component is to be set to\n     * @param index\n     *            the specified index\n     * @see #set(int,Object)\n     * @see Vector#setElementAt(Object,int)\n     */\n    public void setElementAt(AbstractNote obj, int index) {\n        delegate.setElementAt(obj, index);\n        fireContentChanged(this, index);\n    }\n\n    /**\n     * Deletes the component at the specified index.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eremove(int)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            the index of the object to remove\n     * @see #remove(int)\n     * @see Vector#removeElementAt(int)\n     */\n    public void removeElementAt(int index) {\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n    }\n\n    /**\n     * Inserts the specified object as a component in this list at the specified\n     * \u003ccode\u003eindex\u003c/code\u003e.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eadd(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            the component to insert\n     * @param index\n     *            where to insert the new component\n     * @exception ArrayIndexOutOfBoundsException\n     *                if the index was invalid\n     * @see #add(int,Object)\n     * @see Vector#insertElementAt(Object,int)\n     */\n    public void insertElementAt(AbstractNote obj, int index) {\n        delegate.insertElementAt(obj, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Adds the specified component to the end of this list.\n     *\n     * @param obj\n     *            the component to be added\n     * @see Vector#addElement(Object)\n     */\n    public void addElement(AbstractNote obj) {\n        int index \u003d delegate.size();\n        delegate.addElement(obj);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the first (lowest-indexed) occurrence of the argument from this\n     * list.\n     *\n     * @param obj\n     *            the component to be removed\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the argument was a component of this list;\n     *         \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#removeElement(Object)\n     */\n    public boolean removeElement(AbstractNote obj) {\n        int index \u003d indexOf(obj);\n        boolean an \u003d delegate.removeElement(obj);\n        if (index \u003e\u003d 0) {\n            fireItemRemoved(this, index);\n        }\n        return an;\n    }\n\n    /**\n     * Returns a string that displays and identifies this object\u0027s properties.\n     *\n     * @return a String representation of this object\n     */\n    @Override\n    public String toString() {\n        return delegate.toString();\n    }\n\n    /*\n     * The remaining methods are included for compatibility with the Java 2\n     * platform Vector class.\n     */\n    /**\n     * Returns an array containing all of the elements in this list in the\n     * correct order.\n     *\n     * @return an array containing the elements of the list\n     * @see Vector#toArray()\n     */\n    public AbstractNote[] toArray() {\n        AbstractNote[] an \u003d new AbstractNote[delegate.size()];\n        delegate.copyInto(an);\n        return an;\n    }\n\n    /**\n     * Returns the element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to return\n     */\n    public AbstractNote get(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Replaces the element at the specified position in this list with the\n     * specified element.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to replace\n     * @param element\n     *            element to be stored at the specified position\n     * @return the element previously at the specified position\n     */\n    public AbstractNote set(int index, AbstractNote element) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.setElementAt(element, index);\n        fireContentChanged(this, index);\n        return an;\n    }\n\n    /**\n     * Inserts the specified element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index at which the specified element is to be inserted\n     * @param element\n     *            element to be inserted\n     */\n    public void add(int index, AbstractNote element) {\n        delegate.insertElementAt(element, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the element at the specified position in this list. Returns the\n     * element that was removed from the list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            the index of the element to removed\n     */\n    public AbstractNote remove(int index) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n        return an;\n    }\n\n    /**\n     * Returns the value at position \u003ccode\u003eindex\u003c/code\u003e\n     *\n     * @return the value at position \u003ccode\u003eindex\u003c/code\u003e\n     * @see NoteListModel#getElementAt(int)\n     */\n    public AbstractNote getElementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void addNoteListDataListener(NoteListDataListener l) {\n        this.dataListener \u003d l;\n    }\n\n    /**\n     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void removeNoteListDataListener() {\n        this.dataListener \u003d null;\n    }\n\n    /**\n     * Fired when one element\u0027s value is changed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireContentChanged(Object source, int index) {\n        dataListener.contentChanged(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one new element is added.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index added element\u0027s index\n     */\n    protected void fireItemAdded(Object source, int index) {\n        dataListener.itemAdded(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one element is removed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireItemRemoved(Object source, int index) {\n        dataListener.itemRemoved(new NoteListDataEvent(source, index));\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_12Test.java",
    "test_prompt": "// DefaultNoteListModel_12Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#toArray()} method.\n*/\nclass DefaultNoteListModel_12Test {",
    "method_signature": "toArray()",
    "suffix": "12"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\n/*\n * @(#)DefaultNoteListModel.java\n * Created on 2005-8-4\n * Inspirento, Copyright AllenStudio, All Rights Reserved\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n *\n */\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    private Vector\u003cAbstractNote\u003e delegate \u003d new Vector\u003cAbstractNote\u003e();\n\n    // Uni-listener temporary\n    private NoteListDataListener dataListener;\n\n    /**\n     * Returns the current capacity of this list.\n     *\n     * @return the current capacity\n     * @see Vector#capacity()\n     */\n    public int capacity() {\n        return delegate.capacity();\n    }\n\n    /**\n     * Returns the number of components in this list.\n     *\n     * @return the number of components in this list\n     * @see Vector#size()\n     */\n    public int size() {\n        return delegate.size();\n    }\n\n    /**\n     * Tests whether this list has any components.\n     *\n     * @return \u003ccode\u003etrue\u003c/code\u003e if and only if this list has no components,\n     *         that is, its size is zero; \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#isEmpty()\n     */\n    public boolean isEmpty() {\n        return delegate.isEmpty();\n    }\n\n    /**\n     * Returns an enumeration of the components of this list.\n     *\n     * @return an enumeration of the components of this list\n     * @see Vector#elements()\n     */\n    public Enumeration\u003cAbstractNote\u003e elements() {\n        return delegate.elements();\n    }\n\n    /**\n     * Tests whether the specified object is a component in this list.\n     *\n     * @param elem\n     *            an object\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the specified object is the same as a\n     *         component in this list\n     * @see Vector#contains(Object)\n     */\n    public boolean contains(AbstractNote elem) {\n        return delegate.contains(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            an object\n     * @return the index of the first occurrence of the argument in this list;\n     *         returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#indexOf(Object)\n     */\n    public int indexOf(AbstractNote elem) {\n        return delegate.indexOf(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e, beginning the\n     * search at \u003ccode\u003eindex\u003c/code\u003e.\n     *\n     * @param elem\n     *            an desired component\n     * @param index\n     *            the index from which to begin searching\n     * @return the index where the first occurrence of \u003ccode\u003eelem\u003c/code\u003e is\n     *         found after \u003ccode\u003eindex\u003c/code\u003e; returns \u003ccode\u003e-1\u003c/code\u003e if\n     *         the \u003ccode\u003eelem\u003c/code\u003e is not found in the list\n     * @see Vector#indexOf(Object,int)\n     */\n    public int indexOf(AbstractNote elem, int index) {\n        return delegate.indexOf(elem, index);\n    }\n\n    /**\n     * Returns the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            the desired component\n     * @return the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e in the\n     *         list; returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object)\n     */\n    public int lastIndexOf(AbstractNote elem) {\n        return delegate.lastIndexOf(elem);\n    }\n\n    /**\n     * Searches backwards for \u003ccode\u003eelem\u003c/code\u003e, starting from the specified\n     * index, and returns an index to it.\n     *\n     * @param elem\n     *            the desired component\n     * @param index\n     *            the index to start searching from\n     * @return the index of the last occurrence of the \u003ccode\u003eelem\u003c/code\u003e in\n     *         this list at position less than \u003ccode\u003eindex\u003c/code\u003e; returns\n     *         \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object,int)\n     */\n    public int lastIndexOf(AbstractNote elem, int index) {\n        return delegate.lastIndexOf(elem, index);\n    }\n\n    /**\n     * Returns the component at the specified index. Throws an\n     * \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is negative or\n     * not less than the size of the list. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although\n     * this method is not deprecated, the preferred method to use is\n     * \u003ccode\u003eget(int)\u003c/code\u003e, which implements the \u003ccode\u003eList\u003c/code\u003e\n     * interface defined in the 1.2 Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            an index into this list\n     * @return the component at the specified index\n     * @see #get(int)\n     * @see Vector#elementAt(int)\n     */\n    public AbstractNote elementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Returns the first component of this list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the first component of this list\n     * @see java.util.Vector#firstElement()\n     */\n    public AbstractNote firstElement() {\n        return delegate.firstElement();\n    }\n\n    /**\n     * Returns the last component of the list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the last component of the list\n     * @see Vector#lastElement()\n     */\n    public AbstractNote lastElement() {\n        return delegate.lastElement();\n    }\n\n    /**\n     * Return the number of components in the list.\n     *\n     * @return the number of components in the list\n     * @see NoteListModel#getSize()\n     */\n    public int getSize() {\n        return delegate.size();\n    }\n\n    /**\n     * Sets the component at the specified \u003ccode\u003eindex\u003c/code\u003e of this list to\n     * be the specified object. The previous component at that position is\n     * discarded.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eset(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            what the component is to be set to\n     * @param index\n     *            the specified index\n     * @see #set(int,Object)\n     * @see Vector#setElementAt(Object,int)\n     */\n    public void setElementAt(AbstractNote obj, int index) {\n        delegate.setElementAt(obj, index);\n        fireContentChanged(this, index);\n    }\n\n    /**\n     * Deletes the component at the specified index.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eremove(int)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            the index of the object to remove\n     * @see #remove(int)\n     * @see Vector#removeElementAt(int)\n     */\n    public void removeElementAt(int index) {\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n    }\n\n    /**\n     * Inserts the specified object as a component in this list at the specified\n     * \u003ccode\u003eindex\u003c/code\u003e.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eadd(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            the component to insert\n     * @param index\n     *            where to insert the new component\n     * @exception ArrayIndexOutOfBoundsException\n     *                if the index was invalid\n     * @see #add(int,Object)\n     * @see Vector#insertElementAt(Object,int)\n     */\n    public void insertElementAt(AbstractNote obj, int index) {\n        delegate.insertElementAt(obj, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Adds the specified component to the end of this list.\n     *\n     * @param obj\n     *            the component to be added\n     * @see Vector#addElement(Object)\n     */\n    public void addElement(AbstractNote obj) {\n        int index \u003d delegate.size();\n        delegate.addElement(obj);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the first (lowest-indexed) occurrence of the argument from this\n     * list.\n     *\n     * @param obj\n     *            the component to be removed\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the argument was a component of this list;\n     *         \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#removeElement(Object)\n     */\n    public boolean removeElement(AbstractNote obj) {\n        int index \u003d indexOf(obj);\n        boolean an \u003d delegate.removeElement(obj);\n        if (index \u003e\u003d 0) {\n            fireItemRemoved(this, index);\n        }\n        return an;\n    }\n\n    /**\n     * Returns a string that displays and identifies this object\u0027s properties.\n     *\n     * @return a String representation of this object\n     */\n    @Override\n    public String toString() {\n        return delegate.toString();\n    }\n\n    /*\n     * The remaining methods are included for compatibility with the Java 2\n     * platform Vector class.\n     */\n    /**\n     * Returns an array containing all of the elements in this list in the\n     * correct order.\n     *\n     * @return an array containing the elements of the list\n     * @see Vector#toArray()\n     */\n    public AbstractNote[] toArray() {\n        AbstractNote[] an \u003d new AbstractNote[delegate.size()];\n        delegate.copyInto(an);\n        return an;\n    }\n\n    /**\n     * Returns the element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to return\n     */\n    public AbstractNote get(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Replaces the element at the specified position in this list with the\n     * specified element.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to replace\n     * @param element\n     *            element to be stored at the specified position\n     * @return the element previously at the specified position\n     */\n    public AbstractNote set(int index, AbstractNote element) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.setElementAt(element, index);\n        fireContentChanged(this, index);\n        return an;\n    }\n\n    /**\n     * Inserts the specified element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index at which the specified element is to be inserted\n     * @param element\n     *            element to be inserted\n     */\n    public void add(int index, AbstractNote element) {\n        delegate.insertElementAt(element, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the element at the specified position in this list. Returns the\n     * element that was removed from the list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            the index of the element to removed\n     */\n    public AbstractNote remove(int index) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n        return an;\n    }\n\n    /**\n     * Returns the value at position \u003ccode\u003eindex\u003c/code\u003e\n     *\n     * @return the value at position \u003ccode\u003eindex\u003c/code\u003e\n     * @see NoteListModel#getElementAt(int)\n     */\n    public AbstractNote getElementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void addNoteListDataListener(NoteListDataListener l) {\n        this.dataListener \u003d l;\n    }\n\n    /**\n     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void removeNoteListDataListener() {\n        this.dataListener \u003d null;\n    }\n\n    /**\n     * Fired when one element\u0027s value is changed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireContentChanged(Object source, int index) {\n        dataListener.contentChanged(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one new element is added.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index added element\u0027s index\n     */\n    protected void fireItemAdded(Object source, int index) {\n        dataListener.itemAdded(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one element is removed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireItemRemoved(Object source, int index) {\n        dataListener.itemRemoved(new NoteListDataEvent(source, index));\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_13Test.java",
    "test_prompt": "// DefaultNoteListModel_13Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#get(int)} method.\n*/\nclass DefaultNoteListModel_13Test {",
    "method_signature": "get(int)",
    "suffix": "13"
  },
  {
    "numberTests": "ten",
    "original_code": "// DefaultNoteListModel.java\n/*\n * @(#)DefaultNoteListModel.java\n * Created on 2005-8-4\n * Inspirento, Copyright AllenStudio, All Rights Reserved\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n *\n */\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\n\n/**\n * Default implementation of \u003ccode\u003eNoteListModel\u003c/code\u003e\n *\n * @author Allen Chue\n */\npublic class DefaultNoteListModel implements NoteListModel {\n\n    private Vector\u003cAbstractNote\u003e delegate \u003d new Vector\u003cAbstractNote\u003e();\n\n    // Uni-listener temporary\n    private NoteListDataListener dataListener;\n\n    /**\n     * Returns the current capacity of this list.\n     *\n     * @return the current capacity\n     * @see Vector#capacity()\n     */\n    public int capacity() {\n        return delegate.capacity();\n    }\n\n    /**\n     * Returns the number of components in this list.\n     *\n     * @return the number of components in this list\n     * @see Vector#size()\n     */\n    public int size() {\n        return delegate.size();\n    }\n\n    /**\n     * Tests whether this list has any components.\n     *\n     * @return \u003ccode\u003etrue\u003c/code\u003e if and only if this list has no components,\n     *         that is, its size is zero; \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#isEmpty()\n     */\n    public boolean isEmpty() {\n        return delegate.isEmpty();\n    }\n\n    /**\n     * Returns an enumeration of the components of this list.\n     *\n     * @return an enumeration of the components of this list\n     * @see Vector#elements()\n     */\n    public Enumeration\u003cAbstractNote\u003e elements() {\n        return delegate.elements();\n    }\n\n    /**\n     * Tests whether the specified object is a component in this list.\n     *\n     * @param elem\n     *            an object\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the specified object is the same as a\n     *         component in this list\n     * @see Vector#contains(Object)\n     */\n    public boolean contains(AbstractNote elem) {\n        return delegate.contains(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            an object\n     * @return the index of the first occurrence of the argument in this list;\n     *         returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#indexOf(Object)\n     */\n    public int indexOf(AbstractNote elem) {\n        return delegate.indexOf(elem);\n    }\n\n    /**\n     * Searches for the first occurrence of \u003ccode\u003eelem\u003c/code\u003e, beginning the\n     * search at \u003ccode\u003eindex\u003c/code\u003e.\n     *\n     * @param elem\n     *            an desired component\n     * @param index\n     *            the index from which to begin searching\n     * @return the index where the first occurrence of \u003ccode\u003eelem\u003c/code\u003e is\n     *         found after \u003ccode\u003eindex\u003c/code\u003e; returns \u003ccode\u003e-1\u003c/code\u003e if\n     *         the \u003ccode\u003eelem\u003c/code\u003e is not found in the list\n     * @see Vector#indexOf(Object,int)\n     */\n    public int indexOf(AbstractNote elem, int index) {\n        return delegate.indexOf(elem, index);\n    }\n\n    /**\n     * Returns the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e.\n     *\n     * @param elem\n     *            the desired component\n     * @return the index of the last occurrence of \u003ccode\u003eelem\u003c/code\u003e in the\n     *         list; returns \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object)\n     */\n    public int lastIndexOf(AbstractNote elem) {\n        return delegate.lastIndexOf(elem);\n    }\n\n    /**\n     * Searches backwards for \u003ccode\u003eelem\u003c/code\u003e, starting from the specified\n     * index, and returns an index to it.\n     *\n     * @param elem\n     *            the desired component\n     * @param index\n     *            the index to start searching from\n     * @return the index of the last occurrence of the \u003ccode\u003eelem\u003c/code\u003e in\n     *         this list at position less than \u003ccode\u003eindex\u003c/code\u003e; returns\n     *         \u003ccode\u003e-1\u003c/code\u003e if the object is not found\n     * @see Vector#lastIndexOf(Object,int)\n     */\n    public int lastIndexOf(AbstractNote elem, int index) {\n        return delegate.lastIndexOf(elem, index);\n    }\n\n    /**\n     * Returns the component at the specified index. Throws an\n     * \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is negative or\n     * not less than the size of the list. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although\n     * this method is not deprecated, the preferred method to use is\n     * \u003ccode\u003eget(int)\u003c/code\u003e, which implements the \u003ccode\u003eList\u003c/code\u003e\n     * interface defined in the 1.2 Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            an index into this list\n     * @return the component at the specified index\n     * @see #get(int)\n     * @see Vector#elementAt(int)\n     */\n    public AbstractNote elementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Returns the first component of this list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the first component of this list\n     * @see java.util.Vector#firstElement()\n     */\n    public AbstractNote firstElement() {\n        return delegate.firstElement();\n    }\n\n    /**\n     * Returns the last component of the list. Throws a\n     * \u003ccode\u003eNoSuchElementException\u003c/code\u003e if this vector has no components.\n     *\n     * @return the last component of the list\n     * @see Vector#lastElement()\n     */\n    public AbstractNote lastElement() {\n        return delegate.lastElement();\n    }\n\n    /**\n     * Return the number of components in the list.\n     *\n     * @return the number of components in the list\n     * @see NoteListModel#getSize()\n     */\n    public int getSize() {\n        return delegate.size();\n    }\n\n    /**\n     * Sets the component at the specified \u003ccode\u003eindex\u003c/code\u003e of this list to\n     * be the specified object. The previous component at that position is\n     * discarded.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eset(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            what the component is to be set to\n     * @param index\n     *            the specified index\n     * @see #set(int,Object)\n     * @see Vector#setElementAt(Object,int)\n     */\n    public void setElementAt(AbstractNote obj, int index) {\n        delegate.setElementAt(obj, index);\n        fireContentChanged(this, index);\n    }\n\n    /**\n     * Deletes the component at the specified index.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eremove(int)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param index\n     *            the index of the object to remove\n     * @see #remove(int)\n     * @see Vector#removeElementAt(int)\n     */\n    public void removeElementAt(int index) {\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n    }\n\n    /**\n     * Inserts the specified object as a component in this list at the specified\n     * \u003ccode\u003eindex\u003c/code\u003e.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * invalid. \u003cblockquote\u003e \u003cb\u003eNote:\u003c/b\u003e Although this method is not\n     * deprecated, the preferred method to use is \u003ccode\u003eadd(int,Object)\u003c/code\u003e,\n     * which implements the \u003ccode\u003eList\u003c/code\u003e interface defined in the 1.2\n     * Collections framework. \u003c/blockquote\u003e\n     *\n     * @param obj\n     *            the component to insert\n     * @param index\n     *            where to insert the new component\n     * @exception ArrayIndexOutOfBoundsException\n     *                if the index was invalid\n     * @see #add(int,Object)\n     * @see Vector#insertElementAt(Object,int)\n     */\n    public void insertElementAt(AbstractNote obj, int index) {\n        delegate.insertElementAt(obj, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Adds the specified component to the end of this list.\n     *\n     * @param obj\n     *            the component to be added\n     * @see Vector#addElement(Object)\n     */\n    public void addElement(AbstractNote obj) {\n        int index \u003d delegate.size();\n        delegate.addElement(obj);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the first (lowest-indexed) occurrence of the argument from this\n     * list.\n     *\n     * @param obj\n     *            the component to be removed\n     * @return \u003ccode\u003etrue\u003c/code\u003e if the argument was a component of this list;\n     *         \u003ccode\u003efalse\u003c/code\u003e otherwise\n     * @see Vector#removeElement(Object)\n     */\n    public boolean removeElement(AbstractNote obj) {\n        int index \u003d indexOf(obj);\n        boolean an \u003d delegate.removeElement(obj);\n        if (index \u003e\u003d 0) {\n            fireItemRemoved(this, index);\n        }\n        return an;\n    }\n\n    /**\n     * Returns a string that displays and identifies this object\u0027s properties.\n     *\n     * @return a String representation of this object\n     */\n    @Override\n    public String toString() {\n        return delegate.toString();\n    }\n\n    /*\n     * The remaining methods are included for compatibility with the Java 2\n     * platform Vector class.\n     */\n    /**\n     * Returns an array containing all of the elements in this list in the\n     * correct order.\n     *\n     * @return an array containing the elements of the list\n     * @see Vector#toArray()\n     */\n    public AbstractNote[] toArray() {\n        AbstractNote[] an \u003d new AbstractNote[delegate.size()];\n        delegate.copyInto(an);\n        return an;\n    }\n\n    /**\n     * Returns the element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to return\n     */\n    public AbstractNote get(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * Replaces the element at the specified position in this list with the\n     * specified element.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index of element to replace\n     * @param element\n     *            element to be stored at the specified position\n     * @return the element previously at the specified position\n     */\n    public AbstractNote set(int index, AbstractNote element) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.setElementAt(element, index);\n        fireContentChanged(this, index);\n        return an;\n    }\n\n    /**\n     * Inserts the specified element at the specified position in this list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e).\n     *\n     * @param index\n     *            index at which the specified element is to be inserted\n     * @param element\n     *            element to be inserted\n     */\n    public void add(int index, AbstractNote element) {\n        delegate.insertElementAt(element, index);\n        fireItemAdded(this, index);\n    }\n\n    /**\n     * Removes the element at the specified position in this list. Returns the\n     * element that was removed from the list.\n     * \u003cp\u003e\n     * Throws an \u003ccode\u003eArrayIndexOutOfBoundsException\u003c/code\u003e if the index is\n     * out of range (\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e).\n     *\n     * @param index\n     *            the index of the element to removed\n     */\n    public AbstractNote remove(int index) {\n        AbstractNote an \u003d delegate.elementAt(index);\n        delegate.removeElementAt(index);\n        fireItemRemoved(this, index);\n        return an;\n    }\n\n    /**\n     * Returns the value at position \u003ccode\u003eindex\u003c/code\u003e\n     *\n     * @return the value at position \u003ccode\u003eindex\u003c/code\u003e\n     * @see NoteListModel#getElementAt(int)\n     */\n    public AbstractNote getElementAt(int index) {\n        return delegate.elementAt(index);\n    }\n\n    /**\n     * @see NoteListModel#addNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void addNoteListDataListener(NoteListDataListener l) {\n        this.dataListener \u003d l;\n    }\n\n    /**\n     * @see com.allenstudio.ir.ui.NoteListModel#removeNoteListDataListener(com.allenstudio.ir.event.NoteListDataListener)\n     */\n    public void removeNoteListDataListener() {\n        this.dataListener \u003d null;\n    }\n\n    /**\n     * Fired when one element\u0027s value is changed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireContentChanged(Object source, int index) {\n        dataListener.contentChanged(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one new element is added.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index added element\u0027s index\n     */\n    protected void fireItemAdded(Object source, int index) {\n        dataListener.itemAdded(new NoteListDataEvent(source, index));\n    }\n\n    /**\n     * Fired when one element is removed.\n     *\n     * @param source the \u003ccode\u003eNoteListModel\u003c/code\u003e changed, typically \"this\"\n     * @param index changed element\u0027s index\n     */\n    protected void fireItemRemoved(Object source, int index) {\n        dataListener.itemRemoved(new NoteListDataEvent(source, index));\n    }\n}\n",
    "package": "com.allenstudio.ir.ui",
    "classname": "DefaultNoteListModel",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/ui/DefaultNoteListModel_14Test.java",
    "test_prompt": "// DefaultNoteListModel_14Test.java\npackage com.allenstudio.ir.ui;\n\nimport com.allenstudio.ir.core.plugins.AbstractNote;\nimport com.allenstudio.ir.event.NoteListDataEvent;\nimport com.allenstudio.ir.event.NoteListDataListener;\nimport java.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link DefaultNoteListModel}.\n* It contains ten unit test cases for the {@link DefaultNoteListModel#remove(int)} method.\n*/\nclass DefaultNoteListModel_14Test {",
    "method_signature": "remove(int)",
    "suffix": "14"
  },
  {
    "numberTests": "ten",
    "original_code": "// ConfigurationManager.java\n/*\n * @(#)ConfigurationManager.java\n * Created on 2005-8-10\n * Inspirento, Copyright AllenStudio, All Rights Reserved\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n *\n */\npackage com.allenstudio.ir.core;\n\nimport java.util.*;\nimport java.io.*;\nimport com.allenstudio.ir.util.*;\n\n/**\n * Manages the configuration for Inspirento.\u003cbr\u003e\n * This manager uses XML format to store information.\n * The configuration file is, by default, saved in the\n * \"config\" directory and named \"config.xml\". Clearly,\n * this class should be a singleton, so we use\n * {@link #getInstance()} to get an instance and call\n * other instance methods to get the settings needed\n * by Inspirento, such as \"window.size\", \"window.location\",\n * and etc.\u003cbr\u003e\n * The program first tries to get the configuration from\n * this \u003ccode\u003eConfigurationManager\u003c/code\u003e. If it fails to\n * get any key, it uses the default settings presetted in\n * the protected \u003ccode\u003edefault\u003c/code\u003e field.\n *\n * @author Allen Chue\n */\npublic class ConfigurationManager extends Properties {\n\n    public static final String CONFIG_DIRECTORY \u003d \"config\";\n\n    public static final String CONFIG_FILE \u003d \"config.xml\";\n\n    public static final String COMMON_PREFIX \u003d \"Inspirento.\";\n\n    private static ConfigurationManager instance \u003d null;\n\n    private XmlIO xmlIO;\n\n    /**\n     * Private constructor for singleton use.\n     */\n    private ConfigurationManager() {\n        initDefaultSettings();\n        readIn();\n    }\n\n    public static ConfigurationManager getInstance() {\n        if (instance !\u003d null) {\n            return instance;\n        } else {\n            instance \u003d new ConfigurationManager();\n            return instance;\n        }\n    }\n\n    public void readIn() {\n        try {\n            File configFile \u003d new File(CONFIG_DIRECTORY + System.getProperty(\"file.separator\") + //$NON-NLS-1$\n            CONFIG_FILE);\n            if (configFile.exists()) {\n                FileInputStream configStream \u003d new FileInputStream(configFile);\n                xmlIO \u003d new XmlIO();\n                xmlIO.load(configStream);\n                configStream.close();\n            }\n        } catch (Exception e) {\n            System.out.println(\"Cannot load configuration file\" + \" supposed to be at \\\"config\\\\config.xml\\\"\" + //$NON-NLS-1$\n            \"\\nDefault settings will be stored as the replacement.\");\n            writeDefaultsToFile();\n            e.printStackTrace();\n        }\n    }\n\n    public void writeBack() {\n        try {\n            FileOutputStream configFile \u003d new FileOutputStream(CONFIG_DIRECTORY + System.getProperty(\"file.separator\") + CONFIG_FILE);\n            xmlIO.write(configFile);\n            configFile.close();\n        } catch (Exception e) {\n            System.out.println(\"Cannot write configuration file\" + //$NON-NLS-1$\n            \" to \\\"config\\\\config.xml\\\"\");\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Uses XML parser to get the specified property.\n     * If there is no such a key, the method returns\n     * \u003ccode\u003enull\u003c/code\u003e.\n     * @param key the key of the property\n     * @return the property value\n     */\n    @Override\n    public synchronized String getProperty(String key) {\n        String value \u003d xmlIO.getRoot().getElement(Constants.PROJECT_NAME + \".\" + getPath(key)[0]).getAttribute(getPath(key)[1]);\n        if (value \u003d\u003d null) {\n            //Perhaps some element is lost in the file\n            value \u003d defaults.getProperty(key);\n            //null value has no side effect\n            setProperty(key, value);\n            new Thread() {\n\n                @Override\n                public void run() {\n                    writeBack();\n                }\n            }.start();\n        }\n        return value;\n    }\n\n    @Override\n    public synchronized Object setProperty(String key, String value) {\n        xmlIO.getRoot().getElement(Constants.PROJECT_NAME + \".\" + getPath(key)[0]).addAttribute(getPath(key)[1], value);\n        return value;\n    }\n\n    /**\n     * When the configuration file is lost, this method\n     * is used to write the default settings stored in\n     * the program itself to file.\n     */\n    private void writeDefaultsToFile() {\n        Enumeration keys \u003d defaults.keys();\n        XmlElement xe \u003d new XmlElement(Constants.PROJECT_NAME);\n        xmlIO \u003d new XmlIO(xe);\n        for (; keys.hasMoreElements(); ) {\n            String pathText \u003d (String) keys.nextElement();\n            String[] path \u003d getPath(pathText);\n            //Test if the element to be modified exists\n            XmlElement elementAdded \u003d xe.getElement(path[0]);\n            if (elementAdded \u003d\u003d null) {\n                elementAdded \u003d xe.addSubElement(path[0]);\n            }\n            elementAdded.addAttribute(path[1], defaults.getProperty(pathText));\n        }\n        try {\n            FileOutputStream configFile \u003d new FileOutputStream(CONFIG_DIRECTORY + System.getProperty(\"file.separator\") + //$NON-NLS-1$\n            CONFIG_FILE);\n            xmlIO.write(configFile);\n            configFile.close();\n        } catch (Exception e) {\n            System.out.println(\"Cannot write configuration file\" + //$NON-NLS-1$\n            \" to \\\"config\\\\config.xml\\\"\");\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Returns an string array of length 2.\n     * The parameter \u003ccode\u003epathText\u003c/code\u003e is supposed to\n     * be a string separated with dots. For example,\n     * \"Inspirento.window.location\" is a valid parameter.\n     * This method puts the token after the last dot in\n     * the second position of the result array, and the\n     * remaining string(excluding the last dot) in the first\n     * position of the result array. It is a rivate helping method.\n     * \u003cbr\u003e\n     * Example: getPath(\"Inspirento.window.location\") returns\n     * the array {\"Inspirento.window\", \"location\"}.\u003cbr\u003e\n     * \u003cem\u003eNo format checking is done in this method! \u003ccode\u003e\n     * ArrayOutOfBoundsException\u003c/code\u003e will be thrown\n     * when no dots are found in the string.\u003c/em\u003e\n     * @param pathText the path text to be processed\n     * @return an array containing the result\n     */\n    private static String[] getPath(String pathText) {\n        int dotPos \u003d pathText.lastIndexOf(\u0027.\u0027);\n        String[] result \u003d new String[2];\n        result[0] \u003d pathText.substring(0, dotPos);\n        result[1] \u003d pathText.substring(dotPos + 1);\n        return result;\n    }\n\n    private void initDefaultSettings() {\n        String[] configDefaults \u003d { \"window.location\", \"400,300\", \"window.size\", \"450,300\" };\n        defaults \u003d new Properties();\n        for (int i \u003d 0, max \u003d configDefaults.length; i \u003c max; i +\u003d 2) {\n            String value \u003d configDefaults[i + 1];\n            defaults.setProperty(configDefaults[i], value);\n        }\n    }\n}\n",
    "package": "com.allenstudio.ir.core",
    "classname": "ConfigurationManager",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/core/ConfigurationManager_1Test.java",
    "test_prompt": "// ConfigurationManager_1Test.java\npackage com.allenstudio.ir.core;\n\nimport java.util.*;\nimport java.io.*;\nimport com.allenstudio.ir.util.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link ConfigurationManager}.\n* It contains ten unit test cases for the {@link ConfigurationManager#getProperty(String)} method.\n*/\nclass ConfigurationManager_1Test {",
    "method_signature": "getProperty(String)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// XmlElement.java\n/*\n * @(#)XmlElement.java\n * Created on 2005-8-12\n */\npackage com.allenstudio.ir.util;\n\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\n\n/**\n * The XmlElement is a generic containment class for elements within an XML\n * file.\n * \u003cp\u003e\n *\n * It extends Observable which should be used for gui elements which are\n * interested in configuration changes.\n * \u003cp\u003e\n *\n * Show interested in:\n *\n * \u003cpre\u003e\n * xmlElement.addObserver(yourObserver);\n * \u003c/pre\u003e\n *\n * \u003cp\u003e\n * When making bigger changes on XmlElement and probably its subnodes and/or a\n * greater number of attributes at once, you should just change XmlElement\n * directly and manually notify the Observers by calling:\n * \u003cp\u003e\n *\n * \u003cpre\u003e\n * xmlElement.setChanged();\n * xmlElement.notifyObservers();\n * \u003c/pre\u003e\n *\n * \u003cp\u003e\n * There a good introduction for the Observable/Observer pattern in\n * Model/View/Controller based applications at www.javaworld.com: -\n * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}\n *\n * @author fdietz\n */\npublic class XmlElement extends Observable implements Cloneable {\n\n    String name;\n\n    String data;\n\n    Hashtable\u003cString, String\u003e attributes;\n\n    List\u003cXmlElement\u003e subElements;\n\n    XmlElement parent;\n\n    /**\n     * Constructor\n     */\n    public XmlElement() {\n        subElements \u003d new Vector\u003cXmlElement\u003e();\n        this.attributes \u003d new Hashtable\u003cString, String\u003e(10);\n    }\n\n    /**\n     * **\n     *\n     * Constructor\n     *\n     * @param String\n     *            Name\n     */\n    public XmlElement(String name) {\n        this.name \u003d name;\n        this.attributes \u003d new Hashtable\u003cString, String\u003e(10);\n        subElements \u003d new Vector\u003cXmlElement\u003e();\n        data \u003d \"\";\n    }\n\n    /**\n     * **\n     *\n     * Constructor\n     *\n     * @param String\n     *            Name\n     * @param Hashtable\n     *            Attributes\n     */\n    public XmlElement(String name, Hashtable\u003cString, String\u003e attributes) {\n        this.name \u003d name;\n        this.attributes \u003d attributes;\n        subElements \u003d new Vector\u003cXmlElement\u003e();\n    }\n\n    /**\n     * **\n     *\n     * Constructor\n     *\n     * @param Name\n     *            String\n     * @param Data\n     *            String\n     */\n    public XmlElement(String name, String data) {\n        this.name \u003d name;\n        this.data \u003d data;\n        subElements \u003d new Vector\u003cXmlElement\u003e();\n        this.attributes \u003d new Hashtable\u003cString, String\u003e(10);\n    }\n\n    /**\n     * Add attribute to this xml element.\n     *\n     * @param name\n     *            name of key\n     * @param value\n     *            new attribute value\n     * @return old attribute value\n     */\n    public Object addAttribute(String name, String value) {\n        if ((value !\u003d null) \u0026\u0026 (name !\u003d null)) {\n            Object returnValue \u003d attributes.put(name, value);\n            return returnValue;\n        }\n        return null;\n    }\n\n    /**\n     * **\n     *\n     * @return String\n     * @param String\n     *            Name\n     */\n    public String getAttribute(String name) {\n        return ((String) attributes.get(name));\n    }\n\n    public String getAttribute(String name, String defaultValue) {\n        if (getAttribute(name) \u003d\u003d null) {\n            addAttribute(name, defaultValue);\n        }\n        return getAttribute(name);\n    }\n\n    /**\n     * **\n     *\n     * @return String\n     * @param String\n     *            Name\n     */\n    public Hashtable\u003cString, String\u003e getAttributes() {\n        return attributes;\n    }\n\n    /**\n     * **\n     *\n     * @param Attrs\n     *            Hashtable to use as the attributes\n     */\n    public void setAttributes(Hashtable\u003cString, String\u003e attrs) {\n        attributes \u003d attrs;\n    }\n\n    /**\n     * **\n     *\n     * @return Enumeration\n     */\n    public Enumeration getAttributeNames() {\n        return (attributes.keys());\n    }\n\n    /**\n     * **\n     *\n     * @return boolean\n     * @param XmlElement\n     *            E\n     */\n    public boolean addElement(XmlElement e) {\n        e.setParent(this);\n        return (subElements.add(e));\n    }\n\n    public XmlElement removeElement(XmlElement e) {\n        XmlElement child \u003d null;\n        for (int i \u003d 0; i \u003c subElements.size(); i++) {\n            child \u003d (XmlElement) subElements.get(i);\n            // FIXME -- This will most likely not work.\n            //          You want the element removed if the contents are the same\n            //          Not just if the element reference is the same.\n            if (child \u003d\u003d e) {\n                subElements.remove(i);\n            }\n        }\n        return (child);\n    }\n\n    public XmlElement removeElement(int index) {\n        return (XmlElement) subElements.remove(index);\n    }\n\n    public void removeAllElements() {\n        subElements.clear();\n    }\n\n    /**\n     * convienience method for the TreeView\n     *\n     * this method is modeled after the DefaultMutableTreeNode-class\n     *\n     * DefaultMutableTreeNode wraps XmlElement for this purpose\n     */\n    public void removeFromParent() {\n        if (parent \u003d\u003d null) {\n            return;\n        }\n        parent.removeElement(this);\n        parent \u003d null;\n    }\n\n    public void append(XmlElement e) {\n        e.removeFromParent();\n        addElement(e);\n    }\n\n    /**\n     * convienience method for the TreeView\n     *\n     * @param e\n     * @param index\n     */\n    public void insertElement(XmlElement e, int index) {\n        e.removeFromParent();\n        subElements.add(index, e);\n        e.setParent(this);\n    }\n\n    /**\n     * **\n     *\n     * @return Vector\n     */\n    public List getElements() {\n        return subElements;\n    }\n\n    public int count() {\n        return subElements.size();\n    }\n\n    /**\n     * Returns the element whose hierachy is indicated\n     * by \u003ccode\u003epath\u003c/code\u003e. The path is separated with\n     * periods(\".\").\u003cbr\u003e\n     * \u003cem\u003eNote: if one node has more than one elements\n     * that have the same name, that is, if its subnodes\n     * have the same path, only the first one is returned.\n     * \u003c/em\u003e\n     * @return the first element qualified with the path\n     * @param path the path string of the specified element\n     */\n    public XmlElement getElement(String path) {\n        int i \u003d path.indexOf(\u0027.\u0027);\n        String topName;\n        String subName;\n        if (i \u003d\u003d 0) {\n            path \u003d path.substring(1);\n            i \u003d path.indexOf(\u0027.\u0027);\n        }\n        if (i \u003e 0) {\n            topName \u003d path.substring(0, i);\n            subName \u003d path.substring(i + 1);\n        } else {\n            topName \u003d path;\n            subName \u003d null;\n        }\n        int j;\n        for (j \u003d 0; j \u003c subElements.size(); j++) {\n            if (((XmlElement) subElements.get(j)).getName().equals(topName)) {\n                if (subName !\u003d null) {\n                    return (((XmlElement) subElements.get(j)).getElement(subName));\n                } else {\n                    return ((XmlElement) subElements.get(j));\n                }\n            }\n        }\n        return null;\n    }\n\n    public XmlElement getElement(int index) {\n        return (XmlElement) subElements.get(index);\n    }\n\n    /**\n     * Adds a sub element to this one. The path\n     * is separated with dots(\".\").\n     *\n     * @return the \u003ccode\u003eXmlElement\u003c/code\u003e added\n     * @param path The subpath of the sub element to add\n     */\n    public XmlElement addSubElement(String path) {\n        XmlElement parent \u003d this;\n        XmlElement child;\n        String name;\n        while (path.indexOf(\u0027.\u0027) !\u003d -1) {\n            name \u003d path.substring(0, path.indexOf(\u0027.\u0027));\n            path \u003d path.substring(path.indexOf(\u0027.\u0027) + 1);\n            // if path startsWith \"/\" -\u003e skip\n            if (name.length() \u003d\u003d 0)\n                continue;\n            if (parent.getElement(name) !\u003d null) {\n                parent \u003d parent.getElement(name);\n            } else {\n                child \u003d new XmlElement(name);\n                parent.addElement(child);\n                parent \u003d child;\n            }\n        }\n        child \u003d new XmlElement(path);\n        parent.addElement(child);\n        return child;\n    }\n\n    /**\n     * Adds a sub element to this one\n     *\n     * @return XmlElement\n     * @param element\n     *            The XmlElement to add\n     */\n    public XmlElement addSubElement(XmlElement e) {\n        e.setParent(this);\n        subElements.add(e);\n        return e;\n    }\n\n    /**\n     * Adds a sub element to this one\n     *\n     * @return XmlElement\n     * @param Name\n     *            The name of the sub element to add\n     * @param Data\n     *            String Data for this element\n     */\n    public XmlElement addSubElement(String name, String data) {\n        XmlElement e \u003d new XmlElement(name);\n        e.setData(data);\n        e.setParent(this);\n        subElements.add(e);\n        return e;\n    }\n\n    /**\n     * Sets the parent element\n     *\n     * @param Parent\n     *            The XmlElement that contains this one\n     */\n    public void setParent(XmlElement parent) {\n        this.parent \u003d parent;\n    }\n\n    /**\n     * Gives the XmlElement containing the current element\n     *\n     * @return XmlElement\n     */\n    public XmlElement getParent() {\n        return parent;\n    }\n\n    /**\n     * Sets the data for this element\n     *\n     * @param D\n     *            The String representation of the data\n     */\n    public void setData(String d) {\n        data \u003d d;\n    }\n\n    /**\n     * Returns the data associated with the current Xml element\n     *\n     * @return String\n     */\n    public String getData() {\n        return data;\n    }\n\n    /**\n     * Returns the name of the current Xml element\n     *\n     * @return String\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * **\n     *\n     * @param out\n     *            OutputStream to print the data to\n     */\n    /*\n     * public void write(OutputStream out) throws IOException { PrintWriter PW \u003d\n     * new PrintWriter(out); PW.println(\" \u003c?xml version\u003d\\\"1.0\\\"\n     * encoding\u003d\\\"UTF-8\\\"?\u003e\"); if (SubElements.size() \u003e 0) { for (int i \u003d 0; i \u003c\n     * SubElements.size(); i++) { ((XmlElement)\n     * SubElements.get(i))._writeSubNode(PW, 4); } } PW.flush(); }\n     */\n    /**\n     * Prints sub nodes to the given data stream\n     *\n     * @param out\n     *            PrintWriter to use for printing\n     * @param indent\n     *            Number of spaces to indent things\n     */\n    /*\n     * private void _writeSubNode(PrintWriter out, int indent) throws\n     * IOException { _writeSpace(out, indent); out.print(\" \u003c\" + Name); //if (\n     * Attributes.size()\u003e1) out.print(\" \");\n     * \n     * for (Enumeration e \u003d Attributes.keys(); e.hasMoreElements();) { String K \u003d\n     * (String) e.nextElement(); out.print(K + \"\u003d\\\"\" + Attributes.get(K) + \"\\\"\n     * b\");\n     *  } out.print(\"\u003e\");\n     * \n     * if (Data !\u003d null \u0026\u0026 !Data.equals(\"\")) { if (Data.length() \u003e 20) {\n     * out.println(\"\"); _writeSpace(out, indent + 2); } out.print(Data); } if\n     * (SubElements.size() \u003e 0) { out.println(\"\"); for (int i \u003d 0; i \u003c\n     * SubElements.size(); i++) { ((XmlElement)\n     * SubElements.get(i))._writeSubNode( out, indent + 4); } _writeSpace(out,\n     * indent); } out.println(\" \u003c/\" + Name + \"\u003e\");\n     *  }\n     */\n    /**\n     * Prints out a given number of spaces\n     *\n     * @param out\n     *            PrintWriter to use for printing\n     * @param numSpaces\n     *            Number of spaces to print\n     */\n    /*\n     * private void _writeSpace(PrintWriter out, int numSpaces) throws\n     * IOException {\n     * \n     * for (int i \u003d 0; i \u003c numSpaces; i++) out.print(\" \"); }\n     * \n     * public static void printNode(XmlElement Node, String indent) { String\n     * Data \u003d Node.getData(); if (Data \u003d\u003d null || Data.equals(\"\")) {\n     * System.out.println(indent + Node.getName()); } else {\n     * System.out.println(indent + Node.getName() + \" \u003d \u0027\" + Data + \"\u0027\"); }\n     * Vector Subs \u003d Node.getElements(); int i, j; for (i \u003d 0; i \u003c Subs.size();\n     * i++) { printNode((XmlElement) Subs.get(i), indent + \" \"); } }\n     */\n    public static void printNode(XmlElement node, String indent) {\n        String data \u003d node.getData();\n        if ((data \u003d\u003d null) || data.equals(\"\")) {\n            System.out.println(indent + node.getName());\n        } else {\n            System.out.println(indent + node.getName() + \" \u003d \u0027\" + data + \"\u0027\");\n        }\n        // print attributes\n        for (Enumeration enumeration \u003d node.getAttributes().keys(); enumeration.hasMoreElements(); ) {\n            String key \u003d (String) enumeration.nextElement();\n            String value \u003d node.getAttribute(key);\n            System.out.println(indent + key + \":\" + value);\n        }\n        List subs \u003d node.getElements();\n        for (Iterator it \u003d subs.iterator(); it.hasNext(); ) {\n            printNode((XmlElement) it.next(), indent + \"    \");\n            // for (i \u003d 0; i \u003c subs.size(); i++) {\n            // printNode((XmlElement) subs.get(i), indent + \" \");\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Object clone() {\n        try {\n            // creates a shallow\n            XmlElement clone \u003d (XmlElement) super.clone();\n            // copy of this\n            // object\n            if (attributes !\u003d null) {\n                clone.setAttributes((Hashtable\u003cString, String\u003e) getAttributes().clone());\n            }\n            if (subElements !\u003d null) {\n                clone.subElements \u003d new Vector();\n                List childs \u003d getElements();\n                XmlElement child;\n                for (Iterator it \u003d childs.iterator(); it.hasNext(); ) {\n                    child \u003d (XmlElement) it.next();\n                    // for( int i\u003d0; i\u003cchilds.size(); i++ ) {\n                    // child \u003d (XmlElement) childs.get(i);\n                    clone.addSubElement((XmlElement) child.clone());\n                }\n            }\n            return clone;\n        } catch (CloneNotSupportedException cnse) {\n            throw new InternalError(\"Could not clone XmlElement: \" + cnse);\n        }\n    }\n\n    /**\n     * Sets the name.\n     *\n     * @param name\n     *            The name to set\n     */\n    public void setName(String name) {\n        this.name \u003d name;\n    }\n\n    /**\n     * Notify all Observers.\n     *\n     * @see java.util.Observable#notifyObservers()\n     */\n    @Override\n    public void notifyObservers() {\n        setChanged();\n        super.notifyObservers();\n    }\n\n    /**\n     * Returns true if the specified objects are equal. They are equal if they\n     * are both null OR if the \u003ccode\u003eequals()\u003c/code\u003e method return true. (\n     * \u003ccode\u003eobj1.equals(obj2)\u003c/code\u003e).\n     *\n     * @param obj1\n     *            first object to compare with.\n     * @param obj2\n     *            second object to compare with.\n     * @return true if they represent the same object; false if one of them is\n     *         null or the \u003ccode\u003eequals()\u003c/code\u003e method returns false.\n     */\n    private boolean equals(Object obj1, Object obj2) {\n        boolean equal \u003d false;\n        if ((obj1 \u003d\u003d null) \u0026\u0026 (obj2 \u003d\u003d null)) {\n            equal \u003d true;\n        } else if ((obj1 !\u003d null) \u0026\u0026 (obj2 !\u003d null)) {\n            equal \u003d obj1.equals(obj2);\n        }\n        return equal;\n    }\n\n    /**\n     *  {@inheritDoc}\n     * Recursive comparison.\n     */\n    @Override\n    public boolean equals(Object obj) {\n        boolean equal \u003d false;\n        if ((obj !\u003d null) \u0026\u0026 (obj instanceof XmlElement)) {\n            XmlElement other \u003d (XmlElement) obj;\n            if (equals(attributes, other.attributes) \u0026\u0026 equals(data, other.data) \u0026\u0026 equals(name, other.name) \u0026\u0026 equals(subElements, other.subElements)) {\n                equal \u003d true;\n            }\n        }\n        return equal;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int hashCode() {\n        //Hashcode value should be buffered.\n        int hashCode \u003d 23;\n        if (attributes !\u003d null) {\n            hashCode +\u003d (attributes.hashCode() * 13);\n        }\n        if (data !\u003d null) {\n            hashCode +\u003d (data.hashCode() * 17);\n        }\n        if (name !\u003d null) {\n            hashCode +\u003d (name.hashCode() * 29);\n        }\n        if (subElements !\u003d null) {\n            hashCode +\u003d (subElements.hashCode() * 57);\n        }\n        return hashCode;\n    }\n}\n//END public class XmlElement\n",
    "package": "com.allenstudio.ir.util",
    "classname": "XmlElement",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_0Test.java",
    "test_prompt": "// XmlElement_0Test.java\npackage com.allenstudio.ir.util;\n\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlElement}.\n* It contains ten unit test cases for the {@link XmlElement#addAttribute(String, String)} method.\n*/\nclass XmlElement_0Test {",
    "method_signature": "addAttribute(String, String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// XmlElement.java\n/*\n * @(#)XmlElement.java\n * Created on 2005-8-12\n */\npackage com.allenstudio.ir.util;\n\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\n\n/**\n * The XmlElement is a generic containment class for elements within an XML\n * file.\n * \u003cp\u003e\n *\n * It extends Observable which should be used for gui elements which are\n * interested in configuration changes.\n * \u003cp\u003e\n *\n * Show interested in:\n *\n * \u003cpre\u003e\n * xmlElement.addObserver(yourObserver);\n * \u003c/pre\u003e\n *\n * \u003cp\u003e\n * When making bigger changes on XmlElement and probably its subnodes and/or a\n * greater number of attributes at once, you should just change XmlElement\n * directly and manually notify the Observers by calling:\n * \u003cp\u003e\n *\n * \u003cpre\u003e\n * xmlElement.setChanged();\n * xmlElement.notifyObservers();\n * \u003c/pre\u003e\n *\n * \u003cp\u003e\n * There a good introduction for the Observable/Observer pattern in\n * Model/View/Controller based applications at www.javaworld.com: -\n * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}\n *\n * @author fdietz\n */\npublic class XmlElement extends Observable implements Cloneable {\n\n    String name;\n\n    String data;\n\n    Hashtable\u003cString, String\u003e attributes;\n\n    List\u003cXmlElement\u003e subElements;\n\n    XmlElement parent;\n\n    /**\n     * Constructor\n     */\n    public XmlElement() {\n        subElements \u003d new Vector\u003cXmlElement\u003e();\n        this.attributes \u003d new Hashtable\u003cString, String\u003e(10);\n    }\n\n    /**\n     * **\n     *\n     * Constructor\n     *\n     * @param String\n     *            Name\n     */\n    public XmlElement(String name) {\n        this.name \u003d name;\n        this.attributes \u003d new Hashtable\u003cString, String\u003e(10);\n        subElements \u003d new Vector\u003cXmlElement\u003e();\n        data \u003d \"\";\n    }\n\n    /**\n     * **\n     *\n     * Constructor\n     *\n     * @param String\n     *            Name\n     * @param Hashtable\n     *            Attributes\n     */\n    public XmlElement(String name, Hashtable\u003cString, String\u003e attributes) {\n        this.name \u003d name;\n        this.attributes \u003d attributes;\n        subElements \u003d new Vector\u003cXmlElement\u003e();\n    }\n\n    /**\n     * **\n     *\n     * Constructor\n     *\n     * @param Name\n     *            String\n     * @param Data\n     *            String\n     */\n    public XmlElement(String name, String data) {\n        this.name \u003d name;\n        this.data \u003d data;\n        subElements \u003d new Vector\u003cXmlElement\u003e();\n        this.attributes \u003d new Hashtable\u003cString, String\u003e(10);\n    }\n\n    /**\n     * Add attribute to this xml element.\n     *\n     * @param name\n     *            name of key\n     * @param value\n     *            new attribute value\n     * @return old attribute value\n     */\n    public Object addAttribute(String name, String value) {\n        if ((value !\u003d null) \u0026\u0026 (name !\u003d null)) {\n            Object returnValue \u003d attributes.put(name, value);\n            return returnValue;\n        }\n        return null;\n    }\n\n    /**\n     * **\n     *\n     * @return String\n     * @param String\n     *            Name\n     */\n    public String getAttribute(String name) {\n        return ((String) attributes.get(name));\n    }\n\n    public String getAttribute(String name, String defaultValue) {\n        if (getAttribute(name) \u003d\u003d null) {\n            addAttribute(name, defaultValue);\n        }\n        return getAttribute(name);\n    }\n\n    /**\n     * **\n     *\n     * @return String\n     * @param String\n     *            Name\n     */\n    public Hashtable\u003cString, String\u003e getAttributes() {\n        return attributes;\n    }\n\n    /**\n     * **\n     *\n     * @param Attrs\n     *            Hashtable to use as the attributes\n     */\n    public void setAttributes(Hashtable\u003cString, String\u003e attrs) {\n        attributes \u003d attrs;\n    }\n\n    /**\n     * **\n     *\n     * @return Enumeration\n     */\n    public Enumeration getAttributeNames() {\n        return (attributes.keys());\n    }\n\n    /**\n     * **\n     *\n     * @return boolean\n     * @param XmlElement\n     *            E\n     */\n    public boolean addElement(XmlElement e) {\n        e.setParent(this);\n        return (subElements.add(e));\n    }\n\n    public XmlElement removeElement(XmlElement e) {\n        XmlElement child \u003d null;\n        for (int i \u003d 0; i \u003c subElements.size(); i++) {\n            child \u003d (XmlElement) subElements.get(i);\n            // FIXME -- This will most likely not work.\n            //          You want the element removed if the contents are the same\n            //          Not just if the element reference is the same.\n            if (child \u003d\u003d e) {\n                subElements.remove(i);\n            }\n        }\n        return (child);\n    }\n\n    public XmlElement removeElement(int index) {\n        return (XmlElement) subElements.remove(index);\n    }\n\n    public void removeAllElements() {\n        subElements.clear();\n    }\n\n    /**\n     * convienience method for the TreeView\n     *\n     * this method is modeled after the DefaultMutableTreeNode-class\n     *\n     * DefaultMutableTreeNode wraps XmlElement for this purpose\n     */\n    public void removeFromParent() {\n        if (parent \u003d\u003d null) {\n            return;\n        }\n        parent.removeElement(this);\n        parent \u003d null;\n    }\n\n    public void append(XmlElement e) {\n        e.removeFromParent();\n        addElement(e);\n    }\n\n    /**\n     * convienience method for the TreeView\n     *\n     * @param e\n     * @param index\n     */\n    public void insertElement(XmlElement e, int index) {\n        e.removeFromParent();\n        subElements.add(index, e);\n        e.setParent(this);\n    }\n\n    /**\n     * **\n     *\n     * @return Vector\n     */\n    public List getElements() {\n        return subElements;\n    }\n\n    public int count() {\n        return subElements.size();\n    }\n\n    /**\n     * Returns the element whose hierachy is indicated\n     * by \u003ccode\u003epath\u003c/code\u003e. The path is separated with\n     * periods(\".\").\u003cbr\u003e\n     * \u003cem\u003eNote: if one node has more than one elements\n     * that have the same name, that is, if its subnodes\n     * have the same path, only the first one is returned.\n     * \u003c/em\u003e\n     * @return the first element qualified with the path\n     * @param path the path string of the specified element\n     */\n    public XmlElement getElement(String path) {\n        int i \u003d path.indexOf(\u0027.\u0027);\n        String topName;\n        String subName;\n        if (i \u003d\u003d 0) {\n            path \u003d path.substring(1);\n            i \u003d path.indexOf(\u0027.\u0027);\n        }\n        if (i \u003e 0) {\n            topName \u003d path.substring(0, i);\n            subName \u003d path.substring(i + 1);\n        } else {\n            topName \u003d path;\n            subName \u003d null;\n        }\n        int j;\n        for (j \u003d 0; j \u003c subElements.size(); j++) {\n            if (((XmlElement) subElements.get(j)).getName().equals(topName)) {\n                if (subName !\u003d null) {\n                    return (((XmlElement) subElements.get(j)).getElement(subName));\n                } else {\n                    return ((XmlElement) subElements.get(j));\n                }\n            }\n        }\n        return null;\n    }\n\n    public XmlElement getElement(int index) {\n        return (XmlElement) subElements.get(index);\n    }\n\n    /**\n     * Adds a sub element to this one. The path\n     * is separated with dots(\".\").\n     *\n     * @return the \u003ccode\u003eXmlElement\u003c/code\u003e added\n     * @param path The subpath of the sub element to add\n     */\n    public XmlElement addSubElement(String path) {\n        XmlElement parent \u003d this;\n        XmlElement child;\n        String name;\n        while (path.indexOf(\u0027.\u0027) !\u003d -1) {\n            name \u003d path.substring(0, path.indexOf(\u0027.\u0027));\n            path \u003d path.substring(path.indexOf(\u0027.\u0027) + 1);\n            // if path startsWith \"/\" -\u003e skip\n            if (name.length() \u003d\u003d 0)\n                continue;\n            if (parent.getElement(name) !\u003d null) {\n                parent \u003d parent.getElement(name);\n            } else {\n                child \u003d new XmlElement(name);\n                parent.addElement(child);\n                parent \u003d child;\n            }\n        }\n        child \u003d new XmlElement(path);\n        parent.addElement(child);\n        return child;\n    }\n\n    /**\n     * Adds a sub element to this one\n     *\n     * @return XmlElement\n     * @param element\n     *            The XmlElement to add\n     */\n    public XmlElement addSubElement(XmlElement e) {\n        e.setParent(this);\n        subElements.add(e);\n        return e;\n    }\n\n    /**\n     * Adds a sub element to this one\n     *\n     * @return XmlElement\n     * @param Name\n     *            The name of the sub element to add\n     * @param Data\n     *            String Data for this element\n     */\n    public XmlElement addSubElement(String name, String data) {\n        XmlElement e \u003d new XmlElement(name);\n        e.setData(data);\n        e.setParent(this);\n        subElements.add(e);\n        return e;\n    }\n\n    /**\n     * Sets the parent element\n     *\n     * @param Parent\n     *            The XmlElement that contains this one\n     */\n    public void setParent(XmlElement parent) {\n        this.parent \u003d parent;\n    }\n\n    /**\n     * Gives the XmlElement containing the current element\n     *\n     * @return XmlElement\n     */\n    public XmlElement getParent() {\n        return parent;\n    }\n\n    /**\n     * Sets the data for this element\n     *\n     * @param D\n     *            The String representation of the data\n     */\n    public void setData(String d) {\n        data \u003d d;\n    }\n\n    /**\n     * Returns the data associated with the current Xml element\n     *\n     * @return String\n     */\n    public String getData() {\n        return data;\n    }\n\n    /**\n     * Returns the name of the current Xml element\n     *\n     * @return String\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * **\n     *\n     * @param out\n     *            OutputStream to print the data to\n     */\n    /*\n     * public void write(OutputStream out) throws IOException { PrintWriter PW \u003d\n     * new PrintWriter(out); PW.println(\" \u003c?xml version\u003d\\\"1.0\\\"\n     * encoding\u003d\\\"UTF-8\\\"?\u003e\"); if (SubElements.size() \u003e 0) { for (int i \u003d 0; i \u003c\n     * SubElements.size(); i++) { ((XmlElement)\n     * SubElements.get(i))._writeSubNode(PW, 4); } } PW.flush(); }\n     */\n    /**\n     * Prints sub nodes to the given data stream\n     *\n     * @param out\n     *            PrintWriter to use for printing\n     * @param indent\n     *            Number of spaces to indent things\n     */\n    /*\n     * private void _writeSubNode(PrintWriter out, int indent) throws\n     * IOException { _writeSpace(out, indent); out.print(\" \u003c\" + Name); //if (\n     * Attributes.size()\u003e1) out.print(\" \");\n     * \n     * for (Enumeration e \u003d Attributes.keys(); e.hasMoreElements();) { String K \u003d\n     * (String) e.nextElement(); out.print(K + \"\u003d\\\"\" + Attributes.get(K) + \"\\\"\n     * b\");\n     *  } out.print(\"\u003e\");\n     * \n     * if (Data !\u003d null \u0026\u0026 !Data.equals(\"\")) { if (Data.length() \u003e 20) {\n     * out.println(\"\"); _writeSpace(out, indent + 2); } out.print(Data); } if\n     * (SubElements.size() \u003e 0) { out.println(\"\"); for (int i \u003d 0; i \u003c\n     * SubElements.size(); i++) { ((XmlElement)\n     * SubElements.get(i))._writeSubNode( out, indent + 4); } _writeSpace(out,\n     * indent); } out.println(\" \u003c/\" + Name + \"\u003e\");\n     *  }\n     */\n    /**\n     * Prints out a given number of spaces\n     *\n     * @param out\n     *            PrintWriter to use for printing\n     * @param numSpaces\n     *            Number of spaces to print\n     */\n    /*\n     * private void _writeSpace(PrintWriter out, int numSpaces) throws\n     * IOException {\n     * \n     * for (int i \u003d 0; i \u003c numSpaces; i++) out.print(\" \"); }\n     * \n     * public static void printNode(XmlElement Node, String indent) { String\n     * Data \u003d Node.getData(); if (Data \u003d\u003d null || Data.equals(\"\")) {\n     * System.out.println(indent + Node.getName()); } else {\n     * System.out.println(indent + Node.getName() + \" \u003d \u0027\" + Data + \"\u0027\"); }\n     * Vector Subs \u003d Node.getElements(); int i, j; for (i \u003d 0; i \u003c Subs.size();\n     * i++) { printNode((XmlElement) Subs.get(i), indent + \" \"); } }\n     */\n    public static void printNode(XmlElement node, String indent) {\n        String data \u003d node.getData();\n        if ((data \u003d\u003d null) || data.equals(\"\")) {\n            System.out.println(indent + node.getName());\n        } else {\n            System.out.println(indent + node.getName() + \" \u003d \u0027\" + data + \"\u0027\");\n        }\n        // print attributes\n        for (Enumeration enumeration \u003d node.getAttributes().keys(); enumeration.hasMoreElements(); ) {\n            String key \u003d (String) enumeration.nextElement();\n            String value \u003d node.getAttribute(key);\n            System.out.println(indent + key + \":\" + value);\n        }\n        List subs \u003d node.getElements();\n        for (Iterator it \u003d subs.iterator(); it.hasNext(); ) {\n            printNode((XmlElement) it.next(), indent + \"    \");\n            // for (i \u003d 0; i \u003c subs.size(); i++) {\n            // printNode((XmlElement) subs.get(i), indent + \" \");\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Object clone() {\n        try {\n            // creates a shallow\n            XmlElement clone \u003d (XmlElement) super.clone();\n            // copy of this\n            // object\n            if (attributes !\u003d null) {\n                clone.setAttributes((Hashtable\u003cString, String\u003e) getAttributes().clone());\n            }\n            if (subElements !\u003d null) {\n                clone.subElements \u003d new Vector();\n                List childs \u003d getElements();\n                XmlElement child;\n                for (Iterator it \u003d childs.iterator(); it.hasNext(); ) {\n                    child \u003d (XmlElement) it.next();\n                    // for( int i\u003d0; i\u003cchilds.size(); i++ ) {\n                    // child \u003d (XmlElement) childs.get(i);\n                    clone.addSubElement((XmlElement) child.clone());\n                }\n            }\n            return clone;\n        } catch (CloneNotSupportedException cnse) {\n            throw new InternalError(\"Could not clone XmlElement: \" + cnse);\n        }\n    }\n\n    /**\n     * Sets the name.\n     *\n     * @param name\n     *            The name to set\n     */\n    public void setName(String name) {\n        this.name \u003d name;\n    }\n\n    /**\n     * Notify all Observers.\n     *\n     * @see java.util.Observable#notifyObservers()\n     */\n    @Override\n    public void notifyObservers() {\n        setChanged();\n        super.notifyObservers();\n    }\n\n    /**\n     * Returns true if the specified objects are equal. They are equal if they\n     * are both null OR if the \u003ccode\u003eequals()\u003c/code\u003e method return true. (\n     * \u003ccode\u003eobj1.equals(obj2)\u003c/code\u003e).\n     *\n     * @param obj1\n     *            first object to compare with.\n     * @param obj2\n     *            second object to compare with.\n     * @return true if they represent the same object; false if one of them is\n     *         null or the \u003ccode\u003eequals()\u003c/code\u003e method returns false.\n     */\n    private boolean equals(Object obj1, Object obj2) {\n        boolean equal \u003d false;\n        if ((obj1 \u003d\u003d null) \u0026\u0026 (obj2 \u003d\u003d null)) {\n            equal \u003d true;\n        } else if ((obj1 !\u003d null) \u0026\u0026 (obj2 !\u003d null)) {\n            equal \u003d obj1.equals(obj2);\n        }\n        return equal;\n    }\n\n    /**\n     *  {@inheritDoc}\n     * Recursive comparison.\n     */\n    @Override\n    public boolean equals(Object obj) {\n        boolean equal \u003d false;\n        if ((obj !\u003d null) \u0026\u0026 (obj instanceof XmlElement)) {\n            XmlElement other \u003d (XmlElement) obj;\n            if (equals(attributes, other.attributes) \u0026\u0026 equals(data, other.data) \u0026\u0026 equals(name, other.name) \u0026\u0026 equals(subElements, other.subElements)) {\n                equal \u003d true;\n            }\n        }\n        return equal;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int hashCode() {\n        //Hashcode value should be buffered.\n        int hashCode \u003d 23;\n        if (attributes !\u003d null) {\n            hashCode +\u003d (attributes.hashCode() * 13);\n        }\n        if (data !\u003d null) {\n            hashCode +\u003d (data.hashCode() * 17);\n        }\n        if (name !\u003d null) {\n            hashCode +\u003d (name.hashCode() * 29);\n        }\n        if (subElements !\u003d null) {\n            hashCode +\u003d (subElements.hashCode() * 57);\n        }\n        return hashCode;\n    }\n}\n//END public class XmlElement\n",
    "package": "com.allenstudio.ir.util",
    "classname": "XmlElement",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_7Test.java",
    "test_prompt": "// XmlElement_7Test.java\npackage com.allenstudio.ir.util;\n\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlElement}.\n* It contains ten unit test cases for the {@link XmlElement#getElement(String)} method.\n*/\nclass XmlElement_7Test {",
    "method_signature": "getElement(String)",
    "suffix": "7"
  },
  {
    "numberTests": "ten",
    "original_code": "// XmlElement.java\n/*\n * @(#)XmlElement.java\n * Created on 2005-8-12\n */\npackage com.allenstudio.ir.util;\n\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\n\n/**\n * The XmlElement is a generic containment class for elements within an XML\n * file.\n * \u003cp\u003e\n *\n * It extends Observable which should be used for gui elements which are\n * interested in configuration changes.\n * \u003cp\u003e\n *\n * Show interested in:\n *\n * \u003cpre\u003e\n * xmlElement.addObserver(yourObserver);\n * \u003c/pre\u003e\n *\n * \u003cp\u003e\n * When making bigger changes on XmlElement and probably its subnodes and/or a\n * greater number of attributes at once, you should just change XmlElement\n * directly and manually notify the Observers by calling:\n * \u003cp\u003e\n *\n * \u003cpre\u003e\n * xmlElement.setChanged();\n * xmlElement.notifyObservers();\n * \u003c/pre\u003e\n *\n * \u003cp\u003e\n * There a good introduction for the Observable/Observer pattern in\n * Model/View/Controller based applications at www.javaworld.com: -\n * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}\n *\n * @author fdietz\n */\npublic class XmlElement extends Observable implements Cloneable {\n\n    String name;\n\n    String data;\n\n    Hashtable\u003cString, String\u003e attributes;\n\n    List\u003cXmlElement\u003e subElements;\n\n    XmlElement parent;\n\n    /**\n     * Constructor\n     */\n    public XmlElement() {\n        subElements \u003d new Vector\u003cXmlElement\u003e();\n        this.attributes \u003d new Hashtable\u003cString, String\u003e(10);\n    }\n\n    /**\n     * **\n     *\n     * Constructor\n     *\n     * @param String\n     *            Name\n     */\n    public XmlElement(String name) {\n        this.name \u003d name;\n        this.attributes \u003d new Hashtable\u003cString, String\u003e(10);\n        subElements \u003d new Vector\u003cXmlElement\u003e();\n        data \u003d \"\";\n    }\n\n    /**\n     * **\n     *\n     * Constructor\n     *\n     * @param String\n     *            Name\n     * @param Hashtable\n     *            Attributes\n     */\n    public XmlElement(String name, Hashtable\u003cString, String\u003e attributes) {\n        this.name \u003d name;\n        this.attributes \u003d attributes;\n        subElements \u003d new Vector\u003cXmlElement\u003e();\n    }\n\n    /**\n     * **\n     *\n     * Constructor\n     *\n     * @param Name\n     *            String\n     * @param Data\n     *            String\n     */\n    public XmlElement(String name, String data) {\n        this.name \u003d name;\n        this.data \u003d data;\n        subElements \u003d new Vector\u003cXmlElement\u003e();\n        this.attributes \u003d new Hashtable\u003cString, String\u003e(10);\n    }\n\n    /**\n     * Add attribute to this xml element.\n     *\n     * @param name\n     *            name of key\n     * @param value\n     *            new attribute value\n     * @return old attribute value\n     */\n    public Object addAttribute(String name, String value) {\n        if ((value !\u003d null) \u0026\u0026 (name !\u003d null)) {\n            Object returnValue \u003d attributes.put(name, value);\n            return returnValue;\n        }\n        return null;\n    }\n\n    /**\n     * **\n     *\n     * @return String\n     * @param String\n     *            Name\n     */\n    public String getAttribute(String name) {\n        return ((String) attributes.get(name));\n    }\n\n    public String getAttribute(String name, String defaultValue) {\n        if (getAttribute(name) \u003d\u003d null) {\n            addAttribute(name, defaultValue);\n        }\n        return getAttribute(name);\n    }\n\n    /**\n     * **\n     *\n     * @return String\n     * @param String\n     *            Name\n     */\n    public Hashtable\u003cString, String\u003e getAttributes() {\n        return attributes;\n    }\n\n    /**\n     * **\n     *\n     * @param Attrs\n     *            Hashtable to use as the attributes\n     */\n    public void setAttributes(Hashtable\u003cString, String\u003e attrs) {\n        attributes \u003d attrs;\n    }\n\n    /**\n     * **\n     *\n     * @return Enumeration\n     */\n    public Enumeration getAttributeNames() {\n        return (attributes.keys());\n    }\n\n    /**\n     * **\n     *\n     * @return boolean\n     * @param XmlElement\n     *            E\n     */\n    public boolean addElement(XmlElement e) {\n        e.setParent(this);\n        return (subElements.add(e));\n    }\n\n    public XmlElement removeElement(XmlElement e) {\n        XmlElement child \u003d null;\n        for (int i \u003d 0; i \u003c subElements.size(); i++) {\n            child \u003d (XmlElement) subElements.get(i);\n            // FIXME -- This will most likely not work.\n            //          You want the element removed if the contents are the same\n            //          Not just if the element reference is the same.\n            if (child \u003d\u003d e) {\n                subElements.remove(i);\n            }\n        }\n        return (child);\n    }\n\n    public XmlElement removeElement(int index) {\n        return (XmlElement) subElements.remove(index);\n    }\n\n    public void removeAllElements() {\n        subElements.clear();\n    }\n\n    /**\n     * convienience method for the TreeView\n     *\n     * this method is modeled after the DefaultMutableTreeNode-class\n     *\n     * DefaultMutableTreeNode wraps XmlElement for this purpose\n     */\n    public void removeFromParent() {\n        if (parent \u003d\u003d null) {\n            return;\n        }\n        parent.removeElement(this);\n        parent \u003d null;\n    }\n\n    public void append(XmlElement e) {\n        e.removeFromParent();\n        addElement(e);\n    }\n\n    /**\n     * convienience method for the TreeView\n     *\n     * @param e\n     * @param index\n     */\n    public void insertElement(XmlElement e, int index) {\n        e.removeFromParent();\n        subElements.add(index, e);\n        e.setParent(this);\n    }\n\n    /**\n     * **\n     *\n     * @return Vector\n     */\n    public List getElements() {\n        return subElements;\n    }\n\n    public int count() {\n        return subElements.size();\n    }\n\n    /**\n     * Returns the element whose hierachy is indicated\n     * by \u003ccode\u003epath\u003c/code\u003e. The path is separated with\n     * periods(\".\").\u003cbr\u003e\n     * \u003cem\u003eNote: if one node has more than one elements\n     * that have the same name, that is, if its subnodes\n     * have the same path, only the first one is returned.\n     * \u003c/em\u003e\n     * @return the first element qualified with the path\n     * @param path the path string of the specified element\n     */\n    public XmlElement getElement(String path) {\n        int i \u003d path.indexOf(\u0027.\u0027);\n        String topName;\n        String subName;\n        if (i \u003d\u003d 0) {\n            path \u003d path.substring(1);\n            i \u003d path.indexOf(\u0027.\u0027);\n        }\n        if (i \u003e 0) {\n            topName \u003d path.substring(0, i);\n            subName \u003d path.substring(i + 1);\n        } else {\n            topName \u003d path;\n            subName \u003d null;\n        }\n        int j;\n        for (j \u003d 0; j \u003c subElements.size(); j++) {\n            if (((XmlElement) subElements.get(j)).getName().equals(topName)) {\n                if (subName !\u003d null) {\n                    return (((XmlElement) subElements.get(j)).getElement(subName));\n                } else {\n                    return ((XmlElement) subElements.get(j));\n                }\n            }\n        }\n        return null;\n    }\n\n    public XmlElement getElement(int index) {\n        return (XmlElement) subElements.get(index);\n    }\n\n    /**\n     * Adds a sub element to this one. The path\n     * is separated with dots(\".\").\n     *\n     * @return the \u003ccode\u003eXmlElement\u003c/code\u003e added\n     * @param path The subpath of the sub element to add\n     */\n    public XmlElement addSubElement(String path) {\n        XmlElement parent \u003d this;\n        XmlElement child;\n        String name;\n        while (path.indexOf(\u0027.\u0027) !\u003d -1) {\n            name \u003d path.substring(0, path.indexOf(\u0027.\u0027));\n            path \u003d path.substring(path.indexOf(\u0027.\u0027) + 1);\n            // if path startsWith \"/\" -\u003e skip\n            if (name.length() \u003d\u003d 0)\n                continue;\n            if (parent.getElement(name) !\u003d null) {\n                parent \u003d parent.getElement(name);\n            } else {\n                child \u003d new XmlElement(name);\n                parent.addElement(child);\n                parent \u003d child;\n            }\n        }\n        child \u003d new XmlElement(path);\n        parent.addElement(child);\n        return child;\n    }\n\n    /**\n     * Adds a sub element to this one\n     *\n     * @return XmlElement\n     * @param element\n     *            The XmlElement to add\n     */\n    public XmlElement addSubElement(XmlElement e) {\n        e.setParent(this);\n        subElements.add(e);\n        return e;\n    }\n\n    /**\n     * Adds a sub element to this one\n     *\n     * @return XmlElement\n     * @param Name\n     *            The name of the sub element to add\n     * @param Data\n     *            String Data for this element\n     */\n    public XmlElement addSubElement(String name, String data) {\n        XmlElement e \u003d new XmlElement(name);\n        e.setData(data);\n        e.setParent(this);\n        subElements.add(e);\n        return e;\n    }\n\n    /**\n     * Sets the parent element\n     *\n     * @param Parent\n     *            The XmlElement that contains this one\n     */\n    public void setParent(XmlElement parent) {\n        this.parent \u003d parent;\n    }\n\n    /**\n     * Gives the XmlElement containing the current element\n     *\n     * @return XmlElement\n     */\n    public XmlElement getParent() {\n        return parent;\n    }\n\n    /**\n     * Sets the data for this element\n     *\n     * @param D\n     *            The String representation of the data\n     */\n    public void setData(String d) {\n        data \u003d d;\n    }\n\n    /**\n     * Returns the data associated with the current Xml element\n     *\n     * @return String\n     */\n    public String getData() {\n        return data;\n    }\n\n    /**\n     * Returns the name of the current Xml element\n     *\n     * @return String\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * **\n     *\n     * @param out\n     *            OutputStream to print the data to\n     */\n    /*\n     * public void write(OutputStream out) throws IOException { PrintWriter PW \u003d\n     * new PrintWriter(out); PW.println(\" \u003c?xml version\u003d\\\"1.0\\\"\n     * encoding\u003d\\\"UTF-8\\\"?\u003e\"); if (SubElements.size() \u003e 0) { for (int i \u003d 0; i \u003c\n     * SubElements.size(); i++) { ((XmlElement)\n     * SubElements.get(i))._writeSubNode(PW, 4); } } PW.flush(); }\n     */\n    /**\n     * Prints sub nodes to the given data stream\n     *\n     * @param out\n     *            PrintWriter to use for printing\n     * @param indent\n     *            Number of spaces to indent things\n     */\n    /*\n     * private void _writeSubNode(PrintWriter out, int indent) throws\n     * IOException { _writeSpace(out, indent); out.print(\" \u003c\" + Name); //if (\n     * Attributes.size()\u003e1) out.print(\" \");\n     * \n     * for (Enumeration e \u003d Attributes.keys(); e.hasMoreElements();) { String K \u003d\n     * (String) e.nextElement(); out.print(K + \"\u003d\\\"\" + Attributes.get(K) + \"\\\"\n     * b\");\n     *  } out.print(\"\u003e\");\n     * \n     * if (Data !\u003d null \u0026\u0026 !Data.equals(\"\")) { if (Data.length() \u003e 20) {\n     * out.println(\"\"); _writeSpace(out, indent + 2); } out.print(Data); } if\n     * (SubElements.size() \u003e 0) { out.println(\"\"); for (int i \u003d 0; i \u003c\n     * SubElements.size(); i++) { ((XmlElement)\n     * SubElements.get(i))._writeSubNode( out, indent + 4); } _writeSpace(out,\n     * indent); } out.println(\" \u003c/\" + Name + \"\u003e\");\n     *  }\n     */\n    /**\n     * Prints out a given number of spaces\n     *\n     * @param out\n     *            PrintWriter to use for printing\n     * @param numSpaces\n     *            Number of spaces to print\n     */\n    /*\n     * private void _writeSpace(PrintWriter out, int numSpaces) throws\n     * IOException {\n     * \n     * for (int i \u003d 0; i \u003c numSpaces; i++) out.print(\" \"); }\n     * \n     * public static void printNode(XmlElement Node, String indent) { String\n     * Data \u003d Node.getData(); if (Data \u003d\u003d null || Data.equals(\"\")) {\n     * System.out.println(indent + Node.getName()); } else {\n     * System.out.println(indent + Node.getName() + \" \u003d \u0027\" + Data + \"\u0027\"); }\n     * Vector Subs \u003d Node.getElements(); int i, j; for (i \u003d 0; i \u003c Subs.size();\n     * i++) { printNode((XmlElement) Subs.get(i), indent + \" \"); } }\n     */\n    public static void printNode(XmlElement node, String indent) {\n        String data \u003d node.getData();\n        if ((data \u003d\u003d null) || data.equals(\"\")) {\n            System.out.println(indent + node.getName());\n        } else {\n            System.out.println(indent + node.getName() + \" \u003d \u0027\" + data + \"\u0027\");\n        }\n        // print attributes\n        for (Enumeration enumeration \u003d node.getAttributes().keys(); enumeration.hasMoreElements(); ) {\n            String key \u003d (String) enumeration.nextElement();\n            String value \u003d node.getAttribute(key);\n            System.out.println(indent + key + \":\" + value);\n        }\n        List subs \u003d node.getElements();\n        for (Iterator it \u003d subs.iterator(); it.hasNext(); ) {\n            printNode((XmlElement) it.next(), indent + \"    \");\n            // for (i \u003d 0; i \u003c subs.size(); i++) {\n            // printNode((XmlElement) subs.get(i), indent + \" \");\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Object clone() {\n        try {\n            // creates a shallow\n            XmlElement clone \u003d (XmlElement) super.clone();\n            // copy of this\n            // object\n            if (attributes !\u003d null) {\n                clone.setAttributes((Hashtable\u003cString, String\u003e) getAttributes().clone());\n            }\n            if (subElements !\u003d null) {\n                clone.subElements \u003d new Vector();\n                List childs \u003d getElements();\n                XmlElement child;\n                for (Iterator it \u003d childs.iterator(); it.hasNext(); ) {\n                    child \u003d (XmlElement) it.next();\n                    // for( int i\u003d0; i\u003cchilds.size(); i++ ) {\n                    // child \u003d (XmlElement) childs.get(i);\n                    clone.addSubElement((XmlElement) child.clone());\n                }\n            }\n            return clone;\n        } catch (CloneNotSupportedException cnse) {\n            throw new InternalError(\"Could not clone XmlElement: \" + cnse);\n        }\n    }\n\n    /**\n     * Sets the name.\n     *\n     * @param name\n     *            The name to set\n     */\n    public void setName(String name) {\n        this.name \u003d name;\n    }\n\n    /**\n     * Notify all Observers.\n     *\n     * @see java.util.Observable#notifyObservers()\n     */\n    @Override\n    public void notifyObservers() {\n        setChanged();\n        super.notifyObservers();\n    }\n\n    /**\n     * Returns true if the specified objects are equal. They are equal if they\n     * are both null OR if the \u003ccode\u003eequals()\u003c/code\u003e method return true. (\n     * \u003ccode\u003eobj1.equals(obj2)\u003c/code\u003e).\n     *\n     * @param obj1\n     *            first object to compare with.\n     * @param obj2\n     *            second object to compare with.\n     * @return true if they represent the same object; false if one of them is\n     *         null or the \u003ccode\u003eequals()\u003c/code\u003e method returns false.\n     */\n    private boolean equals(Object obj1, Object obj2) {\n        boolean equal \u003d false;\n        if ((obj1 \u003d\u003d null) \u0026\u0026 (obj2 \u003d\u003d null)) {\n            equal \u003d true;\n        } else if ((obj1 !\u003d null) \u0026\u0026 (obj2 !\u003d null)) {\n            equal \u003d obj1.equals(obj2);\n        }\n        return equal;\n    }\n\n    /**\n     *  {@inheritDoc}\n     * Recursive comparison.\n     */\n    @Override\n    public boolean equals(Object obj) {\n        boolean equal \u003d false;\n        if ((obj !\u003d null) \u0026\u0026 (obj instanceof XmlElement)) {\n            XmlElement other \u003d (XmlElement) obj;\n            if (equals(attributes, other.attributes) \u0026\u0026 equals(data, other.data) \u0026\u0026 equals(name, other.name) \u0026\u0026 equals(subElements, other.subElements)) {\n                equal \u003d true;\n            }\n        }\n        return equal;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int hashCode() {\n        //Hashcode value should be buffered.\n        int hashCode \u003d 23;\n        if (attributes !\u003d null) {\n            hashCode +\u003d (attributes.hashCode() * 13);\n        }\n        if (data !\u003d null) {\n            hashCode +\u003d (data.hashCode() * 17);\n        }\n        if (name !\u003d null) {\n            hashCode +\u003d (name.hashCode() * 29);\n        }\n        if (subElements !\u003d null) {\n            hashCode +\u003d (subElements.hashCode() * 57);\n        }\n        return hashCode;\n    }\n}\n//END public class XmlElement\n",
    "package": "com.allenstudio.ir.util",
    "classname": "XmlElement",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_9Test.java",
    "test_prompt": "// XmlElement_9Test.java\npackage com.allenstudio.ir.util;\n\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlElement}.\n* It contains ten unit test cases for the {@link XmlElement#addSubElement(String)} method.\n*/\nclass XmlElement_9Test {",
    "method_signature": "addSubElement(String)",
    "suffix": "9"
  },
  {
    "numberTests": "ten",
    "original_code": "// XmlElement.java\n/*\n * @(#)XmlElement.java\n * Created on 2005-8-12\n */\npackage com.allenstudio.ir.util;\n\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\n\n/**\n * The XmlElement is a generic containment class for elements within an XML\n * file.\n * \u003cp\u003e\n *\n * It extends Observable which should be used for gui elements which are\n * interested in configuration changes.\n * \u003cp\u003e\n *\n * Show interested in:\n *\n * \u003cpre\u003e\n * xmlElement.addObserver(yourObserver);\n * \u003c/pre\u003e\n *\n * \u003cp\u003e\n * When making bigger changes on XmlElement and probably its subnodes and/or a\n * greater number of attributes at once, you should just change XmlElement\n * directly and manually notify the Observers by calling:\n * \u003cp\u003e\n *\n * \u003cpre\u003e\n * xmlElement.setChanged();\n * xmlElement.notifyObservers();\n * \u003c/pre\u003e\n *\n * \u003cp\u003e\n * There a good introduction for the Observable/Observer pattern in\n * Model/View/Controller based applications at www.javaworld.com: -\n * {@link http://www.javaworld.com/javaworld/jw-10-1996/jw-10-howto.html}\n *\n * @author fdietz\n */\npublic class XmlElement extends Observable implements Cloneable {\n\n    String name;\n\n    String data;\n\n    Hashtable\u003cString, String\u003e attributes;\n\n    List\u003cXmlElement\u003e subElements;\n\n    XmlElement parent;\n\n    /**\n     * Constructor\n     */\n    public XmlElement() {\n        subElements \u003d new Vector\u003cXmlElement\u003e();\n        this.attributes \u003d new Hashtable\u003cString, String\u003e(10);\n    }\n\n    /**\n     * **\n     *\n     * Constructor\n     *\n     * @param String\n     *            Name\n     */\n    public XmlElement(String name) {\n        this.name \u003d name;\n        this.attributes \u003d new Hashtable\u003cString, String\u003e(10);\n        subElements \u003d new Vector\u003cXmlElement\u003e();\n        data \u003d \"\";\n    }\n\n    /**\n     * **\n     *\n     * Constructor\n     *\n     * @param String\n     *            Name\n     * @param Hashtable\n     *            Attributes\n     */\n    public XmlElement(String name, Hashtable\u003cString, String\u003e attributes) {\n        this.name \u003d name;\n        this.attributes \u003d attributes;\n        subElements \u003d new Vector\u003cXmlElement\u003e();\n    }\n\n    /**\n     * **\n     *\n     * Constructor\n     *\n     * @param Name\n     *            String\n     * @param Data\n     *            String\n     */\n    public XmlElement(String name, String data) {\n        this.name \u003d name;\n        this.data \u003d data;\n        subElements \u003d new Vector\u003cXmlElement\u003e();\n        this.attributes \u003d new Hashtable\u003cString, String\u003e(10);\n    }\n\n    /**\n     * Add attribute to this xml element.\n     *\n     * @param name\n     *            name of key\n     * @param value\n     *            new attribute value\n     * @return old attribute value\n     */\n    public Object addAttribute(String name, String value) {\n        if ((value !\u003d null) \u0026\u0026 (name !\u003d null)) {\n            Object returnValue \u003d attributes.put(name, value);\n            return returnValue;\n        }\n        return null;\n    }\n\n    /**\n     * **\n     *\n     * @return String\n     * @param String\n     *            Name\n     */\n    public String getAttribute(String name) {\n        return ((String) attributes.get(name));\n    }\n\n    public String getAttribute(String name, String defaultValue) {\n        if (getAttribute(name) \u003d\u003d null) {\n            addAttribute(name, defaultValue);\n        }\n        return getAttribute(name);\n    }\n\n    /**\n     * **\n     *\n     * @return String\n     * @param String\n     *            Name\n     */\n    public Hashtable\u003cString, String\u003e getAttributes() {\n        return attributes;\n    }\n\n    /**\n     * **\n     *\n     * @param Attrs\n     *            Hashtable to use as the attributes\n     */\n    public void setAttributes(Hashtable\u003cString, String\u003e attrs) {\n        attributes \u003d attrs;\n    }\n\n    /**\n     * **\n     *\n     * @return Enumeration\n     */\n    public Enumeration getAttributeNames() {\n        return (attributes.keys());\n    }\n\n    /**\n     * **\n     *\n     * @return boolean\n     * @param XmlElement\n     *            E\n     */\n    public boolean addElement(XmlElement e) {\n        e.setParent(this);\n        return (subElements.add(e));\n    }\n\n    public XmlElement removeElement(XmlElement e) {\n        XmlElement child \u003d null;\n        for (int i \u003d 0; i \u003c subElements.size(); i++) {\n            child \u003d (XmlElement) subElements.get(i);\n            // FIXME -- This will most likely not work.\n            //          You want the element removed if the contents are the same\n            //          Not just if the element reference is the same.\n            if (child \u003d\u003d e) {\n                subElements.remove(i);\n            }\n        }\n        return (child);\n    }\n\n    public XmlElement removeElement(int index) {\n        return (XmlElement) subElements.remove(index);\n    }\n\n    public void removeAllElements() {\n        subElements.clear();\n    }\n\n    /**\n     * convienience method for the TreeView\n     *\n     * this method is modeled after the DefaultMutableTreeNode-class\n     *\n     * DefaultMutableTreeNode wraps XmlElement for this purpose\n     */\n    public void removeFromParent() {\n        if (parent \u003d\u003d null) {\n            return;\n        }\n        parent.removeElement(this);\n        parent \u003d null;\n    }\n\n    public void append(XmlElement e) {\n        e.removeFromParent();\n        addElement(e);\n    }\n\n    /**\n     * convienience method for the TreeView\n     *\n     * @param e\n     * @param index\n     */\n    public void insertElement(XmlElement e, int index) {\n        e.removeFromParent();\n        subElements.add(index, e);\n        e.setParent(this);\n    }\n\n    /**\n     * **\n     *\n     * @return Vector\n     */\n    public List getElements() {\n        return subElements;\n    }\n\n    public int count() {\n        return subElements.size();\n    }\n\n    /**\n     * Returns the element whose hierachy is indicated\n     * by \u003ccode\u003epath\u003c/code\u003e. The path is separated with\n     * periods(\".\").\u003cbr\u003e\n     * \u003cem\u003eNote: if one node has more than one elements\n     * that have the same name, that is, if its subnodes\n     * have the same path, only the first one is returned.\n     * \u003c/em\u003e\n     * @return the first element qualified with the path\n     * @param path the path string of the specified element\n     */\n    public XmlElement getElement(String path) {\n        int i \u003d path.indexOf(\u0027.\u0027);\n        String topName;\n        String subName;\n        if (i \u003d\u003d 0) {\n            path \u003d path.substring(1);\n            i \u003d path.indexOf(\u0027.\u0027);\n        }\n        if (i \u003e 0) {\n            topName \u003d path.substring(0, i);\n            subName \u003d path.substring(i + 1);\n        } else {\n            topName \u003d path;\n            subName \u003d null;\n        }\n        int j;\n        for (j \u003d 0; j \u003c subElements.size(); j++) {\n            if (((XmlElement) subElements.get(j)).getName().equals(topName)) {\n                if (subName !\u003d null) {\n                    return (((XmlElement) subElements.get(j)).getElement(subName));\n                } else {\n                    return ((XmlElement) subElements.get(j));\n                }\n            }\n        }\n        return null;\n    }\n\n    public XmlElement getElement(int index) {\n        return (XmlElement) subElements.get(index);\n    }\n\n    /**\n     * Adds a sub element to this one. The path\n     * is separated with dots(\".\").\n     *\n     * @return the \u003ccode\u003eXmlElement\u003c/code\u003e added\n     * @param path The subpath of the sub element to add\n     */\n    public XmlElement addSubElement(String path) {\n        XmlElement parent \u003d this;\n        XmlElement child;\n        String name;\n        while (path.indexOf(\u0027.\u0027) !\u003d -1) {\n            name \u003d path.substring(0, path.indexOf(\u0027.\u0027));\n            path \u003d path.substring(path.indexOf(\u0027.\u0027) + 1);\n            // if path startsWith \"/\" -\u003e skip\n            if (name.length() \u003d\u003d 0)\n                continue;\n            if (parent.getElement(name) !\u003d null) {\n                parent \u003d parent.getElement(name);\n            } else {\n                child \u003d new XmlElement(name);\n                parent.addElement(child);\n                parent \u003d child;\n            }\n        }\n        child \u003d new XmlElement(path);\n        parent.addElement(child);\n        return child;\n    }\n\n    /**\n     * Adds a sub element to this one\n     *\n     * @return XmlElement\n     * @param element\n     *            The XmlElement to add\n     */\n    public XmlElement addSubElement(XmlElement e) {\n        e.setParent(this);\n        subElements.add(e);\n        return e;\n    }\n\n    /**\n     * Adds a sub element to this one\n     *\n     * @return XmlElement\n     * @param Name\n     *            The name of the sub element to add\n     * @param Data\n     *            String Data for this element\n     */\n    public XmlElement addSubElement(String name, String data) {\n        XmlElement e \u003d new XmlElement(name);\n        e.setData(data);\n        e.setParent(this);\n        subElements.add(e);\n        return e;\n    }\n\n    /**\n     * Sets the parent element\n     *\n     * @param Parent\n     *            The XmlElement that contains this one\n     */\n    public void setParent(XmlElement parent) {\n        this.parent \u003d parent;\n    }\n\n    /**\n     * Gives the XmlElement containing the current element\n     *\n     * @return XmlElement\n     */\n    public XmlElement getParent() {\n        return parent;\n    }\n\n    /**\n     * Sets the data for this element\n     *\n     * @param D\n     *            The String representation of the data\n     */\n    public void setData(String d) {\n        data \u003d d;\n    }\n\n    /**\n     * Returns the data associated with the current Xml element\n     *\n     * @return String\n     */\n    public String getData() {\n        return data;\n    }\n\n    /**\n     * Returns the name of the current Xml element\n     *\n     * @return String\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * **\n     *\n     * @param out\n     *            OutputStream to print the data to\n     */\n    /*\n     * public void write(OutputStream out) throws IOException { PrintWriter PW \u003d\n     * new PrintWriter(out); PW.println(\" \u003c?xml version\u003d\\\"1.0\\\"\n     * encoding\u003d\\\"UTF-8\\\"?\u003e\"); if (SubElements.size() \u003e 0) { for (int i \u003d 0; i \u003c\n     * SubElements.size(); i++) { ((XmlElement)\n     * SubElements.get(i))._writeSubNode(PW, 4); } } PW.flush(); }\n     */\n    /**\n     * Prints sub nodes to the given data stream\n     *\n     * @param out\n     *            PrintWriter to use for printing\n     * @param indent\n     *            Number of spaces to indent things\n     */\n    /*\n     * private void _writeSubNode(PrintWriter out, int indent) throws\n     * IOException { _writeSpace(out, indent); out.print(\" \u003c\" + Name); //if (\n     * Attributes.size()\u003e1) out.print(\" \");\n     * \n     * for (Enumeration e \u003d Attributes.keys(); e.hasMoreElements();) { String K \u003d\n     * (String) e.nextElement(); out.print(K + \"\u003d\\\"\" + Attributes.get(K) + \"\\\"\n     * b\");\n     *  } out.print(\"\u003e\");\n     * \n     * if (Data !\u003d null \u0026\u0026 !Data.equals(\"\")) { if (Data.length() \u003e 20) {\n     * out.println(\"\"); _writeSpace(out, indent + 2); } out.print(Data); } if\n     * (SubElements.size() \u003e 0) { out.println(\"\"); for (int i \u003d 0; i \u003c\n     * SubElements.size(); i++) { ((XmlElement)\n     * SubElements.get(i))._writeSubNode( out, indent + 4); } _writeSpace(out,\n     * indent); } out.println(\" \u003c/\" + Name + \"\u003e\");\n     *  }\n     */\n    /**\n     * Prints out a given number of spaces\n     *\n     * @param out\n     *            PrintWriter to use for printing\n     * @param numSpaces\n     *            Number of spaces to print\n     */\n    /*\n     * private void _writeSpace(PrintWriter out, int numSpaces) throws\n     * IOException {\n     * \n     * for (int i \u003d 0; i \u003c numSpaces; i++) out.print(\" \"); }\n     * \n     * public static void printNode(XmlElement Node, String indent) { String\n     * Data \u003d Node.getData(); if (Data \u003d\u003d null || Data.equals(\"\")) {\n     * System.out.println(indent + Node.getName()); } else {\n     * System.out.println(indent + Node.getName() + \" \u003d \u0027\" + Data + \"\u0027\"); }\n     * Vector Subs \u003d Node.getElements(); int i, j; for (i \u003d 0; i \u003c Subs.size();\n     * i++) { printNode((XmlElement) Subs.get(i), indent + \" \"); } }\n     */\n    public static void printNode(XmlElement node, String indent) {\n        String data \u003d node.getData();\n        if ((data \u003d\u003d null) || data.equals(\"\")) {\n            System.out.println(indent + node.getName());\n        } else {\n            System.out.println(indent + node.getName() + \" \u003d \u0027\" + data + \"\u0027\");\n        }\n        // print attributes\n        for (Enumeration enumeration \u003d node.getAttributes().keys(); enumeration.hasMoreElements(); ) {\n            String key \u003d (String) enumeration.nextElement();\n            String value \u003d node.getAttribute(key);\n            System.out.println(indent + key + \":\" + value);\n        }\n        List subs \u003d node.getElements();\n        for (Iterator it \u003d subs.iterator(); it.hasNext(); ) {\n            printNode((XmlElement) it.next(), indent + \"    \");\n            // for (i \u003d 0; i \u003c subs.size(); i++) {\n            // printNode((XmlElement) subs.get(i), indent + \" \");\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Object clone() {\n        try {\n            // creates a shallow\n            XmlElement clone \u003d (XmlElement) super.clone();\n            // copy of this\n            // object\n            if (attributes !\u003d null) {\n                clone.setAttributes((Hashtable\u003cString, String\u003e) getAttributes().clone());\n            }\n            if (subElements !\u003d null) {\n                clone.subElements \u003d new Vector();\n                List childs \u003d getElements();\n                XmlElement child;\n                for (Iterator it \u003d childs.iterator(); it.hasNext(); ) {\n                    child \u003d (XmlElement) it.next();\n                    // for( int i\u003d0; i\u003cchilds.size(); i++ ) {\n                    // child \u003d (XmlElement) childs.get(i);\n                    clone.addSubElement((XmlElement) child.clone());\n                }\n            }\n            return clone;\n        } catch (CloneNotSupportedException cnse) {\n            throw new InternalError(\"Could not clone XmlElement: \" + cnse);\n        }\n    }\n\n    /**\n     * Sets the name.\n     *\n     * @param name\n     *            The name to set\n     */\n    public void setName(String name) {\n        this.name \u003d name;\n    }\n\n    /**\n     * Notify all Observers.\n     *\n     * @see java.util.Observable#notifyObservers()\n     */\n    @Override\n    public void notifyObservers() {\n        setChanged();\n        super.notifyObservers();\n    }\n\n    /**\n     * Returns true if the specified objects are equal. They are equal if they\n     * are both null OR if the \u003ccode\u003eequals()\u003c/code\u003e method return true. (\n     * \u003ccode\u003eobj1.equals(obj2)\u003c/code\u003e).\n     *\n     * @param obj1\n     *            first object to compare with.\n     * @param obj2\n     *            second object to compare with.\n     * @return true if they represent the same object; false if one of them is\n     *         null or the \u003ccode\u003eequals()\u003c/code\u003e method returns false.\n     */\n    private boolean equals(Object obj1, Object obj2) {\n        boolean equal \u003d false;\n        if ((obj1 \u003d\u003d null) \u0026\u0026 (obj2 \u003d\u003d null)) {\n            equal \u003d true;\n        } else if ((obj1 !\u003d null) \u0026\u0026 (obj2 !\u003d null)) {\n            equal \u003d obj1.equals(obj2);\n        }\n        return equal;\n    }\n\n    /**\n     *  {@inheritDoc}\n     * Recursive comparison.\n     */\n    @Override\n    public boolean equals(Object obj) {\n        boolean equal \u003d false;\n        if ((obj !\u003d null) \u0026\u0026 (obj instanceof XmlElement)) {\n            XmlElement other \u003d (XmlElement) obj;\n            if (equals(attributes, other.attributes) \u0026\u0026 equals(data, other.data) \u0026\u0026 equals(name, other.name) \u0026\u0026 equals(subElements, other.subElements)) {\n                equal \u003d true;\n            }\n        }\n        return equal;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int hashCode() {\n        //Hashcode value should be buffered.\n        int hashCode \u003d 23;\n        if (attributes !\u003d null) {\n            hashCode +\u003d (attributes.hashCode() * 13);\n        }\n        if (data !\u003d null) {\n            hashCode +\u003d (data.hashCode() * 17);\n        }\n        if (name !\u003d null) {\n            hashCode +\u003d (name.hashCode() * 29);\n        }\n        if (subElements !\u003d null) {\n            hashCode +\u003d (subElements.hashCode() * 57);\n        }\n        return hashCode;\n    }\n}\n//END public class XmlElement\n",
    "package": "com.allenstudio.ir.util",
    "classname": "XmlElement",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlElement_11Test.java",
    "test_prompt": "// XmlElement_11Test.java\npackage com.allenstudio.ir.util;\n\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Observable;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlElement}.\n* It contains ten unit test cases for the {@link XmlElement#addSubElement(String, String)} method.\n*/\nclass XmlElement_11Test {",
    "method_signature": "addSubElement(String, String)",
    "suffix": "11"
  },
  {
    "numberTests": "ten",
    "original_code": "// XmlIO.java\n/*\n * @(#)XmlIO.java\n * Created on 2005-8-12\n */\npackage com.allenstudio.ir.util;\n\nimport java.io.BufferedWriter;\nimport java.io.CharArrayWriter;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.net.URL;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Vector;\nimport java.util.logging.Logger;\nimport javax.swing.JOptionPane;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\n\n/**\n * XML IO reading and writing utility.\n *\n * @author fdietz\n */\npublic class XmlIO extends DefaultHandler {\n\n    private static final Logger LOG \u003d Logger.getLogger(\"org.columba.core.xml\");\n\n    private static final String ROOT_XML_ELEMENT_NAME \u003d \"__INSPIRENTO_XML_TREE_TOP__\";\n\n    // List of sub-elements\n    @SuppressWarnings(\"unused\")\n    private List\u003cXmlElement\u003e elements;\n\n    // Top level element (Used to hold everything else)\n    private XmlElement rootElement;\n\n    // The current element you are working on\n    private XmlElement currentElement;\n\n    // For writing out the data\n    // Indent for each level\n    private int writeIndent \u003d 2;\n\n    // Maximum data to put on a \"one liner\"\n    private int maxOneLineData \u003d 20;\n\n    // The SAX 2 parser...\n    @SuppressWarnings(\"unused\")\n    private XMLReader xr;\n\n    // Buffer for collecting data from\n    // the \"characters\" SAX event.\n    private CharArrayWriter contents \u003d new CharArrayWriter();\n\n    private URL url \u003d null;\n\n    /*\n  // Default constructor\n  public XmlIO() {\n  }\n  */\n    /*\n  // setup and load constructor\n  public XmlIO(String FilePath) {\n          currentElement \u003d null;\n\n\n  }\n  */\n    public XmlIO(URL url) {\n        super();\n        this.url \u003d url;\n    }\n\n    // setup and load constructor\n    public XmlIO() {\n        currentElement \u003d null;\n    }\n\n    // setup and load constructor\n    /**\n     * Creates a XmlIO object with the specified element at the top.\n     * @param element the element at the top.\n     */\n    public XmlIO(XmlElement element) {\n        rootElement \u003d new XmlElement(ROOT_XML_ELEMENT_NAME);\n        rootElement.addElement(element);\n    }\n\n    public void setURL(URL url) {\n        this.url \u003d url;\n    }\n\n    public boolean load() {\n        //this.file \u003d F;\n        return load(url);\n    }\n\n    // Load a file. This is what starts things off.\n    /**\n     * Loads from the InputStream into the root Xml Element.\n     * @param input the input stream to load from.\n     */\n    public boolean load(InputStream input) {\n        elements \u003d new Vector\u003cXmlElement\u003e();\n        rootElement \u003d new XmlElement(ROOT_XML_ELEMENT_NAME);\n        currentElement \u003d rootElement;\n        try {\n            // Create the XML reader...\n            //      xr \u003d XMLReaderFactory.createXMLReader();\n            SAXParserFactory factory \u003d SAXParserFactory.newInstance();\n            // Set the ContentHandler...\n            //      xr.setContentHandler( this );\n            SAXParser saxParser \u003d factory.newSAXParser();\n            saxParser.parse(input, this);\n        } catch (javax.xml.parsers.ParserConfigurationException ex) {\n            LOG.severe(\"XML config error while attempting to read from the input stream \\n\u0027\" + input + \"\u0027\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n            return (false);\n        } catch (SAXException ex) {\n            // Error\n            LOG.severe(\"XML parse error while attempting to read from the input stream \\n\u0027\" + input + \"\u0027\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n            return (false);\n        } catch (IOException ex) {\n            LOG.severe(\"I/O error while attempting to read from the input stream \\n\u0027\" + input + \"\u0027\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n            return (false);\n        }\n        //XmlElement.printNode( getRoot(), \"\");\n        return (true);\n    }\n\n    /**\n     * Load a file. This is what starts things off.\n     * @param inputURL the URL to load XML from.\n     */\n    public boolean load(URL inputURL) {\n        elements \u003d new Vector\u003cXmlElement\u003e();\n        rootElement \u003d new XmlElement(ROOT_XML_ELEMENT_NAME);\n        currentElement \u003d rootElement;\n        try {\n            // Create the XML reader...\n            //      xr \u003d XMLReaderFactory.createXMLReader();\n            SAXParserFactory factory \u003d SAXParserFactory.newInstance();\n            // Set the ContentHandler...\n            //      xr.setContentHandler( this );\n            SAXParser saxParser \u003d factory.newSAXParser();\n            saxParser.parse(inputURL.toString(), this);\n        } catch (javax.xml.parsers.ParserConfigurationException ex) {\n            LOG.severe(\"XML config error while attempting to read XML file \\n\u0027\" + inputURL + \"\u0027\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n            return (false);\n        } catch (SAXException ex) {\n            // Error\n            LOG.severe(\"XML parse error while attempting to read XML file \\n\u0027\" + inputURL + \"\u0027\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n            return (false);\n        } catch (IOException ex) {\n            LOG.severe(\"I/O error while attempting to read XML file \\n\u0027\" + inputURL + \"\u0027\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n            return (false);\n        }\n        //XmlElement.printNode( getRoot(), \"\");\n        return (true);\n    }\n\n    // Implement the content hander methods that\n    // will delegate SAX events to the tag tracker network.\n    @Override\n    public void startElement(String namespaceURI, String localName, String qName, Attributes attrs) throws SAXException {\n        // Resetting contents buffer.\n        // Assuming that tags either tag content or children, not both.\n        // This is usually the case with XML that is representing\n        // data strucutures in a programming language independant way.\n        // This assumption is not typically valid where XML is being\n        // used in the classical text mark up style where tagging\n        // is used to style content and several styles may overlap\n        // at once.\n        try {\n            contents.reset();\n            // element name\n            String name \u003d localName;\n            if (name.equals(\"\")) {\n                // namespaceAware \u003d false\n                name \u003d qName;\n            }\n            XmlElement p \u003d currentElement;\n            currentElement \u003d currentElement.addSubElement(name);\n            currentElement.setParent(p);\n            if (attrs !\u003d null) {\n                for (int i \u003d 0; i \u003c attrs.getLength(); i++) {\n                    // Attr name\n                    String aName \u003d attrs.getLocalName(i);\n                    if (aName.equals(\"\")) {\n                        aName \u003d attrs.getQName(i);\n                    }\n                    currentElement.addAttribute(aName, attrs.getValue(i));\n                }\n            }\n        } catch (java.lang.NullPointerException ex) {\n            LOG.severe(\"Null!!!\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n        }\n    }\n\n    @Override\n    public void endElement(String namespaceURI, String localName, String qName) throws SAXException {\n        currentElement.setData(contents.toString().trim());\n        contents.reset();\n        currentElement \u003d currentElement.getParent();\n    }\n\n    @Override\n    public void characters(char[] ch, int start, int length) throws SAXException {\n        // accumulate the contents into a buffer.\n        contents.write(ch, start, length);\n    }\n\n    /**\n     * Returns the root for the XmlElement hiearchy.\n     * Note that this Xml Element will always have the name \u003ccode\u003e__COLUMBA_XML_TREE_TOP__\u003c/code\u003e.\n     * \u003cp\u003e\n     * Methods that want to retrieve elements from this root should use\n     * the {@link XmlElement#getElement(String)} in order to get the wanted\n     * element.\n     * @return a XmlElement if it has been loaded or initialized with it; null otherwise.\n     */\n    public XmlElement getRoot() {\n        return (rootElement);\n    }\n\n    public void errorDialog(String Msg) {\n        JOptionPane.showMessageDialog(null, \"Error: \" + Msg);\n    }\n\n    public void warningDialog(String Msg) {\n        JOptionPane.showMessageDialog(null, \"Warning: \" + Msg);\n    }\n\n    public void infoDialog(String Msg) {\n        JOptionPane.showMessageDialog(null, \"Info: \" + Msg);\n    }\n\n    public void save() throws Exception {\n        write(new FileOutputStream(url.getPath()));\n    }\n\n    //\n    // Writer interface\n    //\n    public void write(OutputStream out) throws IOException {\n        BufferedWriter PW \u003d new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        PW.write(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\"?\u003e\\n\");\n        if (rootElement.subElements.size() \u003e 0) {\n            for (int i \u003d 0; i \u003c rootElement.subElements.size(); i++) {\n                _writeSubNode(PW, (XmlElement) rootElement.subElements.get(i), 0);\n            }\n        }\n        PW.flush();\n    }\n\n    private void _writeSubNode(Writer out, XmlElement element, int indent) throws IOException {\n        _writeSpace(out, indent);\n        out.write(\"\u003c\");\n        out.write(element.getName());\n        for (Enumeration e \u003d element.getAttributeNames(); e.hasMoreElements(); ) {\n            String K \u003d (String) e.nextElement();\n            out.write(\" \" + K + \"\u003d\\\"\" + InspirentoUtilities.escapeText(element.getAttribute(K)) + \"\\\"\");\n        }\n        out.write(\"\u003e\");\n        String data \u003d element.getData();\n        if ((data !\u003d null) \u0026\u0026 !data.equals(\"\")) {\n            if (data.length() \u003e maxOneLineData) {\n                out.write(\"\\n\");\n                _writeSpace(out, indent + writeIndent);\n            }\n            out.write(InspirentoUtilities.escapeText(data));\n        }\n        List subElements \u003d element.getElements();\n        if (subElements.size() \u003e 0) {\n            out.write(\"\\n\");\n            for (Iterator it \u003d subElements.iterator(); it.hasNext(); ) {\n                _writeSubNode(out, (XmlElement) it.next(), indent + writeIndent);\n                // for (int i \u003d 0; i \u003c subElements.size(); i++) {\n                // _writeSubNode(\n                // out,\n                // (XmlElement) subElements.get(i),\n                // indent + writeIndent);\n            }\n            _writeSpace(out, indent);\n        }\n        if (data.length() \u003e maxOneLineData) {\n            out.write(\"\\n\");\n            _writeSpace(out, indent);\n        }\n        out.write(\"\u003c/\" + InspirentoUtilities.escapeText(element.getName()) + \"\u003e\\n\");\n    }\n\n    private void _writeSpace(Writer out, int numSpaces) throws IOException {\n        for (int i \u003d 0; i \u003c numSpaces; i++) {\n            out.write(\" \");\n        }\n    }\n}\n//End class XmlIO\n",
    "package": "com.allenstudio.ir.util",
    "classname": "XmlIO",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlIO_1Test.java",
    "test_prompt": "// XmlIO_1Test.java\npackage com.allenstudio.ir.util;\n\nimport java.io.BufferedWriter;\nimport java.io.CharArrayWriter;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.net.URL;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Vector;\nimport java.util.logging.Logger;\nimport javax.swing.JOptionPane;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlIO}.\n* It contains ten unit test cases for the {@link XmlIO#load(InputStream)} method.\n*/\nclass XmlIO_1Test {",
    "method_signature": "load(InputStream)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// XmlIO.java\n/*\n * @(#)XmlIO.java\n * Created on 2005-8-12\n */\npackage com.allenstudio.ir.util;\n\nimport java.io.BufferedWriter;\nimport java.io.CharArrayWriter;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.net.URL;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Vector;\nimport java.util.logging.Logger;\nimport javax.swing.JOptionPane;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\n\n/**\n * XML IO reading and writing utility.\n *\n * @author fdietz\n */\npublic class XmlIO extends DefaultHandler {\n\n    private static final Logger LOG \u003d Logger.getLogger(\"org.columba.core.xml\");\n\n    private static final String ROOT_XML_ELEMENT_NAME \u003d \"__INSPIRENTO_XML_TREE_TOP__\";\n\n    // List of sub-elements\n    @SuppressWarnings(\"unused\")\n    private List\u003cXmlElement\u003e elements;\n\n    // Top level element (Used to hold everything else)\n    private XmlElement rootElement;\n\n    // The current element you are working on\n    private XmlElement currentElement;\n\n    // For writing out the data\n    // Indent for each level\n    private int writeIndent \u003d 2;\n\n    // Maximum data to put on a \"one liner\"\n    private int maxOneLineData \u003d 20;\n\n    // The SAX 2 parser...\n    @SuppressWarnings(\"unused\")\n    private XMLReader xr;\n\n    // Buffer for collecting data from\n    // the \"characters\" SAX event.\n    private CharArrayWriter contents \u003d new CharArrayWriter();\n\n    private URL url \u003d null;\n\n    /*\n  // Default constructor\n  public XmlIO() {\n  }\n  */\n    /*\n  // setup and load constructor\n  public XmlIO(String FilePath) {\n          currentElement \u003d null;\n\n\n  }\n  */\n    public XmlIO(URL url) {\n        super();\n        this.url \u003d url;\n    }\n\n    // setup and load constructor\n    public XmlIO() {\n        currentElement \u003d null;\n    }\n\n    // setup and load constructor\n    /**\n     * Creates a XmlIO object with the specified element at the top.\n     * @param element the element at the top.\n     */\n    public XmlIO(XmlElement element) {\n        rootElement \u003d new XmlElement(ROOT_XML_ELEMENT_NAME);\n        rootElement.addElement(element);\n    }\n\n    public void setURL(URL url) {\n        this.url \u003d url;\n    }\n\n    public boolean load() {\n        //this.file \u003d F;\n        return load(url);\n    }\n\n    // Load a file. This is what starts things off.\n    /**\n     * Loads from the InputStream into the root Xml Element.\n     * @param input the input stream to load from.\n     */\n    public boolean load(InputStream input) {\n        elements \u003d new Vector\u003cXmlElement\u003e();\n        rootElement \u003d new XmlElement(ROOT_XML_ELEMENT_NAME);\n        currentElement \u003d rootElement;\n        try {\n            // Create the XML reader...\n            //      xr \u003d XMLReaderFactory.createXMLReader();\n            SAXParserFactory factory \u003d SAXParserFactory.newInstance();\n            // Set the ContentHandler...\n            //      xr.setContentHandler( this );\n            SAXParser saxParser \u003d factory.newSAXParser();\n            saxParser.parse(input, this);\n        } catch (javax.xml.parsers.ParserConfigurationException ex) {\n            LOG.severe(\"XML config error while attempting to read from the input stream \\n\u0027\" + input + \"\u0027\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n            return (false);\n        } catch (SAXException ex) {\n            // Error\n            LOG.severe(\"XML parse error while attempting to read from the input stream \\n\u0027\" + input + \"\u0027\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n            return (false);\n        } catch (IOException ex) {\n            LOG.severe(\"I/O error while attempting to read from the input stream \\n\u0027\" + input + \"\u0027\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n            return (false);\n        }\n        //XmlElement.printNode( getRoot(), \"\");\n        return (true);\n    }\n\n    /**\n     * Load a file. This is what starts things off.\n     * @param inputURL the URL to load XML from.\n     */\n    public boolean load(URL inputURL) {\n        elements \u003d new Vector\u003cXmlElement\u003e();\n        rootElement \u003d new XmlElement(ROOT_XML_ELEMENT_NAME);\n        currentElement \u003d rootElement;\n        try {\n            // Create the XML reader...\n            //      xr \u003d XMLReaderFactory.createXMLReader();\n            SAXParserFactory factory \u003d SAXParserFactory.newInstance();\n            // Set the ContentHandler...\n            //      xr.setContentHandler( this );\n            SAXParser saxParser \u003d factory.newSAXParser();\n            saxParser.parse(inputURL.toString(), this);\n        } catch (javax.xml.parsers.ParserConfigurationException ex) {\n            LOG.severe(\"XML config error while attempting to read XML file \\n\u0027\" + inputURL + \"\u0027\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n            return (false);\n        } catch (SAXException ex) {\n            // Error\n            LOG.severe(\"XML parse error while attempting to read XML file \\n\u0027\" + inputURL + \"\u0027\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n            return (false);\n        } catch (IOException ex) {\n            LOG.severe(\"I/O error while attempting to read XML file \\n\u0027\" + inputURL + \"\u0027\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n            return (false);\n        }\n        //XmlElement.printNode( getRoot(), \"\");\n        return (true);\n    }\n\n    // Implement the content hander methods that\n    // will delegate SAX events to the tag tracker network.\n    @Override\n    public void startElement(String namespaceURI, String localName, String qName, Attributes attrs) throws SAXException {\n        // Resetting contents buffer.\n        // Assuming that tags either tag content or children, not both.\n        // This is usually the case with XML that is representing\n        // data strucutures in a programming language independant way.\n        // This assumption is not typically valid where XML is being\n        // used in the classical text mark up style where tagging\n        // is used to style content and several styles may overlap\n        // at once.\n        try {\n            contents.reset();\n            // element name\n            String name \u003d localName;\n            if (name.equals(\"\")) {\n                // namespaceAware \u003d false\n                name \u003d qName;\n            }\n            XmlElement p \u003d currentElement;\n            currentElement \u003d currentElement.addSubElement(name);\n            currentElement.setParent(p);\n            if (attrs !\u003d null) {\n                for (int i \u003d 0; i \u003c attrs.getLength(); i++) {\n                    // Attr name\n                    String aName \u003d attrs.getLocalName(i);\n                    if (aName.equals(\"\")) {\n                        aName \u003d attrs.getQName(i);\n                    }\n                    currentElement.addAttribute(aName, attrs.getValue(i));\n                }\n            }\n        } catch (java.lang.NullPointerException ex) {\n            LOG.severe(\"Null!!!\");\n            LOG.severe(ex.toString());\n            ex.printStackTrace();\n        }\n    }\n\n    @Override\n    public void endElement(String namespaceURI, String localName, String qName) throws SAXException {\n        currentElement.setData(contents.toString().trim());\n        contents.reset();\n        currentElement \u003d currentElement.getParent();\n    }\n\n    @Override\n    public void characters(char[] ch, int start, int length) throws SAXException {\n        // accumulate the contents into a buffer.\n        contents.write(ch, start, length);\n    }\n\n    /**\n     * Returns the root for the XmlElement hiearchy.\n     * Note that this Xml Element will always have the name \u003ccode\u003e__COLUMBA_XML_TREE_TOP__\u003c/code\u003e.\n     * \u003cp\u003e\n     * Methods that want to retrieve elements from this root should use\n     * the {@link XmlElement#getElement(String)} in order to get the wanted\n     * element.\n     * @return a XmlElement if it has been loaded or initialized with it; null otherwise.\n     */\n    public XmlElement getRoot() {\n        return (rootElement);\n    }\n\n    public void errorDialog(String Msg) {\n        JOptionPane.showMessageDialog(null, \"Error: \" + Msg);\n    }\n\n    public void warningDialog(String Msg) {\n        JOptionPane.showMessageDialog(null, \"Warning: \" + Msg);\n    }\n\n    public void infoDialog(String Msg) {\n        JOptionPane.showMessageDialog(null, \"Info: \" + Msg);\n    }\n\n    public void save() throws Exception {\n        write(new FileOutputStream(url.getPath()));\n    }\n\n    //\n    // Writer interface\n    //\n    public void write(OutputStream out) throws IOException {\n        BufferedWriter PW \u003d new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        PW.write(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\"?\u003e\\n\");\n        if (rootElement.subElements.size() \u003e 0) {\n            for (int i \u003d 0; i \u003c rootElement.subElements.size(); i++) {\n                _writeSubNode(PW, (XmlElement) rootElement.subElements.get(i), 0);\n            }\n        }\n        PW.flush();\n    }\n\n    private void _writeSubNode(Writer out, XmlElement element, int indent) throws IOException {\n        _writeSpace(out, indent);\n        out.write(\"\u003c\");\n        out.write(element.getName());\n        for (Enumeration e \u003d element.getAttributeNames(); e.hasMoreElements(); ) {\n            String K \u003d (String) e.nextElement();\n            out.write(\" \" + K + \"\u003d\\\"\" + InspirentoUtilities.escapeText(element.getAttribute(K)) + \"\\\"\");\n        }\n        out.write(\"\u003e\");\n        String data \u003d element.getData();\n        if ((data !\u003d null) \u0026\u0026 !data.equals(\"\")) {\n            if (data.length() \u003e maxOneLineData) {\n                out.write(\"\\n\");\n                _writeSpace(out, indent + writeIndent);\n            }\n            out.write(InspirentoUtilities.escapeText(data));\n        }\n        List subElements \u003d element.getElements();\n        if (subElements.size() \u003e 0) {\n            out.write(\"\\n\");\n            for (Iterator it \u003d subElements.iterator(); it.hasNext(); ) {\n                _writeSubNode(out, (XmlElement) it.next(), indent + writeIndent);\n                // for (int i \u003d 0; i \u003c subElements.size(); i++) {\n                // _writeSubNode(\n                // out,\n                // (XmlElement) subElements.get(i),\n                // indent + writeIndent);\n            }\n            _writeSpace(out, indent);\n        }\n        if (data.length() \u003e maxOneLineData) {\n            out.write(\"\\n\");\n            _writeSpace(out, indent);\n        }\n        out.write(\"\u003c/\" + InspirentoUtilities.escapeText(element.getName()) + \"\u003e\\n\");\n    }\n\n    private void _writeSpace(Writer out, int numSpaces) throws IOException {\n        for (int i \u003d 0; i \u003c numSpaces; i++) {\n            out.write(\" \");\n        }\n    }\n}\n//End class XmlIO\n",
    "package": "com.allenstudio.ir.util",
    "classname": "XmlIO",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/XmlIO_2Test.java",
    "test_prompt": "// XmlIO_2Test.java\npackage com.allenstudio.ir.util;\n\nimport java.io.BufferedWriter;\nimport java.io.CharArrayWriter;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.net.URL;\nimport java.util.Enumeration;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Vector;\nimport java.util.logging.Logger;\nimport javax.swing.JOptionPane;\nimport javax.xml.parsers.SAXParser;\nimport javax.xml.parsers.SAXParserFactory;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link XmlIO}.\n* It contains ten unit test cases for the {@link XmlIO#load(URL)} method.\n*/\nclass XmlIO_2Test {",
    "method_signature": "load(URL)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// InspirentoUtilities.java\npackage com.allenstudio.ir.util;\n\nimport java.util.StringTokenizer;\nimport java.util.Vector;\n\n/*\n * @(#)InspirentoUtilities.java\n * Created on 2005-8-1\n * Inspirento, Copyright AllenStudio, All Rights Reserved\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n *\n */\n/**\n * Wraps some static utility method employed\n * in Inspirento.\n *\n * @author Allen Chue\n */\npublic class InspirentoUtilities {\n\n    /**\n     * Tokenizes a input string to produce\n     * an array of type \u003ccode\u003eString\u003c/code\u003e.\u003cbr\u003e\n     * This method is used in building menus and\n     * toolbar using a resource file. For instance,\n     * the following code will get an array of contents\n     * {\"file\", \"edit\", \"view\"}:\n     * \u003cpre\u003e\n     * String str \u003d \"file edit view\";\n     * String[] array \u003d tokenize(str);\n     * \u003c/pre\u003e\n     * @param input the input \u003ccode\u003eString\u003c/code\u003e\n     * @return an String array containing all tokens\n     * @see java.util.StringTokenizer\n     */\n    public static String[] tokenize(String input) {\n        Vector\u003cString\u003e v \u003d new Vector\u003cString\u003e();\n        StringTokenizer t \u003d new StringTokenizer(input);\n        String[] cmd;\n        while (t.hasMoreTokens()) v.addElement(t.nextToken());\n        cmd \u003d new String[v.size()];\n        for (int i \u003d 0; i \u003c cmd.length; i++) cmd[i] \u003d v.elementAt(i);\n        return cmd;\n    }\n\n    /**\n     * Tokenizes a input string to produce\n     * an array of type \u003ccode\u003eString\u003c/code\u003e.\u003cbr\u003e\n     * This method is used in building menus and\n     * toolbar using a resource file. For instance,\n     * the following code will get an array of contents\n     * {\"file\", \"edit\", \"view\"}:\n     * \u003cpre\u003e\n     * String str \u003d \"file edit view\";\n     * String[] array \u003d tokenize(str);\n     * \u003c/pre\u003e\n     * \u003cbr\u003eThis method offers customized delim.\n     * @param input the input \u003ccode\u003eString\u003c/code\u003e\n     * @return an String array containing all tokens\n     * @see java.util.StringTokenizer\n     */\n    public static String[] tokenize(String input, String delim) {\n        Vector\u003cString\u003e v \u003d new Vector\u003cString\u003e();\n        StringTokenizer t \u003d new StringTokenizer(input, \" \\t\\n\\r\\f\" + delim);\n        String[] cmd;\n        while (t.hasMoreTokens()) v.addElement(t.nextToken());\n        cmd \u003d new String[v.size()];\n        for (int i \u003d 0; i \u003c cmd.length; i++) cmd[i] \u003d v.elementAt(i);\n        return cmd;\n    }\n\n    /**\n     * Replaces all characters that may\n     * affect program\u0027s normal running in the string\n     * with the escape strings in HTML.\n     * @param str source string\n     * @return a string which is processed\n     */\n    public static String escapeText(String str) {\n        StringBuffer buffer \u003d new StringBuffer(str);\n        stringReplaceAll(buffer, \u0027\u0026\u0027, \"\u0026amp;\");\n        stringReplaceAll(buffer, \u0027\u003c\u0027, \"\u0026lt;\");\n        stringReplaceAll(buffer, \u0027\u003e\u0027, \"\u0026gt;\");\n        stringReplaceAll(buffer, \u0027\"\u0027, \"\u0026quot;\");\n        stringReplaceAll(buffer, \u0027\\\u0027\u0027, \"\u0026apos;\");\n        return buffer.toString();\n    }\n\n    /**\n     * Utility method to replace all the specified \u003ccode\u003etoken\u003c/code\u003e in\n     * string \u003ccode\u003esource\u003c/code\u003e with the specified \u003ccode\u003e\n     * replacement\u003c/code\u003e.\n     * @param source the source string\n     * @param token the token to be replaced\n     * @param replacement the string used to replace the token\n     * @return a \u003ccode\u003eStringBuffer\u003c/code\u003e object that contains\n     *         the modified string\n     * @see java.lang.StringBuffer#replace(int, int, java.lang.String)\n     */\n    public static StringBuffer stringReplaceAll(StringBuffer source, char token, String replacement) {\n        for (int i \u003d 0; i \u003c source.length(); i++) {\n            if (source.charAt(i) \u003d\u003d token) {\n                //++i?\n                source \u003d source.replace(i, ++i, replacement);\n            }\n        }\n        return source;\n    }\n}\n",
    "package": "com.allenstudio.ir.util",
    "classname": "InspirentoUtilities",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/InspirentoUtilities_0Test.java",
    "test_prompt": "// InspirentoUtilities_0Test.java\npackage com.allenstudio.ir.util;\n\nimport java.util.StringTokenizer;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link InspirentoUtilities}.\n* It contains ten unit test cases for the {@link InspirentoUtilities#tokenize(String)} method.\n*/\nclass InspirentoUtilities_0Test {",
    "method_signature": "tokenize(String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// InspirentoUtilities.java\npackage com.allenstudio.ir.util;\n\nimport java.util.StringTokenizer;\nimport java.util.Vector;\n\n/*\n * @(#)InspirentoUtilities.java\n * Created on 2005-8-1\n * Inspirento, Copyright AllenStudio, All Rights Reserved\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n *\n */\n/**\n * Wraps some static utility method employed\n * in Inspirento.\n *\n * @author Allen Chue\n */\npublic class InspirentoUtilities {\n\n    /**\n     * Tokenizes a input string to produce\n     * an array of type \u003ccode\u003eString\u003c/code\u003e.\u003cbr\u003e\n     * This method is used in building menus and\n     * toolbar using a resource file. For instance,\n     * the following code will get an array of contents\n     * {\"file\", \"edit\", \"view\"}:\n     * \u003cpre\u003e\n     * String str \u003d \"file edit view\";\n     * String[] array \u003d tokenize(str);\n     * \u003c/pre\u003e\n     * @param input the input \u003ccode\u003eString\u003c/code\u003e\n     * @return an String array containing all tokens\n     * @see java.util.StringTokenizer\n     */\n    public static String[] tokenize(String input) {\n        Vector\u003cString\u003e v \u003d new Vector\u003cString\u003e();\n        StringTokenizer t \u003d new StringTokenizer(input);\n        String[] cmd;\n        while (t.hasMoreTokens()) v.addElement(t.nextToken());\n        cmd \u003d new String[v.size()];\n        for (int i \u003d 0; i \u003c cmd.length; i++) cmd[i] \u003d v.elementAt(i);\n        return cmd;\n    }\n\n    /**\n     * Tokenizes a input string to produce\n     * an array of type \u003ccode\u003eString\u003c/code\u003e.\u003cbr\u003e\n     * This method is used in building menus and\n     * toolbar using a resource file. For instance,\n     * the following code will get an array of contents\n     * {\"file\", \"edit\", \"view\"}:\n     * \u003cpre\u003e\n     * String str \u003d \"file edit view\";\n     * String[] array \u003d tokenize(str);\n     * \u003c/pre\u003e\n     * \u003cbr\u003eThis method offers customized delim.\n     * @param input the input \u003ccode\u003eString\u003c/code\u003e\n     * @return an String array containing all tokens\n     * @see java.util.StringTokenizer\n     */\n    public static String[] tokenize(String input, String delim) {\n        Vector\u003cString\u003e v \u003d new Vector\u003cString\u003e();\n        StringTokenizer t \u003d new StringTokenizer(input, \" \\t\\n\\r\\f\" + delim);\n        String[] cmd;\n        while (t.hasMoreTokens()) v.addElement(t.nextToken());\n        cmd \u003d new String[v.size()];\n        for (int i \u003d 0; i \u003c cmd.length; i++) cmd[i] \u003d v.elementAt(i);\n        return cmd;\n    }\n\n    /**\n     * Replaces all characters that may\n     * affect program\u0027s normal running in the string\n     * with the escape strings in HTML.\n     * @param str source string\n     * @return a string which is processed\n     */\n    public static String escapeText(String str) {\n        StringBuffer buffer \u003d new StringBuffer(str);\n        stringReplaceAll(buffer, \u0027\u0026\u0027, \"\u0026amp;\");\n        stringReplaceAll(buffer, \u0027\u003c\u0027, \"\u0026lt;\");\n        stringReplaceAll(buffer, \u0027\u003e\u0027, \"\u0026gt;\");\n        stringReplaceAll(buffer, \u0027\"\u0027, \"\u0026quot;\");\n        stringReplaceAll(buffer, \u0027\\\u0027\u0027, \"\u0026apos;\");\n        return buffer.toString();\n    }\n\n    /**\n     * Utility method to replace all the specified \u003ccode\u003etoken\u003c/code\u003e in\n     * string \u003ccode\u003esource\u003c/code\u003e with the specified \u003ccode\u003e\n     * replacement\u003c/code\u003e.\n     * @param source the source string\n     * @param token the token to be replaced\n     * @param replacement the string used to replace the token\n     * @return a \u003ccode\u003eStringBuffer\u003c/code\u003e object that contains\n     *         the modified string\n     * @see java.lang.StringBuffer#replace(int, int, java.lang.String)\n     */\n    public static StringBuffer stringReplaceAll(StringBuffer source, char token, String replacement) {\n        for (int i \u003d 0; i \u003c source.length(); i++) {\n            if (source.charAt(i) \u003d\u003d token) {\n                //++i?\n                source \u003d source.replace(i, ++i, replacement);\n            }\n        }\n        return source;\n    }\n}\n",
    "package": "com.allenstudio.ir.util",
    "classname": "InspirentoUtilities",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/InspirentoUtilities_2Test.java",
    "test_prompt": "// InspirentoUtilities_2Test.java\npackage com.allenstudio.ir.util;\n\nimport java.util.StringTokenizer;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link InspirentoUtilities}.\n* It contains ten unit test cases for the {@link InspirentoUtilities#escapeText(String)} method.\n*/\nclass InspirentoUtilities_2Test {",
    "method_signature": "escapeText(String)",
    "suffix": "2"
  },
  {
    "numberTests": "ten",
    "original_code": "// InspirentoUtilities.java\npackage com.allenstudio.ir.util;\n\nimport java.util.StringTokenizer;\nimport java.util.Vector;\n\n/*\n * @(#)InspirentoUtilities.java\n * Created on 2005-8-1\n * Inspirento, Copyright AllenStudio, All Rights Reserved\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n *\n */\n/**\n * Wraps some static utility method employed\n * in Inspirento.\n *\n * @author Allen Chue\n */\npublic class InspirentoUtilities {\n\n    /**\n     * Tokenizes a input string to produce\n     * an array of type \u003ccode\u003eString\u003c/code\u003e.\u003cbr\u003e\n     * This method is used in building menus and\n     * toolbar using a resource file. For instance,\n     * the following code will get an array of contents\n     * {\"file\", \"edit\", \"view\"}:\n     * \u003cpre\u003e\n     * String str \u003d \"file edit view\";\n     * String[] array \u003d tokenize(str);\n     * \u003c/pre\u003e\n     * @param input the input \u003ccode\u003eString\u003c/code\u003e\n     * @return an String array containing all tokens\n     * @see java.util.StringTokenizer\n     */\n    public static String[] tokenize(String input) {\n        Vector\u003cString\u003e v \u003d new Vector\u003cString\u003e();\n        StringTokenizer t \u003d new StringTokenizer(input);\n        String[] cmd;\n        while (t.hasMoreTokens()) v.addElement(t.nextToken());\n        cmd \u003d new String[v.size()];\n        for (int i \u003d 0; i \u003c cmd.length; i++) cmd[i] \u003d v.elementAt(i);\n        return cmd;\n    }\n\n    /**\n     * Tokenizes a input string to produce\n     * an array of type \u003ccode\u003eString\u003c/code\u003e.\u003cbr\u003e\n     * This method is used in building menus and\n     * toolbar using a resource file. For instance,\n     * the following code will get an array of contents\n     * {\"file\", \"edit\", \"view\"}:\n     * \u003cpre\u003e\n     * String str \u003d \"file edit view\";\n     * String[] array \u003d tokenize(str);\n     * \u003c/pre\u003e\n     * \u003cbr\u003eThis method offers customized delim.\n     * @param input the input \u003ccode\u003eString\u003c/code\u003e\n     * @return an String array containing all tokens\n     * @see java.util.StringTokenizer\n     */\n    public static String[] tokenize(String input, String delim) {\n        Vector\u003cString\u003e v \u003d new Vector\u003cString\u003e();\n        StringTokenizer t \u003d new StringTokenizer(input, \" \\t\\n\\r\\f\" + delim);\n        String[] cmd;\n        while (t.hasMoreTokens()) v.addElement(t.nextToken());\n        cmd \u003d new String[v.size()];\n        for (int i \u003d 0; i \u003c cmd.length; i++) cmd[i] \u003d v.elementAt(i);\n        return cmd;\n    }\n\n    /**\n     * Replaces all characters that may\n     * affect program\u0027s normal running in the string\n     * with the escape strings in HTML.\n     * @param str source string\n     * @return a string which is processed\n     */\n    public static String escapeText(String str) {\n        StringBuffer buffer \u003d new StringBuffer(str);\n        stringReplaceAll(buffer, \u0027\u0026\u0027, \"\u0026amp;\");\n        stringReplaceAll(buffer, \u0027\u003c\u0027, \"\u0026lt;\");\n        stringReplaceAll(buffer, \u0027\u003e\u0027, \"\u0026gt;\");\n        stringReplaceAll(buffer, \u0027\"\u0027, \"\u0026quot;\");\n        stringReplaceAll(buffer, \u0027\\\u0027\u0027, \"\u0026apos;\");\n        return buffer.toString();\n    }\n\n    /**\n     * Utility method to replace all the specified \u003ccode\u003etoken\u003c/code\u003e in\n     * string \u003ccode\u003esource\u003c/code\u003e with the specified \u003ccode\u003e\n     * replacement\u003c/code\u003e.\n     * @param source the source string\n     * @param token the token to be replaced\n     * @param replacement the string used to replace the token\n     * @return a \u003ccode\u003eStringBuffer\u003c/code\u003e object that contains\n     *         the modified string\n     * @see java.lang.StringBuffer#replace(int, int, java.lang.String)\n     */\n    public static StringBuffer stringReplaceAll(StringBuffer source, char token, String replacement) {\n        for (int i \u003d 0; i \u003c source.length(); i++) {\n            if (source.charAt(i) \u003d\u003d token) {\n                //++i?\n                source \u003d source.replace(i, ++i, replacement);\n            }\n        }\n        return source;\n    }\n}\n",
    "package": "com.allenstudio.ir.util",
    "classname": "InspirentoUtilities",
    "id": "/EvoSuiteBenchmark/original/17_inspirento/src/main/java/com/allenstudio/ir/util/InspirentoUtilities_3Test.java",
    "test_prompt": "// InspirentoUtilities_3Test.java\npackage com.allenstudio.ir.util;\n\nimport java.util.StringTokenizer;\nimport java.util.Vector;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link InspirentoUtilities}.\n* It contains ten unit test cases for the {@link InspirentoUtilities#stringReplaceAll(StringBuffer, char, String)} method.\n*/\nclass InspirentoUtilities_3Test {",
    "method_signature": "stringReplaceAll(StringBuffer, char, String)",
    "suffix": "3"
  }
]