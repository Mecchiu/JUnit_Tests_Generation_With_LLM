[
  {
    "numberTests": "ten",
    "original_code": "// TXTCharacter.java\npackage org.character.data;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport org.character.data.config.CharConfig;\r\nimport org.javathena.core.data.Friend;\r\nimport org.javathena.core.data.Hotkey;\r\nimport org.javathena.core.data.IndexedFastMap;\r\nimport org.javathena.core.data.Item;\r\nimport org.javathena.core.data.PersistenteData;\r\nimport org.javathena.core.data.Point;\r\nimport org.javathena.core.data.ROCharacter;\r\nimport org.javathena.core.data.Skill;\r\nimport org.javathena.core.data.ROCharacter.JOB;\r\nimport org.javathena.core.utiles.Functions;\r\n\r\npublic class TXTCharacter implements PersistenteData\u003cIndexedFastMap\u003cInteger, ROCharacter\u003e\u003e {\r\n\r\n    private final static String DEFAULT_ACCOUNT_FILE \u003d \"save/athena.txt\";\r\n\r\n    private final static int VERSION_LENGTH \u003d 18;\r\n\r\n    private final static String DEFAULT_FRIEND_FILE \u003d \"save/friends.txt\";\r\n\r\n    private final static String DEFAULT_HOTKEYS_FILE \u003d \"save/hotkeys.txt\";\r\n\r\n    private String fileDB \u003d CharConfig.getCharConfig().getDbPath() !\u003d null ? CharConfig.getCharConfig().getDbPath() : DEFAULT_ACCOUNT_FILE;\r\n\r\n    private String friendDB \u003d DEFAULT_FRIEND_FILE;\r\n\r\n    private String hotkeyDB \u003d DEFAULT_HOTKEYS_FILE;\r\n\r\n    @Override\r\n    public void save(IndexedFastMap\u003cInteger, ROCharacter\u003e data) throws IOException {\r\n        // TODO Auto-generated method stub\r\n    }\r\n\r\n    /**\r\n     * Load character under the last format version only version 1500 (homun +\r\n     * mapindex maps)\r\n     *\r\n     * @return indexedChar a fastmap containing loaded characters\r\n     * @throws MalformedDataException\r\n     */\r\n    @Override\r\n    public IndexedFastMap\u003cInteger, ROCharacter\u003e load() throws IOException {\r\n        IndexedFastMap\u003cInteger, ROCharacter\u003e indexedChar \u003d new IndexedFastMap\u003cInteger, ROCharacter\u003e();\r\n        BufferedReader in \u003d new BufferedReader(new FileReader(new File(fileDB)));\r\n        String line \u003d null;\r\n        while ((line \u003d in.readLine()) !\u003d null) {\r\n            try {\r\n                ROCharacter currChar \u003d readCharactere(line);\r\n                indexedChar.put(currChar.getChar_id(), currChar);\r\n            } catch (MalformedDataException e) {\r\n                Functions.showWarning(e.getMessage());\r\n            }\r\n        }\r\n        in.close();\r\n        readFriend(indexedChar);\r\n        readHotkeys(indexedChar);\r\n        return indexedChar;\r\n    }\r\n\r\n    private void readHotkeys(IndexedFastMap\u003cInteger, ROCharacter\u003e indexedChar) throws IOException {\r\n        BufferedReader in \u003d new BufferedReader(new FileReader(new File(hotkeyDB)));\r\n        String line \u003d null;\r\n        String[] splitedHotkeys \u003d null;\r\n        while ((line \u003d in.readLine()) !\u003d null) {\r\n            if (!line.startsWith(\"//\")) {\r\n                for (int i \u003d 0; i \u003c splitedHotkeys.length \u0026\u0026 i \u003c ROCharacter.MAX_HOTKEY; i++) {\r\n                    splitedHotkeys \u003d line.split(\",\");\r\n                    indexedChar.getData().get(Integer.parseInt(splitedHotkeys[0])).addHotkey(new Hotkey(Integer.parseInt(splitedHotkeys[1]), Integer.parseInt(splitedHotkeys[2]), Integer.parseInt(splitedHotkeys[3])), i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void readFriend(IndexedFastMap\u003cInteger, ROCharacter\u003e indexedChar) throws IOException {\r\n        BufferedReader in \u003d new BufferedReader(new FileReader(new File(friendDB)));\r\n        String line \u003d null;\r\n        String[] splitedFriend \u003d null;\r\n        while ((line \u003d in.readLine()) !\u003d null) {\r\n            if (!line.startsWith(\"//\")) {\r\n                splitedFriend \u003d line.split(\",\");\r\n                for (int i \u003d 0; i \u003c splitedFriend.length \u0026\u0026 i \u003c ROCharacter.MAX_FRIENDS; i++) {\r\n                    indexedChar.getData().get(Integer.parseInt(splitedFriend[0])).addFriend(new Friend(Integer.parseInt(splitedFriend[1]), Integer.parseInt(splitedFriend[2]), splitedFriend[3]), i);\r\n                }\r\n            }\r\n        }\r\n        in.close();\r\n    }\r\n\r\n    private ROCharacter readCharactere(String line) throws MalformedDataException {\r\n        String[] mainCharSL;\r\n        ROCharacter currChar \u003d new ROCharacter();\r\n        if (!line.startsWith(\"//\") \u0026\u0026 line.length() !\u003d 0) {\r\n            if (line.contains(\"//\")) {\r\n                line \u003d line.substring(0, line.indexOf(\"//\"));\r\n            }\r\n            ;\r\n            mainCharSL \u003d line.split(\"\\t\");\r\n            if (mainCharSL.length \u003d\u003d VERSION_LENGTH) {\r\n                for (int i \u003d 0; i \u003c mainCharSL.length; i++) {\r\n                    String[] tmpSplit \u003d null;\r\n                    Point tmpPoint \u003d null;\r\n                    currChar.setChar_id(Integer.parseInt(mainCharSL[0]));\r\n                    tmpSplit \u003d mainCharSL[1].split(\",\");\r\n                    currChar.setAccount_id(Integer.parseInt(tmpSplit[0]));\r\n                    currChar.setSlot(Integer.parseInt(tmpSplit[1]));\r\n                    currChar.setName(mainCharSL[2]);\r\n                    tmpSplit \u003d mainCharSL[3].split(\",\");\r\n                    currChar.setClass_(JOB.parseFromValue(Short.parseShort(tmpSplit[0])));\r\n                    currChar.setBase_level(Integer.parseInt(tmpSplit[0]));\r\n                    currChar.setJob_level(Integer.parseInt(tmpSplit[0]));\r\n                    tmpSplit \u003d mainCharSL[4].split(\",\");\r\n                    currChar.setBase_exp(Integer.parseInt(tmpSplit[0]));\r\n                    currChar.setJob_exp(Integer.parseInt(tmpSplit[1]));\r\n                    currChar.setZeny(Integer.parseInt(tmpSplit[2]));\r\n                    tmpSplit \u003d mainCharSL[5].split(\",\");\r\n                    currChar.setHp(Integer.parseInt(tmpSplit[0]));\r\n                    currChar.setMax_hp(Integer.parseInt(tmpSplit[1]));\r\n                    currChar.setSp(Integer.parseInt(tmpSplit[2]));\r\n                    currChar.setMax_sp(Integer.parseInt(tmpSplit[3]));\r\n                    tmpSplit \u003d mainCharSL[6].split(\",\");\r\n                    currChar.setStr(Short.parseShort(tmpSplit[0]));\r\n                    currChar.setAgi(Short.parseShort(tmpSplit[1]));\r\n                    currChar.setVit(Short.parseShort(tmpSplit[2]));\r\n                    currChar.setInt(Short.parseShort(tmpSplit[3]));\r\n                    currChar.setDex(Short.parseShort(tmpSplit[4]));\r\n                    currChar.setLuk(Short.parseShort(tmpSplit[5]));\r\n                    tmpSplit \u003d mainCharSL[7].split(\",\");\r\n                    currChar.setStatus_point(Integer.parseInt(tmpSplit[0]));\r\n                    currChar.setSkill_point(Integer.parseInt(tmpSplit[1]));\r\n                    tmpSplit \u003d mainCharSL[8].split(\",\");\r\n                    currChar.setOption(Integer.parseInt(tmpSplit[0]));\r\n                    currChar.setKarma(Integer.parseInt(tmpSplit[1]));\r\n                    currChar.setManner(Short.parseShort(tmpSplit[2]));\r\n                    tmpSplit \u003d mainCharSL[9].split(\",\");\r\n                    currChar.setParty_id(Integer.parseInt(tmpSplit[0]));\r\n                    currChar.setGuild_id(Integer.parseInt(tmpSplit[1]));\r\n                    currChar.setPet_id(Integer.parseInt(tmpSplit[2]));\r\n                    currChar.setHom_id(Integer.parseInt(tmpSplit[3]));\r\n                    tmpSplit \u003d mainCharSL[10].split(\",\");\r\n                    currChar.setHair(Short.parseShort(tmpSplit[0]));\r\n                    currChar.setHair_color(Short.parseShort(tmpSplit[1]));\r\n                    currChar.setClothes_color(Short.parseShort(tmpSplit[2]));\r\n                    tmpSplit \u003d mainCharSL[11].split(\",\");\r\n                    currChar.setWeapon(Short.parseShort(tmpSplit[0]));\r\n                    currChar.setShield(Short.parseShort(tmpSplit[1]));\r\n                    currChar.setHead_top(Short.parseShort(tmpSplit[2]));\r\n                    currChar.setHead_mid(Short.parseShort(tmpSplit[3]));\r\n                    currChar.setHead_bottom(Short.parseShort(tmpSplit[4]));\r\n                    tmpSplit \u003d mainCharSL[12].split(\",\");\r\n                    tmpPoint \u003d new Point(Integer.parseInt(tmpSplit[0]), Integer.parseInt(tmpSplit[1]), Integer.parseInt(tmpSplit[2]));\r\n                    currChar.setLast_point(tmpPoint);\r\n                    tmpSplit \u003d mainCharSL[13].split(\",\");\r\n                    tmpPoint \u003d new Point(Integer.parseInt(tmpSplit[0]), Integer.parseInt(tmpSplit[1]), Integer.parseInt(tmpSplit[2]));\r\n                    currChar.setSave_point(tmpPoint);\r\n                    currChar.setPartner_id(Integer.parseInt(tmpSplit[3]));\r\n                    currChar.setFather(Integer.parseInt(tmpSplit[4]));\r\n                    currChar.setMother(Integer.parseInt(tmpSplit[5]));\r\n                    currChar.setChild(Integer.parseInt(tmpSplit[6]));\r\n                    tmpSplit \u003d mainCharSL[14].split(\" \");\r\n                    if (!tmpSplit[0].equals(\"\")) {\r\n                        String[] memoSplit \u003d null;\r\n                        for (int j \u003d 0; j \u003c tmpSplit.length; j++) {\r\n                            memoSplit \u003d tmpSplit[j].split(\",\");\r\n                            currChar.addPoint(new Point(Integer.parseInt(memoSplit[0]), Integer.parseInt(memoSplit[1]), Integer.parseInt(memoSplit[2])));\r\n                        }\r\n                    }\r\n                    tmpSplit \u003d mainCharSL[15].split(\" \");\r\n                    if (!tmpSplit[0].equals(\"\")) {\r\n                        String[] invSplit \u003d null;\r\n                        for (int j \u003d 0; j \u003c tmpSplit.length; j++) {\r\n                            invSplit \u003d tmpSplit[j].split(\",\");\r\n                            Item nItem \u003d new Item();\r\n                            nItem.setId(Integer.parseInt(invSplit[0]));\r\n                            nItem.setNameid(Short.parseShort(invSplit[1]));\r\n                            nItem.setAmount(Short.parseShort(invSplit[2]));\r\n                            nItem.setEquip(Short.parseShort(invSplit[3]));\r\n                            nItem.setIdentify(Integer.parseInt(invSplit[4]));\r\n                            nItem.setRefine(Integer.parseInt(invSplit[5]));\r\n                            nItem.setAttribute(Integer.parseInt(invSplit[6]));\r\n                            for (int k \u003d 0; k \u003c Item.MAX_SLOT + 7 \u0026\u0026 !invSplit[7 + k].equals(\"0\"); k++) {\r\n                                nItem.setCard(k, Integer.parseInt(invSplit[7 + k]));\r\n                            }\r\n                            currChar.addInventoryItem(nItem);\r\n                        }\r\n                    }\r\n                    tmpSplit \u003d mainCharSL[16].split(\" \");\r\n                    if (!tmpSplit[0].equals(\"\")) {\r\n                        String[] invSplit \u003d null;\r\n                        for (int j \u003d 0; j \u003c tmpSplit.length; j++) {\r\n                            invSplit \u003d tmpSplit[j].split(\",\");\r\n                            Item nItem \u003d new Item();\r\n                            nItem.setId(Integer.parseInt(invSplit[0]));\r\n                            nItem.setNameid(Short.parseShort(invSplit[1]));\r\n                            nItem.setAmount(Short.parseShort(invSplit[2]));\r\n                            nItem.setEquip(Short.parseShort(invSplit[3]));\r\n                            nItem.setIdentify(Integer.parseInt(invSplit[4]));\r\n                            nItem.setRefine(Integer.parseInt(invSplit[5]));\r\n                            nItem.setAttribute(Integer.parseInt(invSplit[6]));\r\n                            for (int k \u003d 0; k \u003c Item.MAX_SLOT + 7 \u0026\u0026 !invSplit[7 + k].equals(\"0\"); k++) {\r\n                                nItem.setCard(k, Integer.parseInt(invSplit[7 + k]));\r\n                            }\r\n                            currChar.addCartItem(nItem);\r\n                        }\r\n                    }\r\n                    tmpSplit \u003d mainCharSL[17].split(\" \");\r\n                    if (!tmpSplit[0].equals(\"\")) {\r\n                        String[] skillSplit \u003d null;\r\n                        for (int j \u003d 0; j \u003c tmpSplit.length; j++) {\r\n                            skillSplit \u003d tmpSplit[j].split(\",\");\r\n                            currChar.addSkill(new Skill(Short.parseShort(skillSplit[0]), Short.parseShort(skillSplit[1])));\r\n                        }\r\n                    }\r\n                    tmpSplit \u003d mainCharSL[18].split(\" \");\r\n                    if (!tmpSplit[0].equals(\"\")) {\r\n                        String[] regSplit \u003d null;\r\n                        for (int j \u003d 0; j \u003c tmpSplit.length; j++) {\r\n                            regSplit \u003d tmpSplit[j].split(\",\");\r\n                            currChar.addGlobalReg(regSplit[0], regSplit[1]);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                Functions.showDebug(\"Character info: %s\\n\", line);\r\n                throw new MalformedDataException(\"Char-loading: Unrecognized character data version, info lost!\\n\");\r\n            }\r\n        }\r\n        return currChar;\r\n    }\r\n}\r\n\r\nclass MalformedDataException extends Exception {\r\n\r\n    /**\r\n     */\r\n    private static final long serialVersionUID \u003d 9211207786015208067L;\r\n\r\n    public MalformedDataException(String message) {\r\n        super(message);\r\n    }\r\n}\r\n",
    "package": "org.character.data",
    "classname": "TXTCharacter",
    "id": "/EvoSuiteBenchmark/original/81_javathena/src/main/java/org/character/data/TXTCharacter.java",
    "test_prompt": "// TXTCharacterTest.java\npackage org.character.data;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport org.character.data.config.CharConfig;\nimport org.javathena.core.data.Friend;\nimport org.javathena.core.data.Hotkey;\nimport org.javathena.core.data.IndexedFastMap;\nimport org.javathena.core.data.Item;\nimport org.javathena.core.data.PersistenteData;\nimport org.javathena.core.data.Point;\nimport org.javathena.core.data.ROCharacter;\nimport org.javathena.core.data.Skill;\nimport org.javathena.core.data.ROCharacter.JOB;\nimport org.javathena.core.utiles.Functions;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link TXTCharacter}.\n* It contains ten unit test cases for the {@link TXTCharacter#load()} method.\n*/\nclass TXTCharacterTest {",
    "method_signature": "load()",
    "suffix": ""
  }
]