[
  {
    "numberTests": "ten",
    "original_code": "// JavaSource.java\n/*\n * $Id: JavaSource.java,v 1.5 2004/05/14 23:56:11 spal Exp $\n * $Source: /cvsroot/ifx-framework/code/src/org/sourceforge/ifx/tools/JavaSource.java,v $\n * IFX-Framework - IFX XML to JavaBean application framework.\n * Copyright (C) 2003  The IFX-Framework Team\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage org.sourceforge.ifx.tools;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\n\n/**\n * This class provides an abstraction to collect information about a\n * generated Java class file. Its toString() method will produce a String\n * that can be written using a Writer object to persistent store.\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.5 $\n */\npublic class JavaSource {\n\n    private String packageName \u003d null;\n\n    private String classJavadocs \u003d null;\n\n    private String className \u003d null;\n\n    private String superClass \u003d null;\n\n    private String interfaceName \u003d null;\n\n    private List memberVariables \u003d new ArrayList();\n\n    private boolean hasSuperClass \u003d false;\n\n    private boolean isInterface \u003d false;\n\n    /**\n     * Returns the package name for the class.\n     * @return the package name for the class.\n     */\n    public String getPackageName() {\n        return packageName;\n    }\n\n    /**\n     * Allows setting the package name for the class.\n     * @param packageName the package name to set.\n     */\n    public void setPackageName(String packageName) {\n        this.packageName \u003d packageName;\n    }\n\n    /**\n     * Returns the class javadocs for this class.\n     * @return the class javadocs for this class.\n     */\n    public String getClassJavadocs() {\n        if (classJavadocs \u003d\u003d null)\n            return \"\";\n        else\n            return classJavadocs;\n    }\n\n    /**\n     * Allows setting the class javadocs for this class.\n     * @param classJavadocs the class level javadocs to set.\n     */\n    public void setClassJavadocs(String classJavadocs) {\n        this.classJavadocs \u003d classJavadocs;\n    }\n\n    /**\n     * Returns the class name.\n     * @return the class name.\n     */\n    public String getClassName() {\n        return className;\n    }\n\n    /**\n     * Sets the class name.\n     * @param className the class name.\n     */\n    public void setClassName(String className) {\n        this.className \u003d className;\n    }\n\n    /**\n     * Gets the superclass name for this class.\n     * @return the superclass for this class.\n     */\n    public String getSuperClass() {\n        return superClass;\n    }\n\n    /**\n     * Sets the superclass name if applicable.\n     * @param superClass the super class name to set.\n     */\n    public void setSuperClass(String superClass) {\n        this.superClass \u003d superClass;\n    }\n\n    /**\n     * Gets the fully qualified interface for this class if specified,\n     * @return the interface name for this class.\n     */\n    public String getInterface() {\n        return interfaceName;\n    }\n\n    /**\n     * Sets the fully qualified interface name for this class.\n     * @param interfaceName the fully qualified interface name for this class.\n     */\n    public void setInterface(String interfaceName) {\n        this.interfaceName \u003d interfaceName;\n    }\n\n    /**\n     * Returns a list of member variable objects in this class.\n     * @return a list of member variable objects in this class.\n     */\n    public List getMemberVariables() {\n        return memberVariables;\n    }\n\n    /**\n     * Returns the number of member variables for this class.\n     * @return the number of member variables.\n     */\n    public int getNumberOfMemberVariables() {\n        return memberVariables.size();\n    }\n\n    /**\n     * Adds a new member variable object for the class. Deduces a variable\n     * name from the class name.\n     * @param mVarClass the class name for the member variable.\n     * @param isArray if the member variable type is an array.\n     */\n    public void addMemberVariable(String mVarClass, boolean isArray) {\n        String mVarName \u003d mVarClass.substring(mVarClass.lastIndexOf(\u0027.\u0027) + 1);\n        addMemberVariable(mVarName, mVarClass, isArray);\n    }\n\n    /**\n     * Adds a new member variable for the class.\n     * @param mVarName the name of the member variable.\n     * @param mVarClass the class name for the member variable.\n     * @param isArray if the member variable type is an array.\n     */\n    public void addMemberVariable(String mVarName, String mVarClass, boolean isArray) {\n        MemberVariable mv \u003d new MemberVariable(mVarName, mVarClass, isArray);\n        if (!memberVariables.contains(mv)) {\n            memberVariables.add(mv);\n        }\n    }\n\n    /**\n     * Convenience methods since velocity does not understand the conditional\n     * \"\u003d\u003d null\". Returns true if this class implements an interface.\n     * @return true if this class implements an interface else false.\n     */\n    public boolean hasInterface() {\n        return (this.getInterface() !\u003d null);\n    }\n\n    /**\n     * Convenience method since velocity does not understand the conditional\n     * \"\u003d\u003d null\". Returns true if this class inherits from a superclass.\n     * @return true if this class has a superclass, else false.\n     */\n    public boolean hasSuperClass() {\n        return (this.getSuperClass() !\u003d null);\n    }\n}\n",
    "package": "org.sourceforge.ifx.tools",
    "classname": "JavaSource",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/tools/JavaSource_0Test.java",
    "test_prompt": "// JavaSource_0Test.java\npackage org.sourceforge.ifx.tools;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JavaSource}.\n* It contains ten unit test cases for the {@link JavaSource#hasInterface()} method.\n*/\nclass JavaSource_0Test {",
    "method_signature": "hasInterface()",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// JavaSource.java\n/*\n * $Id: JavaSource.java,v 1.5 2004/05/14 23:56:11 spal Exp $\n * $Source: /cvsroot/ifx-framework/code/src/org/sourceforge/ifx/tools/JavaSource.java,v $\n * IFX-Framework - IFX XML to JavaBean application framework.\n * Copyright (C) 2003  The IFX-Framework Team\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage org.sourceforge.ifx.tools;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\n\n/**\n * This class provides an abstraction to collect information about a\n * generated Java class file. Its toString() method will produce a String\n * that can be written using a Writer object to persistent store.\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.5 $\n */\npublic class JavaSource {\n\n    private String packageName \u003d null;\n\n    private String classJavadocs \u003d null;\n\n    private String className \u003d null;\n\n    private String superClass \u003d null;\n\n    private String interfaceName \u003d null;\n\n    private List memberVariables \u003d new ArrayList();\n\n    private boolean hasSuperClass \u003d false;\n\n    private boolean isInterface \u003d false;\n\n    /**\n     * Returns the package name for the class.\n     * @return the package name for the class.\n     */\n    public String getPackageName() {\n        return packageName;\n    }\n\n    /**\n     * Allows setting the package name for the class.\n     * @param packageName the package name to set.\n     */\n    public void setPackageName(String packageName) {\n        this.packageName \u003d packageName;\n    }\n\n    /**\n     * Returns the class javadocs for this class.\n     * @return the class javadocs for this class.\n     */\n    public String getClassJavadocs() {\n        if (classJavadocs \u003d\u003d null)\n            return \"\";\n        else\n            return classJavadocs;\n    }\n\n    /**\n     * Allows setting the class javadocs for this class.\n     * @param classJavadocs the class level javadocs to set.\n     */\n    public void setClassJavadocs(String classJavadocs) {\n        this.classJavadocs \u003d classJavadocs;\n    }\n\n    /**\n     * Returns the class name.\n     * @return the class name.\n     */\n    public String getClassName() {\n        return className;\n    }\n\n    /**\n     * Sets the class name.\n     * @param className the class name.\n     */\n    public void setClassName(String className) {\n        this.className \u003d className;\n    }\n\n    /**\n     * Gets the superclass name for this class.\n     * @return the superclass for this class.\n     */\n    public String getSuperClass() {\n        return superClass;\n    }\n\n    /**\n     * Sets the superclass name if applicable.\n     * @param superClass the super class name to set.\n     */\n    public void setSuperClass(String superClass) {\n        this.superClass \u003d superClass;\n    }\n\n    /**\n     * Gets the fully qualified interface for this class if specified,\n     * @return the interface name for this class.\n     */\n    public String getInterface() {\n        return interfaceName;\n    }\n\n    /**\n     * Sets the fully qualified interface name for this class.\n     * @param interfaceName the fully qualified interface name for this class.\n     */\n    public void setInterface(String interfaceName) {\n        this.interfaceName \u003d interfaceName;\n    }\n\n    /**\n     * Returns a list of member variable objects in this class.\n     * @return a list of member variable objects in this class.\n     */\n    public List getMemberVariables() {\n        return memberVariables;\n    }\n\n    /**\n     * Returns the number of member variables for this class.\n     * @return the number of member variables.\n     */\n    public int getNumberOfMemberVariables() {\n        return memberVariables.size();\n    }\n\n    /**\n     * Adds a new member variable object for the class. Deduces a variable\n     * name from the class name.\n     * @param mVarClass the class name for the member variable.\n     * @param isArray if the member variable type is an array.\n     */\n    public void addMemberVariable(String mVarClass, boolean isArray) {\n        String mVarName \u003d mVarClass.substring(mVarClass.lastIndexOf(\u0027.\u0027) + 1);\n        addMemberVariable(mVarName, mVarClass, isArray);\n    }\n\n    /**\n     * Adds a new member variable for the class.\n     * @param mVarName the name of the member variable.\n     * @param mVarClass the class name for the member variable.\n     * @param isArray if the member variable type is an array.\n     */\n    public void addMemberVariable(String mVarName, String mVarClass, boolean isArray) {\n        MemberVariable mv \u003d new MemberVariable(mVarName, mVarClass, isArray);\n        if (!memberVariables.contains(mv)) {\n            memberVariables.add(mv);\n        }\n    }\n\n    /**\n     * Convenience methods since velocity does not understand the conditional\n     * \"\u003d\u003d null\". Returns true if this class implements an interface.\n     * @return true if this class implements an interface else false.\n     */\n    public boolean hasInterface() {\n        return (this.getInterface() !\u003d null);\n    }\n\n    /**\n     * Convenience method since velocity does not understand the conditional\n     * \"\u003d\u003d null\". Returns true if this class inherits from a superclass.\n     * @return true if this class has a superclass, else false.\n     */\n    public boolean hasSuperClass() {\n        return (this.getSuperClass() !\u003d null);\n    }\n}\n",
    "package": "org.sourceforge.ifx.tools",
    "classname": "JavaSource",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/tools/JavaSource_1Test.java",
    "test_prompt": "// JavaSource_1Test.java\npackage org.sourceforge.ifx.tools;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link JavaSource}.\n* It contains ten unit test cases for the {@link JavaSource#hasSuperClass()} method.\n*/\nclass JavaSource_1Test {",
    "method_signature": "hasSuperClass()",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// IFXDecoder.java\n/*\n * $Id: IFXDecoder.java,v 1.3 2004/03/05 02:17:24 spal Exp $\n * $Source: /cvsroot/ifx-framework/code/src/org/sourceforge/ifx/utils/IFXDecoder.java,v $\n * IFX-Framework - IFX XML to JavaBean application framework.\n * Copyright (C) 2003  The IFX-Framework Team\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage org.sourceforge.ifx.utils;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Method;\nimport java.util.List;\nimport java.util.Iterator;\nimport java.util.ResourceBundle;\nimport java.util.MissingResourceException;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.sourceforge.ifx.basetypes.IFXString;\nimport org.sourceforge.ifx.basetypes.IBaseType;\nimport org.jdom.Element;\n\n/**\n * Decodes an IFX XML String to its equivalent Framework bean.\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.3 $\n */\npublic class IFXDecoder {\n\n    private ResourceBundle bundle;\n\n    /**\n     * Creates an IFXDecoder object.\n     */\n    public IFXDecoder() {\n        try {\n            bundle \u003d ResourceBundle.getBundle(\"org.sourceforge.ifx.framework.elementmap\");\n        } catch (MissingResourceException e) {\n            e.printStackTrace();\n            // :NOTE: should never happen\n        }\n    }\n\n    /**\n     * Decodes the element into its equivalent IFX XML representation.\n     * @param element the Element to decode.\n     * @return an IFXObject.\n     * @exception IFXException wrapper for underlying exception.\n     */\n    public IFXObject decode(Element element) throws IFXException {\n        try {\n            String id \u003d element.getAttributeValue(\"Id\");\n            String beanClassName \u003d getBeanClassName(element);\n            IFXObject obj \u003d (IFXObject) Class.forName(beanClassName).newInstance();\n            List children \u003d element.getChildren();\n            if (children.size() \u003d\u003d 0) {\n                String text \u003d element.getText();\n                if (text !\u003d null \u0026\u0026 text.trim().length() \u003e 0) {\n                    if (!(obj instanceof IBaseType)) {\n                        throw new IFXException(\"Leaf node not an instance of IBaseType: \" + obj.getClass().getName());\n                    } else {\n                        ((IBaseType) obj).setString(text);\n                        return obj;\n                    }\n                } else {\n                    // return the empty object\n                    return obj;\n                }\n            } else {\n                Iterator childIter \u003d children.iterator();\n                while (childIter.hasNext()) {\n                    Element childElement \u003d (Element) childIter.next();\n                    IFXObject childObj \u003d decode(childElement);\n                    // run corresponding accessor method to see if the\n                    // result is an array\n                    Method accessorMethod \u003d getAccessor(obj, childElement);\n                    Object retValObj \u003d accessorMethod.invoke(obj, null);\n                    boolean isArray \u003d accessorMethod.getReturnType().isArray();\n                    // then get the mutator method and invoke it\n                    Method mutatorMethod \u003d getMutator(obj, childElement);\n                    if (isArray) {\n                        // if result is an array, build a new array with\n                        // size \u003d returned array size + 1, and stuff this\n                        // object at the end of the array\n                        IFXObject[] childObjs \u003d null;\n                        if (retValObj !\u003d null) {\n                            int oldLen \u003d Array.getLength(retValObj);\n                            childObjs \u003d (IFXObject[]) Array.newInstance(childObj.getClass(), new int[] { oldLen + 1 });\n                            IFXObject[] retValObjs \u003d (IFXObject[]) retValObj;\n                            System.arraycopy(retValObj, 0, childObjs, 0, oldLen);\n                            childObjs[oldLen] \u003d childObj;\n                        } else {\n                            childObjs \u003d (IFXObject[]) Array.newInstance(childObj.getClass(), new int[] { 1 });\n                            childObjs[0] \u003d childObj;\n                        }\n                        mutatorMethod.invoke(obj, new Object[] { childObjs });\n                    } else {\n                        mutatorMethod.invoke(obj, new Object[] { childObj });\n                    }\n                }\n                // if Id attribute is specified, populate it\n                if (id !\u003d null) {\n                    Method mutatorMethod \u003d getMutator(obj, \"Id\");\n                    IFXString idObj \u003d new IFXString();\n                    idObj.setString(id);\n                    mutatorMethod.invoke(obj, new Object[] { idObj });\n                }\n                return obj;\n            }\n        } catch (Exception e) {\n            throw new IFXException(\"Error decoding \" + element.getName(), e);\n        }\n    }\n\n    /**\n     * Returns a single setXXX Method object corresponding to the IFXObject\n     * and childElement.\n     * @param obj the IFXObject.\n     * @param childElement the element corresponding to the mutator method.\n     * @return a setXXX method object.\n     * @exception IFXException if there was a problem getting the mutators.\n     */\n    private Method getMutator(IFXObject obj, Element childElement) throws IFXException {\n        String childElementName \u003d childElement.getName();\n        return getMutator(obj, childElementName);\n    }\n\n    /**\n     * Returns a single setXXX Method object corresponding to the IFXObject\n     * and childElement name.\n     * @param obj the IFXObject.\n     * @param childElementName the element name for the mutator method.\n     * @return a setXXX method object.\n     * @exception IFXException if there was a problem getting the mutators.\n     */\n    private Method getMutator(IFXObject obj, String elementName) throws IFXException {\n        try {\n            // handle element names like USA.MilitaryRank or EU.Cur\n            if (elementName.indexOf(\u0027.\u0027) \u003e -1) {\n                elementName \u003d elementName.replace(\u0027.\u0027, \u0027_\u0027);\n            }\n            String setterName \u003d \"set\" + elementName;\n            Class cl \u003d obj.getClass();\n            Method[] methods \u003d cl.getMethods();\n            boolean foundMethod \u003d false;\n            for (int i \u003d 0; i \u003c methods.length; i++) {\n                if (methods[i].getName().equals(setterName)) {\n                    foundMethod \u003d true;\n                    return methods[i];\n                } else {\n                    continue;\n                }\n            }\n            // if we are here, then we did not get the method\n            if (!foundMethod) {\n                throw new IFXException(\"Could not find method: \" + obj.getClass().getName() + \"#set\" + elementName);\n            }\n        } catch (Exception e) {\n            throw new IFXException(\"Exception getting Mutator Method: \" + obj.getClass().getName() + \"#set\" + elementName, e);\n        }\n        return null;\n    }\n\n    /**\n     * Returns the accessor method associated with the given element name.\n     * @param obj an IFXObject.\n     * @param element the element object.\n     * @return a getXXX Method object associated with the element.\n     * @exception IFXException wraps the original exception thrown.\n     */\n    private Method getAccessor(IFXObject obj, Element element) throws IFXException {\n        try {\n            String elementName \u003d element.getName();\n            // handle element names like USA.MilitaryRank or EU.Cur\n            if (elementName.indexOf(\u0027.\u0027) \u003e -1) {\n                elementName \u003d elementName.replace(\u0027.\u0027, \u0027_\u0027);\n            }\n            String getterName \u003d \"get\" + elementName;\n            Class cl \u003d obj.getClass();\n            Method[] allMethods \u003d cl.getMethods();\n            Method accessorMethod \u003d null;\n            for (int i \u003d 0; i \u003c allMethods.length; i++) {\n                if (allMethods[i].getName().equals(getterName)) {\n                    accessorMethod \u003d allMethods[i];\n                    break;\n                }\n            }\n            return accessorMethod;\n        } catch (Exception e) {\n            throw new IFXException(\"Exception getting Accessor\", e);\n        }\n    }\n\n    /**\n     * Returns the element name from a bean name.\n     * @param element the Element representing the bean.\n     * @return the element name.\n     * @exception IFXException if bean class name could not be found.\n     */\n    private String getBeanClassName(Element element) throws IFXException {\n        String beanClassName \u003d bundle.getString(element.getName());\n        if (beanClassName \u003d\u003d null) {\n            throw new IFXException(\"No bean class found for: \" + element.getName());\n        }\n        return beanClassName;\n    }\n}\n",
    "package": "org.sourceforge.ifx.utils",
    "classname": "IFXDecoder",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDecoder.java",
    "test_prompt": "// IFXDecoderTest.java\npackage org.sourceforge.ifx.utils;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Method;\nimport java.util.List;\nimport java.util.Iterator;\nimport java.util.ResourceBundle;\nimport java.util.MissingResourceException;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.sourceforge.ifx.basetypes.IFXString;\nimport org.sourceforge.ifx.basetypes.IBaseType;\nimport org.jdom.Element;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IFXDecoder}.\n* It contains ten unit test cases for the {@link IFXDecoder#decode(Element)} method.\n*/\nclass IFXDecoderTest {",
    "method_signature": "decode(Element)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IFXEncoder.java\n/*\n * $Id: IFXEncoder.java,v 1.2 2004/03/05 02:17:24 spal Exp $\n * $Source: /cvsroot/ifx-framework/code/src/org/sourceforge/ifx/utils/IFXEncoder.java,v $\n * IFX-Framework - IFX XML to JavaBean application framework.\n * Copyright (C) 2003  The IFX-Framework Team\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage org.sourceforge.ifx.utils;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.io.Writer;\nimport java.io.OutputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.ResourceBundle;\nimport java.util.MissingResourceException;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.sourceforge.ifx.basetypes.IBaseType;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.output.XMLOutputter;\nimport org.jdom.input.SAXBuilder;\n\n/**\n * Encodes an IFXObject to its equivalent IFX XML Element.\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.2 $\n */\npublic class IFXEncoder {\n\n    private ResourceBundle bundle;\n\n    private int xmlIndentSize \u003d 2;\n\n    private String lineSeparator \u003d System.getProperty(\"line.separator\");\n\n    private Namespace namespace \u003d Namespace.NO_NAMESPACE;\n\n    /**\n     * Creates an IFXEncoder object in the default namespace.\n     */\n    public IFXEncoder() {\n        try {\n            bundle \u003d ResourceBundle.getBundle(\"org.sourceforge.ifx.framework.beanmap\");\n        } catch (MissingResourceException e) {\n            e.printStackTrace();\n            // :NOTE: should never happen\n        }\n    }\n\n    /**\n     * Creates an IFXEncoder in the specified namespace.\n     * @param namespacePrefix the namespace prefix to use. If set to null,\n     * then the element will be considered to be in the default namespace.\n     * @param namespaceURI the URI of the namespace.\n     */\n    public IFXEncoder(String namespacePrefix, String namespaceURI) {\n        this();\n        this.setNamespace(namespacePrefix, namespaceURI);\n    }\n\n    /**\n     * Builds a JDOM Element for the IFXObject supplied. No validation is\n     * performed, regardless of the setting. To validate, use the encode()\n     * methods instead.\n     * @param obj an IFXObject.\n     * @return a JDOM Element.\n     * @exception IFXException if an exception was encountered in encoding.\n     */\n    public Element encode(IFXObject obj) throws IFXException {\n        try {\n            Element element \u003d new Element(getElementName(obj), namespace);\n            List accessorList \u003d getAccessors(obj);\n            Iterator accessorIter \u003d accessorList.iterator();\n            while (accessorIter.hasNext()) {\n                Method accessorMethod \u003d (Method) accessorIter.next();\n                if (accessorMethod.getName().equals(\"getClass\")) {\n                    continue;\n                }\n                Object retValObj \u003d accessorMethod.invoke(obj, null);\n                if (retValObj \u003d\u003d null) {\n                    continue;\n                }\n                IFXObject[] retVals \u003d new IFXObject[1];\n                if (retValObj.getClass().isArray()) {\n                    retVals \u003d (IFXObject[]) retValObj;\n                } else {\n                    retVals[0] \u003d (IFXObject) retValObj;\n                }\n                for (int i \u003d 0; i \u003c retVals.length; i++) {\n                    IFXObject retVal \u003d retVals[i];\n                    if (retVal instanceof IBaseType) {\n                        String value \u003d ((IBaseType) retVal).getString();\n                        if (accessorMethod.getName().equals(\"getId\")) {\n                            element.setAttribute(\"Id\", value);\n                        } else {\n                            Element baseElement \u003d new Element(getElementName(retVal), namespace);\n                            baseElement.setText(value);\n                            element.addContent(baseElement);\n                        }\n                    } else {\n                        element.addContent(encode(retVal));\n                    }\n                }\n            }\n            return element;\n        } catch (Exception e) {\n            throw new IFXException(\"Error encoding \" + obj.getClass().getName(), e);\n        }\n    }\n\n    /**\n     * Sets the name space for this Document.\n     * @param prefix the namespace prefix to use. If null, this namespace\n     * will be set to the default namespace.\n     * @param nameSpaceURI the String URI of this namespace.\n     */\n    private void setNamespace(String prefix, String nameSpaceURI) {\n        if (prefix \u003d\u003d null) {\n            this.namespace \u003d Namespace.getNamespace(nameSpaceURI);\n        } else {\n            this.namespace \u003d Namespace.getNamespace(prefix, nameSpaceURI);\n        }\n    }\n\n    /**\n     * Return a List of accessor methods for a given IFXObject. The\n     * accessors will be ordered in the same order expected by the IFX\n     * schema. This ordering is dictated by the ELEMENTS String[] variable.\n     * @param obj an IFXObject.\n     * @return a List of getXXX Method objects.\n     * @exception IFXException wraps the original exception thrown.\n     */\n    private List getAccessors(IFXObject obj) throws IFXException {\n        try {\n            Class cl \u003d obj.getClass();\n            Method[] allMethods \u003d cl.getMethods();\n            Map getMethodsMap \u003d new HashMap();\n            for (int i \u003d 0; i \u003c allMethods.length; i++) {\n                if (allMethods[i].getName().startsWith(\"get\")) {\n                    getMethodsMap.put(allMethods[i].getName(), allMethods[i]);\n                }\n            }\n            Field elementsField \u003d cl.getField(\"ELEMENTS\");\n            String[] elements \u003d (String[]) elementsField.get(obj);\n            List getMethods \u003d new ArrayList();\n            for (int i \u003d 0; i \u003c elements.length; i++) {\n                String elementName \u003d elements[i];\n                Method getMethod \u003d (Method) getMethodsMap.get(\"get\" + elementName);\n                getMethods.add(getMethod);\n            }\n            return getMethods;\n        } catch (Exception e) {\n            throw new IFXException(\"Exception getting Accessor\", e);\n        }\n    }\n\n    /**\n     * Gets the element name from the object class name. It retrieves the\n     * class name portion from the fully qualified class name for the bean,\n     * then applies transformations to convert back to dotted form for\n     * certain elements.\n     * @param obj an IFXObject.\n     * @return the name of the element that is represented by this object.\n     * @exception IFXException if element name was not found.\n     */\n    private String getElementName(IFXObject obj) throws IFXException {\n        String elementName \u003d bundle.getString(obj.getClass().getName());\n        if (elementName \u003d\u003d null) {\n            throw new IFXException(\"No element found for \" + obj.getClass().getName());\n        }\n        return elementName;\n    }\n}\n",
    "package": "org.sourceforge.ifx.utils",
    "classname": "IFXEncoder",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXEncoder.java",
    "test_prompt": "// IFXEncoderTest.java\npackage org.sourceforge.ifx.utils;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.io.Writer;\nimport java.io.OutputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.ResourceBundle;\nimport java.util.MissingResourceException;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.sourceforge.ifx.basetypes.IBaseType;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.output.XMLOutputter;\nimport org.jdom.input.SAXBuilder;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IFXEncoder}.\n* It contains ten unit test cases for the {@link IFXEncoder#encode(IFXObject)} method.\n*/\nclass IFXEncoderTest {",
    "method_signature": "encode(IFXObject)",
    "suffix": ""
  },
  {
    "numberTests": "ten",
    "original_code": "// IFXDocumentHandler.java\n/*\n * $Id: IFXDocumentHandler.java,v 1.2 2004/02/26 17:50:30 spal Exp $\n * $Source: /cvsroot/ifx-framework/code/src/org/sourceforge/ifx/utils/IFXDocumentHandler.java,v $\n * IFX-Framework - IFX XML to JavaBean application framework.\n * Copyright (C) 2003  The IFX-Framework Team\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage org.sourceforge.ifx.utils;\n\nimport java.io.OutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Iterator;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.sourceforge.ifx.basetypes.IFXObject;\n\n/**\n * The IFXDocumentHandler provides methods for formatting and validating\n * IFX XML Documents.\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.2 $\n */\npublic class IFXDocumentHandler {\n\n    /**\n     * System default Line separator string.\n     */\n    public static final String DEFAULT_LINE_SEPARATOR \u003d System.getProperty(\"line.separator\");\n\n    /**\n     * Builds a JDOM Document object from an IFXObject.\n     * @param obj the IFXObject object to format.\n     * @param namespacePrefix the namespace prefix to use in the output. A\n     * value of null implies no prefix. If the namespaceURI is specified it\n     * will be treated as the default namespace.\n     * @param namespaceURI the namespace URI to use in the output. If specified\n     * an xmlns declaration will be prepended to the output.\n     * @return a JDOM Document object.\n     * @exception IFXException if there was a problem building the document.\n     */\n    public static Document build(IFXObject obj, String namespacePrefix, String namespaceURI) throws IFXException {\n        IFXEncoder encoder \u003d null;\n        if (namespaceURI !\u003d null) {\n            encoder \u003d new IFXEncoder(namespacePrefix, namespaceURI);\n        } else {\n            encoder \u003d new IFXEncoder();\n        }\n        Element element \u003d encoder.encode(obj);\n        Document doc \u003d new Document(element);\n        return doc;\n    }\n\n    /**\n     * Writes a Document object to the specified output stream.\n     * @param doc a JDOM Document object.\n     * @param indentSize the size of the indent in the output. A value of\n     * zero implies no indentation.\n     * @param lineSeparator the line separator for the output. A value of\n     * null implies no line separators and no newlines in the output. To use\n     * the system default, use DEFAULT_LINE_SEPARATOR.\n     * @param ostream the OutputStream to write the formatted output to.\n     * @exception IFXException if there was a problem writing the Document.\n     */\n    public static void write(Document doc, int indentSize, String lineSeparator, OutputStream ostream) throws IFXException {\n        XMLOutputter outputter \u003d new XMLOutputter();\n        StringBuffer indent \u003d new StringBuffer();\n        for (int i \u003d 0; i \u003c indentSize; i++) {\n            indent.append(\" \");\n        }\n        outputter.setIndent(indent.toString());\n        if (lineSeparator \u003d\u003d null) {\n            outputter.setNewlines(false);\n        } else {\n            outputter.setNewlines(true);\n            outputter.setLineSeparator(lineSeparator);\n        }\n        try {\n            outputter.output(doc, ostream);\n        } catch (IOException e) {\n            throw new IFXException(\"Error writing Document\");\n        }\n    }\n\n    /**\n     * Parses a Document object into an IFXObject. This is a thin wrapper\n     * over the IFXDecoder.decode() method.\n     * @param doc the JDOM Document object to parse.\n     * @exception IFXException if any problems were encountered in parsing.\n     */\n    public static IFXObject parse(Document doc) throws IFXException {\n        Element element \u003d doc.getRootElement();\n        IFXDecoder decoder \u003d new IFXDecoder();\n        return decoder.decode(element);\n    }\n\n    /**\n     * Reads an XML stream from the specified InputStream and returns a\n     * JDOM Document object. If validation is requested, then the XML is\n     * validated while reading it into a Document.\n     * @param istream the InputStream to read from.\n     * @param validate XML is validated against schema if true.\n     * @param validationProperties a Map of name value pairs specifying\n     * the schema and the namespaces to validate against.\n     * @exception IFXExveption if there was a problem reading the document.\n     */\n    public static Document read(InputStream istream, boolean validate, Map validationProperties) throws IFXException {\n        SAXBuilder builder \u003d null;\n        if (validate) {\n            builder \u003d new SAXBuilder(\"org.apache.xerces.parsers.SAXParser\", true);\n            builder.setFeature(\"http://apache.org/xml/features/validation/schema\", true);\n            if (validationProperties !\u003d null) {\n                Iterator propIter \u003d validationProperties.keySet().iterator();\n                StringBuffer buf \u003d new StringBuffer();\n                int i \u003d 0;\n                while (propIter.hasNext()) {\n                    String key \u003d (String) propIter.next();\n                    String value \u003d (String) validationProperties.get(key);\n                    if (i \u003e 0) {\n                        buf.append(\" \");\n                    }\n                    buf.append(key).append(\" \").append(value);\n                    i++;\n                }\n                builder.setProperty(\"http://apache.org/xml/properties/schema/external-schemaLocation\", buf.toString());\n            }\n        } else {\n            builder \u003d new SAXBuilder();\n        }\n        Document doc \u003d null;\n        try {\n            doc \u003d builder.build(istream);\n        } catch (Exception e) {\n            throw new IFXException(\"Error reading Document\", e);\n        }\n        return doc;\n    }\n}\n",
    "package": "org.sourceforge.ifx.utils",
    "classname": "IFXDocumentHandler",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDocumentHandler_0Test.java",
    "test_prompt": "// IFXDocumentHandler_0Test.java\npackage org.sourceforge.ifx.utils;\n\nimport java.io.OutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Iterator;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IFXDocumentHandler}.\n* It contains ten unit test cases for the {@link IFXDocumentHandler#build(IFXObject, String, String)} method.\n*/\nclass IFXDocumentHandler_0Test {",
    "method_signature": "build(IFXObject, String, String)",
    "suffix": "0"
  },
  {
    "numberTests": "ten",
    "original_code": "// IFXDocumentHandler.java\n/*\n * $Id: IFXDocumentHandler.java,v 1.2 2004/02/26 17:50:30 spal Exp $\n * $Source: /cvsroot/ifx-framework/code/src/org/sourceforge/ifx/utils/IFXDocumentHandler.java,v $\n * IFX-Framework - IFX XML to JavaBean application framework.\n * Copyright (C) 2003  The IFX-Framework Team\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage org.sourceforge.ifx.utils;\n\nimport java.io.OutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Iterator;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.sourceforge.ifx.basetypes.IFXObject;\n\n/**\n * The IFXDocumentHandler provides methods for formatting and validating\n * IFX XML Documents.\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.2 $\n */\npublic class IFXDocumentHandler {\n\n    /**\n     * System default Line separator string.\n     */\n    public static final String DEFAULT_LINE_SEPARATOR \u003d System.getProperty(\"line.separator\");\n\n    /**\n     * Builds a JDOM Document object from an IFXObject.\n     * @param obj the IFXObject object to format.\n     * @param namespacePrefix the namespace prefix to use in the output. A\n     * value of null implies no prefix. If the namespaceURI is specified it\n     * will be treated as the default namespace.\n     * @param namespaceURI the namespace URI to use in the output. If specified\n     * an xmlns declaration will be prepended to the output.\n     * @return a JDOM Document object.\n     * @exception IFXException if there was a problem building the document.\n     */\n    public static Document build(IFXObject obj, String namespacePrefix, String namespaceURI) throws IFXException {\n        IFXEncoder encoder \u003d null;\n        if (namespaceURI !\u003d null) {\n            encoder \u003d new IFXEncoder(namespacePrefix, namespaceURI);\n        } else {\n            encoder \u003d new IFXEncoder();\n        }\n        Element element \u003d encoder.encode(obj);\n        Document doc \u003d new Document(element);\n        return doc;\n    }\n\n    /**\n     * Writes a Document object to the specified output stream.\n     * @param doc a JDOM Document object.\n     * @param indentSize the size of the indent in the output. A value of\n     * zero implies no indentation.\n     * @param lineSeparator the line separator for the output. A value of\n     * null implies no line separators and no newlines in the output. To use\n     * the system default, use DEFAULT_LINE_SEPARATOR.\n     * @param ostream the OutputStream to write the formatted output to.\n     * @exception IFXException if there was a problem writing the Document.\n     */\n    public static void write(Document doc, int indentSize, String lineSeparator, OutputStream ostream) throws IFXException {\n        XMLOutputter outputter \u003d new XMLOutputter();\n        StringBuffer indent \u003d new StringBuffer();\n        for (int i \u003d 0; i \u003c indentSize; i++) {\n            indent.append(\" \");\n        }\n        outputter.setIndent(indent.toString());\n        if (lineSeparator \u003d\u003d null) {\n            outputter.setNewlines(false);\n        } else {\n            outputter.setNewlines(true);\n            outputter.setLineSeparator(lineSeparator);\n        }\n        try {\n            outputter.output(doc, ostream);\n        } catch (IOException e) {\n            throw new IFXException(\"Error writing Document\");\n        }\n    }\n\n    /**\n     * Parses a Document object into an IFXObject. This is a thin wrapper\n     * over the IFXDecoder.decode() method.\n     * @param doc the JDOM Document object to parse.\n     * @exception IFXException if any problems were encountered in parsing.\n     */\n    public static IFXObject parse(Document doc) throws IFXException {\n        Element element \u003d doc.getRootElement();\n        IFXDecoder decoder \u003d new IFXDecoder();\n        return decoder.decode(element);\n    }\n\n    /**\n     * Reads an XML stream from the specified InputStream and returns a\n     * JDOM Document object. If validation is requested, then the XML is\n     * validated while reading it into a Document.\n     * @param istream the InputStream to read from.\n     * @param validate XML is validated against schema if true.\n     * @param validationProperties a Map of name value pairs specifying\n     * the schema and the namespaces to validate against.\n     * @exception IFXExveption if there was a problem reading the document.\n     */\n    public static Document read(InputStream istream, boolean validate, Map validationProperties) throws IFXException {\n        SAXBuilder builder \u003d null;\n        if (validate) {\n            builder \u003d new SAXBuilder(\"org.apache.xerces.parsers.SAXParser\", true);\n            builder.setFeature(\"http://apache.org/xml/features/validation/schema\", true);\n            if (validationProperties !\u003d null) {\n                Iterator propIter \u003d validationProperties.keySet().iterator();\n                StringBuffer buf \u003d new StringBuffer();\n                int i \u003d 0;\n                while (propIter.hasNext()) {\n                    String key \u003d (String) propIter.next();\n                    String value \u003d (String) validationProperties.get(key);\n                    if (i \u003e 0) {\n                        buf.append(\" \");\n                    }\n                    buf.append(key).append(\" \").append(value);\n                    i++;\n                }\n                builder.setProperty(\"http://apache.org/xml/properties/schema/external-schemaLocation\", buf.toString());\n            }\n        } else {\n            builder \u003d new SAXBuilder();\n        }\n        Document doc \u003d null;\n        try {\n            doc \u003d builder.build(istream);\n        } catch (Exception e) {\n            throw new IFXException(\"Error reading Document\", e);\n        }\n        return doc;\n    }\n}\n",
    "package": "org.sourceforge.ifx.utils",
    "classname": "IFXDocumentHandler",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDocumentHandler_1Test.java",
    "test_prompt": "// IFXDocumentHandler_1Test.java\npackage org.sourceforge.ifx.utils;\n\nimport java.io.OutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Iterator;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IFXDocumentHandler}.\n* It contains ten unit test cases for the {@link IFXDocumentHandler#parse(Document)} method.\n*/\nclass IFXDocumentHandler_1Test {",
    "method_signature": "parse(Document)",
    "suffix": "1"
  },
  {
    "numberTests": "ten",
    "original_code": "// IFXDocumentHandler.java\n/*\n * $Id: IFXDocumentHandler.java,v 1.2 2004/02/26 17:50:30 spal Exp $\n * $Source: /cvsroot/ifx-framework/code/src/org/sourceforge/ifx/utils/IFXDocumentHandler.java,v $\n * IFX-Framework - IFX XML to JavaBean application framework.\n * Copyright (C) 2003  The IFX-Framework Team\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\npackage org.sourceforge.ifx.utils;\n\nimport java.io.OutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Iterator;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.sourceforge.ifx.basetypes.IFXObject;\n\n/**\n * The IFXDocumentHandler provides methods for formatting and validating\n * IFX XML Documents.\n * @author Sujit Pal (spal@users.sourceforge.net)\n * @version $Revision: 1.2 $\n */\npublic class IFXDocumentHandler {\n\n    /**\n     * System default Line separator string.\n     */\n    public static final String DEFAULT_LINE_SEPARATOR \u003d System.getProperty(\"line.separator\");\n\n    /**\n     * Builds a JDOM Document object from an IFXObject.\n     * @param obj the IFXObject object to format.\n     * @param namespacePrefix the namespace prefix to use in the output. A\n     * value of null implies no prefix. If the namespaceURI is specified it\n     * will be treated as the default namespace.\n     * @param namespaceURI the namespace URI to use in the output. If specified\n     * an xmlns declaration will be prepended to the output.\n     * @return a JDOM Document object.\n     * @exception IFXException if there was a problem building the document.\n     */\n    public static Document build(IFXObject obj, String namespacePrefix, String namespaceURI) throws IFXException {\n        IFXEncoder encoder \u003d null;\n        if (namespaceURI !\u003d null) {\n            encoder \u003d new IFXEncoder(namespacePrefix, namespaceURI);\n        } else {\n            encoder \u003d new IFXEncoder();\n        }\n        Element element \u003d encoder.encode(obj);\n        Document doc \u003d new Document(element);\n        return doc;\n    }\n\n    /**\n     * Writes a Document object to the specified output stream.\n     * @param doc a JDOM Document object.\n     * @param indentSize the size of the indent in the output. A value of\n     * zero implies no indentation.\n     * @param lineSeparator the line separator for the output. A value of\n     * null implies no line separators and no newlines in the output. To use\n     * the system default, use DEFAULT_LINE_SEPARATOR.\n     * @param ostream the OutputStream to write the formatted output to.\n     * @exception IFXException if there was a problem writing the Document.\n     */\n    public static void write(Document doc, int indentSize, String lineSeparator, OutputStream ostream) throws IFXException {\n        XMLOutputter outputter \u003d new XMLOutputter();\n        StringBuffer indent \u003d new StringBuffer();\n        for (int i \u003d 0; i \u003c indentSize; i++) {\n            indent.append(\" \");\n        }\n        outputter.setIndent(indent.toString());\n        if (lineSeparator \u003d\u003d null) {\n            outputter.setNewlines(false);\n        } else {\n            outputter.setNewlines(true);\n            outputter.setLineSeparator(lineSeparator);\n        }\n        try {\n            outputter.output(doc, ostream);\n        } catch (IOException e) {\n            throw new IFXException(\"Error writing Document\");\n        }\n    }\n\n    /**\n     * Parses a Document object into an IFXObject. This is a thin wrapper\n     * over the IFXDecoder.decode() method.\n     * @param doc the JDOM Document object to parse.\n     * @exception IFXException if any problems were encountered in parsing.\n     */\n    public static IFXObject parse(Document doc) throws IFXException {\n        Element element \u003d doc.getRootElement();\n        IFXDecoder decoder \u003d new IFXDecoder();\n        return decoder.decode(element);\n    }\n\n    /**\n     * Reads an XML stream from the specified InputStream and returns a\n     * JDOM Document object. If validation is requested, then the XML is\n     * validated while reading it into a Document.\n     * @param istream the InputStream to read from.\n     * @param validate XML is validated against schema if true.\n     * @param validationProperties a Map of name value pairs specifying\n     * the schema and the namespaces to validate against.\n     * @exception IFXExveption if there was a problem reading the document.\n     */\n    public static Document read(InputStream istream, boolean validate, Map validationProperties) throws IFXException {\n        SAXBuilder builder \u003d null;\n        if (validate) {\n            builder \u003d new SAXBuilder(\"org.apache.xerces.parsers.SAXParser\", true);\n            builder.setFeature(\"http://apache.org/xml/features/validation/schema\", true);\n            if (validationProperties !\u003d null) {\n                Iterator propIter \u003d validationProperties.keySet().iterator();\n                StringBuffer buf \u003d new StringBuffer();\n                int i \u003d 0;\n                while (propIter.hasNext()) {\n                    String key \u003d (String) propIter.next();\n                    String value \u003d (String) validationProperties.get(key);\n                    if (i \u003e 0) {\n                        buf.append(\" \");\n                    }\n                    buf.append(key).append(\" \").append(value);\n                    i++;\n                }\n                builder.setProperty(\"http://apache.org/xml/properties/schema/external-schemaLocation\", buf.toString());\n            }\n        } else {\n            builder \u003d new SAXBuilder();\n        }\n        Document doc \u003d null;\n        try {\n            doc \u003d builder.build(istream);\n        } catch (Exception e) {\n            throw new IFXException(\"Error reading Document\", e);\n        }\n        return doc;\n    }\n}\n",
    "package": "org.sourceforge.ifx.utils",
    "classname": "IFXDocumentHandler",
    "id": "/EvoSuiteBenchmark/original/84_ifx-framework/src/main/java/org/sourceforge/ifx/utils/IFXDocumentHandler_2Test.java",
    "test_prompt": "// IFXDocumentHandler_2Test.java\npackage org.sourceforge.ifx.utils;\n\nimport java.io.OutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Iterator;\nimport org.jdom.Document;\nimport org.jdom.Element;\nimport org.jdom.Namespace;\nimport org.jdom.input.SAXBuilder;\nimport org.jdom.output.XMLOutputter;\nimport org.sourceforge.ifx.basetypes.IFXObject;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link IFXDocumentHandler}.\n* It contains ten unit test cases for the {@link IFXDocumentHandler#read(InputStream, boolean, Map)} method.\n*/\nclass IFXDocumentHandler_2Test {",
    "method_signature": "read(InputStream, boolean, Map)",
    "suffix": "2"
  }
]