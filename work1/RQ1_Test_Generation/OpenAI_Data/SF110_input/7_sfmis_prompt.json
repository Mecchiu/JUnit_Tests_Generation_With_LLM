[
  {
    "numberTests": "ten",
    "original_code": "// Loader.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\npublic class Loader {\n\n    private String sql;\n\n    private String filepath;\n\n    private int start;\n\n    private int limit;\n\n    private int totalCount;\n\n    private String[] colNames;\n\n    private String[][] pas;\n\n    private String sort;\n\n    private String dir;\n\n    private final String XMLPATH \u003d \"sqlfolder/\";\n\n    private Session session \u003d null;\n\n    private Query query;\n\n    private List rs;\n\n    private boolean paging;\n\n    private ListRange range;\n\n    private String querySql;\n\n    private String queryValue;\n\n    public ListRange getRange() {\n        return range;\n    }\n\n    public void setRange(ListRange range) {\n        this.range \u003d range;\n    }\n\n    public List getRs() {\n        return rs;\n    }\n\n    public void setRs(List rs) {\n        this.rs \u003d rs;\n    }\n\n    public int getTotalCount() {\n        return totalCount;\n    }\n\n    public void setTotalCount(int totalCount) {\n        this.totalCount \u003d totalCount;\n    }\n\n    public String[] getColNames() {\n        return colNames;\n    }\n\n    public void setColNames(String[] colNames) {\n        this.colNames \u003d colNames;\n    }\n\n    public void run(BasePara basePara) {\n        filepath \u003d basePara.getSqlpath();\n        if (paging \u003d basePara.isPaging()) {\n            start \u003d basePara.getStart();\n            limit \u003d basePara.getLimit();\n        }\n        sort \u003d basePara.getSort();\n        dir \u003d basePara.getDir();\n        pas \u003d basePara.single2plannar();\n        this.parseXML();\n        querySql \u003d querySql \u003d\u003d null ? basePara.getQuerySql() : querySql;\n        queryValue \u003d basePara.getQueryValue();\n        this.getCount();\n        this.getColsName();\n        this.loadDataWithSql();\n    }\n\n    /**\n     * 从xml解析sql\n     */\n    public void parseXML() {\n        String pa \u003d this.getClass().getResource(\"Loader.class\").toString();\n        String rootpath \u003d pa.substring(pa.indexOf(\":\") + 2, pa.lastIndexOf(\"classes\") + 8).replaceAll(\"%20\", \" \");\n        String[] path \u003d this.filepath.split(\"//\");\n        String filepath \u003d rootpath + XMLPATH + path[0] + \".xml\";\n        File file \u003d new File(filepath);\n        SAXReader reader \u003d new SAXReader();\n        try {\n            Document doc \u003d reader.read(file);\n            Element root \u003d doc.getRootElement();\n            for (Iterator it \u003d root.elementIterator(); it.hasNext(); ) {\n                Element el \u003d (Element) it.next();\n                if (el.getName().equals(path[1])) {\n                    sql \u003d el.elementText(\"main_sql\");\n                    querySql \u003d el.elementText(\"query_sql\");\n                    break;\n                }\n            }\n        } catch (DocumentException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 获取总记录数\n     */\n    public void getCount() {\n        String subsql \u003d \"\";\n        this.getQuerySql();\n        if (this.sql.lastIndexOf(\"group by\") !\u003d -1) {\n            subsql \u003d this.sql.substring(this.sql.lastIndexOf(\"from\"), this.sql.lastIndexOf(\"group by\"));\n        } else {\n            subsql \u003d this.sql.substring(this.sql.lastIndexOf(\"from\"));\n        }\n        session \u003d HibernateSessionFactory.currentSession();\n        query \u003d session.createSQLQuery(\"select count(1) \" + subsql);\n        if (pas !\u003d null) {\n            query \u003d this.getParams(query, pas);\n        }\n        totalCount \u003d Integer.parseInt(query.uniqueResult() + \"\");\n        HibernateSessionFactory.closeSession();\n    }\n\n    /**\n     * 获取sql中的字段名集合\n     */\n    public void getColsName() {\n        String colssql \u003d this.sql.substring(this.sql.lastIndexOf(\"select\") + 6, this.sql.lastIndexOf(\"from\"));\n        String[] cols \u003d colssql.split(\",\");\n        colNames \u003d new String[cols.length];\n        for (int i \u003d 0; i \u003c cols.length; i++) {\n            String[] subcols \u003d new String[cols.length];\n            if (cols[i].indexOf(\" as \") \u003e 0) {\n                subcols \u003d cols[i].split(\"as\");\n                colNames[i] \u003d subcols[1].trim();\n            } else {\n                if (cols[i].indexOf(\".\") \u003e 0) {\n                    colNames[i] \u003d cols[i].substring(cols[i].indexOf(\".\") + 1).trim();\n                } else {\n                    colNames[i] \u003d cols[i].trim();\n                }\n            }\n        }\n    }\n\n    /**\n     * 查询数据\n     */\n    public List loadDataWithSql() {\n        session \u003d HibernateSessionFactory.currentSession();\n        this.getQuerySql();\n        if (sort !\u003d null \u0026\u0026 sort !\u003d \"\") {\n            if (this.sql.indexOf(\"order by\") \u003e 0) {\n                this.sql \u003d this.sql.substring(0, this.sql.indexOf(\"order by\")) + \" order by \" + sort + \" \" + dir;\n            } else {\n                this.sql \u003d this.sql + \" order by \" + sort + \" \" + dir;\n            }\n        }\n        query \u003d session.createSQLQuery(this.sql);\n        if (pas !\u003d null) {\n            query \u003d this.getParams(query, pas);\n        }\n        if (paging) {\n            query.setFirstResult(start);\n            query.setMaxResults(limit);\n        }\n        List rows \u003d query.list();\n        HibernateSessionFactory.closeSession();\n        this.setRs(rows);\n        return rows;\n    }\n\n    public void getQuerySql() {\n        int wherenum, ordernum, groupnum;\n        System.out.println(\"querySql:\" + querySql + \",sql:\" + sql);\n        if (querySql !\u003d null) {\n            wherenum \u003d this.sql.indexOf(\"where\");\n            ordernum \u003d this.sql.indexOf(\"order by\");\n            groupnum \u003d this.sql.indexOf(\"group by\");\n            querySql \u003d querySql.replace(\"?\", queryValue);\n            System.out.println(\"\u0026\u0026\u0026\u0026\u0026\u0026\u0026\u0026querySql:\" + querySql);\n            if (wherenum \u003e 0) {\n                if (groupnum \u003e 0) {\n                    this.sql \u003d this.sql.substring(0, groupnum) + \" and (\" + querySql + \")\" + this.sql.substring(groupnum);\n                } else if (ordernum \u003e 0) {\n                    this.sql \u003d this.sql.substring(0, ordernum) + \" and (\" + querySql + \")\" + this.sql.substring(ordernum);\n                }\n            } else {\n                if (groupnum \u003e 0) {\n                    this.sql \u003d this.sql.substring(0, groupnum) + \" where (\" + querySql + \")\" + this.sql.substring(groupnum);\n                } else if (ordernum \u003e 0) {\n                    this.sql \u003d this.sql.substring(0, ordernum) + \" where (\" + querySql + \")\" + this.sql.substring(ordernum);\n                } else {\n                    this.sql \u003d this.sql + \" where (\" + querySql + \")\";\n                }\n            }\n        }\n    }\n\n    /**\n     * 接收参数\n     */\n    public Query getParams(Query query, String[][] params) {\n        if (params !\u003d null) {\n            // 参数值\n            String[] pValue \u003d params[0];\n            // 参数值类型\n            String[] pType \u003d params[1];\n            for (int i \u003d 0; i \u003c pValue.length; i++) {\n                if (pType[i].equals(\"String\")) {\n                    query.setParameter(i, pValue[i]);\n                } else if (pType[i].equals(\"Long\")) {\n                    query.setParameter(i, Long.parseLong(pValue[i]));\n                } else if (pType[i].equals(\"Integer\")) {\n                    query.setParameter(i, Integer.parseInt(pValue[i]));\n                } else if (pType[i].equals(\"Double\")) {\n                    query.setParameter(i, Double.parseDouble(pValue[i]));\n                } else if (pType[i].equals(\"Date\")) {\n                    try {\n                        query.setParameter(i, new SimpleDateFormat(\"yyyy-MM-dd\").parse(pValue[i]));\n                    } catch (HibernateException e) {\n                        // TODO Auto-generated catch block\n                        e.printStackTrace();\n                    } catch (ParseException e) {\n                        // TODO Auto-generated catch block\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n        return query;\n    }\n\n    /**\n     * 首页Tree数据\n     */\n    public String getArrayResults() {\n        List rows \u003d this.getRs();\n        if (rows.size() \u003d\u003d 0) {\n            return \"\";\n        }\n        String jsonstr \u003d \"\";\n        for (Iterator\u003c?\u003e it \u003d rows.iterator(); it.hasNext(); ) {\n            Object[] obj \u003d (Object[]) it.next();\n            String constr \u003d \"{\";\n            for (int i \u003d 0; i \u003c obj.length; i++) {\n                if (i \u003d\u003d obj.length - 1) {\n                    constr +\u003d \u0027\"\u0027 + colNames[i] + \u0027\"\u0027 + \":\" + \u0027\"\u0027 + obj[i] + \u0027\"\u0027;\n                } else {\n                    constr +\u003d \u0027\"\u0027 + colNames[i] + \u0027\"\u0027 + \":\" + \u0027\"\u0027 + obj[i] + \u0027\"\u0027 + \",\";\n                }\n            }\n            constr +\u003d \"}\";\n            jsonstr +\u003d constr + \",\";\n        }\n        jsonstr \u003d \"[\" + jsonstr.substring(0, jsonstr.lastIndexOf(\",\")) + \"]\";\n        return jsonstr;\n    }\n\n    public void collectToMap(String flag) {\n        ArrayList\u003cObject\u003e al \u003d null;\n        HashMap\u003cString, Object\u003e map \u003d null;\n        String[] colNameArray \u003d this.getColNames();\n        if (flag.equals(\"combo\")) {\n            colNameArray[0] \u003d \"value\";\n            colNameArray[1] \u003d \"text\";\n        }\n        al \u003d new ArrayList\u003cObject\u003e();\n        List rs \u003d this.getRs();\n        if (rs.size() \u003e 0) {\n            al \u003d new ArrayList\u003cObject\u003e();\n            for (Iterator\u003c?\u003e it \u003d rs.iterator(); it.hasNext(); ) {\n                Object[] obj \u003d null;\n                if (colNameArray.length \u003d\u003d 1) {\n                    obj \u003d new Object[] { it.next() };\n                } else {\n                    obj \u003d (Object[]) it.next();\n                }\n                map \u003d new HashMap\u003cString, Object\u003e();\n                for (int i \u003d 0; i \u003c colNameArray.length; i++) {\n                    String tag \u003d colNameArray[i];\n                    map.put(tag, obj[i]);\n                }\n                al.add(map);\n            }\n        }\n        range \u003d new ListRange();\n        range.setData(al);\n        range.setTotalSize(this.getTotalCount());\n    }\n\n    public void collectToMap() {\n        this.collectToMap(\"\");\n    }\n}\n",
    "package": "com.hf.sfm.util",
    "classname": "Loader",
    "id": "/EvoSuiteBenchmark/original/7_sfmis/src/main/java/com/hf/sfm/util/Loader_0Test.java",
    "test_prompt": "// Loader_0Test.java\npackage com.hf.sfm.util;\n\nimport java.io.File;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\n/**\n* Test class of {@link Loader}.\n* It contains ten unit test cases for the {@link Loader#loadDataWithSql()} method.\n*/\nclass Loader_0Test {",
    "method_signature": "loadDataWithSql()",
    "suffix": "0"
  }
]